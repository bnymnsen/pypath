Search.setIndex({"docnames": ["api/pypath", "api/pypath.core", "api/pypath.core.annot", "api/pypath.core.annot.Adhesome", "api/pypath.core.annot.Almen2009", "api/pypath.core.annot.AnnotationBase", "api/pypath.core.annot.AnnotationTable", "api/pypath.core.annot.Baccin2019", "api/pypath.core.annot.Biogps", "api/pypath.core.annot.CancerGeneCensus", "api/pypath.core.annot.Cancerdrugsdb", "api/pypath.core.annot.Cancersea", "api/pypath.core.annot.CellPhoneDB", "api/pypath.core.annot.CellPhoneDBComplex", "api/pypath.core.annot.CellSurfaceProteinAtlas", "api/pypath.core.annot.CellSurfaceProteinAtlasCellType", "api/pypath.core.annot.Cellcall", "api/pypath.core.annot.Cellcellinteractions", "api/pypath.core.annot.Cellchatdb", "api/pypath.core.annot.CellchatdbComplex", "api/pypath.core.annot.Cellinker", "api/pypath.core.annot.CellinkerComplex", "api/pypath.core.annot.Celltalkdb", "api/pypath.core.annot.Celltypist", "api/pypath.core.annot.Comppi", "api/pypath.core.annot.Connectomedb", "api/pypath.core.annot.Corum", "api/pypath.core.annot.CorumFuncat", "api/pypath.core.annot.CorumGO", "api/pypath.core.annot.Cpad", "api/pypath.core.annot.CustomAnnotation", "api/pypath.core.annot.Cytosig", "api/pypath.core.annot.Dgidb", "api/pypath.core.annot.Disgenet", "api/pypath.core.annot.Embrace", "api/pypath.core.annot.Exocarta", "api/pypath.core.annot.GOCustomIntercell", "api/pypath.core.annot.GOIntercell", "api/pypath.core.annot.Gpcrdb", "api/pypath.core.annot.GuideToPharmacology", "api/pypath.core.annot.HPO", "api/pypath.core.annot.Hgnc", "api/pypath.core.annot.HpmrComplex", "api/pypath.core.annot.HumanPlasmaMembraneReceptome", "api/pypath.core.annot.HumanProteinAtlas", "api/pypath.core.annot.HumanProteinAtlasSecretome", "api/pypath.core.annot.HumanProteinAtlasSubcellular", "api/pypath.core.annot.Humancellmap", "api/pypath.core.annot.Icellnet", "api/pypath.core.annot.IcellnetComplex", "api/pypath.core.annot.Integrins", "api/pypath.core.annot.InterPro", "api/pypath.core.annot.Intogen", "api/pypath.core.annot.Italk", "api/pypath.core.annot.KeggPathways", "api/pypath.core.annot.KeggPathwaysPC", "api/pypath.core.annot.Kinasedotcom", "api/pypath.core.annot.Kirouac2010", "api/pypath.core.annot.Lambert2018", "api/pypath.core.annot.LigandReceptor", "api/pypath.core.annot.Locate", "api/pypath.core.annot.Lrdb", "api/pypath.core.annot.Matrisome", "api/pypath.core.annot.Matrixdb", "api/pypath.core.annot.Mcam", "api/pypath.core.annot.Membranome", "api/pypath.core.annot.Msigdb", "api/pypath.core.annot.NetpathPathways", "api/pypath.core.annot.Opm", "api/pypath.core.annot.Panglaodb", "api/pypath.core.annot.Phobius", "api/pypath.core.annot.Phosphatome", "api/pypath.core.annot.Progeny", "api/pypath.core.annot.Ramilowski2015", "api/pypath.core.annot.Ramilowski2015Location", "api/pypath.core.annot.Scconnect", "api/pypath.core.annot.ScconnectComplex", "api/pypath.core.annot.SignalinkFunctions", "api/pypath.core.annot.SignalinkPathways", "api/pypath.core.annot.SignorPathways", "api/pypath.core.annot.Surfaceome", "api/pypath.core.annot.Talklr", "api/pypath.core.annot.Tcdb", "api/pypath.core.annot.Tfcensus", "api/pypath.core.annot.Topdb", "api/pypath.core.annot.UniprotFamilies", "api/pypath.core.annot.UniprotKeywords", "api/pypath.core.annot.UniprotLocations", "api/pypath.core.annot.UniprotTissues", "api/pypath.core.annot.UniprotTopologies", "api/pypath.core.annot.Vesiclepedia", "api/pypath.core.annot.Wang", "api/pypath.core.annot.Zhong2015", "api/pypath.core.annot.get_db", "api/pypath.core.annot.init_db", "api/pypath.core.attrs", "api/pypath.core.attrs.AttributeHandler", "api/pypath.core.common", "api/pypath.core.common.filter_network_df", "api/pypath.core.complex", "api/pypath.core.complex.AbstractComplexResource", "api/pypath.core.complex.CellPhoneDB", "api/pypath.core.complex.Cellchatdb", "api/pypath.core.complex.Cellinker", "api/pypath.core.complex.Compleat", "api/pypath.core.complex.ComplexAggregator", "api/pypath.core.complex.ComplexPortal", "api/pypath.core.complex.Corum", "api/pypath.core.complex.GuideToPharmacology", "api/pypath.core.complex.Havugimana", "api/pypath.core.complex.Hpmr", "api/pypath.core.complex.Humap", "api/pypath.core.complex.Humap2", "api/pypath.core.complex.Icellnet", "api/pypath.core.complex.Kegg", "api/pypath.core.complex.Pdb", "api/pypath.core.complex.Signor", "api/pypath.core.complex.Spike", "api/pypath.core.complex.all_complexes", "api/pypath.core.complex.get_db", "api/pypath.core.complex.init_db", "api/pypath.core.entity", "api/pypath.core.entity.Entity", "api/pypath.core.entity.EntityKey", "api/pypath.core.entity.EntityList", "api/pypath.core.enz_sub", "api/pypath.core.enz_sub.EnzymeSubstrateAggregator", "api/pypath.core.enz_sub.EnzymeSubstrateHomologyProcessor", "api/pypath.core.enz_sub.EnzymeSubstrateProcessor", "api/pypath.core.enz_sub.get_db", "api/pypath.core.enz_sub.init_db", "api/pypath.core.evidence", "api/pypath.core.evidence.Evidence", "api/pypath.core.evidence.Evidences", "api/pypath.core.interaction", "api/pypath.core.interaction.Interaction", "api/pypath.core.interaction.InteractionDataFrameRecord", "api/pypath.core.interaction.InteractionKey", "api/pypath.core.intercell", "api/pypath.core.intercell.IntercellAnnotation", "api/pypath.core.intercell.get_db", "api/pypath.core.intercell.init_db", "api/pypath.core.intercell_annot", "api/pypath.core.intercell_annot.excludes", "api/pypath.core.network", "api/pypath.core.network.Network", "api/pypath.core.network.NetworkEntityCollection", "api/pypath.core.network.NetworkStatsRecord", "api/pypath.core.network.get_db", "api/pypath.core.network.init_db", "api/pypath.data", "api/pypath.disclaimer", "api/pypath.info", "api/pypath.inputs", "api/pypath.inputs.abs", "api/pypath.inputs.abs.abs_interactions", "api/pypath.inputs.acsn", "api/pypath.inputs.acsn.acsn_interactions", "api/pypath.inputs.acsn.acsn_interactions_sif", "api/pypath.inputs.adhesome", "api/pypath.inputs.adhesome.adhesome_annotations", "api/pypath.inputs.adhesome.adhesome_interactions", "api/pypath.inputs.almen2009", "api/pypath.inputs.almen2009.almen2009_annotations", "api/pypath.inputs.baccin2019", "api/pypath.inputs.baccin2019.baccin2019_annotations", "api/pypath.inputs.baccin2019.baccin2019_interactions", "api/pypath.inputs.biogps", "api/pypath.inputs.biogps.BiogpsDataset", "api/pypath.inputs.biogps.biogps_annotations", "api/pypath.inputs.biogps.biogps_datasets", "api/pypath.inputs.biogps.biogps_download", "api/pypath.inputs.biogps.biogps_download_all", "api/pypath.inputs.biogrid", "api/pypath.inputs.biogrid.biogrid_all_interactions", "api/pypath.inputs.biogrid.biogrid_interactions", "api/pypath.inputs.biomart", "api/pypath.inputs.biomart.biomart_homology", "api/pypath.inputs.biomart.biomart_microarray", "api/pypath.inputs.biomart.biomart_microarray_types", "api/pypath.inputs.biomart.biomart_microarrays", "api/pypath.inputs.biomart.biomart_query", "api/pypath.inputs.biomodels", "api/pypath.inputs.biomodels.download_single_model", "api/pypath.inputs.biomodels.get_all_models", "api/pypath.inputs.biomodels.get_biomodels", "api/pypath.inputs.biomodels.get_biomodels_req", "api/pypath.inputs.biomodels.get_single_model", "api/pypath.inputs.ca1", "api/pypath.inputs.ca1.ca1_interactions", "api/pypath.inputs.cancercellmap", "api/pypath.inputs.cancercellmap.ccmap_interactions", "api/pypath.inputs.cancerdrugsdb", "api/pypath.inputs.cancerdrugsdb.cancerdrugsdb_annotations", "api/pypath.inputs.cancerdrugsdb.cancerdrugsdb_download", "api/pypath.inputs.cancerdrugsdb.cancerdrugsdb_interactions", "api/pypath.inputs.cancersea", "api/pypath.inputs.cancersea.cancersea_annotations", "api/pypath.inputs.cell", "api/pypath.inputs.cell.cell_supplementary", "api/pypath.inputs.cellcall", "api/pypath.inputs.cellcall.cellcall_annotations", "api/pypath.inputs.cellcall.cellcall_download", "api/pypath.inputs.cellcall.cellcall_download_all", "api/pypath.inputs.cellcall.cellcall_interactions", "api/pypath.inputs.cellcellinteractions", "api/pypath.inputs.cellcellinteractions.cellcellinteractions_annotations", "api/pypath.inputs.cellchatdb", "api/pypath.inputs.cellchatdb.cellchatdb_annotations", "api/pypath.inputs.cellchatdb.cellchatdb_cofactors", "api/pypath.inputs.cellchatdb.cellchatdb_complexes", "api/pypath.inputs.cellchatdb.cellchatdb_download", "api/pypath.inputs.cellchatdb.cellchatdb_interactions", "api/pypath.inputs.cellinker", "api/pypath.inputs.cellinker.CellinkerInteraction", "api/pypath.inputs.cellinker.cellinker_annotations", "api/pypath.inputs.cellinker.cellinker_complex_annotations", "api/pypath.inputs.cellinker.cellinker_complexes", "api/pypath.inputs.cellinker.cellinker_complexes_raw", "api/pypath.inputs.cellinker.cellinker_lr_interactions", "api/pypath.inputs.cellinker.cellinker_lr_interactions_raw", "api/pypath.inputs.cellinker.cellinker_protein_annotations", "api/pypath.inputs.cellinker.cellinker_smol_interactions", "api/pypath.inputs.cellinker.cellinker_smol_interactions_raw", "api/pypath.inputs.cellinker.components_to_complex", "api/pypath.inputs.cellphonedb", "api/pypath.inputs.cellphonedb.CellPhoneDBAnnotation", "api/pypath.inputs.cellphonedb.cellphonedb_complex_annotations", "api/pypath.inputs.cellphonedb.cellphonedb_complexes", "api/pypath.inputs.cellphonedb.cellphonedb_interactions", "api/pypath.inputs.cellphonedb.cellphonedb_ligands_receptors", "api/pypath.inputs.cellphonedb.cellphonedb_protein_annotations", "api/pypath.inputs.celltalkdb", "api/pypath.inputs.celltalkdb.celltalkdb_annotations", "api/pypath.inputs.celltalkdb.celltalkdb_download", "api/pypath.inputs.celltalkdb.celltalkdb_interactions", "api/pypath.inputs.celltypist", "api/pypath.inputs.celltypist.celltypist_annotations", "api/pypath.inputs.chembl", "api/pypath.inputs.chembl.chembl_activities", "api/pypath.inputs.chembl.chembl_assays", "api/pypath.inputs.chembl.chembl_documents", "api/pypath.inputs.chembl.chembl_drug_indications", "api/pypath.inputs.chembl.chembl_mechanisms", "api/pypath.inputs.chembl.chembl_molecules", "api/pypath.inputs.chembl.chembl_targets", "api/pypath.inputs.clinvar", "api/pypath.inputs.clinvar.clinvar_citations", "api/pypath.inputs.clinvar.clinvar_raw", "api/pypath.inputs.collectri", "api/pypath.inputs.collectri.collectri_interactions", "api/pypath.inputs.common", "api/pypath.inputs.common.csv_sep_change", "api/pypath.inputs.common.glom_fields", "api/pypath.inputs.common.json_extract", "api/pypath.inputs.common.json_read", "api/pypath.inputs.common.read_table", "api/pypath.inputs.common.read_xls", "api/pypath.inputs.compleat", "api/pypath.inputs.compleat.compleat_complexes", "api/pypath.inputs.compleat.compleat_raw", "api/pypath.inputs.complexportal", "api/pypath.inputs.complexportal.complexportal_complexes", "api/pypath.inputs.comppi", "api/pypath.inputs.comppi.comppi_interaction_locations", "api/pypath.inputs.comppi.comppi_locations", "api/pypath.inputs.connectomedb", "api/pypath.inputs.connectomedb.connectomedb_annotations", "api/pypath.inputs.connectomedb.connectomedb_interactions", "api/pypath.inputs.corum", "api/pypath.inputs.corum.corum_complexes", "api/pypath.inputs.cosmic", "api/pypath.inputs.cosmic.cancer_gene_census_annotations", "api/pypath.inputs.cpad", "api/pypath.inputs.cpad.cpad_annotations", "api/pypath.inputs.cpad.cpad_pathway_cancer", "api/pypath.inputs.cpad.get_cpad", "api/pypath.inputs.cpdb", "api/pypath.inputs.cpdb.cpdb_interactions", "api/pypath.inputs.cpdb.cpdb_interactions_ltp", "api/pypath.inputs.credentials", "api/pypath.inputs.credentials.credentials", "api/pypath.inputs.csa", "api/pypath.inputs.csa.get_csa", "api/pypath.inputs.cspa", "api/pypath.inputs.cspa.cspa_annotations", "api/pypath.inputs.cspa.cspa_cell_type_annotations", "api/pypath.inputs.cspa.cspa_cell_types", "api/pypath.inputs.ctdbase", "api/pypath.inputs.ctdbase.ctdbase_relations", "api/pypath.inputs.ctdbase.ctdbase_vocabulary", "api/pypath.inputs.cytosig", "api/pypath.inputs.cytosig.cytosig_annotations", "api/pypath.inputs.cytosig.cytosig_df", "api/pypath.inputs.dbptm", "api/pypath.inputs.dbptm.dbptm_enzyme_substrate", "api/pypath.inputs.dbptm.dbptm_enzyme_substrate_old", "api/pypath.inputs.dbptm.dbptm_interactions", "api/pypath.inputs.deathdomain", "api/pypath.inputs.deathdomain.deathdomain_interactions", "api/pypath.inputs.deathdomain.deathdomain_interactions_rescued", "api/pypath.inputs.depod", "api/pypath.inputs.depod.depod_enzyme_substrate", "api/pypath.inputs.depod.depod_interactions", "api/pypath.inputs.dgidb", "api/pypath.inputs.dgidb.dgidb_annotations", "api/pypath.inputs.dgidb.dgidb_interactions", "api/pypath.inputs.dgidb.get_dgidb_old", "api/pypath.inputs.dip", "api/pypath.inputs.dip.dip_interactions", "api/pypath.inputs.dip.dip_login", "api/pypath.inputs.disgenet", "api/pypath.inputs.disgenet.DisgenetApi", "api/pypath.inputs.disgenet.disease_id_mappings", "api/pypath.inputs.disgenet.disgenet_annotations", "api/pypath.inputs.disgenet.variant_gene_mappings", "api/pypath.inputs.domino", "api/pypath.inputs.domino.domino_ddi", "api/pypath.inputs.domino.domino_enzsub", "api/pypath.inputs.domino.domino_interactions", "api/pypath.inputs.domino.get_domino", "api/pypath.inputs.dorothea", "api/pypath.inputs.dorothea.DorotheaInteraction", "api/pypath.inputs.dorothea.dorothea_full_raw", "api/pypath.inputs.dorothea.dorothea_interactions", "api/pypath.inputs.dorothea.dorothea_interactions_old", "api/pypath.inputs.dorothea.dorothea_old_csv", "api/pypath.inputs.dorothea.dorothea_rda_raw", "api/pypath.inputs.dorothea.get_dorothea_old", "api/pypath.inputs.dorothea.get_tfregulons", "api/pypath.inputs.dorothea.tfregulons_interactions", "api/pypath.inputs.dorothea.tfregulons_interactions_old", "api/pypath.inputs.drugbank", "api/pypath.inputs.drugbank.DrugbankFull", "api/pypath.inputs.drugbank.drugbank_annotations", "api/pypath.inputs.drugbank.drugbank_drugs", "api/pypath.inputs.drugbank.drugbank_interactions", "api/pypath.inputs.drugbank.drugbank_mapping", "api/pypath.inputs.drugbank.drugbank_raw_interactions", "api/pypath.inputs.drugcentral", "api/pypath.inputs.drugcentral.drugcentral_drugs", "api/pypath.inputs.drugcentral.drugcentral_interactions", "api/pypath.inputs.drugcentral.drugcentral_mapping", "api/pypath.inputs.ebi", "api/pypath.inputs.ebi.ebi_rest", "api/pypath.inputs.elm", "api/pypath.inputs.elm.elm_classes", "api/pypath.inputs.elm.elm_domains", "api/pypath.inputs.elm.elm_instances", "api/pypath.inputs.elm.elm_interactions", "api/pypath.inputs.embopress", "api/pypath.inputs.embopress.embopress_supplementary", "api/pypath.inputs.embrace", "api/pypath.inputs.embrace.embrace_annotations", "api/pypath.inputs.embrace.embrace_interactions", "api/pypath.inputs.embrace.embrace_raw", "api/pypath.inputs.embrace.embrace_translated", "api/pypath.inputs.encode", "api/pypath.inputs.encode.encode_tf_mirna_interactions", "api/pypath.inputs.ensembl", "api/pypath.inputs.ensembl.ensembl_organisms", "api/pypath.inputs.exocarta", "api/pypath.inputs.exocarta.get_exocarta", "api/pypath.inputs.exocarta.get_vesiclepedia", "api/pypath.inputs.genecards", "api/pypath.inputs.genecards.genecards_datasheet", "api/pypath.inputs.genecards.genecards_soup", "api/pypath.inputs.genecards.genecards_summaries", "api/pypath.inputs.get_method", "api/pypath.inputs.go", "api/pypath.inputs.go.get_go_desc", "api/pypath.inputs.go.get_go_quick", "api/pypath.inputs.go.get_goslim", "api/pypath.inputs.go.go_ancestors", "api/pypath.inputs.go.go_ancestors_goose", "api/pypath.inputs.go.go_ancestors_quickgo", "api/pypath.inputs.go.go_annotations", "api/pypath.inputs.go.go_annotations_all", "api/pypath.inputs.go.go_annotations_goa", "api/pypath.inputs.go.go_annotations_goose", "api/pypath.inputs.go.go_annotations_quickgo", "api/pypath.inputs.go.go_annotations_solr", "api/pypath.inputs.go.go_annotations_uniprot", "api/pypath.inputs.go.go_descendants", "api/pypath.inputs.go.go_descendants_goose", "api/pypath.inputs.go.go_descendants_quickgo", "api/pypath.inputs.go.go_descendants_to_ancestors", "api/pypath.inputs.go.go_terms", "api/pypath.inputs.go.go_terms_goose", "api/pypath.inputs.go.go_terms_quickgo", "api/pypath.inputs.go.go_terms_solr", "api/pypath.inputs.gpcrdb", "api/pypath.inputs.gpcrdb.gpcrdb_annotations", "api/pypath.inputs.graphviz", "api/pypath.inputs.graphviz.graphviz_attrs", "api/pypath.inputs.guide2pharma", "api/pypath.inputs.guide2pharma.guide2pharma_complexes", "api/pypath.inputs.guide2pharma.guide2pharma_download", "api/pypath.inputs.guide2pharma.guide2pharma_interactions", "api/pypath.inputs.havugimana", "api/pypath.inputs.havugimana.get_havugimana", "api/pypath.inputs.havugimana.havugimana_complexes", "api/pypath.inputs.hgnc", "api/pypath.inputs.hgnc.hgnc_genegroups", "api/pypath.inputs.hippie", "api/pypath.inputs.hippie.hippie_interactions", "api/pypath.inputs.hmdb", "api/pypath.inputs.hmdb.Field", "api/pypath.inputs.hmdb.hmdb_iter_metabolites", "api/pypath.inputs.hmdb.hmdb_mapping", "api/pypath.inputs.hmdb.hmdb_metabolites_raw", "api/pypath.inputs.hmdb.hmdb_table", "api/pypath.inputs.hmdb.hmdb_xml", "api/pypath.inputs.homologene", "api/pypath.inputs.homologene.get_homologene", "api/pypath.inputs.homologene.homologene_dict", "api/pypath.inputs.homologene.homologene_uniprot_dict", "api/pypath.inputs.hpmr", "api/pypath.inputs.hpmr.HpmrInteraction", "api/pypath.inputs.hpmr.get_hpmr", "api/pypath.inputs.hpmr.hpmr_annotations", "api/pypath.inputs.hpmr.hpmr_complexes", "api/pypath.inputs.hpmr.hpmr_interactions", "api/pypath.inputs.hpo", "api/pypath.inputs.hpo.hpo_annotations", "api/pypath.inputs.hpo.hpo_diseases", "api/pypath.inputs.hpo.hpo_ontology", "api/pypath.inputs.hpo.hpo_terms", "api/pypath.inputs.hprd", "api/pypath.inputs.hprd.get_hprd", "api/pypath.inputs.hprd.hprd_enzyme_substrate", "api/pypath.inputs.hprd.hprd_interactions", "api/pypath.inputs.hprd.hprd_interactions_htp", "api/pypath.inputs.htri", "api/pypath.inputs.htri.htri_interactions", "api/pypath.inputs.humancellmap", "api/pypath.inputs.humancellmap.humancellmap_annotations", "api/pypath.inputs.humap", "api/pypath.inputs.humap.humap2_complexes", "api/pypath.inputs.humap.humap_complexes", "api/pypath.inputs.huri", "api/pypath.inputs.huri.hi_i_interactions", "api/pypath.inputs.huri.hi_ii_interactions", "api/pypath.inputs.huri.hi_iii_old", "api/pypath.inputs.huri.hi_union_interactions", "api/pypath.inputs.huri.huri_interactions", "api/pypath.inputs.huri.lit_bm_13_interactions", "api/pypath.inputs.huri.lit_bm_17_interactions", "api/pypath.inputs.huri.lit_bm_interactions", "api/pypath.inputs.huri.rolland_hi_ii_14", "api/pypath.inputs.huri.vidal_hi_iii_old", "api/pypath.inputs.huri.yang2016_interactions", "api/pypath.inputs.huri.yu2011_interactions", "api/pypath.inputs.i3d", "api/pypath.inputs.i3d.get_i3d", "api/pypath.inputs.icellnet", "api/pypath.inputs.icellnet.IcellnetRecord", "api/pypath.inputs.icellnet.icellnet_annotations", "api/pypath.inputs.icellnet.icellnet_complexes", "api/pypath.inputs.icellnet.icellnet_interactions", "api/pypath.inputs.ielm", "api/pypath.inputs.ielm.get_ielm", "api/pypath.inputs.ielm.get_ielm_huge", "api/pypath.inputs.imweb", "api/pypath.inputs.imweb.get_imweb", "api/pypath.inputs.imweb.get_imweb_req", "api/pypath.inputs.innatedb", "api/pypath.inputs.innatedb.innatedb_interactions", "api/pypath.inputs.instruct", "api/pypath.inputs.instruct.get_instruct", "api/pypath.inputs.instruct.get_instruct_offsets", "api/pypath.inputs.intact", "api/pypath.inputs.intact.intact_interactions", "api/pypath.inputs.integrins", "api/pypath.inputs.integrins.get_integrins", "api/pypath.inputs.interpro", "api/pypath.inputs.interpro.interpro2go_annotations", "api/pypath.inputs.interpro.interpro_annotations", "api/pypath.inputs.interpro.interpro_entries", "api/pypath.inputs.interpro.interpro_xrefs", "api/pypath.inputs.intogen", "api/pypath.inputs.intogen.intogen_annotations", "api/pypath.inputs.ipi", "api/pypath.inputs.ipi.ipi_uniprot", "api/pypath.inputs.iptmnet", "api/pypath.inputs.iptmnet.IptmnetInteraction", "api/pypath.inputs.iptmnet.iptmnet_interactions", "api/pypath.inputs.italk", "api/pypath.inputs.italk.italk_annotations", "api/pypath.inputs.italk.italk_interactions", "api/pypath.inputs.italk.italk_raw", "api/pypath.inputs.kea", "api/pypath.inputs.kea.kea_enzyme_substrate", "api/pypath.inputs.kea.kea_interactions", "api/pypath.inputs.kegg", "api/pypath.inputs.kegg.KeggPathway", "api/pypath.inputs.kegg.kegg_dbget", "api/pypath.inputs.kegg.kegg_interactions", "api/pypath.inputs.kegg.kegg_medicus", "api/pypath.inputs.kegg.kegg_medicus_complexes", "api/pypath.inputs.kegg.kegg_medicus_interactions", "api/pypath.inputs.kegg.kegg_pathway_annotations", "api/pypath.inputs.kegg.kegg_pathway_annotations_pathwaycommons", "api/pypath.inputs.kegg.kegg_pathways", "api/pypath.inputs.kegg_api", "api/pypath.inputs.kegg_api.disease_to_drug", "api/pypath.inputs.kegg_api.disease_to_gene", "api/pypath.inputs.kegg_api.disease_to_pathway", "api/pypath.inputs.kegg_api.drug_to_disease", "api/pypath.inputs.kegg_api.drug_to_drug", "api/pypath.inputs.kegg_api.drug_to_gene", "api/pypath.inputs.kegg_api.drug_to_pathway", "api/pypath.inputs.kegg_api.gene_to_disease", "api/pypath.inputs.kegg_api.gene_to_drug", "api/pypath.inputs.kegg_api.gene_to_pathway", "api/pypath.inputs.kegg_api.kegg_drug_to_chebi", "api/pypath.inputs.kegg_api.kegg_gene_to_ncbi_geneid", "api/pypath.inputs.kegg_api.kegg_gene_to_uniprot", "api/pypath.inputs.kegg_api.pathway_to_disease", "api/pypath.inputs.kegg_api.pathway_to_drug", "api/pypath.inputs.kegg_api.pathway_to_gene", "api/pypath.inputs.kinasedotcom", "api/pypath.inputs.kinasedotcom.kinasedotcom_annotations", "api/pypath.inputs.kirouac2010", "api/pypath.inputs.kirouac2010.kirouac2010_interactions", "api/pypath.inputs.lambert2018", "api/pypath.inputs.lambert2018.lambert2018_annotations", "api/pypath.inputs.lambert2018.lambert2018_s1_raw", "api/pypath.inputs.laudanna", "api/pypath.inputs.laudanna.laudanna_directions", "api/pypath.inputs.laudanna.laudanna_effects", "api/pypath.inputs.li2012", "api/pypath.inputs.li2012.get_li2012", "api/pypath.inputs.li2012.li2012_dmi", "api/pypath.inputs.li2012.li2012_enzyme_substrate", "api/pypath.inputs.li2012.li2012_interactions", "api/pypath.inputs.lincs", "api/pypath.inputs.lincs.lincs_compounds", "api/pypath.inputs.lmpid", "api/pypath.inputs.lmpid.lmpid_dmi", "api/pypath.inputs.lmpid.lmpid_interactions", "api/pypath.inputs.lmpid.load_lmpid", "api/pypath.inputs.lncdisease", "api/pypath.inputs.lncdisease.lncdisease_interactions", "api/pypath.inputs.lncrnadb", "api/pypath.inputs.lncrnadb.lncrnadb_interactions", "api/pypath.inputs.locate", "api/pypath.inputs.locate.locate_localizations", "api/pypath.inputs.lrdb", "api/pypath.inputs.lrdb.LrdbAnnotation", "api/pypath.inputs.lrdb.lrdb_annotations", "api/pypath.inputs.lrdb.lrdb_interactions", "api/pypath.inputs.macrophage", "api/pypath.inputs.macrophage.macrophage_interactions", "api/pypath.inputs.main", "api/pypath.inputs.matrisome", "api/pypath.inputs.matrisome.matrisome_annotations", "api/pypath.inputs.matrixdb", "api/pypath.inputs.matrixdb.matrixdb_annotations", "api/pypath.inputs.matrixdb.matrixdb_ecm_proteins", "api/pypath.inputs.matrixdb.matrixdb_interactions", "api/pypath.inputs.matrixdb.matrixdb_membrane_proteins", "api/pypath.inputs.matrixdb.matrixdb_secreted_proteins", "api/pypath.inputs.mcam", "api/pypath.inputs.mcam.mcam_cell_adhesion_molecules", "api/pypath.inputs.membranome", "api/pypath.inputs.membranome.membranome_annotations", "api/pypath.inputs.mimp", "api/pypath.inputs.mimp.get_kinase_class", "api/pypath.inputs.mimp.mimp_enzyme_substrate", "api/pypath.inputs.mimp.mimp_interactions", "api/pypath.inputs.mir2disease", "api/pypath.inputs.mir2disease.mir2disease_interactions", "api/pypath.inputs.mirbase", "api/pypath.inputs.mirbase.get_mirbase_aliases", "api/pypath.inputs.mirbase.mirbase_ids", "api/pypath.inputs.mirbase.mirbase_mature", "api/pypath.inputs.mirbase.mirbase_mature_all", "api/pypath.inputs.mirbase.mirbase_precursor", "api/pypath.inputs.mirbase.mirbase_precursor_all", "api/pypath.inputs.mirbase.mirbase_precursor_to_mature", "api/pypath.inputs.mirdeathdb", "api/pypath.inputs.mirdeathdb.mirdeathdb_interactions", "api/pypath.inputs.mirecords", "api/pypath.inputs.mirecords.mirecords_interactions", "api/pypath.inputs.mirtarbase", "api/pypath.inputs.mirtarbase.mirtarbase_interactions", "api/pypath.inputs.mitab", "api/pypath.inputs.mitab.mitab_field_list", "api/pypath.inputs.mitab.mitab_field_uniprot", "api/pypath.inputs.mppi", "api/pypath.inputs.mppi.mppi_interactions", "api/pypath.inputs.ncrdeathdb", "api/pypath.inputs.ncrdeathdb.ncrdeathdb_interactions", "api/pypath.inputs.negatome", "api/pypath.inputs.negatome.negatome_interactions", "api/pypath.inputs.netbiol", "api/pypath.inputs.netbiol.arn_interactions", "api/pypath.inputs.netbiol.nrf2ome_interactions", "api/pypath.inputs.netpath", "api/pypath.inputs.netpath.netpath_interactions", "api/pypath.inputs.netpath.netpath_names", "api/pypath.inputs.netpath.netpath_pathway_annotations", "api/pypath.inputs.oma", "api/pypath.inputs.oma.oma_orthologs", "api/pypath.inputs.ontology", "api/pypath.inputs.ontology.listof_ontologies", "api/pypath.inputs.ontology.ontology", "api/pypath.inputs.opm", "api/pypath.inputs.opm.opm_annotations", "api/pypath.inputs.oreganno", "api/pypath.inputs.oreganno.oreganno_interactions", "api/pypath.inputs.oreganno.oreganno_raw", "api/pypath.inputs.panglaodb", "api/pypath.inputs.panglaodb.panglaodb_annotations", "api/pypath.inputs.panglaodb.panglaodb_raw", "api/pypath.inputs.pathophenodb", "api/pypath.inputs.pathophenodb.DiseasePathogen", "api/pypath.inputs.pathophenodb.disease_pathogen_interactions", "api/pypath.inputs.pathwaycommons", "api/pypath.inputs.pathwaycommons.PathwayCommonsInteraction", "api/pypath.inputs.pathwaycommons.PathwayCommonsResource", "api/pypath.inputs.pathwaycommons.pathwaycommons_bind_interactions", "api/pypath.inputs.pathwaycommons.pathwaycommons_biogrid_interactions", "api/pypath.inputs.pathwaycommons.pathwaycommons_corum_interactions", "api/pypath.inputs.pathwaycommons.pathwaycommons_dip_interactions", "api/pypath.inputs.pathwaycommons.pathwaycommons_hprd_interactions", "api/pypath.inputs.pathwaycommons.pathwaycommons_inoh_interactions", "api/pypath.inputs.pathwaycommons.pathwaycommons_intact_interactions", "api/pypath.inputs.pathwaycommons.pathwaycommons_interactions", "api/pypath.inputs.pathwaycommons.pathwaycommons_kegg_interactions", "api/pypath.inputs.pathwaycommons.pathwaycommons_netpath_interactions", "api/pypath.inputs.pathwaycommons.pathwaycommons_panther_interactions", "api/pypath.inputs.pathwaycommons.pathwaycommons_phosphosite_interactions", "api/pypath.inputs.pathwaycommons.pathwaycommons_reactome_interactions", "api/pypath.inputs.pathwaycommons.pathwaycommons_wikipathways_interactions", "api/pypath.inputs.pazar", "api/pypath.inputs.pazar.pazar_interactions", "api/pypath.inputs.pdb", "api/pypath.inputs.pdb.pdb_chains", "api/pypath.inputs.pdb.pdb_complexes", "api/pypath.inputs.pdb.pdb_uniprot", "api/pypath.inputs.pdzbase", "api/pypath.inputs.pdzbase.pdzbase_interactions", "api/pypath.inputs.pepcyber", "api/pypath.inputs.pepcyber.pepcyber_details", "api/pypath.inputs.pepcyber.pepcyber_interactions", "api/pypath.inputs.pfam", "api/pypath.inputs.pfam.pfam_names", "api/pypath.inputs.pfam.pfam_pdb", "api/pypath.inputs.pfam.pfam_regions", "api/pypath.inputs.pfam.pfam_uniprot", "api/pypath.inputs.pharos", "api/pypath.inputs.pharos.pharos_diseases", "api/pypath.inputs.pharos.pharos_expression", "api/pypath.inputs.pharos.pharos_general", "api/pypath.inputs.pharos.pharos_gtex", "api/pypath.inputs.pharos.pharos_ligands", "api/pypath.inputs.pharos.pharos_orthologs", "api/pypath.inputs.pharos.pharos_targets", "api/pypath.inputs.pharos.pharos_xrefs", "api/pypath.inputs.phobius", "api/pypath.inputs.phobius.phobius_annotations", "api/pypath.inputs.phosphatome", "api/pypath.inputs.phosphatome.phosphatome_annotations", "api/pypath.inputs.phosphoelm", "api/pypath.inputs.phosphoelm.phosphoelm_enzyme_substrate", "api/pypath.inputs.phosphoelm.phosphoelm_interactions", "api/pypath.inputs.phosphoelm.phosphoelm_kinases", "api/pypath.inputs.phosphonetworks", "api/pypath.inputs.phosphonetworks.phosphonetworks_enzyme_substrate", "api/pypath.inputs.phosphonetworks.phosphonetworks_interactions", "api/pypath.inputs.phosphopoint", "api/pypath.inputs.phosphopoint.phosphopoint_directions", "api/pypath.inputs.phosphopoint.phosphopoint_interactions", "api/pypath.inputs.phosphosite", "api/pypath.inputs.phosphosite.phosphosite_directions", "api/pypath.inputs.phosphosite.phosphosite_enzyme_substrate", "api/pypath.inputs.phosphosite.phosphosite_interactions", "api/pypath.inputs.phosphosite.phosphosite_interactions_all", "api/pypath.inputs.phosphosite.phosphosite_interactions_curated", "api/pypath.inputs.phosphosite.phosphosite_interactions_new", "api/pypath.inputs.phosphosite.phosphosite_interactions_noref", "api/pypath.inputs.phosphosite.phosphosite_ptm_orthology", "api/pypath.inputs.phosphosite.phosphosite_ptms", "api/pypath.inputs.phosphosite.phosphosite_regsites", "api/pypath.inputs.phosphosite.phosphosite_regsites_one_organism", "api/pypath.inputs.phosphosite.regsites_tab", "api/pypath.inputs.pisa", "api/pypath.inputs.pisa.PisaBond", "api/pypath.inputs.pisa.pisa_bonds", "api/pypath.inputs.pisa.pisa_interfaces", "api/pypath.inputs.pro", "api/pypath.inputs.pro.get_pro", "api/pypath.inputs.pro.pro_mapping", "api/pypath.inputs.progeny", "api/pypath.inputs.progeny.progeny_annotations", "api/pypath.inputs.progeny.progeny_raw", "api/pypath.inputs.proteinatlas", "api/pypath.inputs.proteinatlas.get_proteinatlas", "api/pypath.inputs.proteinatlas.proteinatlas_annotations", "api/pypath.inputs.proteinatlas.proteinatlas_secretome_annotations", "api/pypath.inputs.proteinatlas.proteinatlas_subcellular_annotations", "api/pypath.inputs.proteins", "api/pypath.inputs.proteins.variants", "api/pypath.inputs.protmapper", "api/pypath.inputs.protmapper.get_protmapper", "api/pypath.inputs.protmapper.protmapper_enzyme_substrate", "api/pypath.inputs.protmapper.protmapper_interactions", "api/pypath.inputs.pubchem", "api/pypath.inputs.pubchem.pubchem_mapping", "api/pypath.inputs.pubmed", "api/pypath.inputs.pubmed.get_pmid", "api/pypath.inputs.pubmed.get_pubmeds", "api/pypath.inputs.pubmed.only_pmids", "api/pypath.inputs.pubmed.open_pubmed", "api/pypath.inputs.pubmed.pmids_dict", "api/pypath.inputs.pubmed.pmids_list", "api/pypath.inputs.ramilowski2015", "api/pypath.inputs.ramilowski2015.ramilowski_interactions", "api/pypath.inputs.ramilowski2015.ramilowski_locations", "api/pypath.inputs.ramp", "api/pypath.inputs.ramp.ramp_id_types", "api/pypath.inputs.ramp.ramp_id_types_2", "api/pypath.inputs.ramp.ramp_list_tables", "api/pypath.inputs.ramp.ramp_mapping", "api/pypath.inputs.ramp.ramp_raw", "api/pypath.inputs.ramp.ramp_show_tables", "api/pypath.inputs.rdata", "api/pypath.inputs.reaction", "api/pypath.inputs.reaction.acsn_biopax", "api/pypath.inputs.reaction.acsn_interactions_2", "api/pypath.inputs.reaction.get_acsn_effects", "api/pypath.inputs.reaction.get_controls", "api/pypath.inputs.reaction.get_interactions", "api/pypath.inputs.reaction.get_reactions", "api/pypath.inputs.reaction.get_soup", "api/pypath.inputs.reaction.panther_biopax", "api/pypath.inputs.reaction.panther_interactions", "api/pypath.inputs.reaction.pid_biopax", "api/pypath.inputs.reaction.pid_interactions", "api/pypath.inputs.reaction.process_complex", "api/pypath.inputs.reaction.process_controls", "api/pypath.inputs.reaction.process_reactions", "api/pypath.inputs.reaction.reactions_biopax", "api/pypath.inputs.reaction.reactome_biopax", "api/pypath.inputs.reaction.reactome_bs", "api/pypath.inputs.reaction.reactome_interactions", "api/pypath.inputs.reaction.reactome_sbml", "api/pypath.inputs.scconnect", "api/pypath.inputs.scconnect.scconnect_annotations", "api/pypath.inputs.scconnect.scconnect_complexes", "api/pypath.inputs.scconnect.scconnect_interactions", "api/pypath.inputs.science", "api/pypath.inputs.science.science_download", "api/pypath.inputs.signalink", "api/pypath.inputs.signalink.signalink_annotations", "api/pypath.inputs.signalink.signalink_function_annotations", "api/pypath.inputs.signalink.signalink_interactions", "api/pypath.inputs.signalink.signalink_pathway_annotations", "api/pypath.inputs.signor", "api/pypath.inputs.signor.signor_complexes", "api/pypath.inputs.signor.signor_enzyme_substrate", "api/pypath.inputs.signor.signor_interactions", "api/pypath.inputs.signor.signor_pathway_annotations", "api/pypath.inputs.signor.signor_pathways", "api/pypath.inputs.signor.signor_protein_families", "api/pypath.inputs.spike", "api/pypath.inputs.spike.spike_complexes", "api/pypath.inputs.spike.spike_interactions", "api/pypath.inputs.stitch", "api/pypath.inputs.stitch.stitch_actions_interactions", "api/pypath.inputs.stitch.stitch_links_interactions", "api/pypath.inputs.string", "api/pypath.inputs.string.string_effects", "api/pypath.inputs.string.string_links_interactions", "api/pypath.inputs.string.string_physical_interactions", "api/pypath.inputs.string.string_species", "api/pypath.inputs.surfaceome", "api/pypath.inputs.surfaceome.surfaceome_annotations", "api/pypath.inputs.switches_elm", "api/pypath.inputs.switches_elm.get_switches_elm", "api/pypath.inputs.talklr", "api/pypath.inputs.talklr.talklr_annotations", "api/pypath.inputs.talklr.talklr_interactions", "api/pypath.inputs.talklr.talklr_raw", "api/pypath.inputs.tcdb", "api/pypath.inputs.tcdb.tcdb_annotations", "api/pypath.inputs.tcdb.tcdb_classes", "api/pypath.inputs.tcdb.tcdb_families", "api/pypath.inputs.tfcensus", "api/pypath.inputs.tfcensus.tfcensus_annotations", "api/pypath.inputs.threedcomplex", "api/pypath.inputs.threedcomplex.threedcomplex_chains", "api/pypath.inputs.threedcomplex.threedcomplex_complexes", "api/pypath.inputs.threedcomplex.threedcomplex_contacts", "api/pypath.inputs.threedcomplex.threedcomplex_ddi", "api/pypath.inputs.threedcomplex.threedcomplex_nresidues", "api/pypath.inputs.threedid", "api/pypath.inputs.threedid.get_3did", "api/pypath.inputs.threedid.get_3did_ddi", "api/pypath.inputs.threedid.get_3did_dmi", "api/pypath.inputs.threedid.process_3did_dmi", "api/pypath.inputs.topdb", "api/pypath.inputs.topdb.topdb_annotations", "api/pypath.inputs.transmir", "api/pypath.inputs.transmir.transmir_interactions", "api/pypath.inputs.trip", "api/pypath.inputs.trip.take_a_trip", "api/pypath.inputs.trip.trip_find_uniprot", "api/pypath.inputs.trip.trip_get_uniprot", "api/pypath.inputs.trip.trip_interactions", "api/pypath.inputs.trip.trip_process", "api/pypath.inputs.trip.trip_process_table", "api/pypath.inputs.unichem", "api/pypath.inputs.unichem.info", "api/pypath.inputs.unichem.unichem_info", "api/pypath.inputs.unichem.unichem_mapping", "api/pypath.inputs.unichem.unichem_sources", "api/pypath.inputs.uniprot", "api/pypath.inputs.uniprot.Taxon", "api/pypath.inputs.uniprot.UniprotRecordHistory", "api/pypath.inputs.uniprot.all_swissprots", "api/pypath.inputs.uniprot.all_trembls", "api/pypath.inputs.uniprot.all_uniprots", "api/pypath.inputs.uniprot.deleted_uniprot_genesymbol", "api/pypath.inputs.uniprot.get_db", "api/pypath.inputs.uniprot.get_uniprot_sec", "api/pypath.inputs.uniprot.init_db", "api/pypath.inputs.uniprot.is_swissprot", "api/pypath.inputs.uniprot.is_trembl", "api/pypath.inputs.uniprot.is_uniprot", "api/pypath.inputs.uniprot.protein_datasheet", "api/pypath.inputs.uniprot.swissprot_deleted", "api/pypath.inputs.uniprot.trembl_deleted", "api/pypath.inputs.uniprot.uniprot_data", "api/pypath.inputs.uniprot.uniprot_deleted", "api/pypath.inputs.uniprot.uniprot_families", "api/pypath.inputs.uniprot.uniprot_history", "api/pypath.inputs.uniprot.uniprot_history_recent_datasheet", "api/pypath.inputs.uniprot.uniprot_keywords", "api/pypath.inputs.uniprot.uniprot_locations", "api/pypath.inputs.uniprot.uniprot_ncbi_taxids", "api/pypath.inputs.uniprot.uniprot_ncbi_taxids_2", "api/pypath.inputs.uniprot.uniprot_preprocess", "api/pypath.inputs.uniprot.uniprot_recent_version", "api/pypath.inputs.uniprot.uniprot_taxonomy", "api/pypath.inputs.uniprot.uniprot_tissues", "api/pypath.inputs.uniprot.uniprot_topology", "api/pypath.inputs.uniprot.valid_uniprot", "api/pypath.inputs.wang", "api/pypath.inputs.wang.cui_interactions", "api/pypath.inputs.wang.hsn_interactions", "api/pypath.inputs.wang.wang_annotations", "api/pypath.inputs.wang.wang_interactions", "api/pypath.inputs.wojtowicz2020", "api/pypath.inputs.wojtowicz2020.wojtowicz2020_interactions", "api/pypath.inputs.wojtowicz2020.wojtowicz2020_raw", "api/pypath.inputs.zhong2015", "api/pypath.inputs.zhong2015.zhong2015_annotations", "api/pypath.internals", "api/pypath.internals.annot_formats", "api/pypath.internals.annot_formats.AnnotDef", "api/pypath.internals.annot_formats.AnnotDefKey", "api/pypath.internals.annot_formats.AnnotOp", "api/pypath.internals.annot_formats.AnnotationGroup", "api/pypath.internals.input_formats", "api/pypath.internals.input_formats.ArrayMapping", "api/pypath.internals.input_formats.BiomartMapping", "api/pypath.internals.input_formats.FileMapping", "api/pypath.internals.input_formats.HmdbMapping", "api/pypath.internals.input_formats.MappingInput", "api/pypath.internals.input_formats.NetworkInput", "api/pypath.internals.input_formats.PickleMapping", "api/pypath.internals.input_formats.ProMapping", "api/pypath.internals.input_formats.RampMapping", "api/pypath.internals.input_formats.ReadList", "api/pypath.internals.input_formats.UnichemMapping", "api/pypath.internals.input_formats.UniprotListMapping", "api/pypath.internals.input_formats.UniprotMapping", "api/pypath.internals.intera", "api/pypath.internals.intera.Complex", "api/pypath.internals.intera.Domain", "api/pypath.internals.intera.DomainDomain", "api/pypath.internals.intera.DomainMotif", "api/pypath.internals.intera.Interface", "api/pypath.internals.intera.Motif", "api/pypath.internals.intera.Ptm", "api/pypath.internals.intera.Regulation", "api/pypath.internals.intera.Residue", "api/pypath.internals.license", "api/pypath.internals.license.License", "api/pypath.internals.license.LicenseAttrib", "api/pypath.internals.license.LicenseFeature", "api/pypath.internals.license.LicensePurpose", "api/pypath.internals.license.LicenseSharing", "api/pypath.internals.maps", "api/pypath.internals.refs", "api/pypath.internals.refs.Reference", "api/pypath.internals.refs.get_pubmed_data", "api/pypath.internals.resource", "api/pypath.internals.resource.AbstractResource", "api/pypath.internals.resource.EnzymeSubstrateResource", "api/pypath.internals.resource.EnzymeSubstrateResourceKey", "api/pypath.internals.resource.NetworkResource", "api/pypath.internals.resource.NetworkResourceKey", "api/pypath.internals.resource.ResourceAttributes", "api/pypath.legacy", "api/pypath.legacy.db_categories", "api/pypath.legacy.db_categories.get_categories", "api/pypath.legacy.db_categories.get_category", "api/pypath.legacy.main", "api/pypath.legacy.main.Direction", "api/pypath.legacy.main.NetworkEntityCollection", "api/pypath.legacy.main.NetworkStatsRecord", "api/pypath.legacy.main.PyPath", "api/pypath.legacy.main.get_db", "api/pypath.legacy.main.init_db", "api/pypath.log", "api/pypath.omnipath", "api/pypath.omnipath.app", "api/pypath.omnipath.app.DatabaseManager", "api/pypath.omnipath.databases", "api/pypath.omnipath.databases.build", "api/pypath.omnipath.databases.class_and_param", "api/pypath.omnipath.databases.define", "api/pypath.omnipath.databases.define.DatabaseClass", "api/pypath.omnipath.databases.define.DatabaseDefinition", "api/pypath.omnipath.databases.define.DatabaseDefinitionManager", "api/pypath.omnipath.databases.get_manager", "api/pypath.omnipath.databases.init_manager", "api/pypath.omnipath.export", "api/pypath.omnipath.export.Export", "api/pypath.omnipath.init", "api/pypath.omnipath.param", "api/pypath.omnipath.param.curated_ppi_resources", "api/pypath.omnipath.param.tf_target_resources", "api/pypath.omnipath.server", "api/pypath.omnipath.server.build", "api/pypath.omnipath.server.build.WebserviceTables", "api/pypath.omnipath.server.generate_about_page", "api/pypath.omnipath.server.generate_about_page.export_licenses", "api/pypath.omnipath.server.generate_about_page.generate_about_html", "api/pypath.omnipath.server.generate_about_page.resource_list_latex", "api/pypath.omnipath.server.generate_about_page.write_html", "api/pypath.omnipath.server.legacy", "api/pypath.omnipath.server.legacy.PypathServer", "api/pypath.omnipath.server.run", "api/pypath.omnipath.server.run.BaseServer", "api/pypath.omnipath.server.run.Rest", "api/pypath.omnipath.server.run.TableServer", "api/pypath.omnipath.server.run.TwistedWebResource", "api/pypath.omnipath.server.run.TwistedWebSite", "api/pypath.omnipath.server.run.stop_server", "api/pypath.omnipath.server.run.twisted_listen_tcp", "api/pypath.omnipath.server.run.twisted_run", "api/pypath.resources", "api/pypath.resources.controller", "api/pypath.resources.controller.ResourceController", "api/pypath.resources.data", "api/pypath.resources.data_formats", "api/pypath.resources.data_formats.ROOT", "api/pypath.resources.data_formats.activity_flow", "api/pypath.resources.data_formats.collectri", "api/pypath.resources.data_formats.enzyme_substrate", "api/pypath.resources.data_formats.interaction", "api/pypath.resources.data_formats.interaction_htp", "api/pypath.resources.data_formats.obsolate", "api/pypath.resources.data_formats.pathway_bad", "api/pypath.resources.data_formats.reaction_pc", "api/pypath.resources.data_formats.transcription_deprecated", "api/pypath.resources.data_formats.transcription_onebyone", "api/pypath.resources.descriptions", "api/pypath.resources.descriptions.export_licenses", "api/pypath.resources.descriptions.gen_html", "api/pypath.resources.descriptions.resource_list_latex", "api/pypath.resources.descriptions.write_html", "api/pypath.resources.get_controller", "api/pypath.resources.licenses", "api/pypath.resources.licenses.Licenses", "api/pypath.resources.network", "api/pypath.resources.network.dorothea_expand_levels", "api/pypath.resources.urls", "api/pypath.share", "api/pypath.share.cache", "api/pypath.share.cache.cache_item", "api/pypath.share.cache.cache_path", "api/pypath.share.cache.get_cachedir", "api/pypath.share.common", "api/pypath.share.common.add_to_list", "api/pypath.share.common.add_to_set", "api/pypath.share.common.at_least_in", "api/pypath.share.common.clean_dict", "api/pypath.share.common.combine_attrs", "api/pypath.share.common.compr", "api/pypath.share.common.console", "api/pypath.share.common.decode", "api/pypath.share.common.del_empty", "api/pypath.share.common.df_memory_usage", "api/pypath.share.common.dict_collapse_keys", "api/pypath.share.common.dict_counts", "api/pypath.share.common.dict_diff", "api/pypath.share.common.dict_expand_keys", "api/pypath.share.common.dict_percent", "api/pypath.share.common.dict_set_path", "api/pypath.share.common.dict_set_percent", "api/pypath.share.common.dict_str", "api/pypath.share.common.dict_subtotals", "api/pypath.share.common.dict_sym_diff", "api/pypath.share.common.dict_union", "api/pypath.share.common.eq", "api/pypath.share.common.filtr", "api/pypath.share.common.first", "api/pypath.share.common.flat_list", "api/pypath.share.common.float_or_nan", "api/pypath.share.common.format_bytes", "api/pypath.share.common.gen_session_id", "api/pypath.share.common.get", "api/pypath.share.common.get_args", "api/pypath.share.common.identity", "api/pypath.share.common.is_float", "api/pypath.share.common.is_int", "api/pypath.share.common.is_str", "api/pypath.share.common.jaccard_index", "api/pypath.share.common.join_dicts", "api/pypath.share.common.latex_table", "api/pypath.share.common.log_memory_usage", "api/pypath.share.common.match", "api/pypath.share.common.maybe_in_dict", "api/pypath.share.common.md5", "api/pypath.share.common.merge_dicts", "api/pypath.share.common.n_shared_elements", "api/pypath.share.common.n_shared_foreach", "api/pypath.share.common.n_shared_total", "api/pypath.share.common.n_shared_unique_foreach", "api/pypath.share.common.n_unique_elements", "api/pypath.share.common.n_unique_foreach", "api/pypath.share.common.n_unique_total", "api/pypath.share.common.negate", "api/pypath.share.common.nest", "api/pypath.share.common.none_or_len", "api/pypath.share.common.paginate", "api/pypath.share.common.prefix", "api/pypath.share.common.print_table", "api/pypath.share.common.python_memory_usage", "api/pypath.share.common.re_safe_groups", "api/pypath.share.common.remove_prefix", "api/pypath.share.common.rotate", "api/pypath.share.common.sets_to_sorted_lists", "api/pypath.share.common.sfirst", "api/pypath.share.common.shared_elements", "api/pypath.share.common.shared_foreach", "api/pypath.share.common.shared_total", "api/pypath.share.common.shared_unique", "api/pypath.share.common.shared_unique_foreach", "api/pypath.share.common.shared_unique_total", "api/pypath.share.common.silent", "api/pypath.share.common.simpson_index", "api/pypath.share.common.simpson_index_counts", "api/pypath.share.common.something", "api/pypath.share.common.sorensen_index", "api/pypath.share.common.suffix", "api/pypath.share.common.sum_dicts", "api/pypath.share.common.swap_dict", "api/pypath.share.common.swap_dict_simple", "api/pypath.share.common.swap_suffix", "api/pypath.share.common.table_add_row_numbers", "api/pypath.share.common.table_format", "api/pypath.share.common.table_textwrap", "api/pypath.share.common.to_list", "api/pypath.share.common.to_set", "api/pypath.share.common.to_tuple", "api/pypath.share.common.try_bool", "api/pypath.share.common.try_float", "api/pypath.share.common.tsv_table", "api/pypath.share.common.uniq_list", "api/pypath.share.common.uniq_list1", "api/pypath.share.common.uniq_list2", "api/pypath.share.common.uniq_ord_list", "api/pypath.share.common.unique_elements", "api/pypath.share.common.unique_foreach", "api/pypath.share.common.unique_list", "api/pypath.share.common.unique_total", "api/pypath.share.common.upper0", "api/pypath.share.common.values", "api/pypath.share.common.wcl", "api/pypath.share.common.wrap_truncate", "api/pypath.share.constants", "api/pypath.share.curl", "api/pypath.share.curl.Curl", "api/pypath.share.curl.FileOpener", "api/pypath.share.curl.RemoteFile", "api/pypath.share.curl.cache_delete_off", "api/pypath.share.curl.cache_delete_on", "api/pypath.share.curl.cache_off", "api/pypath.share.curl.cache_on", "api/pypath.share.curl.cache_print_off", "api/pypath.share.curl.cache_print_on", "api/pypath.share.curl.debug_off", "api/pypath.share.curl.debug_on", "api/pypath.share.curl.dryrun_off", "api/pypath.share.curl.dryrun_on", "api/pypath.share.curl.is_url", "api/pypath.share.curl.preserve_off", "api/pypath.share.curl.preserve_on", "api/pypath.share.log", "api/pypath.share.log.Logger", "api/pypath.share.log.new_logger", "api/pypath.share.progress", "api/pypath.share.progress.Progress", "api/pypath.share.session", "api/pypath.share.session.Logger", "api/pypath.share.session.Session", "api/pypath.share.session.get_log", "api/pypath.share.session.get_session", "api/pypath.share.session.new_session", "api/pypath.share.settings", "api/pypath.share.settings.Settings", "api/pypath.share.settings.context", "api/pypath.share.settings.get", "api/pypath.share.settings.setup", "api/pypath.utils", "api/pypath.utils.go", "api/pypath.utils.go.GOAnnotation", "api/pypath.utils.go.GOCustomAnnotation", "api/pypath.utils.go.GeneOntology", "api/pypath.utils.go.annotate", "api/pypath.utils.go.get_db", "api/pypath.utils.go.init_db", "api/pypath.utils.go.load_go", "api/pypath.utils.homology", "api/pypath.utils.homology.HomologyManager", "api/pypath.utils.homology.Ortholog", "api/pypath.utils.homology.ProteinHomology", "api/pypath.utils.homology.Proteomes", "api/pypath.utils.homology.PtmHomology", "api/pypath.utils.homology.SequenceContainer", "api/pypath.utils.homology.get_df", "api/pypath.utils.homology.get_dict", "api/pypath.utils.homology.get_manager", "api/pypath.utils.homology.init", "api/pypath.utils.homology.translate", "api/pypath.utils.homology.translate_df", "api/pypath.utils.mapping", "api/pypath.utils.mapping.MapReader", "api/pypath.utils.mapping.Mapper", "api/pypath.utils.mapping.MappingTable", "api/pypath.utils.mapping.MappingTableKey", "api/pypath.utils.mapping.UNIPROT_ID_TYPES", "api/pypath.utils.mapping.get_mapper", "api/pypath.utils.mapping.guess_type", "api/pypath.utils.mapping.id_from_label", "api/pypath.utils.mapping.id_from_label0", "api/pypath.utils.mapping.init", "api/pypath.utils.mapping.label", "api/pypath.utils.mapping.map_name", "api/pypath.utils.mapping.map_name0", "api/pypath.utils.mapping.map_names", "api/pypath.utils.pdb", "api/pypath.utils.pdb.Residue", "api/pypath.utils.pdb.ResidueMapper", "api/pypath.utils.pdb.Segment", "api/pypath.utils.pdb.residue_pdb", "api/pypath.utils.proteomicsdb", "api/pypath.utils.proteomicsdb.ProteomicsDB", "api/pypath.utils.pyreact", "api/pypath.utils.pyreact.AttributeHandler", "api/pypath.utils.pyreact.BioPaxReader", "api/pypath.utils.pyreact.Complex", "api/pypath.utils.pyreact.ComplexVariations", "api/pypath.utils.pyreact.Control", "api/pypath.utils.pyreact.Entity", "api/pypath.utils.pyreact.EntitySet", "api/pypath.utils.pyreact.Intersecting", "api/pypath.utils.pyreact.Protein", "api/pypath.utils.pyreact.ProteinFamily", "api/pypath.utils.pyreact.PyReact", "api/pypath.utils.pyreact.Reaction", "api/pypath.utils.pyreact.ReactionSide", "api/pypath.utils.pyreact.Reference", "api/pypath.utils.reflists", "api/pypath.utils.reflists.ReferenceListManager", "api/pypath.utils.reflists.check", "api/pypath.utils.reflists.get_manager", "api/pypath.utils.reflists.get_reflist", "api/pypath.utils.reflists.init", "api/pypath.utils.reflists.is_not", "api/pypath.utils.reflists.select", "api/pypath.utils.residues", "api/pypath.utils.residues.ResidueMapper", "api/pypath.utils.seq", "api/pypath.utils.seq.Pfam", "api/pypath.utils.seq.Resource", "api/pypath.utils.seq.Seq", "api/pypath.utils.seq.get_isoforms", "api/pypath.utils.seq.read_fasta", "api/pypath.utils.seq.swissprot_seq", "api/pypath.utils.taxonomy", "api/pypath.utils.taxonomy.ensure_common_name", "api/pypath.utils.taxonomy.ensure_ensembl_name", "api/pypath.utils.taxonomy.ensure_latin_name", "api/pypath.utils.taxonomy.ensure_ncbi_tax_id", "api/pypath.utils.taxonomy.get_db", "api/pypath.utils.taxonomy.init_db", "api/pypath.utils.taxonomy.short_latin_names", "api/pypath.utils.taxonomy.shorten_latin_name", "api/pypath.utils.taxonomy.taxid_from_common_name", "api/pypath.utils.taxonomy.taxid_from_dbptm_taxon_name", "api/pypath.utils.taxonomy.taxid_from_ensembl_name", "api/pypath.utils.taxonomy.taxid_from_latin_name", "api/pypath.utils.taxonomy.taxid_from_nonstandard", "api/pypath.utils.taxonomy.uniprot_taxid", "api/pypath.utils.unichem", "api/pypath.utils.unichem.Unichem", "api/pypath.utils.uniprot", "api/pypath.utils.uniprot.UniprotProtein", "api/pypath.utils.uniprot.ac", "api/pypath.utils.uniprot.activity_regulation", "api/pypath.utils.uniprot.activity_regulation_with_xrefs", "api/pypath.utils.uniprot.alternative_products", "api/pypath.utils.uniprot.alternative_products_with_xrefs", "api/pypath.utils.uniprot.browse", "api/pypath.utils.uniprot.catalytic_activity", "api/pypath.utils.uniprot.catalytic_activity_with_xrefs", "api/pypath.utils.uniprot.collect", "api/pypath.utils.uniprot.databases", "api/pypath.utils.uniprot.disease", "api/pypath.utils.uniprot.disease_with_xrefs", "api/pypath.utils.uniprot.ec", "api/pypath.utils.uniprot.features_table", "api/pypath.utils.uniprot.full_name", "api/pypath.utils.uniprot.function", "api/pypath.utils.uniprot.function_genecards", "api/pypath.utils.uniprot.function_or_genecards", "api/pypath.utils.uniprot.function_with_genecards", "api/pypath.utils.uniprot.function_with_xrefs", "api/pypath.utils.uniprot.genesymbol", "api/pypath.utils.uniprot.has_tag", "api/pypath.utils.uniprot.id", "api/pypath.utils.uniprot.info", "api/pypath.utils.uniprot.info_section", "api/pypath.utils.uniprot.interaction", "api/pypath.utils.uniprot.interaction_with_xrefs", "api/pypath.utils.uniprot.is_reviewed", "api/pypath.utils.uniprot.itertag", "api/pypath.utils.uniprot.keywords", "api/pypath.utils.uniprot.keywords_with_xrefs", "api/pypath.utils.uniprot.length", "api/pypath.utils.uniprot.lengths", "api/pypath.utils.uniprot.load", "api/pypath.utils.uniprot.organism", "api/pypath.utils.uniprot.print_features", "api/pypath.utils.uniprot.ptm", "api/pypath.utils.uniprot.ptm_with_xrefs", "api/pypath.utils.uniprot.query", "api/pypath.utils.uniprot.reload", "api/pypath.utils.uniprot.remove_xrefs", "api/pypath.utils.uniprot.sequence", "api/pypath.utils.uniprot.sequence_caution", "api/pypath.utils.uniprot.sequence_caution_with_xrefs", "api/pypath.utils.uniprot.similarity", "api/pypath.utils.uniprot.similarity_with_xrefs", "api/pypath.utils.uniprot.subcellular_location", "api/pypath.utils.uniprot.subcellular_location_with_xrefs", "api/pypath.utils.uniprot.subunit", "api/pypath.utils.uniprot.subunit_with_xrefs", "api/pypath.utils.uniprot.tissue_specificity", "api/pypath.utils.uniprot.tissue_specificity_with_xrefs", "api/pypath.utils.uniprot.update_databases", "api/pypath.utils.uniprot.update_info", "api/pypath.utils.uniprot.web_resource", "api/pypath.utils.uniprot.web_resource_with_xrefs", "api/pypath.utils.uniprot.weight", "api/pypath.utils.uniprot.weights", "api/pypath.visual", "api/pypath.visual.drawing", "api/pypath.visual.drawing.InterSet", "api/pypath.visual.drawing.Plot", "api/pypath.visual.igraph_drawing", "api/pypath.visual.igraph_drawing.AbstractCairoGraphDrawer", "api/pypath.visual.igraph_drawing.ArrowEdgeDrawer", "api/pypath.visual.igraph_drawing.DefaultGraphDrawerFFsupport", "api/pypath.visual.igraph_drawing.DefaultVertexDrawer", "api/pypath.visual.igraph_drawing.TextDrawer", "api/pypath.visual.igraph_drawing.edge", "api/pypath.visual.igraph_drawing.edge.AbstractEdgeDrawer", "api/pypath.visual.igraph_drawing.edge.AlphaVaryingEdgeDrawer", "api/pypath.visual.igraph_drawing.edge.ArrowEdgeDrawer", "api/pypath.visual.igraph_drawing.edge.DarkToLightEdgeDrawer", "api/pypath.visual.igraph_drawing.edge.LightToDarkEdgeDrawer", "api/pypath.visual.igraph_drawing.edge.TaperedEdgeDrawer", "api/pypath.visual.igraph_drawing.vertex", "api/pypath.visual.igraph_drawing.vertex.AbstractCairoDrawer", "api/pypath.visual.igraph_drawing.vertex.AbstractCairoVertexDrawer", "api/pypath.visual.igraph_drawing.vertex.AbstractDrawer", "api/pypath.visual.igraph_drawing.vertex.AbstractVertexDrawer", "api/pypath.visual.igraph_drawing.vertex.DefaultVertexDrawer", "api/pypath.visual.plot", "api/pypath.visual.plot.Barplot", "api/pypath.visual.plot.BarplotsGrid", "api/pypath.visual.plot.CurationPlot", "api/pypath.visual.plot.Dendrogram", "api/pypath.visual.plot.Histogram", "api/pypath.visual.plot.HistoryTree", "api/pypath.visual.plot.HtpCharacteristics", "api/pypath.visual.plot.MultiBarplot", "api/pypath.visual.plot.Plot", "api/pypath.visual.plot.RefsComposite", "api/pypath.visual.plot.ScatterPlus", "api/pypath.visual.plot.SimilarityGraph", "api/pypath.visual.plot.StackedBarplot", "api/pypath.visual.plot.boxplot", "api/pypath.visual.plot.get_moves", "api/pypath.visual.plot.is_opentype_cff_font", "api/pypath.visual.plot.move_labels", "api/pypath.visual.plot.overlap", "api/pypath.visual.plot.rotate_labels", "contents", "index", "notebooks/manual", "reference", "releasehistory", "webservice"], "filenames": ["api/pypath.rst", "api/pypath.core.rst", "api/pypath.core.annot.rst", "api/pypath.core.annot.Adhesome.rst", "api/pypath.core.annot.Almen2009.rst", "api/pypath.core.annot.AnnotationBase.rst", "api/pypath.core.annot.AnnotationTable.rst", "api/pypath.core.annot.Baccin2019.rst", "api/pypath.core.annot.Biogps.rst", "api/pypath.core.annot.CancerGeneCensus.rst", "api/pypath.core.annot.Cancerdrugsdb.rst", "api/pypath.core.annot.Cancersea.rst", "api/pypath.core.annot.CellPhoneDB.rst", "api/pypath.core.annot.CellPhoneDBComplex.rst", "api/pypath.core.annot.CellSurfaceProteinAtlas.rst", "api/pypath.core.annot.CellSurfaceProteinAtlasCellType.rst", "api/pypath.core.annot.Cellcall.rst", "api/pypath.core.annot.Cellcellinteractions.rst", "api/pypath.core.annot.Cellchatdb.rst", "api/pypath.core.annot.CellchatdbComplex.rst", "api/pypath.core.annot.Cellinker.rst", "api/pypath.core.annot.CellinkerComplex.rst", "api/pypath.core.annot.Celltalkdb.rst", "api/pypath.core.annot.Celltypist.rst", "api/pypath.core.annot.Comppi.rst", "api/pypath.core.annot.Connectomedb.rst", "api/pypath.core.annot.Corum.rst", "api/pypath.core.annot.CorumFuncat.rst", "api/pypath.core.annot.CorumGO.rst", "api/pypath.core.annot.Cpad.rst", "api/pypath.core.annot.CustomAnnotation.rst", "api/pypath.core.annot.Cytosig.rst", "api/pypath.core.annot.Dgidb.rst", "api/pypath.core.annot.Disgenet.rst", "api/pypath.core.annot.Embrace.rst", "api/pypath.core.annot.Exocarta.rst", "api/pypath.core.annot.GOCustomIntercell.rst", "api/pypath.core.annot.GOIntercell.rst", "api/pypath.core.annot.Gpcrdb.rst", "api/pypath.core.annot.GuideToPharmacology.rst", "api/pypath.core.annot.HPO.rst", "api/pypath.core.annot.Hgnc.rst", "api/pypath.core.annot.HpmrComplex.rst", "api/pypath.core.annot.HumanPlasmaMembraneReceptome.rst", "api/pypath.core.annot.HumanProteinAtlas.rst", "api/pypath.core.annot.HumanProteinAtlasSecretome.rst", "api/pypath.core.annot.HumanProteinAtlasSubcellular.rst", "api/pypath.core.annot.Humancellmap.rst", "api/pypath.core.annot.Icellnet.rst", "api/pypath.core.annot.IcellnetComplex.rst", "api/pypath.core.annot.Integrins.rst", "api/pypath.core.annot.InterPro.rst", "api/pypath.core.annot.Intogen.rst", "api/pypath.core.annot.Italk.rst", "api/pypath.core.annot.KeggPathways.rst", "api/pypath.core.annot.KeggPathwaysPC.rst", "api/pypath.core.annot.Kinasedotcom.rst", "api/pypath.core.annot.Kirouac2010.rst", "api/pypath.core.annot.Lambert2018.rst", "api/pypath.core.annot.LigandReceptor.rst", "api/pypath.core.annot.Locate.rst", "api/pypath.core.annot.Lrdb.rst", "api/pypath.core.annot.Matrisome.rst", "api/pypath.core.annot.Matrixdb.rst", "api/pypath.core.annot.Mcam.rst", "api/pypath.core.annot.Membranome.rst", "api/pypath.core.annot.Msigdb.rst", "api/pypath.core.annot.NetpathPathways.rst", "api/pypath.core.annot.Opm.rst", "api/pypath.core.annot.Panglaodb.rst", "api/pypath.core.annot.Phobius.rst", "api/pypath.core.annot.Phosphatome.rst", "api/pypath.core.annot.Progeny.rst", "api/pypath.core.annot.Ramilowski2015.rst", "api/pypath.core.annot.Ramilowski2015Location.rst", "api/pypath.core.annot.Scconnect.rst", "api/pypath.core.annot.ScconnectComplex.rst", "api/pypath.core.annot.SignalinkFunctions.rst", "api/pypath.core.annot.SignalinkPathways.rst", "api/pypath.core.annot.SignorPathways.rst", "api/pypath.core.annot.Surfaceome.rst", "api/pypath.core.annot.Talklr.rst", "api/pypath.core.annot.Tcdb.rst", "api/pypath.core.annot.Tfcensus.rst", "api/pypath.core.annot.Topdb.rst", "api/pypath.core.annot.UniprotFamilies.rst", "api/pypath.core.annot.UniprotKeywords.rst", "api/pypath.core.annot.UniprotLocations.rst", "api/pypath.core.annot.UniprotTissues.rst", "api/pypath.core.annot.UniprotTopologies.rst", "api/pypath.core.annot.Vesiclepedia.rst", "api/pypath.core.annot.Wang.rst", "api/pypath.core.annot.Zhong2015.rst", "api/pypath.core.annot.get_db.rst", "api/pypath.core.annot.init_db.rst", "api/pypath.core.attrs.rst", "api/pypath.core.attrs.AttributeHandler.rst", "api/pypath.core.common.rst", "api/pypath.core.common.filter_network_df.rst", "api/pypath.core.complex.rst", "api/pypath.core.complex.AbstractComplexResource.rst", "api/pypath.core.complex.CellPhoneDB.rst", "api/pypath.core.complex.Cellchatdb.rst", "api/pypath.core.complex.Cellinker.rst", "api/pypath.core.complex.Compleat.rst", "api/pypath.core.complex.ComplexAggregator.rst", "api/pypath.core.complex.ComplexPortal.rst", "api/pypath.core.complex.Corum.rst", "api/pypath.core.complex.GuideToPharmacology.rst", "api/pypath.core.complex.Havugimana.rst", "api/pypath.core.complex.Hpmr.rst", "api/pypath.core.complex.Humap.rst", "api/pypath.core.complex.Humap2.rst", "api/pypath.core.complex.Icellnet.rst", "api/pypath.core.complex.Kegg.rst", "api/pypath.core.complex.Pdb.rst", "api/pypath.core.complex.Signor.rst", "api/pypath.core.complex.Spike.rst", "api/pypath.core.complex.all_complexes.rst", "api/pypath.core.complex.get_db.rst", "api/pypath.core.complex.init_db.rst", "api/pypath.core.entity.rst", "api/pypath.core.entity.Entity.rst", "api/pypath.core.entity.EntityKey.rst", "api/pypath.core.entity.EntityList.rst", "api/pypath.core.enz_sub.rst", "api/pypath.core.enz_sub.EnzymeSubstrateAggregator.rst", "api/pypath.core.enz_sub.EnzymeSubstrateHomologyProcessor.rst", "api/pypath.core.enz_sub.EnzymeSubstrateProcessor.rst", "api/pypath.core.enz_sub.get_db.rst", "api/pypath.core.enz_sub.init_db.rst", "api/pypath.core.evidence.rst", "api/pypath.core.evidence.Evidence.rst", "api/pypath.core.evidence.Evidences.rst", "api/pypath.core.interaction.rst", "api/pypath.core.interaction.Interaction.rst", "api/pypath.core.interaction.InteractionDataFrameRecord.rst", "api/pypath.core.interaction.InteractionKey.rst", "api/pypath.core.intercell.rst", "api/pypath.core.intercell.IntercellAnnotation.rst", "api/pypath.core.intercell.get_db.rst", "api/pypath.core.intercell.init_db.rst", "api/pypath.core.intercell_annot.rst", "api/pypath.core.intercell_annot.excludes.rst", "api/pypath.core.network.rst", "api/pypath.core.network.Network.rst", "api/pypath.core.network.NetworkEntityCollection.rst", "api/pypath.core.network.NetworkStatsRecord.rst", "api/pypath.core.network.get_db.rst", "api/pypath.core.network.init_db.rst", "api/pypath.data.rst", "api/pypath.disclaimer.rst", "api/pypath.info.rst", "api/pypath.inputs.rst", "api/pypath.inputs.abs.rst", "api/pypath.inputs.abs.abs_interactions.rst", "api/pypath.inputs.acsn.rst", "api/pypath.inputs.acsn.acsn_interactions.rst", "api/pypath.inputs.acsn.acsn_interactions_sif.rst", "api/pypath.inputs.adhesome.rst", "api/pypath.inputs.adhesome.adhesome_annotations.rst", "api/pypath.inputs.adhesome.adhesome_interactions.rst", "api/pypath.inputs.almen2009.rst", "api/pypath.inputs.almen2009.almen2009_annotations.rst", "api/pypath.inputs.baccin2019.rst", "api/pypath.inputs.baccin2019.baccin2019_annotations.rst", "api/pypath.inputs.baccin2019.baccin2019_interactions.rst", "api/pypath.inputs.biogps.rst", "api/pypath.inputs.biogps.BiogpsDataset.rst", "api/pypath.inputs.biogps.biogps_annotations.rst", "api/pypath.inputs.biogps.biogps_datasets.rst", "api/pypath.inputs.biogps.biogps_download.rst", "api/pypath.inputs.biogps.biogps_download_all.rst", "api/pypath.inputs.biogrid.rst", "api/pypath.inputs.biogrid.biogrid_all_interactions.rst", "api/pypath.inputs.biogrid.biogrid_interactions.rst", "api/pypath.inputs.biomart.rst", "api/pypath.inputs.biomart.biomart_homology.rst", "api/pypath.inputs.biomart.biomart_microarray.rst", "api/pypath.inputs.biomart.biomart_microarray_types.rst", "api/pypath.inputs.biomart.biomart_microarrays.rst", "api/pypath.inputs.biomart.biomart_query.rst", "api/pypath.inputs.biomodels.rst", "api/pypath.inputs.biomodels.download_single_model.rst", "api/pypath.inputs.biomodels.get_all_models.rst", "api/pypath.inputs.biomodels.get_biomodels.rst", "api/pypath.inputs.biomodels.get_biomodels_req.rst", "api/pypath.inputs.biomodels.get_single_model.rst", "api/pypath.inputs.ca1.rst", "api/pypath.inputs.ca1.ca1_interactions.rst", "api/pypath.inputs.cancercellmap.rst", "api/pypath.inputs.cancercellmap.ccmap_interactions.rst", "api/pypath.inputs.cancerdrugsdb.rst", "api/pypath.inputs.cancerdrugsdb.cancerdrugsdb_annotations.rst", "api/pypath.inputs.cancerdrugsdb.cancerdrugsdb_download.rst", "api/pypath.inputs.cancerdrugsdb.cancerdrugsdb_interactions.rst", "api/pypath.inputs.cancersea.rst", "api/pypath.inputs.cancersea.cancersea_annotations.rst", "api/pypath.inputs.cell.rst", "api/pypath.inputs.cell.cell_supplementary.rst", "api/pypath.inputs.cellcall.rst", "api/pypath.inputs.cellcall.cellcall_annotations.rst", "api/pypath.inputs.cellcall.cellcall_download.rst", "api/pypath.inputs.cellcall.cellcall_download_all.rst", "api/pypath.inputs.cellcall.cellcall_interactions.rst", "api/pypath.inputs.cellcellinteractions.rst", "api/pypath.inputs.cellcellinteractions.cellcellinteractions_annotations.rst", "api/pypath.inputs.cellchatdb.rst", "api/pypath.inputs.cellchatdb.cellchatdb_annotations.rst", "api/pypath.inputs.cellchatdb.cellchatdb_cofactors.rst", "api/pypath.inputs.cellchatdb.cellchatdb_complexes.rst", "api/pypath.inputs.cellchatdb.cellchatdb_download.rst", "api/pypath.inputs.cellchatdb.cellchatdb_interactions.rst", "api/pypath.inputs.cellinker.rst", "api/pypath.inputs.cellinker.CellinkerInteraction.rst", "api/pypath.inputs.cellinker.cellinker_annotations.rst", "api/pypath.inputs.cellinker.cellinker_complex_annotations.rst", "api/pypath.inputs.cellinker.cellinker_complexes.rst", "api/pypath.inputs.cellinker.cellinker_complexes_raw.rst", "api/pypath.inputs.cellinker.cellinker_lr_interactions.rst", "api/pypath.inputs.cellinker.cellinker_lr_interactions_raw.rst", "api/pypath.inputs.cellinker.cellinker_protein_annotations.rst", "api/pypath.inputs.cellinker.cellinker_smol_interactions.rst", "api/pypath.inputs.cellinker.cellinker_smol_interactions_raw.rst", "api/pypath.inputs.cellinker.components_to_complex.rst", "api/pypath.inputs.cellphonedb.rst", "api/pypath.inputs.cellphonedb.CellPhoneDBAnnotation.rst", "api/pypath.inputs.cellphonedb.cellphonedb_complex_annotations.rst", "api/pypath.inputs.cellphonedb.cellphonedb_complexes.rst", "api/pypath.inputs.cellphonedb.cellphonedb_interactions.rst", "api/pypath.inputs.cellphonedb.cellphonedb_ligands_receptors.rst", "api/pypath.inputs.cellphonedb.cellphonedb_protein_annotations.rst", "api/pypath.inputs.celltalkdb.rst", "api/pypath.inputs.celltalkdb.celltalkdb_annotations.rst", "api/pypath.inputs.celltalkdb.celltalkdb_download.rst", "api/pypath.inputs.celltalkdb.celltalkdb_interactions.rst", "api/pypath.inputs.celltypist.rst", "api/pypath.inputs.celltypist.celltypist_annotations.rst", "api/pypath.inputs.chembl.rst", "api/pypath.inputs.chembl.chembl_activities.rst", "api/pypath.inputs.chembl.chembl_assays.rst", "api/pypath.inputs.chembl.chembl_documents.rst", "api/pypath.inputs.chembl.chembl_drug_indications.rst", "api/pypath.inputs.chembl.chembl_mechanisms.rst", "api/pypath.inputs.chembl.chembl_molecules.rst", "api/pypath.inputs.chembl.chembl_targets.rst", "api/pypath.inputs.clinvar.rst", "api/pypath.inputs.clinvar.clinvar_citations.rst", "api/pypath.inputs.clinvar.clinvar_raw.rst", "api/pypath.inputs.collectri.rst", "api/pypath.inputs.collectri.collectri_interactions.rst", "api/pypath.inputs.common.rst", "api/pypath.inputs.common.csv_sep_change.rst", "api/pypath.inputs.common.glom_fields.rst", "api/pypath.inputs.common.json_extract.rst", "api/pypath.inputs.common.json_read.rst", "api/pypath.inputs.common.read_table.rst", "api/pypath.inputs.common.read_xls.rst", "api/pypath.inputs.compleat.rst", "api/pypath.inputs.compleat.compleat_complexes.rst", "api/pypath.inputs.compleat.compleat_raw.rst", "api/pypath.inputs.complexportal.rst", "api/pypath.inputs.complexportal.complexportal_complexes.rst", "api/pypath.inputs.comppi.rst", "api/pypath.inputs.comppi.comppi_interaction_locations.rst", "api/pypath.inputs.comppi.comppi_locations.rst", "api/pypath.inputs.connectomedb.rst", "api/pypath.inputs.connectomedb.connectomedb_annotations.rst", "api/pypath.inputs.connectomedb.connectomedb_interactions.rst", "api/pypath.inputs.corum.rst", "api/pypath.inputs.corum.corum_complexes.rst", "api/pypath.inputs.cosmic.rst", "api/pypath.inputs.cosmic.cancer_gene_census_annotations.rst", "api/pypath.inputs.cpad.rst", "api/pypath.inputs.cpad.cpad_annotations.rst", "api/pypath.inputs.cpad.cpad_pathway_cancer.rst", "api/pypath.inputs.cpad.get_cpad.rst", "api/pypath.inputs.cpdb.rst", "api/pypath.inputs.cpdb.cpdb_interactions.rst", "api/pypath.inputs.cpdb.cpdb_interactions_ltp.rst", "api/pypath.inputs.credentials.rst", "api/pypath.inputs.credentials.credentials.rst", "api/pypath.inputs.csa.rst", "api/pypath.inputs.csa.get_csa.rst", "api/pypath.inputs.cspa.rst", "api/pypath.inputs.cspa.cspa_annotations.rst", "api/pypath.inputs.cspa.cspa_cell_type_annotations.rst", "api/pypath.inputs.cspa.cspa_cell_types.rst", "api/pypath.inputs.ctdbase.rst", "api/pypath.inputs.ctdbase.ctdbase_relations.rst", "api/pypath.inputs.ctdbase.ctdbase_vocabulary.rst", "api/pypath.inputs.cytosig.rst", "api/pypath.inputs.cytosig.cytosig_annotations.rst", "api/pypath.inputs.cytosig.cytosig_df.rst", "api/pypath.inputs.dbptm.rst", "api/pypath.inputs.dbptm.dbptm_enzyme_substrate.rst", "api/pypath.inputs.dbptm.dbptm_enzyme_substrate_old.rst", "api/pypath.inputs.dbptm.dbptm_interactions.rst", "api/pypath.inputs.deathdomain.rst", "api/pypath.inputs.deathdomain.deathdomain_interactions.rst", "api/pypath.inputs.deathdomain.deathdomain_interactions_rescued.rst", "api/pypath.inputs.depod.rst", "api/pypath.inputs.depod.depod_enzyme_substrate.rst", "api/pypath.inputs.depod.depod_interactions.rst", "api/pypath.inputs.dgidb.rst", "api/pypath.inputs.dgidb.dgidb_annotations.rst", "api/pypath.inputs.dgidb.dgidb_interactions.rst", "api/pypath.inputs.dgidb.get_dgidb_old.rst", "api/pypath.inputs.dip.rst", "api/pypath.inputs.dip.dip_interactions.rst", "api/pypath.inputs.dip.dip_login.rst", "api/pypath.inputs.disgenet.rst", "api/pypath.inputs.disgenet.DisgenetApi.rst", "api/pypath.inputs.disgenet.disease_id_mappings.rst", "api/pypath.inputs.disgenet.disgenet_annotations.rst", "api/pypath.inputs.disgenet.variant_gene_mappings.rst", "api/pypath.inputs.domino.rst", "api/pypath.inputs.domino.domino_ddi.rst", "api/pypath.inputs.domino.domino_enzsub.rst", "api/pypath.inputs.domino.domino_interactions.rst", "api/pypath.inputs.domino.get_domino.rst", "api/pypath.inputs.dorothea.rst", "api/pypath.inputs.dorothea.DorotheaInteraction.rst", "api/pypath.inputs.dorothea.dorothea_full_raw.rst", "api/pypath.inputs.dorothea.dorothea_interactions.rst", "api/pypath.inputs.dorothea.dorothea_interactions_old.rst", "api/pypath.inputs.dorothea.dorothea_old_csv.rst", "api/pypath.inputs.dorothea.dorothea_rda_raw.rst", "api/pypath.inputs.dorothea.get_dorothea_old.rst", "api/pypath.inputs.dorothea.get_tfregulons.rst", "api/pypath.inputs.dorothea.tfregulons_interactions.rst", "api/pypath.inputs.dorothea.tfregulons_interactions_old.rst", "api/pypath.inputs.drugbank.rst", "api/pypath.inputs.drugbank.DrugbankFull.rst", "api/pypath.inputs.drugbank.drugbank_annotations.rst", "api/pypath.inputs.drugbank.drugbank_drugs.rst", "api/pypath.inputs.drugbank.drugbank_interactions.rst", "api/pypath.inputs.drugbank.drugbank_mapping.rst", "api/pypath.inputs.drugbank.drugbank_raw_interactions.rst", "api/pypath.inputs.drugcentral.rst", "api/pypath.inputs.drugcentral.drugcentral_drugs.rst", "api/pypath.inputs.drugcentral.drugcentral_interactions.rst", "api/pypath.inputs.drugcentral.drugcentral_mapping.rst", "api/pypath.inputs.ebi.rst", "api/pypath.inputs.ebi.ebi_rest.rst", "api/pypath.inputs.elm.rst", "api/pypath.inputs.elm.elm_classes.rst", "api/pypath.inputs.elm.elm_domains.rst", "api/pypath.inputs.elm.elm_instances.rst", "api/pypath.inputs.elm.elm_interactions.rst", "api/pypath.inputs.embopress.rst", "api/pypath.inputs.embopress.embopress_supplementary.rst", "api/pypath.inputs.embrace.rst", "api/pypath.inputs.embrace.embrace_annotations.rst", "api/pypath.inputs.embrace.embrace_interactions.rst", "api/pypath.inputs.embrace.embrace_raw.rst", "api/pypath.inputs.embrace.embrace_translated.rst", "api/pypath.inputs.encode.rst", "api/pypath.inputs.encode.encode_tf_mirna_interactions.rst", "api/pypath.inputs.ensembl.rst", "api/pypath.inputs.ensembl.ensembl_organisms.rst", "api/pypath.inputs.exocarta.rst", "api/pypath.inputs.exocarta.get_exocarta.rst", "api/pypath.inputs.exocarta.get_vesiclepedia.rst", "api/pypath.inputs.genecards.rst", "api/pypath.inputs.genecards.genecards_datasheet.rst", "api/pypath.inputs.genecards.genecards_soup.rst", "api/pypath.inputs.genecards.genecards_summaries.rst", "api/pypath.inputs.get_method.rst", "api/pypath.inputs.go.rst", "api/pypath.inputs.go.get_go_desc.rst", "api/pypath.inputs.go.get_go_quick.rst", "api/pypath.inputs.go.get_goslim.rst", "api/pypath.inputs.go.go_ancestors.rst", "api/pypath.inputs.go.go_ancestors_goose.rst", "api/pypath.inputs.go.go_ancestors_quickgo.rst", "api/pypath.inputs.go.go_annotations.rst", "api/pypath.inputs.go.go_annotations_all.rst", "api/pypath.inputs.go.go_annotations_goa.rst", "api/pypath.inputs.go.go_annotations_goose.rst", "api/pypath.inputs.go.go_annotations_quickgo.rst", "api/pypath.inputs.go.go_annotations_solr.rst", "api/pypath.inputs.go.go_annotations_uniprot.rst", "api/pypath.inputs.go.go_descendants.rst", "api/pypath.inputs.go.go_descendants_goose.rst", "api/pypath.inputs.go.go_descendants_quickgo.rst", "api/pypath.inputs.go.go_descendants_to_ancestors.rst", "api/pypath.inputs.go.go_terms.rst", "api/pypath.inputs.go.go_terms_goose.rst", "api/pypath.inputs.go.go_terms_quickgo.rst", "api/pypath.inputs.go.go_terms_solr.rst", "api/pypath.inputs.gpcrdb.rst", "api/pypath.inputs.gpcrdb.gpcrdb_annotations.rst", "api/pypath.inputs.graphviz.rst", "api/pypath.inputs.graphviz.graphviz_attrs.rst", "api/pypath.inputs.guide2pharma.rst", "api/pypath.inputs.guide2pharma.guide2pharma_complexes.rst", "api/pypath.inputs.guide2pharma.guide2pharma_download.rst", "api/pypath.inputs.guide2pharma.guide2pharma_interactions.rst", "api/pypath.inputs.havugimana.rst", "api/pypath.inputs.havugimana.get_havugimana.rst", "api/pypath.inputs.havugimana.havugimana_complexes.rst", "api/pypath.inputs.hgnc.rst", "api/pypath.inputs.hgnc.hgnc_genegroups.rst", "api/pypath.inputs.hippie.rst", "api/pypath.inputs.hippie.hippie_interactions.rst", "api/pypath.inputs.hmdb.rst", "api/pypath.inputs.hmdb.Field.rst", "api/pypath.inputs.hmdb.hmdb_iter_metabolites.rst", "api/pypath.inputs.hmdb.hmdb_mapping.rst", "api/pypath.inputs.hmdb.hmdb_metabolites_raw.rst", "api/pypath.inputs.hmdb.hmdb_table.rst", "api/pypath.inputs.hmdb.hmdb_xml.rst", "api/pypath.inputs.homologene.rst", "api/pypath.inputs.homologene.get_homologene.rst", "api/pypath.inputs.homologene.homologene_dict.rst", "api/pypath.inputs.homologene.homologene_uniprot_dict.rst", "api/pypath.inputs.hpmr.rst", "api/pypath.inputs.hpmr.HpmrInteraction.rst", "api/pypath.inputs.hpmr.get_hpmr.rst", "api/pypath.inputs.hpmr.hpmr_annotations.rst", "api/pypath.inputs.hpmr.hpmr_complexes.rst", "api/pypath.inputs.hpmr.hpmr_interactions.rst", "api/pypath.inputs.hpo.rst", "api/pypath.inputs.hpo.hpo_annotations.rst", "api/pypath.inputs.hpo.hpo_diseases.rst", "api/pypath.inputs.hpo.hpo_ontology.rst", "api/pypath.inputs.hpo.hpo_terms.rst", "api/pypath.inputs.hprd.rst", "api/pypath.inputs.hprd.get_hprd.rst", "api/pypath.inputs.hprd.hprd_enzyme_substrate.rst", "api/pypath.inputs.hprd.hprd_interactions.rst", "api/pypath.inputs.hprd.hprd_interactions_htp.rst", "api/pypath.inputs.htri.rst", "api/pypath.inputs.htri.htri_interactions.rst", "api/pypath.inputs.humancellmap.rst", "api/pypath.inputs.humancellmap.humancellmap_annotations.rst", "api/pypath.inputs.humap.rst", "api/pypath.inputs.humap.humap2_complexes.rst", "api/pypath.inputs.humap.humap_complexes.rst", "api/pypath.inputs.huri.rst", "api/pypath.inputs.huri.hi_i_interactions.rst", "api/pypath.inputs.huri.hi_ii_interactions.rst", "api/pypath.inputs.huri.hi_iii_old.rst", "api/pypath.inputs.huri.hi_union_interactions.rst", "api/pypath.inputs.huri.huri_interactions.rst", "api/pypath.inputs.huri.lit_bm_13_interactions.rst", "api/pypath.inputs.huri.lit_bm_17_interactions.rst", "api/pypath.inputs.huri.lit_bm_interactions.rst", "api/pypath.inputs.huri.rolland_hi_ii_14.rst", "api/pypath.inputs.huri.vidal_hi_iii_old.rst", "api/pypath.inputs.huri.yang2016_interactions.rst", "api/pypath.inputs.huri.yu2011_interactions.rst", "api/pypath.inputs.i3d.rst", "api/pypath.inputs.i3d.get_i3d.rst", "api/pypath.inputs.icellnet.rst", "api/pypath.inputs.icellnet.IcellnetRecord.rst", "api/pypath.inputs.icellnet.icellnet_annotations.rst", "api/pypath.inputs.icellnet.icellnet_complexes.rst", "api/pypath.inputs.icellnet.icellnet_interactions.rst", "api/pypath.inputs.ielm.rst", "api/pypath.inputs.ielm.get_ielm.rst", "api/pypath.inputs.ielm.get_ielm_huge.rst", "api/pypath.inputs.imweb.rst", "api/pypath.inputs.imweb.get_imweb.rst", "api/pypath.inputs.imweb.get_imweb_req.rst", "api/pypath.inputs.innatedb.rst", "api/pypath.inputs.innatedb.innatedb_interactions.rst", "api/pypath.inputs.instruct.rst", "api/pypath.inputs.instruct.get_instruct.rst", "api/pypath.inputs.instruct.get_instruct_offsets.rst", "api/pypath.inputs.intact.rst", "api/pypath.inputs.intact.intact_interactions.rst", "api/pypath.inputs.integrins.rst", "api/pypath.inputs.integrins.get_integrins.rst", "api/pypath.inputs.interpro.rst", "api/pypath.inputs.interpro.interpro2go_annotations.rst", "api/pypath.inputs.interpro.interpro_annotations.rst", "api/pypath.inputs.interpro.interpro_entries.rst", "api/pypath.inputs.interpro.interpro_xrefs.rst", "api/pypath.inputs.intogen.rst", "api/pypath.inputs.intogen.intogen_annotations.rst", "api/pypath.inputs.ipi.rst", "api/pypath.inputs.ipi.ipi_uniprot.rst", "api/pypath.inputs.iptmnet.rst", "api/pypath.inputs.iptmnet.IptmnetInteraction.rst", "api/pypath.inputs.iptmnet.iptmnet_interactions.rst", "api/pypath.inputs.italk.rst", "api/pypath.inputs.italk.italk_annotations.rst", "api/pypath.inputs.italk.italk_interactions.rst", "api/pypath.inputs.italk.italk_raw.rst", "api/pypath.inputs.kea.rst", "api/pypath.inputs.kea.kea_enzyme_substrate.rst", "api/pypath.inputs.kea.kea_interactions.rst", "api/pypath.inputs.kegg.rst", "api/pypath.inputs.kegg.KeggPathway.rst", "api/pypath.inputs.kegg.kegg_dbget.rst", "api/pypath.inputs.kegg.kegg_interactions.rst", "api/pypath.inputs.kegg.kegg_medicus.rst", "api/pypath.inputs.kegg.kegg_medicus_complexes.rst", "api/pypath.inputs.kegg.kegg_medicus_interactions.rst", "api/pypath.inputs.kegg.kegg_pathway_annotations.rst", "api/pypath.inputs.kegg.kegg_pathway_annotations_pathwaycommons.rst", "api/pypath.inputs.kegg.kegg_pathways.rst", "api/pypath.inputs.kegg_api.rst", "api/pypath.inputs.kegg_api.disease_to_drug.rst", "api/pypath.inputs.kegg_api.disease_to_gene.rst", "api/pypath.inputs.kegg_api.disease_to_pathway.rst", "api/pypath.inputs.kegg_api.drug_to_disease.rst", "api/pypath.inputs.kegg_api.drug_to_drug.rst", "api/pypath.inputs.kegg_api.drug_to_gene.rst", "api/pypath.inputs.kegg_api.drug_to_pathway.rst", "api/pypath.inputs.kegg_api.gene_to_disease.rst", "api/pypath.inputs.kegg_api.gene_to_drug.rst", "api/pypath.inputs.kegg_api.gene_to_pathway.rst", "api/pypath.inputs.kegg_api.kegg_drug_to_chebi.rst", "api/pypath.inputs.kegg_api.kegg_gene_to_ncbi_geneid.rst", "api/pypath.inputs.kegg_api.kegg_gene_to_uniprot.rst", "api/pypath.inputs.kegg_api.pathway_to_disease.rst", "api/pypath.inputs.kegg_api.pathway_to_drug.rst", "api/pypath.inputs.kegg_api.pathway_to_gene.rst", "api/pypath.inputs.kinasedotcom.rst", "api/pypath.inputs.kinasedotcom.kinasedotcom_annotations.rst", "api/pypath.inputs.kirouac2010.rst", "api/pypath.inputs.kirouac2010.kirouac2010_interactions.rst", "api/pypath.inputs.lambert2018.rst", "api/pypath.inputs.lambert2018.lambert2018_annotations.rst", "api/pypath.inputs.lambert2018.lambert2018_s1_raw.rst", "api/pypath.inputs.laudanna.rst", "api/pypath.inputs.laudanna.laudanna_directions.rst", "api/pypath.inputs.laudanna.laudanna_effects.rst", "api/pypath.inputs.li2012.rst", "api/pypath.inputs.li2012.get_li2012.rst", "api/pypath.inputs.li2012.li2012_dmi.rst", "api/pypath.inputs.li2012.li2012_enzyme_substrate.rst", "api/pypath.inputs.li2012.li2012_interactions.rst", "api/pypath.inputs.lincs.rst", "api/pypath.inputs.lincs.lincs_compounds.rst", "api/pypath.inputs.lmpid.rst", "api/pypath.inputs.lmpid.lmpid_dmi.rst", "api/pypath.inputs.lmpid.lmpid_interactions.rst", "api/pypath.inputs.lmpid.load_lmpid.rst", "api/pypath.inputs.lncdisease.rst", "api/pypath.inputs.lncdisease.lncdisease_interactions.rst", "api/pypath.inputs.lncrnadb.rst", "api/pypath.inputs.lncrnadb.lncrnadb_interactions.rst", "api/pypath.inputs.locate.rst", "api/pypath.inputs.locate.locate_localizations.rst", "api/pypath.inputs.lrdb.rst", "api/pypath.inputs.lrdb.LrdbAnnotation.rst", "api/pypath.inputs.lrdb.lrdb_annotations.rst", "api/pypath.inputs.lrdb.lrdb_interactions.rst", "api/pypath.inputs.macrophage.rst", "api/pypath.inputs.macrophage.macrophage_interactions.rst", "api/pypath.inputs.main.rst", "api/pypath.inputs.matrisome.rst", "api/pypath.inputs.matrisome.matrisome_annotations.rst", "api/pypath.inputs.matrixdb.rst", "api/pypath.inputs.matrixdb.matrixdb_annotations.rst", "api/pypath.inputs.matrixdb.matrixdb_ecm_proteins.rst", "api/pypath.inputs.matrixdb.matrixdb_interactions.rst", "api/pypath.inputs.matrixdb.matrixdb_membrane_proteins.rst", "api/pypath.inputs.matrixdb.matrixdb_secreted_proteins.rst", "api/pypath.inputs.mcam.rst", "api/pypath.inputs.mcam.mcam_cell_adhesion_molecules.rst", "api/pypath.inputs.membranome.rst", "api/pypath.inputs.membranome.membranome_annotations.rst", "api/pypath.inputs.mimp.rst", "api/pypath.inputs.mimp.get_kinase_class.rst", "api/pypath.inputs.mimp.mimp_enzyme_substrate.rst", "api/pypath.inputs.mimp.mimp_interactions.rst", "api/pypath.inputs.mir2disease.rst", "api/pypath.inputs.mir2disease.mir2disease_interactions.rst", "api/pypath.inputs.mirbase.rst", "api/pypath.inputs.mirbase.get_mirbase_aliases.rst", "api/pypath.inputs.mirbase.mirbase_ids.rst", "api/pypath.inputs.mirbase.mirbase_mature.rst", "api/pypath.inputs.mirbase.mirbase_mature_all.rst", "api/pypath.inputs.mirbase.mirbase_precursor.rst", "api/pypath.inputs.mirbase.mirbase_precursor_all.rst", "api/pypath.inputs.mirbase.mirbase_precursor_to_mature.rst", "api/pypath.inputs.mirdeathdb.rst", "api/pypath.inputs.mirdeathdb.mirdeathdb_interactions.rst", "api/pypath.inputs.mirecords.rst", "api/pypath.inputs.mirecords.mirecords_interactions.rst", "api/pypath.inputs.mirtarbase.rst", "api/pypath.inputs.mirtarbase.mirtarbase_interactions.rst", "api/pypath.inputs.mitab.rst", "api/pypath.inputs.mitab.mitab_field_list.rst", "api/pypath.inputs.mitab.mitab_field_uniprot.rst", "api/pypath.inputs.mppi.rst", "api/pypath.inputs.mppi.mppi_interactions.rst", "api/pypath.inputs.ncrdeathdb.rst", "api/pypath.inputs.ncrdeathdb.ncrdeathdb_interactions.rst", "api/pypath.inputs.negatome.rst", "api/pypath.inputs.negatome.negatome_interactions.rst", "api/pypath.inputs.netbiol.rst", "api/pypath.inputs.netbiol.arn_interactions.rst", "api/pypath.inputs.netbiol.nrf2ome_interactions.rst", "api/pypath.inputs.netpath.rst", "api/pypath.inputs.netpath.netpath_interactions.rst", "api/pypath.inputs.netpath.netpath_names.rst", "api/pypath.inputs.netpath.netpath_pathway_annotations.rst", "api/pypath.inputs.oma.rst", "api/pypath.inputs.oma.oma_orthologs.rst", "api/pypath.inputs.ontology.rst", "api/pypath.inputs.ontology.listof_ontologies.rst", "api/pypath.inputs.ontology.ontology.rst", "api/pypath.inputs.opm.rst", "api/pypath.inputs.opm.opm_annotations.rst", "api/pypath.inputs.oreganno.rst", "api/pypath.inputs.oreganno.oreganno_interactions.rst", "api/pypath.inputs.oreganno.oreganno_raw.rst", "api/pypath.inputs.panglaodb.rst", "api/pypath.inputs.panglaodb.panglaodb_annotations.rst", "api/pypath.inputs.panglaodb.panglaodb_raw.rst", "api/pypath.inputs.pathophenodb.rst", "api/pypath.inputs.pathophenodb.DiseasePathogen.rst", "api/pypath.inputs.pathophenodb.disease_pathogen_interactions.rst", "api/pypath.inputs.pathwaycommons.rst", "api/pypath.inputs.pathwaycommons.PathwayCommonsInteraction.rst", "api/pypath.inputs.pathwaycommons.PathwayCommonsResource.rst", "api/pypath.inputs.pathwaycommons.pathwaycommons_bind_interactions.rst", "api/pypath.inputs.pathwaycommons.pathwaycommons_biogrid_interactions.rst", "api/pypath.inputs.pathwaycommons.pathwaycommons_corum_interactions.rst", "api/pypath.inputs.pathwaycommons.pathwaycommons_dip_interactions.rst", "api/pypath.inputs.pathwaycommons.pathwaycommons_hprd_interactions.rst", "api/pypath.inputs.pathwaycommons.pathwaycommons_inoh_interactions.rst", "api/pypath.inputs.pathwaycommons.pathwaycommons_intact_interactions.rst", "api/pypath.inputs.pathwaycommons.pathwaycommons_interactions.rst", "api/pypath.inputs.pathwaycommons.pathwaycommons_kegg_interactions.rst", "api/pypath.inputs.pathwaycommons.pathwaycommons_netpath_interactions.rst", "api/pypath.inputs.pathwaycommons.pathwaycommons_panther_interactions.rst", "api/pypath.inputs.pathwaycommons.pathwaycommons_phosphosite_interactions.rst", "api/pypath.inputs.pathwaycommons.pathwaycommons_reactome_interactions.rst", "api/pypath.inputs.pathwaycommons.pathwaycommons_wikipathways_interactions.rst", "api/pypath.inputs.pazar.rst", "api/pypath.inputs.pazar.pazar_interactions.rst", "api/pypath.inputs.pdb.rst", "api/pypath.inputs.pdb.pdb_chains.rst", "api/pypath.inputs.pdb.pdb_complexes.rst", "api/pypath.inputs.pdb.pdb_uniprot.rst", "api/pypath.inputs.pdzbase.rst", "api/pypath.inputs.pdzbase.pdzbase_interactions.rst", "api/pypath.inputs.pepcyber.rst", "api/pypath.inputs.pepcyber.pepcyber_details.rst", "api/pypath.inputs.pepcyber.pepcyber_interactions.rst", "api/pypath.inputs.pfam.rst", "api/pypath.inputs.pfam.pfam_names.rst", "api/pypath.inputs.pfam.pfam_pdb.rst", "api/pypath.inputs.pfam.pfam_regions.rst", "api/pypath.inputs.pfam.pfam_uniprot.rst", "api/pypath.inputs.pharos.rst", "api/pypath.inputs.pharos.pharos_diseases.rst", "api/pypath.inputs.pharos.pharos_expression.rst", "api/pypath.inputs.pharos.pharos_general.rst", "api/pypath.inputs.pharos.pharos_gtex.rst", "api/pypath.inputs.pharos.pharos_ligands.rst", "api/pypath.inputs.pharos.pharos_orthologs.rst", "api/pypath.inputs.pharos.pharos_targets.rst", "api/pypath.inputs.pharos.pharos_xrefs.rst", "api/pypath.inputs.phobius.rst", "api/pypath.inputs.phobius.phobius_annotations.rst", "api/pypath.inputs.phosphatome.rst", "api/pypath.inputs.phosphatome.phosphatome_annotations.rst", "api/pypath.inputs.phosphoelm.rst", "api/pypath.inputs.phosphoelm.phosphoelm_enzyme_substrate.rst", "api/pypath.inputs.phosphoelm.phosphoelm_interactions.rst", "api/pypath.inputs.phosphoelm.phosphoelm_kinases.rst", "api/pypath.inputs.phosphonetworks.rst", "api/pypath.inputs.phosphonetworks.phosphonetworks_enzyme_substrate.rst", "api/pypath.inputs.phosphonetworks.phosphonetworks_interactions.rst", "api/pypath.inputs.phosphopoint.rst", "api/pypath.inputs.phosphopoint.phosphopoint_directions.rst", "api/pypath.inputs.phosphopoint.phosphopoint_interactions.rst", "api/pypath.inputs.phosphosite.rst", "api/pypath.inputs.phosphosite.phosphosite_directions.rst", "api/pypath.inputs.phosphosite.phosphosite_enzyme_substrate.rst", "api/pypath.inputs.phosphosite.phosphosite_interactions.rst", "api/pypath.inputs.phosphosite.phosphosite_interactions_all.rst", "api/pypath.inputs.phosphosite.phosphosite_interactions_curated.rst", "api/pypath.inputs.phosphosite.phosphosite_interactions_new.rst", "api/pypath.inputs.phosphosite.phosphosite_interactions_noref.rst", "api/pypath.inputs.phosphosite.phosphosite_ptm_orthology.rst", "api/pypath.inputs.phosphosite.phosphosite_ptms.rst", "api/pypath.inputs.phosphosite.phosphosite_regsites.rst", "api/pypath.inputs.phosphosite.phosphosite_regsites_one_organism.rst", "api/pypath.inputs.phosphosite.regsites_tab.rst", "api/pypath.inputs.pisa.rst", "api/pypath.inputs.pisa.PisaBond.rst", "api/pypath.inputs.pisa.pisa_bonds.rst", "api/pypath.inputs.pisa.pisa_interfaces.rst", "api/pypath.inputs.pro.rst", "api/pypath.inputs.pro.get_pro.rst", "api/pypath.inputs.pro.pro_mapping.rst", "api/pypath.inputs.progeny.rst", "api/pypath.inputs.progeny.progeny_annotations.rst", "api/pypath.inputs.progeny.progeny_raw.rst", "api/pypath.inputs.proteinatlas.rst", "api/pypath.inputs.proteinatlas.get_proteinatlas.rst", "api/pypath.inputs.proteinatlas.proteinatlas_annotations.rst", "api/pypath.inputs.proteinatlas.proteinatlas_secretome_annotations.rst", "api/pypath.inputs.proteinatlas.proteinatlas_subcellular_annotations.rst", "api/pypath.inputs.proteins.rst", "api/pypath.inputs.proteins.variants.rst", "api/pypath.inputs.protmapper.rst", "api/pypath.inputs.protmapper.get_protmapper.rst", "api/pypath.inputs.protmapper.protmapper_enzyme_substrate.rst", "api/pypath.inputs.protmapper.protmapper_interactions.rst", "api/pypath.inputs.pubchem.rst", "api/pypath.inputs.pubchem.pubchem_mapping.rst", "api/pypath.inputs.pubmed.rst", "api/pypath.inputs.pubmed.get_pmid.rst", "api/pypath.inputs.pubmed.get_pubmeds.rst", "api/pypath.inputs.pubmed.only_pmids.rst", "api/pypath.inputs.pubmed.open_pubmed.rst", "api/pypath.inputs.pubmed.pmids_dict.rst", "api/pypath.inputs.pubmed.pmids_list.rst", "api/pypath.inputs.ramilowski2015.rst", "api/pypath.inputs.ramilowski2015.ramilowski_interactions.rst", "api/pypath.inputs.ramilowski2015.ramilowski_locations.rst", "api/pypath.inputs.ramp.rst", "api/pypath.inputs.ramp.ramp_id_types.rst", "api/pypath.inputs.ramp.ramp_id_types_2.rst", "api/pypath.inputs.ramp.ramp_list_tables.rst", "api/pypath.inputs.ramp.ramp_mapping.rst", "api/pypath.inputs.ramp.ramp_raw.rst", "api/pypath.inputs.ramp.ramp_show_tables.rst", "api/pypath.inputs.rdata.rst", "api/pypath.inputs.reaction.rst", "api/pypath.inputs.reaction.acsn_biopax.rst", "api/pypath.inputs.reaction.acsn_interactions_2.rst", "api/pypath.inputs.reaction.get_acsn_effects.rst", "api/pypath.inputs.reaction.get_controls.rst", "api/pypath.inputs.reaction.get_interactions.rst", "api/pypath.inputs.reaction.get_reactions.rst", "api/pypath.inputs.reaction.get_soup.rst", "api/pypath.inputs.reaction.panther_biopax.rst", "api/pypath.inputs.reaction.panther_interactions.rst", "api/pypath.inputs.reaction.pid_biopax.rst", "api/pypath.inputs.reaction.pid_interactions.rst", "api/pypath.inputs.reaction.process_complex.rst", "api/pypath.inputs.reaction.process_controls.rst", "api/pypath.inputs.reaction.process_reactions.rst", "api/pypath.inputs.reaction.reactions_biopax.rst", "api/pypath.inputs.reaction.reactome_biopax.rst", "api/pypath.inputs.reaction.reactome_bs.rst", "api/pypath.inputs.reaction.reactome_interactions.rst", "api/pypath.inputs.reaction.reactome_sbml.rst", "api/pypath.inputs.scconnect.rst", "api/pypath.inputs.scconnect.scconnect_annotations.rst", "api/pypath.inputs.scconnect.scconnect_complexes.rst", "api/pypath.inputs.scconnect.scconnect_interactions.rst", "api/pypath.inputs.science.rst", "api/pypath.inputs.science.science_download.rst", "api/pypath.inputs.signalink.rst", "api/pypath.inputs.signalink.signalink_annotations.rst", "api/pypath.inputs.signalink.signalink_function_annotations.rst", "api/pypath.inputs.signalink.signalink_interactions.rst", "api/pypath.inputs.signalink.signalink_pathway_annotations.rst", "api/pypath.inputs.signor.rst", "api/pypath.inputs.signor.signor_complexes.rst", "api/pypath.inputs.signor.signor_enzyme_substrate.rst", "api/pypath.inputs.signor.signor_interactions.rst", "api/pypath.inputs.signor.signor_pathway_annotations.rst", "api/pypath.inputs.signor.signor_pathways.rst", "api/pypath.inputs.signor.signor_protein_families.rst", "api/pypath.inputs.spike.rst", "api/pypath.inputs.spike.spike_complexes.rst", "api/pypath.inputs.spike.spike_interactions.rst", "api/pypath.inputs.stitch.rst", "api/pypath.inputs.stitch.stitch_actions_interactions.rst", "api/pypath.inputs.stitch.stitch_links_interactions.rst", "api/pypath.inputs.string.rst", "api/pypath.inputs.string.string_effects.rst", "api/pypath.inputs.string.string_links_interactions.rst", "api/pypath.inputs.string.string_physical_interactions.rst", "api/pypath.inputs.string.string_species.rst", "api/pypath.inputs.surfaceome.rst", "api/pypath.inputs.surfaceome.surfaceome_annotations.rst", "api/pypath.inputs.switches_elm.rst", "api/pypath.inputs.switches_elm.get_switches_elm.rst", "api/pypath.inputs.talklr.rst", "api/pypath.inputs.talklr.talklr_annotations.rst", "api/pypath.inputs.talklr.talklr_interactions.rst", "api/pypath.inputs.talklr.talklr_raw.rst", "api/pypath.inputs.tcdb.rst", "api/pypath.inputs.tcdb.tcdb_annotations.rst", "api/pypath.inputs.tcdb.tcdb_classes.rst", "api/pypath.inputs.tcdb.tcdb_families.rst", "api/pypath.inputs.tfcensus.rst", "api/pypath.inputs.tfcensus.tfcensus_annotations.rst", "api/pypath.inputs.threedcomplex.rst", "api/pypath.inputs.threedcomplex.threedcomplex_chains.rst", "api/pypath.inputs.threedcomplex.threedcomplex_complexes.rst", "api/pypath.inputs.threedcomplex.threedcomplex_contacts.rst", "api/pypath.inputs.threedcomplex.threedcomplex_ddi.rst", "api/pypath.inputs.threedcomplex.threedcomplex_nresidues.rst", "api/pypath.inputs.threedid.rst", "api/pypath.inputs.threedid.get_3did.rst", "api/pypath.inputs.threedid.get_3did_ddi.rst", "api/pypath.inputs.threedid.get_3did_dmi.rst", "api/pypath.inputs.threedid.process_3did_dmi.rst", "api/pypath.inputs.topdb.rst", "api/pypath.inputs.topdb.topdb_annotations.rst", "api/pypath.inputs.transmir.rst", "api/pypath.inputs.transmir.transmir_interactions.rst", "api/pypath.inputs.trip.rst", "api/pypath.inputs.trip.take_a_trip.rst", "api/pypath.inputs.trip.trip_find_uniprot.rst", "api/pypath.inputs.trip.trip_get_uniprot.rst", "api/pypath.inputs.trip.trip_interactions.rst", "api/pypath.inputs.trip.trip_process.rst", "api/pypath.inputs.trip.trip_process_table.rst", "api/pypath.inputs.unichem.rst", "api/pypath.inputs.unichem.info.rst", "api/pypath.inputs.unichem.unichem_info.rst", "api/pypath.inputs.unichem.unichem_mapping.rst", "api/pypath.inputs.unichem.unichem_sources.rst", "api/pypath.inputs.uniprot.rst", "api/pypath.inputs.uniprot.Taxon.rst", "api/pypath.inputs.uniprot.UniprotRecordHistory.rst", "api/pypath.inputs.uniprot.all_swissprots.rst", "api/pypath.inputs.uniprot.all_trembls.rst", "api/pypath.inputs.uniprot.all_uniprots.rst", "api/pypath.inputs.uniprot.deleted_uniprot_genesymbol.rst", "api/pypath.inputs.uniprot.get_db.rst", "api/pypath.inputs.uniprot.get_uniprot_sec.rst", "api/pypath.inputs.uniprot.init_db.rst", "api/pypath.inputs.uniprot.is_swissprot.rst", "api/pypath.inputs.uniprot.is_trembl.rst", "api/pypath.inputs.uniprot.is_uniprot.rst", "api/pypath.inputs.uniprot.protein_datasheet.rst", "api/pypath.inputs.uniprot.swissprot_deleted.rst", "api/pypath.inputs.uniprot.trembl_deleted.rst", "api/pypath.inputs.uniprot.uniprot_data.rst", "api/pypath.inputs.uniprot.uniprot_deleted.rst", "api/pypath.inputs.uniprot.uniprot_families.rst", "api/pypath.inputs.uniprot.uniprot_history.rst", "api/pypath.inputs.uniprot.uniprot_history_recent_datasheet.rst", "api/pypath.inputs.uniprot.uniprot_keywords.rst", "api/pypath.inputs.uniprot.uniprot_locations.rst", "api/pypath.inputs.uniprot.uniprot_ncbi_taxids.rst", "api/pypath.inputs.uniprot.uniprot_ncbi_taxids_2.rst", "api/pypath.inputs.uniprot.uniprot_preprocess.rst", "api/pypath.inputs.uniprot.uniprot_recent_version.rst", "api/pypath.inputs.uniprot.uniprot_taxonomy.rst", "api/pypath.inputs.uniprot.uniprot_tissues.rst", "api/pypath.inputs.uniprot.uniprot_topology.rst", "api/pypath.inputs.uniprot.valid_uniprot.rst", "api/pypath.inputs.wang.rst", "api/pypath.inputs.wang.cui_interactions.rst", "api/pypath.inputs.wang.hsn_interactions.rst", "api/pypath.inputs.wang.wang_annotations.rst", "api/pypath.inputs.wang.wang_interactions.rst", "api/pypath.inputs.wojtowicz2020.rst", "api/pypath.inputs.wojtowicz2020.wojtowicz2020_interactions.rst", "api/pypath.inputs.wojtowicz2020.wojtowicz2020_raw.rst", "api/pypath.inputs.zhong2015.rst", "api/pypath.inputs.zhong2015.zhong2015_annotations.rst", "api/pypath.internals.rst", "api/pypath.internals.annot_formats.rst", "api/pypath.internals.annot_formats.AnnotDef.rst", "api/pypath.internals.annot_formats.AnnotDefKey.rst", "api/pypath.internals.annot_formats.AnnotOp.rst", "api/pypath.internals.annot_formats.AnnotationGroup.rst", "api/pypath.internals.input_formats.rst", "api/pypath.internals.input_formats.ArrayMapping.rst", "api/pypath.internals.input_formats.BiomartMapping.rst", "api/pypath.internals.input_formats.FileMapping.rst", "api/pypath.internals.input_formats.HmdbMapping.rst", "api/pypath.internals.input_formats.MappingInput.rst", "api/pypath.internals.input_formats.NetworkInput.rst", "api/pypath.internals.input_formats.PickleMapping.rst", "api/pypath.internals.input_formats.ProMapping.rst", "api/pypath.internals.input_formats.RampMapping.rst", "api/pypath.internals.input_formats.ReadList.rst", "api/pypath.internals.input_formats.UnichemMapping.rst", "api/pypath.internals.input_formats.UniprotListMapping.rst", "api/pypath.internals.input_formats.UniprotMapping.rst", "api/pypath.internals.intera.rst", "api/pypath.internals.intera.Complex.rst", "api/pypath.internals.intera.Domain.rst", "api/pypath.internals.intera.DomainDomain.rst", "api/pypath.internals.intera.DomainMotif.rst", "api/pypath.internals.intera.Interface.rst", "api/pypath.internals.intera.Motif.rst", "api/pypath.internals.intera.Ptm.rst", "api/pypath.internals.intera.Regulation.rst", "api/pypath.internals.intera.Residue.rst", "api/pypath.internals.license.rst", "api/pypath.internals.license.License.rst", "api/pypath.internals.license.LicenseAttrib.rst", "api/pypath.internals.license.LicenseFeature.rst", "api/pypath.internals.license.LicensePurpose.rst", "api/pypath.internals.license.LicenseSharing.rst", "api/pypath.internals.maps.rst", "api/pypath.internals.refs.rst", "api/pypath.internals.refs.Reference.rst", "api/pypath.internals.refs.get_pubmed_data.rst", "api/pypath.internals.resource.rst", "api/pypath.internals.resource.AbstractResource.rst", "api/pypath.internals.resource.EnzymeSubstrateResource.rst", "api/pypath.internals.resource.EnzymeSubstrateResourceKey.rst", "api/pypath.internals.resource.NetworkResource.rst", "api/pypath.internals.resource.NetworkResourceKey.rst", "api/pypath.internals.resource.ResourceAttributes.rst", "api/pypath.legacy.rst", "api/pypath.legacy.db_categories.rst", "api/pypath.legacy.db_categories.get_categories.rst", "api/pypath.legacy.db_categories.get_category.rst", "api/pypath.legacy.main.rst", "api/pypath.legacy.main.Direction.rst", "api/pypath.legacy.main.NetworkEntityCollection.rst", "api/pypath.legacy.main.NetworkStatsRecord.rst", "api/pypath.legacy.main.PyPath.rst", "api/pypath.legacy.main.get_db.rst", "api/pypath.legacy.main.init_db.rst", "api/pypath.log.rst", "api/pypath.omnipath.rst", "api/pypath.omnipath.app.rst", "api/pypath.omnipath.app.DatabaseManager.rst", "api/pypath.omnipath.databases.rst", "api/pypath.omnipath.databases.build.rst", "api/pypath.omnipath.databases.class_and_param.rst", "api/pypath.omnipath.databases.define.rst", "api/pypath.omnipath.databases.define.DatabaseClass.rst", "api/pypath.omnipath.databases.define.DatabaseDefinition.rst", "api/pypath.omnipath.databases.define.DatabaseDefinitionManager.rst", "api/pypath.omnipath.databases.get_manager.rst", "api/pypath.omnipath.databases.init_manager.rst", "api/pypath.omnipath.export.rst", "api/pypath.omnipath.export.Export.rst", "api/pypath.omnipath.init.rst", "api/pypath.omnipath.param.rst", "api/pypath.omnipath.param.curated_ppi_resources.rst", "api/pypath.omnipath.param.tf_target_resources.rst", "api/pypath.omnipath.server.rst", "api/pypath.omnipath.server.build.rst", "api/pypath.omnipath.server.build.WebserviceTables.rst", "api/pypath.omnipath.server.generate_about_page.rst", "api/pypath.omnipath.server.generate_about_page.export_licenses.rst", "api/pypath.omnipath.server.generate_about_page.generate_about_html.rst", "api/pypath.omnipath.server.generate_about_page.resource_list_latex.rst", "api/pypath.omnipath.server.generate_about_page.write_html.rst", "api/pypath.omnipath.server.legacy.rst", "api/pypath.omnipath.server.legacy.PypathServer.rst", "api/pypath.omnipath.server.run.rst", "api/pypath.omnipath.server.run.BaseServer.rst", "api/pypath.omnipath.server.run.Rest.rst", "api/pypath.omnipath.server.run.TableServer.rst", "api/pypath.omnipath.server.run.TwistedWebResource.rst", "api/pypath.omnipath.server.run.TwistedWebSite.rst", "api/pypath.omnipath.server.run.stop_server.rst", "api/pypath.omnipath.server.run.twisted_listen_tcp.rst", "api/pypath.omnipath.server.run.twisted_run.rst", "api/pypath.resources.rst", "api/pypath.resources.controller.rst", "api/pypath.resources.controller.ResourceController.rst", "api/pypath.resources.data.rst", "api/pypath.resources.data_formats.rst", "api/pypath.resources.data_formats.ROOT.rst", "api/pypath.resources.data_formats.activity_flow.rst", "api/pypath.resources.data_formats.collectri.rst", "api/pypath.resources.data_formats.enzyme_substrate.rst", "api/pypath.resources.data_formats.interaction.rst", "api/pypath.resources.data_formats.interaction_htp.rst", "api/pypath.resources.data_formats.obsolate.rst", "api/pypath.resources.data_formats.pathway_bad.rst", "api/pypath.resources.data_formats.reaction_pc.rst", "api/pypath.resources.data_formats.transcription_deprecated.rst", "api/pypath.resources.data_formats.transcription_onebyone.rst", "api/pypath.resources.descriptions.rst", "api/pypath.resources.descriptions.export_licenses.rst", "api/pypath.resources.descriptions.gen_html.rst", "api/pypath.resources.descriptions.resource_list_latex.rst", "api/pypath.resources.descriptions.write_html.rst", "api/pypath.resources.get_controller.rst", "api/pypath.resources.licenses.rst", "api/pypath.resources.licenses.Licenses.rst", "api/pypath.resources.network.rst", "api/pypath.resources.network.dorothea_expand_levels.rst", "api/pypath.resources.urls.rst", "api/pypath.share.rst", "api/pypath.share.cache.rst", "api/pypath.share.cache.cache_item.rst", "api/pypath.share.cache.cache_path.rst", "api/pypath.share.cache.get_cachedir.rst", "api/pypath.share.common.rst", "api/pypath.share.common.add_to_list.rst", "api/pypath.share.common.add_to_set.rst", "api/pypath.share.common.at_least_in.rst", "api/pypath.share.common.clean_dict.rst", "api/pypath.share.common.combine_attrs.rst", "api/pypath.share.common.compr.rst", "api/pypath.share.common.console.rst", "api/pypath.share.common.decode.rst", "api/pypath.share.common.del_empty.rst", "api/pypath.share.common.df_memory_usage.rst", "api/pypath.share.common.dict_collapse_keys.rst", "api/pypath.share.common.dict_counts.rst", "api/pypath.share.common.dict_diff.rst", "api/pypath.share.common.dict_expand_keys.rst", "api/pypath.share.common.dict_percent.rst", "api/pypath.share.common.dict_set_path.rst", "api/pypath.share.common.dict_set_percent.rst", "api/pypath.share.common.dict_str.rst", "api/pypath.share.common.dict_subtotals.rst", "api/pypath.share.common.dict_sym_diff.rst", "api/pypath.share.common.dict_union.rst", "api/pypath.share.common.eq.rst", "api/pypath.share.common.filtr.rst", "api/pypath.share.common.first.rst", "api/pypath.share.common.flat_list.rst", "api/pypath.share.common.float_or_nan.rst", "api/pypath.share.common.format_bytes.rst", "api/pypath.share.common.gen_session_id.rst", "api/pypath.share.common.get.rst", "api/pypath.share.common.get_args.rst", "api/pypath.share.common.identity.rst", "api/pypath.share.common.is_float.rst", "api/pypath.share.common.is_int.rst", "api/pypath.share.common.is_str.rst", "api/pypath.share.common.jaccard_index.rst", "api/pypath.share.common.join_dicts.rst", "api/pypath.share.common.latex_table.rst", "api/pypath.share.common.log_memory_usage.rst", "api/pypath.share.common.match.rst", "api/pypath.share.common.maybe_in_dict.rst", "api/pypath.share.common.md5.rst", "api/pypath.share.common.merge_dicts.rst", "api/pypath.share.common.n_shared_elements.rst", "api/pypath.share.common.n_shared_foreach.rst", "api/pypath.share.common.n_shared_total.rst", "api/pypath.share.common.n_shared_unique_foreach.rst", "api/pypath.share.common.n_unique_elements.rst", "api/pypath.share.common.n_unique_foreach.rst", "api/pypath.share.common.n_unique_total.rst", "api/pypath.share.common.negate.rst", "api/pypath.share.common.nest.rst", "api/pypath.share.common.none_or_len.rst", "api/pypath.share.common.paginate.rst", "api/pypath.share.common.prefix.rst", "api/pypath.share.common.print_table.rst", "api/pypath.share.common.python_memory_usage.rst", "api/pypath.share.common.re_safe_groups.rst", "api/pypath.share.common.remove_prefix.rst", "api/pypath.share.common.rotate.rst", "api/pypath.share.common.sets_to_sorted_lists.rst", "api/pypath.share.common.sfirst.rst", "api/pypath.share.common.shared_elements.rst", "api/pypath.share.common.shared_foreach.rst", "api/pypath.share.common.shared_total.rst", "api/pypath.share.common.shared_unique.rst", "api/pypath.share.common.shared_unique_foreach.rst", "api/pypath.share.common.shared_unique_total.rst", "api/pypath.share.common.silent.rst", "api/pypath.share.common.simpson_index.rst", "api/pypath.share.common.simpson_index_counts.rst", "api/pypath.share.common.something.rst", "api/pypath.share.common.sorensen_index.rst", "api/pypath.share.common.suffix.rst", "api/pypath.share.common.sum_dicts.rst", "api/pypath.share.common.swap_dict.rst", "api/pypath.share.common.swap_dict_simple.rst", "api/pypath.share.common.swap_suffix.rst", "api/pypath.share.common.table_add_row_numbers.rst", "api/pypath.share.common.table_format.rst", "api/pypath.share.common.table_textwrap.rst", "api/pypath.share.common.to_list.rst", "api/pypath.share.common.to_set.rst", "api/pypath.share.common.to_tuple.rst", "api/pypath.share.common.try_bool.rst", "api/pypath.share.common.try_float.rst", "api/pypath.share.common.tsv_table.rst", "api/pypath.share.common.uniq_list.rst", "api/pypath.share.common.uniq_list1.rst", "api/pypath.share.common.uniq_list2.rst", "api/pypath.share.common.uniq_ord_list.rst", "api/pypath.share.common.unique_elements.rst", "api/pypath.share.common.unique_foreach.rst", "api/pypath.share.common.unique_list.rst", "api/pypath.share.common.unique_total.rst", "api/pypath.share.common.upper0.rst", "api/pypath.share.common.values.rst", "api/pypath.share.common.wcl.rst", "api/pypath.share.common.wrap_truncate.rst", "api/pypath.share.constants.rst", "api/pypath.share.curl.rst", "api/pypath.share.curl.Curl.rst", "api/pypath.share.curl.FileOpener.rst", "api/pypath.share.curl.RemoteFile.rst", "api/pypath.share.curl.cache_delete_off.rst", "api/pypath.share.curl.cache_delete_on.rst", "api/pypath.share.curl.cache_off.rst", "api/pypath.share.curl.cache_on.rst", "api/pypath.share.curl.cache_print_off.rst", "api/pypath.share.curl.cache_print_on.rst", "api/pypath.share.curl.debug_off.rst", "api/pypath.share.curl.debug_on.rst", "api/pypath.share.curl.dryrun_off.rst", "api/pypath.share.curl.dryrun_on.rst", "api/pypath.share.curl.is_url.rst", "api/pypath.share.curl.preserve_off.rst", "api/pypath.share.curl.preserve_on.rst", "api/pypath.share.log.rst", "api/pypath.share.log.Logger.rst", "api/pypath.share.log.new_logger.rst", "api/pypath.share.progress.rst", "api/pypath.share.progress.Progress.rst", "api/pypath.share.session.rst", "api/pypath.share.session.Logger.rst", "api/pypath.share.session.Session.rst", "api/pypath.share.session.get_log.rst", "api/pypath.share.session.get_session.rst", "api/pypath.share.session.new_session.rst", "api/pypath.share.settings.rst", "api/pypath.share.settings.Settings.rst", "api/pypath.share.settings.context.rst", "api/pypath.share.settings.get.rst", "api/pypath.share.settings.setup.rst", "api/pypath.utils.rst", "api/pypath.utils.go.rst", "api/pypath.utils.go.GOAnnotation.rst", "api/pypath.utils.go.GOCustomAnnotation.rst", "api/pypath.utils.go.GeneOntology.rst", "api/pypath.utils.go.annotate.rst", "api/pypath.utils.go.get_db.rst", "api/pypath.utils.go.init_db.rst", "api/pypath.utils.go.load_go.rst", "api/pypath.utils.homology.rst", "api/pypath.utils.homology.HomologyManager.rst", "api/pypath.utils.homology.Ortholog.rst", "api/pypath.utils.homology.ProteinHomology.rst", "api/pypath.utils.homology.Proteomes.rst", "api/pypath.utils.homology.PtmHomology.rst", "api/pypath.utils.homology.SequenceContainer.rst", "api/pypath.utils.homology.get_df.rst", "api/pypath.utils.homology.get_dict.rst", "api/pypath.utils.homology.get_manager.rst", "api/pypath.utils.homology.init.rst", "api/pypath.utils.homology.translate.rst", "api/pypath.utils.homology.translate_df.rst", "api/pypath.utils.mapping.rst", "api/pypath.utils.mapping.MapReader.rst", "api/pypath.utils.mapping.Mapper.rst", "api/pypath.utils.mapping.MappingTable.rst", "api/pypath.utils.mapping.MappingTableKey.rst", "api/pypath.utils.mapping.UNIPROT_ID_TYPES.rst", "api/pypath.utils.mapping.get_mapper.rst", "api/pypath.utils.mapping.guess_type.rst", "api/pypath.utils.mapping.id_from_label.rst", "api/pypath.utils.mapping.id_from_label0.rst", "api/pypath.utils.mapping.init.rst", "api/pypath.utils.mapping.label.rst", "api/pypath.utils.mapping.map_name.rst", "api/pypath.utils.mapping.map_name0.rst", "api/pypath.utils.mapping.map_names.rst", "api/pypath.utils.pdb.rst", "api/pypath.utils.pdb.Residue.rst", "api/pypath.utils.pdb.ResidueMapper.rst", "api/pypath.utils.pdb.Segment.rst", "api/pypath.utils.pdb.residue_pdb.rst", "api/pypath.utils.proteomicsdb.rst", "api/pypath.utils.proteomicsdb.ProteomicsDB.rst", "api/pypath.utils.pyreact.rst", "api/pypath.utils.pyreact.AttributeHandler.rst", "api/pypath.utils.pyreact.BioPaxReader.rst", "api/pypath.utils.pyreact.Complex.rst", "api/pypath.utils.pyreact.ComplexVariations.rst", "api/pypath.utils.pyreact.Control.rst", "api/pypath.utils.pyreact.Entity.rst", "api/pypath.utils.pyreact.EntitySet.rst", "api/pypath.utils.pyreact.Intersecting.rst", "api/pypath.utils.pyreact.Protein.rst", "api/pypath.utils.pyreact.ProteinFamily.rst", "api/pypath.utils.pyreact.PyReact.rst", "api/pypath.utils.pyreact.Reaction.rst", "api/pypath.utils.pyreact.ReactionSide.rst", "api/pypath.utils.pyreact.Reference.rst", "api/pypath.utils.reflists.rst", "api/pypath.utils.reflists.ReferenceListManager.rst", "api/pypath.utils.reflists.check.rst", "api/pypath.utils.reflists.get_manager.rst", "api/pypath.utils.reflists.get_reflist.rst", "api/pypath.utils.reflists.init.rst", "api/pypath.utils.reflists.is_not.rst", "api/pypath.utils.reflists.select.rst", "api/pypath.utils.residues.rst", "api/pypath.utils.residues.ResidueMapper.rst", "api/pypath.utils.seq.rst", "api/pypath.utils.seq.Pfam.rst", "api/pypath.utils.seq.Resource.rst", "api/pypath.utils.seq.Seq.rst", "api/pypath.utils.seq.get_isoforms.rst", "api/pypath.utils.seq.read_fasta.rst", "api/pypath.utils.seq.swissprot_seq.rst", "api/pypath.utils.taxonomy.rst", "api/pypath.utils.taxonomy.ensure_common_name.rst", "api/pypath.utils.taxonomy.ensure_ensembl_name.rst", "api/pypath.utils.taxonomy.ensure_latin_name.rst", "api/pypath.utils.taxonomy.ensure_ncbi_tax_id.rst", "api/pypath.utils.taxonomy.get_db.rst", "api/pypath.utils.taxonomy.init_db.rst", "api/pypath.utils.taxonomy.short_latin_names.rst", "api/pypath.utils.taxonomy.shorten_latin_name.rst", "api/pypath.utils.taxonomy.taxid_from_common_name.rst", "api/pypath.utils.taxonomy.taxid_from_dbptm_taxon_name.rst", "api/pypath.utils.taxonomy.taxid_from_ensembl_name.rst", "api/pypath.utils.taxonomy.taxid_from_latin_name.rst", "api/pypath.utils.taxonomy.taxid_from_nonstandard.rst", "api/pypath.utils.taxonomy.uniprot_taxid.rst", "api/pypath.utils.unichem.rst", "api/pypath.utils.unichem.Unichem.rst", "api/pypath.utils.uniprot.rst", "api/pypath.utils.uniprot.UniprotProtein.rst", "api/pypath.utils.uniprot.ac.rst", "api/pypath.utils.uniprot.activity_regulation.rst", "api/pypath.utils.uniprot.activity_regulation_with_xrefs.rst", "api/pypath.utils.uniprot.alternative_products.rst", "api/pypath.utils.uniprot.alternative_products_with_xrefs.rst", "api/pypath.utils.uniprot.browse.rst", "api/pypath.utils.uniprot.catalytic_activity.rst", "api/pypath.utils.uniprot.catalytic_activity_with_xrefs.rst", "api/pypath.utils.uniprot.collect.rst", "api/pypath.utils.uniprot.databases.rst", "api/pypath.utils.uniprot.disease.rst", "api/pypath.utils.uniprot.disease_with_xrefs.rst", "api/pypath.utils.uniprot.ec.rst", "api/pypath.utils.uniprot.features_table.rst", "api/pypath.utils.uniprot.full_name.rst", "api/pypath.utils.uniprot.function.rst", "api/pypath.utils.uniprot.function_genecards.rst", "api/pypath.utils.uniprot.function_or_genecards.rst", "api/pypath.utils.uniprot.function_with_genecards.rst", "api/pypath.utils.uniprot.function_with_xrefs.rst", "api/pypath.utils.uniprot.genesymbol.rst", "api/pypath.utils.uniprot.has_tag.rst", "api/pypath.utils.uniprot.id.rst", "api/pypath.utils.uniprot.info.rst", "api/pypath.utils.uniprot.info_section.rst", "api/pypath.utils.uniprot.interaction.rst", "api/pypath.utils.uniprot.interaction_with_xrefs.rst", "api/pypath.utils.uniprot.is_reviewed.rst", "api/pypath.utils.uniprot.itertag.rst", "api/pypath.utils.uniprot.keywords.rst", "api/pypath.utils.uniprot.keywords_with_xrefs.rst", "api/pypath.utils.uniprot.length.rst", "api/pypath.utils.uniprot.lengths.rst", "api/pypath.utils.uniprot.load.rst", "api/pypath.utils.uniprot.organism.rst", "api/pypath.utils.uniprot.print_features.rst", "api/pypath.utils.uniprot.ptm.rst", "api/pypath.utils.uniprot.ptm_with_xrefs.rst", "api/pypath.utils.uniprot.query.rst", "api/pypath.utils.uniprot.reload.rst", "api/pypath.utils.uniprot.remove_xrefs.rst", "api/pypath.utils.uniprot.sequence.rst", "api/pypath.utils.uniprot.sequence_caution.rst", "api/pypath.utils.uniprot.sequence_caution_with_xrefs.rst", "api/pypath.utils.uniprot.similarity.rst", "api/pypath.utils.uniprot.similarity_with_xrefs.rst", "api/pypath.utils.uniprot.subcellular_location.rst", "api/pypath.utils.uniprot.subcellular_location_with_xrefs.rst", "api/pypath.utils.uniprot.subunit.rst", "api/pypath.utils.uniprot.subunit_with_xrefs.rst", "api/pypath.utils.uniprot.tissue_specificity.rst", "api/pypath.utils.uniprot.tissue_specificity_with_xrefs.rst", "api/pypath.utils.uniprot.update_databases.rst", "api/pypath.utils.uniprot.update_info.rst", "api/pypath.utils.uniprot.web_resource.rst", "api/pypath.utils.uniprot.web_resource_with_xrefs.rst", "api/pypath.utils.uniprot.weight.rst", "api/pypath.utils.uniprot.weights.rst", "api/pypath.visual.rst", "api/pypath.visual.drawing.rst", "api/pypath.visual.drawing.InterSet.rst", "api/pypath.visual.drawing.Plot.rst", "api/pypath.visual.igraph_drawing.rst", "api/pypath.visual.igraph_drawing.AbstractCairoGraphDrawer.rst", "api/pypath.visual.igraph_drawing.ArrowEdgeDrawer.rst", "api/pypath.visual.igraph_drawing.DefaultGraphDrawerFFsupport.rst", "api/pypath.visual.igraph_drawing.DefaultVertexDrawer.rst", "api/pypath.visual.igraph_drawing.TextDrawer.rst", "api/pypath.visual.igraph_drawing.edge.rst", "api/pypath.visual.igraph_drawing.edge.AbstractEdgeDrawer.rst", "api/pypath.visual.igraph_drawing.edge.AlphaVaryingEdgeDrawer.rst", "api/pypath.visual.igraph_drawing.edge.ArrowEdgeDrawer.rst", "api/pypath.visual.igraph_drawing.edge.DarkToLightEdgeDrawer.rst", "api/pypath.visual.igraph_drawing.edge.LightToDarkEdgeDrawer.rst", "api/pypath.visual.igraph_drawing.edge.TaperedEdgeDrawer.rst", "api/pypath.visual.igraph_drawing.vertex.rst", "api/pypath.visual.igraph_drawing.vertex.AbstractCairoDrawer.rst", "api/pypath.visual.igraph_drawing.vertex.AbstractCairoVertexDrawer.rst", "api/pypath.visual.igraph_drawing.vertex.AbstractDrawer.rst", "api/pypath.visual.igraph_drawing.vertex.AbstractVertexDrawer.rst", "api/pypath.visual.igraph_drawing.vertex.DefaultVertexDrawer.rst", "api/pypath.visual.plot.rst", "api/pypath.visual.plot.Barplot.rst", "api/pypath.visual.plot.BarplotsGrid.rst", "api/pypath.visual.plot.CurationPlot.rst", "api/pypath.visual.plot.Dendrogram.rst", "api/pypath.visual.plot.Histogram.rst", "api/pypath.visual.plot.HistoryTree.rst", "api/pypath.visual.plot.HtpCharacteristics.rst", "api/pypath.visual.plot.MultiBarplot.rst", "api/pypath.visual.plot.Plot.rst", "api/pypath.visual.plot.RefsComposite.rst", "api/pypath.visual.plot.ScatterPlus.rst", "api/pypath.visual.plot.SimilarityGraph.rst", "api/pypath.visual.plot.StackedBarplot.rst", "api/pypath.visual.plot.boxplot.rst", "api/pypath.visual.plot.get_moves.rst", "api/pypath.visual.plot.is_opentype_cff_font.rst", "api/pypath.visual.plot.move_labels.rst", "api/pypath.visual.plot.overlap.rst", "api/pypath.visual.plot.rotate_labels.rst", "contents.rst", "index.rst", "notebooks/manual.ipynb", "reference.rst", "releasehistory.rst", "webservice.rst"], "titles": ["pypath", "pypath.core", "pypath.core.annot", "pypath.core.annot.Adhesome", "pypath.core.annot.Almen2009", "pypath.core.annot.AnnotationBase", "pypath.core.annot.AnnotationTable", "pypath.core.annot.Baccin2019", "pypath.core.annot.Biogps", "pypath.core.annot.CancerGeneCensus", "pypath.core.annot.Cancerdrugsdb", "pypath.core.annot.Cancersea", "pypath.core.annot.CellPhoneDB", "pypath.core.annot.CellPhoneDBComplex", "pypath.core.annot.CellSurfaceProteinAtlas", "pypath.core.annot.CellSurfaceProteinAtlasCellType", "pypath.core.annot.Cellcall", "pypath.core.annot.Cellcellinteractions", "pypath.core.annot.Cellchatdb", "pypath.core.annot.CellchatdbComplex", "pypath.core.annot.Cellinker", "pypath.core.annot.CellinkerComplex", "pypath.core.annot.Celltalkdb", "pypath.core.annot.Celltypist", "pypath.core.annot.Comppi", "pypath.core.annot.Connectomedb", "pypath.core.annot.Corum", "pypath.core.annot.CorumFuncat", "pypath.core.annot.CorumGO", "pypath.core.annot.Cpad", "pypath.core.annot.CustomAnnotation", "pypath.core.annot.Cytosig", "pypath.core.annot.Dgidb", "pypath.core.annot.Disgenet", "pypath.core.annot.Embrace", "pypath.core.annot.Exocarta", "pypath.core.annot.GOCustomIntercell", "pypath.core.annot.GOIntercell", "pypath.core.annot.Gpcrdb", "pypath.core.annot.GuideToPharmacology", "pypath.core.annot.HPO", "pypath.core.annot.Hgnc", "pypath.core.annot.HpmrComplex", "pypath.core.annot.HumanPlasmaMembraneReceptome", "pypath.core.annot.HumanProteinAtlas", "pypath.core.annot.HumanProteinAtlasSecretome", "pypath.core.annot.HumanProteinAtlasSubcellular", "pypath.core.annot.Humancellmap", "pypath.core.annot.Icellnet", "pypath.core.annot.IcellnetComplex", "pypath.core.annot.Integrins", "pypath.core.annot.InterPro", "pypath.core.annot.Intogen", "pypath.core.annot.Italk", "pypath.core.annot.KeggPathways", "pypath.core.annot.KeggPathwaysPC", "pypath.core.annot.Kinasedotcom", "pypath.core.annot.Kirouac2010", "pypath.core.annot.Lambert2018", "pypath.core.annot.LigandReceptor", "pypath.core.annot.Locate", "pypath.core.annot.Lrdb", "pypath.core.annot.Matrisome", "pypath.core.annot.Matrixdb", "pypath.core.annot.Mcam", "pypath.core.annot.Membranome", "pypath.core.annot.Msigdb", "pypath.core.annot.NetpathPathways", "pypath.core.annot.Opm", "pypath.core.annot.Panglaodb", "pypath.core.annot.Phobius", "pypath.core.annot.Phosphatome", "pypath.core.annot.Progeny", "pypath.core.annot.Ramilowski2015", "pypath.core.annot.Ramilowski2015Location", "pypath.core.annot.Scconnect", "pypath.core.annot.ScconnectComplex", "pypath.core.annot.SignalinkFunctions", "pypath.core.annot.SignalinkPathways", "pypath.core.annot.SignorPathways", "pypath.core.annot.Surfaceome", "pypath.core.annot.Talklr", "pypath.core.annot.Tcdb", "pypath.core.annot.Tfcensus", "pypath.core.annot.Topdb", "pypath.core.annot.UniprotFamilies", "pypath.core.annot.UniprotKeywords", "pypath.core.annot.UniprotLocations", "pypath.core.annot.UniprotTissues", "pypath.core.annot.UniprotTopologies", "pypath.core.annot.Vesiclepedia", "pypath.core.annot.Wang", "pypath.core.annot.Zhong2015", "pypath.core.annot.get_db", "pypath.core.annot.init_db", "pypath.core.attrs", "pypath.core.attrs.AttributeHandler", "pypath.core.common", "pypath.core.common.filter_network_df", "pypath.core.complex", "pypath.core.complex.AbstractComplexResource", "pypath.core.complex.CellPhoneDB", "pypath.core.complex.Cellchatdb", "pypath.core.complex.Cellinker", "pypath.core.complex.Compleat", "pypath.core.complex.ComplexAggregator", "pypath.core.complex.ComplexPortal", "pypath.core.complex.Corum", "pypath.core.complex.GuideToPharmacology", "pypath.core.complex.Havugimana", "pypath.core.complex.Hpmr", "pypath.core.complex.Humap", "pypath.core.complex.Humap2", "pypath.core.complex.Icellnet", "pypath.core.complex.Kegg", "pypath.core.complex.Pdb", "pypath.core.complex.Signor", "pypath.core.complex.Spike", "pypath.core.complex.all_complexes", "pypath.core.complex.get_db", "pypath.core.complex.init_db", "pypath.core.entity", "pypath.core.entity.Entity", "pypath.core.entity.EntityKey", "pypath.core.entity.EntityList", "pypath.core.enz_sub", "pypath.core.enz_sub.EnzymeSubstrateAggregator", "pypath.core.enz_sub.EnzymeSubstrateHomologyProcessor", "pypath.core.enz_sub.EnzymeSubstrateProcessor", "pypath.core.enz_sub.get_db", "pypath.core.enz_sub.init_db", "pypath.core.evidence", "pypath.core.evidence.Evidence", "pypath.core.evidence.Evidences", "pypath.core.interaction", "pypath.core.interaction.Interaction", "pypath.core.interaction.InteractionDataFrameRecord", "pypath.core.interaction.InteractionKey", "pypath.core.intercell", "pypath.core.intercell.IntercellAnnotation", "pypath.core.intercell.get_db", "pypath.core.intercell.init_db", "pypath.core.intercell_annot", "pypath.core.intercell_annot.excludes", "pypath.core.network", "pypath.core.network.Network", "pypath.core.network.NetworkEntityCollection", "pypath.core.network.NetworkStatsRecord", "pypath.core.network.get_db", "pypath.core.network.init_db", "pypath.data", "pypath.disclaimer", "pypath.info", "pypath.inputs", "pypath.inputs.abs", "pypath.inputs.abs.abs_interactions", "pypath.inputs.acsn", "pypath.inputs.acsn.acsn_interactions", "pypath.inputs.acsn.acsn_interactions_sif", "pypath.inputs.adhesome", "pypath.inputs.adhesome.adhesome_annotations", "pypath.inputs.adhesome.adhesome_interactions", "pypath.inputs.almen2009", "pypath.inputs.almen2009.almen2009_annotations", "pypath.inputs.baccin2019", "pypath.inputs.baccin2019.baccin2019_annotations", "pypath.inputs.baccin2019.baccin2019_interactions", "pypath.inputs.biogps", "pypath.inputs.biogps.BiogpsDataset", "pypath.inputs.biogps.biogps_annotations", "pypath.inputs.biogps.biogps_datasets", "pypath.inputs.biogps.biogps_download", "pypath.inputs.biogps.biogps_download_all", "pypath.inputs.biogrid", "pypath.inputs.biogrid.biogrid_all_interactions", "pypath.inputs.biogrid.biogrid_interactions", "pypath.inputs.biomart", "pypath.inputs.biomart.biomart_homology", "pypath.inputs.biomart.biomart_microarray", "pypath.inputs.biomart.biomart_microarray_types", "pypath.inputs.biomart.biomart_microarrays", "pypath.inputs.biomart.biomart_query", "pypath.inputs.biomodels", "pypath.inputs.biomodels.download_single_model", "pypath.inputs.biomodels.get_all_models", "pypath.inputs.biomodels.get_biomodels", "pypath.inputs.biomodels.get_biomodels_req", "pypath.inputs.biomodels.get_single_model", "pypath.inputs.ca1", "pypath.inputs.ca1.ca1_interactions", "pypath.inputs.cancercellmap", "pypath.inputs.cancercellmap.ccmap_interactions", "pypath.inputs.cancerdrugsdb", "pypath.inputs.cancerdrugsdb.cancerdrugsdb_annotations", "pypath.inputs.cancerdrugsdb.cancerdrugsdb_download", "pypath.inputs.cancerdrugsdb.cancerdrugsdb_interactions", "pypath.inputs.cancersea", "pypath.inputs.cancersea.cancersea_annotations", "pypath.inputs.cell", "pypath.inputs.cell.cell_supplementary", "pypath.inputs.cellcall", "pypath.inputs.cellcall.cellcall_annotations", "pypath.inputs.cellcall.cellcall_download", "pypath.inputs.cellcall.cellcall_download_all", "pypath.inputs.cellcall.cellcall_interactions", "pypath.inputs.cellcellinteractions", "pypath.inputs.cellcellinteractions.cellcellinteractions_annotations", "pypath.inputs.cellchatdb", "pypath.inputs.cellchatdb.cellchatdb_annotations", "pypath.inputs.cellchatdb.cellchatdb_cofactors", "pypath.inputs.cellchatdb.cellchatdb_complexes", "pypath.inputs.cellchatdb.cellchatdb_download", "pypath.inputs.cellchatdb.cellchatdb_interactions", "pypath.inputs.cellinker", "pypath.inputs.cellinker.CellinkerInteraction", "pypath.inputs.cellinker.cellinker_annotations", "pypath.inputs.cellinker.cellinker_complex_annotations", "pypath.inputs.cellinker.cellinker_complexes", "pypath.inputs.cellinker.cellinker_complexes_raw", "pypath.inputs.cellinker.cellinker_lr_interactions", "pypath.inputs.cellinker.cellinker_lr_interactions_raw", "pypath.inputs.cellinker.cellinker_protein_annotations", "pypath.inputs.cellinker.cellinker_smol_interactions", "pypath.inputs.cellinker.cellinker_smol_interactions_raw", "pypath.inputs.cellinker.components_to_complex", "pypath.inputs.cellphonedb", "pypath.inputs.cellphonedb.CellPhoneDBAnnotation", "pypath.inputs.cellphonedb.cellphonedb_complex_annotations", "pypath.inputs.cellphonedb.cellphonedb_complexes", "pypath.inputs.cellphonedb.cellphonedb_interactions", "pypath.inputs.cellphonedb.cellphonedb_ligands_receptors", "pypath.inputs.cellphonedb.cellphonedb_protein_annotations", "pypath.inputs.celltalkdb", "pypath.inputs.celltalkdb.celltalkdb_annotations", "pypath.inputs.celltalkdb.celltalkdb_download", "pypath.inputs.celltalkdb.celltalkdb_interactions", "pypath.inputs.celltypist", "pypath.inputs.celltypist.celltypist_annotations", "pypath.inputs.chembl", "pypath.inputs.chembl.chembl_activities", "pypath.inputs.chembl.chembl_assays", "pypath.inputs.chembl.chembl_documents", "pypath.inputs.chembl.chembl_drug_indications", "pypath.inputs.chembl.chembl_mechanisms", "pypath.inputs.chembl.chembl_molecules", "pypath.inputs.chembl.chembl_targets", "pypath.inputs.clinvar", "pypath.inputs.clinvar.clinvar_citations", "pypath.inputs.clinvar.clinvar_raw", "pypath.inputs.collectri", "pypath.inputs.collectri.collectri_interactions", "pypath.inputs.common", "pypath.inputs.common.csv_sep_change", "pypath.inputs.common.glom_fields", "pypath.inputs.common.json_extract", "pypath.inputs.common.json_read", "pypath.inputs.common.read_table", "pypath.inputs.common.read_xls", "pypath.inputs.compleat", "pypath.inputs.compleat.compleat_complexes", "pypath.inputs.compleat.compleat_raw", "pypath.inputs.complexportal", "pypath.inputs.complexportal.complexportal_complexes", "pypath.inputs.comppi", "pypath.inputs.comppi.comppi_interaction_locations", "pypath.inputs.comppi.comppi_locations", "pypath.inputs.connectomedb", "pypath.inputs.connectomedb.connectomedb_annotations", "pypath.inputs.connectomedb.connectomedb_interactions", "pypath.inputs.corum", "pypath.inputs.corum.corum_complexes", "pypath.inputs.cosmic", "pypath.inputs.cosmic.cancer_gene_census_annotations", "pypath.inputs.cpad", "pypath.inputs.cpad.cpad_annotations", "pypath.inputs.cpad.cpad_pathway_cancer", "pypath.inputs.cpad.get_cpad", "pypath.inputs.cpdb", "pypath.inputs.cpdb.cpdb_interactions", "pypath.inputs.cpdb.cpdb_interactions_ltp", "pypath.inputs.credentials", "pypath.inputs.credentials.credentials", "pypath.inputs.csa", "pypath.inputs.csa.get_csa", "pypath.inputs.cspa", "pypath.inputs.cspa.cspa_annotations", "pypath.inputs.cspa.cspa_cell_type_annotations", "pypath.inputs.cspa.cspa_cell_types", "pypath.inputs.ctdbase", "pypath.inputs.ctdbase.ctdbase_relations", "pypath.inputs.ctdbase.ctdbase_vocabulary", "pypath.inputs.cytosig", "pypath.inputs.cytosig.cytosig_annotations", "pypath.inputs.cytosig.cytosig_df", "pypath.inputs.dbptm", "pypath.inputs.dbptm.dbptm_enzyme_substrate", "pypath.inputs.dbptm.dbptm_enzyme_substrate_old", "pypath.inputs.dbptm.dbptm_interactions", "pypath.inputs.deathdomain", "pypath.inputs.deathdomain.deathdomain_interactions", "pypath.inputs.deathdomain.deathdomain_interactions_rescued", "pypath.inputs.depod", "pypath.inputs.depod.depod_enzyme_substrate", "pypath.inputs.depod.depod_interactions", "pypath.inputs.dgidb", "pypath.inputs.dgidb.dgidb_annotations", "pypath.inputs.dgidb.dgidb_interactions", "pypath.inputs.dgidb.get_dgidb_old", "pypath.inputs.dip", "pypath.inputs.dip.dip_interactions", "pypath.inputs.dip.dip_login", "pypath.inputs.disgenet", "pypath.inputs.disgenet.DisgenetApi", "pypath.inputs.disgenet.disease_id_mappings", "pypath.inputs.disgenet.disgenet_annotations", "pypath.inputs.disgenet.variant_gene_mappings", "pypath.inputs.domino", "pypath.inputs.domino.domino_ddi", "pypath.inputs.domino.domino_enzsub", "pypath.inputs.domino.domino_interactions", "pypath.inputs.domino.get_domino", "pypath.inputs.dorothea", "pypath.inputs.dorothea.DorotheaInteraction", "pypath.inputs.dorothea.dorothea_full_raw", "pypath.inputs.dorothea.dorothea_interactions", "pypath.inputs.dorothea.dorothea_interactions_old", "pypath.inputs.dorothea.dorothea_old_csv", "pypath.inputs.dorothea.dorothea_rda_raw", "pypath.inputs.dorothea.get_dorothea_old", "pypath.inputs.dorothea.get_tfregulons", "pypath.inputs.dorothea.tfregulons_interactions", "pypath.inputs.dorothea.tfregulons_interactions_old", "pypath.inputs.drugbank", "pypath.inputs.drugbank.DrugbankFull", "pypath.inputs.drugbank.drugbank_annotations", "pypath.inputs.drugbank.drugbank_drugs", "pypath.inputs.drugbank.drugbank_interactions", "pypath.inputs.drugbank.drugbank_mapping", "pypath.inputs.drugbank.drugbank_raw_interactions", "pypath.inputs.drugcentral", "pypath.inputs.drugcentral.drugcentral_drugs", "pypath.inputs.drugcentral.drugcentral_interactions", "pypath.inputs.drugcentral.drugcentral_mapping", "pypath.inputs.ebi", "pypath.inputs.ebi.ebi_rest", "pypath.inputs.elm", "pypath.inputs.elm.elm_classes", "pypath.inputs.elm.elm_domains", "pypath.inputs.elm.elm_instances", "pypath.inputs.elm.elm_interactions", "pypath.inputs.embopress", "pypath.inputs.embopress.embopress_supplementary", "pypath.inputs.embrace", "pypath.inputs.embrace.embrace_annotations", "pypath.inputs.embrace.embrace_interactions", "pypath.inputs.embrace.embrace_raw", "pypath.inputs.embrace.embrace_translated", "pypath.inputs.encode", "pypath.inputs.encode.encode_tf_mirna_interactions", "pypath.inputs.ensembl", "pypath.inputs.ensembl.ensembl_organisms", "pypath.inputs.exocarta", "pypath.inputs.exocarta.get_exocarta", "pypath.inputs.exocarta.get_vesiclepedia", "pypath.inputs.genecards", "pypath.inputs.genecards.genecards_datasheet", "pypath.inputs.genecards.genecards_soup", "pypath.inputs.genecards.genecards_summaries", "pypath.inputs.get_method", "pypath.inputs.go", "pypath.inputs.go.get_go_desc", "pypath.inputs.go.get_go_quick", "pypath.inputs.go.get_goslim", "pypath.inputs.go.go_ancestors", "pypath.inputs.go.go_ancestors_goose", "pypath.inputs.go.go_ancestors_quickgo", "pypath.inputs.go.go_annotations", "pypath.inputs.go.go_annotations_all", "pypath.inputs.go.go_annotations_goa", "pypath.inputs.go.go_annotations_goose", "pypath.inputs.go.go_annotations_quickgo", "pypath.inputs.go.go_annotations_solr", "pypath.inputs.go.go_annotations_uniprot", "pypath.inputs.go.go_descendants", "pypath.inputs.go.go_descendants_goose", "pypath.inputs.go.go_descendants_quickgo", "pypath.inputs.go.go_descendants_to_ancestors", "pypath.inputs.go.go_terms", "pypath.inputs.go.go_terms_goose", "pypath.inputs.go.go_terms_quickgo", "pypath.inputs.go.go_terms_solr", "pypath.inputs.gpcrdb", "pypath.inputs.gpcrdb.gpcrdb_annotations", "pypath.inputs.graphviz", "pypath.inputs.graphviz.graphviz_attrs", "pypath.inputs.guide2pharma", "pypath.inputs.guide2pharma.guide2pharma_complexes", "pypath.inputs.guide2pharma.guide2pharma_download", "pypath.inputs.guide2pharma.guide2pharma_interactions", "pypath.inputs.havugimana", "pypath.inputs.havugimana.get_havugimana", "pypath.inputs.havugimana.havugimana_complexes", "pypath.inputs.hgnc", "pypath.inputs.hgnc.hgnc_genegroups", "pypath.inputs.hippie", "pypath.inputs.hippie.hippie_interactions", "pypath.inputs.hmdb", "pypath.inputs.hmdb.Field", "pypath.inputs.hmdb.hmdb_iter_metabolites", "pypath.inputs.hmdb.hmdb_mapping", "pypath.inputs.hmdb.hmdb_metabolites_raw", "pypath.inputs.hmdb.hmdb_table", "pypath.inputs.hmdb.hmdb_xml", "pypath.inputs.homologene", "pypath.inputs.homologene.get_homologene", "pypath.inputs.homologene.homologene_dict", "pypath.inputs.homologene.homologene_uniprot_dict", "pypath.inputs.hpmr", "pypath.inputs.hpmr.HpmrInteraction", "pypath.inputs.hpmr.get_hpmr", "pypath.inputs.hpmr.hpmr_annotations", "pypath.inputs.hpmr.hpmr_complexes", "pypath.inputs.hpmr.hpmr_interactions", "pypath.inputs.hpo", "pypath.inputs.hpo.hpo_annotations", "pypath.inputs.hpo.hpo_diseases", "pypath.inputs.hpo.hpo_ontology", "pypath.inputs.hpo.hpo_terms", "pypath.inputs.hprd", "pypath.inputs.hprd.get_hprd", "pypath.inputs.hprd.hprd_enzyme_substrate", "pypath.inputs.hprd.hprd_interactions", "pypath.inputs.hprd.hprd_interactions_htp", "pypath.inputs.htri", "pypath.inputs.htri.htri_interactions", "pypath.inputs.humancellmap", "pypath.inputs.humancellmap.humancellmap_annotations", "pypath.inputs.humap", "pypath.inputs.humap.humap2_complexes", "pypath.inputs.humap.humap_complexes", "pypath.inputs.huri", "pypath.inputs.huri.hi_i_interactions", "pypath.inputs.huri.hi_ii_interactions", "pypath.inputs.huri.hi_iii_old", "pypath.inputs.huri.hi_union_interactions", "pypath.inputs.huri.huri_interactions", "pypath.inputs.huri.lit_bm_13_interactions", "pypath.inputs.huri.lit_bm_17_interactions", "pypath.inputs.huri.lit_bm_interactions", "pypath.inputs.huri.rolland_hi_ii_14", "pypath.inputs.huri.vidal_hi_iii_old", "pypath.inputs.huri.yang2016_interactions", "pypath.inputs.huri.yu2011_interactions", "pypath.inputs.i3d", "pypath.inputs.i3d.get_i3d", "pypath.inputs.icellnet", "pypath.inputs.icellnet.IcellnetRecord", "pypath.inputs.icellnet.icellnet_annotations", "pypath.inputs.icellnet.icellnet_complexes", "pypath.inputs.icellnet.icellnet_interactions", "pypath.inputs.ielm", "pypath.inputs.ielm.get_ielm", "pypath.inputs.ielm.get_ielm_huge", "pypath.inputs.imweb", "pypath.inputs.imweb.get_imweb", "pypath.inputs.imweb.get_imweb_req", "pypath.inputs.innatedb", "pypath.inputs.innatedb.innatedb_interactions", "pypath.inputs.instruct", "pypath.inputs.instruct.get_instruct", "pypath.inputs.instruct.get_instruct_offsets", "pypath.inputs.intact", "pypath.inputs.intact.intact_interactions", "pypath.inputs.integrins", "pypath.inputs.integrins.get_integrins", "pypath.inputs.interpro", "pypath.inputs.interpro.interpro2go_annotations", "pypath.inputs.interpro.interpro_annotations", "pypath.inputs.interpro.interpro_entries", "pypath.inputs.interpro.interpro_xrefs", "pypath.inputs.intogen", "pypath.inputs.intogen.intogen_annotations", "pypath.inputs.ipi", "pypath.inputs.ipi.ipi_uniprot", "pypath.inputs.iptmnet", "pypath.inputs.iptmnet.IptmnetInteraction", "pypath.inputs.iptmnet.iptmnet_interactions", "pypath.inputs.italk", "pypath.inputs.italk.italk_annotations", "pypath.inputs.italk.italk_interactions", "pypath.inputs.italk.italk_raw", "pypath.inputs.kea", "pypath.inputs.kea.kea_enzyme_substrate", "pypath.inputs.kea.kea_interactions", "pypath.inputs.kegg", "pypath.inputs.kegg.KeggPathway", "pypath.inputs.kegg.kegg_dbget", "pypath.inputs.kegg.kegg_interactions", "pypath.inputs.kegg.kegg_medicus", "pypath.inputs.kegg.kegg_medicus_complexes", "pypath.inputs.kegg.kegg_medicus_interactions", "pypath.inputs.kegg.kegg_pathway_annotations", "pypath.inputs.kegg.kegg_pathway_annotations_pathwaycommons", "pypath.inputs.kegg.kegg_pathways", "pypath.inputs.kegg_api", "pypath.inputs.kegg_api.disease_to_drug", "pypath.inputs.kegg_api.disease_to_gene", "pypath.inputs.kegg_api.disease_to_pathway", "pypath.inputs.kegg_api.drug_to_disease", "pypath.inputs.kegg_api.drug_to_drug", "pypath.inputs.kegg_api.drug_to_gene", "pypath.inputs.kegg_api.drug_to_pathway", "pypath.inputs.kegg_api.gene_to_disease", "pypath.inputs.kegg_api.gene_to_drug", "pypath.inputs.kegg_api.gene_to_pathway", "pypath.inputs.kegg_api.kegg_drug_to_chebi", "pypath.inputs.kegg_api.kegg_gene_to_ncbi_geneid", "pypath.inputs.kegg_api.kegg_gene_to_uniprot", "pypath.inputs.kegg_api.pathway_to_disease", "pypath.inputs.kegg_api.pathway_to_drug", "pypath.inputs.kegg_api.pathway_to_gene", "pypath.inputs.kinasedotcom", "pypath.inputs.kinasedotcom.kinasedotcom_annotations", "pypath.inputs.kirouac2010", "pypath.inputs.kirouac2010.kirouac2010_interactions", "pypath.inputs.lambert2018", "pypath.inputs.lambert2018.lambert2018_annotations", "pypath.inputs.lambert2018.lambert2018_s1_raw", "pypath.inputs.laudanna", "pypath.inputs.laudanna.laudanna_directions", "pypath.inputs.laudanna.laudanna_effects", "pypath.inputs.li2012", "pypath.inputs.li2012.get_li2012", "pypath.inputs.li2012.li2012_dmi", "pypath.inputs.li2012.li2012_enzyme_substrate", "pypath.inputs.li2012.li2012_interactions", "pypath.inputs.lincs", "pypath.inputs.lincs.lincs_compounds", "pypath.inputs.lmpid", "pypath.inputs.lmpid.lmpid_dmi", "pypath.inputs.lmpid.lmpid_interactions", "pypath.inputs.lmpid.load_lmpid", "pypath.inputs.lncdisease", "pypath.inputs.lncdisease.lncdisease_interactions", "pypath.inputs.lncrnadb", "pypath.inputs.lncrnadb.lncrnadb_interactions", "pypath.inputs.locate", "pypath.inputs.locate.locate_localizations", "pypath.inputs.lrdb", "pypath.inputs.lrdb.LrdbAnnotation", "pypath.inputs.lrdb.lrdb_annotations", "pypath.inputs.lrdb.lrdb_interactions", "pypath.inputs.macrophage", "pypath.inputs.macrophage.macrophage_interactions", "pypath.inputs.main", "pypath.inputs.matrisome", "pypath.inputs.matrisome.matrisome_annotations", "pypath.inputs.matrixdb", "pypath.inputs.matrixdb.matrixdb_annotations", "pypath.inputs.matrixdb.matrixdb_ecm_proteins", "pypath.inputs.matrixdb.matrixdb_interactions", "pypath.inputs.matrixdb.matrixdb_membrane_proteins", "pypath.inputs.matrixdb.matrixdb_secreted_proteins", "pypath.inputs.mcam", "pypath.inputs.mcam.mcam_cell_adhesion_molecules", "pypath.inputs.membranome", "pypath.inputs.membranome.membranome_annotations", "pypath.inputs.mimp", "pypath.inputs.mimp.get_kinase_class", "pypath.inputs.mimp.mimp_enzyme_substrate", "pypath.inputs.mimp.mimp_interactions", "pypath.inputs.mir2disease", "pypath.inputs.mir2disease.mir2disease_interactions", "pypath.inputs.mirbase", "pypath.inputs.mirbase.get_mirbase_aliases", "pypath.inputs.mirbase.mirbase_ids", "pypath.inputs.mirbase.mirbase_mature", "pypath.inputs.mirbase.mirbase_mature_all", "pypath.inputs.mirbase.mirbase_precursor", "pypath.inputs.mirbase.mirbase_precursor_all", "pypath.inputs.mirbase.mirbase_precursor_to_mature", "pypath.inputs.mirdeathdb", "pypath.inputs.mirdeathdb.mirdeathdb_interactions", "pypath.inputs.mirecords", "pypath.inputs.mirecords.mirecords_interactions", "pypath.inputs.mirtarbase", "pypath.inputs.mirtarbase.mirtarbase_interactions", "pypath.inputs.mitab", "pypath.inputs.mitab.mitab_field_list", "pypath.inputs.mitab.mitab_field_uniprot", "pypath.inputs.mppi", "pypath.inputs.mppi.mppi_interactions", "pypath.inputs.ncrdeathdb", "pypath.inputs.ncrdeathdb.ncrdeathdb_interactions", "pypath.inputs.negatome", "pypath.inputs.negatome.negatome_interactions", "pypath.inputs.netbiol", "pypath.inputs.netbiol.arn_interactions", "pypath.inputs.netbiol.nrf2ome_interactions", "pypath.inputs.netpath", "pypath.inputs.netpath.netpath_interactions", "pypath.inputs.netpath.netpath_names", "pypath.inputs.netpath.netpath_pathway_annotations", "pypath.inputs.oma", "pypath.inputs.oma.oma_orthologs", "pypath.inputs.ontology", "pypath.inputs.ontology.listof_ontologies", "pypath.inputs.ontology.ontology", "pypath.inputs.opm", "pypath.inputs.opm.opm_annotations", "pypath.inputs.oreganno", "pypath.inputs.oreganno.oreganno_interactions", "pypath.inputs.oreganno.oreganno_raw", "pypath.inputs.panglaodb", "pypath.inputs.panglaodb.panglaodb_annotations", "pypath.inputs.panglaodb.panglaodb_raw", "pypath.inputs.pathophenodb", "pypath.inputs.pathophenodb.DiseasePathogen", "pypath.inputs.pathophenodb.disease_pathogen_interactions", "pypath.inputs.pathwaycommons", "pypath.inputs.pathwaycommons.PathwayCommonsInteraction", "pypath.inputs.pathwaycommons.PathwayCommonsResource", "pypath.inputs.pathwaycommons.pathwaycommons_bind_interactions", "pypath.inputs.pathwaycommons.pathwaycommons_biogrid_interactions", "pypath.inputs.pathwaycommons.pathwaycommons_corum_interactions", "pypath.inputs.pathwaycommons.pathwaycommons_dip_interactions", "pypath.inputs.pathwaycommons.pathwaycommons_hprd_interactions", "pypath.inputs.pathwaycommons.pathwaycommons_inoh_interactions", "pypath.inputs.pathwaycommons.pathwaycommons_intact_interactions", "pypath.inputs.pathwaycommons.pathwaycommons_interactions", "pypath.inputs.pathwaycommons.pathwaycommons_kegg_interactions", "pypath.inputs.pathwaycommons.pathwaycommons_netpath_interactions", "pypath.inputs.pathwaycommons.pathwaycommons_panther_interactions", "pypath.inputs.pathwaycommons.pathwaycommons_phosphosite_interactions", "pypath.inputs.pathwaycommons.pathwaycommons_reactome_interactions", "pypath.inputs.pathwaycommons.pathwaycommons_wikipathways_interactions", "pypath.inputs.pazar", "pypath.inputs.pazar.pazar_interactions", "pypath.inputs.pdb", "pypath.inputs.pdb.pdb_chains", "pypath.inputs.pdb.pdb_complexes", "pypath.inputs.pdb.pdb_uniprot", "pypath.inputs.pdzbase", "pypath.inputs.pdzbase.pdzbase_interactions", "pypath.inputs.pepcyber", "pypath.inputs.pepcyber.pepcyber_details", "pypath.inputs.pepcyber.pepcyber_interactions", "pypath.inputs.pfam", "pypath.inputs.pfam.pfam_names", "pypath.inputs.pfam.pfam_pdb", "pypath.inputs.pfam.pfam_regions", "pypath.inputs.pfam.pfam_uniprot", "pypath.inputs.pharos", "pypath.inputs.pharos.pharos_diseases", "pypath.inputs.pharos.pharos_expression", "pypath.inputs.pharos.pharos_general", "pypath.inputs.pharos.pharos_gtex", "pypath.inputs.pharos.pharos_ligands", "pypath.inputs.pharos.pharos_orthologs", "pypath.inputs.pharos.pharos_targets", "pypath.inputs.pharos.pharos_xrefs", "pypath.inputs.phobius", "pypath.inputs.phobius.phobius_annotations", "pypath.inputs.phosphatome", "pypath.inputs.phosphatome.phosphatome_annotations", "pypath.inputs.phosphoelm", "pypath.inputs.phosphoelm.phosphoelm_enzyme_substrate", "pypath.inputs.phosphoelm.phosphoelm_interactions", "pypath.inputs.phosphoelm.phosphoelm_kinases", "pypath.inputs.phosphonetworks", "pypath.inputs.phosphonetworks.phosphonetworks_enzyme_substrate", "pypath.inputs.phosphonetworks.phosphonetworks_interactions", "pypath.inputs.phosphopoint", "pypath.inputs.phosphopoint.phosphopoint_directions", "pypath.inputs.phosphopoint.phosphopoint_interactions", "pypath.inputs.phosphosite", "pypath.inputs.phosphosite.phosphosite_directions", "pypath.inputs.phosphosite.phosphosite_enzyme_substrate", "pypath.inputs.phosphosite.phosphosite_interactions", "pypath.inputs.phosphosite.phosphosite_interactions_all", "pypath.inputs.phosphosite.phosphosite_interactions_curated", "pypath.inputs.phosphosite.phosphosite_interactions_new", "pypath.inputs.phosphosite.phosphosite_interactions_noref", "pypath.inputs.phosphosite.phosphosite_ptm_orthology", "pypath.inputs.phosphosite.phosphosite_ptms", "pypath.inputs.phosphosite.phosphosite_regsites", "pypath.inputs.phosphosite.phosphosite_regsites_one_organism", "pypath.inputs.phosphosite.regsites_tab", "pypath.inputs.pisa", "pypath.inputs.pisa.PisaBond", "pypath.inputs.pisa.pisa_bonds", "pypath.inputs.pisa.pisa_interfaces", "pypath.inputs.pro", "pypath.inputs.pro.get_pro", "pypath.inputs.pro.pro_mapping", "pypath.inputs.progeny", "pypath.inputs.progeny.progeny_annotations", "pypath.inputs.progeny.progeny_raw", "pypath.inputs.proteinatlas", "pypath.inputs.proteinatlas.get_proteinatlas", "pypath.inputs.proteinatlas.proteinatlas_annotations", "pypath.inputs.proteinatlas.proteinatlas_secretome_annotations", "pypath.inputs.proteinatlas.proteinatlas_subcellular_annotations", "pypath.inputs.proteins", "pypath.inputs.proteins.variants", "pypath.inputs.protmapper", "pypath.inputs.protmapper.get_protmapper", "pypath.inputs.protmapper.protmapper_enzyme_substrate", "pypath.inputs.protmapper.protmapper_interactions", "pypath.inputs.pubchem", "pypath.inputs.pubchem.pubchem_mapping", "pypath.inputs.pubmed", "pypath.inputs.pubmed.get_pmid", "pypath.inputs.pubmed.get_pubmeds", "pypath.inputs.pubmed.only_pmids", "pypath.inputs.pubmed.open_pubmed", "pypath.inputs.pubmed.pmids_dict", "pypath.inputs.pubmed.pmids_list", "pypath.inputs.ramilowski2015", "pypath.inputs.ramilowski2015.ramilowski_interactions", "pypath.inputs.ramilowski2015.ramilowski_locations", "pypath.inputs.ramp", "pypath.inputs.ramp.ramp_id_types", "pypath.inputs.ramp.ramp_id_types_2", "pypath.inputs.ramp.ramp_list_tables", "pypath.inputs.ramp.ramp_mapping", "pypath.inputs.ramp.ramp_raw", "pypath.inputs.ramp.ramp_show_tables", "pypath.inputs.rdata", "pypath.inputs.reaction", "pypath.inputs.reaction.acsn_biopax", "pypath.inputs.reaction.acsn_interactions_2", "pypath.inputs.reaction.get_acsn_effects", "pypath.inputs.reaction.get_controls", "pypath.inputs.reaction.get_interactions", "pypath.inputs.reaction.get_reactions", "pypath.inputs.reaction.get_soup", "pypath.inputs.reaction.panther_biopax", "pypath.inputs.reaction.panther_interactions", "pypath.inputs.reaction.pid_biopax", "pypath.inputs.reaction.pid_interactions", "pypath.inputs.reaction.process_complex", "pypath.inputs.reaction.process_controls", "pypath.inputs.reaction.process_reactions", "pypath.inputs.reaction.reactions_biopax", "pypath.inputs.reaction.reactome_biopax", "pypath.inputs.reaction.reactome_bs", "pypath.inputs.reaction.reactome_interactions", "pypath.inputs.reaction.reactome_sbml", "pypath.inputs.scconnect", "pypath.inputs.scconnect.scconnect_annotations", "pypath.inputs.scconnect.scconnect_complexes", "pypath.inputs.scconnect.scconnect_interactions", "pypath.inputs.science", "pypath.inputs.science.science_download", "pypath.inputs.signalink", "pypath.inputs.signalink.signalink_annotations", "pypath.inputs.signalink.signalink_function_annotations", "pypath.inputs.signalink.signalink_interactions", "pypath.inputs.signalink.signalink_pathway_annotations", "pypath.inputs.signor", "pypath.inputs.signor.signor_complexes", "pypath.inputs.signor.signor_enzyme_substrate", "pypath.inputs.signor.signor_interactions", "pypath.inputs.signor.signor_pathway_annotations", "pypath.inputs.signor.signor_pathways", "pypath.inputs.signor.signor_protein_families", "pypath.inputs.spike", "pypath.inputs.spike.spike_complexes", "pypath.inputs.spike.spike_interactions", "pypath.inputs.stitch", "pypath.inputs.stitch.stitch_actions_interactions", "pypath.inputs.stitch.stitch_links_interactions", "pypath.inputs.string", "pypath.inputs.string.string_effects", "pypath.inputs.string.string_links_interactions", "pypath.inputs.string.string_physical_interactions", "pypath.inputs.string.string_species", "pypath.inputs.surfaceome", "pypath.inputs.surfaceome.surfaceome_annotations", "pypath.inputs.switches_elm", "pypath.inputs.switches_elm.get_switches_elm", "pypath.inputs.talklr", "pypath.inputs.talklr.talklr_annotations", "pypath.inputs.talklr.talklr_interactions", "pypath.inputs.talklr.talklr_raw", "pypath.inputs.tcdb", "pypath.inputs.tcdb.tcdb_annotations", "pypath.inputs.tcdb.tcdb_classes", "pypath.inputs.tcdb.tcdb_families", "pypath.inputs.tfcensus", "pypath.inputs.tfcensus.tfcensus_annotations", "pypath.inputs.threedcomplex", "pypath.inputs.threedcomplex.threedcomplex_chains", "pypath.inputs.threedcomplex.threedcomplex_complexes", "pypath.inputs.threedcomplex.threedcomplex_contacts", "pypath.inputs.threedcomplex.threedcomplex_ddi", "pypath.inputs.threedcomplex.threedcomplex_nresidues", "pypath.inputs.threedid", "pypath.inputs.threedid.get_3did", "pypath.inputs.threedid.get_3did_ddi", "pypath.inputs.threedid.get_3did_dmi", "pypath.inputs.threedid.process_3did_dmi", "pypath.inputs.topdb", "pypath.inputs.topdb.topdb_annotations", "pypath.inputs.transmir", "pypath.inputs.transmir.transmir_interactions", "pypath.inputs.trip", "pypath.inputs.trip.take_a_trip", "pypath.inputs.trip.trip_find_uniprot", "pypath.inputs.trip.trip_get_uniprot", "pypath.inputs.trip.trip_interactions", "pypath.inputs.trip.trip_process", "pypath.inputs.trip.trip_process_table", "pypath.inputs.unichem", "pypath.inputs.unichem.info", "pypath.inputs.unichem.unichem_info", "pypath.inputs.unichem.unichem_mapping", "pypath.inputs.unichem.unichem_sources", "pypath.inputs.uniprot", "pypath.inputs.uniprot.Taxon", "pypath.inputs.uniprot.UniprotRecordHistory", "pypath.inputs.uniprot.all_swissprots", "pypath.inputs.uniprot.all_trembls", "pypath.inputs.uniprot.all_uniprots", "pypath.inputs.uniprot.deleted_uniprot_genesymbol", "pypath.inputs.uniprot.get_db", "pypath.inputs.uniprot.get_uniprot_sec", "pypath.inputs.uniprot.init_db", "pypath.inputs.uniprot.is_swissprot", "pypath.inputs.uniprot.is_trembl", "pypath.inputs.uniprot.is_uniprot", "pypath.inputs.uniprot.protein_datasheet", "pypath.inputs.uniprot.swissprot_deleted", "pypath.inputs.uniprot.trembl_deleted", "pypath.inputs.uniprot.uniprot_data", "pypath.inputs.uniprot.uniprot_deleted", "pypath.inputs.uniprot.uniprot_families", "pypath.inputs.uniprot.uniprot_history", "pypath.inputs.uniprot.uniprot_history_recent_datasheet", "pypath.inputs.uniprot.uniprot_keywords", "pypath.inputs.uniprot.uniprot_locations", "pypath.inputs.uniprot.uniprot_ncbi_taxids", "pypath.inputs.uniprot.uniprot_ncbi_taxids_2", "pypath.inputs.uniprot.uniprot_preprocess", "pypath.inputs.uniprot.uniprot_recent_version", "pypath.inputs.uniprot.uniprot_taxonomy", "pypath.inputs.uniprot.uniprot_tissues", "pypath.inputs.uniprot.uniprot_topology", "pypath.inputs.uniprot.valid_uniprot", "pypath.inputs.wang", "pypath.inputs.wang.cui_interactions", "pypath.inputs.wang.hsn_interactions", "pypath.inputs.wang.wang_annotations", "pypath.inputs.wang.wang_interactions", "pypath.inputs.wojtowicz2020", "pypath.inputs.wojtowicz2020.wojtowicz2020_interactions", "pypath.inputs.wojtowicz2020.wojtowicz2020_raw", "pypath.inputs.zhong2015", "pypath.inputs.zhong2015.zhong2015_annotations", "pypath.internals", "pypath.internals.annot_formats", "pypath.internals.annot_formats.AnnotDef", "pypath.internals.annot_formats.AnnotDefKey", "pypath.internals.annot_formats.AnnotOp", "pypath.internals.annot_formats.AnnotationGroup", "pypath.internals.input_formats", "pypath.internals.input_formats.ArrayMapping", "pypath.internals.input_formats.BiomartMapping", "pypath.internals.input_formats.FileMapping", "pypath.internals.input_formats.HmdbMapping", "pypath.internals.input_formats.MappingInput", "pypath.internals.input_formats.NetworkInput", "pypath.internals.input_formats.PickleMapping", "pypath.internals.input_formats.ProMapping", "pypath.internals.input_formats.RampMapping", "pypath.internals.input_formats.ReadList", "pypath.internals.input_formats.UnichemMapping", "pypath.internals.input_formats.UniprotListMapping", "pypath.internals.input_formats.UniprotMapping", "pypath.internals.intera", "pypath.internals.intera.Complex", "pypath.internals.intera.Domain", "pypath.internals.intera.DomainDomain", "pypath.internals.intera.DomainMotif", "pypath.internals.intera.Interface", "pypath.internals.intera.Motif", "pypath.internals.intera.Ptm", "pypath.internals.intera.Regulation", "pypath.internals.intera.Residue", "pypath.internals.license", "pypath.internals.license.License", "pypath.internals.license.LicenseAttrib", "pypath.internals.license.LicenseFeature", "pypath.internals.license.LicensePurpose", "pypath.internals.license.LicenseSharing", "pypath.internals.maps", "pypath.internals.refs", "pypath.internals.refs.Reference", "pypath.internals.refs.get_pubmed_data", "pypath.internals.resource", "pypath.internals.resource.AbstractResource", "pypath.internals.resource.EnzymeSubstrateResource", "pypath.internals.resource.EnzymeSubstrateResourceKey", "pypath.internals.resource.NetworkResource", "pypath.internals.resource.NetworkResourceKey", "pypath.internals.resource.ResourceAttributes", "pypath.legacy", "pypath.legacy.db_categories", "pypath.legacy.db_categories.get_categories", "pypath.legacy.db_categories.get_category", "pypath.legacy.main", "pypath.legacy.main.Direction", "pypath.legacy.main.NetworkEntityCollection", "pypath.legacy.main.NetworkStatsRecord", "pypath.legacy.main.PyPath", "pypath.legacy.main.get_db", "pypath.legacy.main.init_db", "pypath.log", "pypath.omnipath", "pypath.omnipath.app", "pypath.omnipath.app.DatabaseManager", "pypath.omnipath.databases", "pypath.omnipath.databases.build", "pypath.omnipath.databases.class_and_param", "pypath.omnipath.databases.define", "pypath.omnipath.databases.define.DatabaseClass", "pypath.omnipath.databases.define.DatabaseDefinition", "pypath.omnipath.databases.define.DatabaseDefinitionManager", "pypath.omnipath.databases.get_manager", "pypath.omnipath.databases.init_manager", "pypath.omnipath.export", "pypath.omnipath.export.Export", "pypath.omnipath.init", "pypath.omnipath.param", "pypath.omnipath.param.curated_ppi_resources", "pypath.omnipath.param.tf_target_resources", "pypath.omnipath.server", "pypath.omnipath.server.build", "pypath.omnipath.server.build.WebserviceTables", "pypath.omnipath.server.generate_about_page", "pypath.omnipath.server.generate_about_page.export_licenses", "pypath.omnipath.server.generate_about_page.generate_about_html", "pypath.omnipath.server.generate_about_page.resource_list_latex", "pypath.omnipath.server.generate_about_page.write_html", "pypath.omnipath.server.legacy", "pypath.omnipath.server.legacy.PypathServer", "pypath.omnipath.server.run", "pypath.omnipath.server.run.BaseServer", "pypath.omnipath.server.run.Rest", "pypath.omnipath.server.run.TableServer", "pypath.omnipath.server.run.TwistedWebResource", "pypath.omnipath.server.run.TwistedWebSite", "pypath.omnipath.server.run.stop_server", "pypath.omnipath.server.run.twisted_listen_tcp", "pypath.omnipath.server.run.twisted_run", "pypath.resources", "pypath.resources.controller", "pypath.resources.controller.ResourceController", "pypath.resources.data", "pypath.resources.data_formats", "pypath.resources.data_formats.ROOT", "pypath.resources.data_formats.activity_flow", "pypath.resources.data_formats.collectri", "pypath.resources.data_formats.enzyme_substrate", "pypath.resources.data_formats.interaction", "pypath.resources.data_formats.interaction_htp", "pypath.resources.data_formats.obsolate", "pypath.resources.data_formats.pathway_bad", "pypath.resources.data_formats.reaction_pc", "pypath.resources.data_formats.transcription_deprecated", "pypath.resources.data_formats.transcription_onebyone", "pypath.resources.descriptions", "pypath.resources.descriptions.export_licenses", "pypath.resources.descriptions.gen_html", "pypath.resources.descriptions.resource_list_latex", "pypath.resources.descriptions.write_html", "pypath.resources.get_controller", "pypath.resources.licenses", "pypath.resources.licenses.Licenses", "pypath.resources.network", "pypath.resources.network.dorothea_expand_levels", "pypath.resources.urls", "pypath.share", "pypath.share.cache", "pypath.share.cache.cache_item", "pypath.share.cache.cache_path", "pypath.share.cache.get_cachedir", "pypath.share.common", "pypath.share.common.add_to_list", "pypath.share.common.add_to_set", "pypath.share.common.at_least_in", "pypath.share.common.clean_dict", "pypath.share.common.combine_attrs", "pypath.share.common.compr", "pypath.share.common.console", "pypath.share.common.decode", "pypath.share.common.del_empty", "pypath.share.common.df_memory_usage", "pypath.share.common.dict_collapse_keys", "pypath.share.common.dict_counts", "pypath.share.common.dict_diff", "pypath.share.common.dict_expand_keys", "pypath.share.common.dict_percent", "pypath.share.common.dict_set_path", "pypath.share.common.dict_set_percent", "pypath.share.common.dict_str", "pypath.share.common.dict_subtotals", "pypath.share.common.dict_sym_diff", "pypath.share.common.dict_union", "pypath.share.common.eq", "pypath.share.common.filtr", "pypath.share.common.first", "pypath.share.common.flat_list", "pypath.share.common.float_or_nan", "pypath.share.common.format_bytes", "pypath.share.common.gen_session_id", "pypath.share.common.get", "pypath.share.common.get_args", "pypath.share.common.identity", "pypath.share.common.is_float", "pypath.share.common.is_int", "pypath.share.common.is_str", "pypath.share.common.jaccard_index", "pypath.share.common.join_dicts", "pypath.share.common.latex_table", "pypath.share.common.log_memory_usage", "pypath.share.common.match", "pypath.share.common.maybe_in_dict", "pypath.share.common.md5", "pypath.share.common.merge_dicts", "pypath.share.common.n_shared_elements", "pypath.share.common.n_shared_foreach", "pypath.share.common.n_shared_total", "pypath.share.common.n_shared_unique_foreach", "pypath.share.common.n_unique_elements", "pypath.share.common.n_unique_foreach", "pypath.share.common.n_unique_total", "pypath.share.common.negate", "pypath.share.common.nest", "pypath.share.common.none_or_len", "pypath.share.common.paginate", "pypath.share.common.prefix", "pypath.share.common.print_table", "pypath.share.common.python_memory_usage", "pypath.share.common.re_safe_groups", "pypath.share.common.remove_prefix", "pypath.share.common.rotate", "pypath.share.common.sets_to_sorted_lists", "pypath.share.common.sfirst", "pypath.share.common.shared_elements", "pypath.share.common.shared_foreach", "pypath.share.common.shared_total", "pypath.share.common.shared_unique", "pypath.share.common.shared_unique_foreach", "pypath.share.common.shared_unique_total", "pypath.share.common.silent", "pypath.share.common.simpson_index", "pypath.share.common.simpson_index_counts", "pypath.share.common.something", "pypath.share.common.sorensen_index", "pypath.share.common.suffix", "pypath.share.common.sum_dicts", "pypath.share.common.swap_dict", "pypath.share.common.swap_dict_simple", "pypath.share.common.swap_suffix", "pypath.share.common.table_add_row_numbers", "pypath.share.common.table_format", "pypath.share.common.table_textwrap", "pypath.share.common.to_list", "pypath.share.common.to_set", "pypath.share.common.to_tuple", "pypath.share.common.try_bool", "pypath.share.common.try_float", "pypath.share.common.tsv_table", "pypath.share.common.uniq_list", "pypath.share.common.uniq_list1", "pypath.share.common.uniq_list2", "pypath.share.common.uniq_ord_list", "pypath.share.common.unique_elements", "pypath.share.common.unique_foreach", "pypath.share.common.unique_list", "pypath.share.common.unique_total", "pypath.share.common.upper0", "pypath.share.common.values", "pypath.share.common.wcl", "pypath.share.common.wrap_truncate", "pypath.share.constants", "pypath.share.curl", "pypath.share.curl.Curl", "pypath.share.curl.FileOpener", "pypath.share.curl.RemoteFile", "pypath.share.curl.cache_delete_off", "pypath.share.curl.cache_delete_on", "pypath.share.curl.cache_off", "pypath.share.curl.cache_on", "pypath.share.curl.cache_print_off", "pypath.share.curl.cache_print_on", "pypath.share.curl.debug_off", "pypath.share.curl.debug_on", "pypath.share.curl.dryrun_off", "pypath.share.curl.dryrun_on", "pypath.share.curl.is_url", "pypath.share.curl.preserve_off", "pypath.share.curl.preserve_on", "pypath.share.log", "pypath.share.log.Logger", "pypath.share.log.new_logger", "pypath.share.progress", "pypath.share.progress.Progress", "pypath.share.session", "pypath.share.session.Logger", "pypath.share.session.Session", "pypath.share.session.get_log", "pypath.share.session.get_session", "pypath.share.session.new_session", "pypath.share.settings", "pypath.share.settings.Settings", "pypath.share.settings.context", "pypath.share.settings.get", "pypath.share.settings.setup", "pypath.utils", "pypath.utils.go", "pypath.utils.go.GOAnnotation", "pypath.utils.go.GOCustomAnnotation", "pypath.utils.go.GeneOntology", "pypath.utils.go.annotate", "pypath.utils.go.get_db", "pypath.utils.go.init_db", "pypath.utils.go.load_go", "pypath.utils.homology", "pypath.utils.homology.HomologyManager", "pypath.utils.homology.Ortholog", "pypath.utils.homology.ProteinHomology", "pypath.utils.homology.Proteomes", "pypath.utils.homology.PtmHomology", "pypath.utils.homology.SequenceContainer", "pypath.utils.homology.get_df", "pypath.utils.homology.get_dict", "pypath.utils.homology.get_manager", "pypath.utils.homology.init", "pypath.utils.homology.translate", "pypath.utils.homology.translate_df", "pypath.utils.mapping", "pypath.utils.mapping.MapReader", "pypath.utils.mapping.Mapper", "pypath.utils.mapping.MappingTable", "pypath.utils.mapping.MappingTableKey", "pypath.utils.mapping.UNIPROT_ID_TYPES", "pypath.utils.mapping.get_mapper", "pypath.utils.mapping.guess_type", "pypath.utils.mapping.id_from_label", "pypath.utils.mapping.id_from_label0", "pypath.utils.mapping.init", "pypath.utils.mapping.label", "pypath.utils.mapping.map_name", "pypath.utils.mapping.map_name0", "pypath.utils.mapping.map_names", "pypath.utils.pdb", "pypath.utils.pdb.Residue", "pypath.utils.pdb.ResidueMapper", "pypath.utils.pdb.Segment", "pypath.utils.pdb.residue_pdb", "pypath.utils.proteomicsdb", "pypath.utils.proteomicsdb.ProteomicsDB", "pypath.utils.pyreact", "pypath.utils.pyreact.AttributeHandler", "pypath.utils.pyreact.BioPaxReader", "pypath.utils.pyreact.Complex", "pypath.utils.pyreact.ComplexVariations", "pypath.utils.pyreact.Control", "pypath.utils.pyreact.Entity", "pypath.utils.pyreact.EntitySet", "pypath.utils.pyreact.Intersecting", "pypath.utils.pyreact.Protein", "pypath.utils.pyreact.ProteinFamily", "pypath.utils.pyreact.PyReact", "pypath.utils.pyreact.Reaction", "pypath.utils.pyreact.ReactionSide", "pypath.utils.pyreact.Reference", "pypath.utils.reflists", "pypath.utils.reflists.ReferenceListManager", "pypath.utils.reflists.check", "pypath.utils.reflists.get_manager", "pypath.utils.reflists.get_reflist", "pypath.utils.reflists.init", "pypath.utils.reflists.is_not", "pypath.utils.reflists.select", "pypath.utils.residues", "pypath.utils.residues.ResidueMapper", "pypath.utils.seq", "pypath.utils.seq.Pfam", "pypath.utils.seq.Resource", "pypath.utils.seq.Seq", "pypath.utils.seq.get_isoforms", "pypath.utils.seq.read_fasta", "pypath.utils.seq.swissprot_seq", "pypath.utils.taxonomy", "pypath.utils.taxonomy.ensure_common_name", "pypath.utils.taxonomy.ensure_ensembl_name", "pypath.utils.taxonomy.ensure_latin_name", "pypath.utils.taxonomy.ensure_ncbi_tax_id", "pypath.utils.taxonomy.get_db", "pypath.utils.taxonomy.init_db", "pypath.utils.taxonomy.short_latin_names", "pypath.utils.taxonomy.shorten_latin_name", "pypath.utils.taxonomy.taxid_from_common_name", "pypath.utils.taxonomy.taxid_from_dbptm_taxon_name", "pypath.utils.taxonomy.taxid_from_ensembl_name", "pypath.utils.taxonomy.taxid_from_latin_name", "pypath.utils.taxonomy.taxid_from_nonstandard", "pypath.utils.taxonomy.uniprot_taxid", "pypath.utils.unichem", "pypath.utils.unichem.Unichem", "pypath.utils.uniprot", "pypath.utils.uniprot.UniprotProtein", "pypath.utils.uniprot.ac", "pypath.utils.uniprot.activity_regulation", "pypath.utils.uniprot.activity_regulation_with_xrefs", "pypath.utils.uniprot.alternative_products", "pypath.utils.uniprot.alternative_products_with_xrefs", "pypath.utils.uniprot.browse", "pypath.utils.uniprot.catalytic_activity", "pypath.utils.uniprot.catalytic_activity_with_xrefs", "pypath.utils.uniprot.collect", "pypath.utils.uniprot.databases", "pypath.utils.uniprot.disease", "pypath.utils.uniprot.disease_with_xrefs", "pypath.utils.uniprot.ec", "pypath.utils.uniprot.features_table", "pypath.utils.uniprot.full_name", "pypath.utils.uniprot.function", "pypath.utils.uniprot.function_genecards", "pypath.utils.uniprot.function_or_genecards", "pypath.utils.uniprot.function_with_genecards", "pypath.utils.uniprot.function_with_xrefs", "pypath.utils.uniprot.genesymbol", "pypath.utils.uniprot.has_tag", "pypath.utils.uniprot.id", "pypath.utils.uniprot.info", "pypath.utils.uniprot.info_section", "pypath.utils.uniprot.interaction", "pypath.utils.uniprot.interaction_with_xrefs", "pypath.utils.uniprot.is_reviewed", "pypath.utils.uniprot.itertag", "pypath.utils.uniprot.keywords", "pypath.utils.uniprot.keywords_with_xrefs", "pypath.utils.uniprot.length", "pypath.utils.uniprot.lengths", "pypath.utils.uniprot.load", "pypath.utils.uniprot.organism", "pypath.utils.uniprot.print_features", "pypath.utils.uniprot.ptm", "pypath.utils.uniprot.ptm_with_xrefs", "pypath.utils.uniprot.query", "pypath.utils.uniprot.reload", "pypath.utils.uniprot.remove_xrefs", "pypath.utils.uniprot.sequence", "pypath.utils.uniprot.sequence_caution", "pypath.utils.uniprot.sequence_caution_with_xrefs", "pypath.utils.uniprot.similarity", "pypath.utils.uniprot.similarity_with_xrefs", "pypath.utils.uniprot.subcellular_location", "pypath.utils.uniprot.subcellular_location_with_xrefs", "pypath.utils.uniprot.subunit", "pypath.utils.uniprot.subunit_with_xrefs", "pypath.utils.uniprot.tissue_specificity", "pypath.utils.uniprot.tissue_specificity_with_xrefs", "pypath.utils.uniprot.update_databases", "pypath.utils.uniprot.update_info", "pypath.utils.uniprot.web_resource", "pypath.utils.uniprot.web_resource_with_xrefs", "pypath.utils.uniprot.weight", "pypath.utils.uniprot.weights", "pypath.visual", "pypath.visual.drawing", "pypath.visual.drawing.InterSet", "pypath.visual.drawing.Plot", "pypath.visual.igraph_drawing", "pypath.visual.igraph_drawing.AbstractCairoGraphDrawer", "pypath.visual.igraph_drawing.ArrowEdgeDrawer", "pypath.visual.igraph_drawing.DefaultGraphDrawerFFsupport", "pypath.visual.igraph_drawing.DefaultVertexDrawer", "pypath.visual.igraph_drawing.TextDrawer", "pypath.visual.igraph_drawing.edge", "pypath.visual.igraph_drawing.edge.AbstractEdgeDrawer", "pypath.visual.igraph_drawing.edge.AlphaVaryingEdgeDrawer", "pypath.visual.igraph_drawing.edge.ArrowEdgeDrawer", "pypath.visual.igraph_drawing.edge.DarkToLightEdgeDrawer", "pypath.visual.igraph_drawing.edge.LightToDarkEdgeDrawer", "pypath.visual.igraph_drawing.edge.TaperedEdgeDrawer", "pypath.visual.igraph_drawing.vertex", "pypath.visual.igraph_drawing.vertex.AbstractCairoDrawer", "pypath.visual.igraph_drawing.vertex.AbstractCairoVertexDrawer", "pypath.visual.igraph_drawing.vertex.AbstractDrawer", "pypath.visual.igraph_drawing.vertex.AbstractVertexDrawer", "pypath.visual.igraph_drawing.vertex.DefaultVertexDrawer", "pypath.visual.plot", "pypath.visual.plot.Barplot", "pypath.visual.plot.BarplotsGrid", "pypath.visual.plot.CurationPlot", "pypath.visual.plot.Dendrogram", "pypath.visual.plot.Histogram", "pypath.visual.plot.HistoryTree", "pypath.visual.plot.HtpCharacteristics", "pypath.visual.plot.MultiBarplot", "pypath.visual.plot.Plot", "pypath.visual.plot.RefsComposite", "pypath.visual.plot.ScatterPlus", "pypath.visual.plot.SimilarityGraph", "pypath.visual.plot.StackedBarplot", "pypath.visual.plot.boxplot", "pypath.visual.plot.get_moves", "pypath.visual.plot.is_opentype_cff_font", "pypath.visual.plot.move_labels", "pypath.visual.plot.overlap", "pypath.visual.plot.rotate_labels", "Contents", "Welcome to pypath!", "The pypath book", "Reference", "Release history", "Webservice"], "terms": {"i": [0, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 121, 122, 123, 126, 127, 132, 133, 135, 136, 137, 139, 145, 147, 168, 169, 194, 202, 203, 214, 220, 223, 226, 239, 242, 281, 289, 292, 293, 312, 322, 323, 324, 325, 326, 328, 330, 331, 333, 335, 349, 379, 380, 381, 384, 410, 411, 418, 421, 443, 450, 456, 462, 479, 485, 495, 498, 541, 549, 617, 620, 621, 639, 650, 659, 689, 691, 710, 723, 726, 763, 772, 775, 781, 791, 820, 821, 829, 830, 831, 852, 862, 863, 864, 865, 867, 874, 878, 879, 880, 881, 884, 885, 892, 893, 894, 895, 903, 905, 912, 913, 914, 915, 921, 923, 932, 935, 938, 942, 958, 971, 974, 977, 981, 989, 990, 991, 993, 996, 997, 999, 1000, 1001, 1004, 1010, 1011, 1012, 1020, 1021, 1022, 1025, 1028, 1046, 1047, 1049, 1059, 1065, 1068, 1069, 1070, 1071, 1075, 1078, 1081, 1083, 1089, 1090, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1103, 1104, 1106, 1107, 1109, 1116, 1117, 1119, 1123, 1125, 1131, 1132, 1133, 1135, 1136, 1137, 1138, 1141, 1142, 1144, 1145, 1146, 1147, 1155, 1156, 1157, 1159, 1161, 1164, 1167, 1169, 1171, 1174, 1178, 1179, 1181, 1182, 1193, 1205, 1213, 1215, 1229, 1240, 1251, 1281, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1293, 1295, 1296, 1313, 1317, 1318, 1321, 1322], "modul": [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 97, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 120, 128, 132, 133, 135, 139, 142, 145, 150, 153, 169, 182, 281, 368, 409, 496, 541, 710, 808, 835, 860, 865, 867, 874, 878, 880, 901, 907, 912, 915, 919, 921, 922, 923, 926, 937, 938, 950, 956, 960, 977, 983, 986, 1045, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1103, 1104, 1112, 1116, 1117, 1121, 1123, 1124, 1125, 1128, 1139, 1140, 1143, 1145, 1149, 1153, 1164, 1229, 1251, 1274, 1278, 1291, 1305, 1308, 1310, 1317, 1320, 1321, 1322], "primarili": [0, 1319], "build": [0, 30, 126, 127, 134, 139, 145, 865, 912, 915, 921, 928, 934, 936, 999, 1002, 1133, 1135, 1144, 1317, 1318, 1321], "molecular": [0, 30, 100, 121, 122, 132, 133, 134, 135, 139, 145, 409, 498, 499, 500, 781, 865, 881, 912, 915, 1215, 1272, 1273, 1317, 1318, 1319, 1321], "interact": [0, 30, 32, 126, 127, 128, 132, 133, 139, 145, 155, 157, 158, 174, 175, 189, 191, 194, 195, 201, 203, 204, 212, 219, 220, 222, 223, 229, 235, 264, 268, 278, 279, 295, 296, 299, 300, 306, 318, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 336, 341, 349, 354, 397, 419, 430, 431, 441, 442, 446, 447, 448, 449, 450, 462, 469, 472, 497, 498, 500, 509, 534, 535, 539, 540, 541, 572, 582, 584, 586, 595, 597, 598, 611, 643, 645, 646, 666, 678, 680, 681, 682, 685, 707, 719, 744, 747, 752, 758, 772, 775, 776, 796, 811, 812, 813, 851, 854, 872, 880, 881, 899, 912, 915, 921, 932, 958, 966, 967, 968, 969, 1167, 1317, 1318, 1321], "network": [0, 30, 98, 126, 134, 139, 189, 496, 775, 915, 921, 932, 936, 958, 1278, 1317, 1318, 1321], "also": [0, 30, 127, 135, 139, 145, 151, 201, 203, 204, 411, 462, 691, 881, 912, 915, 932, 1013, 1018, 1047, 1106, 1131, 1133, 1135, 1137, 1138, 1141, 1142, 1145, 1176, 1278, 1318, 1319, 1322], "sever": [0, 1318, 1319], "submodul": [0, 3, 4, 5, 7, 8, 9, 11, 12, 13, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 33, 34, 35, 39, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53, 57, 59, 60, 61, 62, 65, 66, 68, 70, 73, 74, 75, 76, 80, 81, 84, 90, 92, 368, 1318, 1319, 1321], "access": [0, 97, 281, 312, 333, 373, 374, 375, 379, 380, 381, 383, 384, 385, 387, 388, 389, 390, 411, 427, 450, 648, 849, 879, 915, 977, 1104, 1123, 1125, 1145, 1155, 1157, 1167, 1317, 1318, 1321], "preprocess": [0, 219, 222, 264, 283, 429, 498, 500, 677, 678, 680, 681, 682, 685, 693, 796, 797, 808, 1191, 1192, 1318], "serv": [0, 118, 134, 813, 901, 915, 921, 939, 949, 1112, 1148, 1160, 1178, 1189, 1322], "data": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 127, 128, 135, 139, 145, 151, 157, 169, 171, 172, 177, 180, 183, 203, 210, 211, 212, 218, 239, 240, 242, 243, 244, 245, 246, 248, 254, 255, 256, 260, 264, 283, 293, 300, 323, 324, 325, 326, 328, 330, 331, 344, 379, 380, 384, 397, 400, 409, 410, 411, 415, 416, 419, 421, 426, 429, 430, 431, 443, 450, 462, 509, 532, 541, 612, 640, 643, 646, 652, 653, 654, 656, 657, 658, 659, 660, 676, 677, 678, 680, 681, 682, 685, 686, 696, 697, 710, 723, 732, 775, 776, 796, 797, 808, 812, 813, 817, 878, 879, 884, 901, 902, 905, 912, 915, 921, 926, 932, 939, 950, 958, 985, 989, 990, 1059, 1089, 1090, 1093, 1094, 1116, 1117, 1125, 1131, 1133, 1135, 1137, 1138, 1139, 1141, 1142, 1144, 1145, 1146, 1148, 1164, 1167, 1191, 1192, 1224, 1298, 1299, 1301, 1302, 1308, 1311, 1317, 1318, 1321, 1322], "from": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 97, 105, 122, 126, 127, 128, 132, 133, 135, 139, 145, 155, 157, 158, 169, 170, 172, 174, 175, 177, 182, 193, 194, 195, 197, 199, 201, 202, 203, 204, 210, 211, 212, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 229, 230, 233, 234, 235, 237, 239, 240, 242, 243, 244, 245, 246, 248, 253, 254, 255, 259, 260, 262, 264, 267, 268, 272, 278, 279, 281, 292, 295, 296, 299, 300, 305, 306, 323, 324, 325, 326, 328, 330, 331, 334, 335, 336, 337, 338, 340, 341, 342, 344, 349, 353, 354, 355, 356, 365, 366, 367, 368, 371, 376, 378, 379, 383, 384, 385, 394, 400, 401, 408, 409, 410, 411, 412, 415, 416, 419, 425, 426, 441, 442, 446, 447, 448, 449, 450, 454, 470, 474, 499, 500, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 518, 519, 520, 522, 524, 529, 530, 532, 541, 559, 561, 562, 572, 574, 582, 584, 586, 595, 597, 598, 604, 606, 607, 611, 612, 614, 615, 618, 640, 643, 645, 646, 648, 649, 651, 652, 653, 654, 656, 657, 658, 660, 664, 666, 676, 677, 678, 680, 681, 682, 683, 684, 685, 696, 697, 706, 710, 719, 720, 723, 724, 725, 726, 727, 750, 751, 752, 754, 758, 763, 765, 769, 791, 795, 796, 797, 806, 808, 809, 810, 813, 817, 825, 835, 838, 851, 852, 857, 859, 865, 870, 872, 874, 875, 878, 879, 901, 902, 905, 912, 915, 921, 932, 934, 939, 942, 945, 958, 974, 989, 990, 992, 997, 998, 999, 1002, 1014, 1017, 1025, 1028, 1029, 1030, 1041, 1042, 1047, 1061, 1062, 1073, 1074, 1076, 1077, 1078, 1089, 1090, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1103, 1104, 1106, 1107, 1116, 1117, 1123, 1124, 1125, 1131, 1133, 1135, 1137, 1138, 1141, 1142, 1144, 1145, 1148, 1150, 1155, 1157, 1164, 1167, 1176, 1181, 1186, 1191, 1192, 1215, 1240, 1278, 1285, 1286, 1287, 1288, 1289, 1290, 1295, 1308, 1317, 1318, 1321, 1322], "variou": [0, 128, 145, 264, 335, 360, 411, 846, 915, 921, 1117, 1120, 1201, 1229, 1251, 1284, 1319], "resourc": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 132, 133, 135, 139, 145, 214, 278, 279, 281, 324, 325, 326, 328, 330, 331, 367, 421, 456, 620, 629, 719, 781, 791, 816, 817, 862, 863, 865, 872, 912, 915, 921, 932, 935, 936, 943, 944, 1031, 1035, 1050, 1053, 1079, 1089, 1132, 1144, 1145, 1155, 1157, 1191, 1309, 1317, 1318, 1321, 1322], "member": [0, 1, 2, 95, 97, 99, 121, 125, 131, 134, 138, 142, 144, 150, 153, 154, 156, 159, 162, 164, 167, 173, 176, 182, 188, 190, 192, 196, 198, 200, 205, 207, 213, 225, 231, 232, 236, 238, 246, 249, 251, 258, 261, 263, 266, 269, 271, 273, 277, 280, 282, 284, 288, 291, 294, 298, 301, 304, 308, 311, 316, 321, 332, 339, 343, 345, 350, 352, 357, 359, 361, 364, 369, 391, 393, 395, 399, 402, 404, 406, 413, 417, 423, 428, 433, 435, 437, 440, 453, 455, 460, 463, 466, 468, 471, 473, 475, 480, 482, 484, 487, 491, 494, 498, 504, 521, 523, 525, 528, 531, 536, 538, 542, 544, 546, 548, 552, 554, 555, 557, 563, 565, 567, 571, 573, 581, 583, 585, 587, 590, 592, 594, 596, 599, 603, 605, 608, 610, 613, 616, 619, 636, 638, 642, 644, 647, 652, 661, 663, 665, 669, 672, 675, 688, 692, 695, 698, 703, 705, 709, 711, 718, 721, 728, 729, 749, 753, 755, 760, 767, 770, 773, 778, 780, 782, 786, 790, 792, 798, 803, 805, 807, 814, 819, 850, 855, 858, 860, 861, 865, 866, 880, 881, 890, 896, 897, 900, 907, 908, 911, 915, 919, 920, 922, 925, 931, 934, 937, 938, 940, 945, 947, 956, 957, 959, 960, 972, 978, 980, 982, 983, 984, 988, 1087, 1088, 1105, 1108, 1110, 1116, 1121, 1122, 1130, 1143, 1158, 1163, 1165, 1168, 1169, 1172, 1175, 1176, 1178, 1180, 1188, 1190, 1197, 1212, 1214, 1274, 1275, 1278, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1297, 1319], "function": [0, 2, 77, 96, 97, 99, 122, 125, 127, 132, 135, 138, 139, 144, 153, 154, 156, 159, 162, 164, 167, 169, 173, 176, 182, 188, 190, 192, 194, 196, 198, 200, 202, 205, 207, 213, 225, 232, 236, 238, 246, 249, 251, 256, 257, 258, 261, 263, 266, 269, 271, 273, 277, 280, 282, 284, 288, 291, 294, 298, 301, 304, 308, 311, 316, 321, 332, 339, 343, 345, 350, 352, 357, 359, 361, 364, 369, 391, 393, 395, 399, 402, 404, 406, 409, 413, 417, 421, 423, 428, 433, 435, 437, 440, 453, 455, 460, 463, 466, 468, 471, 473, 475, 480, 482, 484, 487, 491, 494, 504, 521, 523, 525, 528, 531, 536, 538, 542, 544, 546, 548, 552, 555, 557, 563, 565, 567, 571, 573, 581, 583, 585, 587, 590, 592, 594, 596, 599, 603, 605, 608, 610, 613, 616, 619, 636, 638, 642, 644, 647, 652, 661, 663, 665, 669, 672, 675, 688, 690, 691, 692, 695, 698, 703, 705, 709, 711, 718, 721, 729, 749, 753, 755, 760, 767, 770, 773, 775, 778, 780, 781, 782, 786, 790, 792, 798, 803, 805, 807, 814, 819, 850, 852, 855, 858, 862, 865, 897, 908, 911, 915, 919, 922, 934, 940, 947, 956, 972, 980, 984, 985, 988, 989, 990, 993, 994, 1000, 1001, 1011, 1027, 1039, 1045, 1078, 1088, 1089, 1105, 1106, 1110, 1116, 1122, 1130, 1131, 1133, 1135, 1142, 1143, 1144, 1145, 1148, 1149, 1155, 1157, 1158, 1164, 1180, 1190, 1197, 1214, 1224, 1276, 1281, 1297, 1308, 1318, 1319, 1320, 1321, 1322], "class": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 121, 122, 123, 124, 125, 126, 127, 128, 131, 132, 133, 134, 135, 136, 137, 138, 139, 143, 144, 145, 146, 147, 167, 168, 213, 214, 225, 226, 311, 312, 321, 322, 332, 333, 344, 406, 407, 411, 417, 418, 455, 456, 484, 485, 494, 495, 548, 549, 556, 616, 617, 619, 620, 621, 688, 689, 779, 819, 820, 821, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 897, 898, 900, 901, 902, 903, 904, 905, 906, 911, 912, 913, 914, 915, 920, 921, 925, 926, 927, 928, 931, 932, 938, 939, 945, 946, 947, 948, 949, 950, 951, 952, 957, 958, 978, 979, 988, 1018, 1056, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1103, 1104, 1105, 1106, 1108, 1109, 1110, 1111, 1112, 1116, 1117, 1122, 1123, 1124, 1125, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1143, 1144, 1145, 1146, 1147, 1148, 1158, 1159, 1160, 1161, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1188, 1189, 1190, 1191, 1192, 1193, 1212, 1213, 1214, 1215, 1224, 1275, 1276, 1277, 1278, 1279, 1281, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1318, 1320, 1321, 1322], "kwarg": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 98, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 122, 127, 128, 129, 130, 132, 135, 139, 140, 141, 145, 148, 149, 281, 313, 314, 315, 396, 398, 622, 623, 624, 625, 626, 627, 628, 630, 631, 632, 633, 634, 635, 708, 726, 731, 738, 740, 747, 765, 891, 901, 902, 904, 905, 906, 915, 916, 917, 921, 927, 932, 933, 949, 958, 996, 1011, 1018, 1025, 1043, 1066, 1067, 1074, 1107, 1117, 1118, 1120, 1131, 1133, 1135, 1142, 1145, 1149, 1153, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1277, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1307, 1308, 1309, 1319], "sourc": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 124, 126, 127, 128, 129, 130, 132, 133, 135, 136, 139, 140, 141, 145, 146, 148, 149, 151, 152, 155, 157, 158, 160, 161, 163, 165, 166, 169, 170, 171, 172, 174, 175, 177, 178, 179, 180, 181, 183, 184, 185, 186, 187, 189, 191, 193, 194, 195, 197, 199, 201, 202, 203, 204, 206, 208, 209, 210, 211, 212, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 227, 228, 229, 230, 231, 233, 234, 235, 237, 239, 240, 241, 242, 243, 244, 245, 247, 248, 250, 252, 253, 254, 255, 256, 257, 259, 260, 262, 264, 265, 267, 268, 270, 272, 274, 275, 276, 278, 279, 281, 283, 285, 286, 287, 289, 290, 292, 293, 295, 296, 297, 299, 300, 302, 303, 305, 306, 307, 309, 310, 312, 313, 314, 315, 317, 318, 319, 320, 323, 324, 326, 327, 328, 333, 334, 335, 336, 337, 338, 340, 341, 342, 344, 346, 347, 348, 349, 351, 353, 354, 355, 356, 358, 360, 362, 363, 365, 366, 367, 368, 370, 371, 372, 374, 375, 377, 378, 379, 380, 381, 382, 384, 385, 386, 388, 389, 390, 392, 394, 396, 397, 398, 400, 401, 403, 405, 407, 408, 409, 410, 411, 412, 414, 415, 416, 419, 420, 421, 422, 424, 425, 426, 427, 429, 430, 431, 432, 434, 436, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 457, 458, 459, 461, 462, 464, 465, 467, 469, 470, 472, 474, 476, 477, 478, 479, 481, 483, 486, 488, 489, 490, 492, 493, 496, 497, 498, 499, 500, 501, 502, 503, 509, 522, 524, 526, 527, 529, 530, 532, 533, 534, 535, 537, 539, 540, 541, 543, 545, 547, 549, 550, 551, 553, 556, 558, 559, 560, 561, 562, 564, 566, 568, 569, 570, 572, 574, 575, 576, 577, 578, 579, 580, 582, 584, 586, 588, 589, 591, 593, 595, 597, 598, 600, 601, 602, 604, 606, 607, 609, 611, 612, 614, 615, 618, 629, 637, 639, 640, 641, 643, 645, 646, 648, 649, 650, 651, 655, 659, 662, 664, 666, 667, 668, 670, 671, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 690, 691, 693, 694, 696, 697, 699, 700, 701, 702, 704, 706, 707, 708, 710, 712, 713, 714, 715, 716, 717, 719, 720, 722, 723, 724, 725, 726, 727, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 750, 751, 752, 754, 756, 757, 758, 759, 761, 762, 763, 764, 765, 766, 768, 769, 771, 772, 774, 775, 776, 777, 779, 781, 783, 784, 785, 787, 788, 789, 791, 793, 794, 795, 796, 797, 799, 800, 801, 802, 804, 806, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 851, 852, 853, 854, 856, 857, 859, 862, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 895, 898, 899, 901, 902, 904, 905, 906, 909, 910, 912, 915, 916, 917, 918, 921, 923, 924, 926, 927, 928, 929, 930, 932, 933, 935, 936, 939, 941, 942, 943, 944, 946, 948, 949, 950, 951, 952, 953, 958, 973, 974, 975, 976, 977, 979, 981, 985, 986, 987, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1106, 1107, 1109, 1111, 1112, 1113, 1114, 1115, 1117, 1118, 1119, 1120, 1123, 1124, 1125, 1126, 1127, 1128, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1144, 1145, 1146, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1160, 1162, 1164, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1189, 1191, 1192, 1193, 1194, 1195, 1196, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1213, 1215, 1221, 1224, 1229, 1239, 1251, 1254, 1276, 1277, 1279, 1281, 1285, 1286, 1287, 1288, 1289, 1290, 1292, 1293, 1294, 1295, 1296, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1318, 1319, 1321, 1322], "base": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 122, 123, 124, 126, 127, 128, 132, 133, 135, 136, 137, 139, 145, 146, 147, 168, 214, 226, 312, 322, 324, 325, 326, 328, 330, 331, 333, 407, 418, 456, 485, 495, 549, 617, 620, 621, 683, 689, 696, 697, 706, 795, 796, 820, 821, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 895, 898, 901, 902, 903, 904, 905, 906, 912, 913, 914, 915, 921, 926, 927, 928, 932, 939, 946, 948, 949, 950, 951, 952, 958, 979, 1030, 1056, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1103, 1104, 1106, 1109, 1111, 1112, 1117, 1123, 1124, 1125, 1131, 1132, 1133, 1134, 1135, 1136, 1144, 1145, 1146, 1147, 1159, 1160, 1161, 1164, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1181, 1189, 1191, 1192, 1193, 1213, 1215, 1276, 1277, 1279, 1281, 1285, 1286, 1287, 1288, 1289, 1290, 1292, 1293, 1294, 1295, 1296, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1317, 1321], "annotationbas": [3, 4, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 31, 32, 33, 34, 35, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 1319], "__init__": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 122, 123, 124, 126, 127, 128, 132, 133, 135, 136, 137, 139, 145, 146, 147, 168, 214, 226, 310, 312, 322, 333, 407, 418, 456, 485, 495, 549, 617, 620, 621, 689, 820, 821, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 895, 898, 901, 902, 903, 904, 905, 906, 912, 913, 914, 915, 921, 926, 927, 928, 932, 939, 946, 948, 949, 950, 951, 952, 958, 979, 1056, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1103, 1104, 1106, 1109, 1111, 1112, 1117, 1123, 1124, 1125, 1131, 1132, 1133, 1134, 1135, 1136, 1144, 1145, 1146, 1147, 1159, 1160, 1161, 1164, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1181, 1189, 1191, 1192, 1193, 1213, 1215, 1276, 1277, 1279, 1281, 1285, 1286, 1287, 1288, 1289, 1290, 1292, 1293, 1294, 1295, 1296, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1319], "repres": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 118, 121, 122, 127, 131, 132, 134, 135, 139, 145, 171, 172, 219, 220, 222, 223, 229, 333, 340, 341, 478, 606, 683, 752, 816, 865, 880, 881, 915, 1014, 1020, 1021, 1025, 1073, 1074, 1135, 1145, 1176, 1192, 1319], "set": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 122, 126, 127, 128, 132, 133, 135, 139, 145, 169, 172, 178, 180, 193, 194, 201, 204, 215, 216, 219, 221, 222, 224, 230, 275, 278, 279, 281, 292, 324, 325, 326, 328, 330, 331, 334, 337, 342, 349, 353, 362, 363, 373, 374, 375, 377, 379, 380, 381, 383, 384, 385, 409, 415, 416, 424, 425, 426, 462, 469, 474, 476, 477, 498, 500, 559, 561, 562, 604, 641, 649, 650, 651, 691, 696, 707, 710, 722, 723, 725, 796, 808, 817, 846, 862, 864, 865, 867, 872, 874, 878, 879, 881, 892, 893, 894, 895, 901, 902, 912, 915, 921, 935, 936, 958, 965, 990, 991, 993, 994, 1000, 1001, 1004, 1007, 1009, 1010, 1011, 1018, 1023, 1027, 1031, 1034, 1035, 1050, 1053, 1054, 1057, 1060, 1063, 1070, 1079, 1084, 1089, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1103, 1104, 1107, 1109, 1123, 1124, 1125, 1131, 1133, 1135, 1137, 1138, 1141, 1142, 1144, 1145, 1146, 1155, 1157, 1167, 1176, 1213, 1299, 1304, 1305, 1307, 1308, 1309, 1310, 1319, 1321, 1322], "protein": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 122, 126, 127, 135, 139, 145, 210, 215, 217, 218, 219, 222, 223, 231, 233, 259, 260, 264, 283, 305, 307, 318, 336, 338, 353, 362, 363, 365, 366, 371, 379, 380, 421, 424, 462, 469, 472, 477, 498, 499, 500, 556, 559, 561, 562, 595, 597, 640, 645, 646, 685, 686, 693, 751, 752, 763, 772, 775, 776, 813, 835, 865, 869, 872, 874, 876, 880, 881, 882, 884, 885, 886, 887, 889, 915, 921, 1131, 1133, 1135, 1141, 1143, 1144, 1145, 1148, 1154, 1155, 1157, 1164, 1167, 1176, 1178, 1191, 1192, 1193, 1221, 1317, 1318, 1321, 1322], "load": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 127, 128, 145, 300, 371, 443, 449, 450, 462, 472, 680, 682, 762, 808, 901, 915, 921, 958, 971, 985, 1123, 1125, 1139, 1144, 1145, 1146, 1155, 1160, 1191, 1192, 1194, 1196, 1317, 1318, 1321], "origin": [3, 4, 5, 7, 8, 9, 11, 12, 13, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 33, 34, 35, 39, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53, 57, 59, 60, 61, 62, 65, 66, 68, 70, 73, 74, 75, 76, 80, 81, 84, 90, 92, 127, 135, 139, 293, 323, 498, 852, 902, 912, 915, 989, 990, 1000, 1046, 1063, 1064, 1117, 1144, 1145, 1155, 1157, 1167, 1317, 1318, 1321], "provid": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 121, 122, 127, 128, 131, 132, 133, 134, 135, 139, 145, 194, 202, 203, 220, 223, 264, 281, 323, 333, 341, 379, 381, 384, 411, 462, 541, 650, 685, 686, 796, 867, 874, 878, 880, 901, 912, 915, 921, 932, 934, 942, 958, 974, 977, 994, 1025, 1074, 1116, 1117, 1120, 1124, 1125, 1131, 1133, 1135, 1139, 1142, 1145, 1181, 1182, 1186, 1187, 1191, 1221, 1291, 1318, 1319, 1321, 1322], "method": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 97, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 122, 123, 124, 126, 127, 128, 132, 133, 134, 135, 136, 137, 139, 145, 146, 147, 149, 168, 214, 226, 312, 322, 325, 326, 331, 333, 368, 379, 380, 381, 383, 384, 385, 405, 407, 418, 456, 462, 485, 495, 549, 617, 620, 621, 641, 686, 689, 812, 820, 821, 862, 863, 864, 865, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 892, 893, 894, 895, 898, 901, 902, 903, 904, 905, 906, 912, 913, 914, 915, 921, 923, 926, 927, 928, 932, 939, 946, 948, 949, 950, 951, 952, 958, 979, 991, 993, 999, 1031, 1035, 1045, 1050, 1053, 1056, 1079, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1103, 1104, 1106, 1109, 1111, 1112, 1117, 1123, 1124, 1125, 1131, 1132, 1133, 1134, 1135, 1136, 1144, 1145, 1146, 1147, 1159, 1160, 1161, 1164, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1181, 1189, 1191, 1192, 1193, 1213, 1215, 1224, 1276, 1277, 1279, 1281, 1285, 1286, 1287, 1288, 1289, 1290, 1292, 1293, 1294, 1295, 1296, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1318, 1319, 1321], "queri": [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 33, 34, 35, 39, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53, 57, 59, 60, 61, 62, 65, 66, 68, 70, 73, 74, 75, 76, 80, 81, 84, 90, 92, 133, 134, 135, 139, 145, 150, 181, 312, 344, 373, 374, 375, 379, 380, 381, 383, 384, 385, 387, 388, 389, 390, 461, 462, 509, 607, 650, 651, 655, 659, 691, 808, 835, 879, 912, 915, 1139, 1144, 1164, 1213, 1224, 1317, 1321], "paramet": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 105, 122, 127, 128, 132, 133, 135, 139, 145, 203, 210, 211, 212, 231, 233, 234, 235, 289, 290, 310, 324, 325, 326, 327, 328, 329, 330, 331, 344, 362, 363, 365, 366, 367, 373, 374, 375, 379, 380, 381, 383, 384, 385, 387, 388, 389, 390, 392, 409, 410, 411, 461, 462, 604, 653, 654, 655, 656, 657, 658, 659, 660, 666, 683, 686, 707, 725, 726, 808, 827, 862, 865, 867, 870, 872, 874, 875, 877, 878, 879, 899, 912, 915, 921, 927, 950, 958, 989, 990, 992, 993, 994, 995, 997, 999, 1001, 1002, 1004, 1013, 1016, 1018, 1023, 1024, 1029, 1030, 1047, 1053, 1057, 1058, 1059, 1060, 1064, 1075, 1078, 1081, 1089, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1103, 1104, 1106, 1107, 1109, 1115, 1117, 1119, 1120, 1123, 1124, 1125, 1126, 1129, 1131, 1133, 1135, 1137, 1138, 1141, 1142, 1144, 1164, 1167, 1213, 1221, 1224, 1281, 1308, 1317, 1318, 1319], "name": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 127, 128, 135, 139, 145, 169, 170, 177, 178, 179, 180, 181, 184, 187, 195, 204, 212, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 229, 234, 235, 239, 240, 244, 245, 247, 248, 278, 279, 281, 323, 324, 327, 329, 330, 335, 337, 340, 341, 344, 360, 367, 368, 371, 379, 380, 381, 387, 388, 389, 390, 397, 407, 411, 426, 478, 479, 506, 510, 512, 513, 514, 516, 517, 520, 537, 604, 606, 611, 621, 643, 648, 650, 655, 696, 697, 710, 726, 750, 751, 752, 763, 777, 809, 812, 816, 829, 830, 831, 835, 846, 849, 862, 863, 864, 865, 867, 870, 872, 874, 875, 876, 877, 878, 881, 889, 891, 901, 902, 903, 904, 905, 906, 909, 912, 915, 921, 932, 958, 968, 985, 1011, 1017, 1065, 1078, 1084, 1089, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1103, 1104, 1106, 1107, 1109, 1111, 1115, 1117, 1119, 1120, 1123, 1124, 1125, 1126, 1129, 1131, 1133, 1135, 1142, 1144, 1145, 1150, 1154, 1155, 1156, 1157, 1167, 1181, 1182, 1186, 1187, 1192, 1201, 1204, 1205, 1215, 1224, 1225, 1277, 1305, 1310, 1317, 1320, 1322], "str": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 122, 127, 128, 132, 133, 135, 139, 145, 169, 171, 172, 178, 179, 180, 181, 187, 199, 201, 204, 210, 211, 212, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 233, 234, 235, 241, 253, 254, 255, 256, 281, 289, 290, 312, 323, 324, 327, 329, 330, 333, 334, 335, 336, 337, 338, 341, 342, 344, 351, 365, 366, 367, 377, 392, 397, 409, 411, 415, 424, 425, 426, 427, 462, 476, 477, 479, 509, 604, 606, 607, 650, 655, 696, 697, 704, 707, 710, 714, 715, 722, 723, 724, 725, 726, 750, 751, 754, 763, 768, 774, 777, 808, 810, 812, 813, 815, 817, 835, 865, 867, 872, 874, 878, 879, 881, 901, 905, 912, 915, 921, 927, 932, 949, 958, 985, 986, 995, 996, 997, 1011, 1015, 1016, 1017, 1024, 1029, 1053, 1084, 1089, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1103, 1104, 1106, 1107, 1115, 1117, 1119, 1123, 1124, 1125, 1131, 1133, 1135, 1141, 1142, 1144, 1145, 1146, 1155, 1157, 1160, 1164, 1167, 1204, 1205, 1213, 1224], "A": [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 33, 34, 35, 36, 39, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53, 57, 59, 60, 61, 62, 65, 66, 68, 70, 73, 74, 75, 76, 80, 81, 84, 90, 92, 100, 121, 122, 127, 128, 131, 133, 135, 139, 145, 171, 178, 180, 184, 194, 202, 203, 215, 216, 217, 219, 220, 221, 222, 223, 224, 278, 279, 281, 306, 318, 320, 323, 324, 325, 326, 328, 330, 331, 333, 344, 365, 366, 367, 410, 425, 477, 478, 479, 509, 604, 645, 648, 649, 651, 655, 691, 697, 710, 725, 763, 795, 796, 816, 817, 818, 835, 881, 905, 912, 915, 921, 932, 971, 985, 994, 996, 999, 1002, 1027, 1065, 1106, 1115, 1117, 1120, 1123, 1124, 1131, 1133, 1135, 1137, 1138, 1142, 1144, 1145, 1149, 1160, 1164, 1176, 1213, 1224, 1319, 1321, 1322], "custom": [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 33, 34, 35, 39, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53, 57, 59, 60, 61, 62, 65, 66, 68, 70, 73, 74, 75, 76, 80, 81, 84, 90, 92, 96, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 135, 139, 145, 281, 772, 775, 776, 865, 867, 870, 874, 875, 877, 878, 881, 901, 915, 934, 944, 949, 958, 976, 1107, 1109, 1115, 1124, 1144, 1148, 1317, 1318], "ncbi_tax_id": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 100, 126, 127, 128, 145, 165, 166, 353, 678, 680, 682, 772, 774, 775, 776, 804, 867, 868, 869, 870, 871, 872, 873, 874, 875, 877, 878, 879, 881, 882, 886, 887, 889, 901, 915, 921, 1124, 1144, 1145, 1146, 1147, 1151, 1152, 1154, 1155, 1156, 1157, 1176, 1181, 1182, 1184, 1186, 1187, 1191, 1192, 1319, 1322], "int": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 122, 127, 128, 135, 139, 145, 169, 172, 174, 175, 178, 179, 180, 191, 201, 204, 210, 211, 212, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 233, 234, 235, 242, 256, 312, 323, 324, 327, 329, 330, 341, 344, 351, 377, 379, 380, 381, 392, 409, 410, 411, 415, 416, 462, 472, 477, 498, 499, 500, 604, 650, 651, 653, 654, 656, 657, 658, 659, 660, 666, 683, 686, 696, 697, 704, 715, 750, 751, 763, 768, 769, 772, 774, 775, 776, 777, 815, 817, 827, 835, 879, 881, 915, 921, 949, 999, 1002, 1016, 1017, 1021, 1084, 1106, 1107, 1109, 1115, 1131, 1133, 1135, 1141, 1142, 1144, 1145, 1146, 1155, 1157, 1160, 1164, 1167, 1204, 1213], "ncbi": [3, 4, 5, 7, 8, 9, 11, 12, 13, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 33, 34, 35, 39, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53, 57, 59, 60, 61, 62, 65, 66, 68, 70, 73, 74, 75, 76, 80, 81, 84, 90, 92, 122, 127, 128, 135, 145, 174, 175, 191, 312, 323, 324, 327, 329, 330, 341, 379, 380, 381, 414, 415, 416, 441, 442, 516, 604, 650, 651, 666, 683, 686, 696, 697, 714, 763, 825, 827, 879, 881, 899, 915, 921, 1131, 1133, 1135, 1137, 1138, 1141, 1142, 1144, 1145, 1146, 1155, 1157, 1201, 1211, 1317, 1318, 1322], "taxonomi": [3, 4, 5, 7, 8, 9, 11, 12, 13, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 33, 34, 35, 39, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53, 57, 59, 60, 61, 62, 65, 66, 68, 70, 73, 74, 75, 76, 80, 81, 84, 90, 92, 122, 127, 128, 135, 145, 174, 175, 191, 323, 324, 327, 329, 330, 341, 379, 380, 381, 411, 415, 416, 604, 650, 651, 666, 683, 686, 696, 697, 763, 825, 827, 879, 881, 915, 921, 1133, 1135, 1144, 1145, 1146, 1155, 1157, 1317, 1318], "identifi": [3, 4, 5, 7, 8, 9, 11, 12, 13, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 33, 34, 35, 39, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53, 57, 59, 60, 61, 62, 65, 66, 68, 70, 73, 74, 75, 76, 80, 81, 84, 90, 92, 121, 122, 123, 127, 135, 139, 145, 178, 180, 184, 195, 202, 203, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 256, 312, 333, 335, 337, 338, 342, 409, 472, 498, 639, 640, 641, 710, 722, 723, 725, 750, 751, 817, 825, 832, 835, 838, 839, 845, 865, 881, 912, 915, 986, 1078, 1112, 1125, 1131, 1133, 1135, 1137, 1138, 1141, 1142, 1144, 1145, 1146, 1167, 1171, 1181, 1182, 1186, 1187, 1213, 1215, 1225, 1317, 1318], "input_method": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 127, 128, 901, 902, 915, 1319], "callabl": [3, 4, 5, 7, 8, 9, 11, 12, 13, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 33, 34, 35, 39, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53, 57, 59, 60, 61, 62, 65, 66, 68, 70, 73, 74, 75, 76, 80, 81, 84, 90, 92, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 128, 253, 344, 704, 862, 901, 915, 932, 958, 994, 1011, 1027, 1039], "either": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 128, 132, 135, 139, 171, 211, 215, 293, 498, 650, 710, 726, 817, 865, 881, 912, 915, 996, 1034, 1053, 1054, 1089, 1106, 1125, 1145, 1154, 1164, 1167, 1213, 1319, 1322], "ani": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 122, 132, 135, 145, 255, 256, 281, 379, 384, 650, 852, 912, 915, 986, 989, 990, 1010, 1013, 1018, 1019, 1023, 1029, 1031, 1035, 1050, 1053, 1057, 1059, 1060, 1063, 1075, 1078, 1079, 1081, 1123, 1126, 1129, 1144, 1145, 1154, 1176, 1281, 1317, 1318, 1321, 1322], "input": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 127, 128, 145, 872, 876, 879, 901, 915, 961, 963, 990, 994, 1072, 1073, 1131, 1133, 1135, 1142, 1145, 1155, 1317, 1318, 1321], "should": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 127, 132, 133, 139, 145, 169, 172, 183, 239, 370, 371, 380, 382, 470, 794, 813, 862, 865, 881, 915, 923, 932, 958, 961, 963, 1011, 1063, 1117, 1124, 1144, 1145, 1155, 1167, 1285, 1286, 1287, 1288, 1289, 1290, 1318, 1319, 1322], "return": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 118, 122, 123, 127, 128, 132, 133, 135, 136, 137, 139, 145, 147, 157, 168, 169, 170, 171, 172, 174, 175, 177, 178, 180, 181, 184, 187, 189, 191, 193, 194, 195, 199, 201, 202, 203, 204, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 226, 230, 233, 234, 235, 239, 240, 241, 242, 243, 244, 245, 247, 248, 256, 257, 272, 275, 281, 289, 290, 292, 293, 295, 296, 306, 307, 312, 318, 320, 322, 323, 327, 329, 333, 334, 335, 336, 337, 338, 340, 341, 342, 344, 353, 354, 355, 356, 360, 365, 366, 367, 368, 371, 373, 374, 375, 379, 380, 381, 383, 384, 385, 387, 388, 389, 390, 394, 397, 409, 410, 414, 415, 416, 418, 419, 421, 424, 425, 426, 430, 431, 446, 447, 449, 450, 456, 474, 476, 477, 478, 479, 481, 485, 490, 495, 497, 498, 500, 509, 529, 530, 532, 537, 541, 549, 556, 559, 561, 562, 604, 606, 617, 618, 620, 621, 639, 640, 641, 643, 645, 646, 648, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 666, 678, 680, 681, 682, 683, 686, 689, 691, 696, 697, 706, 710, 714, 719, 725, 726, 732, 745, 748, 752, 754, 758, 762, 763, 777, 791, 793, 794, 795, 796, 797, 809, 811, 812, 816, 817, 818, 820, 821, 825, 829, 830, 835, 838, 846, 852, 854, 857, 862, 863, 864, 865, 879, 884, 885, 892, 893, 894, 895, 902, 903, 905, 912, 913, 914, 915, 921, 923, 928, 932, 935, 936, 958, 977, 981, 985, 987, 989, 990, 991, 992, 993, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1004, 1007, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 1023, 1024, 1025, 1027, 1028, 1029, 1030, 1031, 1034, 1035, 1038, 1044, 1046, 1047, 1049, 1050, 1053, 1054, 1057, 1058, 1059, 1060, 1062, 1063, 1064, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1078, 1079, 1081, 1084, 1089, 1090, 1106, 1107, 1109, 1112, 1113, 1114, 1117, 1119, 1120, 1123, 1124, 1125, 1131, 1132, 1133, 1135, 1137, 1138, 1139, 1141, 1142, 1144, 1145, 1147, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1159, 1160, 1161, 1164, 1181, 1186, 1195, 1201, 1204, 1205, 1211, 1213, 1215, 1224, 1225, 1229, 1240, 1245, 1246, 1247, 1248, 1254, 1257, 1272, 1273, 1281, 1285, 1286, 1287, 1288, 1289, 1290, 1313, 1318, 1319, 1322], "dict": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 122, 126, 127, 128, 133, 135, 139, 145, 169, 172, 184, 187, 193, 194, 201, 202, 203, 215, 216, 217, 220, 221, 223, 241, 253, 254, 255, 256, 272, 275, 281, 292, 295, 296, 318, 333, 334, 337, 342, 344, 353, 367, 371, 373, 374, 375, 377, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 390, 394, 397, 409, 410, 411, 415, 416, 419, 421, 424, 425, 426, 427, 476, 477, 479, 499, 509, 515, 516, 517, 534, 537, 556, 606, 607, 639, 640, 645, 649, 650, 651, 653, 654, 655, 656, 657, 658, 659, 660, 666, 683, 691, 696, 704, 710, 724, 725, 726, 748, 762, 763, 768, 777, 779, 791, 795, 797, 812, 813, 817, 818, 835, 881, 912, 915, 921, 927, 932, 950, 958, 981, 992, 994, 999, 1000, 1001, 1002, 1003, 1004, 1007, 1009, 1011, 1017, 1018, 1024, 1028, 1030, 1031, 1034, 1035, 1050, 1053, 1054, 1062, 1063, 1064, 1065, 1079, 1084, 1117, 1120, 1124, 1131, 1133, 1135, 1138, 1142, 1145, 1146, 1164, 1167, 1176, 1195, 1204, 1215, 1225, 1305, 1319, 1321], "uniprot": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 118, 122, 127, 128, 135, 139, 145, 169, 195, 201, 215, 219, 221, 222, 233, 234, 283, 312, 353, 354, 356, 365, 366, 367, 368, 371, 376, 378, 379, 380, 381, 416, 454, 469, 470, 474, 477, 483, 517, 533, 556, 559, 561, 562, 639, 641, 645, 650, 651, 683, 686, 687, 691, 696, 704, 744, 752, 779, 791, 795, 797, 809, 810, 813, 872, 876, 878, 879, 882, 885, 886, 887, 889, 902, 915, 932, 1123, 1124, 1126, 1129, 1131, 1132, 1133, 1135, 1137, 1138, 1141, 1142, 1144, 1145, 1148, 1151, 1152, 1155, 1157, 1159, 1160, 1161, 1174, 1189, 1191, 1192, 1194, 1211, 1317, 1318, 1321, 1322], "id": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 122, 127, 128, 132, 135, 139, 145, 169, 174, 175, 178, 179, 180, 181, 184, 187, 191, 193, 201, 215, 218, 219, 221, 222, 233, 241, 312, 323, 324, 327, 329, 330, 337, 341, 342, 353, 354, 356, 360, 365, 366, 367, 371, 379, 380, 381, 409, 415, 416, 462, 474, 477, 479, 509, 515, 516, 517, 533, 537, 556, 559, 561, 562, 604, 607, 639, 641, 645, 649, 650, 651, 666, 683, 686, 687, 691, 696, 697, 710, 712, 714, 715, 746, 752, 763, 777, 779, 791, 797, 810, 813, 815, 816, 817, 818, 825, 827, 829, 830, 831, 846, 867, 870, 874, 875, 877, 878, 879, 881, 899, 912, 915, 921, 932, 1123, 1124, 1126, 1129, 1131, 1133, 1135, 1137, 1138, 1141, 1142, 1143, 1144, 1145, 1146, 1148, 1149, 1150, 1151, 1152, 1155, 1156, 1157, 1160, 1167, 1176, 1201, 1211, 1213, 1224, 1229, 1239, 1251, 1254, 1317, 1322], "kei": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 122, 127, 132, 133, 135, 139, 145, 169, 172, 178, 180, 184, 193, 201, 215, 216, 217, 221, 233, 241, 256, 281, 337, 342, 344, 353, 367, 373, 374, 375, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 390, 409, 411, 415, 416, 424, 426, 476, 477, 479, 509, 537, 556, 606, 607, 639, 640, 641, 645, 650, 691, 696, 710, 726, 777, 779, 791, 797, 817, 818, 846, 862, 865, 881, 884, 892, 893, 894, 895, 912, 915, 921, 932, 958, 985, 986, 999, 1001, 1002, 1004, 1007, 1011, 1017, 1018, 1024, 1025, 1028, 1030, 1031, 1035, 1050, 1053, 1062, 1063, 1064, 1068, 1074, 1075, 1079, 1081, 1084, 1089, 1117, 1119, 1120, 1124, 1131, 1133, 1135, 1137, 1138, 1142, 1145, 1146, 1167, 1176, 1195, 1202, 1203, 1213, 1224, 1319, 1322], "an": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 122, 127, 132, 133, 135, 139, 145, 178, 179, 180, 181, 220, 223, 312, 325, 326, 331, 337, 342, 344, 409, 411, 421, 443, 454, 483, 496, 606, 607, 639, 645, 646, 651, 653, 654, 656, 657, 658, 660, 683, 726, 817, 862, 864, 879, 892, 893, 894, 895, 905, 912, 915, 921, 928, 932, 935, 971, 986, 991, 994, 999, 1011, 1017, 1021, 1025, 1027, 1049, 1068, 1074, 1084, 1123, 1125, 1131, 1133, 1135, 1136, 1139, 1140, 1142, 1144, 1145, 1149, 1155, 1164, 1167, 1196, 1213, 1221, 1278, 1281, 1285, 1286, 1287, 1288, 1289, 1290, 1305, 1313, 1317, 1318, 1322], "object": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 97, 105, 122, 124, 127, 132, 133, 134, 135, 139, 145, 146, 171, 211, 215, 216, 217, 219, 222, 224, 254, 256, 312, 333, 366, 407, 533, 539, 640, 691, 745, 746, 748, 794, 796, 862, 864, 865, 871, 872, 876, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 893, 898, 899, 906, 912, 915, 921, 926, 927, 932, 945, 949, 951, 952, 958, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 981, 994, 1010, 1011, 1019, 1027, 1046, 1056, 1070, 1089, 1091, 1106, 1109, 1111, 1112, 1117, 1123, 1124, 1125, 1126, 1129, 1134, 1136, 1139, 1145, 1149, 1155, 1157, 1164, 1166, 1167, 1171, 1173, 1174, 1176, 1178, 1179, 1189, 1192, 1193, 1213, 1215, 1224, 1254, 1276, 1279, 1281, 1285, 1286, 1287, 1288, 1289, 1290, 1292, 1293, 1294, 1295, 1296, 1299, 1300, 1301, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1317, 1318, 1320], "suitabl": [3, 4, 5, 7, 8, 9, 11, 12, 13, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 33, 34, 35, 39, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53, 57, 59, 60, 61, 62, 65, 66, 68, 70, 73, 74, 75, 76, 80, 81, 84, 90, 92, 1145, 1178, 1319], "process_method": [3, 4, 5, 7, 8, 9, 11, 12, 13, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 33, 34, 35, 39, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53, 57, 59, 60, 61, 62, 65, 66, 68, 70, 73, 74, 75, 76, 80, 81, 84, 90, 92, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117], "input_arg": [3, 4, 5, 7, 8, 9, 11, 12, 13, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 33, 34, 35, 39, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53, 57, 59, 60, 61, 62, 65, 66, 68, 70, 73, 74, 75, 76, 80, 81, 84, 90, 92, 100, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 872, 901, 971], "argument": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 122, 127, 128, 132, 135, 139, 145, 202, 411, 811, 867, 874, 878, 915, 921, 928, 932, 934, 949, 991, 996, 1011, 1018, 1059, 1075, 1081, 1117, 1120, 1131, 1133, 1135, 1142, 1281, 1319], "attribut": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 96, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 120, 122, 123, 124, 126, 127, 132, 133, 135, 136, 137, 139, 142, 145, 146, 147, 168, 181, 184, 214, 226, 239, 322, 394, 418, 456, 485, 495, 498, 529, 530, 549, 617, 620, 621, 689, 820, 821, 835, 862, 863, 864, 865, 872, 879, 881, 891, 892, 893, 894, 895, 898, 902, 903, 904, 905, 912, 913, 914, 915, 921, 932, 946, 948, 950, 958, 960, 993, 1011, 1089, 1090, 1117, 1123, 1125, 1126, 1128, 1129, 1131, 1132, 1133, 1135, 1137, 1138, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1149, 1153, 1159, 1161, 1176, 1213, 1215, 1285, 1286, 1287, 1288, 1289, 1290, 1319, 1322], "add_complexes_by_infer": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "complex": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 132, 133, 135, 139, 145, 157, 210, 215, 216, 217, 218, 219, 222, 224, 231, 259, 260, 262, 401, 421, 457, 498, 499, 500, 640, 741, 751, 752, 768, 775, 776, 793, 794, 795, 915, 921, 1124, 1145, 1154, 1155, 1157, 1176, 1178, 1317, 1318, 1321], "none": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 98, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 122, 126, 127, 128, 132, 133, 135, 139, 145, 146, 149, 169, 172, 174, 175, 180, 181, 193, 194, 195, 215, 224, 239, 253, 256, 272, 278, 281, 283, 309, 312, 320, 327, 329, 333, 334, 335, 336, 337, 338, 341, 344, 351, 353, 362, 363, 368, 372, 377, 379, 380, 383, 385, 405, 409, 410, 411, 419, 420, 421, 422, 457, 461, 462, 509, 604, 606, 607, 629, 639, 640, 650, 651, 655, 687, 704, 707, 722, 723, 726, 727, 733, 735, 747, 771, 791, 795, 796, 799, 800, 801, 808, 824, 826, 828, 831, 835, 862, 865, 868, 869, 871, 872, 873, 874, 876, 878, 879, 881, 882, 883, 884, 885, 886, 887, 888, 889, 891, 899, 901, 902, 904, 906, 912, 915, 921, 926, 927, 928, 932, 939, 950, 958, 979, 981, 987, 989, 992, 993, 994, 1012, 1025, 1043, 1049, 1059, 1065, 1067, 1068, 1069, 1070, 1071, 1074, 1078, 1086, 1089, 1090, 1094, 1095, 1106, 1107, 1109, 1111, 1112, 1115, 1117, 1118, 1119, 1120, 1123, 1124, 1125, 1127, 1128, 1131, 1132, 1133, 1135, 1137, 1138, 1141, 1142, 1144, 1145, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1160, 1164, 1167, 1168, 1169, 1170, 1171, 1172, 1174, 1175, 1176, 1177, 1178, 1181, 1182, 1184, 1186, 1187, 1191, 1192, 1213, 1215, 1221, 1229, 1239, 1240, 1251, 1276, 1277, 1298, 1299, 1300, 1302, 1305, 1306, 1307, 1308, 1319], "creat": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 127, 128, 132, 133, 135, 139, 145, 410, 795, 872, 915, 921, 928, 932, 939, 958, 981, 1003, 1004, 1069, 1070, 1071, 1106, 1109, 1112, 1114, 1115, 1123, 1131, 1133, 1135, 1137, 1138, 1139, 1140, 1144, 1145, 1146, 1149, 1153, 1157, 1167, 1176, 1299, 1300, 1301, 1304, 1305, 1307, 1308, 1310], "silico": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 779, 915], "infer": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 135, 202, 203, 312, 811, 812, 912, 1319], "add": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 135, 145, 454, 881, 885, 912, 915, 921, 932, 958, 989, 990, 1106, 1126, 1129, 1145, 1155, 1157, 1176, 1318, 1319, 1321, 1322], "them": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 127, 135, 139, 145, 509, 763, 912, 915, 921, 958, 991, 993, 1010, 1011, 1063, 1133, 1135, 1145, 1156, 1164, 1298, 1318, 1319, 1322], "thi": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 105, 120, 126, 127, 133, 135, 139, 145, 169, 172, 174, 175, 182, 194, 202, 264, 281, 283, 293, 310, 325, 326, 331, 333, 349, 368, 379, 381, 384, 386, 409, 410, 411, 421, 443, 462, 498, 499, 500, 650, 685, 686, 690, 691, 710, 726, 763, 791, 808, 813, 835, 852, 865, 867, 872, 874, 878, 880, 881, 885, 892, 893, 894, 895, 902, 912, 915, 921, 923, 938, 942, 974, 989, 990, 993, 999, 1000, 1002, 1031, 1035, 1050, 1053, 1079, 1089, 1090, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1103, 1104, 1106, 1107, 1112, 1116, 1117, 1119, 1124, 1128, 1131, 1133, 1135, 1136, 1137, 1138, 1141, 1142, 1144, 1145, 1146, 1149, 1153, 1154, 1155, 1157, 1160, 1164, 1167, 1169, 1171, 1174, 1176, 1179, 1189, 1193, 1213, 1276, 1278, 1281, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1305, 1310, 1313, 1318, 1319, 1321, 1322], "all_complex": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "all": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 118, 126, 127, 133, 135, 139, 145, 172, 174, 180, 182, 203, 307, 312, 323, 333, 341, 344, 379, 380, 409, 410, 411, 477, 498, 586, 650, 683, 687, 691, 710, 726, 791, 811, 835, 865, 881, 885, 899, 912, 915, 921, 932, 991, 992, 1011, 1031, 1034, 1035, 1050, 1053, 1054, 1062, 1063, 1079, 1084, 1089, 1101, 1106, 1112, 1123, 1124, 1125, 1131, 1133, 1135, 1141, 1145, 1146, 1155, 1164, 1167, 1176, 1178, 1191, 1192, 1194, 1196, 1204, 1215, 1248, 1273, 1285, 1295, 1305, 1307, 1310, 1318, 1321, 1322], "all_ent": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "entity_typ": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 98, 122, 123, 135, 139, 215, 722, 723, 865, 869, 876, 915, 1144, 1145, 1150, 1154, 1319], "entiti": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 98, 135, 139, 145, 498, 499, 500, 865, 912, 915, 1031, 1035, 1050, 1053, 1079, 1144, 1145, 1150, 1154, 1167, 1174, 1179, 1319, 1321, 1322], "all_mirna": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "mirna": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 122, 135, 139, 145, 572, 582, 584, 586, 806, 915, 921, 970, 1083, 1143, 1144, 1145, 1154, 1318, 1321, 1322], "all_protein": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 915], "all_ref": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "some": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 135, 139, 145, 498, 879, 912, 915, 1099, 1104, 1125, 1141, 1145, 1155, 1157, 1164, 1318, 1319, 1322], "contain": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 126, 135, 139, 145, 187, 318, 333, 344, 410, 421, 454, 469, 649, 714, 775, 781, 813, 852, 865, 905, 912, 915, 921, 927, 932, 934, 989, 990, 1004, 1010, 1018, 1046, 1047, 1083, 1106, 1164, 1167, 1278, 1285, 1286, 1287, 1288, 1289, 1290, 1318, 1319, 1322], "refer": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 118, 122, 126, 131, 132, 135, 136, 145, 174, 175, 202, 203, 320, 335, 381, 405, 418, 426, 456, 462, 479, 485, 549, 595, 611, 645, 719, 835, 872, 881, 884, 899, 915, 921, 932, 958, 962, 964, 967, 968, 969, 1103, 1104, 1106, 1181, 1182, 1187, 1215, 1225, 1246, 1317, 1318, 1322], "The": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 96, 120, 122, 127, 128, 131, 132, 133, 134, 135, 139, 145, 178, 199, 201, 202, 203, 204, 215, 216, 219, 221, 222, 234, 242, 293, 318, 323, 333, 334, 337, 342, 344, 379, 384, 410, 426, 450, 462, 537, 541, 607, 639, 640, 650, 651, 655, 659, 691, 710, 723, 725, 747, 754, 763, 772, 775, 776, 809, 810, 815, 852, 865, 879, 899, 905, 912, 915, 921, 943, 949, 958, 975, 977, 986, 989, 991, 995, 1001, 1004, 1011, 1017, 1023, 1027, 1038, 1041, 1047, 1057, 1060, 1063, 1064, 1068, 1078, 1084, 1089, 1106, 1109, 1117, 1119, 1124, 1125, 1128, 1131, 1133, 1135, 1137, 1138, 1141, 1142, 1144, 1145, 1146, 1149, 1155, 1157, 1160, 1167, 1176, 1213, 1229, 1251, 1281, 1285, 1286, 1287, 1288, 1289, 1290, 1296, 1298, 1305, 1310, 1317, 1318, 1321, 1322], "field": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 123, 135, 136, 137, 147, 168, 177, 214, 226, 253, 254, 256, 281, 289, 320, 322, 324, 330, 333, 335, 344, 377, 410, 411, 418, 456, 485, 495, 549, 588, 589, 606, 607, 617, 620, 621, 689, 704, 763, 820, 821, 835, 844, 862, 863, 864, 903, 905, 913, 914, 915, 932, 1011, 1017, 1084, 1089, 1132, 1147, 1159, 1161, 1319, 1322], "alwai": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 324, 330, 421, 426, 981, 1145, 1157, 1176, 1319], "pmid": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 214, 712, 713, 714, 715, 859, 898, 915, 1319], "pubm": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 132, 241, 322, 381, 441, 442, 645, 899, 915, 1179, 1300, 1307, 1319], "collect": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 121, 131, 133, 135, 145, 146, 150, 182, 275, 337, 342, 344, 409, 448, 915, 958, 1319, 1322], "across": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 135, 145, 915, 932, 1031, 1034, 1035, 1050, 1053, 1054, 1079, 1319], "record": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 135, 139, 145, 181, 194, 202, 203, 220, 223, 234, 239, 240, 244, 245, 275, 320, 344, 408, 409, 410, 411, 425, 472, 498, 612, 653, 654, 656, 657, 658, 659, 660, 696, 706, 715, 763, 838, 915, 1141, 1176, 1322], "list": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 105, 122, 126, 127, 128, 132, 133, 135, 139, 145, 157, 170, 171, 174, 175, 177, 178, 179, 181, 184, 189, 191, 194, 195, 202, 203, 204, 212, 218, 220, 223, 235, 239, 240, 242, 243, 244, 245, 247, 248, 253, 254, 255, 256, 257, 272, 289, 290, 295, 296, 306, 307, 312, 320, 333, 334, 335, 336, 338, 340, 341, 344, 351, 355, 360, 377, 379, 380, 394, 397, 410, 430, 431, 446, 447, 449, 450, 462, 472, 478, 479, 481, 497, 500, 509, 524, 529, 530, 532, 533, 534, 535, 539, 540, 541, 604, 606, 607, 618, 639, 643, 645, 646, 653, 654, 656, 657, 658, 659, 660, 664, 666, 676, 678, 680, 681, 682, 691, 704, 712, 714, 719, 722, 723, 724, 726, 732, 752, 758, 763, 769, 771, 772, 774, 775, 776, 777, 791, 796, 797, 811, 812, 816, 817, 851, 852, 854, 857, 864, 865, 878, 879, 881, 884, 912, 915, 932, 943, 958, 975, 989, 990, 993, 994, 997, 1004, 1010, 1011, 1013, 1017, 1018, 1025, 1041, 1047, 1063, 1068, 1069, 1070, 1074, 1075, 1078, 1081, 1084, 1089, 1123, 1124, 1125, 1131, 1133, 1135, 1137, 1138, 1141, 1142, 1144, 1145, 1160, 1164, 1167, 1176, 1181, 1182, 1187, 1213, 1215, 1224, 1229, 1239, 1245, 1246, 1248, 1251, 1254, 1273, 1305, 1318, 1319, 1321, 1322], "annotate_complex": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "cplex": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 741, 1319], "singl": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 127, 135, 139, 145, 183, 187, 194, 202, 411, 498, 499, 500, 714, 881, 915, 932, 1013, 1039, 1069, 1070, 1071, 1123, 1124, 1125, 1131, 1133, 1135, 1142, 1145, 1152, 1254, 1317], "brows": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 139, 918, 1106, 1317], "start": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 123, 136, 137, 139, 145, 147, 168, 214, 226, 312, 322, 418, 456, 485, 495, 549, 617, 620, 621, 639, 649, 689, 820, 821, 862, 863, 864, 882, 886, 903, 905, 913, 914, 915, 949, 999, 1132, 1147, 1159, 1161, 1164, 1221, 1318, 1319, 1321], "0": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 122, 123, 135, 136, 137, 139, 147, 168, 185, 214, 226, 242, 257, 265, 322, 405, 418, 438, 456, 464, 472, 485, 495, 549, 556, 617, 620, 621, 689, 763, 774, 820, 821, 862, 863, 864, 869, 872, 876, 903, 905, 913, 914, 915, 989, 990, 999, 1002, 1013, 1047, 1075, 1078, 1081, 1106, 1107, 1109, 1112, 1115, 1132, 1147, 1159, 1161, 1164, 1213, 1221, 1277, 1298, 1299, 1302, 1305, 1306, 1308, 1314, 1316, 1317, 1318, 1319], "print": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 139, 151, 152, 815, 915, 995, 1015, 1094, 1095, 1096, 1097, 1098, 1099, 1106, 1167, 1213, 1221, 1239, 1251, 1319], "gene": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 135, 139, 145, 177, 178, 180, 181, 194, 195, 197, 237, 250, 272, 289, 290, 293, 306, 312, 365, 366, 367, 481, 506, 510, 512, 513, 514, 516, 517, 520, 572, 582, 584, 586, 614, 615, 645, 686, 696, 697, 719, 722, 723, 806, 825, 915, 932, 1123, 1124, 1125, 1126, 1129, 1141, 1143, 1144, 1145, 1151, 1152, 1154, 1155, 1157, 1317, 1318, 1321, 1322], "inform": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 100, 131, 135, 139, 145, 151, 152, 182, 217, 247, 333, 478, 645, 685, 706, 815, 816, 818, 865, 885, 912, 915, 921, 932, 958, 1098, 1099, 1109, 1133, 1135, 1145, 1156, 1167, 1213, 1221, 1317, 1322], "tabl": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 127, 139, 145, 256, 299, 337, 342, 353, 354, 355, 356, 400, 401, 409, 415, 416, 454, 474, 532, 533, 534, 535, 574, 643, 664, 683, 707, 719, 724, 726, 727, 763, 779, 809, 810, 813, 851, 857, 865, 867, 870, 874, 875, 878, 879, 915, 921, 932, 938, 943, 950, 975, 1025, 1068, 1074, 1133, 1135, 1139, 1144, 1145, 1146, 1221, 1229, 1239, 1251, 1317, 1318, 1320, 1321], "present": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 123, 135, 136, 137, 139, 145, 147, 168, 214, 226, 322, 418, 456, 485, 495, 549, 617, 620, 621, 689, 820, 821, 862, 863, 864, 885, 903, 905, 913, 914, 915, 991, 1106, 1132, 1147, 1159, 1161, 1318, 1319], "about": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 100, 128, 131, 135, 139, 145, 151, 152, 323, 333, 344, 360, 478, 645, 653, 654, 655, 656, 657, 658, 659, 660, 685, 815, 816, 912, 915, 1096, 1097, 1109, 1125, 1145, 1146, 1155, 1164, 1213, 1224, 1317, 1318, 1322], "categori": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 139, 645, 781, 862, 865, 915, 1124, 1305, 1317, 1321, 1322], "ascii": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 139, 256, 1029, 1229, 1251], "termin": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 139, 995, 1109, 1319], "If": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 127, 128, 132, 133, 135, 139, 145, 202, 215, 256, 281, 327, 329, 333, 341, 379, 380, 383, 385, 479, 509, 606, 650, 690, 691, 726, 763, 795, 796, 808, 831, 862, 865, 879, 881, 885, 912, 915, 932, 989, 991, 993, 999, 1002, 1010, 1025, 1030, 1038, 1063, 1069, 1070, 1071, 1074, 1075, 1078, 1081, 1117, 1119, 1123, 1124, 1125, 1131, 1133, 1135, 1137, 1138, 1144, 1145, 1146, 1155, 1164, 1167, 1215, 1240, 1298, 1318, 1319, 1322], "one": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 127, 132, 133, 134, 135, 139, 145, 169, 171, 180, 257, 281, 283, 344, 379, 380, 381, 387, 388, 389, 390, 410, 411, 426, 461, 462, 478, 498, 499, 500, 653, 654, 656, 657, 658, 659, 660, 683, 686, 714, 763, 810, 813, 815, 816, 835, 852, 867, 870, 874, 875, 877, 878, 879, 881, 885, 899, 912, 915, 921, 932, 958, 989, 993, 999, 1010, 1011, 1063, 1114, 1115, 1117, 1123, 1125, 1131, 1133, 1135, 1136, 1137, 1138, 1141, 1144, 1145, 1146, 1155, 1156, 1157, 1160, 1164, 1167, 1176, 1191, 1192, 1213, 1215, 1224, 1254, 1257, 1281, 1288, 1289, 1299, 1304, 1307, 1318, 1322], "multipl": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 105, 127, 132, 135, 139, 180, 202, 324, 325, 326, 328, 330, 331, 411, 462, 915, 993, 1039, 1117, 1124, 1133, 1135, 1136, 1145, 1157, 1167, 1305, 1318, 1319, 1322], "each": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 126, 132, 133, 135, 139, 145, 181, 194, 195, 202, 203, 204, 218, 219, 220, 222, 223, 231, 253, 256, 333, 335, 340, 410, 411, 425, 462, 478, 479, 498, 606, 639, 641, 645, 649, 659, 686, 696, 697, 752, 816, 835, 912, 915, 921, 932, 981, 994, 1000, 1007, 1011, 1063, 1078, 1117, 1124, 1145, 1146, 1164, 1167, 1176, 1221, 1224, 1305, 1309, 1318, 1319, 1321, 1322], "proceed": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 139], "next": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 139, 450, 808, 985, 1144, 1145, 1146, 1319], "onc": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 135, 139, 169, 977, 1089, 1145, 1157, 1164, 1318, 1319], "you": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 127, 135, 139, 145, 203, 409, 410, 450, 498, 499, 500, 690, 691, 726, 865, 879, 915, 921, 958, 1089, 1090, 1093, 1099, 1104, 1125, 1131, 1133, 1135, 1137, 1138, 1141, 1142, 1145, 1155, 1164, 1167, 1281, 1317, 1320, 1322], "hit": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 139], "goe": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 139, 1319], "through": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 139, 255, 899, 915, 1221, 1318, 1319], "level": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 105, 132, 133, 135, 139, 143, 145, 322, 324, 325, 326, 328, 330, 331, 387, 388, 389, 390, 411, 639, 691, 769, 781, 797, 865, 885, 892, 893, 894, 895, 912, 915, 921, 958, 971, 981, 995, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1103, 1104, 1106, 1107, 1115, 1117, 1123, 1124, 1125, 1145, 1160, 1189, 1318, 1322], "primari": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 132, 133, 135, 827, 905, 915, 1145, 1155, 1318, 1319], "arg": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 127, 128, 135, 145, 169, 171, 172, 174, 175, 178, 179, 180, 181, 187, 193, 194, 195, 199, 201, 202, 203, 204, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 239, 242, 254, 278, 279, 281, 293, 313, 314, 315, 323, 333, 334, 335, 336, 337, 338, 341, 342, 344, 415, 416, 419, 477, 479, 506, 509, 510, 512, 513, 514, 516, 517, 520, 606, 607, 646, 650, 651, 691, 696, 697, 710, 750, 751, 754, 763, 769, 772, 775, 776, 795, 796, 815, 817, 835, 852, 862, 865, 905, 921, 985, 996, 1011, 1017, 1027, 1038, 1062, 1063, 1084, 1117, 1119, 1120, 1125, 1131, 1133, 1135, 1137, 1138, 1141, 1142, 1144, 1145, 1146, 1155, 1157, 1160, 1213, 1216, 1217, 1218, 1219, 1220, 1222, 1223, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273], "select": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 127, 128, 135, 139, 145, 203, 865, 915, 1011, 1090, 1123, 1136, 1181, 1317, 1322], "doesn": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 145, 915, 1004, 1145, 1155, 1318, 1319], "t": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 145, 256, 410, 498, 499, 500, 779, 912, 915, 1004, 1035, 1038, 1079, 1091, 1092, 1095, 1096, 1107, 1144, 1145, 1155, 1318, 1319, 1320, 1322], "have": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 127, 135, 139, 145, 177, 381, 772, 775, 865, 879, 915, 921, 932, 958, 967, 968, 999, 1063, 1093, 1099, 1104, 1123, 1141, 1144, 1145, 1164, 1167, 1176, 1298, 1299, 1304, 1307, 1318, 1319, 1321, 1322], "string": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 122, 127, 132, 133, 135, 139, 145, 217, 254, 255, 256, 281, 344, 365, 411, 640, 710, 746, 815, 817, 862, 881, 915, 932, 986, 992, 996, 998, 1014, 1016, 1020, 1021, 1022, 1025, 1029, 1042, 1045, 1046, 1049, 1061, 1065, 1073, 1074, 1083, 1089, 1106, 1109, 1123, 1135, 1144, 1145, 1150, 1164, 1167, 1171, 1174, 1179, 1213, 1215, 1229, 1257, 1319], "consid": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 132, 133, 135, 139, 145, 421, 831, 899, 912, 915, 921, 943, 975, 1123, 1319], "tupl": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 122, 123, 127, 133, 135, 136, 137, 139, 145, 147, 168, 169, 170, 174, 175, 177, 180, 181, 195, 204, 212, 214, 215, 216, 218, 219, 221, 222, 224, 226, 229, 230, 234, 235, 239, 240, 242, 243, 244, 245, 247, 248, 253, 281, 289, 290, 306, 322, 333, 334, 335, 336, 338, 340, 341, 344, 353, 355, 360, 373, 374, 375, 377, 379, 380, 381, 383, 384, 385, 387, 388, 389, 390, 411, 418, 424, 425, 456, 472, 476, 478, 485, 495, 509, 524, 537, 549, 556, 604, 606, 607, 611, 612, 617, 618, 620, 621, 641, 643, 646, 650, 683, 689, 691, 704, 746, 752, 763, 769, 771, 772, 774, 775, 776, 779, 797, 816, 820, 821, 851, 852, 854, 857, 863, 865, 881, 884, 885, 903, 912, 913, 914, 915, 932, 986, 994, 999, 1002, 1004, 1010, 1011, 1017, 1047, 1071, 1084, 1089, 1106, 1123, 1125, 1131, 1133, 1135, 1137, 1138, 1142, 1145, 1146, 1147, 1150, 1159, 1160, 1161, 1164, 1178, 1193, 1281, 1285, 1286, 1287, 1288, 1289, 1290, 1293, 1296, 1298, 1299, 1300, 1301, 1304, 1305, 1307, 1308, 1310, 1319], "valu": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 123, 127, 133, 135, 136, 137, 139, 145, 147, 168, 169, 171, 172, 178, 180, 184, 193, 201, 210, 211, 212, 214, 217, 226, 233, 234, 235, 239, 241, 255, 256, 281, 312, 322, 337, 342, 353, 362, 363, 367, 373, 374, 375, 379, 380, 381, 383, 384, 385, 386, 387, 388, 389, 390, 411, 415, 416, 418, 424, 456, 476, 477, 479, 485, 495, 509, 537, 549, 556, 606, 617, 620, 621, 639, 640, 641, 645, 649, 650, 655, 686, 689, 691, 696, 697, 710, 726, 772, 775, 776, 777, 779, 791, 797, 817, 818, 820, 821, 846, 862, 863, 864, 865, 879, 881, 892, 893, 894, 895, 903, 905, 912, 913, 914, 915, 921, 932, 958, 992, 993, 999, 1000, 1001, 1004, 1007, 1009, 1011, 1012, 1017, 1024, 1027, 1029, 1030, 1038, 1040, 1049, 1063, 1064, 1072, 1089, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1103, 1104, 1109, 1117, 1119, 1120, 1124, 1125, 1131, 1132, 1133, 1135, 1137, 1138, 1141, 1142, 1145, 1146, 1147, 1155, 1157, 1159, 1161, 1164, 1195, 1224, 1286, 1288, 1289, 1305, 1308, 1319, 1322], "In": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 127, 135, 145, 310, 379, 380, 381, 498, 499, 500, 683, 686, 691, 779, 912, 915, 932, 958, 981, 1027, 1089, 1115, 1133, 1135, 1145, 1155, 1157, 1164, 1167, 1205, 1318, 1319], "former": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 723, 862, 879, 915, 921, 1319, 1321], "case": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 127, 135, 233, 234, 235, 410, 411, 462, 691, 862, 865, 912, 915, 921, 969, 1001, 1027, 1090, 1115, 1124, 1131, 1133, 1135, 1142, 1144, 1145, 1155, 1156, 1157, 1164, 1167, 1318, 1319, 1322], "combin": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 105, 131, 139, 324, 325, 326, 328, 330, 331, 498, 772, 775, 915, 993, 1176, 1178, 1318, 1319, 1322], "latter": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 135, 318, 411, 640, 879, 915, 921, 1027, 1145, 1319], "limit": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 135, 139, 180, 312, 443, 462, 498, 499, 500, 772, 775, 776, 862, 865, 912, 915, 1319], "ar": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 122, 126, 127, 131, 132, 133, 135, 139, 145, 169, 171, 172, 180, 193, 201, 203, 204, 210, 211, 212, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 239, 256, 283, 289, 293, 306, 310, 327, 329, 333, 334, 371, 373, 374, 375, 379, 380, 381, 383, 384, 385, 387, 388, 389, 390, 392, 409, 415, 416, 426, 461, 469, 477, 479, 498, 499, 500, 506, 510, 512, 513, 514, 516, 517, 520, 556, 606, 639, 640, 641, 686, 690, 691, 696, 697, 710, 714, 726, 747, 750, 751, 752, 763, 776, 797, 811, 817, 852, 862, 865, 867, 874, 878, 885, 912, 915, 926, 928, 932, 958, 964, 967, 968, 969, 985, 997, 999, 1001, 1002, 1010, 1011, 1063, 1064, 1078, 1089, 1116, 1117, 1120, 1123, 1125, 1131, 1133, 1135, 1137, 1138, 1141, 1142, 1145, 1146, 1155, 1157, 1164, 1167, 1176, 1181, 1186, 1187, 1213, 1285, 1286, 1287, 1288, 1289, 1290, 1295, 1305, 1317, 1318, 1320, 1321, 1322], "suppos": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 1109], "us": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 97, 122, 127, 128, 132, 135, 139, 145, 169, 181, 182, 184, 187, 201, 203, 204, 324, 325, 326, 328, 330, 331, 337, 342, 409, 410, 411, 415, 416, 419, 443, 462, 607, 690, 691, 706, 710, 714, 726, 772, 775, 776, 812, 862, 865, 867, 874, 878, 879, 891, 912, 915, 932, 934, 939, 958, 961, 963, 964, 967, 985, 986, 989, 1027, 1031, 1035, 1050, 1053, 1079, 1089, 1095, 1099, 1104, 1106, 1117, 1119, 1123, 1124, 1131, 1133, 1135, 1137, 1138, 1141, 1142, 1144, 1145, 1146, 1148, 1155, 1156, 1157, 1160, 1167, 1189, 1213, 1278, 1281, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1293, 1295, 1296, 1299, 1300, 1301, 1304, 1305, 1307, 1308, 1310, 1313, 1318, 1322], "e": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 122, 127, 128, 135, 139, 145, 256, 289, 333, 334, 335, 336, 337, 338, 368, 397, 409, 411, 496, 498, 707, 714, 812, 835, 865, 880, 885, 899, 912, 915, 921, 932, 958, 995, 997, 999, 1011, 1013, 1018, 1020, 1021, 1123, 1125, 1135, 1144, 1145, 1151, 1152, 1164, 1167, 1176, 1192, 1224, 1281, 1291, 1293, 1296, 1298, 1318, 1319, 1321, 1322], "g": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 122, 127, 128, 135, 139, 145, 256, 368, 397, 409, 496, 498, 707, 812, 835, 865, 885, 912, 915, 921, 958, 995, 997, 1011, 1018, 1078, 1123, 1135, 1144, 1151, 1152, 1167, 1192, 1224, 1298, 1318, 1319, 1321, 1322], "500": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 344, 383, 385, 461, 462, 1319], "250": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "skip": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 1276], "everyth": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 462, 1145, 1155, 1319], "befor": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 381, 915, 958, 1109, 1167, 1305, 1319], "250th": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "pass": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 135, 139, 145, 255, 811, 862, 879, 915, 996, 1011, 1027, 1115, 1144, 1145, 1164, 1221, 1229, 1251, 1319], "util": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 127, 139, 714, 899, 1317, 1318, 1321], "info": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 139, 915, 942, 958, 974, 998, 1213, 1221, 1317, 1322], "complex_infer": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "default": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 122, 127, 135, 139, 145, 203, 281, 293, 312, 333, 379, 380, 381, 410, 462, 606, 607, 659, 726, 808, 835, 865, 912, 915, 921, 932, 958, 971, 977, 993, 1012, 1016, 1018, 1024, 1047, 1049, 1065, 1078, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1103, 1104, 1107, 1117, 1119, 1123, 1131, 1133, 1135, 1137, 1138, 1141, 1142, 1145, 1155, 1157, 1164, 1167, 1193, 1196, 1281, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1296, 1305, 1318, 1319, 1322], "databas": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 118, 119, 120, 122, 127, 128, 131, 132, 133, 135, 139, 145, 151, 155, 192, 194, 195, 197, 201, 202, 203, 204, 215, 216, 217, 218, 219, 220, 221, 222, 223, 246, 248, 259, 260, 264, 272, 323, 324, 325, 326, 328, 330, 331, 333, 335, 360, 414, 419, 426, 479, 481, 490, 498, 499, 500, 509, 556, 572, 595, 604, 611, 612, 645, 646, 652, 655, 659, 706, 722, 723, 724, 726, 727, 793, 795, 796, 797, 808, 821, 865, 870, 875, 881, 909, 910, 915, 921, 932, 934, 965, 967, 968, 969, 1089, 1127, 1128, 1144, 1201, 1215, 1317, 1321, 1322], "exist": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 119, 127, 135, 139, 145, 281, 595, 726, 808, 912, 915, 921, 985, 987, 1004, 1017, 1030, 1089, 1090, 1094, 1106, 1115, 1127, 1131, 1133, 1135, 1139, 1142, 1145, 1149, 1176, 1319], "gener": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 122, 128, 132, 135, 139, 234, 253, 256, 257, 325, 326, 331, 676, 838, 865, 885, 901, 915, 942, 943, 958, 974, 975, 1016, 1025, 1074, 1164, 1319, 1321, 1322], "demand": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 127, 915, 921, 977, 1131, 1133, 1135, 1142, 1319], "accord": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 135, 139, 145, 481, 781, 891, 912, 915, 921, 928, 932, 1004, 1047, 1078, 1106, 1164, 1281, 1299, 1304, 1305, 1307, 1309, 1319], "": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 122, 135, 139, 145, 281, 312, 333, 509, 606, 779, 865, 879, 881, 885, 905, 912, 915, 921, 989, 990, 1000, 1009, 1031, 1034, 1035, 1049, 1050, 1053, 1054, 1057, 1079, 1099, 1106, 1144, 1145, 1318, 1319, 1321], "current": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 119, 135, 145, 152, 344, 381, 892, 893, 894, 895, 912, 915, 918, 921, 1026, 1044, 1106, 1109, 1117, 1119, 1127, 1144, 1167, 1278, 1318, 1319, 1322], "valid": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 135, 145, 175, 242, 454, 586, 707, 892, 893, 894, 895, 912, 915, 1119, 1145], "won": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 145, 498, 499, 500, 915, 1038, 1092, 1095, 1096, 1107, 1145, 1319], "iter": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 122, 127, 128, 133, 145, 774, 835, 838, 885, 915, 958, 994, 997, 1011, 1012, 1013, 1017, 1023, 1049, 1057, 1060, 1063, 1075, 1078, 1081, 1084, 1109, 1125, 1131, 1133, 1135, 1142, 1145, 1167, 1169, 1171, 1174, 1178, 1179, 1191, 1192, 1319], "yield": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 122, 135, 181, 229, 234, 380, 411, 498, 499, 500, 611, 612, 746, 747, 827, 915, 1011, 1041, 1171, 1174, 1178, 1179, 1193, 1319], "coverag": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 915, 971, 1322], "other": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 122, 127, 128, 132, 135, 139, 145, 255, 381, 384, 409, 426, 649, 650, 651, 686, 865, 867, 870, 874, 875, 877, 878, 881, 912, 915, 932, 964, 989, 992, 1000, 1010, 1011, 1013, 1018, 1029, 1031, 1035, 1050, 1053, 1078, 1079, 1089, 1106, 1117, 1125, 1145, 1164, 1167, 1176, 1193, 1201, 1305, 1318, 1322], "calcul": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 333, 469, 915], "proport": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 1298, 1305], "least": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 135, 139, 912, 915, 991, 1319], "arbitrari": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 254, 915, 921, 991, 1319, 1322], "curation_effort": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 145, 884, 915, 1319], "count": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 122, 123, 135, 136, 137, 139, 145, 147, 168, 214, 226, 322, 418, 456, 485, 495, 549, 617, 620, 621, 689, 820, 821, 862, 863, 864, 903, 905, 913, 914, 915, 1003, 1031, 1034, 1035, 1054, 1132, 1147, 1159, 1161], "pair": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 126, 127, 135, 139, 145, 281, 472, 498, 524, 595, 648, 649, 651, 797, 827, 885, 912, 915, 932, 1024, 1047, 1089, 1117, 1131, 1133, 1135, 1137, 1319, 1322], "get_nam": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 1123, 1125, 1319], "consist": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 132, 145, 659, 864, 915, 1109, 1318, 1319], "uniform": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 139, 1017], "might": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 97, 126, 135, 139, 410, 411, 498, 499, 500, 653, 654, 656, 657, 658, 660, 723, 865, 915, 932, 958, 1041, 1145, 1167, 1176, 1319, 1322], "more": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 122, 126, 127, 132, 135, 139, 145, 169, 172, 174, 175, 180, 181, 262, 281, 344, 379, 384, 726, 816, 818, 835, 852, 912, 915, 935, 958, 993, 1011, 1123, 1131, 1133, 1135, 1141, 1142, 1145, 1155, 1156, 1157, 1160, 1164, 1167, 1176, 1213, 1224, 1254, 1285, 1286, 1287, 1288, 1289, 1290, 1318, 1319, 1321, 1322], "exampl": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 127, 131, 145, 384, 411, 891, 971, 989, 990, 997, 1001, 1004, 1013, 1059, 1063, 1075, 1078, 1081, 1083, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1103, 1104, 1123, 1167, 1176, 1213, 1317, 1318], "cell_typ": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 549], "expression_level": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "score": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 139, 264, 312, 485, 604, 772, 775, 776, 779, 915], "static": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 139, 879, 915, 932, 1112, 1145, 1213], "get_reference_set": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "use_complex": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94], "fals": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 98, 126, 127, 128, 132, 133, 135, 139, 145, 149, 178, 180, 181, 201, 202, 204, 231, 239, 257, 262, 274, 293, 320, 324, 325, 326, 328, 330, 331, 336, 338, 341, 344, 371, 376, 378, 381, 405, 409, 461, 472, 500, 509, 547, 586, 606, 629, 646, 659, 691, 694, 707, 719, 720, 725, 726, 763, 800, 811, 812, 829, 830, 835, 862, 868, 872, 876, 884, 889, 902, 909, 912, 915, 917, 921, 932, 939, 958, 977, 999, 1025, 1038, 1054, 1059, 1063, 1072, 1089, 1092, 1093, 1094, 1096, 1097, 1098, 1099, 1100, 1101, 1103, 1104, 1109, 1123, 1125, 1135, 1144, 1145, 1155, 1156, 1157, 1164, 1167, 1176, 1196, 1298, 1299, 1302, 1305, 1307, 1308, 1310, 1311, 1319], "9606": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 100, 122, 126, 135, 145, 165, 166, 169, 174, 175, 177, 178, 179, 180, 191, 201, 204, 208, 209, 210, 211, 212, 215, 216, 217, 218, 219, 220, 221, 222, 223, 233, 234, 235, 262, 264, 265, 270, 285, 286, 287, 295, 296, 302, 303, 309, 323, 324, 327, 329, 330, 353, 354, 356, 362, 363, 370, 371, 379, 380, 381, 382, 392, 467, 472, 477, 486, 539, 540, 541, 547, 556, 558, 559, 560, 561, 562, 574, 575, 576, 577, 578, 579, 580, 591, 609, 611, 650, 651, 666, 678, 680, 682, 686, 696, 697, 704, 744, 745, 750, 751, 756, 757, 758, 759, 761, 762, 763, 766, 772, 774, 775, 776, 787, 799, 800, 804, 822, 823, 824, 826, 827, 828, 829, 830, 831, 835, 837, 840, 841, 844, 847, 848, 867, 868, 872, 878, 879, 881, 882, 886, 887, 889, 901, 915, 921, 1123, 1124, 1126, 1127, 1128, 1129, 1131, 1137, 1138, 1141, 1142, 1154, 1176, 1191, 1192, 1194, 1196, 1319], "swissprot_onli": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 1134, 1164], "true": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 98, 126, 127, 133, 135, 139, 145, 157, 174, 175, 178, 180, 202, 203, 212, 259, 293, 309, 324, 330, 344, 397, 405, 416, 429, 430, 431, 461, 462, 477, 509, 547, 586, 646, 650, 666, 677, 678, 681, 699, 700, 714, 734, 742, 744, 745, 747, 758, 763, 772, 775, 783, 784, 785, 799, 834, 835, 836, 837, 840, 841, 844, 847, 848, 862, 865, 872, 909, 912, 915, 921, 932, 943, 949, 975, 998, 999, 1002, 1010, 1011, 1025, 1038, 1043, 1059, 1067, 1072, 1089, 1090, 1091, 1093, 1095, 1097, 1099, 1101, 1104, 1106, 1109, 1123, 1125, 1127, 1128, 1131, 1133, 1134, 1135, 1136, 1137, 1138, 1141, 1142, 1144, 1145, 1155, 1156, 1157, 1164, 1167, 1176, 1205, 1298, 1299, 1305, 1308, 1310, 1313, 1319], "retriev": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 119, 135, 139, 145, 158, 171, 177, 179, 180, 197, 202, 210, 211, 212, 230, 233, 235, 239, 240, 241, 242, 243, 244, 245, 247, 248, 259, 267, 268, 272, 289, 290, 306, 312, 324, 325, 326, 328, 330, 331, 335, 338, 341, 344, 362, 363, 365, 366, 367, 368, 381, 401, 483, 496, 498, 500, 559, 561, 562, 572, 582, 584, 586, 604, 618, 645, 652, 653, 654, 655, 656, 657, 658, 659, 660, 725, 726, 825, 835, 838, 879, 912, 915, 921, 924, 1028, 1117, 1123, 1127, 1145, 1164, 1215, 1240, 1319], "which": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 97, 100, 118, 126, 127, 128, 134, 135, 139, 145, 239, 242, 283, 312, 333, 379, 384, 498, 639, 685, 714, 772, 775, 852, 884, 912, 915, 926, 928, 932, 935, 939, 958, 964, 989, 990, 991, 993, 997, 1004, 1011, 1029, 1031, 1035, 1047, 1050, 1053, 1078, 1079, 1092, 1093, 1096, 1097, 1098, 1099, 1100, 1101, 1103, 1104, 1112, 1123, 1125, 1139, 1145, 1146, 1149, 1164, 1167, 1176, 1181, 1186, 1187, 1281, 1285, 1286, 1287, 1288, 1289, 1290, 1293, 1295, 1296, 1305, 1317, 1318, 1321, 1322], "potenti": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 958, 1145, 1319], "typic": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 921, 985, 1145, 1155, 1157, 1318, 1319], "proteom": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 118, 128, 915, 1133, 1145, 1319], "organ": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 127, 128, 131, 145, 168, 169, 170, 172, 174, 175, 177, 178, 179, 180, 191, 201, 203, 204, 208, 209, 210, 211, 212, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 233, 234, 235, 262, 264, 265, 270, 285, 286, 287, 295, 296, 302, 303, 309, 323, 324, 327, 329, 330, 341, 353, 354, 356, 360, 362, 363, 370, 371, 376, 377, 378, 379, 380, 381, 382, 392, 397, 405, 415, 416, 467, 472, 486, 505, 506, 507, 508, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 539, 540, 541, 547, 556, 558, 559, 560, 561, 562, 574, 575, 576, 577, 578, 579, 580, 591, 604, 609, 611, 640, 650, 651, 666, 667, 676, 677, 684, 686, 696, 697, 704, 744, 745, 750, 751, 756, 757, 758, 759, 761, 762, 763, 766, 777, 787, 799, 800, 812, 822, 823, 824, 826, 827, 828, 829, 830, 831, 835, 837, 840, 841, 844, 847, 848, 879, 881, 902, 915, 921, 1123, 1126, 1127, 1128, 1129, 1131, 1133, 1135, 1136, 1137, 1138, 1141, 1142, 1144, 1145, 1146, 1155, 1157, 1181, 1182, 1186, 1187, 1191, 1192, 1194, 1196, 1317, 1318, 1321, 1322], "option": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 127, 132, 135, 139, 145, 180, 224, 379, 380, 409, 411, 498, 499, 500, 726, 912, 915, 993, 1016, 1018, 1024, 1038, 1047, 1078, 1117, 1120, 1144, 1145, 1150, 1155, 1157, 1160, 1164, 1167, 1193, 1196, 1229, 1251, 1305, 1319, 1322], "get_subset": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 862, 1319], "subset": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 915, 968, 1313], "filter": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 98, 122, 131, 139, 145, 177, 181, 312, 915, 958, 994, 1011, 1319], "element": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 122, 126, 127, 134, 135, 139, 145, 256, 318, 419, 683, 691, 714, 719, 813, 865, 884, 912, 915, 989, 990, 991, 994, 997, 999, 1001, 1004, 1010, 1011, 1012, 1013, 1017, 1018, 1031, 1034, 1035, 1049, 1050, 1053, 1054, 1063, 1069, 1070, 1071, 1075, 1078, 1079, 1081, 1123, 1131, 1133, 1135, 1137, 1138, 1145, 1167, 1305, 1319], "get_subset_bool_arrai": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "reference_set": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "boolean": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 135, 312, 655, 872, 912, 915, 1319], "vector": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 915], "presenc": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 135, 912, 932], "absenc": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 135, 912, 932], "simplest": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "kind": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 135, 139, 1145, 1146, 1154, 1319, 1322], "match": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 127, 135, 139, 145, 191, 477, 915, 1131, 1133, 1135, 1142, 1145, 1155, 1157, 1193, 1319, 1322], "possibl": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 127, 133, 135, 145, 180, 234, 362, 363, 415, 686, 710, 915, 1084, 1125, 1131, 1133, 1135, 1137, 1138, 1141, 1142, 1144, 1145, 1155, 1157, 1164, 1171, 1174, 1179, 1201, 1317, 1319], "get_valu": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 1319], "exclude_non": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "call": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 122, 132, 135, 145, 279, 383, 385, 607, 811, 812, 862, 864, 891, 901, 915, 921, 928, 932, 993, 1001, 1018, 1089, 1090, 1144, 1145, 1155, 1157, 1167, 1176, 1305, 1310, 1318, 1319], "can": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 122, 127, 131, 132, 133, 135, 139, 145, 180, 203, 224, 409, 411, 454, 498, 499, 500, 607, 686, 726, 772, 775, 776, 864, 865, 879, 881, 885, 912, 915, 926, 932, 934, 942, 958, 967, 974, 986, 1011, 1013, 1018, 1020, 1021, 1031, 1035, 1038, 1047, 1050, 1053, 1075, 1079, 1081, 1089, 1107, 1117, 1123, 1125, 1131, 1133, 1135, 1137, 1138, 1141, 1142, 1144, 1145, 1155, 1156, 1157, 1160, 1167, 1221, 1278, 1281, 1285, 1286, 1287, 1288, 1289, 1290, 1293, 1295, 1296, 1299, 1300, 1301, 1304, 1305, 1307, 1308, 1310, 1313, 1318, 1319, 1320, 1321, 1322], "tell": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 283, 829, 830, 831, 915, 921, 1020, 1021, 1123, 1125, 1144, 1145, 1319, 1322], "macrophag": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 962, 1319], "epithelial_cel": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "label": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 133, 135, 139, 145, 146, 147, 168, 169, 170, 171, 172, 817, 818, 867, 874, 879, 892, 893, 894, 895, 905, 913, 914, 915, 923, 924, 926, 927, 928, 985, 1106, 1112, 1115, 1124, 1144, 1145, 1151, 1152, 1213, 1281, 1285, 1286, 1287, 1288, 1289, 1290, 1299, 1302, 1304, 1305, 1307, 1308, 1311, 1319], "same": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 122, 127, 132, 135, 139, 145, 379, 384, 409, 411, 461, 639, 723, 813, 817, 852, 865, 867, 872, 874, 878, 881, 902, 912, 915, 958, 991, 994, 1131, 1133, 1135, 1142, 1144, 1145, 1155, 1157, 1167, 1176, 1319], "human": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 122, 127, 128, 135, 139, 172, 180, 201, 202, 203, 204, 210, 211, 212, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 233, 234, 235, 307, 323, 324, 327, 329, 330, 376, 377, 378, 379, 380, 381, 392, 397, 419, 424, 425, 427, 443, 474, 500, 648, 676, 677, 684, 686, 696, 697, 745, 748, 750, 751, 763, 779, 791, 811, 812, 835, 870, 915, 1141, 1144, 1145, 1154, 1317, 1318, 1322], "readabl": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 139, 648, 1145, 1154, 1319], "py": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 126, 135, 139, 145, 912, 915, 921, 958, 1319], "attr": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 122, 132, 135, 139, 145, 181, 881, 912, 915, 921, 958, 993, 1171, 1174, 1178], "infer_complex": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "load_data": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 127, 128, 901], "load_protein": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "entir": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 915, 1319], "make_df": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 139, 145, 932, 1319], "rebuild": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 921], "compil": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 126, 169, 915, 921, 1025, 1303, 1305, 1319, 1320], "panda": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 139, 145, 171, 172, 293, 323, 490, 646, 697, 725, 726, 915, 950, 998, 1164, 1317, 1318, 1321, 1322], "datafram": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 127, 139, 145, 171, 293, 323, 409, 411, 490, 646, 697, 725, 726, 915, 998, 1133, 1135, 1317, 1318], "frame": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 98, 127, 139, 145, 171, 172, 293, 323, 409, 411, 646, 697, 884, 921, 932, 939, 950, 1131, 1133, 1135, 1137, 1142, 1317, 1318, 1321], "assign": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 120, 126, 135, 139, 145, 915, 932, 1050, 1053, 1079, 1128, 1319, 1322], "df": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 98, 127, 139, 411, 998, 1131, 1133, 1135, 1142, 1319], "numof_ent": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "number": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 123, 127, 131, 135, 136, 137, 139, 145, 147, 168, 174, 175, 180, 214, 226, 256, 289, 312, 322, 344, 418, 454, 456, 462, 469, 472, 477, 485, 495, 498, 499, 500, 549, 617, 620, 621, 653, 654, 656, 657, 658, 659, 660, 683, 686, 689, 771, 772, 797, 820, 821, 849, 862, 863, 864, 879, 885, 889, 899, 903, 905, 912, 913, 914, 915, 932, 991, 993, 1000, 1020, 1031, 1034, 1035, 1062, 1106, 1109, 1123, 1125, 1132, 1135, 1145, 1147, 1155, 1157, 1159, 1160, 1161, 1167, 1189, 1213, 1215, 1247, 1299, 1304, 1305, 1307, 1309, 1318, 1319, 1322], "numof_record": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "total": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 147, 203, 344, 913, 914, 915, 1003, 1109, 1167, 1288, 1289, 1305, 1310], "numof_refer": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "process": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 128, 131, 139, 145, 157, 169, 174, 175, 189, 191, 210, 212, 259, 307, 312, 325, 326, 331, 397, 409, 410, 411, 419, 430, 431, 446, 447, 497, 522, 529, 530, 541, 574, 678, 681, 719, 723, 732, 744, 747, 758, 762, 763, 791, 811, 813, 827, 852, 854, 862, 865, 901, 915, 958, 967, 985, 986, 1026, 1044, 1075, 1081, 1089, 1123, 1144, 1145, 1164, 1167, 1176, 1318, 1321], "_process_method": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 901], "reload": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 105, 120, 132, 133, 135, 139, 145, 912, 915, 921, 977, 1123, 1124, 1125, 1128, 1145, 1305, 1308, 1310, 1319], "set_method": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 127, 128, 901], "look": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 127, 139, 145, 809, 810, 813, 862, 864, 879, 901, 915, 1004, 1145, 1155, 1164, 1193], "up": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 139, 145, 312, 325, 326, 331, 380, 384, 498, 499, 500, 763, 809, 810, 813, 862, 864, 901, 915, 999, 1002, 1004, 1119, 1144, 1145, 1155, 1160, 1167, 1189, 1191, 1192, 1193, 1213, 1299, 1304, 1305, 1307, 1319], "necessari": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 310, 686, 901, 915, 921, 928, 1139, 1144, 1167, 1305, 1313, 1318, 1319], "set_reference_set": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "show": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 133, 135, 139, 145, 727, 915, 932, 1089, 1144, 1298, 1319, 1322], "table_param": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "consol": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 139, 462, 1089, 1093, 1106, 1317], "basic": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 139, 152, 835, 915, 1317], "datasheet": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 139, 365, 366, 367, 825, 1145, 1254], "subset_intersect": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "univers": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 915], "occur": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 145, 1031, 1035, 1050, 1053, 1079], "to_arrai": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "use_field": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "v": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 145, 293, 915, 1319], "featur": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 379, 384, 892, 893, 894, 895, 1191, 1192, 1224, 1229, 1239, 1251, 1317, 1319], "arrai": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 180, 411, 915, 942, 958, 974, 994, 1305, 1319], "huge": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 139, 723, 872, 915, 1145, 1164, 1319, 1320], "to_bool_arrai": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "to_set": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 862], "dump": [5, 100, 723, 724, 726, 727, 808, 901, 915, 921, 985, 1144, 1319], "primary_field": 5, "check_id": 5, "abstractresourc": [5, 100, 958], "protein_sourc": [6, 1319], "complex_sourc": [6, 1319], "keep_annot": [6, 93, 94], "create_datafram": [6, 93, 94], "pickle_fil": [6, 30, 105, 126, 145, 915, 1123, 1127, 1128, 1319], "logger": [6, 30, 122, 126, 127, 145, 901, 915, 921, 928, 932, 939, 948, 958, 979, 1090, 1107, 1112, 1113, 1115, 1123, 1124, 1125, 1131, 1136, 1144, 1145, 1146, 1160, 1167, 1176, 1181, 1277], "manag": [6, 923, 1139, 1140, 1149, 1317], "accept": [6, 145, 450, 915, 932, 991, 996, 1011, 1123, 1146, 1281, 1293, 1296, 1319, 1322], "convert": [6, 30, 145, 224, 257, 293, 533, 534, 535, 539, 540, 813, 915, 932, 989, 990, 1010, 1014, 1020, 1021, 1023, 1029, 1057, 1060, 1070, 1072, 1073, 1106, 1125, 1145, 1155, 1157, 1160, 1164, 1189, 1278, 1299, 1300, 1301, 1304, 1305, 1307, 1308, 1310, 1318, 1319], "protein_sources_default": 6, "complex_sources_default": 6, "onli": [6, 30, 122, 127, 132, 133, 135, 139, 145, 169, 172, 174, 175, 201, 204, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 239, 275, 281, 289, 323, 324, 325, 326, 328, 330, 331, 336, 338, 344, 392, 397, 409, 410, 411, 416, 469, 472, 477, 666, 707, 714, 791, 835, 865, 867, 874, 878, 912, 915, 921, 938, 958, 967, 968, 971, 977, 989, 993, 1001, 1011, 1042, 1061, 1063, 1089, 1090, 1098, 1103, 1106, 1125, 1131, 1133, 1135, 1137, 1138, 1141, 1142, 1144, 1145, 1146, 1155, 1156, 1157, 1164, 1176, 1178, 1196, 1205, 1317, 1318, 1321, 1322], "construct": [6, 1089, 1144, 1281, 1285, 1286, 1287, 1288, 1289, 1290, 1293, 1295, 1296], "default_field": 6, "bool": [6, 30, 127, 128, 133, 135, 139, 145, 157, 174, 175, 178, 180, 181, 201, 202, 203, 204, 212, 231, 239, 293, 312, 324, 325, 326, 328, 330, 331, 336, 338, 341, 344, 381, 397, 409, 416, 419, 462, 472, 477, 500, 509, 606, 646, 650, 655, 659, 666, 691, 714, 725, 726, 763, 772, 775, 812, 835, 862, 865, 878, 879, 912, 915, 932, 958, 999, 1002, 1011, 1027, 1038, 1059, 1063, 1123, 1125, 1131, 1133, 1135, 1141, 1142, 1144, 1145, 1155, 1157, 1164, 1167, 1205], "whether": [6, 132, 135, 145, 157, 239, 397, 462, 714, 812, 865, 912, 915, 1011, 1038, 1167, 1319], "includ": [6, 30, 135, 139, 145, 150, 157, 178, 180, 181, 184, 201, 203, 204, 212, 215, 239, 318, 327, 329, 341, 397, 411, 606, 607, 650, 666, 775, 776, 812, 867, 874, 878, 912, 915, 932, 958, 965, 967, 968, 969, 1004, 1117, 1123, 1125, 1167, 1319, 1321, 1322], "apart": [6, 145, 281, 606, 607, 915, 1318, 1319], "upon": [6, 30, 139, 1072, 1093, 1144, 1319], "initi": [6, 36, 93, 94, 119, 120, 145, 912, 915, 949, 958, 1109, 1127, 1128, 1144, 1167, 1178, 1205, 1319, 1321], "chanc": [6, 1319], "later": [6, 30, 126, 133, 135, 139, 794, 915, 1144, 1167, 1319], "all_annot": [6, 30, 1319], "all_annotations_str": 6, "serial": [6, 96, 122, 132, 133, 135], "search": [6, 30, 139, 145, 915, 1045, 1144, 1164, 1213], "dictionari": [6, 30, 96, 122, 127, 132, 133, 135, 139, 145, 178, 180, 184, 187, 210, 233, 241, 256, 281, 333, 426, 477, 479, 483, 639, 641, 645, 648, 725, 726, 794, 813, 817, 835, 846, 862, 912, 915, 927, 981, 992, 993, 1001, 1004, 1018, 1024, 1030, 1063, 1064, 1075, 1081, 1131, 1133, 1135, 1138, 1144, 1145, 1146, 1155, 1317, 1318], "approv": [10, 915], "cancer": [10, 194, 195, 197, 272, 275, 481, 699, 700, 915, 1319], "drug": [10, 32, 122, 145, 193, 194, 195, 242, 245, 306, 333, 334, 335, 336, 338, 340, 341, 342, 505, 508, 509, 510, 511, 513, 515, 519, 915, 1145, 1213, 1319, 1321], "http": [10, 38, 181, 194, 195, 215, 216, 217, 218, 219, 220, 221, 222, 223, 233, 235, 262, 267, 268, 344, 441, 442, 443, 450, 462, 524, 572, 582, 597, 598, 604, 614, 615, 646, 655, 706, 763, 796, 797, 816, 835, 851, 1041, 1076, 1077, 1089, 1144, 1145, 1164, 1213, 1278, 1318, 1322], "www": [10, 181, 194, 195, 215, 216, 217, 218, 219, 220, 221, 222, 223, 262, 524, 572, 582, 646, 706, 816, 851, 1076, 1077, 1144, 1145, 1164, 1213, 1278, 1319], "anticancerfund": [10, 194, 195], "org": [10, 38, 181, 194, 195, 215, 216, 217, 218, 219, 220, 221, 222, 223, 262, 394, 443, 524, 572, 597, 598, 604, 646, 706, 835, 851, 879, 1144, 1145, 1164, 1278, 1319, 1322], "en": [10, 194, 195, 344, 1319], "cancerdrug": [10, 194, 195], "db": [10, 94, 120, 194, 195, 862, 921, 1128, 1318, 1319], "cellphonedb": [13, 962, 1317], "abbrevi": [14, 15, 43, 606, 1106, 1167], "cspa": [14, 15, 915], "cell": [23, 58, 64, 69, 171, 172, 237, 400, 401, 614, 615, 857, 865, 915, 1068, 1123, 1319, 1322], "type": [23, 58, 69, 121, 122, 127, 128, 135, 136, 145, 171, 172, 179, 180, 195, 214, 215, 216, 221, 237, 289, 312, 334, 337, 342, 362, 363, 409, 415, 462, 479, 604, 614, 615, 629, 645, 683, 707, 710, 722, 723, 725, 735, 816, 817, 818, 865, 867, 870, 874, 875, 877, 878, 879, 884, 885, 912, 915, 921, 932, 949, 958, 989, 990, 994, 1010, 1023, 1029, 1057, 1059, 1060, 1063, 1075, 1078, 1081, 1089, 1090, 1107, 1125, 1131, 1133, 1135, 1137, 1138, 1141, 1142, 1144, 1145, 1146, 1150, 1155, 1156, 1157, 1213, 1317, 1318, 1319], "marker": [23, 58, 69, 237, 614, 615], "annot_attr": 26, "corum": [27, 28, 915, 1319, 1322], "class_definit": [30, 139, 862, 864], "exclud": [30, 126, 139, 145, 169, 172, 174, 175, 203, 278, 279, 774, 862, 915, 1319], "excludes_extra": [30, 139], "annotdb_pickle_fil": 30, "composite_resource_nam": [30, 139], "seri": [30, 135, 139, 293, 915, 1145, 1154, 1221, 1319], "definit": [30, 139, 145, 407, 426, 811, 864, 865, 915, 921, 924, 927, 928, 958, 961, 981, 1144, 1145, 1317, 1318, 1321], "instanc": [30, 93, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 126, 127, 128, 133, 135, 139, 145, 379, 384, 809, 881, 886, 915, 923, 928, 949, 958, 977, 1078, 1104, 1107, 1109, 1113, 1127, 1133, 1135, 1139, 1140, 1144, 1145, 1149, 1153, 1155, 1181, 1186, 1281, 1305, 1308, 1310, 1318, 1319, 1322], "intern": [30, 133, 139, 217, 224, 533, 640, 691, 794, 912, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 1144, 1145, 1155, 1157, 1319, 1321], "annot_format": [30, 139], "annotdef": [30, 139], "These": [30, 139, 410, 411, 470, 595, 640, 852, 867, 874, 878, 879, 915, 921, 932, 965, 967, 968, 969, 985, 1145, 1157, 1167, 1176, 1319, 1322], "carri": [30, 96, 139, 640, 1319], "instruct": [30, 139, 454, 915, 1319], "popul": [30, 133, 139, 865, 1319], "parent": [30, 139, 426, 710, 862, 863, 865, 1125, 1168, 1169, 1170, 1172, 1175, 1177, 1178, 1319], "respect": [30, 135, 139, 145, 373, 374, 375, 379, 380, 381, 383, 384, 385, 387, 388, 389, 390, 915, 1047, 1319], "while": [30, 135, 139, 145, 219, 222, 318, 411, 426, 650, 686, 691, 723, 726, 912, 915, 932, 958, 1089, 1109, 1318, 1319], "p00533": [30, 139, 143, 145, 1318, 1319, 1322], "egfr": [30, 135, 139, 145, 915, 1167, 1318, 1319, 1322], "under": [30, 96, 139, 891, 915, 942, 974, 1149, 1153, 1319], "adhes": [30, 64, 139, 143, 915], "direct": [30, 128, 135, 136, 139, 145, 529, 650, 676, 865, 872, 915, 932, 965, 969, 993, 1123, 1125, 1145, 1285, 1286, 1287, 1288, 1289, 1290], "children": [30, 139], "ad": [30, 139, 145, 915, 932, 989, 990, 999, 1011, 1167, 1176, 1319], "built": [30, 139, 145, 879, 915, 921, 923, 924, 934, 958, 993, 1045, 1123, 1124, 1317, 1318], "extra": [30, 133, 139, 145, 606, 915, 932, 1145], "merg": [30, 96, 122, 126, 127, 132, 135, 139, 145, 881, 912, 915, 993, 1004, 1024, 1030, 1167, 1176, 1319], "want": [30, 127, 135, 139, 145, 915, 1099, 1104, 1317, 1318, 1322], "overwrit": [30, 135, 139, 958, 1064], "modifi": [30, 135, 139, 912, 915, 958, 998, 1096], "your": [30, 139, 410, 915, 921, 1106, 1164, 1319, 1322], "execut": [30, 139, 915, 1167, 1305, 1319], "instanti": [30, 139, 865, 977, 1319], "empti": [30, 133, 135, 139, 145, 324, 330, 421, 691, 912, 915, 997, 1012, 1049, 1059, 1069, 1070, 1071, 1145, 1318, 1319], "class_to_class_connect": [30, 139], "filter_interclass_network": [30, 139], "classes_by_ent": [30, 139], "One": [30, 122, 127, 135, 139, 145, 169, 172, 180, 181, 289, 290, 726, 813, 835, 932, 1131, 1133, 1135, 1142, 1145, 1160, 1213, 1224], "instead": [30, 135, 139, 145, 409, 500, 646, 725, 726, 912, 915, 986, 991, 1093, 1117, 1119, 1319, 1320, 1322], "iter_class": [30, 139], "counts_by_class": [30, 139], "create_class": [30, 139], "classdef": [30, 139], "overrid": [30, 139, 867, 874, 878, 879, 921, 1117, 1119], "degree_inter_class_network": [30, 139], "annot_args_sourc": [30, 139], "annot_args_target": [30, 139], "degrees_of": [30, 139], "target": [30, 127, 128, 135, 139, 145, 155, 177, 194, 245, 293, 322, 323, 324, 325, 326, 328, 330, 331, 333, 341, 415, 416, 572, 582, 584, 586, 611, 612, 683, 686, 710, 854, 872, 888, 912, 915, 921, 936, 970, 1125, 1131, 1133, 1135, 1137, 1138, 1141, 1142, 1144, 1145, 1146, 1155, 1213, 1285, 1286, 1287, 1288, 1289, 1290, 1319, 1321, 1322], "degre": [30, 135, 139, 915, 1047], "filter_class": [30, 139], "annot_df": [30, 139], "combined_df": [30, 139], "network_arg": [30, 139], "annot_arg": [30, 139], "entities_sourc": [30, 139], "entities_target": [30, 139], "only_direct": [30, 98, 139, 145], "only_undirect": [30, 98, 139], "only_sign": [30, 98, 135, 139], "only_effect": [30, 139], "only_protein": [30, 98, 139, 472], "swap_undirect": [30, 98, 139], "undirected_orient": [30, 139], "entities_or": [30, 98, 139], "where": [30, 127, 135, 139, 145, 194, 373, 374, 375, 383, 384, 385, 387, 388, 389, 390, 479, 498, 556, 686, 797, 885, 905, 912, 915, 921, 1030, 1089, 1131, 1133, 1135, 1142, 1167, 1285, 1286, 1287, 1288, 1289, 1290, 1319, 1322], "between": [30, 139, 145, 212, 229, 409, 515, 516, 517, 597, 604, 639, 641, 648, 649, 651, 686, 691, 725, 772, 775, 827, 881, 912, 915, 1010, 1023, 1057, 1060, 1133, 1135, 1143, 1144, 1145, 1155, 1156, 1281, 1286, 1288, 1289, 1298, 1305, 1318, 1319, 1321, 1322], "enit": [30, 139], "alreadi": [30, 135, 139, 145, 411, 723, 813, 915, 958, 971, 1083, 1114, 1115, 1125, 1144, 1176, 1319], "side": [30, 139, 915, 932, 1144, 1305, 1319], "connect": [30, 135, 139, 726, 915, 1176, 1281, 1318, 1321, 1322], "note": [30, 135, 139, 180, 325, 326, 331, 409, 556, 653, 654, 656, 657, 658, 660, 915, 958, 989, 1001, 1075, 1081, 1145, 1319, 1322], "howev": [30, 135, 139, 915, 921, 1318, 1319], "result": [30, 127, 135, 139, 145, 181, 231, 256, 312, 341, 344, 379, 380, 383, 385, 409, 411, 477, 650, 683, 813, 865, 915, 932, 1029, 1030, 1093, 1099, 1100, 1101, 1104, 1125, 1135, 1144, 1145, 1156, 1164, 1167, 1213, 1319], "consequ": [30, 139], "memori": [30, 139, 411, 472, 726, 747, 921, 998, 1026, 1044, 1145, 1146, 1160, 1167, 1189, 1191, 1192, 1318, 1319, 1321], "issu": [30, 139, 1099, 1104, 1318], "criteria": [30, 135, 145, 747, 915, 1145], "defin": [30, 36, 121, 127, 128, 134, 135, 139, 145, 410, 639, 649, 772, 775, 776, 862, 865, 879, 881, 915, 923, 932, 934, 958, 1011, 1027, 1117, 1145, 1146, 1285, 1286, 1287, 1288, 1289, 1290, 1293, 1295, 1296, 1305, 1317, 1318, 1322], "here": [30, 96, 122, 132, 134, 135, 139, 145, 203, 293, 344, 450, 639, 655, 915, 926, 934, 1011, 1027, 1109, 1144, 1145, 1164, 1176, 1281, 1318, 1319, 1322], "appli": [30, 411, 747, 915, 921, 958, 994, 1100, 1299, 1300, 1301, 1304, 1305, 1307, 1308, 1310, 1319], "undirect": [30, 135, 139, 912, 915, 932, 968, 1285, 1286, 1287, 1288, 1289, 1290, 1319], "specif": [30, 122, 128, 135, 139, 145, 187, 234, 254, 344, 506, 510, 512, 513, 514, 516, 517, 520, 537, 862, 865, 912, 915, 921, 1106, 1144, 1201, 1318, 1319, 1322], "without": [30, 96, 97, 122, 132, 135, 139, 145, 239, 862, 912, 915, 958, 962, 992, 997, 1018, 1078, 1317, 1322], "effect": [30, 98, 135, 136, 139, 145, 322, 530, 732, 854, 888, 912, 915, 1319], "1": [30, 123, 127, 135, 136, 137, 139, 145, 147, 168, 174, 175, 214, 226, 322, 400, 401, 418, 456, 474, 485, 549, 604, 617, 620, 621, 689, 769, 820, 821, 862, 863, 864, 870, 872, 874, 875, 877, 882, 885, 886, 887, 889, 903, 905, 913, 914, 915, 989, 990, 991, 999, 1001, 1002, 1004, 1013, 1063, 1075, 1078, 1081, 1109, 1132, 1135, 1145, 1147, 1155, 1157, 1159, 1161, 1164, 1193, 1213, 1277, 1298, 1317, 1319, 1322], "partner": [30, 135, 139, 145, 418, 498, 915, 932, 1319, 1322], "small": [30, 122, 139, 222, 223, 723, 752, 921, 1167, 1277, 1285, 1286, 1287, 1288, 1289, 1290, 1318, 1321], "molecul": [30, 64, 122, 135, 139, 145, 222, 223, 244, 334, 362, 363, 752, 915, 921, 932, 1167, 1318, 1322], "mutual": [30, 135, 509, 912, 915], "ignor": [30, 132, 133, 135, 139, 145, 281, 905, 915, 958, 1084, 1145, 1156], "make": [30, 126, 139, 915, 921, 989, 1069, 1070, 1071, 1097, 1103, 1104, 1145, 1155, 1157, 1319, 1322], "sure": [30, 139, 915, 921, 1069, 1070, 1071], "orient": [30, 139, 1299, 1300, 1301, 1304, 1305, 1307, 1308, 1310], "partenr": [30, 139], "get_class": [30, 139], "its": [30, 121, 135, 139, 145, 218, 281, 335, 368, 380, 443, 649, 691, 852, 915, 928, 985, 987, 1049, 1075, 1078, 1081, 1096, 1097, 1123, 1125, 1126, 1129, 1145, 1149, 1155, 1157, 1167, 1205, 1211, 1293, 1295, 1296, 1319, 1321], "content": [30, 96, 122, 132, 135, 139, 262, 360, 490, 706, 726, 763, 865, 915, 921, 958, 967, 1025, 1068, 1074, 1089, 1117, 1167, 1318, 1320, 1321], "annotop": [30, 139], "oper": [30, 131, 139, 864, 865, 915, 991, 1034, 1053, 1054, 1123, 1319], "over": [30, 128, 139, 408, 838, 915, 1178, 1191, 1192, 1321], "get_df": [30, 139, 1131, 1319], "doe": [30, 93, 119, 135, 139, 145, 310, 421, 462, 808, 852, 881, 915, 985, 989, 1017, 1053, 1075, 1081, 1093, 1098, 1103, 1106, 1125, 1127, 1139, 1145, 1146, 1149, 1155, 1167, 1305, 1318, 1319], "yet": [30, 93, 119, 126, 139, 145, 509, 915, 921, 1004, 1127, 1139, 1145, 1319, 1322], "get_interclass_network_df": [30, 139], "interclass": [30, 139], "otherwis": [30, 122, 132, 133, 135, 139, 145, 380, 477, 479, 606, 639, 862, 912, 915, 996, 999, 1002, 1011, 1014, 1025, 1027, 1028, 1046, 1064, 1069, 1070, 1071, 1073, 1074, 1145, 1319], "network_df": [30, 139, 921], "get_par": [30, 139], "As": [30, 139, 324, 330, 915, 1095, 1096, 1176, 1319, 1322], "uniqu": [30, 126, 135, 139, 145, 147, 884, 912, 913, 914, 915, 932, 986, 989, 993, 1001, 1034, 1035, 1053, 1054, 1063, 1064, 1075, 1078, 1079, 1081, 1084, 1167, 1319, 1322], "determin": [30, 135, 139, 912, 915, 921, 1047, 1078, 1145], "get_resourc": [30, 135, 139, 145], "For": [30, 36, 127, 128, 135, 139, 145, 171, 178, 180, 256, 289, 324, 325, 326, 328, 330, 331, 607, 712, 817, 818, 829, 830, 835, 865, 879, 891, 899, 915, 928, 958, 985, 994, 1000, 1003, 1007, 1009, 1031, 1034, 1035, 1050, 1053, 1054, 1062, 1079, 1123, 1124, 1125, 1131, 1133, 1135, 1137, 1138, 1141, 1145, 1151, 1152, 1154, 1160, 1164, 1167, 1176, 1201, 1204, 1205, 1211, 1213, 1318, 1319, 1322], "belong": [30, 135, 139, 145, 881, 915, 1031, 1035, 1050, 1053, 1079, 1113, 1125, 1139, 1319], "composit": [30, 139, 865, 958, 1319, 1322], "first": [30, 123, 127, 135, 136, 137, 139, 145, 147, 168, 214, 226, 281, 322, 333, 409, 410, 411, 418, 456, 485, 495, 549, 604, 617, 620, 621, 639, 648, 649, 651, 689, 691, 725, 820, 821, 862, 863, 864, 878, 903, 905, 912, 913, 914, 915, 977, 995, 999, 1001, 1004, 1011, 1042, 1049, 1078, 1083, 1131, 1132, 1133, 1135, 1137, 1138, 1144, 1145, 1147, 1155, 1157, 1159, 1161, 1164, 1167, 1196, 1215, 1257, 1318, 1319, 1321], "alphabet": [30, 135, 139, 912, 915, 1176, 1319], "order": [30, 126, 135, 139, 145, 912, 915, 932, 989, 1075, 1076, 1077, 1078, 1081, 1083, 1167, 1176, 1191, 1192, 1298, 1305, 1308, 1310, 1319, 1322], "given": [30, 135, 139, 145, 312, 454, 469, 650, 686, 885, 912, 915, 993, 1001, 1004, 1018, 1029, 1047, 1057, 1078, 1123, 1145, 1156, 1164, 1181, 1186, 1191, 1192, 1281, 1285, 1286, 1287, 1288, 1289, 1290, 1293, 1295, 1296, 1313, 1319], "full_nam": [30, 891, 1319], "populate_class": [30, 139], "updat": [30, 96, 122, 132, 135, 139, 145, 310, 379, 384, 912, 915, 958, 1109, 1117, 1305, 1308, 1310, 1319, 1321, 1322], "classif": [30, 38, 139, 456], "populate_scor": [30, 139], "consensu": [30, 135, 139, 912, 1143, 1319], "process_annot": [30, 139], "quality_check_t": [30, 139], "path": [30, 139, 145, 199, 281, 337, 754, 808, 915, 921, 927, 950, 958, 985, 986, 987, 1004, 1025, 1074, 1106, 1107, 1144, 1167, 1318, 1319], "fmt": [30, 139], "tsv": [30, 139, 939, 941, 973, 1074], "only_swissprot": [30, 139, 416, 915, 1131, 1133, 1135, 1137, 1138, 1141], "top": [30, 139, 411, 797, 909, 1305, 1308, 1310, 1319], "export": [30, 139, 687, 915, 921, 950, 1144, 1229, 1251, 1317, 1318, 1321], "format": [30, 128, 139, 145, 158, 169, 184, 211, 293, 678, 681, 714, 745, 746, 748, 849, 915, 942, 963, 992, 995, 1106, 1109, 1145, 1201, 1229, 1251, 1278, 1313, 1321, 1322], "qualiti": [30, 139, 915, 1322], "check": [30, 135, 139, 181, 443, 849, 891, 892, 893, 894, 895, 912, 915, 921, 1011, 1022, 1059, 1145, 1181, 1229, 1251, 1318, 1319, 1322], "purpos": [30, 139, 409, 891, 915, 938, 958, 1319], "row": [30, 127, 139, 171, 172, 293, 411, 884, 915, 921, 932, 1131, 1133, 1135, 1142, 1319, 1322], "file": [30, 139, 145, 150, 157, 182, 183, 187, 191, 199, 234, 254, 255, 256, 257, 281, 289, 290, 325, 326, 331, 333, 337, 380, 412, 414, 419, 532, 541, 646, 650, 678, 680, 681, 682, 687, 710, 744, 745, 748, 754, 758, 808, 852, 915, 921, 927, 932, 944, 958, 976, 985, 1025, 1074, 1078, 1089, 1090, 1092, 1093, 1106, 1107, 1116, 1117, 1144, 1145, 1148, 1164, 1167, 1176, 1195, 1299, 1300, 1301, 1303, 1304, 1305, 1307, 1308, 1310, 1317, 1318, 1321], "latex": [30, 139, 915, 1025, 1229, 1251, 1303], "register_network": [30, 139, 1319], "dataset": [30, 139, 169, 170, 171, 172, 181, 194, 202, 203, 211, 234, 262, 412, 446, 447, 684, 685, 763, 852, 915, 921, 936, 958, 964, 971, 1317, 1318], "afterward": [30, 139], "discard": [30, 139, 145, 812, 915, 1145], "futur": [30, 139, 690, 691, 881, 915, 1319, 1322], "address": [30, 139, 333, 334, 335, 336, 337, 338, 1164, 1319], "regist": [30, 139, 333, 334, 335, 336, 337, 338, 450, 915, 986, 1164], "resources_in_categori": [30, 139], "contribut": [30, 139, 1318], "set_interclass_network_df": [30, 139], "whole": [30, 139, 915, 958, 1319], "inter": [30, 139, 921, 1317, 1318], "keep": [30, 122, 128, 139, 174, 175, 472, 606, 650, 707, 714, 915, 1011, 1078, 1145, 1146, 1164, 1215, 1246, 1318, 1319], "subsequ": [30, 127, 139, 1004, 1318, 1319], "faster": [30, 139, 915, 1144, 1318, 1319], "update_par": [30, 139], "cytokin": [31, 91, 292, 293], "perturb": [31, 91, 292], "signatur": [31, 51, 72, 91, 292, 293, 696, 697], "druggabl": [32, 305, 307, 915], "go_annot": [36, 37, 1124], "gocustomannot": 36, "go": [36, 476, 479, 915, 999, 1099, 1318, 1319, 1321], "intercell_annot": [36, 139, 865, 1319], "intercell_categori": 36, "get_annot": [36, 1123, 1124], "correspond": [36, 135, 145, 178, 335, 712, 793, 795, 892, 893, 894, 895, 912, 915, 932, 935, 1117, 1120, 1124, 1141, 1145, 1151, 1160, 1189, 1319], "ontologi": [36, 37, 384, 424, 425, 426, 427, 693, 874, 915, 1123, 1124, 1125, 1126, 1129, 1148, 1317, 1318, 1321], "term": [36, 371, 373, 374, 375, 379, 380, 381, 383, 384, 385, 387, 388, 389, 390, 425, 426, 427, 443, 450, 476, 479, 607, 915, 1123, 1124, 1125, 1319], "express": [36, 86, 88, 169, 170, 171, 172, 292, 324, 325, 326, 328, 330, 331, 654, 659, 774, 865, 915, 1123, 1124, 1164, 1318, 1319, 1322], "process_categori": [36, 1124], "translat": [36, 127, 135, 337, 342, 353, 354, 356, 409, 415, 416, 515, 516, 517, 533, 683, 686, 687, 710, 714, 752, 817, 870, 875, 877, 879, 880, 912, 915, 1124, 1131, 1133, 1135, 1137, 1138, 1142, 1144, 1145, 1146, 1149, 1155, 1156, 1157, 1192, 1213, 1305, 1317, 1321, 1322], "ac": [36, 262, 649, 651, 796, 797, 816, 1124, 1145, 1155, 1213, 1224, 1318, 1319], "role": [37, 139, 143, 215, 216, 218, 221, 233, 549, 865, 921, 1317, 1318], "intercellular": [37, 139, 143, 865, 1317, 1321], "commun": [37, 139, 143, 865, 915, 921, 958, 1317, 1318, 1321], "gpcr": 38, "load_sourc": [39, 57, 73], "ligandreceptor": [39, 57, 73], "hpmr": [43, 962, 1319], "famili": [47, 85, 419, 456, 498, 499, 500, 763, 915, 1176, 1319], "pathwai": [54, 55, 67, 72, 78, 79, 145, 202, 203, 275, 290, 409, 495, 497, 507, 511, 514, 518, 519, 520, 598, 696, 697, 746, 765, 915, 958, 962, 969, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1103, 1104, 1318, 1319, 1322], "kegg": [54, 55, 202, 203, 324, 330, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 915, 971, 1319], "via": [55, 132, 133, 135, 145, 902, 903, 904, 905], "pathwaycommon": [55, 958, 1319, 1321], "kinas": [56, 430, 522, 534, 666, 915, 1319, 1322], "com": [56, 522, 582, 584, 1041, 1076, 1077, 1089, 1164, 1318, 1319], "panglaodb": [58, 1319], "ligand_col": 59, "receptor_col": 59, "ligand_id_typ": 59, "receptor_id_typ": 59, "record_processor_method": 59, "record_extra_field": 59, "record_default": 59, "extra_fields_method": 59, "literatur": [60, 131, 132, 135, 145, 324, 325, 326, 328, 330, 331, 446, 447, 448, 547, 572, 582, 584, 595, 597, 598, 611, 680, 915, 932, 935, 958, 962, 968, 969, 1317, 1322], "extern": [60, 333, 479, 547, 1319], "predict": [60, 259, 322, 324, 325, 326, 328, 330, 331, 462, 547, 779, 811, 812, 915], "cam": 64, "10": [64, 147, 262, 312, 322, 353, 354, 355, 356, 411, 474, 498, 499, 500, 524, 706, 851, 857, 859, 862, 913, 914, 915, 1041, 1131, 1145, 1164, 1181, 1277, 1298, 1302, 1306, 1308, 1314, 1317, 1319, 1322], "4137": 64, "cin": 64, "s341": 64, "netpath": [67, 915, 965, 1319], "phosphatas": [71, 664, 1319], "chen": [71, 664], "et": [71, 83, 353, 354, 355, 356, 474, 524, 664, 706, 851, 857, 865, 1164, 1319], "al": [71, 83, 353, 354, 355, 356, 474, 524, 664, 706, 851, 857, 865, 1164, 1319], "scienc": [71, 664, 1318], "signal": [71, 139, 189, 664, 865, 915, 1317, 1322], "2017": [71, 447, 664], "s1": [71, 664, 1319], "respons": [72, 607, 655, 696, 697, 1318, 1319], "transcriptom": [72, 696, 697], "saezlab": [72, 324, 325, 326, 328, 330, 331, 696, 697, 915, 1318], "signalink": [77, 78, 915, 1319, 1322], "signor": [79, 915, 962, 971, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1103, 1104, 1319, 1322], "topolog": [82, 89], "domain": [82, 89, 127, 318, 462, 469, 539, 540, 541, 649, 781, 795, 796, 813, 852, 880, 884, 915, 1135, 1191, 1192, 1319, 1322], "transmembran": [82, 89, 226, 915, 1319, 1322], "segment": [82, 89, 1164, 1319], "transcript": [83, 135, 145, 155, 171, 172, 178, 180, 181, 500, 791, 868, 915, 958, 966, 971, 1145, 1155, 1157, 1318, 1322], "factor": [83, 145, 791, 915, 1319, 1322], "tf": [83, 155, 202, 203, 322, 323, 324, 325, 326, 328, 330, 331, 611, 612, 791, 806, 915, 921, 936, 1319, 1321, 1322], "censu": [83, 272, 791, 915], "vaqueriza": [83, 791], "2009": [83, 791, 1319], "tissu": [86, 88, 171, 172, 915, 1164, 1319, 1322], "subcellular": [87, 720, 915], "local": [87, 157, 215, 216, 218, 221, 532, 541, 758, 852, 942, 944, 974, 976, 1018, 1106, 1144, 1318, 1319, 1321, 1322], "exocarta": [90, 915], "cytosig": [91, 1319], "dedic": [96, 1319], "json": [96, 122, 132, 133, 135, 254, 255, 344, 655, 927, 958, 1164, 1319], "full": [96, 122, 126, 132, 135, 178, 262, 333, 410, 606, 607, 763, 817, 851, 921, 1106, 1164, 1288, 1289, 1317, 1318, 1321], "whitespac": [96, 122, 132, 135], "line": [96, 122, 132, 135, 171, 172, 256, 324, 325, 326, 328, 330, 331, 915, 932, 995, 1285, 1286, 1287, 1288, 1289, 1290, 1319], "break": [96, 122, 132, 135, 462, 1298], "update_attr": [96, 122, 132, 135, 915], "store": [96, 122, 132, 135, 881, 885, 912, 915, 958, 977, 1107, 1136, 1140, 1160, 1164, 1167, 1189, 1213, 1318, 1319, 1321], "ident": [96, 122, 132, 135, 380, 852, 958, 1319], "share": [96, 122, 132, 135, 145, 147, 312, 865, 891, 913, 914, 958, 1319, 1321], "common": [96, 122, 132, 135, 184, 915, 1201, 1221, 1317], "combine_attr": [96, 122, 132, 135, 915], "new": [96, 122, 128, 132, 135, 145, 252, 726, 912, 915, 921, 958, 971, 1004, 1107, 1114, 1115, 1145, 1153, 1176, 1319, 1321, 1322], "three": [96, 122, 132, 135, 641, 915, 921, 1281], "wai": [96, 122, 132, 133, 135, 145, 281, 384, 386, 411, 649, 650, 651, 726, 817, 867, 874, 878, 915, 921, 932, 993, 1017, 1117, 1120, 1144, 1167, 1176, 1319], "keyword": [96, 122, 132, 135, 915, 991, 1011, 1018, 1215, 1246, 1281, 1319], "work": [97, 310, 344, 409, 686, 723, 915, 945, 958, 961, 993, 1000, 1145, 1155, 1319, 1322], "import": [97, 145, 379, 380, 384, 411, 763, 915, 921, 971, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1103, 1104, 1239, 1318, 1319], "main": [97, 126, 132, 135, 145, 183, 945, 993, 1117, 1276, 1299, 1304, 1305, 1307, 1308, 1310, 1318, 1319, 1322], "data_model": [98, 135, 145, 872, 904, 905, 958], "interaction_typ": [98, 132, 133, 135, 145, 620, 872, 904, 905, 958, 1319], "source_ent": 98, "target_ent": 98, "remove_loop": [98, 145], "intera": [100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 127, 217, 224, 533, 539, 640, 691, 794, 915, 1135, 1319], "abstractcomplexresourc": [101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117], "mani": [118, 426, 498, 499, 500, 915, 958, 1089, 1145, 1155, 1157, 1318, 1319, 1321, 1322], "just": [118, 145, 867, 874, 878, 915, 981, 1171, 1174, 1179, 1317], "like": [118, 135, 145, 254, 256, 410, 653, 654, 656, 657, 658, 659, 660, 865, 879, 915, 981, 1169, 1171, 1174, 1179, 1318, 1319], "all_uniprot": [118, 368, 1123, 1319], "taxon": [121, 122, 123, 135, 145, 360, 683, 846, 915, 1131, 1133, 1145, 1201, 1319], "id_typ": [122, 123, 127, 135, 337, 342, 415, 461, 462, 876, 879, 882, 885, 886, 887, 889, 915, 1131, 1133, 1135, 1137, 1138, 1141, 1144, 1145, 1146, 1147, 1154, 1155, 1156, 1157, 1171, 1174, 1179, 1181, 1182, 1184, 1186, 1187, 1213, 1319], "attributehandl": [122, 132, 135, 1170, 1171, 1172, 1177, 1178], "lncrna": [122, 145, 915, 921, 1145], "non": [122, 128, 145, 289, 595, 915, 934, 958, 991, 1125, 1145, 1155, 1157, 1319], "metabolit": [122, 145, 408, 410, 412, 1319, 1321], "compound": [122, 145, 496, 537, 722, 723, 915, 1143, 1213, 1319, 1321], "nonetyp": [122, 132, 135, 145, 707, 958, 1117], "addit": [122, 127, 145, 310, 327, 329, 462, 606, 607, 915, 932, 958, 1089, 1123, 1135, 1144, 1299, 1304, 1307, 1319, 1322], "classmethod": [122, 145, 865, 892, 893, 894, 895, 927, 932, 1089, 1106, 1145], "count_entity_typ": 122, "filter_entity_typ": [122, 865], "ones": [122, 135, 145, 606, 607, 639, 915, 999, 1125, 1160, 1189, 1319], "occurr": [123, 136, 137, 147, 168, 214, 226, 264, 322, 418, 456, 485, 495, 549, 617, 620, 621, 689, 820, 821, 862, 863, 864, 903, 905, 913, 914, 915, 1132, 1147, 1159, 1161], "alia": [123, 136, 137, 147, 168, 214, 226, 322, 418, 456, 485, 495, 549, 617, 620, 621, 689, 820, 821, 862, 863, 864, 903, 905, 913, 914, 1132, 1147, 1159, 1161, 1280, 1282, 1283], "2": [123, 136, 145, 147, 168, 214, 226, 256, 322, 371, 418, 456, 485, 498, 549, 556, 617, 620, 621, 645, 689, 719, 768, 769, 820, 821, 862, 863, 903, 905, 913, 914, 915, 932, 989, 990, 991, 993, 999, 1001, 1002, 1013, 1063, 1075, 1078, 1081, 1132, 1147, 1159, 1161, 1164, 1281, 1293, 1296, 1298, 1302, 1317], "index": [123, 136, 137, 147, 168, 214, 226, 233, 235, 293, 312, 322, 418, 456, 485, 495, 549, 586, 614, 615, 617, 620, 621, 689, 820, 821, 862, 863, 864, 903, 905, 913, 914, 915, 1011, 1017, 1023, 1057, 1060, 1084, 1132, 1147, 1159, 1161, 1319], "stop": [123, 136, 137, 147, 168, 214, 226, 322, 418, 456, 485, 495, 549, 617, 620, 621, 689, 820, 821, 862, 863, 864, 903, 905, 913, 914, 1092, 1096, 1132, 1147, 1159, 1161, 1319], "9223372036854775807": [123, 136, 137, 147, 168, 214, 226, 322, 418, 456, 485, 495, 549, 617, 620, 621, 689, 820, 821, 862, 863, 864, 903, 905, 913, 914, 1132, 1147, 1159, 1161], "rais": [123, 136, 137, 147, 168, 214, 226, 281, 322, 418, 456, 485, 495, 549, 617, 620, 621, 689, 820, 821, 862, 863, 864, 903, 905, 913, 914, 1064, 1132, 1147, 1159, 1161], "valueerror": [123, 136, 137, 147, 168, 214, 226, 322, 418, 456, 485, 495, 549, 617, 620, 621, 689, 820, 821, 862, 863, 864, 903, 905, 913, 914, 1132, 1147, 1159, 1161], "3": [123, 136, 145, 147, 214, 226, 256, 320, 322, 394, 418, 456, 485, 498, 549, 617, 620, 689, 820, 821, 862, 905, 913, 914, 915, 943, 975, 990, 1001, 1011, 1063, 1132, 1159, 1161, 1276, 1298, 1302, 1317, 1318, 1319], "input_param": [126, 127, 128], "map_by_homology_from": [126, 127, 915], "trace": [126, 127, 128, 915, 1167], "homology_only_swissprot": [126, 127, 915], "ptm_homology_strict": [126, 127, 915], "nonhuman_direct_lookup": [126, 128, 915], "inputarg": [126, 127, 128, 915], "doc": [126, 135, 145, 1229, 1251, 1317, 1321], "written": [126, 915, 1106, 1107, 1164, 1319], "assign_to_network": 126, "pa": [126, 145, 915, 932, 971, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1103, 1104, 1319], "enzym": [126, 127, 128, 132, 133, 295, 296, 485, 884, 915, 921, 935, 958, 1317, 1318, 1321], "substrat": [126, 127, 128, 295, 296, 430, 485, 534, 666, 884, 915, 921, 935, 958, 1317, 1318, 1321], "edg": [126, 135, 145, 529, 530, 912, 915, 932, 1281, 1309, 1317], "legaci": [126, 145, 835, 1317], "build_list": 126, "request": [126, 135, 181, 344, 353, 354, 356, 462, 606, 912, 915, 1089, 1090, 1119, 1144, 1229, 1239, 1251, 1319, 1322], "redund": [126, 135, 915, 1125, 1319], "organis": 126, "effici": [126, 1167, 1319], "thei": [126, 131, 135, 139, 477, 763, 864, 912, 915, 921, 932, 934, 1010, 1011, 1145, 1176, 1318, 1319, 1321], "agre": [126, 1319], "except": [126, 127, 135, 145, 912, 915, 1083, 1131, 1133, 1135, 1142, 1322], "isoform": [126, 127, 683, 882, 884, 886, 887, 889, 915, 1135, 1136, 1193, 1194, 1196, 1215, 1248, 1272, 1273, 1319, 1322], "id_type_enzym": [127, 128, 902, 1319], "id_type_substr": [127, 128, 902], "ptmhomologi": 127, "enzymesubstrateprocessor": 127, "unifi": [127, 915, 994], "homologi": [127, 177, 202, 203, 915, 1317, 1322], "enzymesubstratehomologi": 127, "differ": [127, 135, 411, 864, 879, 881, 915, 926, 958, 981, 989, 990, 1143, 1144, 1145, 1155, 1167, 1318, 1319, 1321, 1322], "chosen": 127, "mous": [127, 172, 201, 202, 203, 204, 210, 211, 212, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 233, 234, 235, 327, 329, 392, 686, 696, 697, 750, 751, 763, 915, 1317, 1318, 1319], "rat": [127, 172, 686, 763, 915, 1317], "To": [127, 690, 691, 794, 879, 915, 1164, 1319, 1322], "get": [127, 187, 379, 381, 384, 454, 879, 915, 923, 1089, 1117, 1125, 1164, 1167, 1317, 1319, 1322], "themselv": 127, "both": [127, 135, 145, 215, 379, 380, 381, 650, 775, 831, 835, 852, 912, 915, 923, 1010, 1030, 1089, 1144, 1318, 1319, 1322], "whatmor": 127, "enzymesubstrateaggreg": [127, 915, 1319], "swissprot": [127, 382, 416, 650, 824, 826, 828, 829, 830, 831, 835, 846, 878, 879, 915, 1133, 1135, 1141, 1144, 1145, 1148, 1155, 1318, 1319], "trembl": [127, 829, 830, 831, 835, 879, 915, 1144, 1145, 1148, 1155, 1318, 1319], "those": [127, 289, 714, 912, 915, 1004, 1011, 1123, 1133, 1135, 1145, 1176, 1254, 1319], "homolog": [127, 915, 1131, 1133, 1135, 1141, 1322], "ptm": [127, 128, 132, 133, 318, 430, 683, 685, 762, 884, 888, 915, 958, 964, 965, 1135, 1319, 1321, 1322], "phosphosit": [127, 128, 706, 915, 1135, 1319, 1321, 1322], "do": [127, 145, 312, 595, 725, 813, 915, 958, 1004, 1019, 1098, 1101, 1103, 1145, 1305, 1317, 1322], "residu": [127, 283, 454, 469, 683, 686, 691, 800, 880, 884, 885, 887, 915, 1135, 1160, 1162, 1193, 1215, 1247, 1257, 1319], "offset": [127, 344, 454, 469, 470, 639, 915, 1106, 1135, 1159, 1160, 1193, 1319], "sequenc": [127, 128, 145, 454, 469, 639, 686, 691, 885, 915, 989, 1075, 1078, 1081, 1136, 1160, 1191, 1192, 1193, 1194, 1195, 1196, 1215, 1247, 1317], "see": [127, 135, 145, 171, 178, 202, 262, 324, 325, 326, 328, 330, 331, 409, 410, 707, 811, 816, 817, 818, 835, 865, 915, 1001, 1011, 1063, 1078, 1099, 1106, 1123, 1131, 1133, 1135, 1137, 1138, 1144, 1145, 1155, 1156, 1157, 1213, 1278, 1281, 1293, 1295, 1296, 1318, 1319, 1322], "further": [127, 151, 281, 469, 498, 812, 862, 915, 921, 932, 1160, 1164, 1167, 1189, 1317, 1319, 1322], "asdict": [127, 1133, 1135], "homologen": [127, 1131, 1133, 1135, 1137, 1138, 1141, 1142, 1318, 1319, 1321, 1322], "ensembl": [127, 177, 178, 180, 181, 1131, 1133, 1135, 1137, 1138, 1141, 1142, 1145, 1148, 1155, 1157, 1318, 1319], "ensembl_hc": [127, 1131, 1132, 1133, 1135, 1137, 1138, 1141, 1142, 1319], "ensembl_typ": [127, 1131, 1132, 1133, 1135, 1137, 1138, 1141, 1142, 1319], "liter": [127, 135, 145, 239, 412, 479, 604, 722, 723, 772, 775, 776, 852, 915, 921, 958, 1131, 1133, 1135, 1142, 1144, 1145], "one2on": [127, 1131, 1133, 1135, 1137, 1138, 1141, 1142, 1319], "one2mani": [127, 1131, 1133, 1135, 1137, 1138, 1141, 1142], "many2mani": [127, 1131, 1133, 1135, 1137, 1138, 1141, 1142], "ortholog": [127, 604, 658, 659, 686, 915, 1131, 1133, 1135, 1137, 1138, 1141, 1142, 1318, 1319], "lookup": [127, 128, 606, 607, 915, 1131, 1133, 1135, 1137, 1138, 1139, 1141, 1142], "high": [127, 145, 203, 446, 447, 865, 899, 915, 1131, 1133, 1135, 1137, 1138, 1141, 1142, 1319], "confid": [127, 135, 145, 203, 324, 325, 326, 328, 330, 331, 446, 447, 769, 772, 775, 776, 915, 971, 981, 1131, 1133, 1135, 1137, 1138, 1141, 1142, 1319, 1322], "orthologi": [127, 415, 416, 683, 686, 915, 1131, 1133, 1135, 1137, 1138, 1141, 1142, 1321], "relat": [127, 177, 239, 289, 338, 360, 380, 383, 385, 479, 505, 506, 507, 508, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 604, 915, 1125, 1131, 1133, 1135, 1137, 1138, 1141, 1142, 1167, 1319, 1322], "By": [127, 135, 145, 203, 410, 498, 499, 500, 808, 915, 932, 958, 1098, 1103, 1123, 1125, 1131, 1133, 1135, 1137, 1138, 1141, 1142, 1164, 1319, 1322], "relationship": [127, 131, 132, 133, 275, 341, 384, 386, 425, 604, 618, 884, 915, 1131, 1133, 1135, 1137, 1138, 1141, 1142, 1317, 1318], "second": [127, 135, 145, 333, 462, 604, 639, 648, 649, 651, 691, 725, 797, 912, 915, 1001, 1011, 1106, 1131, 1133, 1135, 1137, 1138, 1144, 1145, 1146, 1167, 1319], "assum": [127, 256, 281, 881, 912, 915, 997, 1064, 1131, 1133, 1135, 1137, 1138, 1142], "complet": [127, 323, 659, 1131, 1133, 1135, 1137, 1138, 1144, 1205, 1318, 1319, 1321], "map": [127, 128, 133, 178, 180, 426, 427, 454, 483, 574, 639, 641, 648, 649, 650, 651, 691, 725, 793, 795, 796, 827, 867, 874, 878, 879, 915, 1065, 1131, 1133, 1135, 1137, 1138, 1160, 1189, 1285, 1286, 1287, 1288, 1289, 1290, 1293, 1295, 1296, 1318, 1319, 1321], "get_mapp": [127, 1131, 1133, 1135, 1137, 1138, 1319], "mapping_t": [127, 1131, 1133, 1135, 1137, 1138, 1145, 1319], "two": [127, 132, 135, 145, 281, 318, 333, 409, 419, 604, 639, 641, 725, 852, 865, 912, 915, 932, 996, 1001, 1023, 1047, 1057, 1060, 1131, 1133, 1135, 1137, 1145, 1157, 1281, 1285, 1286, 1287, 1288, 1289, 1290, 1318, 1319], "column": [127, 145, 171, 172, 191, 256, 293, 411, 707, 779, 915, 932, 1025, 1068, 1074, 1131, 1133, 1135, 1137, 1142, 1299, 1304, 1307, 1318, 1319, 1322], "load_homologen": [127, 1133, 1135], "obtain": [127, 128, 135, 415, 416, 454, 765, 795, 796, 811, 879, 899, 912, 915, 1133, 1135, 1319], "refseq": [127, 415, 416, 645, 1133, 1135, 1145, 1155, 1157], "entrez": [127, 135, 312, 415, 416, 1133, 1135, 1144, 1145, 1155, 1157, 1319], "ptm_orthologi": [127, 1135], "phosphoryl": [127, 677, 683, 684, 1135, 1319], "site": [127, 283, 677, 683, 684, 685, 686, 687, 852, 915, 1135, 1192, 1319, 1321], "phosphositeplu": [127, 677, 683, 684, 685, 686, 915, 1135], "follow": [127, 135, 289, 290, 320, 683, 912, 915, 1029, 1041, 1089, 1135, 1318, 1319], "6": [127, 136, 147, 214, 226, 322, 456, 472, 485, 498, 683, 689, 821, 852, 862, 913, 914, 1135, 1302, 1310, 1317, 1319], "letter": [127, 135, 379, 380, 381, 387, 388, 389, 390, 683, 915, 1083, 1135, 1167, 1215, 1257, 1319], "code": [127, 178, 379, 380, 381, 387, 388, 389, 390, 411, 683, 818, 915, 921, 934, 1106, 1135, 1145, 1155, 1157, 1293, 1295, 1296, 1319, 1321], "modif": [127, 184, 683, 880, 884, 1135, 1176, 1192, 1319], "set_inputarg": [127, 128], "x": [127, 145, 915, 1078, 1135, 1285, 1286, 1287, 1288, 1289, 1290, 1293, 1295, 1296, 1298, 1299, 1305, 1308, 1310], "return_str": [127, 1135], "anyth": [127, 915, 986, 1038, 1059, 1092, 1095, 1125, 1135, 1145, 1281, 1293, 1296, 1319], "amino": [127, 639, 797, 1135, 1319], "acid": [127, 639, 797, 1135, 1167, 1319], "offest": [127, 1135], "p00533_s231": [127, 1135], "domainmotif": [127, 533, 539, 915, 1135, 1319], "typ": [127, 885, 887, 915, 1135, 1319], "translate_df": [127, 1131, 1133, 1135], "col": [127, 256, 1131, 1133, 1135, 1142, 1276, 1305, 1319], "It": [127, 133, 135, 145, 881, 915, 921, 935, 958, 985, 997, 1089, 1090, 1116, 1117, 1131, 1133, 1135, 1142, 1144, 1145, 1146, 1155, 1156, 1278, 1318, 1319, 1322], "last": [127, 145, 905, 1004, 1041, 1061, 1131, 1133, 1135, 1142, 1145, 1155, 1167, 1319], "bewar": [127, 1131, 1133, 1135, 1142], "layout": [127, 915, 1131, 1133, 1135, 1142, 1277, 1281, 1293, 1295, 1296, 1299, 1300, 1301, 1304, 1305, 1307, 1308, 1310], "could": [127, 691, 915, 1131, 1133, 1135, 1142, 1145, 1157, 1319], "omit": [127, 145, 915, 1131, 1133, 1135, 1142, 1167], "translate_sit": [127, 1135], "re": [127, 145, 799, 915, 1045, 1135], "source_taxon": [127, 1135], "allow_mixed_organ": 128, "organisms_support": [128, 902], "sequencecontain": [128, 1135, 1319], "than": [128, 145, 174, 175, 409, 915, 932, 993, 1041, 1144, 1145, 1146, 1318, 1319, 1322], "ambigu": [128, 135, 915, 1145, 1156, 1319], "mismatch": 128, "mapper": [128, 915, 1149, 1153, 1157, 1319], "speci": [128, 415, 416, 686, 811, 812, 915, 1319, 1321], "forward": [128, 915, 932], "support": [131, 132, 133, 135, 145, 201, 204, 233, 234, 235, 327, 329, 379, 384, 392, 469, 696, 697, 881, 912, 915, 1318, 1319, 1321], "hold": [131, 645, 915, 1164], "avail": [131, 170, 171, 172, 178, 179, 182, 184, 194, 210, 211, 212, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 281, 312, 323, 324, 330, 337, 342, 606, 607, 646, 678, 680, 681, 682, 723, 750, 751, 763, 835, 852, 862, 879, 912, 915, 921, 993, 1106, 1117, 1145, 1155, 1157, 1164, 1213, 1318, 1319, 1322], "annot": [132, 133, 135, 139, 169, 193, 197, 201, 215, 216, 221, 231, 233, 267, 272, 292, 305, 334, 335, 353, 371, 376, 378, 379, 380, 381, 384, 424, 476, 477, 481, 522, 720, 750, 765, 791, 862, 864, 865, 881, 915, 921, 1123, 1124, 1128, 1129, 1164, 1317, 1318, 1321], "etc": [132, 133, 145, 409, 915, 986, 1318, 1319, 1321, 1322], "part": [132, 194, 203, 239, 324, 330, 461, 776, 915, 958, 967, 1042, 1061, 1116, 1145, 1298, 1319, 1321, 1322], "resourceattribut": [132, 902, 904], "deriv": [132, 958, 1285, 1295, 1319, 1322], "prefer": [132, 135, 379, 380, 381, 384, 710, 915, 923, 1145, 1154, 1155, 1318, 1319], "has_interaction_typ": [132, 133], "depend": [132, 135, 180, 410, 912, 915, 921, 1034, 1053, 1054, 1319, 1321], "comprehens": [133, 145, 324, 325, 326, 328, 330, 331, 915, 994, 1164, 1318, 1319, 1321, 1322], "certain": [133, 135, 145, 604, 915, 1089, 1090, 1117, 1164, 1317], "ha": [133, 135, 145, 202, 203, 310, 379, 384, 537, 639, 881, 912, 915, 921, 958, 971, 1047, 1089, 1125, 1144, 1145, 1146, 1149, 1164, 1167, 1318, 1319, 1321, 1322], "item": [133, 145, 344, 915, 985, 986, 1011, 1063, 1109, 1319], "dict_item": 133, "networkresourcekei": 133, "dict_kei": [133, 1319], "serialize_attr": 133, "top_key_prefix": 133, "properti": [133, 145, 333, 881, 905, 915, 1144, 1146, 1215, 1224, 1285, 1286, 1287, 1288, 1289, 1290, 1293, 1295, 1296, 1305, 1319], "simple_dict": 133, "we": [134, 135, 454, 772, 775, 912, 915, 932, 1133, 1135, 1145, 1176, 1281, 1293, 1296, 1318, 1319, 1320, 1322], "rich": [134, 1318, 1319], "api": [134, 312, 373, 375, 380, 383, 385, 387, 389, 723, 835, 879, 915, 1164, 1318, 1321, 1322], "larg": [134, 139, 289, 449, 450, 498, 499, 500, 747, 915, 965, 1089, 1090, 1164, 1167, 1318, 1319, 1321, 1322], "reli": [134, 915, 1319], "b": [135, 145, 324, 325, 326, 328, 330, 331, 779, 912, 915, 932, 942, 971, 997, 1001, 1004, 1013, 1023, 1057, 1058, 1060, 1063, 1065, 1075, 1078, 1081, 1106, 1144, 1176, 1319], "id_type_a": [135, 409, 725, 817, 867, 868, 869, 870, 871, 872, 873, 874, 875, 877, 878, 879, 1319], "id_type_b": [135, 409, 725, 817, 867, 868, 869, 870, 871, 872, 873, 874, 875, 877, 878, 879, 1319], "entity_type_a": [135, 872], "entity_type_b": [135, 872], "taxon_a": [135, 320, 872], "taxon_b": [135, 320, 872], "regul": [135, 145, 155, 781, 912, 915, 963, 1322], "post": [135, 145, 880, 1089, 1192], "evid": [135, 145, 312, 324, 325, 326, 328, 330, 331, 617, 645, 707, 772, 775, 884, 886, 887, 915, 1319, 1321], "detail": [135, 145, 323, 327, 329, 333, 344, 478, 645, 772, 816, 835, 852, 865, 880, 915, 1011, 1145, 1155, 1156, 1318, 1319], "henc": [135, 421, 921, 1144, 1319, 1321, 1322], "becom": 135, "add_evid": 135, "direction": [135, 145, 912, 915, 932], "self": [135, 912, 915, 1018, 1059, 1164, 1317], "dir": [135, 912, 915, 1319], "networkresourc": [135, 145, 958, 981, 1319], "separ": [135, 256, 411, 498, 869, 872, 876, 905, 915, 932, 981, 1042, 1046, 1061, 1074, 1145, 1157, 1176, 1319, 1321], "Or": [135, 145, 912, 1004, 1023, 1029, 1047, 1057, 1060, 1078, 1319, 1322], "causal": [135, 1317, 1322], "stimul": [135, 774, 915, 1319], "stimulatori": [135, 915, 1319], "inhibit": [135, 774, 912, 915, 1319], "inhibitori": [135, 912, 915, 1319], "unknown": [135, 310, 872, 876, 887, 915, 932, 1319], "neutral": 135, "been": [135, 145, 310, 379, 381, 384, 881, 915, 958, 1093, 1144, 1145, 1146, 1167, 1318, 1319, 1321, 1322], "add_sign": 135, "sign": [135, 139, 145, 872, 912, 915, 932, 969], "resource_nam": [135, 145, 862], "ppi": [135, 211, 461, 462, 904, 915, 921, 1318, 1319], "posit": [135, 145, 649, 912, 915, 1109, 1160, 1285, 1286, 1287, 1288, 1289, 1290, 1319], "positive_sourc": [135, 912], "neg": [135, 145, 320, 595, 912, 915, 958, 1038, 1319], "negative_sourc": [135, 912], "accordingli": [135, 912, 1305], "node": [135, 145, 191, 912, 915, 932, 1123, 1125, 1126, 1129, 1281], "specifi": [135, 145, 812, 912, 915, 1004, 1016, 1018, 1047, 1286, 1293, 1295, 1296], "wa": [135, 541, 852, 912, 915, 981, 997, 1318, 1319], "complex_identifiers_by_data_model": [135, 145], "involv": [135, 283], "mai": [135, 145, 915, 1106, 1167, 1319], "sound": 135, "so": [135, 145, 454, 498, 499, 500, 813, 915, 932, 999, 1002, 1092, 1098, 1100, 1103, 1145, 1167, 1178, 1299, 1300, 1301, 1304, 1307, 1308, 1310, 1318, 1319], "small_molecul": [135, 145, 1145, 1319], "return_typ": 135, "altern": [135, 145, 411, 462, 498, 1011, 1117, 1120, 1124, 1145, 1155, 1157, 1318, 1319, 1322], "complex_identifiers_by_interaction_typ": [135, 145], "complex_identifiers_by_interaction_type_and_data_model": [135, 145], "complex_identifiers_by_interaction_type_and_data_model_and_resourc": [135, 145], "complex_identifiers_by_refer": [135, 145], "complex_identifiers_by_resourc": [135, 145], "complex_labels_by_data_model": [135, 145], "complex_labels_by_interaction_typ": [135, 145], "complex_labels_by_interaction_type_and_data_model": [135, 145], "complex_labels_by_interaction_type_and_data_model_and_resourc": [135, 145], "complex_labels_by_refer": [135, 145], "complex_labels_by_resourc": [135, 145], "complexes_by_data_model": [135, 145], "complexes_by_interaction_typ": [135, 145], "complexes_by_interaction_type_and_data_model": [135, 145], "complexes_by_interaction_type_and_data_model_and_resourc": [135, 145], "complexes_by_refer": [135, 145], "complexes_by_resourc": [135, 145], "only_interaction_typ": 135, "only_primari": 135, "by_refer": 135, "by_reference_resource_pair": 135, "along": [135, 912, 915, 967, 1319], "major": [135, 686, 912, 1318, 1321, 1322], "structur": [135, 340, 410, 469, 479, 639, 641, 691, 795, 796, 880, 912, 915, 1117, 1160, 1167, 1213, 1293, 1295, 1296, 1317, 1318, 1321], "un": [135, 912], "consensus_edg": [135, 912, 1319], "count_complex_identifi": [135, 145], "count_complex_label": [135, 145], "count_complex": [135, 145], "count_data_model": [135, 145], "model": [135, 145, 178, 180, 182, 183, 184, 187, 958, 1141], "count_degrees_direct": [135, 145], "concern": 135, "incom": [135, 145], "activ": [135, 145, 239, 283, 336, 338, 774, 912, 915, 935, 962, 1176, 1322], "around": [135, 145, 333, 649, 650, 651, 1047, 1089, 1109, 1146, 1317, 1318], "mode": [135, 145, 885, 912, 915, 1319], "IN": [135, 145, 915], "out": [135, 145, 915, 993, 1025, 1069, 1070, 1071, 1074, 1164, 1298, 1318, 1319], "outgo": [135, 145], "count_degrees_directed_in": [135, 145], "count_degrees_directed_out": [135, 145], "count_degrees_neg": [135, 145], "count_degrees_negative_in": [135, 145], "count_degrees_negative_out": [135, 145], "count_degrees_non_direct": [135, 145], "count_degrees_posit": [135, 145], "count_degrees_positive_in": [135, 145], "count_degrees_positive_out": [135, 145], "count_degrees_sign": [135, 145], "count_degrees_signed_in": [135, 145], "count_degrees_signed_out": [135, 145], "count_degrees_undirect": [135, 145], "count_ent": [135, 145], "count_identifi": [135, 145], "count_interaction_typ": [135, 145], "count_interact": [135, 145], "nonttyp": [135, 145], "unless": [135, 145, 915, 923, 1319], "count_interactions_undirect": [135, 145], "activity_flow": [135, 958, 1319], "secondari": [135, 827, 852, 905, 1145, 1318, 1319], "source_entity_typ": 135, "target_entity_typ": 135, "count_interactions_0": [135, 145], "being": [135, 145, 184, 769, 915, 1004, 1293, 1295, 1296], "awar": [135, 915, 1319], "count_interactions_direct": [135, 145], "get_interact": [135, 145], "count_interactions_mutu": [135, 145], "explicit": [135, 281, 915, 1145, 1157], "count_interactions_neg": [135, 145], "count_interactions_non_direct": [135, 145], "count_interactions_posit": [135, 145], "count_interactions_sign": [135, 145], "count_label": [135, 145], "count_lncrna_identifi": [135, 145], "count_lncrna_label": [135, 145], "count_lncrna": [135, 145], "count_mirna_identifi": [135, 145], "count_mirna_label": [135, 145], "count_mirna": [135, 145], "count_protein_identifi": [135, 145], "count_protein_label": [135, 145], "count_protein": [135, 145], "count_refer": [135, 145], "count_resource_nam": [135, 145], "count_resource_names_via": [135, 145], "count_resourc": [135, 145], "count_resources_via": [135, 145], "count_small_molecule_identifi": [135, 145], "count_small_molecule_label": [135, 145], "count_small_molecul": [135, 145], "data_models_by_data_model": [135, 145], "data_models_by_interaction_typ": [135, 145], "data_models_by_interaction_type_and_data_model": [135, 145], "data_models_by_interaction_type_and_data_model_and_resourc": [135, 145], "data_models_by_refer": [135, 145], "data_models_by_resourc": [135, 145], "degrees_directed_by_data_model": [135, 145], "degrees_directed_by_interaction_typ": [135, 145], "degrees_directed_by_interaction_type_and_data_model": [135, 145], "degrees_directed_by_interaction_type_and_data_model_and_resourc": [135, 145], "degrees_directed_by_refer": [135, 145], "degrees_directed_by_resourc": [135, 145], "degrees_directed_in_by_data_model": [135, 145], "degrees_directed_in_by_interaction_typ": [135, 145], "degrees_directed_in_by_interaction_type_and_data_model": [135, 145], "degrees_directed_in_by_interaction_type_and_data_model_and_resourc": [135, 145], "degrees_directed_in_by_refer": [135, 145], "degrees_directed_in_by_resourc": [135, 145], "degrees_directed_out_by_data_model": [135, 145], "degrees_directed_out_by_interaction_typ": [135, 145], "degrees_directed_out_by_interaction_type_and_data_model": [135, 145], "degrees_directed_out_by_interaction_type_and_data_model_and_resourc": [135, 145], "degrees_directed_out_by_refer": [135, 145], "degrees_directed_out_by_resourc": [135, 145], "degrees_negative_by_data_model": [135, 145], "degrees_negative_by_interaction_typ": [135, 145], "degrees_negative_by_interaction_type_and_data_model": [135, 145], "degrees_negative_by_interaction_type_and_data_model_and_resourc": [135, 145], "degrees_negative_by_refer": [135, 145], "degrees_negative_by_resourc": [135, 145], "degrees_negative_in_by_data_model": [135, 145], "degrees_negative_in_by_interaction_typ": [135, 145], "degrees_negative_in_by_interaction_type_and_data_model": [135, 145], "degrees_negative_in_by_interaction_type_and_data_model_and_resourc": [135, 145], "degrees_negative_in_by_refer": [135, 145], "degrees_negative_in_by_resourc": [135, 145], "degrees_negative_out_by_data_model": [135, 145], "degrees_negative_out_by_interaction_typ": [135, 145], "degrees_negative_out_by_interaction_type_and_data_model": [135, 145], "degrees_negative_out_by_interaction_type_and_data_model_and_resourc": [135, 145], "degrees_negative_out_by_refer": [135, 145], "degrees_negative_out_by_resourc": [135, 145], "degrees_non_directed_by_data_model": [135, 145], "degrees_non_directed_by_interaction_typ": [135, 145], "degrees_non_directed_by_interaction_type_and_data_model": [135, 145], "degrees_non_directed_by_interaction_type_and_data_model_and_resourc": [135, 145], "degrees_non_directed_by_refer": [135, 145], "degrees_non_directed_by_resourc": [135, 145], "degrees_positive_by_data_model": [135, 145], "degrees_positive_by_interaction_typ": [135, 145], "degrees_positive_by_interaction_type_and_data_model": [135, 145], "degrees_positive_by_interaction_type_and_data_model_and_resourc": [135, 145], "degrees_positive_by_refer": [135, 145], "degrees_positive_by_resourc": [135, 145], "degrees_positive_in_by_data_model": [135, 145], "degrees_positive_in_by_interaction_typ": [135, 145], "degrees_positive_in_by_interaction_type_and_data_model": [135, 145], "degrees_positive_in_by_interaction_type_and_data_model_and_resourc": [135, 145], "degrees_positive_in_by_refer": [135, 145], "degrees_positive_in_by_resourc": [135, 145], "degrees_positive_out_by_data_model": [135, 145], "degrees_positive_out_by_interaction_typ": [135, 145], "degrees_positive_out_by_interaction_type_and_data_model": [135, 145], "degrees_positive_out_by_interaction_type_and_data_model_and_resourc": [135, 145], "degrees_positive_out_by_refer": [135, 145], "degrees_positive_out_by_resourc": [135, 145], "degrees_signed_by_data_model": [135, 145], "degrees_signed_by_interaction_typ": [135, 145], "degrees_signed_by_interaction_type_and_data_model": [135, 145], "degrees_signed_by_interaction_type_and_data_model_and_resourc": [135, 145], "degrees_signed_by_refer": [135, 145], "degrees_signed_by_resourc": [135, 145], "degrees_signed_in_by_data_model": [135, 145], "degrees_signed_in_by_interaction_typ": [135, 145], "degrees_signed_in_by_interaction_type_and_data_model": [135, 145], "degrees_signed_in_by_interaction_type_and_data_model_and_resourc": [135, 145], "degrees_signed_in_by_refer": [135, 145], "degrees_signed_in_by_resourc": [135, 145], "degrees_signed_out_by_data_model": [135, 145], "degrees_signed_out_by_interaction_typ": [135, 145], "degrees_signed_out_by_interaction_type_and_data_model": [135, 145], "degrees_signed_out_by_interaction_type_and_data_model_and_resourc": [135, 145], "degrees_signed_out_by_refer": [135, 145], "degrees_signed_out_by_resourc": [135, 145], "degrees_undirected_by_data_model": [135, 145], "degrees_undirected_by_interaction_typ": [135, 145], "degrees_undirected_by_interaction_type_and_data_model": [135, 145], "degrees_undirected_by_interaction_type_and_data_model_and_resourc": [135, 145], "degrees_undirected_by_refer": [135, 145], "degrees_undirected_by_resourc": [135, 145], "direction_kei": 135, "dorothea_level": [135, 145, 1319, 1322], "c": [135, 324, 330, 371, 373, 374, 375, 379, 380, 381, 383, 384, 385, 387, 388, 389, 390, 750, 751, 915, 971, 997, 1001, 1013, 1058, 1063, 1078, 1106, 1126, 1129, 1176, 1285, 1286, 1287, 1288, 1289, 1290, 1319], "d": [135, 324, 330, 915, 971, 1004, 1013, 1063, 1064, 1078, 1106, 1176, 1319], "dorothea": [135, 145, 915, 958, 981, 1321, 1322], "due": [135, 1145, 1318, 1319], "natur": [135, 582, 1164], "symbol": [135, 145, 312, 365, 366, 367, 411, 645, 686, 719, 825, 867, 874, 878, 915, 932, 1145, 1151, 1152, 1154, 1155, 1157, 1215, 1257, 1318, 1319, 1322], "take": [135, 180, 653, 654, 656, 657, 658, 659, 660, 915, 932, 1042, 1061, 1075, 1081, 1144, 1145, 1155, 1164, 1281, 1318, 1319], "highest": [135, 379, 384, 769, 1125, 1322], "drop": [135, 915, 1106, 1319], "rest": [135, 281, 344, 373, 375, 380, 383, 385, 387, 389, 1319, 1322], "five": [135, 426, 915, 1145, 1155, 1157, 1318, 1319], "entities_by_data_model": [135, 145], "entities_by_interaction_typ": [135, 145], "entities_by_interaction_type_and_data_model": [135, 145], "entities_by_interaction_type_and_data_model_and_resourc": [135, 145], "entities_by_refer": [135, 145], "entities_by_resourc": [135, 145, 915], "evaluate_evid": 135, "this_direct": 135, "evalu": [135, 915, 1123], "generate_df_record": 135, "by_sourc": [135, 145, 915, 921, 1176], "with_refer": [135, 145, 915], "becaus": [135, 224, 231, 411, 653, 654, 656, 657, 658, 659, 660, 915, 964, 967, 1176, 1178, 1319, 1322], "need": [135, 239, 410, 450, 454, 469, 813, 915, 1090, 1145, 1155, 1164, 1167, 1317, 1319, 1322], "group": [135, 145, 275, 312, 337, 865, 915, 1031, 1035, 1050, 1053, 1079, 1164, 1221, 1277, 1305, 1318, 1319, 1321], "most": [135, 184, 194, 379, 384, 763, 838, 915, 932, 969, 1095, 1146, 1239, 1318, 1319], "applic": [135, 912, 915, 1318, 1319], "refrenc": [135, 915], "still": [135, 915, 1145, 1155, 1157, 1318, 1319], "rare": [135, 915, 1145, 1155, 1157], "increas": [135, 139, 915, 1319], "size": [135, 139, 344, 462, 763, 915, 1041, 1090, 1164, 1167, 1277, 1308, 1309, 1319], "significantli": [135, 915], "get_attr": [135, 915], "extract": [135, 183, 211, 254, 299, 344, 410, 430, 431, 499, 640, 723, 744, 747, 915, 1017, 1042, 1061, 1089, 1090, 1164, 1167, 1319], "get_complex_identifi": [135, 145], "get_complex_label": [135, 145], "get_complex": [135, 145], "get_data_model": [135, 145], "get_degre": 135, "get_degrees_direct": [135, 145], "get_degrees_directed_in": [135, 145], "get_degrees_directed_out": [135, 145], "get_degrees_neg": [135, 145], "get_degrees_negative_in": [135, 145], "get_degrees_negative_out": [135, 145], "get_degrees_non_direct": [135, 145], "get_degrees_posit": [135, 145], "get_degrees_positive_in": [135, 145], "get_degrees_positive_out": [135, 145], "get_degrees_sign": [135, 145], "get_degrees_signed_in": [135, 145], "get_degrees_signed_out": [135, 145], "get_degrees_undirect": [135, 145], "get_direct": [135, 912, 915, 1319], "state": [135, 145, 197, 411, 912, 915, 1167, 1319], "src": [135, 912, 915, 1321], "tgt": [135, 912], "get_ent": [135, 145], "get_identifi": [135, 145], "get_interaction_typ": [135, 145, 1319], "get_interactions_0": [135, 145], "get_interactions_direct": [135, 145], "get_interactions_mutu": [135, 145], "get_interactions_neg": [135, 145], "get_interactions_non_direct": [135, 145], "get_interactions_non_directed_0": [135, 145], "sort": [135, 912, 915, 1299, 1305, 1319, 1321], "insid": [135, 1145], "get_interactions_posit": [135, 145, 1319], "get_interactions_sign": [135, 145], "get_interactions_undirect": [135, 145], "matter": [135, 145, 981, 1145, 1318, 1319], "get_interactions_undirected_0": [135, 145], "get_label": [135, 145], "get_lncrna_identifi": [135, 145], "get_lncrna_label": [135, 145], "get_lncrna": [135, 145], "get_mirna_identifi": [135, 145], "get_mirna_label": [135, 145], "get_mirna": [135, 145], "get_protein_identifi": [135, 145], "get_protein_label": [135, 145], "get_protein": [135, 145, 1164], "get_refer": [135, 145, 1319], "get_resource_nam": [135, 145, 1319], "get_resource_names_via": [135, 145], "get_resources_via": [135, 145], "get_sign": [135, 912, 1319], "diret": [135, 912], "th": [135, 912, 1144], "denot": [135, 912, 915], "get_small_molecule_identifi": [135, 145], "get_small_molecule_label": [135, 145], "get_small_molecul": [135, 145], "has_sign": [135, 912], "identifiers_by_data_model": [135, 145], "identifiers_by_interaction_typ": [135, 145], "identifiers_by_interaction_type_and_data_model": [135, 145], "identifiers_by_interaction_type_and_data_model_and_resourc": [135, 145], "identifiers_by_refer": [135, 145], "identifiers_by_resourc": [135, 145], "interaction_types_by_data_model": [135, 145], "interaction_types_by_interaction_typ": [135, 145], "interaction_types_by_interaction_type_and_data_model": [135, 145], "interaction_types_by_interaction_type_and_data_model_and_resourc": [135, 145], "interaction_types_by_refer": [135, 145], "interaction_types_by_resourc": [135, 145], "interactions_0_by_data_model": [135, 145], "interactions_0_by_interaction_typ": [135, 145], "interactions_0_by_interaction_type_and_data_model": [135, 145], "interactions_0_by_interaction_type_and_data_model_and_resourc": [135, 145], "interactions_0_by_refer": [135, 145], "interactions_0_by_resourc": [135, 145], "interactions_by_data_model": [135, 145], "interactions_by_interaction_typ": [135, 145], "interactions_by_interaction_type_and_data_model": [135, 145], "interactions_by_interaction_type_and_data_model_and_resourc": [135, 145], "interactions_by_refer": [135, 145], "interactions_by_resourc": [135, 145], "interactions_directed_by_data_model": [135, 145], "interactions_directed_by_interaction_typ": [135, 145], "interactions_directed_by_interaction_type_and_data_model": [135, 145], "interactions_directed_by_interaction_type_and_data_model_and_resourc": [135, 145], "interactions_directed_by_refer": [135, 145], "interactions_directed_by_resourc": [135, 145, 915], "interactions_mutual_by_data_model": [135, 145], "interactions_mutual_by_interaction_typ": [135, 145], "interactions_mutual_by_interaction_type_and_data_model": [135, 145], "interactions_mutual_by_interaction_type_and_data_model_and_resourc": [135, 145], "interactions_mutual_by_refer": [135, 145], "interactions_mutual_by_resourc": [135, 145, 915], "interactions_negative_by_data_model": [135, 145], "interactions_negative_by_interaction_typ": [135, 145], "interactions_negative_by_interaction_type_and_data_model": [135, 145], "interactions_negative_by_interaction_type_and_data_model_and_resourc": [135, 145], "interactions_negative_by_refer": [135, 145], "interactions_negative_by_resourc": [135, 145], "interactions_non_directed_0_by_data_model": [135, 145], "interactions_non_directed_0_by_interaction_typ": [135, 145], "interactions_non_directed_0_by_interaction_type_and_data_model": [135, 145], "interactions_non_directed_0_by_interaction_type_and_data_model_and_resourc": [135, 145], "interactions_non_directed_0_by_refer": [135, 145], "interactions_non_directed_0_by_resourc": [135, 145], "interactions_non_directed_by_data_model": [135, 145], "interactions_non_directed_by_interaction_typ": [135, 145], "interactions_non_directed_by_interaction_type_and_data_model": [135, 145], "interactions_non_directed_by_interaction_type_and_data_model_and_resourc": [135, 145], "interactions_non_directed_by_refer": [135, 145], "interactions_non_directed_by_resourc": [135, 145], "interactions_positive_by_data_model": [135, 145], "interactions_positive_by_interaction_typ": [135, 145], "interactions_positive_by_interaction_type_and_data_model": [135, 145], "interactions_positive_by_interaction_type_and_data_model_and_resourc": [135, 145], "interactions_positive_by_refer": [135, 145], "interactions_positive_by_resourc": [135, 145], "interactions_signed_by_data_model": [135, 145], "interactions_signed_by_interaction_typ": [135, 145], "interactions_signed_by_interaction_type_and_data_model": [135, 145], "interactions_signed_by_interaction_type_and_data_model_and_resourc": [135, 145], "interactions_signed_by_refer": [135, 145], "interactions_signed_by_resourc": [135, 145, 915], "interactions_undirected_0_by_data_model": [135, 145], "interactions_undirected_0_by_interaction_typ": [135, 145], "interactions_undirected_0_by_interaction_type_and_data_model": [135, 145], "interactions_undirected_0_by_interaction_type_and_data_model_and_resourc": [135, 145], "interactions_undirected_0_by_refer": [135, 145], "interactions_undirected_0_by_resourc": [135, 145], "interactions_undirected_by_data_model": [135, 145], "interactions_undirected_by_interaction_typ": [135, 145], "interactions_undirected_by_interaction_type_and_data_model": [135, 145], "interactions_undirected_by_interaction_type_and_data_model_and_resourc": [135, 145], "interactions_undirected_by_refer": [135, 145], "interactions_undirected_by_resourc": [135, 145, 915], "is_direct": [135, 872, 912, 1319], "is_directed_by_resourc": [135, 912], "is_inhibit": [135, 912, 1319], "is_loop": 135, "loop": [135, 145, 915, 1285, 1286, 1287, 1288, 1289, 1290, 1317], "endpoint": [135, 145], "is_mutu": [135, 912], "is_mutual_by_resourc": [135, 912], "is_stimul": [135, 912, 1319], "activatori": [135, 912], "iter_evid": 135, "iter_match_evid": 135, "labels_by_data_model": [135, 145], "labels_by_interaction_typ": [135, 145], "labels_by_interaction_type_and_data_model": [135, 145], "labels_by_interaction_type_and_data_model_and_resourc": [135, 145], "labels_by_refer": [135, 145], "labels_by_resourc": [135, 145], "lncrna_identifiers_by_data_model": [135, 145], "lncrna_identifiers_by_interaction_typ": [135, 145], "lncrna_identifiers_by_interaction_type_and_data_model": [135, 145], "lncrna_identifiers_by_interaction_type_and_data_model_and_resourc": [135, 145], "lncrna_identifiers_by_refer": [135, 145], "lncrna_identifiers_by_resourc": [135, 145], "lncrna_labels_by_data_model": [135, 145], "lncrna_labels_by_interaction_typ": [135, 145], "lncrna_labels_by_interaction_type_and_data_model": [135, 145], "lncrna_labels_by_interaction_type_and_data_model_and_resourc": [135, 145], "lncrna_labels_by_refer": [135, 145], "lncrna_labels_by_resourc": [135, 145], "lncrnas_by_data_model": [135, 145], "lncrnas_by_interaction_typ": [135, 145], "lncrnas_by_interaction_type_and_data_model": [135, 145], "lncrnas_by_interaction_type_and_data_model_and_resourc": [135, 145], "lncrnas_by_refer": [135, 145], "lncrnas_by_resourc": [135, 145], "majority_dir": [135, 912], "equal": [135, 912, 958, 994, 1010, 1011, 1305], "majority_sign": [135, 912], "straight": [135, 912, 915, 1281, 1285, 1286, 1287, 1288, 1289, 1290, 1319], "revers": [135, 912, 915, 1145, 1319], "mean": [135, 145, 180, 411, 469, 498, 723, 763, 885, 902, 912, 915, 958, 985, 1145, 1146, 1154, 1156, 1164, 1298, 1319], "anoth": [135, 409, 411, 912, 915, 1123, 1141, 1213, 1318, 1319, 1322], "mirna_identifiers_by_data_model": [135, 145], "mirna_identifiers_by_interaction_typ": [135, 145], "mirna_identifiers_by_interaction_type_and_data_model": [135, 145], "mirna_identifiers_by_interaction_type_and_data_model_and_resourc": [135, 145], "mirna_identifiers_by_refer": [135, 145], "mirna_identifiers_by_resourc": [135, 145], "mirna_labels_by_data_model": [135, 145], "mirna_labels_by_interaction_typ": [135, 145], "mirna_labels_by_interaction_type_and_data_model": [135, 145], "mirna_labels_by_interaction_type_and_data_model_and_resourc": [135, 145], "mirna_labels_by_refer": [135, 145], "mirna_labels_by_resourc": [135, 145], "mirnas_by_data_model": [135, 145], "mirnas_by_interaction_typ": [135, 145], "mirnas_by_interaction_type_and_data_model": [135, 145], "mirnas_by_interaction_type_and_data_model_and_resourc": [135, 145], "mirnas_by_refer": [135, 145], "mirnas_by_resourc": [135, 145], "negative_a_b": 135, "a_b": 135, "negative_b_a": 135, "b_a": 135, "negative_resources_a_b": 135, "negative_resources_b_a": 135, "negative_revers": [135, 912], "negative_straight": [135, 912], "positive_a_b": 135, "positive_b_a": 135, "positive_resources_a_b": 135, "positive_resources_b_a": 135, "positive_revers": [135, 912], "positive_straight": [135, 912], "protein_identifiers_by_data_model": [135, 145], "protein_identifiers_by_interaction_typ": [135, 145], "protein_identifiers_by_interaction_type_and_data_model": [135, 145], "protein_identifiers_by_interaction_type_and_data_model_and_resourc": [135, 145], "protein_identifiers_by_refer": [135, 145], "protein_identifiers_by_resourc": [135, 145], "protein_labels_by_data_model": [135, 145], "protein_labels_by_interaction_typ": [135, 145], "protein_labels_by_interaction_type_and_data_model": [135, 145], "protein_labels_by_interaction_type_and_data_model_and_resourc": [135, 145], "protein_labels_by_refer": [135, 145], "protein_labels_by_resourc": [135, 145], "proteins_by_data_model": [135, 145], "proteins_by_interaction_typ": [135, 145], "proteins_by_interaction_type_and_data_model": [135, 145], "proteins_by_interaction_type_and_data_model_and_resourc": [135, 145], "proteins_by_refer": [135, 145], "proteins_by_resourc": [135, 145], "references_by_data_model": [135, 145], "references_by_interaction_typ": [135, 145], "references_by_interaction_type_and_data_model": [135, 145], "references_by_interaction_type_and_data_model_and_resourc": [135, 145], "references_by_refer": [135, 145], "references_by_resourc": [135, 145, 915, 1319], "resource_names_by_data_model": [135, 145], "resource_names_by_interaction_typ": [135, 145], "resource_names_by_interaction_type_and_data_model": [135, 145], "resource_names_by_interaction_type_and_data_model_and_resourc": [135, 145], "resource_names_by_refer": [135, 145], "resource_names_by_resourc": [135, 145], "resource_names_via_by_data_model": [135, 145], "resource_names_via_by_interaction_typ": [135, 145], "resource_names_via_by_interaction_type_and_data_model": [135, 145], "resource_names_via_by_interaction_type_and_data_model_and_resourc": [135, 145], "resource_names_via_by_refer": [135, 145], "resource_names_via_by_resourc": [135, 145], "resources_a_b": 135, "resources_b_a": 135, "resources_by_data_model": [135, 145], "resources_by_interaction_typ": [135, 145], "resources_by_interaction_type_and_data_model": [135, 145], "resources_by_interaction_type_and_data_model_and_resourc": [135, 145], "resources_by_refer": [135, 145], "resources_by_resourc": [135, 145], "resources_undirect": 135, "resources_via_by_data_model": [135, 145], "resources_via_by_interaction_typ": [135, 145], "resources_via_by_interaction_type_and_data_model": [135, 145], "resources_via_by_interaction_type_and_data_model_and_resourc": [135, 145], "resources_via_by_refer": [135, 145], "resources_via_by_resourc": [135, 145], "small_molecule_identifiers_by_data_model": [135, 145], "small_molecule_identifiers_by_interaction_typ": [135, 145], "small_molecule_identifiers_by_interaction_type_and_data_model": [135, 145], "small_molecule_identifiers_by_interaction_type_and_data_model_and_resourc": [135, 145], "small_molecule_identifiers_by_refer": [135, 145], "small_molecule_identifiers_by_resourc": [135, 145], "small_molecule_labels_by_data_model": [135, 145], "small_molecule_labels_by_interaction_typ": [135, 145], "small_molecule_labels_by_interaction_type_and_data_model": [135, 145], "small_molecule_labels_by_interaction_type_and_data_model_and_resourc": [135, 145], "small_molecule_labels_by_refer": [135, 145], "small_molecule_labels_by_resourc": [135, 145], "small_molecules_by_data_model": [135, 145], "small_molecules_by_interaction_typ": [135, 145], "small_molecules_by_interaction_type_and_data_model": [135, 145], "small_molecules_by_interaction_type_and_data_model_and_resourc": [135, 145], "small_molecules_by_refer": [135, 145], "small_molecules_by_resourc": [135, 145], "bidirect": [135, 912], "sources_revers": [135, 912], "sources_straight": [135, 912], "sources_undirect": [135, 912], "src_by_resourc": 135, "found": [135, 139, 145, 912, 915, 1145, 1155, 1157, 1160, 1319], "invalid": [135, 912, 1319], "tgt_by_resourc": 135, "new_attr": 135, "abl": [135, 145, 169, 1089, 1318, 1319], "chang": [135, 310, 865, 1065, 1083, 1092, 1095, 1109, 1145, 1318, 1319], "1956": [135, 1319], "copi": [135, 231, 865, 902, 912, 915, 992, 997, 1004, 1018, 1078, 1318, 1319], "unset_dir": [135, 912], "remov": [135, 139, 145, 256, 307, 370, 371, 382, 725, 865, 912, 915, 921, 958, 992, 997, 1018, 1046, 1078, 1125, 1144, 1145, 1146, 1160, 1167, 1189, 1191, 1192, 1319, 1321], "unset_direct": [135, 912], "unset_interaction_typ": 135, "unset_sign": [135, 912], "positive_attribut": [135, 912], "must": [135, 145, 239, 411, 912, 915, 921, 958, 1029, 1224, 1281, 1319, 1322], "which_direct": [135, 912], "which_dir": [135, 912], "which_sign": [135, 912], "id_a": [136, 145, 620, 885, 912, 915, 1319], "id_b": [136, 145, 620, 885, 912, 915, 1319], "type_a": [136, 1319], "type_b": [136, 1319], "dmodel": [136, 1319], "4": [136, 145, 147, 203, 214, 226, 322, 418, 456, 485, 617, 689, 769, 821, 862, 905, 913, 914, 915, 989, 990, 1161, 1276, 1281, 1293, 1296, 1305, 1308, 1317, 1319, 1322], "7": [136, 147, 191, 265, 320, 322, 411, 485, 689, 821, 862, 913, 914, 1308, 1317, 1318, 1319, 1322], "5": [136, 147, 214, 226, 322, 400, 401, 411, 456, 474, 485, 689, 821, 862, 913, 914, 915, 990, 1016, 1078, 1112, 1145, 1155, 1167, 1276, 1302, 1304, 1308, 1317, 1318, 1319], "9": [136, 147, 152, 322, 851, 862, 913, 914, 1298, 1302, 1306, 1310, 1317, 1318, 1319], "8": [136, 147, 322, 474, 485, 862, 913, 914, 915, 943, 975, 1089, 1090, 1307, 1308, 1317, 1318, 1319], "entity_a": [137, 145], "entity_b": [137, 145], "cellphonedb_categori": 139, "baccin_categori": 139, "hpmr_categori": 139, "surfaceome_categori": 139, "gpcrdb_categori": 139, "icellnet_categori": 139, "customannot": [139, 862, 864, 865, 1319], "transmitter_receiv": 139, "only_gener": 139, "only_composit": 139, "only_funct": 139, "exclude_intracellular": 139, "On": [139, 1319], "transmitt": [139, 862, 865, 1319, 1322], "receiv": [139, 862, 865, 1319, 1322], "allow": [139, 145, 239, 915, 958, 999, 1319], "resource_specif": [139, 862, 865, 1319, 1322], "locat": [139, 281, 720, 865, 915, 1146, 1318, 1319, 1321, 1322], "often": [139, 498, 499, 500, 932, 1146, 1318, 1319], "relev": [139, 145, 182, 183, 1319], "intracellular": 139, "o14976": 143, "o15231": 143, "o43294": 143, "o60711": 143, "o60759": 143, "p07332": 143, "p29965": 143, "p35221": 143, "p35222": 143, "p50552": 143, "p56945": 143, "q02297": 143, "q03001": 143, "q13153": 143, "q13895": 143, "q14451": 143, "q14511": 143, "q14943": 143, "q14952": 143, "q14953": 143, "q155q3": 143, "q15654": 143, "q5jra6": 143, "q5t4b2": 143, "q7l5y9": 143, "q7z4i7": 143, "q86tp1": 143, "q8ivt2": 143, "q8izw8": 143, "q8n264": 143, "q8n743": 143, "q8nhk3": 143, "q8wx93": 143, "q92502": 143, "q96ac1": 143, "q96if1": 143, "q96qb1": 143, "q99689": 143, "q9h792": 143, "q9hbi0": 143, "q9hbi1": 143, "q9nq75": 143, "q9ubt7": 143, "q9ugi8": 143, "q9ugp4": 143, "q9ui47": 143, "q9uqb3": 143, "cell_surface_enzym": 143, "o00391": 143, "p04843": 143, "p08842": 143, "p09958": 143, "p11117": 143, "p19021": 143, "p40126": 143, "p52961": 143, "q13444": 143, "q15125": 143, "q8tcj2": 143, "q8wud6": 143, "q96jj7": 143, "q9nph5": 143, "q9uk23": 143, "q9ukf2": 143, "cell_surface_ligand": 143, "p0dpd6": 143, "ligand": [143, 201, 202, 203, 204, 212, 214, 215, 216, 218, 219, 220, 221, 222, 223, 229, 230, 233, 235, 267, 268, 354, 397, 419, 456, 524, 657, 659, 719, 750, 752, 915, 1322], "o00220": 143, "o00300": 143, "o00468": 143, "o00587": 143, "o00592": 143, "o14594": 143, "o14649": 143, "o14672": 143, "o15031": 143, "o15197": 143, "o15496": 143, "o43157": 143, "o43184": 143, "o43278": 143, "o43852": 143, "o43914": 143, "o60462": 143, "o60469": 143, "o60486": 143, "o60494": 143, "o75051": 143, "o75077": 143, "o75330": 143, "o75508": 143, "o75509": 143, "o75534": 143, "o75596": 143, "o94887": 143, "o95084": 143, "o95236": 143, "o95274": 143, "o95428": 143, "o95467": 143, "o95711": 143, "o95754": 143, "p00451": 143, "p00488": 143, "p00734": 143, "p00740": 143, "p00742": 143, "p00748": 143, "p00749": 143, "p00750": 143, "p00797": 143, "p00813": 143, "p00995": 143, "p01008": 143, "p01009": 143, "p01023": 143, "p01024": 143, "p01031": 143, "p01033": 143, "p01112": 143, "p01589": 143, "p02452": [143, 1319], "p02458": [143, 1319], "p02461": [143, 1319], "p02462": [143, 1319], "p02654": 143, "p02671": 143, "p02675": 143, "p02679": 143, "p02741": 143, "p02745": 143, "p02746": 143, "p02751": 143, "p02753": 143, "p02765": 143, "p02768": 143, "p02788": 143, "p03951": 143, "p03956": 143, "p03973": 143, "p04003": 143, "p04070": 143, "p04196": 143, "p04278": 143, "p04626": 143, "p04899": 143, "p05067": 143, "p05106": 143, "p05107": 143, "p05121": 143, "p05155": 143, "p05543": 143, "p05556": 143, "p05997": 143, "p06454": 143, "p06734": 143, "p06756": [143, 1319], "p06858": 143, "p07093": 143, "p07225": 143, "p07237": 143, "p07288": 143, "p07602": 143, "p07900": 143, "p08034": 143, "p08069": 143, "p08123": 143, "p08174": 143, "p08236": 143, "p08253": 143, "p08514": 143, "p08571": 143, "p08572": [143, 1319], "p08575": 143, "p08582": 143, "p08603": 143, "p08670": 143, "p08709": 143, "p08861": 143, "p08865": 143, "p09211": 143, "p09237": 143, "p09417": 143, "p09429": 143, "p0c0l4": 143, "p0c7t3": 143, "p0cg37": 143, "p0dmv8": 143, "p0dp23": [143, 1319], "p0dp24": [143, 1319], "p0dp25": [143, 1319], "p10144": 143, "p10153": 143, "p10586": 143, "p10646": 143, "p11150": 143, "p11226": 143, "p11229": 143, "p11362": [143, 1319], "p11912": 143, "p12107": 143, "p12109": 143, "p12110": 143, "p12821": 143, "p12830": 143, "p13385": 143, "p13591": 143, "p13612": 143, "p13637": 143, "p13688": 143, "p14416": [143, 1319], "p14618": 143, "p14625": 143, "p14778": 143, "p14780": 143, "p15151": 143, "p15531": 143, "p15907": 143, "p16035": 143, "p16070": 143, "p16109": 143, "p16473": 143, "p16520": 143, "p16671": 143, "p17302": 143, "p17752": 143, "p17948": 143, "p18564": 143, "p19113": 143, "p19823": 143, "p19835": 143, "p20062": 143, "p20273": 143, "p20292": 143, "p20309": 143, "p20849": 143, "p20908": 143, "p20916": 143, "p21462": 143, "p21709": 143, "p21802": 143, "p21810": 143, "p21815": 143, "p21860": 143, "p21917": 143, "p21941": 143, "p21980": 143, "p22392": 143, "p22692": 143, "p22897": 143, "p23471": 143, "p23515": 143, "p25063": 143, "p25090": 143, "p25940": 143, "p25942": 143, "p26012": 143, "p26441": 143, "p26842": 143, "p27658": 143, "p28335": 143, "p28907": 143, "p28908": 143, "p29317": 143, "p29322": 143, "p29323": 143, "p29400": 143, "p30530": 143, "p30533": 143, "p30542": 143, "p30874": 143, "p31025": 143, "p31785": 143, "p35212": 143, "p35354": 143, "p35475": 143, "p35555": 143, "p35613": 143, "p35625": 143, "p36383": 143, "p36897": 143, "p36941": 143, "p39019": 143, "p39060": 143, "p39900": 143, "p41143": 143, "p41594": 143, "p42081": 143, "p42127": 143, "p43121": 143, "p43405": 143, "p43489": 143, "p43490": 143, "p45452": 143, "p48039": 143, "p48651": 143, "p49768": 143, "p49913": 143, "p50052": 143, "p51654": 143, "p52945": 143, "p53420": 143, "p54577": 143, "p54753": 143, "p54756": 143, "p54760": 143, "p54762": 143, "p54764": 143, "p55058": 143, "p55789": 143, "p56159": 143, "p61626": 143, "p61769": 143, "p62987": 143, "p63092": 143, "p78310": 143, "p78324": 143, "p78536": 143, "p80188": 143, "p80303": 143, "p84077": 143, "p84996": 143, "p98160": 143, "p98164": 143, "q01469": 143, "q01955": 143, "q02094": 143, "q02388": 143, "q02817": 143, "q04721": 143, "q05707": 143, "q07326": 143, "q07954": 143, "q08334": 143, "q08722": 143, "q08828": 143, "q10588": 143, "q12913": 143, "q12918": 143, "q12933": 143, "q13158": 143, "q13241": 143, "q13255": [143, 1319], "q13352": 143, "q13361": 143, "q13442": 143, "q13443": 143, "q13477": 143, "q13936": [143, 1319], "q14031": 143, "q14050": 143, "q14055": 143, "q14118": 143, "q14242": 143, "q14766": 143, "q15165": 143, "q15223": 143, "q15262": 143, "q15303": 143, "q15375": 143, "q15762": 143, "q16613": 143, "q2mv58": 143, "q2vpa4": 143, "q4vx76": 143, "q5jwf2": 143, "q5sr53": 143, "q5t442": 143, "q5t5a4": 143, "q6nw40": 143, "q6uww8": 143, "q6uwx4": 143, "q6v0i7": 143, "q7z6a9": 143, "q86ur5": 143, "q8iwl1": 143, "q8izj3": 143, "q8izl2": 143, "q8n2x6": 143, "q8n474": 143, "q8nfk1": 143, "q8nft8": 143, "q8ngh5": 143, "q8ngh8": 143, "q8nhj6": 143, "q8nhp8": 143, "q8tax7": 143, "q8wtv0": 143, "q8wwy8": 143, "q8wz79": 143, "q92819": 143, "q92854": 143, "q92896": 143, "q92956": 143, "q96a49": 143, "q96cg8": 143, "q96da0": 143, "q96fe5": 143, "q99259": 143, "q99466": 143, "q99965": 143, "q9bq66": 143, "q9bs26": 143, "q9bx66": 143, "q9bzr6": 143, "q9bzw8": 143, "q9bzz2": 143, "q9c0c4": 143, "q9h2a7": 143, "q9h2e6": 143, "q9h3s1": 143, "q9h9h4": 143, "q9hcm2": 143, "q9nqc3": 143, "q9nr96": 143, "q9nrv9": 143, "q9nsg2": 143, "q9ntn9": 143, "q9nup9": 143, "q9nv23": 143, "q9nwz3": 143, "q9nx52": 143, "q9nzc2": 143, "q9nzr2": 143, "q9uby5": [143, 1319], "q9uhg3": 143, "q9uiw2": 143, "q9uju6": 143, "q9ukq2": 143, "q9ulp9": 143, "q9um47": 143, "q9uq26": 143, "q9xrx5": 143, "q9y215": 143, "q9y2i2": 143, "q9y4d7": 143, "q9y566": 143, "q9y5u5": 143, "q9y624": 143, "q9y625": 143, "q9y6n7": 143, "receptor": [143, 145, 201, 202, 203, 204, 212, 214, 215, 216, 218, 219, 220, 221, 222, 223, 226, 229, 230, 233, 235, 267, 268, 354, 418, 419, 456, 524, 719, 750, 752, 915, 1322], "a6nfa1": 143, "b2ruy7": 143, "b4ds77": 143, "o00170": 143, "o00548": 143, "o00555": 143, "o14493": 143, "o14638": 143, "o14788": 143, "o14795": 143, "o15162": 143, "o15374": 143, "o15551": 143, "o15554": 143, "o43525": 143, "o43813": 143, "o43866": 143, "o43921": 143, "o60291": 143, "o60359": 143, "o75078": 143, "o75106": 143, "o75144": 143, "o75575": 143, "o75923": 143, "o94772": 143, "o94779": 143, "o94856": 143, "o95196": 143, "o95259": 143, "o95477": 143, "o95727": 143, "o95897": 143, "o95967": 143, "o95994": 143, "o95998": 143, "p00747": 143, "p01133": 143, "p01303": [143, 1319], "p01889": 143, "p01903": 143, "p01906": 143, "p01909": 143, "p01911": 143, "p01920": 143, "p02649": 143, "p04004": 143, "p04439": 143, "p05026": 143, "p05156": 143, "p05187": 143, "p05231": 143, "p05362": 143, "p05538": 143, "p07942": 143, "p09326": 143, "p09917": 143, "p09923": 143, "p10321": 143, "p10589": 143, "p11168": 143, "p13056": 143, "p13569": 143, "p13598": 143, "p13765": 143, "p15514": 143, "p15813": 143, "p16422": [143, 1319], "p16581": 143, "p17693": 143, "p17813": 143, "p18433": 143, "p19256": 143, "p19801": 143, "p20827": 143, "p21246": 143, "p21589": 143, "p21926": 143, "p22001": 143, "p22460": 143, "p22736": 143, "p23276": 143, "p23510": 143, "p24043": 143, "p25098": 143, "p25189": 143, "p26038": 143, "p27701": 143, "p27824": 143, "p28906": 143, "p29016": 143, "p29033": 143, "p29460": 143, "p29972": 143, "p30301": 143, "p30511": 143, "p31431": 143, "p31749": [143, 1319], "p31997": 143, "p32004": 143, "p32942": 143, "p32970": 143, "p32971": 143, "p35499": 143, "p36021": 143, "p36269": 143, "p41235": 143, "p48050": 143, "p48509": 143, "p48552": 143, "p50591": 143, "p51787": 143, "p51828": 143, "p52797": 143, "p52798": 143, "p52799": 143, "p52803": 143, "p54709": 143, "p54750": 143, "p54851": 143, "p55157": 143, "p55160": 143, "p55268": 143, "p56705": 143, "p57057": 143, "p57087": 143, "p57739": 143, "p58401": 143, "p61160": 143, "p62079": 143, "p62955": 143, "p78504": 143, "p78509": 143, "p78562": 143, "p79483": 143, "p84022": 143, "p84157": 143, "p98172": 143, "q00994": 143, "q01064": 143, "q02108": 143, "q02153": 143, "q02246": 143, "q02413": 143, "q02641": 143, "q02846": 143, "q03135": [143, 1319], "q04724": 143, "q05940": 143, "q06643": 143, "q07075": 143, "q08380": 143, "q08am6": 143, "q12809": 143, "q12884": 143, "q13061": 143, "q13114": 143, "q13275": 143, "q13445": 143, "q13520": 143, "q13740": 143, "q13822": 143, "q14123": 143, "q14126": 143, "q14213": 143, "q14524": 143, "q14541": 143, "q14563": 143, "q14773": 143, "q14956": 143, "q14982": 143, "q14994": 143, "q14995": 143, "q15628": 143, "q15758": 143, "q15768": 143, "q15842": 143, "q15848": 143, "q16342": 143, "q16363": 143, "q16572": 143, "q16625": 143, "q16853": 143, "q19t08": 143, "q29983": 143, "q2tal6": 143, "q30201": 143, "q401n2": 143, "q496h8": 143, "q4vcs5": 143, "q4w5p6": 143, "q5dx21": 143, "q5tat6": 143, "q5vu97": 143, "q5vy80": 143, "q5zpr3": 143, "q6nyc1": 143, "q6piz9": 143, "q6q4g3": 143, "q6rw13": 143, "q6uw88": 143, "q6uwv6": 143, "q6uxb3": 143, "q6uxi9": 143, "q7l0j3": 143, "q7z7d3": 143, "q86uf1": 143, "q86uk0": 143, "q8iu54": 143, "q8iu80": 143, "q8iuk5": 143, "q8iwv2": 143, "q8izv2": 143, "q8izy2": 143, "q8n126": 143, "q8n2g4": 143, "q8ncm2": 143, "q8ncs7": 143, "q8nec5": 143, "q8nfp4": 143, "q8nfy4": 143, "q8nfz3": 143, "q8ng11": 143, "q8taz6": 143, "q8tcy5": 143, "q8td07": 143, "q8tdm5": 143, "q8wum9": 143, "q8wwa0": 143, "q8wwx8": 143, "q8wxs5": 143, "q92570": 143, "q92673": 143, "q92753": 143, "q92913": 143, "q92954": 143, "q96ap7": 143, "q96b86": 143, "q96dz9": 143, "q96jb6": 143, "q96jk4": 143, "q96jq0": 143, "q96l42": 143, "q96pb7": 143, "q96qt4": 143, "q96s97": 143, "q96sn7": [143, 1319], "q99075": 143, "q99523": 143, "q99712": 143, "q99784": 143, "q9bqq7": 143, "q9brk0": 143, "q9buf7": 143, "q9bx67": 143, "q9bxj0": 143, "q9by67": 143, "q9bye2": 143, "q9bzm4": 143, "q9gzm7": 143, "q9h0r3": 143, "q9h221": 143, "q9h222": 143, "q9h4b8": 143, "q9h7v2": 143, "q9np59": 143, "q9nqs3": 143, "q9nr61": 143, "q9nr82": 143, "q9nrq2": 143, "q9nsa2": 143, "q9ny72": 143, "q9ny84": 143, "q9nyj7": 143, "q9nyz4": 143, "q9nz08": 143, "q9nz53": 143, "q9nzq7": 143, "q9nzv8": 143, "q9p0k1": 143, "q9p0l9": 143, "q9p232": 143, "q9p2k9": 143, "q9p2u7": 143, "q9ubh0": 143, "q9ubn1": 143, "q9ubx5": 143, "q9uef7": 143, "q9uf02": 143, "q9ugm3": 143, "q9uhc9": 143, "q9uir0": 143, "q9ujz1": 143, "q9ukr5": 143, "q9ukv5": 143, "q9uky0": 143, "q9ul54": 143, "q9ulb1": 143, "q9uld8": 143, "q9ulh0": 143, "q9ult6": 143, "q9umd9": 143, "q9umf0": 143, "q9ung2": 143, "q9upu3": 143, "q9uq05": 143, "q9uqd0": 143, "q9y219": 143, "q9y286": 143, "q9y2j0": 143, "q9y3r0": 143, "q9y466": 143, "q9y4c0": 143, "q9y5r2": 143, "q9y5y6": 143, "q9y5y9": 143, "q9y698": 143, "q9y6y9": 143, "higher": [143, 145, 653, 654, 656, 657, 658, 659, 660, 915, 1169, 1318], "df_by_sourc": 145, "df_with_refer": 145, "df_column": 145, "df_dtype": 145, "allow_loop": [145, 872, 1319], "compon": [145, 150, 218, 224, 710, 881, 915, 1145, 1155, 1157, 1319, 1322], "when": [145, 915, 934, 967, 1001, 1106, 1144, 1145, 1155, 1157, 1281, 1285, 1286, 1287, 1288, 1289, 1290, 1293, 1295, 1296, 1318, 1319], "restrict": [145, 169, 172, 281, 334, 410, 604, 835, 1319], "activated_bi": 145, "entitylist": 145, "add_interact": 145, "readi": [145, 1319], "stand": [145, 1318], "usual": [145, 1319], "add_nod": 145, "nodes_by_label": 145, "noth": [145, 881, 958, 1019, 1093], "collect_complex_identifi": 145, "complex_identifi": 145, "collect_complex_label": 145, "complex_label": 145, "collect_complex": 145, "collect_curation_effort": 145, "collect_data_model": 145, "collect_degrees_direct": 145, "degrees_direct": 145, "collect_degrees_directed_in": 145, "degrees_directed_in": 145, "collect_degrees_directed_out": 145, "degrees_directed_out": 145, "collect_degrees_neg": 145, "degrees_neg": 145, "collect_degrees_negative_in": 145, "degrees_negative_in": 145, "collect_degrees_negative_out": 145, "degrees_negative_out": 145, "collect_degrees_non_direct": 145, "degrees_non_direct": 145, "collect_degrees_posit": 145, "degrees_posit": 145, "collect_degrees_positive_in": 145, "degrees_positive_in": 145, "collect_degrees_positive_out": 145, "degrees_positive_out": 145, "collect_degrees_sign": 145, "degrees_sign": 145, "collect_degrees_signed_in": 145, "degrees_signed_in": 145, "collect_degrees_signed_out": 145, "degrees_signed_out": 145, "collect_degrees_undirect": 145, "degrees_undirect": 145, "collect_ent": 145, "collect_evid": 145, "collect_identifi": 145, "collect_interaction_typ": 145, "collect_interact": [145, 958], "collect_interactions_0": 145, "interactions_0": 145, "collect_interactions_direct": 145, "interactions_direct": [145, 915], "collect_interactions_mutu": 145, "interactions_mutu": [145, 915], "collect_interactions_neg": 145, "interactions_neg": 145, "collect_interactions_non_direct": 145, "interactions_non_direct": 145, "collect_interactions_non_directed_0": 145, "interactions_non_directed_0": 145, "collect_interactions_posit": 145, "interactions_posit": 145, "collect_interactions_sign": 145, "interactions_sign": [145, 915], "collect_interactions_undirect": 145, "interactions_undirect": [145, 915], "collect_interactions_undirected_0": 145, "interactions_undirected_0": 145, "collect_label": 145, "collect_lncrna_identifi": 145, "lncrna_identifi": 145, "collect_lncrna_label": 145, "lncrna_label": 145, "collect_lncrna": 145, "collect_mirna_identifi": 145, "mirna_identifi": 145, "collect_mirna_label": 145, "mirna_label": 145, "collect_mirna": 145, "collect_protein_identifi": 145, "protein_identifi": 145, "collect_protein_label": 145, "protein_label": 145, "collect_protein": 145, "collect_refer": 145, "collect_resource_nam": 145, "collect_resource_names_via": 145, "resource_names_via": 145, "collect_resourc": 145, "collect_resources_via": 145, "resources_via": 145, "collect_small_molecule_identifi": 145, "small_molecule_identifi": 145, "collect_small_molecule_label": 145, "small_molecule_label": 145, "collect_small_molecul": 145, "collectri": 145, "immut": 145, "constructor": [145, 1281, 1293, 1296], "count_activated_bi": 145, "pleas": [145, 325, 326, 331, 443, 462, 690, 691, 915, 1123, 1318, 1319], "count_activ": 145, "bytes_or_buff": 145, "encod": [145, 256, 915, 996, 1029, 1089, 1090, 1319, 1322], "error": [145, 653, 654, 656, 657, 658, 659, 660, 996, 1064, 1318, 1322], "expos": [145, 1167, 1318], "buffer": [145, 256], "decod": 145, "handler": [145, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1103, 1104], "__str__": 145, "repr": 145, "sy": 145, "getdefaultencod": 145, "strict": [145, 677, 714, 811, 812, 915, 967, 1135, 1145, 1155, 1156, 1157, 1319], "count_complex_identifiers_by_data_model": 145, "count_complex_identifiers_by_interaction_typ": 145, "count_complex_identifiers_by_interaction_type_and_data_model": 145, "count_complex_identifiers_by_interaction_type_and_data_model_and_resourc": 145, "count_complex_identifiers_by_refer": 145, "count_complex_identifiers_by_resourc": 145, "count_complex_labels_by_data_model": 145, "count_complex_labels_by_interaction_typ": 145, "count_complex_labels_by_interaction_type_and_data_model": 145, "count_complex_labels_by_interaction_type_and_data_model_and_resourc": 145, "count_complex_labels_by_refer": 145, "count_complex_labels_by_resourc": 145, "count_complexes_by_data_model": 145, "count_complexes_by_interaction_typ": 145, "count_complexes_by_interaction_type_and_data_model": 145, "count_complexes_by_interaction_type_and_data_model_and_resourc": 145, "count_complexes_by_refer": 145, "count_complexes_by_resourc": 145, "count_curation_effort": 145, "count_curation_effort_by_data_model": 145, "count_curation_effort_by_interaction_typ": 145, "count_curation_effort_by_interaction_type_and_data_model": 145, "count_curation_effort_by_interaction_type_and_data_model_and_resourc": 145, "count_curation_effort_by_refer": 145, "count_curation_effort_by_resourc": 145, "count_data_models_by_data_model": 145, "count_data_models_by_interaction_typ": 145, "count_data_models_by_interaction_type_and_data_model": 145, "count_data_models_by_interaction_type_and_data_model_and_resourc": 145, "count_data_models_by_refer": 145, "count_data_models_by_resourc": 145, "count_degrees_directed_by_data_model": 145, "count_degrees_directed_by_interaction_typ": 145, "count_degrees_directed_by_interaction_type_and_data_model": 145, "count_degrees_directed_by_interaction_type_and_data_model_and_resourc": 145, "count_degrees_directed_by_refer": 145, "count_degrees_directed_by_resourc": 145, "count_degrees_directed_in_by_data_model": 145, "count_degrees_directed_in_by_interaction_typ": 145, "count_degrees_directed_in_by_interaction_type_and_data_model": 145, "count_degrees_directed_in_by_interaction_type_and_data_model_and_resourc": 145, "count_degrees_directed_in_by_refer": 145, "count_degrees_directed_in_by_resourc": 145, "count_degrees_directed_out_by_data_model": 145, "count_degrees_directed_out_by_interaction_typ": 145, "count_degrees_directed_out_by_interaction_type_and_data_model": 145, "count_degrees_directed_out_by_interaction_type_and_data_model_and_resourc": 145, "count_degrees_directed_out_by_refer": 145, "count_degrees_directed_out_by_resourc": 145, "count_degrees_negative_by_data_model": 145, "count_degrees_negative_by_interaction_typ": 145, "count_degrees_negative_by_interaction_type_and_data_model": 145, "count_degrees_negative_by_interaction_type_and_data_model_and_resourc": 145, "count_degrees_negative_by_refer": 145, "count_degrees_negative_by_resourc": 145, "count_degrees_negative_in_by_data_model": 145, "count_degrees_negative_in_by_interaction_typ": 145, "count_degrees_negative_in_by_interaction_type_and_data_model": 145, "count_degrees_negative_in_by_interaction_type_and_data_model_and_resourc": 145, "count_degrees_negative_in_by_refer": 145, "count_degrees_negative_in_by_resourc": 145, "count_degrees_negative_out_by_data_model": 145, "count_degrees_negative_out_by_interaction_typ": 145, "count_degrees_negative_out_by_interaction_type_and_data_model": 145, "count_degrees_negative_out_by_interaction_type_and_data_model_and_resourc": 145, "count_degrees_negative_out_by_refer": 145, "count_degrees_negative_out_by_resourc": 145, "count_degrees_non_directed_by_data_model": 145, "count_degrees_non_directed_by_interaction_typ": 145, "count_degrees_non_directed_by_interaction_type_and_data_model": 145, "count_degrees_non_directed_by_interaction_type_and_data_model_and_resourc": 145, "count_degrees_non_directed_by_refer": 145, "count_degrees_non_directed_by_resourc": 145, "count_degrees_positive_by_data_model": 145, "count_degrees_positive_by_interaction_typ": 145, "count_degrees_positive_by_interaction_type_and_data_model": 145, "count_degrees_positive_by_interaction_type_and_data_model_and_resourc": 145, "count_degrees_positive_by_refer": 145, "count_degrees_positive_by_resourc": 145, "count_degrees_positive_in_by_data_model": 145, "count_degrees_positive_in_by_interaction_typ": 145, "count_degrees_positive_in_by_interaction_type_and_data_model": 145, "count_degrees_positive_in_by_interaction_type_and_data_model_and_resourc": 145, "count_degrees_positive_in_by_refer": 145, "count_degrees_positive_in_by_resourc": 145, "count_degrees_positive_out_by_data_model": 145, "count_degrees_positive_out_by_interaction_typ": 145, "count_degrees_positive_out_by_interaction_type_and_data_model": 145, "count_degrees_positive_out_by_interaction_type_and_data_model_and_resourc": 145, "count_degrees_positive_out_by_refer": 145, "count_degrees_positive_out_by_resourc": 145, "count_degrees_signed_by_data_model": 145, "count_degrees_signed_by_interaction_typ": 145, "count_degrees_signed_by_interaction_type_and_data_model": 145, "count_degrees_signed_by_interaction_type_and_data_model_and_resourc": 145, "count_degrees_signed_by_refer": 145, "count_degrees_signed_by_resourc": 145, "count_degrees_signed_in_by_data_model": 145, "count_degrees_signed_in_by_interaction_typ": 145, "count_degrees_signed_in_by_interaction_type_and_data_model": 145, "count_degrees_signed_in_by_interaction_type_and_data_model_and_resourc": 145, "count_degrees_signed_in_by_refer": 145, "count_degrees_signed_in_by_resourc": 145, "count_degrees_signed_out_by_data_model": 145, "count_degrees_signed_out_by_interaction_typ": 145, "count_degrees_signed_out_by_interaction_type_and_data_model": 145, "count_degrees_signed_out_by_interaction_type_and_data_model_and_resourc": 145, "count_degrees_signed_out_by_refer": 145, "count_degrees_signed_out_by_resourc": 145, "count_degrees_undirected_by_data_model": 145, "count_degrees_undirected_by_interaction_typ": 145, "count_degrees_undirected_by_interaction_type_and_data_model": 145, "count_degrees_undirected_by_interaction_type_and_data_model_and_resourc": 145, "count_degrees_undirected_by_refer": 145, "count_degrees_undirected_by_resourc": 145, "count_entities_by_data_model": 145, "count_entities_by_interaction_typ": 145, "count_entities_by_interaction_type_and_data_model": 145, "count_entities_by_interaction_type_and_data_model_and_resourc": 145, "count_entities_by_refer": 145, "count_entities_by_resourc": 145, "count_evid": 145, "count_evidences_by_data_model": 145, "count_evidences_by_interaction_typ": 145, "count_evidences_by_interaction_type_and_data_model": 145, "count_evidences_by_interaction_type_and_data_model_and_resourc": 145, "count_evidences_by_refer": 145, "count_evidences_by_resourc": 145, "count_identifiers_by_data_model": 145, "count_identifiers_by_interaction_typ": 145, "count_identifiers_by_interaction_type_and_data_model": 145, "count_identifiers_by_interaction_type_and_data_model_and_resourc": 145, "count_identifiers_by_refer": 145, "count_identifiers_by_resourc": 145, "count_interaction_types_by_data_model": 145, "count_interaction_types_by_interaction_typ": 145, "count_interaction_types_by_interaction_type_and_data_model": 145, "count_interaction_types_by_interaction_type_and_data_model_and_resourc": 145, "count_interaction_types_by_refer": 145, "count_interaction_types_by_resourc": 145, "count_interactions_0_by_data_model": 145, "count_interactions_0_by_interaction_typ": 145, "count_interactions_0_by_interaction_type_and_data_model": 145, "count_interactions_0_by_interaction_type_and_data_model_and_resourc": 145, "count_interactions_0_by_refer": 145, "count_interactions_0_by_resourc": 145, "count_interactions_by_data_model": 145, "count_interactions_by_interaction_typ": [145, 1319], "count_interactions_by_interaction_type_and_data_model": 145, "count_interactions_by_interaction_type_and_data_model_and_resourc": 145, "count_interactions_by_refer": 145, "count_interactions_by_resourc": 145, "count_interactions_directed_by_data_model": 145, "count_interactions_directed_by_interaction_typ": 145, "count_interactions_directed_by_interaction_type_and_data_model": 145, "count_interactions_directed_by_interaction_type_and_data_model_and_resourc": 145, "count_interactions_directed_by_refer": 145, "count_interactions_directed_by_resourc": 145, "count_interactions_mutual_by_data_model": 145, "count_interactions_mutual_by_interaction_typ": 145, "count_interactions_mutual_by_interaction_type_and_data_model": 145, "count_interactions_mutual_by_interaction_type_and_data_model_and_resourc": 145, "count_interactions_mutual_by_refer": 145, "count_interactions_mutual_by_resourc": 145, "count_interactions_negative_by_data_model": 145, "count_interactions_negative_by_interaction_typ": 145, "count_interactions_negative_by_interaction_type_and_data_model": 145, "count_interactions_negative_by_interaction_type_and_data_model_and_resourc": 145, "count_interactions_negative_by_refer": 145, "count_interactions_negative_by_resourc": 145, "count_interactions_non_directed_0": 145, "count_interactions_non_directed_0_by_data_model": 145, "count_interactions_non_directed_0_by_interaction_typ": 145, "count_interactions_non_directed_0_by_interaction_type_and_data_model": 145, "count_interactions_non_directed_0_by_interaction_type_and_data_model_and_resourc": 145, "count_interactions_non_directed_0_by_refer": 145, "count_interactions_non_directed_0_by_resourc": 145, "count_interactions_non_directed_by_data_model": 145, "count_interactions_non_directed_by_interaction_typ": 145, "count_interactions_non_directed_by_interaction_type_and_data_model": 145, "count_interactions_non_directed_by_interaction_type_and_data_model_and_resourc": 145, "count_interactions_non_directed_by_refer": 145, "count_interactions_non_directed_by_resourc": 145, "count_interactions_positive_by_data_model": 145, "count_interactions_positive_by_interaction_typ": 145, "count_interactions_positive_by_interaction_type_and_data_model": 145, "count_interactions_positive_by_interaction_type_and_data_model_and_resourc": 145, "count_interactions_positive_by_refer": 145, "count_interactions_positive_by_resourc": 145, "count_interactions_signed_by_data_model": 145, "count_interactions_signed_by_interaction_typ": 145, "count_interactions_signed_by_interaction_type_and_data_model": 145, "count_interactions_signed_by_interaction_type_and_data_model_and_resourc": 145, "count_interactions_signed_by_refer": 145, "count_interactions_signed_by_resourc": 145, "count_interactions_undirected_0": 145, "count_interactions_undirected_0_by_data_model": 145, "count_interactions_undirected_0_by_interaction_typ": 145, "count_interactions_undirected_0_by_interaction_type_and_data_model": 145, "count_interactions_undirected_0_by_interaction_type_and_data_model_and_resourc": 145, "count_interactions_undirected_0_by_refer": 145, "count_interactions_undirected_0_by_resourc": 145, "count_interactions_undirected_by_data_model": 145, "count_interactions_undirected_by_interaction_typ": 145, "count_interactions_undirected_by_interaction_type_and_data_model": 145, "count_interactions_undirected_by_interaction_type_and_data_model_and_resourc": 145, "count_interactions_undirected_by_refer": 145, "count_interactions_undirected_by_resourc": 145, "count_labels_by_data_model": 145, "count_labels_by_interaction_typ": 145, "count_labels_by_interaction_type_and_data_model": 145, "count_labels_by_interaction_type_and_data_model_and_resourc": 145, "count_labels_by_refer": 145, "count_labels_by_resourc": 145, "count_lncrna_identifiers_by_data_model": 145, "count_lncrna_identifiers_by_interaction_typ": 145, "count_lncrna_identifiers_by_interaction_type_and_data_model": 145, "count_lncrna_identifiers_by_interaction_type_and_data_model_and_resourc": 145, "count_lncrna_identifiers_by_refer": 145, "count_lncrna_identifiers_by_resourc": 145, "count_lncrna_labels_by_data_model": 145, "count_lncrna_labels_by_interaction_typ": 145, "count_lncrna_labels_by_interaction_type_and_data_model": 145, "count_lncrna_labels_by_interaction_type_and_data_model_and_resourc": 145, "count_lncrna_labels_by_refer": 145, "count_lncrna_labels_by_resourc": 145, "count_lncrnas_by_data_model": 145, "count_lncrnas_by_interaction_typ": 145, "count_lncrnas_by_interaction_type_and_data_model": 145, "count_lncrnas_by_interaction_type_and_data_model_and_resourc": 145, "count_lncrnas_by_refer": 145, "count_lncrnas_by_resourc": 145, "count_mirna_identifiers_by_data_model": 145, "count_mirna_identifiers_by_interaction_typ": 145, "count_mirna_identifiers_by_interaction_type_and_data_model": 145, "count_mirna_identifiers_by_interaction_type_and_data_model_and_resourc": 145, "count_mirna_identifiers_by_refer": 145, "count_mirna_identifiers_by_resourc": 145, "count_mirna_labels_by_data_model": 145, "count_mirna_labels_by_interaction_typ": 145, "count_mirna_labels_by_interaction_type_and_data_model": 145, "count_mirna_labels_by_interaction_type_and_data_model_and_resourc": 145, "count_mirna_labels_by_refer": 145, "count_mirna_labels_by_resourc": 145, "count_mirnas_by_data_model": 145, "count_mirnas_by_interaction_typ": 145, "count_mirnas_by_interaction_type_and_data_model": 145, "count_mirnas_by_interaction_type_and_data_model_and_resourc": 145, "count_mirnas_by_refer": 145, "count_mirnas_by_resourc": 145, "count_partn": 145, "count_post_transcriptionally_activated_bi": 145, "count_post_transcriptionally_activ": 145, "count_post_transcriptionally_regulated_bi": 145, "count_post_transcriptionally_regul": 145, "count_post_transcriptionally_suppressed_bi": 145, "count_post_transcriptionally_suppress": 145, "count_post_translationally_activated_bi": 145, "count_post_translationally_activ": 145, "count_post_translationally_regulated_bi": 145, "count_post_translationally_regul": 145, "count_post_translationally_suppressed_bi": 145, "count_post_translationally_suppress": 145, "count_protein_identifiers_by_data_model": 145, "count_protein_identifiers_by_interaction_typ": 145, "count_protein_identifiers_by_interaction_type_and_data_model": 145, "count_protein_identifiers_by_interaction_type_and_data_model_and_resourc": 145, "count_protein_identifiers_by_refer": 145, "count_protein_identifiers_by_resourc": 145, "count_protein_labels_by_data_model": 145, "count_protein_labels_by_interaction_typ": 145, "count_protein_labels_by_interaction_type_and_data_model": 145, "count_protein_labels_by_interaction_type_and_data_model_and_resourc": 145, "count_protein_labels_by_refer": 145, "count_protein_labels_by_resourc": 145, "count_proteins_by_data_model": 145, "count_proteins_by_interaction_typ": 145, "count_proteins_by_interaction_type_and_data_model": 145, "count_proteins_by_interaction_type_and_data_model_and_resourc": 145, "count_proteins_by_refer": 145, "count_proteins_by_resourc": 145, "count_references_by_data_model": 145, "count_references_by_interaction_typ": 145, "count_references_by_interaction_type_and_data_model": 145, "count_references_by_interaction_type_and_data_model_and_resourc": 145, "count_references_by_refer": 145, "count_references_by_resourc": 145, "count_regulated_bi": 145, "count_regul": 145, "count_resource_names_by_data_model": 145, "count_resource_names_by_interaction_typ": 145, "count_resource_names_by_interaction_type_and_data_model": 145, "count_resource_names_by_interaction_type_and_data_model_and_resourc": 145, "count_resource_names_by_refer": 145, "count_resource_names_by_resourc": 145, "count_resource_names_via_by_data_model": 145, "count_resource_names_via_by_interaction_typ": 145, "count_resource_names_via_by_interaction_type_and_data_model": 145, "count_resource_names_via_by_interaction_type_and_data_model_and_resourc": 145, "count_resource_names_via_by_refer": 145, "count_resource_names_via_by_resourc": 145, "count_resources_by_data_model": 145, "count_resources_by_interaction_typ": 145, "count_resources_by_interaction_type_and_data_model": 145, "count_resources_by_interaction_type_and_data_model_and_resourc": 145, "count_resources_by_refer": 145, "count_resources_by_resourc": 145, "count_resources_via_by_data_model": 145, "count_resources_via_by_interaction_typ": 145, "count_resources_via_by_interaction_type_and_data_model": 145, "count_resources_via_by_interaction_type_and_data_model_and_resourc": 145, "count_resources_via_by_refer": 145, "count_resources_via_by_resourc": 145, "count_small_molecule_identifiers_by_data_model": 145, "count_small_molecule_identifiers_by_interaction_typ": 145, "count_small_molecule_identifiers_by_interaction_type_and_data_model": 145, "count_small_molecule_identifiers_by_interaction_type_and_data_model_and_resourc": 145, "count_small_molecule_identifiers_by_refer": 145, "count_small_molecule_identifiers_by_resourc": 145, "count_small_molecule_labels_by_data_model": 145, "count_small_molecule_labels_by_interaction_typ": 145, "count_small_molecule_labels_by_interaction_type_and_data_model": 145, "count_small_molecule_labels_by_interaction_type_and_data_model_and_resourc": 145, "count_small_molecule_labels_by_refer": 145, "count_small_molecule_labels_by_resourc": 145, "count_small_molecules_by_data_model": 145, "count_small_molecules_by_interaction_typ": 145, "count_small_molecules_by_interaction_type_and_data_model": 145, "count_small_molecules_by_interaction_type_and_data_model_and_resourc": 145, "count_small_molecules_by_refer": 145, "count_small_molecules_by_resourc": 145, "count_suppressed_bi": 145, "count_suppress": 145, "count_transcriptionally_activated_bi": 145, "count_transcriptionally_activ": 145, "count_transcriptionally_regulated_bi": 145, "count_transcriptionally_regul": 145, "count_transcriptionally_suppressed_bi": 145, "count_transcriptionally_suppress": 145, "curation_effort_by_data_model": 145, "curation_effort_by_interaction_typ": 145, "curation_effort_by_interaction_type_and_data_model": 145, "curation_effort_by_interaction_type_and_data_model_and_resourc": 145, "curation_effort_by_refer": 145, "curation_effort_by_resourc": [145, 915], "direction_consist": 145, "statist": [145, 915, 1319], "total_direct": 145, "shared_direct": 145, "overlap": [145, 915, 958, 1285, 1286, 1287, 1288, 1289, 1290, 1319], "consistent_edg": 145, "inconsistent_edg": 145, "inconsist": 145, "total_consist": 145, "sum": [145, 1029, 1062], "total_inconsist": 145, "entity_by_id": 145, "entity_by_label": 145, "evidences_by_data_model": 145, "evidences_by_interaction_typ": 145, "evidences_by_interaction_type_and_data_model": 145, "evidences_by_interaction_type_and_data_model_and_resourc": 145, "evidences_by_refer": 145, "evidences_by_resourc": 145, "extra_direct": [145, 958], "use_laudanna": 145, "use_str": 145, "curat": [145, 194, 289, 312, 322, 324, 325, 326, 328, 330, 331, 349, 446, 447, 572, 582, 584, 586, 595, 597, 598, 676, 678, 680, 681, 915, 921, 935, 968, 969, 1322], "give": [145, 867, 874, 878, 885, 915, 1109, 1164, 1167, 1176, 1319], "suffici": [145, 915, 971], "find_path": 145, "end": [145, 344, 498, 499, 500, 639, 649, 882, 886, 915, 1002, 1145, 1155, 1157, 1319], "maxlen": [145, 915, 1025, 1043, 1067, 1068, 1074, 1086, 1229, 1251], "minlen": 145, "silent": [145, 915, 1089, 1164, 1167, 1176], "find": [145, 595, 915, 993, 1050, 1053, 1079, 1133, 1135, 1141, 1145, 1155, 1164, 1305, 1318, 1319], "motif": [145, 318, 462, 539, 540, 541, 781, 880, 887, 915, 1192, 1319], "length": [145, 639, 645, 915, 997, 1000, 1016, 1041, 1112, 1215, 1305, 1319], "subnetwork": [145, 776, 915], "opposit": [145, 915, 1145, 1319], "maximum": [145, 242, 915], "step": [145, 411, 915, 958, 1101, 1109, 1145, 1319], "longest": [145, 915], "minimum": [145, 772, 775, 776], "indic": [145, 242, 776, 915, 1089, 1123, 1285, 1286, 1287, 1288, 1289, 1290, 1293, 1295, 1296, 1305, 1319], "progress": [145, 1089, 1167], "bar": [145, 915, 1109, 1167], "shorter": [145, 1041], "longer": [145, 324, 330, 1144, 1145, 1146, 1319], "remain": [145, 921, 1145, 1319], "motiv": 145, "let": [145, 1093, 1319], "sai": [145, 1319], "estrogen": [145, 1319], "esr1": [145, 1319], "transcription": 145, "translation": 145, "n": [145, 409, 410, 411, 604, 779, 915, 991, 1319], "post_transl": [145, 872, 958, 1319], "interest": [145, 690, 691, 879, 915, 1317, 1318, 1320], "feedback": [145, 462], "from_igraph": 145, "igraph": [145, 915, 932, 1126, 1129, 1278, 1281, 1293, 1295, 1296, 1317, 1318, 1321], "graph": [145, 384, 915, 1125, 1126, 1129, 1277, 1278, 1281, 1284, 1291, 1293, 1295, 1296, 1319, 1321], "from_pickl": 145, "pickl": [145, 419, 799, 808, 915, 921, 1144, 1148, 1317, 1318], "get_curation_effort": 145, "get_evid": 145, "get_organ": 145, "htp_interact": 145, "threshold": [145, 242, 771, 915, 1319], "50": [145, 915, 1314, 1319], "ignore_direct": 145, "throughput": [145, 174, 175, 279, 666, 899, 915, 968, 1319], "studi": [145, 899], "htp_refer": 145, "cite": [145, 174, 175], "init_network": [145, 915, 971, 1319], "reread": [145, 915], "redownload": [145, 915], "keep_raw": [145, 915], "top_cal": 145, "cache_fil": [145, 915], "first_n": 145, "among": [145, 862, 915, 958, 1031, 1035, 1050, 1053, 1079, 1145, 1155, 1176, 1319, 1322], "recurs": [145, 915, 993, 1000, 1001, 1030], "after": [145, 915, 1146, 1167, 1176, 1319, 1322], "few": [145, 747, 915, 1318, 1319, 1321], "interaction_by_id": 145, "similarli": [145, 915, 989, 1319], "interaction_by_label": 145, "label_a": 145, "label_b": 145, "load_from_pickl": [145, 915], "load_resourc": [145, 915, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1103, 1104, 1319], "clean": [145, 744, 915, 992, 1160, 1189, 1319], "attach": [145, 915, 1089, 1285, 1286, 1287, 1288, 1289, 1290], "input_format": [145, 915, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 1144, 1145, 1155, 1157, 1318, 1319], "networkinput": [145, 915, 958, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 1319], "download": [145, 169, 172, 174, 175, 180, 182, 183, 189, 191, 194, 199, 202, 203, 218, 234, 264, 283, 295, 296, 299, 305, 307, 344, 376, 378, 394, 397, 400, 412, 414, 419, 429, 446, 447, 462, 476, 477, 478, 479, 497, 509, 522, 529, 530, 556, 574, 607, 611, 612, 643, 646, 650, 664, 666, 677, 678, 681, 684, 685, 693, 719, 723, 745, 747, 748, 754, 763, 772, 775, 776, 777, 779, 791, 796, 797, 808, 809, 810, 812, 813, 827, 852, 854, 878, 901, 915, 1089, 1093, 1094, 1100, 1101, 1144, 1145, 1160, 1164, 1189, 1317, 1318, 1321], "moment": [145, 915, 1319], "clean_graph": [145, 915], "cach": [145, 183, 419, 461, 462, 646, 650, 678, 680, 681, 682, 723, 745, 813, 915, 1089, 1092, 1093, 1094, 1095, 1096, 1097, 1100, 1101, 1144, 1160, 1189, 1317, 1318], "bypass": [145, 915], "similar": [145, 639, 915, 986, 991, 1010, 1057, 1213, 1309, 1318, 1319, 1322], "dtype": 145, "mirna_target": [145, 958, 1319], "mrna": [145, 362, 363, 921, 1321, 1322], "numof_interactions_per_refer": 145, "counter": [145, 1047], "organisms_check": 145, "remove_mismatch": 145, "remove_nonspecif": 145, "scan": [145, 1319], "too": [145, 289, 915, 1319], "discrep": 145, "zero": [145, 763, 915, 997, 1288, 1289, 1299, 1304, 1307], "return_interact": 145, "post_transcriptionally_activated_bi": 145, "post_transcriptionally_activ": 145, "post_transcriptionally_regulated_bi": 145, "post_transcriptionally_regul": 145, "post_transcriptionally_suppressed_bi": 145, "post_transcriptionally_suppress": 145, "post_translationally_activated_bi": 145, "post_translationally_activ": 145, "post_translationally_regulated_bi": 145, "post_translationally_regul": 145, "post_translationally_suppressed_bi": 145, "post_translationally_suppress": 145, "random_interact": 145, "pick": [145, 1145, 1156], "random": [145, 915, 1016, 1112, 1145, 1156, 1167, 1319], "regulated_bi": 145, "remove_interact": 145, "remove_nod": 145, "leav": 145, "remove_zero_degre": 145, "reset": [145, 921, 1117, 1145, 1146], "save_to_pickl": [145, 915, 1319], "save": [145, 808, 915, 921, 942, 944, 974, 976, 1144, 1298, 1302, 1305, 1306, 1317, 1318], "summaries_tab": [145, 915], "outfil": [145, 320, 687, 915, 932, 941, 973], "return_t": [145, 915], "label_typ": 145, "write": [145, 915, 932, 1025, 1074, 1106, 1144, 1164, 1299, 1300, 1301, 1303, 1304, 1305, 1307, 1308, 1310, 1317, 1318], "suppressed_bi": 145, "suppress": [145, 1319], "to_igraph": 145, "original_resourc": 145, "transcriptionally_activated_bi": 145, "transcriptionally_activ": 145, "transcriptionally_regulated_bi": 145, "transcriptionally_regul": 145, "transcriptionally_suppressed_bi": 145, "transcriptionally_suppress": 145, "by_resourc": [147, 913, 914], "by_categori": [147, 913, 914, 915], "percent": [147, 914, 1109], "shared_res_cat": [147, 913, 914], "unique_res_cat": [147, 913, 914], "percent_res_cat": [147, 914], "shared_cat": [147, 913, 914], "unique_cat": [147, 913, 914], "percent_cat": [147, 914], "resource_cat": [147, 913, 914], "cat_resourc": [147, 913, 914], "13": [147, 262, 322, 446, 447, 862, 914, 1317, 1319], "15": [147, 320, 914, 1078, 1319], "14": [147, 322, 449, 914, 958, 1317, 1319], "11": [147, 320, 322, 862, 913, 914, 1317, 1319], "12": [147, 322, 629, 862, 913, 914, 1078, 1106, 1302, 1305, 1307, 1317, 1319], "use_omnipath": [149, 917], "licens": [150, 151, 194, 443, 450, 915, 941, 958, 973, 1317, 1321], "web": [150, 181, 192, 344, 715, 879, 939, 1144, 1213, 1318, 1319, 1321], "page": [150, 199, 344, 942, 958, 974, 1318, 1319, 1320, 1322], "biomart": [150, 1144, 1148, 1319], "goos": [150, 374, 379, 384, 388], "templat": [150, 1319], "configur": [150, 915, 1319], "copyright": [151, 1319], "point": [151, 595, 639, 726, 912, 915, 958, 1020, 1047, 1318, 1319], "loglevel": [152, 915, 1106], "session": [152, 915, 932, 958, 1317, 1318], "keep_in_complex_interact": 157, "expans": [157, 763], "sif": [158, 915, 1319, 1321], "distribut": [158, 915, 1318], "offici": 158, "websit": [158, 835], "url": [168, 170, 199, 309, 344, 351, 372, 754, 891, 915, 1089, 1102, 1319, 1322], "commonli": [169, 1106], "shown": [169, 172, 178, 810, 1298, 1319], "biogps_dataset": [169, 171, 172], "profil": [170, 171], "biogpsdataset": 171, "microarrai": [171, 172, 178, 179, 180, 867, 1144, 1319], "probe": [171, 172, 178, 180, 867, 1144, 1319], "htp_limit": [174, 175], "ltp": [174, 175], "low": [174, 175, 279, 666, 915, 968], "physic": [175, 772, 775, 776], "multi": [175, 293, 881, 1319, 1321], "source_organ": 177, "target_organ": 177, "10090": [177, 392, 763, 915, 1318, 1319, 1322], "orthologu": [177, 1133, 1135], "array_typ": 178, "peptid": [178, 180, 181, 1319], "webpag": [178, 199, 299, 754, 808, 809, 810, 813, 852, 1164, 1319, 1322], "biomart_microarray_typ": 178, "vendor": 180, "minut": [180, 1106, 1318, 1319], "affi": [180, 1319], "illumina": 180, "agil": [180, 1319], "codelink": [180, 1319], "phalanx": 180, "hsapiens_gene_ensembl": 181, "servic": [181, 344, 384, 606, 607, 710, 879, 939, 1144, 1213, 1318, 1319, 1321], "martview": 181, "repositori": [182, 852, 1321], "bioservic": [182, 184, 187], "python": [182, 411, 915, 1116, 1164, 1229, 1251, 1318, 1319, 1321, 1322], "individu": [182, 509, 1145, 1155, 1164, 1319], "pars": [182, 410, 411, 643, 655, 1167, 1195, 1319], "enter": 182, "model_id": [183, 187], "integr": [183, 769, 971, 1317, 1319, 1321], "fetch": [184, 659, 712, 879, 915, 1278, 1319], "smbl": 184, "submiss": 184, "date": [184, 325, 326, 331, 380, 384, 821, 915, 1106, 1213, 1319], "author": [184, 312, 541, 690, 691], "verbos": [185, 464, 1096, 1097, 1106, 1107, 1115, 1319, 1321], "eg": 187, "descript": [187, 707, 886, 915, 921, 941, 942, 943, 944, 1109, 1215, 1240, 1319, 1321], "associ": [187, 264, 312, 696, 697, 775, 912, 915, 1281, 1293, 1295, 1296, 1319], "ma": 189, "ayan": 189, "2005": [189, 441, 1319], "scraper": 192, "cancerdrugs_db": [192, 193], "pubchem": [193, 195, 222, 537, 1319], "world": [194, 1059], "describ": [195, 204, 218, 606, 921, 926, 1213], "funciton": 197, "supp_url": 199, "article_url": 199, "supplementari": [199, 353, 354, 355, 356, 532, 706, 707, 719, 754, 851, 857, 865, 943, 975], "materi": [199, 706, 754], "journal": [199, 754, 1164], "articl": [199, 582, 943, 975, 1319], "extend": [201, 202, 203, 204, 1176, 1319], "shellycod": [201, 202, 203, 204], "core": [201, 202, 203, 204, 293, 865, 1318, 1319, 1321], "cellcall_download_al": 202, "incomprehens": [210, 211, 212, 233, 234, 235], "fall": [210, 211, 212, 233, 234, 235, 915], "back": [210, 211, 212, 233, 234, 235, 1145], "fhe": 211, "r": [211, 323, 915, 1078, 1089, 1090, 1318, 1319, 1322], "rda": 211, "raw": [211, 260, 498, 612, 677, 706, 726, 763, 1164, 1191, 1192, 1293, 1295, 1296, 1318, 1319], "ligand_receptor": [212, 958, 1319, 1321], "cofactor": 212, "agonist": 212, "antagonist": 212, "coreceptor": 212, "ligand_loc": 214, "receptor_loc": 214, "rna": [215, 216, 217, 218, 219, 220, 221, 222, 223, 1321], "societi": [215, 216, 217, 218, 219, 220, 221, 222, 223], "represent": [217, 1106, 1319], "cid": [222, 710], "cellinker_complexes_raw": 224, "guess": [224, 1145, 1150], "receptor_class": 226, "peripher": [226, 1319, 1322], "secret": [226, 281, 562, 1089, 1319, 1322], "secreted_class": 226, "integrin": [226, 1319], "add_complex_annot": 231, "deprec": [231, 307, 370, 371, 382, 915], "wrong": [231, 915, 1319], "tcm": [233, 235], "zju": [233, 235], "edu": [233, 235, 450, 586], "cn": [233, 235, 586, 915, 1319], "php": [233, 235, 450, 586, 1089, 1319], "filenam": [234, 915, 943, 944, 975, 976, 1089, 1091, 1167, 1277, 1313, 1319], "lr_pair": 234, "gene_info": 234, "gene2ensembl": 234, "immun": 237, "teichlab": 237, "celltypist_wiki": 237, "standard_rel": 239, "pchembl_value_non": 239, "todo": [239, 915], "pchembl": [239, 915], "standard": [239, 349, 915, 995, 1145, 1155, 1157, 1213, 1215, 1257, 1319], "standard_unit": 239, "why": [239, 1319], "data_validity_com": 239, "assai": [240, 915], "document": [241, 915, 1025, 1106, 1318, 1319, 1320], "convers": [241, 879, 915, 1144, 1317, 1319, 1321], "max_phase_threshold": 242, "phase": 242, "namedtupl": [242, 243, 333], "mechan": [243, 781, 1319], "variant": [246, 247, 248, 312, 498, 499, 500, 1318, 1319], "citat": 247, "int_typ": 250, "csv": [252, 257, 325, 326, 331, 706, 707, 1319], "old": [252, 325, 326, 331, 852, 945, 958, 961, 963, 1109, 1145, 1155, 1157, 1318, 1319], "glom": [253, 254, 344, 607], "spec": [253, 254, 344, 607, 915], "protect": 253, "coalesc": 253, "io": [254, 255, 267, 268, 344], "depth": [254, 741, 999, 1002], "read": [255, 256, 257, 344, 532, 533, 534, 535, 541, 646, 655, 706, 758, 915, 958, 1090, 1093, 1100, 1101, 1144, 1148, 1164, 1213, 1317, 1318, 1321], "fileobject": 256, "sep": [256, 915, 1042, 1046, 1061, 1065, 1091, 1172], "sep2": 256, "rem": 256, "hdr": 256, "open": [256, 412, 715, 1089, 1090, 1106, 1164, 1167, 1318, 1319], "stringio": 256, "subfield": 256, "prefix": [256, 915, 1046, 1109, 1167, 1319], "header": [256, 320, 461, 462, 869, 872, 876, 915, 932, 1089, 1091, 1195, 1239, 1319], "replac": [256, 379, 384, 821, 915, 1089, 1319], "xls_file": 257, "sheet": [257, 351], "use_openpyxl": 257, "m": [257, 604, 915, 1106, 1319], "excel": [257, 1319], "xl": 257, "return_detail": 262, "intact": [262, 279, 752, 965, 966, 1145, 1319], "ebi": [262, 606, 607, 816, 1213], "uk": [262, 816, 1213], "nar": [262, 1319], "oxfordjourn": [262, 1319], "earli": 262, "2014": [262, 442, 449, 852, 1164], "gku975": 262, "pdf": [262, 915, 1078, 1276, 1277, 1313], "cellular": [264, 921, 1317, 1318], "compart": 264, "score_threshold": [265, 405, 772, 774, 775, 776, 915], "connectomedb2020": [267, 268, 1319], "asrhou": [267, 268], "github": [267, 268, 1318, 1319], "natmi": [267, 268], "user": [272, 281, 310, 333, 334, 335, 336, 337, 338, 772, 775, 776, 915, 923, 934, 1091, 1116, 1164, 1318, 1319], "passwd": [272, 310, 333, 334, 335, 336, 337, 338, 915, 1091], "credentials_fnam": [272, 333, 334, 335, 336, 337, 338], "cosmic_credenti": 272, "driver": [272, 481, 915], "sanger": 272, "catalogu": 272, "somat": 272, "mutat": [272, 889, 915], "include_unknown_typ": 274, "consensuspathdb": [278, 279], "cpdb_interact": 279, "hprd": [279, 915, 966, 1319], "biogrid": [279, 965, 966, 1319], "phosphopoint": 279, "mint": 279, "bind": [279, 646, 772, 775, 880, 915, 1123, 1319], "from_fil": 281, "requir": [281, 747, 772, 775, 776, 849, 991, 1145, 1167, 1318, 1319], "password": [281, 333, 334, 335, 336, 337, 338, 1164], "_credenti": 281, "directori": [281, 650, 915, 921, 987, 1106, 1117, 1318, 1319, 1321], "unchang": [281, 714, 763, 996, 999, 1002, 1019, 1072, 1073, 1125], "runtimeerror": 281, "catalyt": 283, "relation_typ": 289, "diseas": [289, 290, 312, 425, 505, 506, 507, 508, 509, 512, 518, 617, 618, 653, 659, 704, 915], "directevid": 289, "chemical_gen": 289, "chemical_diseas": 289, "disease_pathwai": 289, "chemical_phenotyp": 289, "gene_diseas": 289, "vocabulary_typ": 290, "vocabulari": [290, 312], "chemic": [290, 772, 1143, 1213], "anatomi": 290, "phenotyp": [290, 312, 424, 425, 427], "compendium": 292, "experi": [292, 595, 1319], "long": [293, 1145, 1204, 1318, 1319], "matrix": [293, 556, 559, 604, 915, 1164, 1322], "wide": [293, 1319], "html": [299, 344, 365, 614, 615, 643, 813, 942, 944, 974, 976, 1164, 1229, 1251, 1319, 1322], "rescu": [300, 852], "interacton": 306, "Will": 307, "soon": [307, 370, 371, 382, 915, 1319], "genesymbol": [307, 415, 533, 915, 1145, 1151, 1152, 1155, 1157, 1224, 1318, 1319, 1322], "core_onli": 309, "direct_onli": 309, "small_scale_onli": 309, "reason": [310, 462, 915, 923, 1318, 1319], "binary_data": [310, 1089], "curl": [310, 1164, 1322], "below": [310, 1001, 1011, 1063, 1078, 1106, 1318, 1319], "authent": 312, "success": [312, 1144, 1145], "get_ddas_that_share_gen": 312, "p_valu": 312, "float": [312, 604, 915, 1014, 1015, 1020, 1023, 1044, 1047, 1057, 1058, 1060, 1073, 1298], "diseasediseaseassoci": 312, "union": [312, 426, 864, 915, 935, 989, 990, 991, 993, 1007, 1009], "icd9cm": 312, "icd10": 312, "mesh": 312, "omim": 312, "efo": 312, "nci": 312, "hpo": 312, "mondo": 312, "ordo": 312, "100": [312, 653, 654, 656, 657, 658, 659, 660, 915, 1176, 1318, 1319], "els": [312, 509, 915, 1078, 1145], "uml": [312, 915], "cui": [312, 851], "dda": 312, "animal_model": 312, "befre": 312, "cgi": [312, 796, 797], "clingen": 312, "clinvar": 312, "ctd_human": 312, "ctd_mous": 312, "ctd_rat": 312, "genomics_england": 312, "gwascat": 312, "gwasdb": 312, "lhgdn": 312, "mgd": 312, "orphanet": 312, "psygenet": 312, "rgd": 312, "p": [312, 371, 373, 374, 375, 379, 380, 381, 383, 384, 385, 387, 388, 389, 390, 696, 697, 915, 1106, 1126, 1129, 1319], "jaccard": [312, 915, 1023], "get_ddas_that_share_vari": 312, "get_gdas_by_diseas": 312, "min_scor": 312, "max_scor": 312, "min_ei": 312, "max_ei": 312, "disease_typ": 312, "disease_class": 312, "min_dsi": 312, "max_dsi": 312, "min_dpi": 312, "max_dpi": 312, "min_pli": 312, "max_pli": 312, "genediseaseassoci": 312, "hgnc": [312, 1145, 1155, 1157, 1319], "avali": 312, "gda": 312, "min": [312, 1319], "rang": [312, 915, 1319], "max": [312, 915, 993], "c01": 312, "c04": 312, "c05": 312, "c06": 312, "c07": 312, "c08": 312, "c09": 312, "c10": 312, "c11": 312, "c12": 312, "c13": 312, "c14": 312, "c15": 312, "c16": 312, "c17": 312, "c18": 312, "c19": 312, "c20": 312, "c21": 312, "c22": 312, "c23": 312, "c24": 312, "c25": 312, "c26": 312, "f01": 312, "f02": 312, "f03": 312, "dsi": 312, "dpi": 312, "pli": 312, "get_gdas_by_gen": 312, "get_gdas_by_sourc": 312, "get_gdas_by_uniprot": 312, "get_vdas_by_diseas": 312, "variantdiseaseassoci": 312, "dbsnp": 312, "vda": 312, "get_vdas_by_gen": 312, "get_vdas_by_sourc": 312, "get_vdas_by_vari": 312, "ddi": [318, 915], "dmi": [318, 915], "none_valu": 320, "uniprot_a": 320, "uniprot_b": 320, "isoform_a": [320, 885], "isoform_b": [320, 885], "exp_method": 320, "role_a": 320, "role_b": 320, "binding_site_range_a": 320, "binding_site_range_b": 320, "domains_a": 320, "domains_b": 320, "ptm_residue_a": 320, "ptm_residue_b": 320, "ptm_type_mi_a": 320, "ptm_type_mi_b": 320, "ptm_type_a": 320, "ptm_type_b": 320, "19": [320, 1319], "ptm_res_name_a": 320, "ptm_res_name_b": 320, "mutations_a": 320, "mutations_b": 320, "23": [320, 1106, 1319], "mutation_effects_a": 320, "mutation_effects_b": 320, "domains_interpro_a": 320, "26": [320, 1319], "domains_interpro_b": 320, "28": [320, 1319], "chipseq": 322, "coexp": 322, "curated_sourc": 322, "chipseq_sourc": 322, "predicted_sourc": 322, "coexp_sourc": 322, "all_sourc": 322, "kegg_pathwai": [322, 324, 330, 915], "packag": [323, 915, 1318, 1319], "only_cur": [324, 325, 326, 328, 330, 331, 915], "confidence_pairwis": [324, 330], "regulon": [324, 330, 915, 1322], "chip": [324, 325, 326, 328, 330, 331, 915], "seq": [324, 325, 326, 328, 330, 331, 886, 887, 889, 915, 1075, 1076, 1077, 1078, 1081, 1176, 1319], "pwm": [324, 325, 326, 328, 330, 331, 915], "hocomoco": [324, 325, 326, 328, 330, 331, 915], "jaspar": [324, 325, 326, 328, 330, 331, 915], "matric": [324, 325, 326, 328, 330, 331, 915], "gtex": [324, 325, 326, 328, 330, 331, 656, 659, 915], "aracn": [324, 325, 326, 328, 330, 331, 915], "public": [324, 330, 743, 852], "version": [324, 325, 326, 330, 331, 443, 446, 447, 621, 629, 852, 915, 958, 1205, 1318, 1319, 1321], "2018": [325, 326, 331], "dorothea_interact": [325, 326, 331], "wrapper": [333, 1089, 1109, 1119, 1146, 1164, 1313, 1319], "xml": [333, 410, 412, 541, 1164, 1167, 1319], "drugbank_drugs_ful": 333, "drugbank_targets_ful": 333, "mail": [333, 334, 335, 336, 337, 338, 1164], "account": [333, 334, 335, 336, 337, 338, 1319], "drugbank_external_ids_ful": 333, "drugbank_properties_ful": 333, "statu": [334, 1089, 1109, 1167, 1319], "cross": [335, 426, 479, 1215, 1225, 1246], "pharma_act": [336, 338], "pharmacolog": [336, 338], "target_id_typ": [337, 342, 694, 879, 1144, 1145, 1146, 1147, 1155, 1156, 1157, 1319], "ca": [337, 342, 1319], "inchikei": [337, 342, 1319], "inchi": [337, 342, 537, 710, 1213, 1319], "smile": [337, 342, 411, 537, 710, 1213, 1319], "formula": 337, "kegg_compound": 337, "kegg_drug": 337, "pubchem_compound": 337, "pubchem_subst": 337, "chebi": [337, 515, 537, 1319], "chembl": [337, 537, 915, 1213, 1319, 1321], "pharmgkb": 337, "het": [337, 1319], "login": 337, "credenti": [337, 915], "central": [340, 341, 342, 958, 1319], "comment": [341, 1319], "retain": 341, "inn": 342, "q": [344, 704, 915], "pagin": [344, 1319], "page_length": 344, "size_param": 344, "page_param": 344, "by_pag": 344, "page_field": 344, "total_field": 344, "totalpag": 344, "record_nam": 344, "append": [344, 915, 932, 989, 990], "until": [344, 915, 999, 1319, 1320], "per": [344, 775, 776, 915, 995, 1164], "readthedoc": 344, "latest": [344, 414, 1319], "tutori": [344, 1318, 1319], "downlod": 349, "manual": [349, 968, 969, 1106, 1319], "gold": 349, "init_url": [351, 1089], "s11": [353, 354, 355, 356], "1016": [353, 354, 355, 356, 857], "j": [353, 354, 355, 356, 857], "isci": [353, 354, 355, 356], "2019": [353, 354, 355, 356, 706, 915, 1319], "026": [353, 354, 355, 356], "sheikh": [353, 354, 355, 356], "metadata": [360, 899], "bs4": [366, 746, 809, 813], "beautifulsoup": [366, 746, 809], "summari": [367, 915, 921, 1305, 1321], "text": [367, 706, 915, 1068, 1086, 1106, 1319], "module_nam": 368, "method_nam": 368, "go_id": 370, "slim": 371, "names_onli": 371, "aspect": [371, 373, 374, 375, 379, 380, 381, 383, 384, 385, 387, 388, 389, 390, 862, 865, 915, 1123, 1125, 1126, 1129, 1319, 1322], "f": [371, 373, 374, 375, 379, 380, 381, 383, 384, 385, 387, 388, 389, 390, 915, 1013, 1078, 1085, 1126, 1129], "quickgo": [371, 373, 375, 380, 383, 384, 385, 387, 389], "ancestor": [373, 374, 375, 386, 1123, 1125], "cellular_compon": [373, 374, 375, 379, 380, 381, 383, 384, 385, 387, 388, 389, 390], "molecular_funct": [373, 374, 375, 379, 380, 381, 383, 384, 385, 387, 388, 389, 390], "biological_process": [373, 374, 375, 379, 380, 381, 383, 384, 385, 387, 388, 389, 390], "amigo": [374, 379, 381, 384, 388, 390], "evidence_cod": [376, 378], "goa": [376, 378, 380, 1319], "recent": [379, 380, 384, 838, 1145, 1318, 1319], "go_annotations_solr": 379, "mysql": [379, 384, 723, 915, 1319, 1321], "sinc": [379, 384, 989, 1319], "dec": [379, 384], "2016": [379, 384, 915], "unfortun": [379, 384, 1319], "ceas": [379, 384], "flexibl": [379, 384, 958, 1319], "perform": [379, 384, 461, 462, 915, 1001, 1089, 1100, 1101, 1143, 1319], "solr": [379, 381, 384, 390], "far": [379, 384], "is_a": 380, "part_of": 380, "go_annotations_goa": 380, "contrari": 380, "super": 380, "slow": [380, 723, 1089, 1319], "now": [381, 541, 1109, 1164, 1319], "implement": [381, 509, 794, 881, 926, 949, 1109, 1145, 1157, 1164, 1281, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1295, 1296, 1321, 1322], "ye": [382, 879], "quickgo_download_s": [383, 385], "descend": [383, 384, 385, 386, 915, 1123, 1125], "go_terms_solr": [383, 385], "go_descendants_quickgo": 384, "unabl": 384, "nice": [384, 1319], "desc": [386, 1298, 1299, 1305, 1308, 1310], "turn": [386, 1093, 1094, 1095], "swap": [386, 1063, 1064, 1065, 1145], "upper": [387, 388, 389, 390, 691, 1298, 1304], "lower": [387, 388, 389, 390, 691, 915, 1167, 1298, 1304, 1319], "graph_attr": 394, "vertex_attr": [394, 915], "edge_attr": [394, 915], "endogen": 397, "process_interact": 397, "process_complex": 397, "guid": [397, 1318, 1319], "pharmacologi": 397, "supplement": [400, 401], "s3": [400, 401, 779], "2012": [400, 401, 532, 915], "150": [400, 401, 1318, 1319], "1068": [400, 401], "1081": [400, 401], "75": 405, "only_human": [405, 939], "only_sourc": [405, 932], "only_method": 405, "itert": 408, "return_df": [409, 725, 1319], "head": [409, 410, 411, 1319], "weight": [409, 696, 697, 1215, 1319], "though": [409, 1319, 1322], "guarante": [409, 915, 1319], "meaning": 409, "output": [409, 723, 775, 915, 932, 995, 1213, 1319], "id_field": 409, "simple_field": 409, "peek": [409, 410, 411, 1319], "schema": [410, 411, 1319], "cover": [410, 835, 915, 932, 1319], "nearli": 410, "don": [410, 912, 915, 1035, 1079, 1145, 1155, 1318, 1319, 1320, 1322], "within": [410, 1109, 1117, 1281, 1293, 1296, 1318, 1319, 1322], "task": [410, 1109, 1305], "own": [410, 934, 1319, 1321], "interst": 410, "deepli": 410, "nest": [410, 411, 498, 499, 500, 915, 1117, 1319], "named_field": 411, "simpl": [411, 915, 958, 994, 1004, 1011, 1027, 1176, 1318, 1319, 1322], "sequeti": 411, "special": [411, 645, 915, 958, 993, 1319, 1321], "sub": 411, "expand": [411, 763, 1002, 1169, 1171, 1174, 1176, 1178, 1179, 1319], "Be": 411, "care": [411, 1145, 1146, 1155, 1319], "combinatori": [411, 1319], "rown": 411, "35": [411, 1319], "excess": 411, "time": [411, 462, 477, 808, 915, 958, 1106, 1144, 1145, 1146, 1318, 1319], "block": 411, "synonym": [411, 426, 710, 810, 881, 958, 1201, 1319], "substitu": [411, 1319], "iterpars": [412, 1167], "releas": [414, 1317, 1319], "pointer": [414, 1089, 1090], "gi": [415, 1145, 1155, 1157], "partner_rol": 418, "unambigu": [418, 421, 1176, 1319], "use_cach": [419, 420, 421, 422], "plasma": [419, 915, 1319, 1322], "membran": [419, 561, 915, 1319, 1322], "receptom": 419, "intermedi": [419, 646, 915, 1145, 1319], "unmaintain": [421, 1145, 1155, 1157], "probabl": [421, 915, 1095, 1319], "never": [421, 1319], "tree": [426, 1319, 1321], "def": [426, 1013, 1078, 1319], "xref": [426, 659, 660], "in_vivo": [429, 430, 431], "min_confid": [438, 768, 769], "rual": 441, "nlm": [441, 442], "nih": [441, 442, 652, 655, 659, 714], "gov": [441, 442, 655], "16189514": 441, "rolland": [442, 449], "25416956": 442, "unbias": [443, 449, 450, 1319], "interactom": [443, 449, 450, 1319], "iii": [443, 450, 1319], "hi": [443, 449, 450], "unpublish": 443, "condit": [443, 958, 967, 1011, 1027, 1319], "carefulli": 443, "baderlab": 443, "lit": [446, 447], "bm": [446, 447], "2013": 446, "ccsb": [446, 447], "luck": 448, "2020": [448, 857, 865, 958], "ii": [449, 1319], "scale": [449, 450, 892, 893, 894, 895, 1293, 1295, 1296, 1319], "screen": [449, 450, 1319], "fname": [450, 873, 915, 1106, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1319], "preliminari": 450, "vidal": [450, 1319], "lab": [450, 529, 530, 852, 854, 1318, 1319], "dfci": 450, "harvard": 450, "h_sapien": 450, "dload_trk": 450, "interaction3d": 454, "chain": [454, 469, 639, 649, 690, 793, 795, 882, 1159, 1160, 1162, 1319], "pdb": [454, 469, 470, 649, 691, 795, 797, 883, 884, 885, 915, 1189, 1319, 1322], "stuctur": 454, "pfam": [454, 882, 915], "subfamili": [456, 1319], "uniprotkb_ac": [461, 462], "mydomain": [461, 462], "hmm": [461, 462], "maxwait": [461, 462], "180": [461, 462, 1316], "part_siz": [461, 462], "get_ielm_hug": 461, "chunk": [462, 659], "retri": [462, 1089], "failur": [462, 1072, 1317], "reduc": [462, 1075, 1078, 1081, 1319], "suppli": [462, 539, 540, 915, 965, 1167], "what": [462, 915, 1099, 1145, 1146, 1319, 1322], "understand": [462, 1319], "detect": [462, 812, 915], "wait": 462, "again": [462, 958, 1093, 1176, 1285, 1286, 1287, 1288, 1289, 1290, 1318, 1319], "send": [462, 1278], "understood": [470, 1281], "miscor": 472, "complex_expans": 472, "only_id": 472, "smaller": [472, 1319, 1322], "footprint": 472, "takada": 474, "2007": [474, 851], "1186": 474, "gb": [474, 1318, 1319], "215": [474, 1319], "entri": [476, 477, 478, 479, 496, 992, 997, 1078, 1319], "page_s": 477, "200": [477, 1106, 1304], "review": [477, 835, 837, 840, 841, 844, 847, 848, 879, 1141, 1145, 1319], "tax_id": 477, "uniprotkb": [477, 694, 1319], "db_type": 479, "enzyme_isoform": [485, 1319], "substrate_isoform": [485, 1319], "ptm_type": [485, 1319], "resaa": [485, 1319], "resnum": [485, 1159, 1160, 1319], "dbget": 496, "interfac": [496, 691, 879, 880, 912, 915, 994, 1139, 1299, 1300, 1301, 1304, 1305, 1307, 1308, 1310, 1318, 1319], "jp": 496, "bin": [496, 1302], "www_bget": 496, "max_entity_vari": [498, 499, 500], "medicu": [498, 499, 500, 971], "flatten": [498, 1013, 1125], "Then": [498, 1093, 1145, 1155, 1167, 1319], "largest": [498, 499, 500, 1164], "hundr": [498, 499, 500, 1164, 1319], "combinatiori": [498, 499, 500], "regulatori": [500, 685, 686, 687, 966, 1321], "join": [509, 1024, 1319], "asynchron": 509, "togeth": [509, 879, 1319], "kirouac": 524, "2010": 524, "embopress": [524, 851], "doi": [524, 712, 714, 851], "1038": [524, 851], "msb": 524, "71": 524, "signalingflow": 529, "signalingdirect": 530, "li": 532, "get_li2012": [533, 534, 535], "brand": [537, 915], "compani": [537, 1319], "load_lmpid": [539, 540, 915], "lmpid_data_pubmed_ref": 541, "redistribut": [541, 891, 958, 1319, 1321], "matrisomedb": [556, 915], "extracellular": [556, 559, 865, 1319, 1322], "subclass": [556, 779, 1319], "ecm": [559, 1319, 1322], "cdd201287": 582, "c1": [584, 1319], "accurasci": 584, "strong": [586, 923, 1319], "experiment": [586, 915, 1319], "cuhk": 586, "mirtarbase_2019": 586, "best": [595, 915, 993, 1319], "our": [595, 1317, 1318], "knowledg": [595, 706], "paper": [595, 1319, 1322], "test": [595, 912, 915, 958, 1027, 1089, 1321], "outcom": [595, 1027], "autophagi": 597, "autophagyregul": 597, "nrf2": [598, 962, 1319], "nrf2ome": [598, 1319], "organism_a": 604, "organism_b": 604, "rel_typ": 604, "pairwis": 604, "genom": [604, 1145, 1155, 1157], "omabrows": 604, "home": [604, 796, 797, 958, 961, 1319], "genome_id_a": 604, "genome_id_b": 604, "resembl": 604, "metric": [604, 915, 1213], "full_config": 606, "config": [606, 986], "ol": 607, "listof_ontologi": 607, "simpli": [607, 915, 1144, 1319], "section": [607, 915, 1041, 1164, 1215, 1240, 1319], "se": [614, 615], "disease_id": 617, "pathogen_taxid": 617, "pathogen": [617, 618, 1321], "pc_label": 621, "by_interact": 629, "integ": [639, 817, 892, 893, 894, 895, 1021, 1285, 1286, 1287, 1288, 1289, 1290, 1293, 1295, 1296, 1305, 1319], "previou": 639, "constitut": [640, 1176, 1319], "stoichiometri": [640, 741, 881, 1319], "analysi": [641, 915, 1319, 1321], "resolut": [641, 781, 915], "num": [645, 1014, 1020, 1021, 1073], "_ref": 645, "phosphoprotein": [646, 1319], "inner": [649, 915, 999, 1004, 1007], "keepfil": 650, "neither": [650, 714, 1319], "chunk_siz": [653, 654, 656, 657, 658, 659, 660], "half": [653, 654, 656, 657, 658, 659, 660, 1319], "hour": [653, 654, 656, 657, 658, 659, 660, 1106, 1319], "batch": [653, 654, 656, 657, 658, 659, 660, 879], "better": [653, 654, 656, 657, 658, 659, 660, 932, 1167, 1319, 1321, 1322], "stai": [653, 654, 656, 657, 658, 659, 660, 1319], "caus": [653, 654, 656, 657, 658, 659, 660], "timeout": [653, 654, 656, 657, 658, 659, 660, 1089], "variabl": [655, 912, 915, 1018, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1103, 1104, 1319], "graphql": [655, 659], "thousand": [659, 1319], "ltp_onli": 666, "homo": [667, 835, 915, 1319], "sapien": [667, 835, 915, 1319], "htp": [676, 678, 681, 682, 915], "biopax": [678, 681, 744, 747, 1167, 1176, 1318, 1321], "disrupt": 685, "induc": [685, 1319], "vast": [686, 1089, 1319], "close": [686, 1089, 1106, 1164, 1167, 1298, 1299, 1300, 1301, 1302, 1304, 1305, 1306, 1307, 1308, 1310, 1319], "enough": [686, 1319], "safe": [686, 1167], "align": [686, 1285, 1286, 1287, 1288, 1289, 1290, 1299, 1304, 1307], "regsit": 687, "tabular": [687, 915, 1025, 1319, 1322], "uniprot_1": 689, "chain_1": 689, "residue_1": 689, "seqnum_1": 689, "uniprot_2": 689, "chain_2": 689, "residue_2": 689, "seqnum_2": 689, "bond": [690, 885], "refactor": [690, 691], "contact": [690, 691, 795, 796, 797, 1317, 1319], "return_unmap": 691, "unmap": [691, 915], "normal": [691, 699, 700, 706, 865, 915, 1139, 1164, 1298, 1302, 1306, 1318, 1319], "uniprot_isoform": 694, "pathologi": [699, 700, 915], "sourcetyp": 704, "mix": [704, 1319, 1322], "consequencetyp": 704, "feature_field": 704, "dictread": 706, "bachman": 706, "assembl": 706, "phosphoproteom": 706, "mine": 706, "biorxiv": 706, "1101": 706, "822668v3": 706, "only_evid": 707, "only_literatur": 707, "ftp": [710, 1089, 1319], "simpler": 710, "lowercas": [710, 1319], "iupac": [710, 1319], "sid": 710, "idlist": [712, 714, 716, 717], "pmc": [712, 714], "compli": 714, "attempt": [714, 810, 915, 977, 993, 1072, 1145, 1155, 1160, 1189, 1318, 1319], "manuscript": [714, 1321], "browser": [715, 1319, 1322], "put": [719, 783, 784, 785], "ramilowski": [719, 720], "2015": [719, 720, 1319], "long_not": 720, "ramp_id_typ": [723, 1319], "fast": [723, 915, 1319], "sql": [723, 724, 726, 727, 1319], "curi": 725, "sqlite": [726, 1319], "pd": [726, 1319], "sqlite3": [726, 1319], "temporari": [726, 1167], "acsn": [732, 969], "protein_name_typ": [733, 744], "mandatory_ref": [734, 742], "elem": 736, "cref": 741, "entity_uniprot": [741, 743], "complexvari": [741, 1176, 1178], "control": [742, 977, 1169, 1281, 1319, 1321], "biopax_fil": 744, "binari": [744, 747, 915, 932, 967, 1089], "reactom": [745, 746, 747, 748, 1167], "sbml": [745, 746, 748], "representationa": 746, "pathwaya": 746, "cachefil": [747, 808, 899], "ask": [747, 1319], "veri": [747, 1318, 1319, 1322], "stringent": 747, "free": [747, 958, 1160, 1164, 1167, 1189, 1191, 1192, 1318, 1319, 1321], "approx": [747, 1319], "2g": 747, "jonetjakobsson": [750, 751, 752], "fruitfli": [750, 751], "zebrafish": [750, 751], "chicken": [750, 751], "elegan": [750, 751], "xenopu": [750, 751], "tropicali": [750, 751], "yeast": [750, 751], "anoli": [750, 751], "carolinensi": [750, 751], "left": [752, 1145, 1177, 1299, 1304, 1307], "exclude_secondari": 758, "signalink3": [758, 915, 962, 1319, 1322], "raw_record": 763, "expand_famili": 763, "uniroma2": [763, 1319], "split": [763, 1042, 1061, 1078, 1321], "10116": [763, 915, 1322], "span": [769, 1319], "highest_confid": [772, 775, 776], "high_confid": [772, 775, 776], "medium_confid": [772, 775, 776], "low_confid": [772, 775, 776], "physical_interaction_scor": [772, 775], "link": 772, "subscor": [772, 775, 776], "interactor": [772, 813], "pre": [772, 775, 776, 1317], "channel": [775, 776, 1319, 1322], "form": [775, 1089], "tax": [777, 879, 915], "scientif": [777, 1201, 1317], "surfac": [779, 915, 1123, 1278, 1319], "switch": 781, "elm": [781, 886, 964], "classifi": [781, 1319, 1322], "only_class": 791, "known": [791, 879, 915, 1319, 1322], "3d": [793, 795, 796, 915, 1319], "pdb_uniprot": 795, "threedcomplex_chain": 795, "automat": [795, 796, 867, 874, 878, 915, 1139, 1318, 1319, 1321], "pdb_chain": 795, "3dcomplex": [796, 797, 915], "shmoo": [796, 797], "weizmann": [796, 797], "il": [796, 797], "elevi": [796, 797], "3dcomplexv6": [796, 797], "threedcomplex_contact": 796, "ddi_flat": [799, 800], "dmi_flat": 801, "intract": 806, "soup": 809, "trip_get_uniprot": 809, "syn": [810, 1319], "exclude_method": [811, 812], "specul": [811, 812], "trip_process": 811, "dadio": 812, "take_a_trip": 812, "provcess": 812, "bait": 812, "tab": [813, 915, 932, 1074], "intr": 813, "trp_uniprot": 813, "tag": [813, 1167, 1319], "fill": [813, 915, 926], "twice": 813, "trp": 813, "numer": [815, 818, 915, 993, 1213, 1319], "ucqueri": [816, 1213], "listsourc": [816, 1213], "unichem_sourc": 817, "unichem_info": 818, "ncbi_id": [820, 1319], "latin": [820, 1204, 1205, 1319], "english": [820, 1201, 1319], "latin_synonym": [820, 1319], "entry_vers": [821, 1319], "sequence_vers": [821, 1319], "entry_nam": [821, 1319], "replaced_bi": [821, 1319], "archiv": [825, 1089, 1090, 1145, 1167], "delet": [825, 915, 921, 1092, 1093, 1115, 1145, 1167, 1318, 1319, 1321], "confirm": [834, 836], "client": [835, 1213, 1318, 1319], "plain": [835, 1319], "_uniprot_field": 835, "help": [835, 1144, 1145, 1317], "uniprotkb_column_nam": 835, "ke": 835, "histori": [838, 1317], "oldest": [838, 1318], "fit": [849, 1145, 1319], "msb4100200": 851, "researchg": 852, "humansignalingnetwork": [852, 854], "publish": [852, 1319], "jan": 852, "edwin": 852, "omnipath": [852, 865, 915, 958, 965, 967, 968, 969, 1317, 1321, 1322], "research": [852, 1319], "gate": 852, "wang_interact": 852, "s4": 857, "07": [857, 1319], "025": 857, "wojtowicz": 857, "1111": 859, "nya": 859, "12776": 859, "25988664": 859, "scope": [862, 865, 1018, 1319, 1322], "avoid": [862, 865, 1083, 1098, 1103, 1285, 1286, 1287, 1288, 1289, 1290, 1318, 1319], "enabl": [862, 865, 891, 1164, 1319], "annotdefbas": 862, "op": [864, 1034, 1053, 1054, 1055, 1318, 1319], "annotopbas": 864, "intersect": [864, 865, 915, 991, 1169, 1175, 1276], "behav": [865, 1319], "s10": 865, "turei": 865, "prep": 865, "actual": [865, 985, 1281, 1305, 1319, 1320], "annot_composite_database_nam": 865, "entit": 865, "cell_surfac": 865, "itself": [865, 915, 1028, 1103, 1104, 1319], "isdisjoint": 865, "null": [865, 915, 1319], "mappinginput": [867, 868, 869, 870, 873, 874, 875, 877, 878, 879, 1144], "pro_id_type_a": [867, 874], "pro": [867, 874, 1148, 1319], "pro_id_type_b": [867, 874], "abov": [867, 874, 878, 899, 915, 921, 1107, 1318, 1319, 1322], "biomart_id_type_a": 868, "biomart_id_type_b": 868, "input_": 869, "col_a": 869, "col_b": 869, "paramat": [870, 875, 877], "metabolom": [870, 1144, 1317], "type_": 871, "resource_id_type_a": [871, 1319], "resource_id_type_b": [871, 1319], "id_col_a": [872, 1319], "id_col_b": [872, 1319], "extra_edge_attr": [872, 915, 932, 1319], "extra_node_attrs_a": 872, "extra_node_attrs_b": 872, "positive_filt": 872, "negative_filt": 872, "mark_sourc": 872, "mark_target": 872, "curl_arg": 872, "must_have_refer": 872, "unique_field": 872, "expand_complex": [872, 1145, 1155, 1156, 1157], "only_default_organ": 872, "vertex": [872, 915, 932, 1126, 1129, 1281, 1285, 1286, 1287, 1288, 1289, 1290, 1319], "particular": [872, 891, 921, 1031, 1035, 1050, 1053, 1079, 1319], "vertic": [872, 915, 1281, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1293, 1295, 1296, 1319], "consortium": [874, 1319], "ramp": [875, 1144, 1317], "id_col": 876, "extra_attr": [876, 902, 1319], "unichem": [877, 1144, 1319, 1321], "uniprot_id_type_a": 878, "uniprot_id_type_b": 878, "upload": [878, 1144], "webservic": [878, 938, 942, 974, 1317], "would": [879, 1319, 1320], "directli": [879, 905, 915, 921, 1144, 1145, 1146, 1167, 1278, 1317, 1318, 1322], "programmat": [879, 1319], "slightli": [879, 958], "capabl": [879, 989, 990], "resource_id_typ": [879, 1144], "handl": [880, 912, 915, 932, 989, 990, 1089, 1145, 1146, 1201, 1318, 1319], "short": [880, 915, 1205, 1319, 1322], "stoichiometr": 881, "coeffici": [881, 1060], "repetit": 881, "impli": 881, "kept": [881, 915, 1078, 1145, 1319], "compat": [881, 891, 958, 1305, 1321], "add_attr": 881, "domain_id_typ": 882, "domain_a": 883, "domain_b": 883, "ref": [883, 888, 915], "contact_residu": 883, "get_lin": 884, "resources_only_primari": 884, "intend": [884, 1319], "enzyme_genesymbol": [884, 1319], "substrate_genesymbol": [884, 1319], "residue_typ": [884, 1319], "residue_offset": [884, 1319], "css": 885, "stab_en": 885, "solv_en": 885, "area": [885, 1281], "add_residu": 885, "res_a": 885, "res_b": 885, "undefin": [885, 1319], "124": [885, 1309, 1319], "serin": 885, "hbond": 885, "sbridg": 885, "ssbond": 885, "covbond": 885, "bond_typ": 885, "get_bond": 885, "throught": 885, "numof_residu": 885, "bound": [885, 1281, 1293, 1295, 1296, 1319], "regex": 886, "motif_nam": 886, "prob": 886, "attrib": [891, 958], "academ": [891, 958, 1319], "alik": [891, 958], "licensefeatur": [892, 894, 895], "check_level": [892, 893, 894, 895], "int_to_level": [892, 893, 894, 895], "nearest": [892, 893, 894, 895], "ordin": [892, 893, 894, 895], "level_to_int": [892, 893, 894, 895], "to_int": [892, 893, 894, 895], "pp": [899, 1299, 1300, 1304, 1307, 1309], "htp_threshold": [899, 915, 1299, 1307], "20": [899, 1299, 1307, 1314, 1319], "data_attr_nam": 901, "evidence_typ": [902, 904, 906], "resource_attr": 902, "get_via": 902, "come": [902, 915, 1145, 1157, 1318, 1319, 1322], "data_typ": [903, 905, 906], "networkresourcekeybas": 905, "underscor": 905, "came": 905, "clearer": [912, 915], "much": [912, 915, 1144, 1318, 1319, 1321, 1322], "versatil": [912, 915, 1229, 1251, 1318, 1319, 1321], "recommend": [912, 915, 1145, 1156, 1319], "contian": [912, 915], "check_nod": 912, "check_param": 912, "di": [912, 915], "declar": 912, "get_dir": [912, 1319], "negative_sources_revers": 912, "negative_sources_straight": 912, "positive_sources_revers": 912, "positive_sources_straight": 912, "set_dir": 912, "set_direct": 912, "set_sign": 912, "src_by_sourc": 912, "tgt_by_sourc": 912, "unnam": 915, "cache_dir": [915, 1089], "outdir": 915, "At": [915, 1117, 1319], "offer": [915, 1319, 1321], "migrat": [915, 1319], "solut": 915, "theori": 915, "librari": [915, 1106, 1319], "taxonom": 915, "default_name_typ": 915, "mirbas": [915, 1148, 1319], "project": [915, 1278], "messag": [915, 995, 1093, 1096, 1097, 1106, 1107, 1167, 1317, 1322], "log": [915, 1026, 1113, 1317, 1318, 1321], "adjlist": 915, "adjac": 915, "update_adjlist": 915, "chembl_mysql": 915, "read_data_fil": 915, "db_dict": 915, "outer": [915, 999, 1007], "whose": [915, 997, 1001], "dgraph": [915, 1319], "disclaim": [915, 1319], "dlabdct": 915, "dnoddct": 915, "dnodind": 915, "dnodlab": 915, "dnodnam": 915, "edgeattr": 915, "exp": 915, "exp_prod": 915, "product": [915, 1141, 1319], "edges_express": 915, "exp_sampl": 915, "proteomicsdb": 915, "get_proteomicsdb": 915, "failed_edg": 915, "fail": [915, 932, 1145], "sublist": 915, "goannot": [915, 1124, 1319], "gsea": 915, "msigdb": 915, "has_cat": 915, "flow": [915, 935, 962, 1322], "reaction": [915, 958, 967, 1178, 1319, 1322], "rnum": 915, "enum": 915, "snum": 915, "htref": 915, "labdct": 915, "receptor_list": 915, "rec": 915, "druggability_list": 915, "dgb": 915, "kinases_list": 915, "kin": 915, "tfs_list": 915, "disease_genes_list": 915, "signaling_proteins_list": 915, "sig": 915, "proteome_list": 915, "cancer_drivers_list": 915, "cdv": 915, "mutation_sampl": 915, "mysql_conf": 915, "negatom": 915, "apply_neg": 915, "noddct": 915, "nodind": 915, "nodlab": 915, "nodnam": 915, "palett": [915, 1277, 1281, 1285, 1286, 1287, 1288, 1289, 1290, 1293, 1295, 1296, 1298, 1302, 1306], "hexadecim": 915, "color": [915, 1281, 1285, 1286, 1287, 1288, 1289, 1290, 1293, 1295, 1296, 1298, 1299, 1300, 1301, 1302, 1305, 1307, 1308, 1310], "plot": [915, 1281, 1284, 1317, 1321], "pathway_typ": 915, "raw_data": 915, "alphanumer": [915, 1016, 1112], "charact": [915, 995, 1089, 1112, 1145, 1155, 1157, 1319], "session_nam": 915, "abc12": 915, "sourcenetedg": 915, "sourcenetnod": 915, "u_pfam": 915, "uniprot_map": 915, "map_item": 915, "vertexattr": 915, "donwload": 915, "acsn_effect": 915, "add_geneset": 915, "geneset": 915, "add_grouped_eattr": 915, "add_grouped_set_eattr": 915, "add_list_eattr": 915, "add_set_eattr": 915, "affect": [915, 1319], "all_between": 915, "ab": [915, 971, 989], "ba": 915, "all_neighbour": 915, "neighbour": 915, "apply_list": 915, "node_or_edg": 915, "previous": [915, 1144, 1164], "load_list": 915, "data_format": [915, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1103, 1104, 1319, 1321], "basic_stat": 915, "caption": 915, "latex_hdr": [915, 943, 975], "fontsiz": [915, 943, 975], "font": [915, 943, 975, 1313], "helveticaneueltstd": [915, 943, 975], "ltcn": [915, 943, 975], "header_format": 915, "row_ord": 915, "use_cat": 915, "pdflatex": 915, "stat": [915, 1319], "tex": [915, 943, 975, 1303], "basic_stats_intergroup": 915, "groupa": 915, "groupb": 915, "intogen_fil": 915, "cosmic": 915, "intogen": 915, "cancer_gene_census_list": 915, "organisms_allow": 915, "collapse_by_nam": 915, "collaps": [915, 999], "lst": [915, 989, 997, 1013, 1041, 1213, 1319], "num_method": [915, 993], "concaten": [915, 993, 999], "greater": [915, 993], "merge_dict": [915, 993], "complex_comembership_network": 915, "havugimana": 915, "complexport": [915, 1319], "compleat": [915, 1319], "complexes_in_network": 915, "csourc": 915, "compounds_from_chembl": 915, "crit": 915, "andor": 915, "assay_typ": 915, "relationship_typ": 915, "h": [915, 1106, 1213, 1319], "multi_queri": 915, "chebl_mysql": 915, "loadth": 915, "get_sub": 915, "critic": 915, "search_attr_or": 915, "search_attr_and": 915, "adm": 915, "physicochem": [915, 1319], "toxic": 915, "u": [915, 1278, 1318, 1319], "unassign": 915, "Not": [915, 932, 1076, 1077, 1164, 1305, 1319], "compounds_target": 915, "copy_edg": 915, "move": [915, 1109, 1321], "count_sol": 915, "collection_method": 915, "add_tot": 915, "add_perc": 915, "add_cat_tot": 915, "comput": [915, 1023, 1029, 1057, 1060, 1319], "against": [915, 1027, 1319, 1322], "curation_stat": 915, "curation_tab": 915, "header_s": 915, "normals": 915, "curators_work": 915, "estim": 915, "how": [915, 1145, 1155, 1317, 1318], "year": [915, 1106], "took": 915, "achiev": 915, "amount": [915, 1089, 1319], "databases_similar": 915, "simpson": [915, 1057], "sorensen": [915, 1060], "third": [915, 1319], "degree_dist": 915, "compris": 915, "pwnet": 915, "session_id": 915, "degdist": 915, "delete_by_organ": 915, "delete_by_sourc": 915, "vertexattrstodel": 915, "edgeattrstodel": 915, "delete_unknown": 915, "delete_unmap": 915, "dgenesymbol": 915, "dg": 915, "dgss": 915, "dneighbor": 915, "dp": 915, "get_nod": 915, "dprotein": 915, "duniprot": 915, "dup": 915, "dv": 915, "edge_exist": 915, "sensit": [915, 1318], "edge_loc": 915, "topn": 915, "edge_nam": 915, "edges_3d": 915, "get_instruct": 915, "i3d": 915, "get_i3d": 915, "edges_between": 915, "group1": 915, "group2": 915, "even": [915, 958, 1063, 1094, 1176, 1319, 1321, 1322], "func": [915, 1039], "lambda": [915, 1308], "everi": [915, 1167, 1319, 1321], "edges_in_complex": 915, "in_complex": 915, "edges_ptm": 915, "edgeseq_invers": 915, "export_dot": 915, "edges_filt": 915, "nodes_filt": 915, "edge_sourc": 915, "dir_sourc": 915, "return_object": 915, "save_dot": 915, "save_graph": 915, "prog": 915, "neato": 915, "hide": 915, "auto_edg": 915, "hide_nod": 915, "pygraphviz": 915, "agraph": 915, "requesr": 915, "dot": [915, 1205], "graphic": [915, 1308], "extens": [915, 1078, 1164], "graphviz": 915, "algorithm": [915, 1293, 1295, 1296], "agrapg": 915, "draw": [915, 1278, 1281, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1293, 1295, 1296, 1299, 1300, 1301, 1304, 1305, 1307, 1308, 1310], "style": [915, 1281, 1284, 1321, 1322], "resource_categori": 915, "constant": [915, 1109, 1285, 1286, 1287, 1288, 1289, 1290], "callback": [915, 1145], "edge_penwidth": 915, "vertex_shap": 915, "graph_label": 915, "_name": 915, "miss": [915, 1045, 1319], "edge_arrowhead": 915, "vertex_fillcolor": 915, "rubric": 915, "net": [915, 1278, 1319], "pfile": 915, "arn": [915, 962, 1319], "tgf": [915, 1319], "slk_pathwai": 915, "tgf_slk": 915, "main_titl": 915, "beta": [915, 1319], "label_font": 915, "med": 915, "export_edgelist": 915, "edge_attribut": 915, "stream": 915, "export_graphml": 915, "graphml": 915, "netrowk": [915, 932], "export_ptms_tab": 915, "nama": 915, "export_sif": 915, "export_struct_tab": 915, "export_tab": 915, "extra_node_attr": [915, 932, 1319], "unique_pair": [915, 932, 1319], "_a": [915, 932], "_b": [915, 932], "suffix": [915, 932, 1065], "find_all_path": 915, "becau": 915, "get_all_shortest_path": 915, "shortest": 915, "neighbor": [915, 1319], "find_all_paths2": 915, "psize": 915, "find_complex": 915, "dna": [915, 1145, 1155, 1157], "polymeras": 915, "pol": 915, "first_neighbour": 915, "fisher_enrich": 915, "enrich": 915, "fisher": 915, "exact": [915, 1322], "conting": 915, "scipi": 915, "fisher_exact": 915, "prior": 915, "odd": 915, "ratio": 915, "extrem": 915, "observ": [915, 1319], "hypothesi": 915, "geneset_enrich": 915, "geneset_id": 915, "alpha": [915, 1286, 1288, 1289, 1302, 1308, 1319], "05": [915, 1319], "correction_method": 915, "hommel": 915, "cfisher": 915, "genesymbol_label": 915, "remap_al": 915, "recreat": 915, "anew": 915, "were": [915, 1319], "lnum": 915, "conv_edg": 915, "ret": 915, "place": [915, 958, 1319], "anywai": 915, "get_dirs_sign": 915, "get_edg": [915, 1319], "get_eid": 915, "vertec": 915, "get_funct": 915, "fun": 915, "get_giant": 915, "giant": 915, "get_go": 915, "get_max": 915, "attrlist": 915, "get_network": 915, "subgraph": [915, 1125], "get_node_d": 915, "get_node_pair": 915, "get_nodes_d": 915, "get_pathwai": 915, "get_taxon": 915, "tax_dict": 915, "go_annotate_graph": 915, "go_enrich": 915, "gs_affected_bi": 915, "gs_affect": 915, "gs_edg": 915, "gs_in_direct": 915, "gs_in_undirect": 915, "gs_inhibited_bi": 915, "gs_inhibit": 915, "gs_neighborhood": 915, "gs_neighbor": 915, "gs_stimulated_bi": [915, 1319], "gs_stimul": [915, 1319], "gss": [915, 1319], "guide2pharma": [915, 962, 1319], "having_attr": 915, "having_eattr": 915, "having_ptm": 915, "having_vattr": 915, "homology_transl": 915, "htp_stat": 915, "in_direct": 915, "in_undirect": 915, "ypath": 915, "init_complex_attr": 915, "init_edge_attr": 915, "init_gsea": 915, "lazi": 915, "save_network": 915, "default_network": 915, "init_vertex_attr": 915, "interactions_al": 915, "distinguish": [915, 1167, 1318], "interactions_inhibitori": 915, "interactions_inhibitory_by_resourc": 915, "interactions_stimulatori": 915, "interactions_stimulatory_by_resourc": 915, "intergroup_shortest_path": 915, "intogen_cancer_drivers_list": 915, "iter_edg": 915, "iter_interact": 915, "all_undirect": 915, "behaviour": [915, 1092, 1095, 1096, 1100, 1145, 1155, 1157, 1319], "jaccard_edg": 915, "10k": 915, "binom": 915, "49995000": 915, "jaccard_meta": 915, "jedg": 915, "kegg_direct": 915, "kinase_stat": 915, "idx": 915, "label_by_go": 915, "go_term": 915, "label_edg": 915, "label_vertic": 915, "laudanna_direct": [915, 968], "laudanna_effect": [915, 968], "licenc": 915, "list_resourc": 915, "load_3dcomplex": 915, "load_3did_ddi": 915, "load_3did_ddi2": 915, "load_3did_dmi": 915, "load_3did_interfac": 915, "load_all_pathwai": 915, "load_compleat": 915, "load_complexport": 915, "load_comppi": 915, "load_corum": 915, "load_dbptm": 915, "non_match": 915, "load_ddi": 915, "domaindomain": 915, "threedcomplex": 915, "threedcomplex_ddi": 915, "domino": [915, 964], "domino_ddi": 915, "load_depod_dmi": 915, "load_disgenet": 915, "full_data": 915, "disgenet": 915, "ulm": 915, "medic": 915, "languag": [915, 1201, 1318, 1319], "system": [915, 1089, 1143, 1318, 1319], "wish": [915, 1319], "snp": 915, "load_dmi": 915, "pfam_region": 915, "load_mimp_dmi": 915, "load_pnetworks_dmi": 915, "load_domino_dmi": 915, "load_pepcyb": 915, "load_psite_reg": 915, "load_psite_pho": 915, "load_ielm": 915, "load_phosphoelm": 915, "load_elm": 915, "load_dorothea": 915, "load_exocarta_attr": 915, "load_sampl": 915, "load_ref": 915, "exocarts_exosom": 915, "exosom": 915, "exocarta_sampl": 915, "exocarta_ref": 915, "sampl": [915, 1164], "load_express": 915, "shortcut": [915, 1319], "load_go": 915, "load_havugimana": 915, "load_hpa": 915, "summarize_pathologi": 915, "medium": 915, "na_valu": 915, "atla": [915, 1319, 1322], "load_hprd_ptm": 915, "load_interfac": 915, "load_li2012_ptm": 915, "load_ligand_receptor_network": 915, "lig_rec_resourc": 915, "inference_from_go": 915, "keep_undirect": 915, "keep_rec_rec": 915, "keep_lig_lig": 915, "load_matrisome_attr": 915, "matrisome_class": 915, "matrisome_subclass": 915, "matrisome_not": 915, "load_membranome_attr": 915, "membranom": 915, "helix": [915, 1319], "load_mut": 915, "gdsc_datadir": 915, "mutation_fil": 915, "load_neg": 915, "load_old_omnipath": 915, "kinase_substrate_extra": 915, "remove_htp": 915, "keep_direct": 915, "min_refs_undirect": 915, "august": 915, "furthermor": [915, 1319], "load_omnipath": [915, 1319], "ligand_receptor_extra": 915, "pathway_extra": 915, "old_omnipath_resourc": 915, "regardless": 915, "load_pathwai": 915, "sirnor_pathwai": 915, "param": [915, 921, 932, 949, 1089, 1117, 1119, 1144, 1164, 1281, 1285, 1286, 1287, 1288, 1289, 1290, 1293, 1295, 1296], "_pathwai": 915, "load_pdb": 915, "rai": 915, "nmr": 915, "load_pfam": 915, "load_pfam2": 915, "region": [915, 1193, 1319], "load_pfam3": 915, "dom": 915, "load_phospho_dmi": 915, "return_raw": 915, "load_pisa": 915, "load_ptm": 915, "load_ptms2": 915, "force_load": 915, "enz_sub": [915, 921, 1318, 1319, 1322], "newli": 915, "introduc": 915, "phosphoelm": [915, 1319], "dbptm": [915, 964, 1319], "phosphonetwork": [915, 1319, 1322], "li2012": [915, 1319], "mimp": [915, 1319], "translateion": 915, "trueli": 915, "appropri": [915, 1106, 1136, 1167, 1318, 1319], "nonhuman": 915, "whereev": 915, "besid": [915, 1318, 1319], "ptmprocessor": 915, "ptmaggreg": [915, 1319], "load_signor_ptm": 915, "load_surfaceome_attr": 915, "surfaceom": [915, 1319], "surfaceome_scor": 915, "surfaceome_class": 915, "surfaceome_subclass": 915, "load_tfregulon": 915, "load_vesiclepedia_attr": 915, "load_vesicle_typ": 915, "vesiclepedia": 915, "vesiclepedia_in_vesicl": 915, "vesiclepedia_sampl": 915, "vesiclepedia_ref": 915, "vesiclepedia_vesicl": 915, "vesicl": 915, "lookup_cach": 915, "int_cach": 915, "edges_cach": 915, "folder": 915, "loop_edg": 915, "mean_reference_per_interact": 915, "mean_reference_per_interaction_by_resourc": 915, "merge_list": 915, "and_or": [915, 1011], "pypat": 915, "_": [915, 921, 1065, 1089], "logic": [915, 1123], "perfom": 915, "merge_nod": 915, "lowest": [915, 1107, 1123, 1125], "mimp_direct": 915, "mutated_edg": 915, "compar": [915, 1001], "mark": [915, 1205], "underli": [915, 1229, 1251], "name_edgelist": 915, "names2vid": 915, "negative_report": 915, "report": [915, 1319], "retun": 915, "neighborhood": [915, 1319], "neighbourhood_network": 915, "center": [915, 1047, 1305, 1308, 1310], "network_by_go": 915, "node_categori": 915, "network_sourc": 915, "extracel": 915, "0005576": [915, 1123, 1319], "0070062": [915, 1123], "plasmamem": 915, "0005887": [915, 1123], "definint": 915, "foo": 915, "foo__bar": 915, "network_filt": 915, "aim": [915, 958, 1318, 1319], "cut": [915, 1298], "lose": 915, "less": [915, 935, 1145, 1155, 1157, 1319], "hairbal": 915, "usabl": [915, 1319], "network_stat": 915, "averag": [915, 1164, 1319], "diamet": 915, "transit": 915, "cohes": 915, "new_edg": 915, "add_edg": 915, "new_nod": 915, "add_vertic": 915, "node_exist": 915, "numof_directed_edg": 915, "numof_edg": 915, "numof_reference_interaction_pair": 915, "numof_references_by_resourc": 915, "numof_undirected_edg": 915, "orthology_transl": 915, "pathway_attribut": 915, "pathway_memb": 915, "pathway_nam": 915, "pathway_similar": 915, "sorensen_pathwai": 915, "sim": 915, "pw": [915, 1319], "pathways_t": 915, "genes_pathwai": 915, "pw_sourc": 915, "phosphonetworks_direct": 915, "phosphopoint_direct": 915, "phosphorylation_direct": 915, "phosphorylation_sign": 915, "phosphosite_direct": 915, "prdb_tissue_expr": 915, "prdb": 915, "group_funct": 915, "process_direct": 915, "dirs_onli": 915, "process_dmi": 915, "protein_edg": 915, "random_walk_with_return": 915, "niter": 915, "1000": [915, 1319], "walk": 915, "rwr": 915, "affin": 915, "restart": 915, "atg4b": [915, 1322], "rainbowpalett": 915, "round": 915, "99": [915, 1319], "vertex_color": [915, 1277, 1319], "random_walk_with_return2": 915, "read_from_cach": 915, "subfold": 915, "read_list_fil": 915, "readlist": 915, "Such": [915, 1319], "outlin": 915, "reference_edge_ratio": 915, "reference_hist": 915, "final": [915, 1319], "hist": 915, "remove_undirect": 915, "min_ref": 915, "run_batch": 915, "tocal": 915, "pcikl": 915, "save_sess": 915, "obj": [915, 932, 994, 1011, 1017, 1019, 1022, 1027, 1048, 1084], "cannot": 915, "second_neighbour": 915, "with_first": 915, "wit_first": 915, "select_by_go": 915, "select_by_go_expr": 915, "select_by_go_al": 915, "go_expr": 915, "preced": [915, 1123], "parenthes": [915, 1123, 1319], "separate_by_categori": 915, "set_boolean_vattr": 915, "vid": 915, "negat": [915, 1011], "set_categori": [915, 1305], "cat": 915, "well": [915, 1229, 1251, 1318, 1319], "coerc": [915, 1013], "refs_by_cat": 915, "set_chembl_mysql": 915, "titl": [915, 1025, 1068, 1074, 1215, 1299, 1302, 1304, 1305, 1307, 1308, 1310], "config_fil": 915, "ini": 915, "mysql_config": 915, "set_disease_gen": 915, "set_drugg": 915, "set_drugtarget": 915, "dtg": 915, "set_kinas": 915, "set_plasma_membrane_proteins_cspa": 915, "cpsa": 915, "set_plasma_membrane_proteins_cspa_surfaceom": 915, "surf": 915, "set_plasma_membrane_proteins_surfaceom": 915, "ish": 915, "set_receptor": 915, "set_signaling_protein": 915, "set_tf": 915, "set_transcription_factor": 915, "shortest_path_dist": 915, "susbet": 915, "whithin": 915, "taken": [915, 1285, 1286, 1287, 1288, 1289, 1290], "get_shortest_path": 915, "oppos": 915, "metabol": [915, 1319], "signor_pathwai": 915, "similarity_group": 915, "small_plot": 915, "pwlist": 915, "__": 915, "patwhai": 915, "source_diagram": 915, "outf": [915, 1089, 1276], "source_network": 915, "embl": [915, 1145, 1155, 1157, 1319], "helvetica": [915, 1298, 1302, 1306, 1311], "neue": [915, 1298, 1302, 1306, 1311], "linotyp": 915, "light": 915, "source_similar": 915, "source_stat": 915, "sources_hist": 915, "source_num": 915, "sources_overlap": 915, "diagon": 915, "sources_venn_data": 915, "return_data": 915, "keep_collect": 915, "straight_between": 915, "string_effect": 915, "sum_in_complex": 915, "edges_in_comlex": 915, "table_latex": 915, "sum_row": 915, "sum_label": 915, "sum_col": 915, "third_source_direct": 915, "use_string_effect": 915, "use_laudanna_data": 915, "tissue_network": 915, "transcription_factor": 915, "uniq_node_list": 915, "uniq_ptm": 915, "up_affected_bi": 915, "up_affect": 915, "up_edg": 915, "up_in_direct": 915, "up_in_undirect": 915, "up_inhibited_bi": 915, "up_inhibit": 915, "up_neighborhood": 915, "up_neighbor": 915, "up_stimulated_bi": 915, "up_stimul": 915, "mainli": 915, "correspod": 915, "weren": 915, "update_cat": 915, "update_db_dict": 915, "update_pathway_typ": 915, "update_pathwai": 915, "update_sourc": 915, "update_summari": 915, "summar": [915, 1319], "update_vertex_sourc": 915, "update_vindex": 915, "update_vnam": 915, "vertex_pathwai": 915, "vsg": 915, "vsup": 915, "wang_effect": 915, "write_t": 915, "tbl": [915, 1025, 1043, 1066, 1067, 1068, 1074], "colnam": 915, "rownam": [915, 1091], "logfil": [918, 1106, 1319], "build_dataset": 921, "compile_t": 921, "quantit": [921, 1317], "dataset_depend": 921, "define_dataset": 921, "intercel": [921, 1317, 1318, 1321, 1322], "builder": [921, 1318], "get_db": [921, 1318, 1319], "ensure_dataset": 921, "force_reload": 921, "force_rebuild": 921, "availab": 921, "ensure_dir": 921, "figur": [921, 1298, 1299, 1300, 1301, 1302, 1304, 1305, 1306, 1307, 1308, 1310, 1319, 1321], "ensure_modul": 921, "foreach_dataset": 921, "get_args_cur": 921, "get_args_lncrna_mrna": 921, "get_args_mirna_mrna": 921, "get_args_small_molecul": 921, "get_args_tf_mirna": 921, "get_args_tf_target": 921, "get_build_arg": 921, "get_param": 921, "load_dataset": 921, "aggreg": 921, "network_df_by_sourc": 921, "pickle_exist": 921, "pickle_path": 921, "reload_modul": 921, "remove_al": 921, "elsewher": 921, "remove_db": 921, "set_network": 921, "table_path": 921, "app": [923, 1317, 1318], "from_dict": 927, "dct": [927, 992, 999, 1002, 1006, 1007, 1028], "from_json": 927, "class_and_param": 928, "default_vertex_attr_processor": 932, "default_edge_attr_processor": 932, "add_extra_field": 932, "dr": 932, "generic_attr_processor": 932, "proc": 932, "wrap": [932, 1043, 1067, 1068, 1106], "processor": [932, 1191, 1192, 1318], "know": [932, 1093, 1319], "expect": 932, "try": [932, 1145, 1155, 1157, 1318, 1319], "typeerror": 932, "get_head": 932, "sources_t": 932, "write_tab": 932, "auxiliari": 934, "prepar": 934, "standalon": [938, 1318, 1319], "build_dir": 939, "outfile_interact": 939, "omnipath_webservice_interact": 939, "outfile_enz_sub": 939, "omnipath_webservice_enz_sub": 939, "outfile_complex": 939, "omnipath_webservice_complex": 939, "outfile_annot": 939, "omnipath_webservice_annot": 939, "outfile_intercel": 939, "omnipath_webservice_intercel": 939, "network_dataset": 939, "write_html": [942, 974], "52": [943, 975, 1319], "baseserv": [946, 950], "twistedwebresourc": 948, "port": [949, 1091], "serverclass": 949, "tableserv": 949, "webserv": [949, 1322], "listen": 949, "input_fil": 950, "only_t": 950, "exclude_t": 950, "websrvtab": [950, 1321], "resource_info_path": 958, "runner": [958, 961], "use_package_path": 958, "01": [958, 1106, 1319], "develop": [958, 1318], "server": [958, 1318, 1319, 1321, 1322], "02": [958, 1319], "inherit": [958, 1319], "add_resource_attr": 958, "pathway_noref": [958, 1319], "pathway_al": [958, 1319], "tfregulon": [958, 971], "reaction_pc": 958, "enzyme_substr": [958, 1319], "small_molecule_protein": [958, 1319], "tf_mirna": [958, 1319], "pathwaycommons_transcript": 958, "interaction_htp": 958, "interaction_misc": [958, 1319], "lncrna_target": 958, "transcription_onebyon": [958, 1319], "transcription_dorothea": 958, "ptm_noref": [958, 1319], "ptm_all": [958, 1319], "reaction_misc": [958, 1319], "post_transcript": 958, "process_descript": 958, "drug_target": 958, "license_purpos": [958, 1319], "commerci": 958, "profit": [958, 1319], "license_shar": 958, "noderiv": 958, "noshar": 958, "license_attrib": 958, "noattrib": 958, "incld": 958, "safest": 958, "sequenti": 958, "legal": [958, 1319], "desir": [958, 1109, 1285, 1286, 1287, 1288, 1289, 1290], "alter": [958, 1117, 1319], "mention": [958, 1319], "who": 958, "__resource__": 958, "incid": [958, 994], "collect_network": [958, 1319], "license_filt": 958, "forc": [958, 1109, 1319], "remove_old": 958, "adhesom": [962, 1319], "baccin2019": [962, 1319], "ca1": [962, 1319], "cellchatdb": [962, 1319], "cellink": [962, 1319], "celltalkdb": [962, 1319], "connectomedb": [962, 1319], "death": [962, 1319], "icellnet": [962, 1319], "lrdb": [962, 1319], "pdz": [962, 1319], "ramilowski2015": [962, 1319], "scconnect": [962, 1319], "spike": [962, 1319, 1322], "talklr": [962, 1319], "trip": [962, 1319], "transctipt": 963, "depod": [964, 1319], "hprd_p": 964, "iptmnet": [964, 1319], "kea": [964, 1319], "lmpid": 964, "phelm": 964, "psite": 964, "lack": 964, "alz": 965, "ccmap": [965, 966], "dip": [965, 966], "innatedb": [965, 966], "lit17": 965, "matrixdb": [965, 966, 1319], "mppi": [965, 966], "nci_pid": 967, "signalink2": 967, "minor": [967, 1167], "oreganno_old": 970, "encode_dist": 971, "encode_prox": 971, "htri": 971, "oreganno": 971, "pazar": 971, "license_dir": 979, "No": [981, 1319], "quicker": 985, "cache_item": 986, "md5": [986, 1144], "hash": [986, 1029, 1144, 1319], "cachedir": 987, "ensur": [987, 1083, 1318, 1319], "toadd": [989, 990], "ommit": 989, "necessarili": 989, "preserv": [989, 1075, 1076, 1077, 1078, 1081, 1103, 1104, 1319], "uniq_list": [989, 1081], "cd": [989, 1145, 1155, 1157], "ef": 989, "st": 990, "equival": [991, 1106, 1319], "cast": [992, 1011, 1038], "80": [995, 1319], "plu": [995, 1018], "indent": 995, "byte": [996, 1015, 1044, 1089, 1164], "elemenst": 997, "deep": [998, 1319], "usag": [998, 1026, 1044, 1146, 1167, 1213], "front": [999, 1002, 1106], "expand_tuple_kei": 999, "outermost": 999, "toward": [999, 1319], "innermost": 999, "dict_of_set": [1000, 1005, 1009], "__len__": 1000, "d1": [1001, 1008, 1024, 1030, 1319], "d2": [1001, 1008, 1024, 1030], "comparison": 1001, "chop": 1002, "dict_of_count": 1003, "percentag": 1003, "subdict": 1004, "leaf": [1004, 1125], "heurist": 1004, "AND": [1011, 1123, 1164, 1319, 1322], "met": [1011, 1319], "OR": [1011, 1123, 1319], "meet": 1011, "eq": [1011, 1027], "foobar": 1011, "lsit": 1013, "Its": [1013, 1293, 1295, 1296, 1319], "abc": 1013, "numpi": 1014, "nan": [1014, 1319], "qualifi": 1015, "pretti": [1015, 1319], "unit": [1015, 1109], "pypath_no_valu": 1017, "loc_dict": 1018, "_from": 1024, "colformat": 1025, "lineno": [1025, 1043, 1067], "doc_templ": 1025, "booktab": 1025, "latex_compil": 1025, "latex_execut": 1025, "xelatex": 1025, "latex_engin": 1025, "ordereddict": [1025, 1068, 1074, 1224, 1319], "by_group": [1031, 1032, 1033, 1034, 1035, 1036, 1037, 1050, 1051, 1052, 1053, 1054, 1055, 1079, 1080, 1082], "thing": [1031, 1035, 1050, 1053, 1079, 1145], "stackoverflow": [1041, 1089], "3744502": 1041, "854988": [1041, 1089], "width": [1043, 1067, 1068, 1086, 1229, 1251, 1276, 1299, 1300, 1301, 1304, 1305, 1307, 1308, 1309, 1310], "tablefmt": [1043, 1067, 1229, 1251], "fancy_grid": [1043, 1067, 1229, 1251], "pattern": [1045, 1319], "conveni": [1045, 1169, 1319], "angl": [1047, 1316], "dimension": 1047, "space": [1047, 1144, 1319], "clockwis": 1047, "coordin": [1047, 1293, 1295, 1296, 1319], "rel": 1047, "explanatori": 1059, "anyht": 1059, "123": [1059, 1319], "hello": 1059, "dice": 1060, "force_set": 1063, "interchang": [1063, 1064], "hashabl": 1064, "duplic": 1064, "truncat": [1068, 1318, 1319], "var": [1069, 1070, 1071], "val": 1072, "aba": [1075, 1081], "peterb": [1076, 1077], "plog": [1076, 1077], "uniqifi": [1076, 1077], "benchmark": [1076, 1077], "idfun": 1078, "repeat": [1078, 1319], "behavior": 1078, "abracadabra": 1078, "32": [1078, 1317, 1319], "42": [1078, 1319], "png": [1078, 1319], "txt": 1078, "uppercas": 1083, "word": 1083, "unhash": 1084, "req_head": [1089, 1319], "debug": [1089, 1098, 1099, 1104], "compr": [1089, 1090], "files_need": [1089, 1090], "connect_timeout": 1089, "ignore_content_length": 1089, "init_fun": 1089, "get_jsessionid": 1089, "init_use_cach": 1089, "default_mod": [1089, 1090], "override_post": 1089, "init_head": 1089, "return_head": 1089, "compress": [1089, 1090, 1167], "write_cach": [1089, 1144], "force_quot": 1089, "sftp_user": 1089, "sftp_passwd": 1089, "sftp_passwd_fil": 1089, "sftp_port": 1089, "22": [1089, 1091, 1319, 1322], "sftp_host": 1089, "sftp_ask": 1089, "setup": [1089, 1101, 1117, 1319], "bypass_url_encod": 1089, "empty_attempt_again": 1089, "keep_fail": 1089, "alpn": 1089, "http2": 1089, "fileopen": [1089, 1167], "pycurl": [1089, 1319], "cooki": 1089, "multipart": 1089, "quot": 1089, "redirect": 1089, "gzip": [1089, 1090], "tar": [1089, 1090, 1167], "gz": [1089, 1090, 1167], "zip": [1089, 1090, 1167], "construct_binary_data": 1089, "is_quot": 1089, "question": [1089, 1318], "1637762": 1089, "open_tgz": [1089, 1090], "replace_forbidden": 1089, "repl": 1089, "forbidden": 1089, "slash": 1089, "unix": 1089, "window": 1089, "environ": [1089, 1319], "set_binary_data": 1089, "transmit": 1089, "url_fix": 1089, "charset": 1089, "utf": [1089, 1090], "121017": 1089, "file_param": 1090, "_open": 1090, "set_fileobj": 1090, "bz2": 1090, "multifil": 1090, "examin": 1090, "host": [1091, 1319, 1321], "_global_context_off": [1092, 1094, 1096, 1098, 1100, 1103], "context": [1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1103, 1104, 1117, 1281, 1285, 1286, 1287, 1288, 1289, 1290, 1293, 1296, 1298, 1302, 1306, 1319], "behind": [1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1103, 1104, 1319], "scene": [1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1103, 1104, 1319], "cachedel": [1092, 1093], "_global_context_on": [1093, 1095, 1097, 1099, 1101, 1104], "dryrun": [1093, 1100, 1101], "off": [1094, 1109], "cache_on": 1094, "cacheprint": [1096, 1097], "restor": [1098, 1100, 1103, 1117], "cache_debug_off": 1098, "cache_debug_on": 1099, "cache_dryrun_off": 1100, "cache_dryrun_on": 1101, "lastcurl": [1103, 1104, 1319], "cache_preserve_off": 1103, "cache_preserve_on": 1104, "console_level": [1106, 1319], "logdir": [1106, 1107], "max_width": 1106, "close_logfil": 1106, "msg": [1106, 1109, 1319], "flush": 1106, "get_logdir": 1106, "dirnam": 1106, "label_messag": 1106, "decid": [1106, 1319], "open_logfil": 1106, "strftime": 1106, "localtim": 1106, "y": [1106, 1285, 1286, 1287, 1288, 1289, 1290, 1293, 1295, 1296, 1298, 1299, 1304, 1305, 1307, 1308, 1310, 1319], "centuri": 1106, "decim": 1106, "month": 1106, "dai": [1106, 1164, 1319], "31": [1106, 1317, 1319], "24": [1106, 1276, 1319], "clock": 1106, "00": [1106, 1319], "59": [1106, 1319], "61": [1106, 1319], "z": 1106, "zone": 1106, "utc": 1106, "weekdai": 1106, "am": 1106, "pm": 1106, "platform": [1106, 1318], "timestamp": 1106, "timestamp_messag": 1106, "directoti": 1107, "interv": 1109, "done": 1109, "init": 1109, "had": 1109, "my": [1109, 1318], "progressbar": 1109, "great": [1109, 1319], "tqdm": 1109, "oldprogress": 1109, "get_desc": 1109, "someth": [1109, 1318, 1319], "life": 1109, "stage": [1109, 1319], "init_tqdm": 1109, "set_don": 1109, "set_statu": 1109, "set_tot": 1109, "busi": 1109, "finish": [1109, 1298, 1299, 1300, 1301, 1302, 1304, 1305, 1306, 1307, 1308, 1310, 1319], "destroi": 1109, "log_verbos": [1112, 1115], "gen_session_id": 1112, "start_logg": 1112, "remaind": 1116, "gather": 1116, "yaml": [1116, 1117], "_dict": [1117, 1118, 1120], "temporarili": 1117, "exit": 1117, "get_default": 1117, "reset_al": 1117, "use_pickle_cach": [1123, 1127, 1128], "geneontologi": [1123, 1319], "expr_names_to_term": 1123, "expr": 1123, "get_annot_ancestor": 1123, "get_annots_ancestor": 1123, "get_term": [1123, 1125], "has_any_term": 1123, "has_term": 1123, "i_select_by_term": 1123, "return_uniprot": 1123, "select_by_expr": 1123, "select_by_al": 1123, "hormon": [1123, 1319], "0009897": 1123, "select_by_expr_term": 1123, "select_by_nam": 1123, "select_by_term": 1123, "all_from_aspect": 1125, "aspect_from_nam": 1125, "get_all_ancestor": 1125, "include_se": 1125, "get_all_descend": [1125, 1319], "get_aspect": 1125, "is_leaf": 1125, "is_nam": 1125, "is_root": 1125, "root": [1125, 1319, 1321], "is_term": 1125, "names_to_term": 1125, "names_to_terms_aspect": 1125, "namess": 1125, "set_of": 1125, "terms_nam": 1125, "to_term": 1125, "set_of_nam": 1125, "set_of_term": 1125, "subgraph_nod": 1125, "terms_to_nam": 1125, "terms_to_names_aspect": 1125, "cleanup_period": [1131, 1145, 1167, 1181], "lifetim": [1131, 1144, 1145, 1146, 1181], "300": [1131, 1144, 1145, 1146, 1181, 1319], "get_dict": [1131, 1319], "tha": [1131, 1138], "source_id": [1131, 1141], "orthologbas": 1132, "homologu": [1133, 1135], "preload_prot": 1134, "proteinhomologi": 1135, "preload_seq": [1136, 1319], "unload": [1139, 1146, 1191, 1192, 1319], "namespac": 1140, "popular": [1141, 1318], "advis": 1141, "almost": [1141, 1319, 1321], "load_a_to_b": 1144, "load_b_to_a": 1144, "mappingt": [1144, 1145, 1319], "coupl": [1144, 1164], "child": [1144, 1319], "mandatori": [1144, 1321, 1322], "identif": 1144, "entrez_protein": 1144, "entrez_mirna": 1144, "preiod": [1144, 1145, 1146], "cleanup": [1144, 1145, 1146], "id_type_sid": 1144, "mapping_table_a_to_b": 1144, "mapping_table_b_to_a": 1144, "read_cach": 1144, "read_mapping_arrai": 1144, "read_mapping_biomart": 1144, "read_mapping_fil": 1144, "read_mapping_hmdb": 1144, "read_mapping_ramp": 1144, "read_mapping_unichem": 1144, "read_mapping_uniprot": 1144, "programmatic_access": 1144, "read_mapping_uniprot_list": 1144, "set_uniprot_spac": 1144, "setup_cach": 1144, "tables_load": 1144, "translate_deleted_uniprot": 1145, "keep_invalid_uniprot": 1145, "trembl_swissprot_by_genesymbol": 1145, "period": [1145, 1319], "unus": 1145, "forev": 1145, "obsolet": 1145, "chain_map": [1145, 1319], "by_id_typ": [1145, 1319], "via_id_typ": 1145, "map_nam": [1145, 1156, 1318, 1319], "create_revers": 1145, "get_table_kei": 1145, "unambig": [1145, 1146, 1156], "guess_typ": 1145, "tri": [1145, 1150, 1285, 1286, 1287, 1288, 1289, 1290], "has_mapping_t": 1145, "expiri": [1145, 1146], "timer": 1145, "load_genesymbol5": 1145, "load_map": [1145, 1160], "mapread": [1145, 1319], "load_uniprot_stat": 1145, "uniprot_cleanup": [1145, 1155, 1156, 1157, 1319], "ideal": [1145, 1155], "think": [1145, 1155, 1319], "predefin": [1145, 1155, 1318, 1319], "couldn": [1145, 1155], "refseqp": [1145, 1155, 1157, 1319], "np_": [1145, 1155, 1157], "xp_": [1145, 1155, 1157], "ensp": [1145, 1155, 1157], "enst": [1145, 1155, 1157], "ensg": [1145, 1155, 1157], "ddbj": [1145, 1155, 1157], "genebank": [1145, 1155, 1157], "embl_id": [1145, 1155, 1157], "And": [1145, 1155, 1157, 1319, 1322], "encount": [1145, 1155, 1157, 1318], "map_name0": [1145, 1319], "mostli": [1145, 1156], "loss": [1145, 1156], "seamlessli": [1145, 1157], "loader": [1145, 1192], "only_uniprot_ac": 1145, "accession_numb": 1145, "other_organism_uniprot": 1145, "primary_uniprot": 1145, "remove_expir": 1145, "ago": 1145, "remove_kei": 1145, "remove_t": 1145, "reverse_kei": 1145, "reverse_map": 1145, "whenev": 1145, "translate_deleted_uniprot_by_genesymbol": 1145, "trembl_swissprot": 1145, "correct": [1145, 1305, 1310], "counterpart": [1145, 1322], "valid_uniprot": [1145, 1319], "which_tabl": 1145, "get_kei": 1146, "pri": 1148, "sec": 1148, "uploadlist": [1148, 1319], "label_id_typ": [1151, 1152], "get_residu": 1160, "pdb_start": 1161, "pdb_end": 1161, "uniprot_start": 1161, "uniprot_end": 1161, "usernam": 1164, "output_format": 1164, "feel": [1164, 1318, 1319], "wilhelm": 1164, "v509": 1164, "n7502": 1164, "nature13319": 1164, "descritpion": 1164, "visit": 1164, "admin": [1164, 1319], "get_express": 1164, "tissue_averag": 1164, "unnorm": 1164, "disk": [1164, 1319], "get_piec": 1164, "20480": 1164, "delimit": 1164, "mb": [1164, 1318, 1319], "curli": 1164, "brace": 1164, "tissue_id": 1164, "calculation_method": 1164, "no_isoform": 1164, "get_tissu": 1164, "pandas_matrix": 1164, "shold": 1164, "tissues_x_protein": 1164, "800": 1167, "file_from_arch": 1167, "easili": [1167, 1319, 1322], "lxml": [1167, 1319], "etre": [1167, 1319], "minim": [1167, 1319], "me": 1167, "thod": 1167, "arbit": 1167, "rari": 1167, "parser": 1167, "id42": 1167, "akt1": [1167, 1319], "ffjh2": 1167, "tr9gy": 1167, "sometim": [1167, 1318, 1319, 1321, 1322], "bp": 1167, "nucleic": 1167, "But": [1167, 1318, 1319], "mo": 1167, "dific": 1167, "ternal": 1167, "dure": 1167, "risk": 1167, "homo_sapien": 1167, "owl": 1167, "biopax_s": 1167, "uncompress": 1167, "cleanup_hook": 1167, "close_biopax": 1167, "init_etre": 1167, "open_biopax": 1167, "workflow": [1167, 1305, 1310, 1321], "set_progress": 1167, "entityset": [1168, 1169, 1171, 1174, 1175, 1179], "itermemb": 1169, "reactionsid": 1169, "er": 1170, "ed": 1170, "With": [1171, 1174, 1179, 1318], "protein_id": 1174, "default_id_typ": 1176, "max_complex_combin": 1176, "max_reaction_combin": 1176, "gen_cvari": 1176, "in_same_compon": 1176, "merge_complex": 1176, "this_round": 1176, "biopaxread": [1176, 1321], "subcomplex": 1176, "rcomplex": 1176, "merge_cvari": 1176, "fact": [1176, 1319], "variat": 1176, "right": 1177, "left_attr": 1177, "right_attr": 1177, "proteinfamili": 1178, "ref_id": 1179, "is_not": 1181, "iterdb": [1191, 1192], "iterprotein": [1191, 1192], "canon": [1193, 1215, 1247, 1257, 1272], "findal": [1193, 1319], "fragment": [1193, 1319], "fasta": 1195, "taxon_id": [1198, 1199, 1200, 1201], "codenam": 1201, "long_nam": 1204, "shorten": [1204, 1205], "genu": [1205, 1319], "taxon_nam": [1206, 1207, 1208, 1209, 1210], "connectivity_search": 1213, "id_list": 1213, "cheminformat": 1213, "widesearchinfo": 1213, "inchikey2anyth": 1213, "smiles2chembl": 1213, "uniprot_id": [1215, 1216, 1217, 1218, 1219, 1220, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273], "info_sect": 1215, "availebl": [1215, 1240], "keywords_with_xref": 1215, "capit": [1215, 1257], "dalton": [1215, 1272], "fileobj": [1221, 1239, 1251, 1319], "print_featur": [1221, 1319], "table_format": 1221, "uniprotprotein": [1224, 1254], "40": [1229, 1314, 1319], "tabul": [1229, 1251], "astanin": [1229, 1251], "xsize": 1276, "cairotest": 1276, "1024": [1276, 1309], "height": [1276, 1299, 1300, 1301, 1304, 1305, 1307, 1308, 1309, 1310], "bgcol": 1276, "embl_gray125": 1276, "interscol": 1276, "ysize": 1276, "ycol": 1276, "margin": [1276, 1277, 1309, 1319], "mincircl": 1276, "cellpad": 1276, "graphix_dir": 1277, "graphix_format": 1277, "title_text": 1277, "title_font_famili": 1277, "title_font_s": 1277, "title_color": 1277, "646567": 1277, "fruchterman_reingold": [1277, 1309], "layout_param": [1277, 1309], "vertex_label": 1277, "vertex_s": [1277, 1319], "vertex_label_s": [1277, 1319], "degree_label_s": 1277, "edge_width": [1277, 1319], "6ea945": 1277, "vertex_label_color": [1277, 1319], "007b7f": [1277, 1298, 1305], "vertex_alpha": 1277, "aa": [1277, 1319], "vertex_frame_color": 1277, "ffffff00": 1277, "vertex_frame_width": [1277, 1319], "edge_label": 1277, "edge_label_s": 1277, "edge_label_color": 1277, "edge_curv": 1277, "edge_color": [1277, 1319], "818284": 1277, "edge_alpha": 1277, "autocurv": 1277, "vertex_label_font": 1277, "san": 1277, "serif": 1277, "edge_label_font": 1277, "edge_arrow_s": 1277, "edge_arrow_width": 1277, "bbox": [1277, 1281, 1293, 1296], "dimens": [1277, 1308], "1280": 1277, "routin": [1278, 1291], "cairo": [1278, 1281, 1285, 1286, 1287, 1288, 1289, 1290, 1293, 1296, 1319], "l": [1278, 1281, 1285, 1286, 1287, 1288, 1289, 1290, 1293, 1295, 1296, 1319], "defaultgraphdraw": [1278, 1293, 1295, 1296], "ubigraph": 1278, "displai": [1278, 1319], "ubigraphdraw": 1278, "ubietylab": 1278, "cytoscap": [1278, 1318, 1319], "cytoscaperpc": 1278, "plugin": 1278, "gforg": 1278, "nbic": 1278, "nl": 1278, "cytoscapegraphdraw": 1278, "abstractcairographdraw": [1280, 1281, 1282, 1283], "vertex_drawer_factori": 1281, "edge_drawer_factori": 1281, "label_drawer_factori": 1281, "visualis": 1281, "2d": 1281, "plane": 1281, "curv": 1281, "invok": 1281, "__plot__": 1281, "drawer": [1281, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1293, 1295, 1296], "boundingbox": [1281, 1293, 1296], "box": [1281, 1293, 1295, 1296], "factori": 1281, "abstractcairovertexdraw": [1281, 1296], "defaultvertexdraw": 1281, "abstractedgedraw": [1281, 1286, 1287, 1290], "drawn": [1281, 1285, 1286, 1287, 1288, 1289, 1290, 1293, 1295, 1296], "arrowedgedraw": 1281, "textdraw": 1281, "abstract": [1285, 1293, 1295], "concret": [1285, 1295], "draw_directed_edg": [1285, 1286, 1287, 1288, 1289, 1290], "src_vertex": [1285, 1286, 1287, 1288, 1289, 1290], "dest_vertex": [1285, 1286, 1287, 1288, 1289, 1290], "draw_loop_edg": [1285, 1286, 1287, 1288, 1289, 1290], "circl": [1285, 1286, 1287, 1288, 1289, 1290], "draw_undirected_edg": [1285, 1286, 1287, 1288, 1289, 1290], "get_label_posit": [1285, 1286, 1287, 1288, 1289, 1290], "midpoint": [1285, 1286, 1287, 1288, 1289, 1290], "horizont": [1285, 1286, 1287, 1288, 1289, 1290], "textalign": [1285, 1286, 1287, 1288, 1289, 1290], "alpha_at_src": 1286, "alpha_at_dest": 1286, "vari": 1286, "destin": [1286, 1288, 1289, 1290], "arrow": 1287, "alphavaryingedgedraw": [1288, 1289], "opac": [1288, 1289], "transpar": [1288, 1289], "interpol": [1288, 1289], "taper": 1290, "wider": 1290, "narrow": 1290, "abstractvertexdraw": 1293, "abstractcairodraw": 1293, "canva": 1293, "visual_vertex": [1293, 1295, 1296], "coord": [1293, 1295, 1296], "visualvertexbuild": [1293, 1295, 1296], "abstractdraw": 1295, "font_famili": [1298, 1302, 1306], "lt": [1298, 1302, 1306, 1311, 1319], "std": [1298, 1302, 1306, 1311], "font_styl": [1298, 1302, 1306], "font_weight": [1298, 1302, 1306], "font_vari": [1298, 1302, 1306], "font_stretch": [1298, 1302, 1306], "xlab": [1298, 1302, 1305, 1308, 1310, 1311], "ylab": [1298, 1299, 1302, 1305, 1308, 1310, 1311], "axis_lab_s": [1298, 1302, 1306, 1308], "lab_angl": [1298, 1302, 1305, 1308, 1310], "90": [1298, 1302, 1305, 1308, 1310, 1316, 1319], "lab_siz": [1298, 1302, 1306], "legend": [1298, 1305, 1308, 1310], "fin": [1298, 1305, 1308], "y_break": 1298, "rc": [1298, 1302, 1305, 1306, 1308, 1319], "poster": [1298, 1302, 1306], "do_plot": [1298, 1305], "axi": [1298, 1299, 1304, 1305, 1307, 1319], "hidden": 1298, "30": [1298, 1308, 1314, 1319], "60": [1298, 1314, 1319], "middl": 1298, "77aadd": 1299, "xlim": [1299, 1302, 1308], "uniform_xlim": 1299, "uniform_ylim": [1299, 1305], "full_range_x": 1299, "ylog": [1299, 1305, 1308], "hoffset": 1299, "woffset": 1299, "axis_lab_font": [1299, 1300, 1301, 1304, 1305, 1307, 1308, 1310], "ticklabel_font": [1299, 1300, 1301, 1304, 1305, 1307, 1308, 1310], "small_ticklabel_font": 1299, "title_font": [1299, 1304, 1305, 1307, 1308, 1310], "bar_arg": [1299, 1305, 1307, 1310], "xmin": 1299, "tight": [1299, 1300, 1301, 1304, 1305, 1307, 1308, 1310], "init_fig": [1299, 1300, 1301, 1304, 1305, 1307, 1308, 1310], "matplotlib": [1299, 1300, 1301, 1304, 1305, 1307, 1308, 1310, 1313], "set_figs": [1299, 1300, 1301, 1304, 1305, 1307, 1308, 1310], "figsiz": [1299, 1300, 1301, 1302, 1304, 1305, 1307, 1308, 1310], "set_grid": [1299, 1304, 1305, 1307], "grid": [1299, 1304, 1305, 1307], "subplot": [1299, 1304, 1305, 1307], "set_titl": [1299, 1304, 1305, 1307, 1308, 1310], "earliest": [1300, 1307], "legend_font": [1300, 1305, 1307, 1308, 1310], "4477aa": 1301, "nbin": 1302, "x_log": 1302, "y_log": 1302, "tone": 1302, "legend_s": 1302, "kde_bas": 1302, "kde_perc": 1302, "run_latex": 1303, "run": [1303, 1318, 1319, 1322], "write_tex": 1303, "markup": 1303, "htdata": 1304, "cat_nam": 1305, "cat_ordr": 1305, "title_halign": [1305, 1308, 1310], "title_valign": [1305, 1308, 1310], "y2": 1305, "color2": 1305, "ylim": [1305, 1308], "group_label": 1305, "summary_nam": 1305, "legloc": [1305, 1308], "maketitl": 1305, "barplot": 1305, "by_plot": 1305, "ticklabel": 1305, "make_plot": 1305, "plots_ord": 1305, "post_plot": 1305, "pre_plot": 1305, "set_color": 1305, "colseri": 1305, "88ccee": 1307, "hcolor": 1307, "all_color": 1307, "44aa99": 1307, "all_nam": 1307, "curation_plot": 1307, "114477": 1308, "xlog": 1308, "xtickscal": 1308, "ytickscal": 1308, "legscal": 1308, "confi": 1308, "annot_font": 1308, "min_siz": 1308, "max_siz": 1308, "log_siz": 1308, "size_sc": 1308, "legtitl": 1308, "legstrip": 1308, "color_label": 1308, "size_to_valu": 1308, "value_to_s": 1308, "values_to_s": 1308, "transform": 1308, "layout_method": 1309, "sizes_edg": 1309, "fontfamili": 1311, "textcol": 1311, "black": 1311, "violin": 1311, "bbox1": [1312, 1315], "bbox2": [1312, 1315], "fix": [1313, 1318, 1319, 1321], "bug": [1313, 1319], "6714": 1313, "postscript": 1313, "compact": 1313, "embed": 1313, "opentyp": 1313, "backend": [1313, 1321], "dist": 1314, "70": [1314, 1319], "135": [1316, 1319], "270": 1316, "315": 1316, "welcom": [1317, 1319], "pypath": [1317, 1321, 1322], "instal": 1317, "faq": 1317, "impressum": 1317, "explor": [1317, 1319], "74": [1317, 1319], "93": 1317, "110": [1317, 1319], "upcom": 1317, "navig": 1317, "book": [1317, 1318], "introduct": 1317, "hmdb": 1317, "sanit": 1317, "overview": 1317, "disabl": 1317, "bel": [1317, 1318, 1321], "quickli": 1317, "plai": 1317, "omnipathr": [1318, 1319], "yourself": 1318, "peopl": [1318, 1319], "satisfi": 1318, "realli": [1318, 1319], "fresh": [1318, 1319], "pypi": [1318, 1319], "pip": 1318, "git": 1318, "experienc": 1318, "biologi": [1318, 1319], "biolog": [1318, 1319], "overal": [1318, 1319], "downlad": 1318, "alon": 1318, "begin": 1318, "fundament": [1318, 1319], "design": [1318, 1319], "principl": 1318, "todai": 1318, "easi": [1318, 1319], "prone": 1318, "interrupt": 1318, "problemat": 1318, "possibli": [1318, 1319], "offlin": 1318, "script": [1318, 1319], "varieti": [1318, 1319, 1322], "q01279": [1318, 1319], "pyproject": 1318, "toml": 1318, "privat": 1318, "omnipathdb": [1318, 1319, 1322], "gmail": 1318, "saez": 1318, "d\u00e9ne": 1318, "t\u00fcrei": 1318, "sebastian": 1318, "lobentanz": 1318, "ahmet": 1318, "rifaioglu": 1318, "hu": [1318, 1319], "pi": [1318, 1319], "tunca": 1318, "do\u011fan": 1318, "melih": 1318, "darcan": 1318, "erva": 1318, "ulusoi": 1318, "\u00f6mer": 1318, "kaan": 1318, "vural": 1318, "tennur": 1318, "k\u0131l\u0131\u00e7": 1318, "elif": 1318, "\u00e7evrim": 1318, "b\u00fcnyamin": 1318, "\u015fen": 1318, "atabei": 1318, "\u00fcnl\u00fc": 1318, "olga": 1318, "ivanova": 1318, "nicol\u00e0": 1318, "palacio": 1318, "past": 1318, "maintain": [1318, 1319], "francesco": 1318, "ceccarelli": 1318, "attila": 1318, "g\u00e1bor": 1318, "alberto": 1318, "valdeoliva": 1318, "michael": 1318, "klein": 1318, "fabian": 1318, "bird": 1318, "ey": 1318, "view": 1318, "16": 1319, "17": 1319, "18": 1319, "21": 1319, "bioconductor": 1319, "enjoi": 1319, "unlimit": 1319, "tour": 1319, "hesit": 1319, "__version__": 1319, "0m": 1319, "49": 1319, "47": 1319, "2023": 1319, "03": 1319, "09": 1319, "39": 1319, "36": 1319, "easiest": 1319, "quick": 1319, "34": 1319, "27": 1319, "2022": 1319, "databasemanag": 1319, "0x602fb851cd90": 1319, "gt": 1319, "tf_target": [1319, 1322], "mirna_mrna": 1319, "lncrna_mrna": 1319, "cu": 1319, "83": 1319, "7980": 1319, "35551": 1319, "1m": 1319, "55": 1319, "18558": 1319, "94358": 1319, "tft": 1319, "2m": 1319, "72": 1319, "54": 1319, "18986": 1319, "326708": 1319, "mi": 1319, "1264": 1319, "3288": 1319, "tmi": 1319, "41": 1319, "1032": 1319, "4960": 1319, "lnc": 1319, "33": 1319, "243": 1319, "217": 1319, "alloster": 1319, "smol": 1319, "94": 1319, "57": 1319, "1980": 1319, "3147": 1319, "41426": 1319, "co": 1319, "28173": 1319, "quit": 1319, "43": 1319, "5490653": 1319, "50872": 1319, "68": 1319, "heavi": 1319, "ic": 1319, "37": 1319, "301527": 1319, "48570": 1319, "biomed": 1319, "troublesom": 1319, "broken": 1319, "daili": 1319, "signor_interact": 1319, "_interact": 1319, "_enz_sub": 1319, "_complex": 1319, "_annot": 1319, "fulli": 1319, "postfix": 1319, "_raw": 1319, "_map": 1319, "bring": 1319, "arbitrarili": 1319, "straightforward": 1319, "outsid": 1319, "signor_complex": 1319, "complexaggreg": 1319, "p23511_p25208_q13952": 1319, "nfy": 1319, "p68104_p85299_q6r327_q8tb45_q9bvc4": 1319, "mtorc2": 1319, "p42345_q8n122_q8tb45_q96b36_q9bvc4": 1319, "mtorc1": 1319, "p63208_q13616_q9y297": 1319, "scf": 1319, "betatrcp": 1319, "q09472_q92793": 1319, "cbp": 1319, "p300": 1319, "q09472_q92793_q92831": 1319, "pcaf": 1319, "q13485_q15796": 1319, "smad2": [1319, 1322], "smad4": 1319, "p84022_q13485": 1319, "smad3": 1319, "p05412_q13485": 1319, "jun": 1319, "q15796_q9hau4": 1319, "smurf2": 1319, "o15105_q01094_q13547": 1319, "smad7": 1319, "hdac1": 1319, "e2f": 1319, "p19838_q04206": 1319, "nfkb": 1319, "p65": 1319, "p50": 1319, "o14920_o15111": 1319, "ik": 1319, "17699": 1319, "signorinteract": 1319, "o15530": 1319, "source_isoform": 1319, "target_isoform": 1319, "source_typ": 1319, "target_typ": 1319, "10455013": 1319, "ptm_residu": 1319, "ser396": 1319, "ptm_motif": 1319, "sssssshslsasdtg": 1319, "q9nq66": 1319, "18035": 1319, "smallmolecul": 1319, "quantiti": 1319, "23880553": 1319, "catalysi": 1319, "p62136": 1319, "o15169": 1319, "down": 1319, "dephosphoryl": 1319, "17318175": 1319, "ser77": 1319, "yepegsasptppylk": 1319, "sou": 1319, "3285": 1319, "signor_enzyme_substr": 1319, "easier": 1319, "58": 1319, "396": 1319, "389": 1319, "403": 1319, "77": 1319, "84": 1319, "signor_pathway_annot": 1319, "practic": 1319, "o14733": 1319, "48": 1319, "signorpathwai": 1319, "tnf": 1319, "toll": 1319, "haven": 1319, "four": 1319, "signor_protein_famili": 1319, "pf2": 1319, "53": 1319, "q9hbw0": 1319, "q92633": 1319, "showcas": 1319, "enzymat": 1319, "closer": 1319, "ramp_list_t": 1319, "51": 1319, "analyt": 1319, "rampid": 1319, "analytehasontologi": 1319, "rampcompoundid": 1319, "rampontologyid": 1319, "analytehaspathwai": 1319, "pathwayrampid": 1319, "pathwaysourc": 1319, "analytesynonym": 1319, "geneorcompound": 1319, "catalyz": 1319, "rampgeneid": 1319, "chem_prop": 1319, "ramp_id": 1319, "chem_data_sourc": 1319, "chem_source_id": 1319, "iso_smil": 1319, "inchi_key_prefix": 1319, "inchi_kei": 1319, "mw": 1319, "monoisotop_mass": 1319, "common_nam": 1319, "mol_formula": 1319, "db_version": 1319, "ramp_vers": 1319, "load_timestamp": 1319, "version_not": 1319, "met_intersects_json": 1319, "gene_intersects_json": 1319, "met_intersects_json_pw_map": 1319, "gene_intersects_json_pw_map": 1319, "db_sql_url": 1319, "entity_status_info": 1319, "status_categori": 1319, "entity_source_id": 1319, "entity_source_nam": 1319, "entity_count": 1319, "metabolite_class": 1319, "class_source_id": 1319, "class_level_nam": 1319, "class_nam": 1319, "commonnam": 1319, "hmdbontologytyp": 1319, "metcount": 1319, "pathwayr": 1319, "1368": 1319, "ramp_raw": 1319, "bottleneck": 1319, "thank": 1319, "happen": 1319, "25": [1319, 1322], "sourceid": 1319, "idtyp": 1319, "priorityhmdbstatu": 1319, "datasourc": 1319, "pathwaycount": 1319, "hmdb0000001": 1319, "ramp_c_000000001": 1319, "methylhistidin": 1319, "quantifi": 1319, "hmdb0000479": 1319, "50599": 1319, "chemspid": 1319, "83153": 1319, "c01152": 1319, "hmdb_kegg": 1319, "756552": 1319, "h0ydb7": 1319, "ramp_g_000009307": 1319, "rab38": 1319, "wiki": 1319, "756553": 1319, "a0a024r191": 1319, "756554": 1319, "h0yea4": 1319, "756555": 1319, "23682": 1319, "756556": 1319, "gene_symbol": 1319, "756557": 1319, "46": 1319, "oc": 1319, "o": 1319, "brmwtnujhumwm": 1319, "lurjtmiesa": 1319, "c7h11n3o2": 1319, "169": 1319, "181": 1319, "085": 1319, "cc1": 1319, "cn1c": 1319, "jdhildinmrgul": 1319, "27596": 1319, "cn1cncc1c": 1319, "methyl": 1319, "histidin": 1319, "cn1cnc": 1319, "tele": 1319, "ramp_c_000000002": 1319, "hmdb0000002": 1319, "ncccn": 1319, "xfnjvjplkcpibv": 1319, "uhfffaoysa": 1319, "c3h10n2": 1319, "c4": 1319, "h1": 1319, "5h2": 1319, "1249": 1319, "0844": 1319, "diaminopropan": 1319, "275898": 1319, "ramp_c_000258279": 1319, "lipidmap": 1319, "lmpk15050003": 1319, "ccccccccccccc": 1319, "uxlmjhnfdrmgpw": 1319, "ljqanchmsa": 1319, "c24h38o6": 1319, "422": 1319, "267": 1319, "hydroxi": 1319, "methoxi": 1319, "2r": 1319, "acetoxi": 1319, "pentadecyl": 1319, "275899": 1319, "ramp_c_000258280": 1319, "lmpk15050004": 1319, "cc": 1319, "cvznklnahbtint": 1319, "jochjyfzsa": 1319, "c24h38o5": 1319, "406": 1319, "272": 1319, "benzoq": 1319, "275900": 1319, "ramp_c_000226089": 1319, "lmpk15050005": 1319, "ccccccccccc": 1319, "jiugzsypfredlg": 1319, "hxuwfjfhsa": 1319, "c22h34o5": 1319, "378": 1319, "241": 1319, "tridecyl": 1319, "benzoqui": 1319, "275901": 1319, "ramp_c_000258283": 1319, "lmpk15050008": 1319, "ccccccccccccccc": 1319, "gxdurrguxldzkn": 1319, "c21h34o4": 1319, "350": 1319, "246": 1319, "suberonon": 1319, "275902": 1319, "ramp_c_000258284": 1319, "lmpk15050009": 1319, "amknobhckrzhio": 1319, "c19h30o4": 1319, "322": 1319, "214": 1319, "rapanon": 1319, "275903": 1319, "advantag": 1319, "vice": 1319, "versa": 1319, "con": 1319, "56": 1319, "0x6fa1e9e4e940": 1319, "big": 1319, "format_byt": 1319, "python_memory_usag": 1319, "44": 1319, "list_column": 1319, "subqueri": 1319, "distinct": 1319, "ON": 1319, "read_sql_queri": 1319, "hmdb00001": 1319, "104129": 1319, "hmdb0126033": 1319, "25882": 1319, "104130": 1319, "hmdb0141947": 1319, "180150": 1319, "104131": 1319, "hmdb0128505": 1319, "7870": 1319, "104132": 1319, "hmdb0130984": 1319, "8227": 1319, "104133": 1319, "hmdb0130987": 1319, "8630": 1319, "104134": 1319, "ramp_map": 1319, "45": 1319, "brenda": 1319, "kegg_glycan": 1319, "lipidbank": 1319, "ncbiprotein": 1319, "plantfa": 1319, "swisslipid": 1319, "wikidata": 1319, "29": 1319, "lmfa00000008": 1319, "slm": 1319, "000390048": 1319, "lmfa01010001": 1319, "000000510": 1319, "lmfa01010002": 1319, "000000449": 1319, "lmfa01010003": 1319, "000001194": 1319, "lmfa01010004": 1319, "000001195": 1319, "lmfa01010005": 1319, "000389552": 1319, "lmfa01010006": 1319, "000001196": 1319, "lmfa01010007": 1319, "000389947": 1319, "lmfa01010008": 1319, "000000853": 1319, "lmfa01010010": 1319, "000000855": 1319, "lmfa01010011": 1319, "000389946": 1319, "lmfa01010012": 1319, "000000719": 1319, "lmfa01010013": 1319, "000001198": 1319, "lmfa01010014": 1319, "000000825": 1319, "lmfa01010015": 1319, "000001199": 1319, "lmfa01010017": 1319, "000001095": 1319, "lmfa01010019": 1319, "000001205": 1319, "lmfa01010020": 1319, "000000829": 1319, "lmfa01010021": 1319, "000001207": 1319, "lmfa01010022": 1319, "000000827": 1319, "lmfa01010023": 1319, "000001128": 1319, "lmfa01010024": 1319, "000000414": 1319, "lmfa01010026": 1319, "000000539": 1319, "lmfa01010027": 1319, "000000980": 1319, "lmfa01010028": 1319, "000000540": 1319, "lmfa01010030": 1319, "000000543": 1319, "lmfa01010032": 1319, "000000544": 1319, "lmfa01010034": 1319, "00000": 1319, "44684": 1319, "got": 1319, "63": 1319, "lmst02030086": 1319, "000485328": 1319, "lmst02030087": 1319, "000485330": 1319, "lmsp06020013": 1319, "000000534": 1319, "lmst02020001": 1319, "000001055": 1319, "000485315": 1319, "35218": 1319, "lmpr0104010007": 1319, "000389242": 1319, "35219": 1319, "lmpr0104030005": 1319, "000390232": 1319, "35220": 1319, "lmpr0104030006": 1319, "000390227": 1319, "35221": 1319, "lmpr01070626": 1319, "000000432": 1319, "35222": 1319, "lmpr01090015": 1319, "000389419": 1319, "35223": 1319, "38": 1319, "medchemexpress": 1319, "actor": 1319, "affymetrix": 1319, "alzforum": 1319, "alzforum_mut": 1319, "araport": 1319, "bindingdb": 1319, "carotenoiddb": 1319, "cas_id": 1319, "cgnc": 1319, "chemicalbook": 1319, "clinicaltri": 1319, "clinic": 1319, "7422": 1319, "mappingtabledefinit": 1319, "input_class": 1319, "rampmap": 1319, "3238": 1319, "insight": 1319, "131431": 1319, "hmdb0094709": 1319, "hmdb_iter_metabolit": 1319, "0x68d5803eef00": 1319, "direct_par": 1319, "kingdom": 1319, "sub_class": 1319, "molecular_framework": 1319, "alternative_par": 1319, "spectra": 1319, "spectrum": 1319, "spectrum_id": 1319, "biological_properti": 1319, "cellular_loc": 1319, "biospecimen_loc": 1319, "biospecimen": 1319, "tissue_loc": 1319, "kegg_map_id": 1319, "smpdb_id": 1319, "experimental_properti": 1319, "4017": 1319, "hmdb_metabolites_raw": 1319, "cystein": 1319, "thereof": 1319, "carboxi": 1319, "hydrogen": 1319, "glycin": 1319, "heteroatom": 1319, "carboxyl": 1319, "analogu": 1319, "aromat": 1319, "heteromonocycl": 1319, "aralkylamin": 1319, "azacycl": 1319, "carbonyl": 1319, "heteroaromat": 1319, "hydrocarbon": 1319, "imidazolyl": 1319, "monoalkylamin": 1319, "monocarboxyl": 1319, "substitut": 1319, "imidazol": 1319, "oxid": 1319, "132354": 1319, "hmdb0000005": 1319, "ketobutyr": 1319, "hmdb0000008": 1319, "hydroxybutyr": 1319, "hmdb0000010": 1319, "methoxyestron": 1319, "hmdb0000011": 1319, "hmdb0000012": 1319, "deoxyuridin": 1319, "hmdb0000014": 1319, "deoxycytidin": 1319, "hmdb0000015": 1319, "cortexolon": 1319, "hmdb0000016": 1319, "deoxycorticosteron": 1319, "hmdb0000017": 1319, "pyridox": 1319, "hmdb0000019": 1319, "ketoisovaler": 1319, "hmdb0000020": 1319, "hydroxyphenylacet": 1319, "hmdb0000021": 1319, "iodotyrosin": 1319, "hmdb0000022": 1319, "methoxytyramin": 1319, "hmdb0000023": 1319, "hydroxyisobutyr": 1319, "hmdb00": 1319, "1291": 1319, "hmdb_tabl": 1319, "nameless": 1319, "notat": 1319, "nc": 1319, "ccc": 1319, "tyeybosbbbhjiv": 1319, "afendnxgafykqo": 1319, "vkhmyheasa": 1319, "12ccc": 1319, "c3": 1319, "wheuwnkscxykbu": 1319, "qpwughhjsa": 1319, "whbmmwsbfzvssr": 1319, "gsvougtgsa": 1319, "1o": 1319, "n1c": 1319, "nc1": 1319, "mxhrcpnrjammim": 1319, "shyzeuofsa": 1319, "1c": 1319, "o1": 1319, "cktsbutuhbmzgz": 1319, "12cc": 1319, "whbhbvvogneclv": 1319, "obqkjfggsa": 1319, "zesrjspzrdmnhi": 1319, "yfwfahhusa": 1319, "c1o": 1319, "hxacouqixzgnbf": 1319, "1h": 1319, "yl": 1319, "propanediamin": 1319, "propylenediamin": 1319, "ketobutano": 1319, "oxobutyr": 1319, "hydroxybutano": 1319, "meth": 1319, "hydro": 1319, "du": 1319, "deo": 1319, "5r": 1319, "hydroxymet": 1319, "desoxi": 1319, "hydroxycorticosteron": 1319, "cortodoxo": 1319, "pregnen": 1319, "dion": 1319, "hydroxyp": 1319, "hydroxymethylp": 1319, "hmdb_synonym": 1319, "propano": 1319, "mhi": 1319, "n1": 1319, "dihydrochlorid": 1319, "prop": 1319, "291": 1319, "hydroxymethyl": 1319, "isonicotin": 1319, "292": 1319, "pyridoxin": 1319, "293": 1319, "pyridoxinecarboxyl": 1319, "294": 1319, "pyridoxyl": 1319, "295": 1319, "296": 1319, "grow": 1319, "taxonomy__alternative_par": 1319, "taxonomy__class": 1319, "taxonomy__descript": 1319, "taxonomy__direct_par": 1319, "taxonomy__kingdom": 1319, "taxonomy__molecular_framework": 1319, "taxonomy__sub_class": 1319, "taxonomy__substitu": 1319, "compoun": 1319, "kno": 1319, "amin": 1319, "aralkyla": 1319, "organopnictogen": 1319, "comp": 1319, "organonitrogen": 1319, "aliphat": 1319, "acycl": 1319, "keton": 1319, "keto": 1319, "ket": 1319, "fatti": 1319, "alcohol": 1319, "hy": 1319, "unsubstitut": 1319, "benzenoid": 1319, "oxo": 1319, "steroid": 1319, "homopolycycl": 1319, "estran": 1319, "oxost": 1319, "hyd": 1319, "pyrimidin": 1319, "nucleosid": 1319, "deoxyribonucleosid": 1319, "aminopyrimidin": 1319, "hydroxysteroid": 1319, "oxosteroid": 1319, "del": 1319, "delta": 1319, "carbo": 1319, "pyridin": 1319, "pyridinecarboxyl": 1319, "heteromon": 1319, "gave": 1319, "birth": 1319, "000": [1319, 1322], "2235": 1319, "vinylog": 1319, "organooxygen": 1319, "2236": 1319, "2237": 1319, "2238": 1319, "2239": 1319, "2240": 1319, "hmdb_map": 1319, "c00109": 1319, "c00526": 1319, "c00847": 1319, "c00881": 1319, "c00986": 1319, "c01089": 1319, "c03205": 1319, "ccc2": 1319, "12c": 1319, "c05299": 1319, "c05488": 1319, "c05984": 1319, "h3": 1319, "6h": 1319, "8h2": 1319, "1h3": 1319, "t6": 1319, "m0": 1319, "isom": 1319, "hydrid": 1319, "tau": 1319, "n3": 1319, "5m": 1319, "08": 1319, "hmdb_name": 1319, "3m": 1319, "dozen": [1319, 1322], "sooner": 1319, "accid": 1319, "especi": [1319, 1321], "cache_delete_on": 1319, "depod_enzyme_substr": 1319, "cache_off": 1319, "cache_print_on": 1319, "dry_run_on": 1319, "debug_on": 1319, "curl_connect_timeout": 1319, "establish": 1319, "curl_extended_timeout": 1319, "exception": 1319, "curl_retri": 1319, "curl_timeout": 1319, "360": 1319, "stack": 1319, "investig": 1319, "difficult": 1319, "preserve_on": 1319, "depod_curl": 1319, "0x6947386dc8b0": 1319, "bioss": 1319, "uni": 1319, "freiburg": 1319, "de": 1319, "depod_201405_human_phosphatas": 1319, "mitab": 1319, "_io": 1319, "textiowrapp": 1319, "dene": 1319, "6a711369ecf9dcff8c5ed88996685b54": 1319, "iso": 1319, "8859": 1319, "okai": 1319, "wether": 1319, "successfulli": 1319, "night": 1319, "transient": 1319, "disappear": 1319, "perman": 1319, "mayb": 1319, "parti": 1319, "lot": [1319, 1321], "notebook": 1319, "pypath_log": 1319, "s3e92": 1319, "535b06d53a59e75bb693369bc5fdc556": 1319, "112963": 1319, "verifi": 1319, "certif": 1319, "expir": 1319, "softwar": 1319, "encrypt": 1319, "trust": 1319, "reach": [1319, 1320], "global": 1319, "program": 1319, "correctli": 1319, "duti": 1319, "procedur": 1319, "97": 1319, "cipher": 1319, "libcurl": 1319, "anaconda": 1319, "java": 1319, "mozilla": 1319, "firefox": 1319, "seriou": 1319, "get_control": 1319, "resourcecontrol": 1319, "0x6cc25e25dcf0": 1319, "BY": 1319, "sa": 1319, "pw_academ": 1319, "pw_commerci": 1319, "len": 1319, "pdzbase": 1319, "gplv3": 1319, "mit": 1319, "net_academ": 1319, "net_commerci": 1319, "79": 1319, "6833": 1319, "25607": 1319, "6429": 1319, "23288": 1319, "400": 1319, "fine": 1319, "grain": 1319, "expert": 1319, "thought": 1319, "owner": 1319, "permiss": 1319, "pai": 1319, "fee": 1319, "yearusedreleas": 1319, "2011": 1319, "bioinformat": 1319, "690": 1319, "d321": 1319, "suppl_1": 1319, "d235": 1319, "univ": 1319, "lyon1": 1319, "fr": 1319, "omictool": 1319, "tool": 1319, "19147664": 1319, "20852260": 1319, "25378329": 1319, "mammalia": 1319, "swiss": 1319, "prot": 1319, "bairoch": 1319, "repor": 1319, "4479": 1319, "197": 1319, "collect_enzyme_substr": 1319, "enzymesubstrateresourc": 1319, "protmapp": 1319, "202": 1319, "phosphoelm_enzyme_substr": 1319, "larger": 1319, "netr": 1319, "concept": 1319, "deathdomain": 1319, "1864": 1319, "04": 1319, "7979": 1319, "35550": 1319, "8002": 1319, "35748": 1319, "older": 1319, "mentin": 1319, "focu": 1319, "constraint": 1319, "lncrna_protein": 1319, "06": 1319, "warn": 1319, "trpc1": 1319, "kcnma1": 1319, "ppp3ca": 1319, "calm2": 1319, "calm3": 1319, "calm1": 1319, "casp1": 1319, "casp4": 1319, "cacna1c": 1319, "cav1": 1319, "ev": 1319, "118492": 1319, "sync": 1319, "facilit": 1319, "p48995": 1319, "q12791": 1319, "q08209": 1319, "p29466": 1319, "p49662": 1319, "p56539": 1319, "cav3": 1319, "q14247": 1319, "cttn": 1319, "drd2": 1319, "p11532": 1319, "dmd": 1319, "fgfr1": 1319, "q02790": 1319, "fkbp4": 1319, "q86ym7": 1319, "homer1": 1319, "q9nsc5": 1319, "homer3": 1319, "q99750": 1319, "mdfi": 1319, "q14571": 1319, "itpr2": 1319, "q14573": 1319, "itpr3": 1319, "p29966": 1319, "marck": 1319, "grm1": 1319, "p20591": 1319, "mx1": 1319, "p62166": 1319, "ncs1": 1319, "q96d31": 1319, "orai1": 1319, "orai2": 1319, "q9brq5": 1319, "orai3": 1319, "p11171": 1319, "epb41": 1319, "p61586": 1319, "rhoa": 1319, "q9y225": 1319, "rnf24": 1319, "p21817": 1319, "ryr1": 1319, "p16615": 1319, "atp2a2": 1319, "q93084": 1319, "atp2a3": 1319, "p60880": 1319, "snap25": 1319, "q13586": 1319, "sti": 1319, "30573": 1319, "egf": 1319, "fantom5": 1319, "cellsign": 1319, "ia": 1319, "10085134": 1319, "10209155": 1319, "10788520": 1319, "12093292": 1319, "12297050": 1319, "12620237": 1319, "12648462": 1319, "15620700": 1319, "16274239": 1319, "17145710": 1319, "19531499": 1319, "20458382": 1319, "21071413": 1319, "23331499": 1319, "3494473": 1319, "6289330": 1319, "8639530": 1319, "exactli": [1319, 1322], "get_": 1319, "_by_": 1319, "44033": 1319, "q14289": 1319, "q9ulz3": 1319, "44034": 1319, "p54646": 1319, "q9y2i7": 1319, "44035": 1319, "q9bxm7": 1319, "q9y2n7": 1319, "44036": 1319, "p49137": 1319, "q9y385": 1319, "44037": 1319, "q9uhc7": 1319, "p04637": 1319, "44038": 1319, "independ": 1319, "65": 1319, "source_genesymbol": 1319, "target_genesymbol": 1319, "consensus_direct": 1319, "consensus_stimul": 1319, "consensus_inhibit": 1319, "19168436": 1319, "25139746": 1319, "23228564": 1319, "11290752": 1319, "11983166": 1319, "12601176": 1319, "36729": 1319, "ptk2b": 1319, "pycard": 1319, "27796369": 1319, "36730": 1319, "prkaa2": 1319, "pikfyv": 1319, "24070423": 1319, "36731": 1319, "pink1": 1319, "hif3a": 1319, "27551449": 1319, "36732": 1319, "mapkapk2": 1319, "ube2j1": 1319, "24020373": 1319, "36733": 1319, "mkrn1": 1319, "tp53": 1319, "19536131": 1319, "36734": 1319, "customis": 1319, "webservice_interactions_df": 1319, "dorothea_tfb": 1319, "dorothea_coexp": 1319, "ncbi_tax_id_sourc": 1319, "entity_type_sourc": 1319, "ncbi_tax_id_target": 1319, "entity_type_target": 1319, "trip_method": 1319, "immunoprecipit": 1319, "fluoresc": 1319, "downstream": 1319, "benefici": 1319, "undesir": 1319, "grn": 1319, "network_allow_loop": 1319, "gr": 1319, "count_loop": 1319, "149": 1319, "33571": 1319, "281262": 1319, "gabarapl3": 1319, "q9by60": 1319, "id_from_label": 1319, "o75385": 1319, "ulk1": [1319, 1322], "id_from_label0": 1319, "certainli": 1319, "q15796": 1319, "q62432": 1319, "8408": 1319, "autumn": 1319, "uniprotmap": 1319, "outdat": 1319, "inputs_format": 1319, "uniprotlistmap": 1319, "biomartmap": 1319, "arraymap": 1319, "promap": 1319, "unichemmap": 1319, "filemap": 1319, "fly": 1319, "dispatch": 1319, "geneid": 1319, "input_cl": 1319, "22169": 1319, "clear": 1319, "eas": 1319, "ac_queri": 1319, "ac_map": 1319, "biomart_map": 1319, "pro_map": 1319, "array_map": 1319, "comptox": 1319, "dailym": 1319, "dailymed_old": 1319, "6649": 1319, "human_mouse_genesymbol": 1319, "micos13": 1319, "fat4": 1319, "rars2": 1319, "zfp36l2": 1319, "lamc1": 1319, "24843": 1319, "krtap4": 1319, "gm40460": 1319, "24844": 1319, "gm45618": 1319, "24845": 1319, "gm4559": 1319, "24846": 1319, "igkv1or2": 1319, "108": 1319, "igkv20": 1319, "101": 1319, "24847": 1319, "fpgt": 1319, "tnni3k": 1319, "22266": 1319, "everywher": 1319, "deal": 1319, "hsapien": 1319, "ensmebl": 1319, "hsa": 1319, "ensure_ncbi_tax_id": 1319, "ensure_latin_nam": 1319, "cow": 1319, "bo": 1319, "tauru": 1319, "ensure_common_nam": 1319, "erithacu": 1319, "rubecula": 1319, "european": 1319, "robin": 1319, "uniprot_taxid": 1319, "p53104": 1319, "saccharomyc": 1319, "cerevisia": 1319, "divers": 1319, "essenti": 1319, "harbor": 1319, "littl": 1319, "119": 1319, "iuniprot": 1319, "all_swissprot": 1319, "all_trembl": 1319, "86440": 1319, "17131": 1319, "69300": 1319, "a0a8d0h0c2": 1319, "inde": 1319, "125": 1319, "is_uniprot": 1319, "122": 1319, "is_swissprot": 1319, "126": 1319, "protein_datasheet": 1319, "egfr_human": 1319, "1210": 1319, "o00688": 1319, "o00732": 1319, "p06268": 1319, "q14225": 1319, "q68gs5": 1319, "q92795": 1319, "q9bzs2": 1319, "q9gzx1": 1319, "q9h2c9": 1319, "q9h3c9": 1319, "q9umd7": 1319, "q9umd8": 1319, "q9umg5": 1319, "dt": 1319, "jul": 1319, "1986": 1319, "nov": 1319, "1997": 1319, "oct": 1319, "283": 1319, "recnam": 1319, "epiderm": 1319, "growth": 1319, "eco": 1319, "0000305": 1319, "ec": 1319, "altnam": 1319, "proto": 1319, "oncogen": 1319, "erbb": 1319, "tyrosin": 1319, "flag": 1319, "precursor": 1319, "gn": 1319, "0000312": 1319, "3236": 1319, "erbb1": 1319, "her1": 1319, "eukaryota": 1319, "metazoa": 1319, "chordata": 1319, "craniata": 1319, "vertebrata": 1319, "euteleostomi": 1319, "eutheria": 1319, "euarchontoglir": 1319, "primat": 1319, "haplorrhini": 1319, "catarrhini": 1319, "hominida": 1319, "ox": 1319, "ncbi_taxid": 1319, "rn": 1319, "rp": 1319, "nucleotid": 1319, "58080": 1319, "131": 1319, "egfr_histori": 1319, "uniprot_histori": 1319, "uniprotrecordhistori": 1319, "2022_04": 1319, "282": 1319, "2022_03": 1319, "281": 1319, "2022_02": 1319, "280": 1319, "2022_01": 1319, "279": 1319, "2021_04": 1319, "2021": 1319, "278": 1319, "50933": 1319, "132": 1319, "uniprot_recent_vers": 1319, "133": 1319, "uniprot_history_recent_datasheet": 1319, "deploi": 1319, "uniprot_data": 1319, "situat": 1319, "uniprot_preprocess": 1319, "clutter": 1319, "p63120": 1319, "peptidas": 1319, "a2": 1319, "herv": 1319, "k": 1319, "hml": 1319, "q96ec8": 1319, "yip1": 1319, "q6zms4": 1319, "krueppel": 1319, "c2h2": 1319, "zinc": 1319, "finger": 1319, "q8n8l2": 1319, "q3mis6": 1319, "q86uk7": 1319, "znf598": 1319, "q6p280": 1319, "q969w1": 1319, "dhhc": 1319, "palmitoyltransferas": 1319, "o14978": 1319, "q15937": 1319, "q9p2j8": 1319, "q8iuh4": 1319, "akr": 1319, "zdhhc17": 1319, "q9y2d9": 1319, "q14588": 1319, "q6xr72": 1319, "cation": 1319, "diffus": 1319, "cdf": 1319, "transport": 1319, "tc": 1319, "slc30a": 1319, "p58557": 1319, "endoribonucleas": 1319, "ybei": 1319, "q9y5a9": 1319, "ythdf": 1319, "ythdf2": 1319, "q8n9l1": 1319, "501768": 1319, "cleaner": 1319, "imperfect": 1319, "job": 1319, "badli": 1319, "strip": 1319, "136": 1319, "uniprot_taxonomi": 1319, "p00521": 1319, "abelson": 1319, "murin": 1319, "leukemia": 1319, "viru": 1319, "p03333": 1319, "h8zm73": 1319, "abi": 1319, "balsamea": 1319, "balsam": 1319, "fir": 1319, "pinu": 1319, "h8zm71": 1319, "q9mv51": 1319, "firma": 1319, "momi": 1319, "o81086": 1319, "grandi": 1319, "grand": 1319, "o24474": 1319, "o24475": 1319, "o64404": 1319, "o64405": 1319, "q948z0": 1319, "q9m7d1": 1319, "q9m7d0": 1319, "o22340": 1319, "q9m7c9": 1319, "q5k3v1": 1319, "homolepi": 1319, "nikko": 1319, "p21715": 1319, "abrothrix": 1319, "jelskii": 1319, "akodon": 1319, "jelski": 1319, "altiplano": 1319, "p11140": 1319, "abru": 1319, "56985": 1319, "139": 1319, "uniprot_ncbi_taxids_2": 1319, "648330": 1319, "aed": 1319, "albopictu": 1319, "densoviru": 1319, "isol": 1319, "boublik": 1319, "1994": 1319, "aaldnv": 1319, "10804": 1319, "adeno": 1319, "aav": 1319, "648242": 1319, "srivastava": 1319, "1982": 1319, "118452": 1319, "abacion": 1319, "magnum": 1319, "milliped": 1319, "72259": 1319, "abaei": 1319, "nicipp": 1319, "sleepi": 1319, "orang": 1319, "butterfli": 1319, "eurema": 1319, "102642": 1319, "abax": 1319, "parallelepipedu": 1319, "ground": 1319, "beetl": 1319, "392897": 1319, "abalist": 1319, "stellari": 1319, "starri": 1319, "triggerfish": 1319, "balist": 1319, "75332": 1319, "abbottina": 1319, "rivulari": 1319, "chines": 1319, "gudgeon": 1319, "gobio": 1319, "515833": 1319, "abdopu": 1319, "aculeatu": 1319, "engl": 1319, "118050": 1319, "140": 1319, "uniprot_loc": 1319, "uniprotloc": 1319, "golgi": 1319, "apparatu": 1319, "nucleu": 1319, "q15916": 1319, "endoplasm": 1319, "reticulum": 1319, "q66k41": 1319, "q8nd82": 1319, "q9np64": 1319, "nucleolu": 1319, "143466": 1319, "141": 1319, "uniprot_keyword": 1319, "uniprotkeyword": 1319, "aspartyl": 1319, "proteas": 1319, "autocatalyt": 1319, "cleavag": 1319, "erv": 1319, "hydrolas": 1319, "ribosom": 1319, "frameshift": 1319, "transpos": 1319, "acetyl": [1319, 1322], "splice": 1319, "metal": 1319, "unipro": 1319, "445111": 1319, "142": 1319, "uniprot_famili": 1319, "uniprotfamili": 1319, "77892": 1319, "143": 1319, "uniprot_tissu": 1319, "uniprottissu": 1319, "brain": 1319, "colon": 1319, "heart": 1319, "kidnei": 1319, "leukocyt": 1319, "liver": 1319, "lung": 1319, "ovari": 1319, "pancrea": 1319, "placenta": 1319, "prostat": 1319, "skelet": 1319, "muscl": [1319, 1322], "intestin": 1319, "spleen": 1319, "testi": 1319, "318790": 1319, "144": 1319, "uniprot_topologi": 1319, "uniprottopologi": 1319, "topologi": [1319, 1322], "cytoplasm": 1319, "137": 1319, "146": 1319, "206": 1319, "212": 1319, "lumen": 1319, "106": 1319, "115": 1319, "168": 1319, "184": 1319, "234": 1319, "236": 1319, "85": 1319, "105": 1319, "116": 1319, "147": 1319, "167": 1319, "185": 1319, "205": 1319, "213": 1319, "233": 1319, "138": 1319, "198": 1319, "288": 1319, "377": 1319, "220": 1319, "544230": 1319, "bulk": 1319, "153": 1319, "q14457": 1319, "becn1": 1319, "154": 1319, "156": 1319, "subcellular_loc": 1319, "112631": 1319, "1050": 1319, "cytosol": 1319, "preautophagosom": 1319, "starvat": 1319, "puncat": 1319, "sequest": 1319, "portion": 1319, "autophagosom": 1319, "mepgrggtetvgkfefsrkdlighgafavvfkgrhrekhdlevavkcinkknlaksqtllgkeikilkelkhenivalydfqemansvylvmeycnggdladylhamrtlsedtirlflqqiagamrllhskgiihrdlkpqnillsnpagrranpnsirvkiadfgfarylqsnmmaatlcgspmymapevimsqhydgkadlwsigtivyqcltgkapfqasspqdlrlfyeknktlvptipretsaplrqlllallqrnhkdrmdfdeffhhpfldaspsvrksppvpvpsypssgsgssssssstshlasppslgemqqlqktlaspadtagflhssrdsggskdsscdtddfvmvpaqfpgdlvaeapsakpppdslmcsgsslvasagleshgrtpspsppcssspspsgragpfsssrcgasvpipvptqvqnyqriernlqsptqfqtprssairrsgstsplgfaraspsppahaehggvlarkmslgggrpytpspqvgtiperpgwsgtpspqgaemrggrsprpgssapehsprtsglgcrlhsapnlsdlhvvrpklpkpptdplgavfsppqasppqpshglqscrnlrgspklpdflqrnplppilgsptkavpsfdfpktpssqnllallarqgvvmtpprnrtlpdlsevgpfhgqplgpglrpgedpkgpfgrsfstsrltdlllkaafgtqapdpgsteslqek": 1319, "1329": 1319, "ineffici": 1319, "hand": 1319, "158": 1319, "134277": 1319, "51896": 1319, "450": 1319, "159": 1319, "There": 1319, "character": 1319, "160": 1319, "function_o": 1319, "subcellula": 1319, "r_genecard": 1319, "r_locat": 1319, "alternativ": 1319, "20254": 1319, "exploit": 1319, "162": 1319, "q9uq28": 1319, "8m": 1319, "81": 1319, "acquir": 1319, "mtor": [1319, 1322], "s473": 1319, "sparser": 1319, "t450": 1319, "t308": 1319, "e_ptm": 1319, "473": 1319, "14761976": 1319, "15047712": 1319, "15364915": 1319, "15718470": 1319, "15899889": 1319, "16221682": 1319, "17013611": 1319, "19844585": 1319, "20333297": 1319, "20489726": 1319, "21157483": 1319, "21592956": 1319, "23006971": 1319, "8978681": 1319, "9736715": 1319, "dabas": 1319, "p63104": 1319, "ywhaz": 1319, "hprd_mimp": 1319, "11956222": 1319, "12861023": 1319, "phosphosite_mimp": 1319, "phosp": 1319, "15071501": 1319, "p45983": 1319, "mapk8": 1319, "phosph": 1319, "15696159": 1319, "p06493": 1319, "cdk1": 1319, "712": 1319, "rea": 1319, "15525677": 1319, "18220": 1319, "2171679": 1319, "41421": 1319, "p29597": 1319, "tyk2": 1319, "p51692": 1319, "stat5b": 1319, "699": 1319, "10830280": 1319, "11751923": 1319, "12411494": 1319, "41422": 1319, "q06418": 1319, "tyro3": 1319, "p19174": 1319, "plcg1": 1319, "771": 1319, "12601080": 1319, "15144186": 1319, "15592455": 1319, "41423": 1319, "q9h4a3": 1319, "wnk1": 1319, "q8tax0": 1319, "osr1": 1319, "18270262": 1319, "41424": 1319, "q96j92": 1319, "wnk4": 1319, "335": 1319, "15883153": 1319, "41425": 1319, "q9nyl2": 1319, "map3k20": 1319, "q92903": 1319, "cds1": 1319, "10973490": 1319, "ve": 1319, "power": 1319, "believ": 1319, "ever": 1319, "topic": 1319, "186": 1319, "seqc": 1319, "get_seq": 1319, "get_region": 1319, "tfiirclqwt": 1319, "187": 1319, "human_proteom": 1319, "swissprot_seq": 1319, "0x689900d45cc0": 1319, "0x689908ea8f70": 1319, "0x689908eaa4a0": 1319, "0x6899223538b0": 1319, "0x689922353c70": 1319, "o60384": 1319, "0x689922350730": 1319, "0x689922353310": 1319, "0x689922353760": 1319, "0x689922353190": 1319, "0x689922350d90": 1319, "0x689922353220": 1319, "p61129": 1319, "0x689922353370": 1319, "0x6899223534f0": 1319, "0x689922350c70": 1319, "0x689922351450": 1319, "0x689922353910": 1319, "0x6899223502b0": 1319, "p98182": 1319, "0x689922350280": 1319, "0x68992235": 1319, "53045": 1319, "191": 1319, "ygct": 1319, "seqlookup": 1319, "625": 1319, "annotationt": 1319, "3788067": 1319, "51636": 1319, "78": 1319, "cpad": 1319, "2308": 1319, "1358": 1319, "regulator_typ": 1319, "effect_on_pathwai": 1319, "effect_on_canc": 1319, "effect_on_cancer_outcom": 1319, "pathway_categori": 1319, "acut": 1319, "lymphoblast": 1319, "myeloid": 1319, "aml": 1319, "basal": 1319, "carcinoma": 1319, "bladder": 1319, "breast": 1319, "cervic": 1319, "cholangiocarcinoma": 1319, "choriocarcinoma": 1319, "chronic": 1319, "lymphocyt": 1319, "cll": 1319, "cml": 1319, "colorect": 1319, "endometri": 1319, "esophag": 1319, "ew": 1319, "sarcoma": 1319, "gallbladd": 1319, "gastric": 1319, "glioma": 1319, "hepatocellular": 1319, "hodgkin": 1319, "lymphoma": 1319, "infantil": 1319, "hemangioma": 1319, "laryng": 1319, "malign": 1319, "melanoma": 1319, "pleural": 1319, "mesothelioma": 1319, "mantl": 1319, "myeloma": 1319, "nasopharyng": 1319, "neuroblastoma": 1319, "oral": 1319, "osteosarcoma": 1319, "ovarian": 1319, "pancreat": 1319, "pituitari": 1319, "adenoma": 1319, "renal": 1319, "squamou": 1319, "synovi": 1319, "testicular": 1319, "thyroid": 1319, "a6ndv4": 1319, "o14745": 1319, "o14862": 1319, "o15169_p25054": 1319, "o94813": 1319, "o94953": 1319, "p06733": 1319, "glucos": 1319, "p11166": 1319, "p25054": 1319, "p40261": 1319, "p49327": 1319, "p54687": 1319, "pten": 1319, "p60484": 1319, "q01973": 1319, "q12888": 1319, "q13620": 1319, "q96cx2": 1319, "q99558": 1319, "mimat0000069": 1319, "mimat0000089": 1319, "mimat0000093": 1319, "mimat0000262": 1319, "mimat0000274": 1319, "mimat0000422": 1319, "mimat0000427": 1319, "mimat0000437": 1319, "mimat0000449": 1319, "mimat0000455": 1319, "mimat0000460": 1319, "mimat0000461": 1319, "mimat0000617": 1319, "mimat0003266": 1319, "mimat0003320": 1319, "o75473": 1319, "o75888": 1319, "o76041": 1319, "p13631": 1319, "p22676": 1319, "p25791": 1319, "p546": 1319, "1279": 1319, "celltypist": 1319, "927": 1319, "62": 1319, "cellcellinteract": 1319, "5544": 1319, "8479": 1319, "4813": 1319, "lambert2018": 1319, "3281": 1319, "3277": 1319, "cancersea": 1319, "2515": 1319, "1992": 1319, "phobiu": 1319, "35382": 1319, "go_intercel": 1319, "48799": 1319, "18377": 1319, "18127": 1319, "15903": 1319, "3558": 1319, "matrisom": 1319, "1514": 1319, "hpa_secretom": 1319, "3568": 1319, "1748": 1319, "1695": 1319, "annotati": 1319, "5842": 1319, "exempl": 1319, "mainclass": 1319, "subsubclass": 1319, "collagen": 1319, "glycoprotein": 1319, "affili": 1319, "proteoglycan": 1319, "a6nmz7": 1319, "a8tx70": 1319, "b4dz39": 1319, "homotrim": 1319, "ht_dm_cluster278": 1319, "p02452_p02462_p08572_p29400_p53420_q01955_q02388_q14031_q17rw2_q8nfw1": 1319, "trimer": 1319, "p02452_p08123": 1319, "xi": 1319, "p02458_p12107_p13942": 1319, "p02458_p20908_p25067": 1319, "p02458_p20908_p25067_p29400": 1319, "p02458_p25067_p29400": 1319, "iv": 1319, "p02462_p08572": 1319, "p05997_p12107": 1319, "p05997_p12107_p20908": 1319, "p05997_p20908": 1319, "p05997_p20908_p25940": 1319, "p12109_p12110": 1319, "3072": 1319, "membership": 1319, "signalinkpathwai": 1319, "keggpathwai": 1319, "netpathpathwai": 1319, "28745": 1319, "6762": 1319, "jak": 1319, "actin": 1319, "cytoskeleton": 1319, "oxytocin": 1319, "phospholipas": 1319, "inhibitor": 1319, "resist": 1319, "papillomaviru": 1319, "infect": 1319, "carbon": 1319, "endocytosi": 1319, "cholin": 1319, "parathyroid": 1319, "synthesi": 1319, "2540": 1319, "record_id": [1319, 1322], "q16181": 1319, "sept7": 1319, "upregul": 1319, "14396": 1319, "p30990": 1319, "nt": 1319, "2306": 1319, "14397": 1319, "2307": 1319, "14398": 1319, "erk": 1319, "14399": 1319, "14400": 1319, "14401": 1319, "convent": 1319, "tidyvers": 1319, "tidyr": [1319, 1322], "pivot_wid": 1319, "unintuit": 1319, "index_col": 1319, "set_index": 1319, "unstack": 1319, "droplevel": 1319, "reset_index": 1319, "mimat0000431": 1319, "mir": 1319, "tumor": 1319, "invas": 1319, "adam10": 1319, "mediat": 1319, "notch1": [1319, 1322], "notch": 1319, "mimat0005886": 1319, "1297": 1319, "prolifer": 1319, "aeg1": 1319, "wnt": 1319, "q9up65": 1319, "pla2g4c": 1319, "chemotaxi": 1319, "downregul": 1319, "akt": 1319, "pi3k": 1319, "q92600": 1319, "cnot9": 1319, "2303": 1319, "epcam": 1319, "2304": 1319, "q9y6y0": 1319, "ivns1abp": 1319, "2305": 1319, "kctd12": 1319, "catenin": 1319, "anyon": 1319, "intercellannot": 1319, "310033": 1319, "43617": 1319, "annot_combined_class": 1319, "revis": 1319, "annotdefkei": 1319, "annotationgroup": 1319, "5150": 1319, "5760": 1319, "7041": 1319, "transmembrane_predict": 1319, "6444": 1319, "transmembrane_phobiu": 1319, "almen2009": 1319, "2072": 1319, "transmembrane_sosui": 1319, "1663": 1319, "tran": 1319, "143945": 1319, "gaba_receptor": 1319, "gaba": 1319, "a8mpy1": 1319, "gabra1": 1319, "gabrb2": 1319, "gabrd": 1319, "o14764_p14867_p47870": 1319, "o14764_p28472_p48169": 1319, "o14764_p28472_q16445": 1319, "o14764_p47870_p48169": 1319, "o14764_p47870_q16445": 1319, "gabbr1": 1319, "gabbr2": 1319, "o75899_q9ubs5": 1319, "p14867": 1319, "gamma": 1319, "p14867_p18507_p28472": 1319, "gabrg2": 1319, "p14867_p18507_p47870": 1319, "p18507_p28472_p31644": 1319, "p18507_p28472_p34903": 1319, "p18507_p28472_p47869": 1319, "p18507_p28472_q16445": 1319, "p18507_q8n1c3": 1319, "counts_df": 1319, "consensus_scor": 1319, "plasma_membrane_transmembran": 1319, "plasma_membrane_peripher": 1319, "n_uniprot": 1319, "1120": 1319, "parin_adhesion_regul": 1319, "intracellular_intercellular_rel": 1319, "1121": 1319, "plakophilin_adhesion_regul": 1319, "1122": 1319, "actin_regulation_adhesom": 1319, "1123": 1319, "adhesion_cytoskeleton_adaptor": 1319, "118": 1319, "1124": 1319, "1125": 1319, "q96jp9": 1319, "cdhr1": 1319, "q9p126": 1319, "clec1b": 1319, "q13585": 1319, "gpr50": 1319, "q8n9i0": 1319, "syt2": 1319, "o43614": 1319, "hcrtr2": 1319, "a6njy1": 1319, "slc9b1p1": 1319, "q5ri15": 1319, "cox20": 1319, "q13948": 1319, "cux1": 1319, "q8ngk4": 1319, "or52k1": 1319, "q8iys2": 1319, "kiaa2013": 1319, "neurotensin": 1319, "recom": 1319, "o95665": 1319, "ntsr2": 1319, "410": 1319, "45385": 1319, "neurotensi": 1319, "tr": 1319, "idecapepti": 1319, "disulfid": 1319, "7598": 1319, "0x689946b55570": 1319, "82": 1319, "0x68991cdc9b40": 1319, "NOT": 1319, "p21333": 1319, "p80108": 1319, "p62258": 1319, "q9nrx4": 1319, "p54710": 1319, "q8ner1": 1319, "0001507": 1319, "0001527": 1319, "0003351": 1319, "0003355": 1319, "0005201": 1319, "0005577": 1319, "0005582": 1319, "0005583": 1319, "0005584": 1319, "0005585": 1319, "0005586": 1319, "0005587": 1319, "0005588": 1319, "0005590": 1319, "0005591": 1319, "0005592": 1319, "0005595": 1319, "0005596": 1319, "0005599": 1319, "0005601": 1319, "0005602": 1319, "0005604": 1319, "0005606": 1319, "0005607": 1319, "0005608": 1319, "0005609": 1319, "0005610": 1319, "0005611": 1319, "0005612": 1319, "0005614": 1319, "0005615": 1319, "0005616": 1319, "0006858": 1319, "0006859": 1319, "0006860": 1319, "0009519": 1319, "0010367": 1319, "0016914": 1319, "0016942": 1319, "0020003": 1319, "0020004": 1319, "0020005": 1319, "0020006": 1319, "0030020": 1319, "0030021": 1319, "0030023": 1319, "0030197": 1319, "0030345": 1319, "0030934": 1319, "0030935": 1319, "0030938": 1319, "0031012": 1319, "0031395": 1319, "0032311": 1319, "0032579": 1319, "0033165": 1319, "0033166": 1319, "0034358": 1319, "0034359": 1319, "0034360": 1319, "0034361": 1319, "0034362": 1319, "0034363": 1319, "0034364": 1319, "0034365": 1319, "00343": 1319, "3104": 1319, "homomultim": 1319, "update_index": 1319, "91": 1319, "p42345": [1319, 1322], "o00141_o15530_o75879_p23443_p34931_p42345_q6r327_q8n122_q9bpz7_q9bvc4_q9h672": 1319, "o00141_o15530_p07900_p23443_p31749_p31751_p42345_p78527_q05513_q05655_q6r327_q8n122_q9bpz7_q9bvc4": 1319, "o00141_o15530_p0cg47_p0cg48_p23443_p42345_q15118_q6r327_q8n122_q96br1_q9bpz7_q9bvc4": 1319, "o00141_o15530_p23443_p42345_q15118_q6r327_q8n122_q96br1_q96j02_q9bpz7_q9bvc4": 1319, "o00141_o75879_p0cg48_p23443_p34931_p42345_p62753_q6r327_q8n122_q9bpz7_q9bvc4_q9ny26": 1319, "o00141_p0cg48_p23443_p36894_p42345_p62942_p68106_q15427_q6r327_q8n122_q9bpz7_q9bvc4": 1319, "o00141_p0cg48_p23443_p42345_p46781_p62753_q6r327_q8n122_q96kq7_q9bpz7_q9bvc4_q9ny26": 1319, "o00141_p0cg48_p23443_p42345_p62753_p62942_q6r327_q8n122_q9bpz7_q9bvc4_q9ny26": 1319, "o00141_p0cg48_p23443_p42345_p62753_q15172_q6r327_q8iw41_q9bpz7_q9bvc4_q9h672": 1319, "o00141_p0cg48_p23443_p42345_p62753_q6r327_q70z35_q8n122_q8tcu6_q9bpz7": 1319, "5348": 1319, "despit": [1319, 1321], "98": 1319, "q92793": 1319, "q09472": 1319, "components_genesymbol": 1319, "nfya_nfyb_nfyc": 1319, "15243141": 1319, "14755292": 1319, "9372932": 1319, "4478": 1319, "hc1449": 1319, "deptor_eef1a1_mlst8_prr5_rictor": 1319, "c2": 1319, "akt1s1_deptor_mlst8_mtor_rptor": 1319, "btrc_cul1_skp1": 1319, "9990852": 1319, "c5": 1319, "227": 1319, "hc757": 1319, "crebbp_ep300": 1319, "c6": 1319, "28168": 1319, "npnt": 1319, "q5szk8_q6uxi9_q86xx4": 1319, "fras1_frem2_npnt": 1319, "28169": 1319, "nrp1_nrp2": 1319, "o14786_o60462_q9y4d7": 1319, "nrp1_nrp2_plxnd1": 1319, "28170": 1319, "nrp2_plxna2": 1319, "o60462_o75051": 1319, "28171": 1319, "nrp2_plxna4": 1319, "o60462_q9hcm2": 1319, "28172": 1319, "ptch2_smo": 1319, "q99835_q9y6c5": 1319, "good": 1319, "myannot": 1319, "complexdb": 1319, "mycomplex": 1319, "char": 1319, "xxxxx": 1319, "ten": 1319, "l0n17": 1319, "annoi": 1319, "educ": 1319, "credit": 1319, "gnu": 1319, "104": 1319, "prioriti": 1319, "107": 1319, "si": 1319, "download_complex": 1319, "d7b8673e83e43a01c533f9de5a2b04b9": 1319, "1046": 1319, "creation": 1319, "builtin": 1319, "shell": 1319, "dev": 1319, "devnul": 1319, "notic": 1319, "109": 1319, "greet": 1319, "childoflogg": 1319, "say_someth": 1319, "_log": 1319, "anywher": 1319, "111": 1319, "_logger": 1319, "mylogg": 1319, "strai": 1319, "flood": 1319, "112": 1319, "hasn": 1319, "thoroughli": 1319, "scai": 1319, "fraunhof": 1319, "captur": 1319, "belgraph": 1319, "bel_graph": 1319, "export_relationship": 1319, "omnipath_pathwai": 1319, "fp": 1319, "bel_str": 1319, "333": 1319, "network_expand_complex": 1319, "interaction_input": 1319, "singnalink": 1319, "interaction_datafram": 1319, "protein_datafram": 1319, "worri": 1319, "network1": 1319, "entreza": 1319, "entrezb": 1319, "1950": 1319, "5290": 1319, "207": 1319, "2932": 1319, "network2": 1319, "pik3ca": 1319, "sos1": 1319, "rac1": 1319, "map3k1": 1319, "hra": 1319, "gsk3b": 1319, "iinput_format": 1319, "input1": 1319, "readset": 1319, "egf1": 1319, "input2": 1319, "egf2": 1319, "ecount": 1319, "vcount": 1319, "3241": 1319, "p17252": 1319, "q15139": 1319, "contradict": 1319, "rid": 1319, "helper": 1319, "plural": 1319, "atg16l2": 1319, "_namedvertexseq": 1319, "bit": 1319, "contraintuit": 1319, "affected_bi": 1319, "similari": 1319, "inhibited_bi": 1319, "gs_": 1319, "up_": 1319, "indirect": 1319, "rapidli": 1319, "atg3": [1319, 1322], "map1lc3b": [1319, 1322], "sqstm1": [1319, 1322], "refs_by_sourc": 1319, "abil": 1319, "egf_network": 1319, "777777": 1319, "97be73": 1319, "ffffff": 1319, "ipython": 1319, "visibl": 1319, "inlin": 1319, "120": 1319, "imag": 1319, "click": 1320, "changelog": 1321, "improv": 1321, "remot": 1321, "partial": 1321, "pyreact": 1321, "rule": [1321, 1322], "mysql_connect": 1321, "python3": 1321, "dataio": 1321, "docstr": 1321, "focus": 1321, "rewritten": 1321, "workaround": 1321, "terribl": 1321, "reflist": 1321, "becam": 1321, "paremet": 1321, "reorgan": 1321, "redesign": 1321, "yml": 1321, "neo4j": 1321, "biocyph": 1321, "dlmanag": 1321, "protocol": 1322, "wget": 1322, "whatev": 1322, "recogn": 1322, "pathwayextra": 1322, "optimum": 1322, "kinaseextra": 1322, "ligrecextra": 1322, "mirnatarget": 1322, "interacion": 1322, "rodent": 1322, "omic": 1322, "arget": 1322, "source_target": 1322, "atg7": 1322, "map1lc3a": 1322, "map1lc3c": 1322, "q9h0r8": 1322, "gabarap": 1322, "gabarapl2": 1322, "appear": 1322, "fyn": 1322, "ubiquitin": 1322, "ens_sub": 1322, "phosphosite_noref": 1322, "hearth": 1322, "dplyr": 1322, "signalink_pathwai": 1322, "bmp7": 1322, "hpa_tissu": 1322, "funtion": 1322, "ion": 1322, "interleukin": 1322, "deliv": 1322, "atg4a": 1322, "bmp8b": 1322, "intuit": 1322, "repli": 1322}, "objects": {"": [[0, 0, 0, "-", "pypath"]], "pypath": [[1, 0, 0, "-", "core"], [150, 0, 0, "-", "data"], [151, 3, 1, "", "disclaimer"], [152, 3, 1, "", "info"], [153, 0, 0, "-", "inputs"], [860, 0, 0, "-", "internals"], [907, 0, 0, "-", "legacy"], [918, 3, 1, "", "log"], [919, 0, 0, "-", "omnipath"], [956, 0, 0, "-", "resources"], [983, 0, 0, "-", "share"], [1121, 0, 0, "-", "utils"], [1274, 0, 0, "-", "visual"]], "pypath.core": [[2, 0, 0, "-", "annot"], [95, 0, 0, "-", "attrs"], [97, 0, 0, "-", "common"], [99, 0, 0, "-", "complex"], [121, 0, 0, "-", "entity"], [125, 0, 0, "-", "enz_sub"], [131, 0, 0, "-", "evidence"], [134, 0, 0, "-", "interaction"], [138, 0, 0, "-", "intercell"], [142, 0, 0, "-", "intercell_annot"], [144, 0, 0, "-", "network"]], "pypath.core.annot": [[3, 1, 1, "", "Adhesome"], [4, 1, 1, "", "Almen2009"], [5, 1, 1, "", "AnnotationBase"], [6, 1, 1, "", "AnnotationTable"], [7, 1, 1, "", "Baccin2019"], [8, 1, 1, "", "Biogps"], [9, 1, 1, "", "CancerGeneCensus"], [10, 1, 1, "", "Cancerdrugsdb"], [11, 1, 1, "", "Cancersea"], [12, 1, 1, "", "CellPhoneDB"], [13, 1, 1, "", "CellPhoneDBComplex"], [14, 1, 1, "", "CellSurfaceProteinAtlas"], [15, 1, 1, "", "CellSurfaceProteinAtlasCellType"], [16, 1, 1, "", "Cellcall"], [17, 1, 1, "", "Cellcellinteractions"], [18, 1, 1, "", "Cellchatdb"], [19, 1, 1, "", "CellchatdbComplex"], [20, 1, 1, "", "Cellinker"], [21, 1, 1, "", "CellinkerComplex"], [22, 1, 1, "", "Celltalkdb"], [23, 1, 1, "", "Celltypist"], [24, 1, 1, "", "Comppi"], [25, 1, 1, "", "Connectomedb"], [26, 1, 1, "", "Corum"], [27, 1, 1, "", "CorumFuncat"], [28, 1, 1, "", "CorumGO"], [29, 1, 1, "", "Cpad"], [30, 1, 1, "", "CustomAnnotation"], [31, 1, 1, "", "Cytosig"], [32, 1, 1, "", "Dgidb"], [33, 1, 1, "", "Disgenet"], [34, 1, 1, "", "Embrace"], [35, 1, 1, "", "Exocarta"], [36, 1, 1, "", "GOCustomIntercell"], [37, 1, 1, "", "GOIntercell"], [38, 1, 1, "", "Gpcrdb"], [39, 1, 1, "", "GuideToPharmacology"], [40, 1, 1, "", "HPO"], [41, 1, 1, "", "Hgnc"], [42, 1, 1, "", "HpmrComplex"], [43, 1, 1, "", "HumanPlasmaMembraneReceptome"], [44, 1, 1, "", "HumanProteinAtlas"], [45, 1, 1, "", "HumanProteinAtlasSecretome"], [46, 1, 1, "", "HumanProteinAtlasSubcellular"], [47, 1, 1, "", "Humancellmap"], [48, 1, 1, "", "Icellnet"], [49, 1, 1, "", "IcellnetComplex"], [50, 1, 1, "", "Integrins"], [51, 1, 1, "", "InterPro"], [52, 1, 1, "", "Intogen"], [53, 1, 1, "", "Italk"], [54, 1, 1, "", "KeggPathways"], [55, 1, 1, "", "KeggPathwaysPC"], [56, 1, 1, "", "Kinasedotcom"], [57, 1, 1, "", "Kirouac2010"], [58, 1, 1, "", "Lambert2018"], [59, 1, 1, "", "LigandReceptor"], [60, 1, 1, "", "Locate"], [61, 1, 1, "", "Lrdb"], [62, 1, 1, "", "Matrisome"], [63, 1, 1, "", "Matrixdb"], [64, 1, 1, "", "Mcam"], [65, 1, 1, "", "Membranome"], [66, 1, 1, "", "Msigdb"], [67, 1, 1, "", "NetpathPathways"], [68, 1, 1, "", "Opm"], [69, 1, 1, "", "Panglaodb"], [70, 1, 1, "", "Phobius"], [71, 1, 1, "", "Phosphatome"], [72, 1, 1, "", "Progeny"], [73, 1, 1, "", "Ramilowski2015"], [74, 1, 1, "", "Ramilowski2015Location"], [75, 1, 1, "", "Scconnect"], [76, 1, 1, "", "ScconnectComplex"], [77, 1, 1, "", "SignalinkFunctions"], [78, 1, 1, "", "SignalinkPathways"], [79, 1, 1, "", "SignorPathways"], [80, 1, 1, "", "Surfaceome"], [81, 1, 1, "", "Talklr"], [82, 1, 1, "", "Tcdb"], [83, 1, 1, "", "Tfcensus"], [84, 1, 1, "", "Topdb"], [85, 1, 1, "", "UniprotFamilies"], [86, 1, 1, "", "UniprotKeywords"], [87, 1, 1, "", "UniprotLocations"], [88, 1, 1, "", "UniprotTissues"], [89, 1, 1, "", "UniprotTopologies"], [90, 1, 1, "", "Vesiclepedia"], [91, 1, 1, "", "Wang"], [92, 1, 1, "", "Zhong2015"], [93, 3, 1, "", "get_db"], [94, 3, 1, "", "init_db"]], "pypath.core.annot.Adhesome": [[3, 2, 1, "", "__init__"], [3, 2, 1, "", "add_complexes_by_inference"], [3, 2, 1, "", "all_complexes"], [3, 2, 1, "", "all_entities"], [3, 2, 1, "", "all_mirnas"], [3, 2, 1, "", "all_proteins"], [3, 2, 1, "", "all_refs"], [3, 2, 1, "", "annotate_complex"], [3, 2, 1, "", "browse"], [3, 2, 1, "", "complex_inference"], [3, 2, 1, "", "coverage"], [3, 2, 1, "", "curation_effort"], [3, 2, 1, "", "get_names"], [3, 2, 1, "", "get_reference_set"], [3, 2, 1, "", "get_subset"], [3, 2, 1, "", "get_subset_bool_array"], [3, 2, 1, "", "get_values"], [3, 2, 1, "", "labels"], [3, 2, 1, "", "load"], [3, 2, 1, "", "load_data"], [3, 2, 1, "", "load_proteins"], [3, 2, 1, "", "make_df"], [3, 2, 1, "", "numof_entities"], [3, 2, 1, "", "numof_records"], [3, 2, 1, "", "numof_references"], [3, 2, 1, "", "process"], [3, 2, 1, "", "reload"], [3, 2, 1, "", "select"], [3, 2, 1, "", "set_method"], [3, 2, 1, "", "set_reference_set"], [3, 2, 1, "", "show"], [3, 2, 1, "", "subset_intersection"], [3, 2, 1, "", "to_array"], [3, 2, 1, "", "to_bool_array"], [3, 2, 1, "", "to_set"]], "pypath.core.annot.Almen2009": [[4, 2, 1, "", "__init__"], [4, 2, 1, "", "add_complexes_by_inference"], [4, 2, 1, "", "all_complexes"], [4, 2, 1, "", "all_entities"], [4, 2, 1, "", "all_mirnas"], [4, 2, 1, "", "all_proteins"], [4, 2, 1, "", "all_refs"], [4, 2, 1, "", "annotate_complex"], [4, 2, 1, "", "browse"], [4, 2, 1, "", "complex_inference"], [4, 2, 1, "", "coverage"], [4, 2, 1, "", "curation_effort"], [4, 2, 1, "", "get_names"], [4, 2, 1, "", "get_reference_set"], [4, 2, 1, "", "get_subset"], [4, 2, 1, "", "get_subset_bool_array"], [4, 2, 1, "", "get_values"], [4, 2, 1, "", "labels"], [4, 2, 1, "", "load"], [4, 2, 1, "", "load_data"], [4, 2, 1, "", "load_proteins"], [4, 2, 1, "", "make_df"], [4, 2, 1, "", "numof_entities"], [4, 2, 1, "", "numof_records"], [4, 2, 1, "", "numof_references"], [4, 2, 1, "", "process"], [4, 2, 1, "", "reload"], [4, 2, 1, "", "select"], [4, 2, 1, "", "set_method"], [4, 2, 1, "", "set_reference_set"], [4, 2, 1, "", "show"], [4, 2, 1, "", "subset_intersection"], [4, 2, 1, "", "to_array"], [4, 2, 1, "", "to_bool_array"], [4, 2, 1, "", "to_set"]], "pypath.core.annot.AnnotationBase": [[5, 2, 1, "", "__init__"], [5, 2, 1, "", "add_complexes_by_inference"], [5, 2, 1, "", "all_complexes"], [5, 2, 1, "", "all_entities"], [5, 2, 1, "", "all_mirnas"], [5, 2, 1, "", "all_proteins"], [5, 2, 1, "", "all_refs"], [5, 2, 1, "", "annotate_complex"], [5, 2, 1, "", "browse"], [5, 2, 1, "", "complex_inference"], [5, 2, 1, "", "coverage"], [5, 2, 1, "", "curation_effort"], [5, 2, 1, "", "get_names"], [5, 2, 1, "", "get_reference_set"], [5, 2, 1, "", "get_subset"], [5, 2, 1, "", "get_subset_bool_array"], [5, 2, 1, "", "get_values"], [5, 2, 1, "", "labels"], [5, 2, 1, "", "load"], [5, 2, 1, "", "load_data"], [5, 2, 1, "", "load_proteins"], [5, 2, 1, "", "make_df"], [5, 2, 1, "", "numof_entities"], [5, 2, 1, "", "numof_records"], [5, 2, 1, "", "numof_references"], [5, 2, 1, "", "process"], [5, 2, 1, "", "reload"], [5, 2, 1, "", "select"], [5, 2, 1, "", "set_method"], [5, 2, 1, "", "set_reference_set"], [5, 2, 1, "", "show"], [5, 2, 1, "", "subset_intersection"], [5, 2, 1, "", "to_array"], [5, 2, 1, "", "to_bool_array"], [5, 2, 1, "", "to_set"]], "pypath.core.annot.AnnotationTable": [[6, 2, 1, "", "__init__"], [6, 2, 1, "", "all_annotations"], [6, 2, 1, "", "all_annotations_str"], [6, 2, 1, "", "reload"], [6, 2, 1, "", "search"]], "pypath.core.annot.Baccin2019": [[7, 2, 1, "", "__init__"], [7, 2, 1, "", "add_complexes_by_inference"], [7, 2, 1, "", "all_complexes"], [7, 2, 1, "", "all_entities"], [7, 2, 1, "", "all_mirnas"], [7, 2, 1, "", "all_proteins"], [7, 2, 1, "", "all_refs"], [7, 2, 1, "", "annotate_complex"], [7, 2, 1, "", "browse"], [7, 2, 1, "", "complex_inference"], [7, 2, 1, "", "coverage"], [7, 2, 1, "", "curation_effort"], [7, 2, 1, "", "get_names"], [7, 2, 1, "", "get_reference_set"], [7, 2, 1, "", "get_subset"], [7, 2, 1, "", "get_subset_bool_array"], [7, 2, 1, "", "get_values"], [7, 2, 1, "", "labels"], [7, 2, 1, "", "load"], [7, 2, 1, "", "load_data"], [7, 2, 1, "", "load_proteins"], [7, 2, 1, "", "make_df"], [7, 2, 1, "", "numof_entities"], [7, 2, 1, "", "numof_records"], [7, 2, 1, "", "numof_references"], [7, 2, 1, "", "process"], [7, 2, 1, "", "reload"], [7, 2, 1, "", "select"], [7, 2, 1, "", "set_method"], [7, 2, 1, "", "set_reference_set"], [7, 2, 1, "", "show"], [7, 2, 1, "", "subset_intersection"], [7, 2, 1, "", "to_array"], [7, 2, 1, "", "to_bool_array"], [7, 2, 1, "", "to_set"]], "pypath.core.annot.Biogps": [[8, 2, 1, "", "__init__"], [8, 2, 1, "", "add_complexes_by_inference"], [8, 2, 1, "", "all_complexes"], [8, 2, 1, "", "all_entities"], [8, 2, 1, "", "all_mirnas"], [8, 2, 1, "", "all_proteins"], [8, 2, 1, "", "all_refs"], [8, 2, 1, "", "annotate_complex"], [8, 2, 1, "", "browse"], [8, 2, 1, "", "complex_inference"], [8, 2, 1, "", "coverage"], [8, 2, 1, "", "curation_effort"], [8, 2, 1, "", "get_names"], [8, 2, 1, "", "get_reference_set"], [8, 2, 1, "", "get_subset"], [8, 2, 1, "", "get_subset_bool_array"], [8, 2, 1, "", "get_values"], [8, 2, 1, "", "labels"], [8, 2, 1, "", "load"], [8, 2, 1, "", "load_data"], [8, 2, 1, "", "load_proteins"], [8, 2, 1, "", "make_df"], [8, 2, 1, "", "numof_entities"], [8, 2, 1, "", "numof_records"], [8, 2, 1, "", "numof_references"], [8, 2, 1, "", "process"], [8, 2, 1, "", "reload"], [8, 2, 1, "", "select"], [8, 2, 1, "", "set_method"], [8, 2, 1, "", "set_reference_set"], [8, 2, 1, "", "show"], [8, 2, 1, "", "subset_intersection"], [8, 2, 1, "", "to_array"], [8, 2, 1, "", "to_bool_array"], [8, 2, 1, "", "to_set"]], "pypath.core.annot.CancerGeneCensus": [[9, 2, 1, "", "__init__"], [9, 2, 1, "", "add_complexes_by_inference"], [9, 2, 1, "", "all_complexes"], [9, 2, 1, "", "all_entities"], [9, 2, 1, "", "all_mirnas"], [9, 2, 1, "", "all_proteins"], [9, 2, 1, "", "all_refs"], [9, 2, 1, "", "annotate_complex"], [9, 2, 1, "", "browse"], [9, 2, 1, "", "complex_inference"], [9, 2, 1, "", "coverage"], [9, 2, 1, "", "curation_effort"], [9, 2, 1, "", "get_names"], [9, 2, 1, "", "get_reference_set"], [9, 2, 1, "", "get_subset"], [9, 2, 1, "", "get_subset_bool_array"], [9, 2, 1, "", "get_values"], [9, 2, 1, "", "labels"], [9, 2, 1, "", "load"], [9, 2, 1, "", "load_data"], [9, 2, 1, "", "load_proteins"], [9, 2, 1, "", "make_df"], [9, 2, 1, "", "numof_entities"], [9, 2, 1, "", "numof_records"], [9, 2, 1, "", "numof_references"], [9, 2, 1, "", "process"], [9, 2, 1, "", "reload"], [9, 2, 1, "", "select"], [9, 2, 1, "", "set_method"], [9, 2, 1, "", "set_reference_set"], [9, 2, 1, "", "show"], [9, 2, 1, "", "subset_intersection"], [9, 2, 1, "", "to_array"], [9, 2, 1, "", "to_bool_array"], [9, 2, 1, "", "to_set"]], "pypath.core.annot.Cancerdrugsdb": [[10, 2, 1, "", "__init__"], [10, 2, 1, "", "add_complexes_by_inference"], [10, 2, 1, "", "all_complexes"], [10, 2, 1, "", "all_entities"], [10, 2, 1, "", "all_mirnas"], [10, 2, 1, "", "all_proteins"], [10, 2, 1, "", "all_refs"], [10, 2, 1, "", "annotate_complex"], [10, 2, 1, "", "browse"], [10, 2, 1, "", "complex_inference"], [10, 2, 1, "", "coverage"], [10, 2, 1, "", "curation_effort"], [10, 2, 1, "", "get_names"], [10, 2, 1, "", "get_reference_set"], [10, 2, 1, "", "get_subset"], [10, 2, 1, "", "get_subset_bool_array"], [10, 2, 1, "", "get_values"], [10, 2, 1, "", "labels"], [10, 2, 1, "", "load"], [10, 2, 1, "", "load_data"], [10, 2, 1, "", "load_proteins"], [10, 2, 1, "", "make_df"], [10, 2, 1, "", "numof_entities"], [10, 2, 1, "", "numof_records"], [10, 2, 1, "", "numof_references"], [10, 2, 1, "", "process"], [10, 2, 1, "", "reload"], [10, 2, 1, "", "select"], [10, 2, 1, "", "set_method"], [10, 2, 1, "", "set_reference_set"], [10, 2, 1, "", "show"], [10, 2, 1, "", "subset_intersection"], [10, 2, 1, "", "to_array"], [10, 2, 1, "", "to_bool_array"], [10, 2, 1, "", "to_set"]], "pypath.core.annot.Cancersea": [[11, 2, 1, "", "__init__"], [11, 2, 1, "", "add_complexes_by_inference"], [11, 2, 1, "", "all_complexes"], [11, 2, 1, "", "all_entities"], [11, 2, 1, "", "all_mirnas"], [11, 2, 1, "", "all_proteins"], [11, 2, 1, "", "all_refs"], [11, 2, 1, "", "annotate_complex"], [11, 2, 1, "", "browse"], [11, 2, 1, "", "complex_inference"], [11, 2, 1, "", "coverage"], [11, 2, 1, "", "curation_effort"], [11, 2, 1, "", "get_names"], [11, 2, 1, "", "get_reference_set"], [11, 2, 1, "", "get_subset"], [11, 2, 1, "", "get_subset_bool_array"], [11, 2, 1, "", "get_values"], [11, 2, 1, "", "labels"], [11, 2, 1, "", "load"], [11, 2, 1, "", "load_data"], [11, 2, 1, "", "load_proteins"], [11, 2, 1, "", "make_df"], [11, 2, 1, "", "numof_entities"], [11, 2, 1, "", "numof_records"], [11, 2, 1, "", "numof_references"], [11, 2, 1, "", "process"], [11, 2, 1, "", "reload"], [11, 2, 1, "", "select"], [11, 2, 1, "", "set_method"], [11, 2, 1, "", "set_reference_set"], [11, 2, 1, "", "show"], [11, 2, 1, "", "subset_intersection"], [11, 2, 1, "", "to_array"], [11, 2, 1, "", "to_bool_array"], [11, 2, 1, "", "to_set"]], "pypath.core.annot.CellPhoneDB": [[12, 2, 1, "", "__init__"], [12, 2, 1, "", "add_complexes_by_inference"], [12, 2, 1, "", "all_complexes"], [12, 2, 1, "", "all_entities"], [12, 2, 1, "", "all_mirnas"], [12, 2, 1, "", "all_proteins"], [12, 2, 1, "", "all_refs"], [12, 2, 1, "", "annotate_complex"], [12, 2, 1, "", "browse"], [12, 2, 1, "", "complex_inference"], [12, 2, 1, "", "coverage"], [12, 2, 1, "", "curation_effort"], [12, 2, 1, "", "get_names"], [12, 2, 1, "", "get_reference_set"], [12, 2, 1, "", "get_subset"], [12, 2, 1, "", "get_subset_bool_array"], [12, 2, 1, "", "get_values"], [12, 2, 1, "", "labels"], [12, 2, 1, "", "load"], [12, 2, 1, "", "load_data"], [12, 2, 1, "", "load_proteins"], [12, 2, 1, "", "make_df"], [12, 2, 1, "", "numof_entities"], [12, 2, 1, "", "numof_records"], [12, 2, 1, "", "numof_references"], [12, 2, 1, "", "process"], [12, 2, 1, "", "reload"], [12, 2, 1, "", "select"], [12, 2, 1, "", "set_method"], [12, 2, 1, "", "set_reference_set"], [12, 2, 1, "", "show"], [12, 2, 1, "", "subset_intersection"], [12, 2, 1, "", "to_array"], [12, 2, 1, "", "to_bool_array"], [12, 2, 1, "", "to_set"]], "pypath.core.annot.CellPhoneDBComplex": [[13, 2, 1, "", "__init__"], [13, 2, 1, "", "add_complexes_by_inference"], [13, 2, 1, "", "all_complexes"], [13, 2, 1, "", "all_entities"], [13, 2, 1, "", "all_mirnas"], [13, 2, 1, "", "all_proteins"], [13, 2, 1, "", "all_refs"], [13, 2, 1, "", "annotate_complex"], [13, 2, 1, "", "browse"], [13, 2, 1, "", "complex_inference"], [13, 2, 1, "", "coverage"], [13, 2, 1, "", "curation_effort"], [13, 2, 1, "", "get_names"], [13, 2, 1, "", "get_reference_set"], [13, 2, 1, "", "get_subset"], [13, 2, 1, "", "get_subset_bool_array"], [13, 2, 1, "", "get_values"], [13, 2, 1, "", "labels"], [13, 2, 1, "", "load"], [13, 2, 1, "", "load_data"], [13, 2, 1, "", "load_proteins"], [13, 2, 1, "", "make_df"], [13, 2, 1, "", "numof_entities"], [13, 2, 1, "", "numof_records"], [13, 2, 1, "", "numof_references"], [13, 2, 1, "", "process"], [13, 2, 1, "", "reload"], [13, 2, 1, "", "select"], [13, 2, 1, "", "set_method"], [13, 2, 1, "", "set_reference_set"], [13, 2, 1, "", "show"], [13, 2, 1, "", "subset_intersection"], [13, 2, 1, "", "to_array"], [13, 2, 1, "", "to_bool_array"], [13, 2, 1, "", "to_set"]], "pypath.core.annot.CellSurfaceProteinAtlas": [[14, 2, 1, "", "__init__"], [14, 2, 1, "", "add_complexes_by_inference"], [14, 2, 1, "", "all_complexes"], [14, 2, 1, "", "all_entities"], [14, 2, 1, "", "all_mirnas"], [14, 2, 1, "", "all_proteins"], [14, 2, 1, "", "all_refs"], [14, 2, 1, "", "annotate_complex"], [14, 2, 1, "", "browse"], [14, 2, 1, "", "complex_inference"], [14, 2, 1, "", "coverage"], [14, 2, 1, "", "curation_effort"], [14, 2, 1, "", "get_names"], [14, 2, 1, "", "get_reference_set"], [14, 2, 1, "", "get_subset"], [14, 2, 1, "", "get_subset_bool_array"], [14, 2, 1, "", "get_values"], [14, 2, 1, "", "labels"], [14, 2, 1, "", "load"], [14, 2, 1, "", "load_data"], [14, 2, 1, "", "load_proteins"], [14, 2, 1, "", "make_df"], [14, 2, 1, "", "numof_entities"], [14, 2, 1, "", "numof_records"], [14, 2, 1, "", "numof_references"], [14, 2, 1, "", "process"], [14, 2, 1, "", "reload"], [14, 2, 1, "", "select"], [14, 2, 1, "", "set_method"], [14, 2, 1, "", "set_reference_set"], [14, 2, 1, "", "show"], [14, 2, 1, "", "subset_intersection"], [14, 2, 1, "", "to_array"], [14, 2, 1, "", "to_bool_array"], [14, 2, 1, "", "to_set"]], "pypath.core.annot.CellSurfaceProteinAtlasCellType": [[15, 2, 1, "", "__init__"], [15, 2, 1, "", "add_complexes_by_inference"], [15, 2, 1, "", "all_complexes"], [15, 2, 1, "", "all_entities"], [15, 2, 1, "", "all_mirnas"], [15, 2, 1, "", "all_proteins"], [15, 2, 1, "", "all_refs"], [15, 2, 1, "", "annotate_complex"], [15, 2, 1, "", "browse"], [15, 2, 1, "", "complex_inference"], [15, 2, 1, "", "coverage"], [15, 2, 1, "", "curation_effort"], [15, 2, 1, "", "get_names"], [15, 2, 1, "", "get_reference_set"], [15, 2, 1, "", "get_subset"], [15, 2, 1, "", "get_subset_bool_array"], [15, 2, 1, "", "get_values"], [15, 2, 1, "", "labels"], [15, 2, 1, "", "load"], [15, 2, 1, "", "load_data"], [15, 2, 1, "", "load_proteins"], [15, 2, 1, "", "make_df"], [15, 2, 1, "", "numof_entities"], [15, 2, 1, "", "numof_records"], [15, 2, 1, "", "numof_references"], [15, 2, 1, "", "process"], [15, 2, 1, "", "reload"], [15, 2, 1, "", "select"], [15, 2, 1, "", "set_method"], [15, 2, 1, "", "set_reference_set"], [15, 2, 1, "", "show"], [15, 2, 1, "", "subset_intersection"], [15, 2, 1, "", "to_array"], [15, 2, 1, "", "to_bool_array"], [15, 2, 1, "", "to_set"]], "pypath.core.annot.Cellcall": [[16, 2, 1, "", "__init__"], [16, 2, 1, "", "add_complexes_by_inference"], [16, 2, 1, "", "all_complexes"], [16, 2, 1, "", "all_entities"], [16, 2, 1, "", "all_mirnas"], [16, 2, 1, "", "all_proteins"], [16, 2, 1, "", "all_refs"], [16, 2, 1, "", "annotate_complex"], [16, 2, 1, "", "browse"], [16, 2, 1, "", "complex_inference"], [16, 2, 1, "", "coverage"], [16, 2, 1, "", "curation_effort"], [16, 2, 1, "", "get_names"], [16, 2, 1, "", "get_reference_set"], [16, 2, 1, "", "get_subset"], [16, 2, 1, "", "get_subset_bool_array"], [16, 2, 1, "", "get_values"], [16, 2, 1, "", "labels"], [16, 2, 1, "", "load"], [16, 2, 1, "", "load_data"], [16, 2, 1, "", "load_proteins"], [16, 2, 1, "", "make_df"], [16, 2, 1, "", "numof_entities"], [16, 2, 1, "", "numof_records"], [16, 2, 1, "", "numof_references"], [16, 2, 1, "", "process"], [16, 2, 1, "", "reload"], [16, 2, 1, "", "select"], [16, 2, 1, "", "set_method"], [16, 2, 1, "", "set_reference_set"], [16, 2, 1, "", "show"], [16, 2, 1, "", "subset_intersection"], [16, 2, 1, "", "to_array"], [16, 2, 1, "", "to_bool_array"], [16, 2, 1, "", "to_set"]], "pypath.core.annot.Cellcellinteractions": [[17, 2, 1, "", "__init__"], [17, 2, 1, "", "add_complexes_by_inference"], [17, 2, 1, "", "all_complexes"], [17, 2, 1, "", "all_entities"], [17, 2, 1, "", "all_mirnas"], [17, 2, 1, "", "all_proteins"], [17, 2, 1, "", "all_refs"], [17, 2, 1, "", "annotate_complex"], [17, 2, 1, "", "browse"], [17, 2, 1, "", "complex_inference"], [17, 2, 1, "", "coverage"], [17, 2, 1, "", "curation_effort"], [17, 2, 1, "", "get_names"], [17, 2, 1, "", "get_reference_set"], [17, 2, 1, "", "get_subset"], [17, 2, 1, "", "get_subset_bool_array"], [17, 2, 1, "", "get_values"], [17, 2, 1, "", "labels"], [17, 2, 1, "", "load"], [17, 2, 1, "", "load_data"], [17, 2, 1, "", "load_proteins"], [17, 2, 1, "", "make_df"], [17, 2, 1, "", "numof_entities"], [17, 2, 1, "", "numof_records"], [17, 2, 1, "", "numof_references"], [17, 2, 1, "", "process"], [17, 2, 1, "", "reload"], [17, 2, 1, "", "select"], [17, 2, 1, "", "set_method"], [17, 2, 1, "", "set_reference_set"], [17, 2, 1, "", "show"], [17, 2, 1, "", "subset_intersection"], [17, 2, 1, "", "to_array"], [17, 2, 1, "", "to_bool_array"], [17, 2, 1, "", "to_set"]], "pypath.core.annot.Cellchatdb": [[18, 2, 1, "", "__init__"], [18, 2, 1, "", "add_complexes_by_inference"], [18, 2, 1, "", "all_complexes"], [18, 2, 1, "", "all_entities"], [18, 2, 1, "", "all_mirnas"], [18, 2, 1, "", "all_proteins"], [18, 2, 1, "", "all_refs"], [18, 2, 1, "", "annotate_complex"], [18, 2, 1, "", "browse"], [18, 2, 1, "", "complex_inference"], [18, 2, 1, "", "coverage"], [18, 2, 1, "", "curation_effort"], [18, 2, 1, "", "get_names"], [18, 2, 1, "", "get_reference_set"], [18, 2, 1, "", "get_subset"], [18, 2, 1, "", "get_subset_bool_array"], [18, 2, 1, "", "get_values"], [18, 2, 1, "", "labels"], [18, 2, 1, "", "load"], [18, 2, 1, "", "load_data"], [18, 2, 1, "", "load_proteins"], [18, 2, 1, "", "make_df"], [18, 2, 1, "", "numof_entities"], [18, 2, 1, "", "numof_records"], [18, 2, 1, "", "numof_references"], [18, 2, 1, "", "process"], [18, 2, 1, "", "reload"], [18, 2, 1, "", "select"], [18, 2, 1, "", "set_method"], [18, 2, 1, "", "set_reference_set"], [18, 2, 1, "", "show"], [18, 2, 1, "", "subset_intersection"], [18, 2, 1, "", "to_array"], [18, 2, 1, "", "to_bool_array"], [18, 2, 1, "", "to_set"]], "pypath.core.annot.CellchatdbComplex": [[19, 2, 1, "", "__init__"], [19, 2, 1, "", "add_complexes_by_inference"], [19, 2, 1, "", "all_complexes"], [19, 2, 1, "", "all_entities"], [19, 2, 1, "", "all_mirnas"], [19, 2, 1, "", "all_proteins"], [19, 2, 1, "", "all_refs"], [19, 2, 1, "", "annotate_complex"], [19, 2, 1, "", "browse"], [19, 2, 1, "", "complex_inference"], [19, 2, 1, "", "coverage"], [19, 2, 1, "", "curation_effort"], [19, 2, 1, "", "get_names"], [19, 2, 1, "", "get_reference_set"], [19, 2, 1, "", "get_subset"], [19, 2, 1, "", "get_subset_bool_array"], [19, 2, 1, "", "get_values"], [19, 2, 1, "", "labels"], [19, 2, 1, "", "load"], [19, 2, 1, "", "load_data"], [19, 2, 1, "", "load_proteins"], [19, 2, 1, "", "make_df"], [19, 2, 1, "", "numof_entities"], [19, 2, 1, "", "numof_records"], [19, 2, 1, "", "numof_references"], [19, 2, 1, "", "process"], [19, 2, 1, "", "reload"], [19, 2, 1, "", "select"], [19, 2, 1, "", "set_method"], [19, 2, 1, "", "set_reference_set"], [19, 2, 1, "", "show"], [19, 2, 1, "", "subset_intersection"], [19, 2, 1, "", "to_array"], [19, 2, 1, "", "to_bool_array"], [19, 2, 1, "", "to_set"]], "pypath.core.annot.Cellinker": [[20, 2, 1, "", "__init__"], [20, 2, 1, "", "add_complexes_by_inference"], [20, 2, 1, "", "all_complexes"], [20, 2, 1, "", "all_entities"], [20, 2, 1, "", "all_mirnas"], [20, 2, 1, "", "all_proteins"], [20, 2, 1, "", "all_refs"], [20, 2, 1, "", "annotate_complex"], [20, 2, 1, "", "browse"], [20, 2, 1, "", "complex_inference"], [20, 2, 1, "", "coverage"], [20, 2, 1, "", "curation_effort"], [20, 2, 1, "", "get_names"], [20, 2, 1, "", "get_reference_set"], [20, 2, 1, "", "get_subset"], [20, 2, 1, "", "get_subset_bool_array"], [20, 2, 1, "", "get_values"], [20, 2, 1, "", "labels"], [20, 2, 1, "", "load"], [20, 2, 1, "", "load_data"], [20, 2, 1, "", "load_proteins"], [20, 2, 1, "", "make_df"], [20, 2, 1, "", "numof_entities"], [20, 2, 1, "", "numof_records"], [20, 2, 1, "", "numof_references"], [20, 2, 1, "", "process"], [20, 2, 1, "", "reload"], [20, 2, 1, "", "select"], [20, 2, 1, "", "set_method"], [20, 2, 1, "", "set_reference_set"], [20, 2, 1, "", "show"], [20, 2, 1, "", "subset_intersection"], [20, 2, 1, "", "to_array"], [20, 2, 1, "", "to_bool_array"], [20, 2, 1, "", "to_set"]], "pypath.core.annot.CellinkerComplex": [[21, 2, 1, "", "__init__"], [21, 2, 1, "", "add_complexes_by_inference"], [21, 2, 1, "", "all_complexes"], [21, 2, 1, "", "all_entities"], [21, 2, 1, "", "all_mirnas"], [21, 2, 1, "", "all_proteins"], [21, 2, 1, "", "all_refs"], [21, 2, 1, "", "annotate_complex"], [21, 2, 1, "", "browse"], [21, 2, 1, "", "complex_inference"], [21, 2, 1, "", "coverage"], [21, 2, 1, "", "curation_effort"], [21, 2, 1, "", "get_names"], [21, 2, 1, "", "get_reference_set"], [21, 2, 1, "", "get_subset"], [21, 2, 1, "", "get_subset_bool_array"], [21, 2, 1, "", "get_values"], [21, 2, 1, "", "labels"], [21, 2, 1, "", "load"], [21, 2, 1, "", "load_data"], [21, 2, 1, "", "load_proteins"], [21, 2, 1, "", "make_df"], [21, 2, 1, "", "numof_entities"], [21, 2, 1, "", "numof_records"], [21, 2, 1, "", "numof_references"], [21, 2, 1, "", "process"], [21, 2, 1, "", "reload"], [21, 2, 1, "", "select"], [21, 2, 1, "", "set_method"], [21, 2, 1, "", "set_reference_set"], [21, 2, 1, "", "show"], [21, 2, 1, "", "subset_intersection"], [21, 2, 1, "", "to_array"], [21, 2, 1, "", "to_bool_array"], [21, 2, 1, "", "to_set"]], "pypath.core.annot.Celltalkdb": [[22, 2, 1, "", "__init__"], [22, 2, 1, "", "add_complexes_by_inference"], [22, 2, 1, "", "all_complexes"], [22, 2, 1, "", "all_entities"], [22, 2, 1, "", "all_mirnas"], [22, 2, 1, "", "all_proteins"], [22, 2, 1, "", "all_refs"], [22, 2, 1, "", "annotate_complex"], [22, 2, 1, "", "browse"], [22, 2, 1, "", "complex_inference"], [22, 2, 1, "", "coverage"], [22, 2, 1, "", "curation_effort"], [22, 2, 1, "", "get_names"], [22, 2, 1, "", "get_reference_set"], [22, 2, 1, "", "get_subset"], [22, 2, 1, "", "get_subset_bool_array"], [22, 2, 1, "", "get_values"], [22, 2, 1, "", "labels"], [22, 2, 1, "", "load"], [22, 2, 1, "", "load_data"], [22, 2, 1, "", "load_proteins"], [22, 2, 1, "", "make_df"], [22, 2, 1, "", "numof_entities"], [22, 2, 1, "", "numof_records"], [22, 2, 1, "", "numof_references"], [22, 2, 1, "", "process"], [22, 2, 1, "", "reload"], [22, 2, 1, "", "select"], [22, 2, 1, "", "set_method"], [22, 2, 1, "", "set_reference_set"], [22, 2, 1, "", "show"], [22, 2, 1, "", "subset_intersection"], [22, 2, 1, "", "to_array"], [22, 2, 1, "", "to_bool_array"], [22, 2, 1, "", "to_set"]], "pypath.core.annot.Celltypist": [[23, 2, 1, "", "__init__"], [23, 2, 1, "", "add_complexes_by_inference"], [23, 2, 1, "", "all_complexes"], [23, 2, 1, "", "all_entities"], [23, 2, 1, "", "all_mirnas"], [23, 2, 1, "", "all_proteins"], [23, 2, 1, "", "all_refs"], [23, 2, 1, "", "annotate_complex"], [23, 2, 1, "", "browse"], [23, 2, 1, "", "complex_inference"], [23, 2, 1, "", "coverage"], [23, 2, 1, "", "curation_effort"], [23, 2, 1, "", "get_names"], [23, 2, 1, "", "get_reference_set"], [23, 2, 1, "", "get_subset"], [23, 2, 1, "", "get_subset_bool_array"], [23, 2, 1, "", "get_values"], [23, 2, 1, "", "labels"], [23, 2, 1, "", "load"], [23, 2, 1, "", "load_data"], [23, 2, 1, "", "load_proteins"], [23, 2, 1, "", "make_df"], [23, 2, 1, "", "numof_entities"], [23, 2, 1, "", "numof_records"], [23, 2, 1, "", "numof_references"], [23, 2, 1, "", "process"], [23, 2, 1, "", "reload"], [23, 2, 1, "", "select"], [23, 2, 1, "", "set_method"], [23, 2, 1, "", "set_reference_set"], [23, 2, 1, "", "show"], [23, 2, 1, "", "subset_intersection"], [23, 2, 1, "", "to_array"], [23, 2, 1, "", "to_bool_array"], [23, 2, 1, "", "to_set"]], "pypath.core.annot.Comppi": [[24, 2, 1, "", "__init__"], [24, 2, 1, "", "add_complexes_by_inference"], [24, 2, 1, "", "all_complexes"], [24, 2, 1, "", "all_entities"], [24, 2, 1, "", "all_mirnas"], [24, 2, 1, "", "all_proteins"], [24, 2, 1, "", "all_refs"], [24, 2, 1, "", "annotate_complex"], [24, 2, 1, "", "browse"], [24, 2, 1, "", "complex_inference"], [24, 2, 1, "", "coverage"], [24, 2, 1, "", "curation_effort"], [24, 2, 1, "", "get_names"], [24, 2, 1, "", "get_reference_set"], [24, 2, 1, "", "get_subset"], [24, 2, 1, "", "get_subset_bool_array"], [24, 2, 1, "", "get_values"], [24, 2, 1, "", "labels"], [24, 2, 1, "", "load"], [24, 2, 1, "", "load_data"], [24, 2, 1, "", "load_proteins"], [24, 2, 1, "", "make_df"], [24, 2, 1, "", "numof_entities"], [24, 2, 1, "", "numof_records"], [24, 2, 1, "", "numof_references"], [24, 2, 1, "", "process"], [24, 2, 1, "", "reload"], [24, 2, 1, "", "select"], [24, 2, 1, "", "set_method"], [24, 2, 1, "", "set_reference_set"], [24, 2, 1, "", "show"], [24, 2, 1, "", "subset_intersection"], [24, 2, 1, "", "to_array"], [24, 2, 1, "", "to_bool_array"], [24, 2, 1, "", "to_set"]], "pypath.core.annot.Connectomedb": [[25, 2, 1, "", "__init__"], [25, 2, 1, "", "add_complexes_by_inference"], [25, 2, 1, "", "all_complexes"], [25, 2, 1, "", "all_entities"], [25, 2, 1, "", "all_mirnas"], [25, 2, 1, "", "all_proteins"], [25, 2, 1, "", "all_refs"], [25, 2, 1, "", "annotate_complex"], [25, 2, 1, "", "browse"], [25, 2, 1, "", "complex_inference"], [25, 2, 1, "", "coverage"], [25, 2, 1, "", "curation_effort"], [25, 2, 1, "", "get_names"], [25, 2, 1, "", "get_reference_set"], [25, 2, 1, "", "get_subset"], [25, 2, 1, "", "get_subset_bool_array"], [25, 2, 1, "", "get_values"], [25, 2, 1, "", "labels"], [25, 2, 1, "", "load"], [25, 2, 1, "", "load_data"], [25, 2, 1, "", "load_proteins"], [25, 2, 1, "", "make_df"], [25, 2, 1, "", "numof_entities"], [25, 2, 1, "", "numof_records"], [25, 2, 1, "", "numof_references"], [25, 2, 1, "", "process"], [25, 2, 1, "", "reload"], [25, 2, 1, "", "select"], [25, 2, 1, "", "set_method"], [25, 2, 1, "", "set_reference_set"], [25, 2, 1, "", "show"], [25, 2, 1, "", "subset_intersection"], [25, 2, 1, "", "to_array"], [25, 2, 1, "", "to_bool_array"], [25, 2, 1, "", "to_set"]], "pypath.core.annot.Corum": [[26, 2, 1, "", "__init__"], [26, 2, 1, "", "add_complexes_by_inference"], [26, 2, 1, "", "all_complexes"], [26, 2, 1, "", "all_entities"], [26, 2, 1, "", "all_mirnas"], [26, 2, 1, "", "all_proteins"], [26, 2, 1, "", "all_refs"], [26, 2, 1, "", "annotate_complex"], [26, 2, 1, "", "browse"], [26, 2, 1, "", "complex_inference"], [26, 2, 1, "", "coverage"], [26, 2, 1, "", "curation_effort"], [26, 2, 1, "", "get_names"], [26, 2, 1, "", "get_reference_set"], [26, 2, 1, "", "get_subset"], [26, 2, 1, "", "get_subset_bool_array"], [26, 2, 1, "", "get_values"], [26, 2, 1, "", "labels"], [26, 2, 1, "", "load"], [26, 2, 1, "", "load_data"], [26, 2, 1, "", "load_proteins"], [26, 2, 1, "", "make_df"], [26, 2, 1, "", "numof_entities"], [26, 2, 1, "", "numof_records"], [26, 2, 1, "", "numof_references"], [26, 2, 1, "", "process"], [26, 2, 1, "", "reload"], [26, 2, 1, "", "select"], [26, 2, 1, "", "set_method"], [26, 2, 1, "", "set_reference_set"], [26, 2, 1, "", "show"], [26, 2, 1, "", "subset_intersection"], [26, 2, 1, "", "to_array"], [26, 2, 1, "", "to_bool_array"], [26, 2, 1, "", "to_set"]], "pypath.core.annot.CorumFuncat": [[27, 2, 1, "", "__init__"], [27, 2, 1, "", "add_complexes_by_inference"], [27, 2, 1, "", "all_complexes"], [27, 2, 1, "", "all_entities"], [27, 2, 1, "", "all_mirnas"], [27, 2, 1, "", "all_proteins"], [27, 2, 1, "", "all_refs"], [27, 2, 1, "", "annotate_complex"], [27, 2, 1, "", "browse"], [27, 2, 1, "", "complex_inference"], [27, 2, 1, "", "coverage"], [27, 2, 1, "", "curation_effort"], [27, 2, 1, "", "get_names"], [27, 2, 1, "", "get_reference_set"], [27, 2, 1, "", "get_subset"], [27, 2, 1, "", "get_subset_bool_array"], [27, 2, 1, "", "get_values"], [27, 2, 1, "", "labels"], [27, 2, 1, "", "load"], [27, 2, 1, "", "load_data"], [27, 2, 1, "", "load_proteins"], [27, 2, 1, "", "make_df"], [27, 2, 1, "", "numof_entities"], [27, 2, 1, "", "numof_records"], [27, 2, 1, "", "numof_references"], [27, 2, 1, "", "process"], [27, 2, 1, "", "reload"], [27, 2, 1, "", "select"], [27, 2, 1, "", "set_method"], [27, 2, 1, "", "set_reference_set"], [27, 2, 1, "", "show"], [27, 2, 1, "", "subset_intersection"], [27, 2, 1, "", "to_array"], [27, 2, 1, "", "to_bool_array"], [27, 2, 1, "", "to_set"]], "pypath.core.annot.CorumGO": [[28, 2, 1, "", "__init__"], [28, 2, 1, "", "add_complexes_by_inference"], [28, 2, 1, "", "all_complexes"], [28, 2, 1, "", "all_entities"], [28, 2, 1, "", "all_mirnas"], [28, 2, 1, "", "all_proteins"], [28, 2, 1, "", "all_refs"], [28, 2, 1, "", "annotate_complex"], [28, 2, 1, "", "browse"], [28, 2, 1, "", "complex_inference"], [28, 2, 1, "", "coverage"], [28, 2, 1, "", "curation_effort"], [28, 2, 1, "", "get_names"], [28, 2, 1, "", "get_reference_set"], [28, 2, 1, "", "get_subset"], [28, 2, 1, "", "get_subset_bool_array"], [28, 2, 1, "", "get_values"], [28, 2, 1, "", "labels"], [28, 2, 1, "", "load"], [28, 2, 1, "", "load_data"], [28, 2, 1, "", "load_proteins"], [28, 2, 1, "", "make_df"], [28, 2, 1, "", "numof_entities"], [28, 2, 1, "", "numof_records"], [28, 2, 1, "", "numof_references"], [28, 2, 1, "", "process"], [28, 2, 1, "", "reload"], [28, 2, 1, "", "select"], [28, 2, 1, "", "set_method"], [28, 2, 1, "", "set_reference_set"], [28, 2, 1, "", "show"], [28, 2, 1, "", "subset_intersection"], [28, 2, 1, "", "to_array"], [28, 2, 1, "", "to_bool_array"], [28, 2, 1, "", "to_set"]], "pypath.core.annot.Cpad": [[29, 2, 1, "", "__init__"], [29, 2, 1, "", "add_complexes_by_inference"], [29, 2, 1, "", "all_complexes"], [29, 2, 1, "", "all_entities"], [29, 2, 1, "", "all_mirnas"], [29, 2, 1, "", "all_proteins"], [29, 2, 1, "", "all_refs"], [29, 2, 1, "", "annotate_complex"], [29, 2, 1, "", "browse"], [29, 2, 1, "", "complex_inference"], [29, 2, 1, "", "coverage"], [29, 2, 1, "", "curation_effort"], [29, 2, 1, "", "get_names"], [29, 2, 1, "", "get_reference_set"], [29, 2, 1, "", "get_subset"], [29, 2, 1, "", "get_subset_bool_array"], [29, 2, 1, "", "get_values"], [29, 2, 1, "", "labels"], [29, 2, 1, "", "load"], [29, 2, 1, "", "load_data"], [29, 2, 1, "", "load_proteins"], [29, 2, 1, "", "make_df"], [29, 2, 1, "", "numof_entities"], [29, 2, 1, "", "numof_records"], [29, 2, 1, "", "numof_references"], [29, 2, 1, "", "process"], [29, 2, 1, "", "reload"], [29, 2, 1, "", "select"], [29, 2, 1, "", "set_method"], [29, 2, 1, "", "set_reference_set"], [29, 2, 1, "", "show"], [29, 2, 1, "", "subset_intersection"], [29, 2, 1, "", "to_array"], [29, 2, 1, "", "to_bool_array"], [29, 2, 1, "", "to_set"]], "pypath.core.annot.CustomAnnotation": [[30, 2, 1, "", "__init__"], [30, 2, 1, "", "browse"], [30, 2, 1, "", "class_to_class_connections"], [30, 2, 1, "", "classes_by_entity"], [30, 2, 1, "", "counts"], [30, 2, 1, "", "counts_by_class"], [30, 2, 1, "", "create_class"], [30, 2, 1, "", "degree_inter_class_network"], [30, 2, 1, "", "filter"], [30, 2, 1, "", "filter_classes"], [30, 2, 1, "", "filter_interclass_network"], [30, 2, 1, "", "get_class"], [30, 2, 1, "", "get_df"], [30, 2, 1, "", "get_interclass_network_df"], [30, 2, 1, "", "get_parents"], [30, 2, 1, "", "get_resource"], [30, 2, 1, "", "get_resources"], [30, 2, 1, "", "labels"], [30, 2, 1, "", "make_df"], [30, 2, 1, "", "network_df"], [30, 2, 1, "", "populate_classes"], [30, 2, 1, "", "populate_scores"], [30, 2, 1, "", "process_annot"], [30, 2, 1, "", "quality_check_table"], [30, 2, 1, "", "register_network"], [30, 2, 1, "", "reload"], [30, 2, 1, "", "resources_in_category"], [30, 2, 1, "", "select"], [30, 2, 1, "", "set_interclass_network_df"], [30, 2, 1, "", "show"], [30, 2, 1, "", "update_parents"]], "pypath.core.annot.Cytosig": [[31, 2, 1, "", "__init__"], [31, 2, 1, "", "add_complexes_by_inference"], [31, 2, 1, "", "all_complexes"], [31, 2, 1, "", "all_entities"], [31, 2, 1, "", "all_mirnas"], [31, 2, 1, "", "all_proteins"], [31, 2, 1, "", "all_refs"], [31, 2, 1, "", "annotate_complex"], [31, 2, 1, "", "browse"], [31, 2, 1, "", "complex_inference"], [31, 2, 1, "", "coverage"], [31, 2, 1, "", "curation_effort"], [31, 2, 1, "", "get_names"], [31, 2, 1, "", "get_reference_set"], [31, 2, 1, "", "get_subset"], [31, 2, 1, "", "get_subset_bool_array"], [31, 2, 1, "", "get_values"], [31, 2, 1, "", "labels"], [31, 2, 1, "", "load"], [31, 2, 1, "", "load_data"], [31, 2, 1, "", "load_proteins"], [31, 2, 1, "", "make_df"], [31, 2, 1, "", "numof_entities"], [31, 2, 1, "", "numof_records"], [31, 2, 1, "", "numof_references"], [31, 2, 1, "", "process"], [31, 2, 1, "", "reload"], [31, 2, 1, "", "select"], [31, 2, 1, "", "set_method"], [31, 2, 1, "", "set_reference_set"], [31, 2, 1, "", "show"], [31, 2, 1, "", "subset_intersection"], [31, 2, 1, "", "to_array"], [31, 2, 1, "", "to_bool_array"], [31, 2, 1, "", "to_set"]], "pypath.core.annot.Dgidb": [[32, 2, 1, "", "__init__"], [32, 2, 1, "", "add_complexes_by_inference"], [32, 2, 1, "", "all_complexes"], [32, 2, 1, "", "all_entities"], [32, 2, 1, "", "all_mirnas"], [32, 2, 1, "", "all_proteins"], [32, 2, 1, "", "all_refs"], [32, 2, 1, "", "annotate_complex"], [32, 2, 1, "", "browse"], [32, 2, 1, "", "complex_inference"], [32, 2, 1, "", "coverage"], [32, 2, 1, "", "curation_effort"], [32, 2, 1, "", "get_names"], [32, 2, 1, "", "get_reference_set"], [32, 2, 1, "", "get_subset"], [32, 2, 1, "", "get_subset_bool_array"], [32, 2, 1, "", "get_values"], [32, 2, 1, "", "labels"], [32, 2, 1, "", "load"], [32, 2, 1, "", "load_data"], [32, 2, 1, "", "load_proteins"], [32, 2, 1, "", "make_df"], [32, 2, 1, "", "numof_entities"], [32, 2, 1, "", "numof_records"], [32, 2, 1, "", "numof_references"], [32, 2, 1, "", "process"], [32, 2, 1, "", "reload"], [32, 2, 1, "", "select"], [32, 2, 1, "", "set_method"], [32, 2, 1, "", "set_reference_set"], [32, 2, 1, "", "show"], [32, 2, 1, "", "subset_intersection"], [32, 2, 1, "", "to_array"], [32, 2, 1, "", "to_bool_array"], [32, 2, 1, "", "to_set"]], "pypath.core.annot.Disgenet": [[33, 2, 1, "", "__init__"], [33, 2, 1, "", "add_complexes_by_inference"], [33, 2, 1, "", "all_complexes"], [33, 2, 1, "", "all_entities"], [33, 2, 1, "", "all_mirnas"], [33, 2, 1, "", "all_proteins"], [33, 2, 1, "", "all_refs"], [33, 2, 1, "", "annotate_complex"], [33, 2, 1, "", "browse"], [33, 2, 1, "", "complex_inference"], [33, 2, 1, "", "coverage"], [33, 2, 1, "", "curation_effort"], [33, 2, 1, "", "get_names"], [33, 2, 1, "", "get_reference_set"], [33, 2, 1, "", "get_subset"], [33, 2, 1, "", "get_subset_bool_array"], [33, 2, 1, "", "get_values"], [33, 2, 1, "", "labels"], [33, 2, 1, "", "load"], [33, 2, 1, "", "load_data"], [33, 2, 1, "", "load_proteins"], [33, 2, 1, "", "make_df"], [33, 2, 1, "", "numof_entities"], [33, 2, 1, "", "numof_records"], [33, 2, 1, "", "numof_references"], [33, 2, 1, "", "process"], [33, 2, 1, "", "reload"], [33, 2, 1, "", "select"], [33, 2, 1, "", "set_method"], [33, 2, 1, "", "set_reference_set"], [33, 2, 1, "", "show"], [33, 2, 1, "", "subset_intersection"], [33, 2, 1, "", "to_array"], [33, 2, 1, "", "to_bool_array"], [33, 2, 1, "", "to_set"]], "pypath.core.annot.Embrace": [[34, 2, 1, "", "__init__"], [34, 2, 1, "", "add_complexes_by_inference"], [34, 2, 1, "", "all_complexes"], [34, 2, 1, "", "all_entities"], [34, 2, 1, "", "all_mirnas"], [34, 2, 1, "", "all_proteins"], [34, 2, 1, "", "all_refs"], [34, 2, 1, "", "annotate_complex"], [34, 2, 1, "", "browse"], [34, 2, 1, "", "complex_inference"], [34, 2, 1, "", "coverage"], [34, 2, 1, "", "curation_effort"], [34, 2, 1, "", "get_names"], [34, 2, 1, "", "get_reference_set"], [34, 2, 1, "", "get_subset"], [34, 2, 1, "", "get_subset_bool_array"], [34, 2, 1, "", "get_values"], [34, 2, 1, "", "labels"], [34, 2, 1, "", "load"], [34, 2, 1, "", "load_data"], [34, 2, 1, "", "load_proteins"], [34, 2, 1, "", "make_df"], [34, 2, 1, "", "numof_entities"], [34, 2, 1, "", "numof_records"], [34, 2, 1, "", "numof_references"], [34, 2, 1, "", "process"], [34, 2, 1, "", "reload"], [34, 2, 1, "", "select"], [34, 2, 1, "", "set_method"], [34, 2, 1, "", "set_reference_set"], [34, 2, 1, "", "show"], [34, 2, 1, "", "subset_intersection"], [34, 2, 1, "", "to_array"], [34, 2, 1, "", "to_bool_array"], [34, 2, 1, "", "to_set"]], "pypath.core.annot.Exocarta": [[35, 2, 1, "", "__init__"], [35, 2, 1, "", "add_complexes_by_inference"], [35, 2, 1, "", "all_complexes"], [35, 2, 1, "", "all_entities"], [35, 2, 1, "", "all_mirnas"], [35, 2, 1, "", "all_proteins"], [35, 2, 1, "", "all_refs"], [35, 2, 1, "", "annotate_complex"], [35, 2, 1, "", "browse"], [35, 2, 1, "", "complex_inference"], [35, 2, 1, "", "coverage"], [35, 2, 1, "", "curation_effort"], [35, 2, 1, "", "get_names"], [35, 2, 1, "", "get_reference_set"], [35, 2, 1, "", "get_subset"], [35, 2, 1, "", "get_subset_bool_array"], [35, 2, 1, "", "get_values"], [35, 2, 1, "", "labels"], [35, 2, 1, "", "load"], [35, 2, 1, "", "load_data"], [35, 2, 1, "", "load_proteins"], [35, 2, 1, "", "make_df"], [35, 2, 1, "", "numof_entities"], [35, 2, 1, "", "numof_records"], [35, 2, 1, "", "numof_references"], [35, 2, 1, "", "process"], [35, 2, 1, "", "reload"], [35, 2, 1, "", "select"], [35, 2, 1, "", "set_method"], [35, 2, 1, "", "set_reference_set"], [35, 2, 1, "", "show"], [35, 2, 1, "", "subset_intersection"], [35, 2, 1, "", "to_array"], [35, 2, 1, "", "to_bool_array"], [35, 2, 1, "", "to_set"]], "pypath.core.annot.GOCustomIntercell": [[36, 2, 1, "", "__init__"], [36, 2, 1, "", "get_annotation"], [36, 2, 1, "", "get_annotations"], [36, 2, 1, "", "process_categories"], [36, 2, 1, "", "reload"]], "pypath.core.annot.GOIntercell": [[37, 2, 1, "", "__init__"], [37, 2, 1, "", "add_complexes_by_inference"], [37, 2, 1, "", "all_complexes"], [37, 2, 1, "", "all_entities"], [37, 2, 1, "", "all_mirnas"], [37, 2, 1, "", "all_proteins"], [37, 2, 1, "", "all_refs"], [37, 2, 1, "", "annotate_complex"], [37, 2, 1, "", "browse"], [37, 2, 1, "", "complex_inference"], [37, 2, 1, "", "coverage"], [37, 2, 1, "", "curation_effort"], [37, 2, 1, "", "get_names"], [37, 2, 1, "", "get_reference_set"], [37, 2, 1, "", "get_subset"], [37, 2, 1, "", "get_subset_bool_array"], [37, 2, 1, "", "get_values"], [37, 2, 1, "", "labels"], [37, 2, 1, "", "load"], [37, 2, 1, "", "load_data"], [37, 2, 1, "", "load_proteins"], [37, 2, 1, "", "make_df"], [37, 2, 1, "", "numof_entities"], [37, 2, 1, "", "numof_records"], [37, 2, 1, "", "numof_references"], [37, 2, 1, "", "process"], [37, 2, 1, "", "reload"], [37, 2, 1, "", "select"], [37, 2, 1, "", "set_method"], [37, 2, 1, "", "set_reference_set"], [37, 2, 1, "", "show"], [37, 2, 1, "", "subset_intersection"], [37, 2, 1, "", "to_array"], [37, 2, 1, "", "to_bool_array"], [37, 2, 1, "", "to_set"]], "pypath.core.annot.Gpcrdb": [[38, 2, 1, "", "__init__"], [38, 2, 1, "", "add_complexes_by_inference"], [38, 2, 1, "", "all_complexes"], [38, 2, 1, "", "all_entities"], [38, 2, 1, "", "all_mirnas"], [38, 2, 1, "", "all_proteins"], [38, 2, 1, "", "all_refs"], [38, 2, 1, "", "annotate_complex"], [38, 2, 1, "", "browse"], [38, 2, 1, "", "complex_inference"], [38, 2, 1, "", "coverage"], [38, 2, 1, "", "curation_effort"], [38, 2, 1, "", "get_names"], [38, 2, 1, "", "get_reference_set"], [38, 2, 1, "", "get_subset"], [38, 2, 1, "", "get_subset_bool_array"], [38, 2, 1, "", "get_values"], [38, 2, 1, "", "labels"], [38, 2, 1, "", "load"], [38, 2, 1, "", "load_data"], [38, 2, 1, "", "load_proteins"], [38, 2, 1, "", "make_df"], [38, 2, 1, "", "numof_entities"], [38, 2, 1, "", "numof_records"], [38, 2, 1, "", "numof_references"], [38, 2, 1, "", "process"], [38, 2, 1, "", "reload"], [38, 2, 1, "", "select"], [38, 2, 1, "", "set_method"], [38, 2, 1, "", "set_reference_set"], [38, 2, 1, "", "show"], [38, 2, 1, "", "subset_intersection"], [38, 2, 1, "", "to_array"], [38, 2, 1, "", "to_bool_array"], [38, 2, 1, "", "to_set"]], "pypath.core.annot.GuideToPharmacology": [[39, 2, 1, "", "__init__"], [39, 2, 1, "", "add_complexes_by_inference"], [39, 2, 1, "", "all_complexes"], [39, 2, 1, "", "all_entities"], [39, 2, 1, "", "all_mirnas"], [39, 2, 1, "", "all_proteins"], [39, 2, 1, "", "all_refs"], [39, 2, 1, "", "annotate_complex"], [39, 2, 1, "", "browse"], [39, 2, 1, "", "complex_inference"], [39, 2, 1, "", "coverage"], [39, 2, 1, "", "curation_effort"], [39, 2, 1, "", "get_names"], [39, 2, 1, "", "get_reference_set"], [39, 2, 1, "", "get_subset"], [39, 2, 1, "", "get_subset_bool_array"], [39, 2, 1, "", "get_values"], [39, 2, 1, "", "labels"], [39, 2, 1, "", "load"], [39, 2, 1, "", "load_data"], [39, 2, 1, "", "load_proteins"], [39, 2, 1, "", "make_df"], [39, 2, 1, "", "numof_entities"], [39, 2, 1, "", "numof_records"], [39, 2, 1, "", "numof_references"], [39, 2, 1, "", "process"], [39, 2, 1, "", "reload"], [39, 2, 1, "", "select"], [39, 2, 1, "", "set_method"], [39, 2, 1, "", "set_reference_set"], [39, 2, 1, "", "show"], [39, 2, 1, "", "subset_intersection"], [39, 2, 1, "", "to_array"], [39, 2, 1, "", "to_bool_array"], [39, 2, 1, "", "to_set"]], "pypath.core.annot.HPO": [[40, 2, 1, "", "__init__"], [40, 2, 1, "", "add_complexes_by_inference"], [40, 2, 1, "", "all_complexes"], [40, 2, 1, "", "all_entities"], [40, 2, 1, "", "all_mirnas"], [40, 2, 1, "", "all_proteins"], [40, 2, 1, "", "all_refs"], [40, 2, 1, "", "annotate_complex"], [40, 2, 1, "", "browse"], [40, 2, 1, "", "complex_inference"], [40, 2, 1, "", "coverage"], [40, 2, 1, "", "curation_effort"], [40, 2, 1, "", "get_names"], [40, 2, 1, "", "get_reference_set"], [40, 2, 1, "", "get_subset"], [40, 2, 1, "", "get_subset_bool_array"], [40, 2, 1, "", "get_values"], [40, 2, 1, "", "labels"], [40, 2, 1, "", "load"], [40, 2, 1, "", "load_data"], [40, 2, 1, "", "load_proteins"], [40, 2, 1, "", "make_df"], [40, 2, 1, "", "numof_entities"], [40, 2, 1, "", "numof_records"], [40, 2, 1, "", "numof_references"], [40, 2, 1, "", "process"], [40, 2, 1, "", "reload"], [40, 2, 1, "", "select"], [40, 2, 1, "", "set_method"], [40, 2, 1, "", "set_reference_set"], [40, 2, 1, "", "show"], [40, 2, 1, "", "subset_intersection"], [40, 2, 1, "", "to_array"], [40, 2, 1, "", "to_bool_array"], [40, 2, 1, "", "to_set"]], "pypath.core.annot.Hgnc": [[41, 2, 1, "", "__init__"], [41, 2, 1, "", "add_complexes_by_inference"], [41, 2, 1, "", "all_complexes"], [41, 2, 1, "", "all_entities"], [41, 2, 1, "", "all_mirnas"], [41, 2, 1, "", "all_proteins"], [41, 2, 1, "", "all_refs"], [41, 2, 1, "", "annotate_complex"], [41, 2, 1, "", "browse"], [41, 2, 1, "", "complex_inference"], [41, 2, 1, "", "coverage"], [41, 2, 1, "", "curation_effort"], [41, 2, 1, "", "get_names"], [41, 2, 1, "", "get_reference_set"], [41, 2, 1, "", "get_subset"], [41, 2, 1, "", "get_subset_bool_array"], [41, 2, 1, "", "get_values"], [41, 2, 1, "", "labels"], [41, 2, 1, "", "load"], [41, 2, 1, "", "load_data"], [41, 2, 1, "", "load_proteins"], [41, 2, 1, "", "make_df"], [41, 2, 1, "", "numof_entities"], [41, 2, 1, "", "numof_records"], [41, 2, 1, "", "numof_references"], [41, 2, 1, "", "process"], [41, 2, 1, "", "reload"], [41, 2, 1, "", "select"], [41, 2, 1, "", "set_method"], [41, 2, 1, "", "set_reference_set"], [41, 2, 1, "", "show"], [41, 2, 1, "", "subset_intersection"], [41, 2, 1, "", "to_array"], [41, 2, 1, "", "to_bool_array"], [41, 2, 1, "", "to_set"]], "pypath.core.annot.HpmrComplex": [[42, 2, 1, "", "__init__"], [42, 2, 1, "", "add_complexes_by_inference"], [42, 2, 1, "", "all_complexes"], [42, 2, 1, "", "all_entities"], [42, 2, 1, "", "all_mirnas"], [42, 2, 1, "", "all_proteins"], [42, 2, 1, "", "all_refs"], [42, 2, 1, "", "annotate_complex"], [42, 2, 1, "", "browse"], [42, 2, 1, "", "complex_inference"], [42, 2, 1, "", "coverage"], [42, 2, 1, "", "curation_effort"], [42, 2, 1, "", "get_names"], [42, 2, 1, "", "get_reference_set"], [42, 2, 1, "", "get_subset"], [42, 2, 1, "", "get_subset_bool_array"], [42, 2, 1, "", "get_values"], [42, 2, 1, "", "labels"], [42, 2, 1, "", "load"], [42, 2, 1, "", "load_data"], [42, 2, 1, "", "load_proteins"], [42, 2, 1, "", "make_df"], [42, 2, 1, "", "numof_entities"], [42, 2, 1, "", "numof_records"], [42, 2, 1, "", "numof_references"], [42, 2, 1, "", "process"], [42, 2, 1, "", "reload"], [42, 2, 1, "", "select"], [42, 2, 1, "", "set_method"], [42, 2, 1, "", "set_reference_set"], [42, 2, 1, "", "show"], [42, 2, 1, "", "subset_intersection"], [42, 2, 1, "", "to_array"], [42, 2, 1, "", "to_bool_array"], [42, 2, 1, "", "to_set"]], "pypath.core.annot.HumanPlasmaMembraneReceptome": [[43, 2, 1, "", "__init__"], [43, 2, 1, "", "add_complexes_by_inference"], [43, 2, 1, "", "all_complexes"], [43, 2, 1, "", "all_entities"], [43, 2, 1, "", "all_mirnas"], [43, 2, 1, "", "all_proteins"], [43, 2, 1, "", "all_refs"], [43, 2, 1, "", "annotate_complex"], [43, 2, 1, "", "browse"], [43, 2, 1, "", "complex_inference"], [43, 2, 1, "", "coverage"], [43, 2, 1, "", "curation_effort"], [43, 2, 1, "", "get_names"], [43, 2, 1, "", "get_reference_set"], [43, 2, 1, "", "get_subset"], [43, 2, 1, "", "get_subset_bool_array"], [43, 2, 1, "", "get_values"], [43, 2, 1, "", "labels"], [43, 2, 1, "", "load"], [43, 2, 1, "", "load_data"], [43, 2, 1, "", "load_proteins"], [43, 2, 1, "", "make_df"], [43, 2, 1, "", "numof_entities"], [43, 2, 1, "", "numof_records"], [43, 2, 1, "", "numof_references"], [43, 2, 1, "", "process"], [43, 2, 1, "", "reload"], [43, 2, 1, "", "select"], [43, 2, 1, "", "set_method"], [43, 2, 1, "", "set_reference_set"], [43, 2, 1, "", "show"], [43, 2, 1, "", "subset_intersection"], [43, 2, 1, "", "to_array"], [43, 2, 1, "", "to_bool_array"], [43, 2, 1, "", "to_set"]], "pypath.core.annot.HumanProteinAtlas": [[44, 2, 1, "", "__init__"], [44, 2, 1, "", "add_complexes_by_inference"], [44, 2, 1, "", "all_complexes"], [44, 2, 1, "", "all_entities"], [44, 2, 1, "", "all_mirnas"], [44, 2, 1, "", "all_proteins"], [44, 2, 1, "", "all_refs"], [44, 2, 1, "", "annotate_complex"], [44, 2, 1, "", "browse"], [44, 2, 1, "", "complex_inference"], [44, 2, 1, "", "coverage"], [44, 2, 1, "", "curation_effort"], [44, 2, 1, "", "get_names"], [44, 2, 1, "", "get_reference_set"], [44, 2, 1, "", "get_subset"], [44, 2, 1, "", "get_subset_bool_array"], [44, 2, 1, "", "get_values"], [44, 2, 1, "", "labels"], [44, 2, 1, "", "load"], [44, 2, 1, "", "load_data"], [44, 2, 1, "", "load_proteins"], [44, 2, 1, "", "make_df"], [44, 2, 1, "", "numof_entities"], [44, 2, 1, "", "numof_records"], [44, 2, 1, "", "numof_references"], [44, 2, 1, "", "process"], [44, 2, 1, "", "reload"], [44, 2, 1, "", "select"], [44, 2, 1, "", "set_method"], [44, 2, 1, "", "set_reference_set"], [44, 2, 1, "", "show"], [44, 2, 1, "", "subset_intersection"], [44, 2, 1, "", "to_array"], [44, 2, 1, "", "to_bool_array"], [44, 2, 1, "", "to_set"]], "pypath.core.annot.HumanProteinAtlasSecretome": [[45, 2, 1, "", "__init__"], [45, 2, 1, "", "add_complexes_by_inference"], [45, 2, 1, "", "all_complexes"], [45, 2, 1, "", "all_entities"], [45, 2, 1, "", "all_mirnas"], [45, 2, 1, "", "all_proteins"], [45, 2, 1, "", "all_refs"], [45, 2, 1, "", "annotate_complex"], [45, 2, 1, "", "browse"], [45, 2, 1, "", "complex_inference"], [45, 2, 1, "", "coverage"], [45, 2, 1, "", "curation_effort"], [45, 2, 1, "", "get_names"], [45, 2, 1, "", "get_reference_set"], [45, 2, 1, "", "get_subset"], [45, 2, 1, "", "get_subset_bool_array"], [45, 2, 1, "", "get_values"], [45, 2, 1, "", "labels"], [45, 2, 1, "", "load"], [45, 2, 1, "", "load_data"], [45, 2, 1, "", "load_proteins"], [45, 2, 1, "", "make_df"], [45, 2, 1, "", "numof_entities"], [45, 2, 1, "", "numof_records"], [45, 2, 1, "", "numof_references"], [45, 2, 1, "", "process"], [45, 2, 1, "", "reload"], [45, 2, 1, "", "select"], [45, 2, 1, "", "set_method"], [45, 2, 1, "", "set_reference_set"], [45, 2, 1, "", "show"], [45, 2, 1, "", "subset_intersection"], [45, 2, 1, "", "to_array"], [45, 2, 1, "", "to_bool_array"], [45, 2, 1, "", "to_set"]], "pypath.core.annot.HumanProteinAtlasSubcellular": [[46, 2, 1, "", "__init__"], [46, 2, 1, "", "add_complexes_by_inference"], [46, 2, 1, "", "all_complexes"], [46, 2, 1, "", "all_entities"], [46, 2, 1, "", "all_mirnas"], [46, 2, 1, "", "all_proteins"], [46, 2, 1, "", "all_refs"], [46, 2, 1, "", "annotate_complex"], [46, 2, 1, "", "browse"], [46, 2, 1, "", "complex_inference"], [46, 2, 1, "", "coverage"], [46, 2, 1, "", "curation_effort"], [46, 2, 1, "", "get_names"], [46, 2, 1, "", "get_reference_set"], [46, 2, 1, "", "get_subset"], [46, 2, 1, "", "get_subset_bool_array"], [46, 2, 1, "", "get_values"], [46, 2, 1, "", "labels"], [46, 2, 1, "", "load"], [46, 2, 1, "", "load_data"], [46, 2, 1, "", "load_proteins"], [46, 2, 1, "", "make_df"], [46, 2, 1, "", "numof_entities"], [46, 2, 1, "", "numof_records"], [46, 2, 1, "", "numof_references"], [46, 2, 1, "", "process"], [46, 2, 1, "", "reload"], [46, 2, 1, "", "select"], [46, 2, 1, "", "set_method"], [46, 2, 1, "", "set_reference_set"], [46, 2, 1, "", "show"], [46, 2, 1, "", "subset_intersection"], [46, 2, 1, "", "to_array"], [46, 2, 1, "", "to_bool_array"], [46, 2, 1, "", "to_set"]], "pypath.core.annot.Humancellmap": [[47, 2, 1, "", "__init__"], [47, 2, 1, "", "add_complexes_by_inference"], [47, 2, 1, "", "all_complexes"], [47, 2, 1, "", "all_entities"], [47, 2, 1, "", "all_mirnas"], [47, 2, 1, "", "all_proteins"], [47, 2, 1, "", "all_refs"], [47, 2, 1, "", "annotate_complex"], [47, 2, 1, "", "browse"], [47, 2, 1, "", "complex_inference"], [47, 2, 1, "", "coverage"], [47, 2, 1, "", "curation_effort"], [47, 2, 1, "", "get_names"], [47, 2, 1, "", "get_reference_set"], [47, 2, 1, "", "get_subset"], [47, 2, 1, "", "get_subset_bool_array"], [47, 2, 1, "", "get_values"], [47, 2, 1, "", "labels"], [47, 2, 1, "", "load"], [47, 2, 1, "", "load_data"], [47, 2, 1, "", "load_proteins"], [47, 2, 1, "", "make_df"], [47, 2, 1, "", "numof_entities"], [47, 2, 1, "", "numof_records"], [47, 2, 1, "", "numof_references"], [47, 2, 1, "", "process"], [47, 2, 1, "", "reload"], [47, 2, 1, "", "select"], [47, 2, 1, "", "set_method"], [47, 2, 1, "", "set_reference_set"], [47, 2, 1, "", "show"], [47, 2, 1, "", "subset_intersection"], [47, 2, 1, "", "to_array"], [47, 2, 1, "", "to_bool_array"], [47, 2, 1, "", "to_set"]], "pypath.core.annot.Icellnet": [[48, 2, 1, "", "__init__"], [48, 2, 1, "", "add_complexes_by_inference"], [48, 2, 1, "", "all_complexes"], [48, 2, 1, "", "all_entities"], [48, 2, 1, "", "all_mirnas"], [48, 2, 1, "", "all_proteins"], [48, 2, 1, "", "all_refs"], [48, 2, 1, "", "annotate_complex"], [48, 2, 1, "", "browse"], [48, 2, 1, "", "complex_inference"], [48, 2, 1, "", "coverage"], [48, 2, 1, "", "curation_effort"], [48, 2, 1, "", "get_names"], [48, 2, 1, "", "get_reference_set"], [48, 2, 1, "", "get_subset"], [48, 2, 1, "", "get_subset_bool_array"], [48, 2, 1, "", "get_values"], [48, 2, 1, "", "labels"], [48, 2, 1, "", "load"], [48, 2, 1, "", "load_data"], [48, 2, 1, "", "load_proteins"], [48, 2, 1, "", "make_df"], [48, 2, 1, "", "numof_entities"], [48, 2, 1, "", "numof_records"], [48, 2, 1, "", "numof_references"], [48, 2, 1, "", "process"], [48, 2, 1, "", "reload"], [48, 2, 1, "", "select"], [48, 2, 1, "", "set_method"], [48, 2, 1, "", "set_reference_set"], [48, 2, 1, "", "show"], [48, 2, 1, "", "subset_intersection"], [48, 2, 1, "", "to_array"], [48, 2, 1, "", "to_bool_array"], [48, 2, 1, "", "to_set"]], "pypath.core.annot.IcellnetComplex": [[49, 2, 1, "", "__init__"], [49, 2, 1, "", "add_complexes_by_inference"], [49, 2, 1, "", "all_complexes"], [49, 2, 1, "", "all_entities"], [49, 2, 1, "", "all_mirnas"], [49, 2, 1, "", "all_proteins"], [49, 2, 1, "", "all_refs"], [49, 2, 1, "", "annotate_complex"], [49, 2, 1, "", "browse"], [49, 2, 1, "", "complex_inference"], [49, 2, 1, "", "coverage"], [49, 2, 1, "", "curation_effort"], [49, 2, 1, "", "get_names"], [49, 2, 1, "", "get_reference_set"], [49, 2, 1, "", "get_subset"], [49, 2, 1, "", "get_subset_bool_array"], [49, 2, 1, "", "get_values"], [49, 2, 1, "", "labels"], [49, 2, 1, "", "load"], [49, 2, 1, "", "load_data"], [49, 2, 1, "", "load_proteins"], [49, 2, 1, "", "make_df"], [49, 2, 1, "", "numof_entities"], [49, 2, 1, "", "numof_records"], [49, 2, 1, "", "numof_references"], [49, 2, 1, "", "process"], [49, 2, 1, "", "reload"], [49, 2, 1, "", "select"], [49, 2, 1, "", "set_method"], [49, 2, 1, "", "set_reference_set"], [49, 2, 1, "", "show"], [49, 2, 1, "", "subset_intersection"], [49, 2, 1, "", "to_array"], [49, 2, 1, "", "to_bool_array"], [49, 2, 1, "", "to_set"]], "pypath.core.annot.Integrins": [[50, 2, 1, "", "__init__"], [50, 2, 1, "", "add_complexes_by_inference"], [50, 2, 1, "", "all_complexes"], [50, 2, 1, "", "all_entities"], [50, 2, 1, "", "all_mirnas"], [50, 2, 1, "", "all_proteins"], [50, 2, 1, "", "all_refs"], [50, 2, 1, "", "annotate_complex"], [50, 2, 1, "", "browse"], [50, 2, 1, "", "complex_inference"], [50, 2, 1, "", "coverage"], [50, 2, 1, "", "curation_effort"], [50, 2, 1, "", "get_names"], [50, 2, 1, "", "get_reference_set"], [50, 2, 1, "", "get_subset"], [50, 2, 1, "", "get_subset_bool_array"], [50, 2, 1, "", "get_values"], [50, 2, 1, "", "labels"], [50, 2, 1, "", "load"], [50, 2, 1, "", "load_data"], [50, 2, 1, "", "load_proteins"], [50, 2, 1, "", "make_df"], [50, 2, 1, "", "numof_entities"], [50, 2, 1, "", "numof_records"], [50, 2, 1, "", "numof_references"], [50, 2, 1, "", "process"], [50, 2, 1, "", "reload"], [50, 2, 1, "", "select"], [50, 2, 1, "", "set_method"], [50, 2, 1, "", "set_reference_set"], [50, 2, 1, "", "show"], [50, 2, 1, "", "subset_intersection"], [50, 2, 1, "", "to_array"], [50, 2, 1, "", "to_bool_array"], [50, 2, 1, "", "to_set"]], "pypath.core.annot.InterPro": [[51, 2, 1, "", "__init__"], [51, 2, 1, "", "add_complexes_by_inference"], [51, 2, 1, "", "all_complexes"], [51, 2, 1, "", "all_entities"], [51, 2, 1, "", "all_mirnas"], [51, 2, 1, "", "all_proteins"], [51, 2, 1, "", "all_refs"], [51, 2, 1, "", "annotate_complex"], [51, 2, 1, "", "browse"], [51, 2, 1, "", "complex_inference"], [51, 2, 1, "", "coverage"], [51, 2, 1, "", "curation_effort"], [51, 2, 1, "", "get_names"], [51, 2, 1, "", "get_reference_set"], [51, 2, 1, "", "get_subset"], [51, 2, 1, "", "get_subset_bool_array"], [51, 2, 1, "", "get_values"], [51, 2, 1, "", "labels"], [51, 2, 1, "", "load"], [51, 2, 1, "", "load_data"], [51, 2, 1, "", "load_proteins"], [51, 2, 1, "", "make_df"], [51, 2, 1, "", "numof_entities"], [51, 2, 1, "", "numof_records"], [51, 2, 1, "", "numof_references"], [51, 2, 1, "", "process"], [51, 2, 1, "", "reload"], [51, 2, 1, "", "select"], [51, 2, 1, "", "set_method"], [51, 2, 1, "", "set_reference_set"], [51, 2, 1, "", "show"], [51, 2, 1, "", "subset_intersection"], [51, 2, 1, "", "to_array"], [51, 2, 1, "", "to_bool_array"], [51, 2, 1, "", "to_set"]], "pypath.core.annot.Intogen": [[52, 2, 1, "", "__init__"], [52, 2, 1, "", "add_complexes_by_inference"], [52, 2, 1, "", "all_complexes"], [52, 2, 1, "", "all_entities"], [52, 2, 1, "", "all_mirnas"], [52, 2, 1, "", "all_proteins"], [52, 2, 1, "", "all_refs"], [52, 2, 1, "", "annotate_complex"], [52, 2, 1, "", "browse"], [52, 2, 1, "", "complex_inference"], [52, 2, 1, "", "coverage"], [52, 2, 1, "", "curation_effort"], [52, 2, 1, "", "get_names"], [52, 2, 1, "", "get_reference_set"], [52, 2, 1, "", "get_subset"], [52, 2, 1, "", "get_subset_bool_array"], [52, 2, 1, "", "get_values"], [52, 2, 1, "", "labels"], [52, 2, 1, "", "load"], [52, 2, 1, "", "load_data"], [52, 2, 1, "", "load_proteins"], [52, 2, 1, "", "make_df"], [52, 2, 1, "", "numof_entities"], [52, 2, 1, "", "numof_records"], [52, 2, 1, "", "numof_references"], [52, 2, 1, "", "process"], [52, 2, 1, "", "reload"], [52, 2, 1, "", "select"], [52, 2, 1, "", "set_method"], [52, 2, 1, "", "set_reference_set"], [52, 2, 1, "", "show"], [52, 2, 1, "", "subset_intersection"], [52, 2, 1, "", "to_array"], [52, 2, 1, "", "to_bool_array"], [52, 2, 1, "", "to_set"]], "pypath.core.annot.Italk": [[53, 2, 1, "", "__init__"], [53, 2, 1, "", "add_complexes_by_inference"], [53, 2, 1, "", "all_complexes"], [53, 2, 1, "", "all_entities"], [53, 2, 1, "", "all_mirnas"], [53, 2, 1, "", "all_proteins"], [53, 2, 1, "", "all_refs"], [53, 2, 1, "", "annotate_complex"], [53, 2, 1, "", "browse"], [53, 2, 1, "", "complex_inference"], [53, 2, 1, "", "coverage"], [53, 2, 1, "", "curation_effort"], [53, 2, 1, "", "get_names"], [53, 2, 1, "", "get_reference_set"], [53, 2, 1, "", "get_subset"], [53, 2, 1, "", "get_subset_bool_array"], [53, 2, 1, "", "get_values"], [53, 2, 1, "", "labels"], [53, 2, 1, "", "load"], [53, 2, 1, "", "load_data"], [53, 2, 1, "", "load_proteins"], [53, 2, 1, "", "make_df"], [53, 2, 1, "", "numof_entities"], [53, 2, 1, "", "numof_records"], [53, 2, 1, "", "numof_references"], [53, 2, 1, "", "process"], [53, 2, 1, "", "reload"], [53, 2, 1, "", "select"], [53, 2, 1, "", "set_method"], [53, 2, 1, "", "set_reference_set"], [53, 2, 1, "", "show"], [53, 2, 1, "", "subset_intersection"], [53, 2, 1, "", "to_array"], [53, 2, 1, "", "to_bool_array"], [53, 2, 1, "", "to_set"]], "pypath.core.annot.KeggPathways": [[54, 2, 1, "", "__init__"], [54, 2, 1, "", "add_complexes_by_inference"], [54, 2, 1, "", "all_complexes"], [54, 2, 1, "", "all_entities"], [54, 2, 1, "", "all_mirnas"], [54, 2, 1, "", "all_proteins"], [54, 2, 1, "", "all_refs"], [54, 2, 1, "", "annotate_complex"], [54, 2, 1, "", "browse"], [54, 2, 1, "", "complex_inference"], [54, 2, 1, "", "coverage"], [54, 2, 1, "", "curation_effort"], [54, 2, 1, "", "get_names"], [54, 2, 1, "", "get_reference_set"], [54, 2, 1, "", "get_subset"], [54, 2, 1, "", "get_subset_bool_array"], [54, 2, 1, "", "get_values"], [54, 2, 1, "", "labels"], [54, 2, 1, "", "load"], [54, 2, 1, "", "load_data"], [54, 2, 1, "", "load_proteins"], [54, 2, 1, "", "make_df"], [54, 2, 1, "", "numof_entities"], [54, 2, 1, "", "numof_records"], [54, 2, 1, "", "numof_references"], [54, 2, 1, "", "process"], [54, 2, 1, "", "reload"], [54, 2, 1, "", "select"], [54, 2, 1, "", "set_method"], [54, 2, 1, "", "set_reference_set"], [54, 2, 1, "", "show"], [54, 2, 1, "", "subset_intersection"], [54, 2, 1, "", "to_array"], [54, 2, 1, "", "to_bool_array"], [54, 2, 1, "", "to_set"]], "pypath.core.annot.KeggPathwaysPC": [[55, 2, 1, "", "__init__"], [55, 2, 1, "", "add_complexes_by_inference"], [55, 2, 1, "", "all_complexes"], [55, 2, 1, "", "all_entities"], [55, 2, 1, "", "all_mirnas"], [55, 2, 1, "", "all_proteins"], [55, 2, 1, "", "all_refs"], [55, 2, 1, "", "annotate_complex"], [55, 2, 1, "", "browse"], [55, 2, 1, "", "complex_inference"], [55, 2, 1, "", "coverage"], [55, 2, 1, "", "curation_effort"], [55, 2, 1, "", "get_names"], [55, 2, 1, "", "get_reference_set"], [55, 2, 1, "", "get_subset"], [55, 2, 1, "", "get_subset_bool_array"], [55, 2, 1, "", "get_values"], [55, 2, 1, "", "labels"], [55, 2, 1, "", "load"], [55, 2, 1, "", "load_data"], [55, 2, 1, "", "load_proteins"], [55, 2, 1, "", "make_df"], [55, 2, 1, "", "numof_entities"], [55, 2, 1, "", "numof_records"], [55, 2, 1, "", "numof_references"], [55, 2, 1, "", "process"], [55, 2, 1, "", "reload"], [55, 2, 1, "", "select"], [55, 2, 1, "", "set_method"], [55, 2, 1, "", "set_reference_set"], [55, 2, 1, "", "show"], [55, 2, 1, "", "subset_intersection"], [55, 2, 1, "", "to_array"], [55, 2, 1, "", "to_bool_array"], [55, 2, 1, "", "to_set"]], "pypath.core.annot.Kinasedotcom": [[56, 2, 1, "", "__init__"], [56, 2, 1, "", "add_complexes_by_inference"], [56, 2, 1, "", "all_complexes"], [56, 2, 1, "", "all_entities"], [56, 2, 1, "", "all_mirnas"], [56, 2, 1, "", "all_proteins"], [56, 2, 1, "", "all_refs"], [56, 2, 1, "", "annotate_complex"], [56, 2, 1, "", "browse"], [56, 2, 1, "", "complex_inference"], [56, 2, 1, "", "coverage"], [56, 2, 1, "", "curation_effort"], [56, 2, 1, "", "get_names"], [56, 2, 1, "", "get_reference_set"], [56, 2, 1, "", "get_subset"], [56, 2, 1, "", "get_subset_bool_array"], [56, 2, 1, "", "get_values"], [56, 2, 1, "", "labels"], [56, 2, 1, "", "load"], [56, 2, 1, "", "load_data"], [56, 2, 1, "", "load_proteins"], [56, 2, 1, "", "make_df"], [56, 2, 1, "", "numof_entities"], [56, 2, 1, "", "numof_records"], [56, 2, 1, "", "numof_references"], [56, 2, 1, "", "process"], [56, 2, 1, "", "reload"], [56, 2, 1, "", "select"], [56, 2, 1, "", "set_method"], [56, 2, 1, "", "set_reference_set"], [56, 2, 1, "", "show"], [56, 2, 1, "", "subset_intersection"], [56, 2, 1, "", "to_array"], [56, 2, 1, "", "to_bool_array"], [56, 2, 1, "", "to_set"]], "pypath.core.annot.Kirouac2010": [[57, 2, 1, "", "__init__"], [57, 2, 1, "", "add_complexes_by_inference"], [57, 2, 1, "", "all_complexes"], [57, 2, 1, "", "all_entities"], [57, 2, 1, "", "all_mirnas"], [57, 2, 1, "", "all_proteins"], [57, 2, 1, "", "all_refs"], [57, 2, 1, "", "annotate_complex"], [57, 2, 1, "", "browse"], [57, 2, 1, "", "complex_inference"], [57, 2, 1, "", "coverage"], [57, 2, 1, "", "curation_effort"], [57, 2, 1, "", "get_names"], [57, 2, 1, "", "get_reference_set"], [57, 2, 1, "", "get_subset"], [57, 2, 1, "", "get_subset_bool_array"], [57, 2, 1, "", "get_values"], [57, 2, 1, "", "labels"], [57, 2, 1, "", "load"], [57, 2, 1, "", "load_data"], [57, 2, 1, "", "load_proteins"], [57, 2, 1, "", "make_df"], [57, 2, 1, "", "numof_entities"], [57, 2, 1, "", "numof_records"], [57, 2, 1, "", "numof_references"], [57, 2, 1, "", "process"], [57, 2, 1, "", "reload"], [57, 2, 1, "", "select"], [57, 2, 1, "", "set_method"], [57, 2, 1, "", "set_reference_set"], [57, 2, 1, "", "show"], [57, 2, 1, "", "subset_intersection"], [57, 2, 1, "", "to_array"], [57, 2, 1, "", "to_bool_array"], [57, 2, 1, "", "to_set"]], "pypath.core.annot.Lambert2018": [[58, 2, 1, "", "__init__"], [58, 2, 1, "", "add_complexes_by_inference"], [58, 2, 1, "", "all_complexes"], [58, 2, 1, "", "all_entities"], [58, 2, 1, "", "all_mirnas"], [58, 2, 1, "", "all_proteins"], [58, 2, 1, "", "all_refs"], [58, 2, 1, "", "annotate_complex"], [58, 2, 1, "", "browse"], [58, 2, 1, "", "complex_inference"], [58, 2, 1, "", "coverage"], [58, 2, 1, "", "curation_effort"], [58, 2, 1, "", "get_names"], [58, 2, 1, "", "get_reference_set"], [58, 2, 1, "", "get_subset"], [58, 2, 1, "", "get_subset_bool_array"], [58, 2, 1, "", "get_values"], [58, 2, 1, "", "labels"], [58, 2, 1, "", "load"], [58, 2, 1, "", "load_data"], [58, 2, 1, "", "load_proteins"], [58, 2, 1, "", "make_df"], [58, 2, 1, "", "numof_entities"], [58, 2, 1, "", "numof_records"], [58, 2, 1, "", "numof_references"], [58, 2, 1, "", "process"], [58, 2, 1, "", "reload"], [58, 2, 1, "", "select"], [58, 2, 1, "", "set_method"], [58, 2, 1, "", "set_reference_set"], [58, 2, 1, "", "show"], [58, 2, 1, "", "subset_intersection"], [58, 2, 1, "", "to_array"], [58, 2, 1, "", "to_bool_array"], [58, 2, 1, "", "to_set"]], "pypath.core.annot.LigandReceptor": [[59, 2, 1, "", "__init__"], [59, 2, 1, "", "add_complexes_by_inference"], [59, 2, 1, "", "all_complexes"], [59, 2, 1, "", "all_entities"], [59, 2, 1, "", "all_mirnas"], [59, 2, 1, "", "all_proteins"], [59, 2, 1, "", "all_refs"], [59, 2, 1, "", "annotate_complex"], [59, 2, 1, "", "browse"], [59, 2, 1, "", "complex_inference"], [59, 2, 1, "", "coverage"], [59, 2, 1, "", "curation_effort"], [59, 2, 1, "", "get_names"], [59, 2, 1, "", "get_reference_set"], [59, 2, 1, "", "get_subset"], [59, 2, 1, "", "get_subset_bool_array"], [59, 2, 1, "", "get_values"], [59, 2, 1, "", "labels"], [59, 2, 1, "", "load"], [59, 2, 1, "", "load_data"], [59, 2, 1, "", "load_proteins"], [59, 2, 1, "", "make_df"], [59, 2, 1, "", "numof_entities"], [59, 2, 1, "", "numof_records"], [59, 2, 1, "", "numof_references"], [59, 2, 1, "", "process"], [59, 2, 1, "", "reload"], [59, 2, 1, "", "select"], [59, 2, 1, "", "set_method"], [59, 2, 1, "", "set_reference_set"], [59, 2, 1, "", "show"], [59, 2, 1, "", "subset_intersection"], [59, 2, 1, "", "to_array"], [59, 2, 1, "", "to_bool_array"], [59, 2, 1, "", "to_set"]], "pypath.core.annot.Locate": [[60, 2, 1, "", "__init__"], [60, 2, 1, "", "add_complexes_by_inference"], [60, 2, 1, "", "all_complexes"], [60, 2, 1, "", "all_entities"], [60, 2, 1, "", "all_mirnas"], [60, 2, 1, "", "all_proteins"], [60, 2, 1, "", "all_refs"], [60, 2, 1, "", "annotate_complex"], [60, 2, 1, "", "browse"], [60, 2, 1, "", "complex_inference"], [60, 2, 1, "", "coverage"], [60, 2, 1, "", "curation_effort"], [60, 2, 1, "", "get_names"], [60, 2, 1, "", "get_reference_set"], [60, 2, 1, "", "get_subset"], [60, 2, 1, "", "get_subset_bool_array"], [60, 2, 1, "", "get_values"], [60, 2, 1, "", "labels"], [60, 2, 1, "", "load"], [60, 2, 1, "", "load_data"], [60, 2, 1, "", "load_proteins"], [60, 2, 1, "", "make_df"], [60, 2, 1, "", "numof_entities"], [60, 2, 1, "", "numof_records"], [60, 2, 1, "", "numof_references"], [60, 2, 1, "", "process"], [60, 2, 1, "", "reload"], [60, 2, 1, "", "select"], [60, 2, 1, "", "set_method"], [60, 2, 1, "", "set_reference_set"], [60, 2, 1, "", "show"], [60, 2, 1, "", "subset_intersection"], [60, 2, 1, "", "to_array"], [60, 2, 1, "", "to_bool_array"], [60, 2, 1, "", "to_set"]], "pypath.core.annot.Lrdb": [[61, 2, 1, "", "__init__"], [61, 2, 1, "", "add_complexes_by_inference"], [61, 2, 1, "", "all_complexes"], [61, 2, 1, "", "all_entities"], [61, 2, 1, "", "all_mirnas"], [61, 2, 1, "", "all_proteins"], [61, 2, 1, "", "all_refs"], [61, 2, 1, "", "annotate_complex"], [61, 2, 1, "", "browse"], [61, 2, 1, "", "complex_inference"], [61, 2, 1, "", "coverage"], [61, 2, 1, "", "curation_effort"], [61, 2, 1, "", "get_names"], [61, 2, 1, "", "get_reference_set"], [61, 2, 1, "", "get_subset"], [61, 2, 1, "", "get_subset_bool_array"], [61, 2, 1, "", "get_values"], [61, 2, 1, "", "labels"], [61, 2, 1, "", "load"], [61, 2, 1, "", "load_data"], [61, 2, 1, "", "load_proteins"], [61, 2, 1, "", "make_df"], [61, 2, 1, "", "numof_entities"], [61, 2, 1, "", "numof_records"], [61, 2, 1, "", "numof_references"], [61, 2, 1, "", "process"], [61, 2, 1, "", "reload"], [61, 2, 1, "", "select"], [61, 2, 1, "", "set_method"], [61, 2, 1, "", "set_reference_set"], [61, 2, 1, "", "show"], [61, 2, 1, "", "subset_intersection"], [61, 2, 1, "", "to_array"], [61, 2, 1, "", "to_bool_array"], [61, 2, 1, "", "to_set"]], "pypath.core.annot.Matrisome": [[62, 2, 1, "", "__init__"], [62, 2, 1, "", "add_complexes_by_inference"], [62, 2, 1, "", "all_complexes"], [62, 2, 1, "", "all_entities"], [62, 2, 1, "", "all_mirnas"], [62, 2, 1, "", "all_proteins"], [62, 2, 1, "", "all_refs"], [62, 2, 1, "", "annotate_complex"], [62, 2, 1, "", "browse"], [62, 2, 1, "", "complex_inference"], [62, 2, 1, "", "coverage"], [62, 2, 1, "", "curation_effort"], [62, 2, 1, "", "get_names"], [62, 2, 1, "", "get_reference_set"], [62, 2, 1, "", "get_subset"], [62, 2, 1, "", "get_subset_bool_array"], [62, 2, 1, "", "get_values"], [62, 2, 1, "", "labels"], [62, 2, 1, "", "load"], [62, 2, 1, "", "load_data"], [62, 2, 1, "", "load_proteins"], [62, 2, 1, "", "make_df"], [62, 2, 1, "", "numof_entities"], [62, 2, 1, "", "numof_records"], [62, 2, 1, "", "numof_references"], [62, 2, 1, "", "process"], [62, 2, 1, "", "reload"], [62, 2, 1, "", "select"], [62, 2, 1, "", "set_method"], [62, 2, 1, "", "set_reference_set"], [62, 2, 1, "", "show"], [62, 2, 1, "", "subset_intersection"], [62, 2, 1, "", "to_array"], [62, 2, 1, "", "to_bool_array"], [62, 2, 1, "", "to_set"]], "pypath.core.annot.Matrixdb": [[63, 2, 1, "", "__init__"], [63, 2, 1, "", "add_complexes_by_inference"], [63, 2, 1, "", "all_complexes"], [63, 2, 1, "", "all_entities"], [63, 2, 1, "", "all_mirnas"], [63, 2, 1, "", "all_proteins"], [63, 2, 1, "", "all_refs"], [63, 2, 1, "", "annotate_complex"], [63, 2, 1, "", "browse"], [63, 2, 1, "", "complex_inference"], [63, 2, 1, "", "coverage"], [63, 2, 1, "", "curation_effort"], [63, 2, 1, "", "get_names"], [63, 2, 1, "", "get_reference_set"], [63, 2, 1, "", "get_subset"], [63, 2, 1, "", "get_subset_bool_array"], [63, 2, 1, "", "get_values"], [63, 2, 1, "", "labels"], [63, 2, 1, "", "load"], [63, 2, 1, "", "load_data"], [63, 2, 1, "", "load_proteins"], [63, 2, 1, "", "make_df"], [63, 2, 1, "", "numof_entities"], [63, 2, 1, "", "numof_records"], [63, 2, 1, "", "numof_references"], [63, 2, 1, "", "process"], [63, 2, 1, "", "reload"], [63, 2, 1, "", "select"], [63, 2, 1, "", "set_method"], [63, 2, 1, "", "set_reference_set"], [63, 2, 1, "", "show"], [63, 2, 1, "", "subset_intersection"], [63, 2, 1, "", "to_array"], [63, 2, 1, "", "to_bool_array"], [63, 2, 1, "", "to_set"]], "pypath.core.annot.Mcam": [[64, 2, 1, "", "__init__"], [64, 2, 1, "", "add_complexes_by_inference"], [64, 2, 1, "", "all_complexes"], [64, 2, 1, "", "all_entities"], [64, 2, 1, "", "all_mirnas"], [64, 2, 1, "", "all_proteins"], [64, 2, 1, "", "all_refs"], [64, 2, 1, "", "annotate_complex"], [64, 2, 1, "", "browse"], [64, 2, 1, "", "complex_inference"], [64, 2, 1, "", "coverage"], [64, 2, 1, "", "curation_effort"], [64, 2, 1, "", "get_names"], [64, 2, 1, "", "get_reference_set"], [64, 2, 1, "", "get_subset"], [64, 2, 1, "", "get_subset_bool_array"], [64, 2, 1, "", "get_values"], [64, 2, 1, "", "labels"], [64, 2, 1, "", "load"], [64, 2, 1, "", "load_data"], [64, 2, 1, "", "load_proteins"], [64, 2, 1, "", "make_df"], [64, 2, 1, "", "numof_entities"], [64, 2, 1, "", "numof_records"], [64, 2, 1, "", "numof_references"], [64, 2, 1, "", "process"], [64, 2, 1, "", "reload"], [64, 2, 1, "", "select"], [64, 2, 1, "", "set_method"], [64, 2, 1, "", "set_reference_set"], [64, 2, 1, "", "show"], [64, 2, 1, "", "subset_intersection"], [64, 2, 1, "", "to_array"], [64, 2, 1, "", "to_bool_array"], [64, 2, 1, "", "to_set"]], "pypath.core.annot.Membranome": [[65, 2, 1, "", "__init__"], [65, 2, 1, "", "add_complexes_by_inference"], [65, 2, 1, "", "all_complexes"], [65, 2, 1, "", "all_entities"], [65, 2, 1, "", "all_mirnas"], [65, 2, 1, "", "all_proteins"], [65, 2, 1, "", "all_refs"], [65, 2, 1, "", "annotate_complex"], [65, 2, 1, "", "browse"], [65, 2, 1, "", "complex_inference"], [65, 2, 1, "", "coverage"], [65, 2, 1, "", "curation_effort"], [65, 2, 1, "", "get_names"], [65, 2, 1, "", "get_reference_set"], [65, 2, 1, "", "get_subset"], [65, 2, 1, "", "get_subset_bool_array"], [65, 2, 1, "", "get_values"], [65, 2, 1, "", "labels"], [65, 2, 1, "", "load"], [65, 2, 1, "", "load_data"], [65, 2, 1, "", "load_proteins"], [65, 2, 1, "", "make_df"], [65, 2, 1, "", "numof_entities"], [65, 2, 1, "", "numof_records"], [65, 2, 1, "", "numof_references"], [65, 2, 1, "", "process"], [65, 2, 1, "", "reload"], [65, 2, 1, "", "select"], [65, 2, 1, "", "set_method"], [65, 2, 1, "", "set_reference_set"], [65, 2, 1, "", "show"], [65, 2, 1, "", "subset_intersection"], [65, 2, 1, "", "to_array"], [65, 2, 1, "", "to_bool_array"], [65, 2, 1, "", "to_set"]], "pypath.core.annot.Msigdb": [[66, 2, 1, "", "__init__"], [66, 2, 1, "", "add_complexes_by_inference"], [66, 2, 1, "", "all_complexes"], [66, 2, 1, "", "all_entities"], [66, 2, 1, "", "all_mirnas"], [66, 2, 1, "", "all_proteins"], [66, 2, 1, "", "all_refs"], [66, 2, 1, "", "annotate_complex"], [66, 2, 1, "", "browse"], [66, 2, 1, "", "complex_inference"], [66, 2, 1, "", "coverage"], [66, 2, 1, "", "curation_effort"], [66, 2, 1, "", "get_names"], [66, 2, 1, "", "get_reference_set"], [66, 2, 1, "", "get_subset"], [66, 2, 1, "", "get_subset_bool_array"], [66, 2, 1, "", "get_values"], [66, 2, 1, "", "labels"], [66, 2, 1, "", "load"], [66, 2, 1, "", "load_data"], [66, 2, 1, "", "load_proteins"], [66, 2, 1, "", "make_df"], [66, 2, 1, "", "numof_entities"], [66, 2, 1, "", "numof_records"], [66, 2, 1, "", "numof_references"], [66, 2, 1, "", "process"], [66, 2, 1, "", "reload"], [66, 2, 1, "", "select"], [66, 2, 1, "", "set_method"], [66, 2, 1, "", "set_reference_set"], [66, 2, 1, "", "show"], [66, 2, 1, "", "subset_intersection"], [66, 2, 1, "", "to_array"], [66, 2, 1, "", "to_bool_array"], [66, 2, 1, "", "to_set"]], "pypath.core.annot.NetpathPathways": [[67, 2, 1, "", "__init__"], [67, 2, 1, "", "add_complexes_by_inference"], [67, 2, 1, "", "all_complexes"], [67, 2, 1, "", "all_entities"], [67, 2, 1, "", "all_mirnas"], [67, 2, 1, "", "all_proteins"], [67, 2, 1, "", "all_refs"], [67, 2, 1, "", "annotate_complex"], [67, 2, 1, "", "browse"], [67, 2, 1, "", "complex_inference"], [67, 2, 1, "", "coverage"], [67, 2, 1, "", "curation_effort"], [67, 2, 1, "", "get_names"], [67, 2, 1, "", "get_reference_set"], [67, 2, 1, "", "get_subset"], [67, 2, 1, "", "get_subset_bool_array"], [67, 2, 1, "", "get_values"], [67, 2, 1, "", "labels"], [67, 2, 1, "", "load"], [67, 2, 1, "", "load_data"], [67, 2, 1, "", "load_proteins"], [67, 2, 1, "", "make_df"], [67, 2, 1, "", "numof_entities"], [67, 2, 1, "", "numof_records"], [67, 2, 1, "", "numof_references"], [67, 2, 1, "", "process"], [67, 2, 1, "", "reload"], [67, 2, 1, "", "select"], [67, 2, 1, "", "set_method"], [67, 2, 1, "", "set_reference_set"], [67, 2, 1, "", "show"], [67, 2, 1, "", "subset_intersection"], [67, 2, 1, "", "to_array"], [67, 2, 1, "", "to_bool_array"], [67, 2, 1, "", "to_set"]], "pypath.core.annot.Opm": [[68, 2, 1, "", "__init__"], [68, 2, 1, "", "add_complexes_by_inference"], [68, 2, 1, "", "all_complexes"], [68, 2, 1, "", "all_entities"], [68, 2, 1, "", "all_mirnas"], [68, 2, 1, "", "all_proteins"], [68, 2, 1, "", "all_refs"], [68, 2, 1, "", "annotate_complex"], [68, 2, 1, "", "browse"], [68, 2, 1, "", "complex_inference"], [68, 2, 1, "", "coverage"], [68, 2, 1, "", "curation_effort"], [68, 2, 1, "", "get_names"], [68, 2, 1, "", "get_reference_set"], [68, 2, 1, "", "get_subset"], [68, 2, 1, "", "get_subset_bool_array"], [68, 2, 1, "", "get_values"], [68, 2, 1, "", "labels"], [68, 2, 1, "", "load"], [68, 2, 1, "", "load_data"], [68, 2, 1, "", "load_proteins"], [68, 2, 1, "", "make_df"], [68, 2, 1, "", "numof_entities"], [68, 2, 1, "", "numof_records"], [68, 2, 1, "", "numof_references"], [68, 2, 1, "", "process"], [68, 2, 1, "", "reload"], [68, 2, 1, "", "select"], [68, 2, 1, "", "set_method"], [68, 2, 1, "", "set_reference_set"], [68, 2, 1, "", "show"], [68, 2, 1, "", "subset_intersection"], [68, 2, 1, "", "to_array"], [68, 2, 1, "", "to_bool_array"], [68, 2, 1, "", "to_set"]], "pypath.core.annot.Panglaodb": [[69, 2, 1, "", "__init__"], [69, 2, 1, "", "add_complexes_by_inference"], [69, 2, 1, "", "all_complexes"], [69, 2, 1, "", "all_entities"], [69, 2, 1, "", "all_mirnas"], [69, 2, 1, "", "all_proteins"], [69, 2, 1, "", "all_refs"], [69, 2, 1, "", "annotate_complex"], [69, 2, 1, "", "browse"], [69, 2, 1, "", "complex_inference"], [69, 2, 1, "", "coverage"], [69, 2, 1, "", "curation_effort"], [69, 2, 1, "", "get_names"], [69, 2, 1, "", "get_reference_set"], [69, 2, 1, "", "get_subset"], [69, 2, 1, "", "get_subset_bool_array"], [69, 2, 1, "", "get_values"], [69, 2, 1, "", "labels"], [69, 2, 1, "", "load"], [69, 2, 1, "", "load_data"], [69, 2, 1, "", "load_proteins"], [69, 2, 1, "", "make_df"], [69, 2, 1, "", "numof_entities"], [69, 2, 1, "", "numof_records"], [69, 2, 1, "", "numof_references"], [69, 2, 1, "", "process"], [69, 2, 1, "", "reload"], [69, 2, 1, "", "select"], [69, 2, 1, "", "set_method"], [69, 2, 1, "", "set_reference_set"], [69, 2, 1, "", "show"], [69, 2, 1, "", "subset_intersection"], [69, 2, 1, "", "to_array"], [69, 2, 1, "", "to_bool_array"], [69, 2, 1, "", "to_set"]], "pypath.core.annot.Phobius": [[70, 2, 1, "", "__init__"], [70, 2, 1, "", "add_complexes_by_inference"], [70, 2, 1, "", "all_complexes"], [70, 2, 1, "", "all_entities"], [70, 2, 1, "", "all_mirnas"], [70, 2, 1, "", "all_proteins"], [70, 2, 1, "", "all_refs"], [70, 2, 1, "", "annotate_complex"], [70, 2, 1, "", "browse"], [70, 2, 1, "", "complex_inference"], [70, 2, 1, "", "coverage"], [70, 2, 1, "", "curation_effort"], [70, 2, 1, "", "get_names"], [70, 2, 1, "", "get_reference_set"], [70, 2, 1, "", "get_subset"], [70, 2, 1, "", "get_subset_bool_array"], [70, 2, 1, "", "get_values"], [70, 2, 1, "", "labels"], [70, 2, 1, "", "load"], [70, 2, 1, "", "load_data"], [70, 2, 1, "", "load_proteins"], [70, 2, 1, "", "make_df"], [70, 2, 1, "", "numof_entities"], [70, 2, 1, "", "numof_records"], [70, 2, 1, "", "numof_references"], [70, 2, 1, "", "process"], [70, 2, 1, "", "reload"], [70, 2, 1, "", "select"], [70, 2, 1, "", "set_method"], [70, 2, 1, "", "set_reference_set"], [70, 2, 1, "", "show"], [70, 2, 1, "", "subset_intersection"], [70, 2, 1, "", "to_array"], [70, 2, 1, "", "to_bool_array"], [70, 2, 1, "", "to_set"]], "pypath.core.annot.Phosphatome": [[71, 2, 1, "", "__init__"], [71, 2, 1, "", "add_complexes_by_inference"], [71, 2, 1, "", "all_complexes"], [71, 2, 1, "", "all_entities"], [71, 2, 1, "", "all_mirnas"], [71, 2, 1, "", "all_proteins"], [71, 2, 1, "", "all_refs"], [71, 2, 1, "", "annotate_complex"], [71, 2, 1, "", "browse"], [71, 2, 1, "", "complex_inference"], [71, 2, 1, "", "coverage"], [71, 2, 1, "", "curation_effort"], [71, 2, 1, "", "get_names"], [71, 2, 1, "", "get_reference_set"], [71, 2, 1, "", "get_subset"], [71, 2, 1, "", "get_subset_bool_array"], [71, 2, 1, "", "get_values"], [71, 2, 1, "", "labels"], [71, 2, 1, "", "load"], [71, 2, 1, "", "load_data"], [71, 2, 1, "", "load_proteins"], [71, 2, 1, "", "make_df"], [71, 2, 1, "", "numof_entities"], [71, 2, 1, "", "numof_records"], [71, 2, 1, "", "numof_references"], [71, 2, 1, "", "process"], [71, 2, 1, "", "reload"], [71, 2, 1, "", "select"], [71, 2, 1, "", "set_method"], [71, 2, 1, "", "set_reference_set"], [71, 2, 1, "", "show"], [71, 2, 1, "", "subset_intersection"], [71, 2, 1, "", "to_array"], [71, 2, 1, "", "to_bool_array"], [71, 2, 1, "", "to_set"]], "pypath.core.annot.Progeny": [[72, 2, 1, "", "__init__"], [72, 2, 1, "", "add_complexes_by_inference"], [72, 2, 1, "", "all_complexes"], [72, 2, 1, "", "all_entities"], [72, 2, 1, "", "all_mirnas"], [72, 2, 1, "", "all_proteins"], [72, 2, 1, "", "all_refs"], [72, 2, 1, "", "annotate_complex"], [72, 2, 1, "", "browse"], [72, 2, 1, "", "complex_inference"], [72, 2, 1, "", "coverage"], [72, 2, 1, "", "curation_effort"], [72, 2, 1, "", "get_names"], [72, 2, 1, "", "get_reference_set"], [72, 2, 1, "", "get_subset"], [72, 2, 1, "", "get_subset_bool_array"], [72, 2, 1, "", "get_values"], [72, 2, 1, "", "labels"], [72, 2, 1, "", "load"], [72, 2, 1, "", "load_data"], [72, 2, 1, "", "load_proteins"], [72, 2, 1, "", "make_df"], [72, 2, 1, "", "numof_entities"], [72, 2, 1, "", "numof_records"], [72, 2, 1, "", "numof_references"], [72, 2, 1, "", "process"], [72, 2, 1, "", "reload"], [72, 2, 1, "", "select"], [72, 2, 1, "", "set_method"], [72, 2, 1, "", "set_reference_set"], [72, 2, 1, "", "show"], [72, 2, 1, "", "subset_intersection"], [72, 2, 1, "", "to_array"], [72, 2, 1, "", "to_bool_array"], [72, 2, 1, "", "to_set"]], "pypath.core.annot.Ramilowski2015": [[73, 2, 1, "", "__init__"], [73, 2, 1, "", "add_complexes_by_inference"], [73, 2, 1, "", "all_complexes"], [73, 2, 1, "", "all_entities"], [73, 2, 1, "", "all_mirnas"], [73, 2, 1, "", "all_proteins"], [73, 2, 1, "", "all_refs"], [73, 2, 1, "", "annotate_complex"], [73, 2, 1, "", "browse"], [73, 2, 1, "", "complex_inference"], [73, 2, 1, "", "coverage"], [73, 2, 1, "", "curation_effort"], [73, 2, 1, "", "get_names"], [73, 2, 1, "", "get_reference_set"], [73, 2, 1, "", "get_subset"], [73, 2, 1, "", "get_subset_bool_array"], [73, 2, 1, "", "get_values"], [73, 2, 1, "", "labels"], [73, 2, 1, "", "load"], [73, 2, 1, "", "load_data"], [73, 2, 1, "", "load_proteins"], [73, 2, 1, "", "make_df"], [73, 2, 1, "", "numof_entities"], [73, 2, 1, "", "numof_records"], [73, 2, 1, "", "numof_references"], [73, 2, 1, "", "process"], [73, 2, 1, "", "reload"], [73, 2, 1, "", "select"], [73, 2, 1, "", "set_method"], [73, 2, 1, "", "set_reference_set"], [73, 2, 1, "", "show"], [73, 2, 1, "", "subset_intersection"], [73, 2, 1, "", "to_array"], [73, 2, 1, "", "to_bool_array"], [73, 2, 1, "", "to_set"]], "pypath.core.annot.Ramilowski2015Location": [[74, 2, 1, "", "__init__"], [74, 2, 1, "", "add_complexes_by_inference"], [74, 2, 1, "", "all_complexes"], [74, 2, 1, "", "all_entities"], [74, 2, 1, "", "all_mirnas"], [74, 2, 1, "", "all_proteins"], [74, 2, 1, "", "all_refs"], [74, 2, 1, "", "annotate_complex"], [74, 2, 1, "", "browse"], [74, 2, 1, "", "complex_inference"], [74, 2, 1, "", "coverage"], [74, 2, 1, "", "curation_effort"], [74, 2, 1, "", "get_names"], [74, 2, 1, "", "get_reference_set"], [74, 2, 1, "", "get_subset"], [74, 2, 1, "", "get_subset_bool_array"], [74, 2, 1, "", "get_values"], [74, 2, 1, "", "labels"], [74, 2, 1, "", "load"], [74, 2, 1, "", "load_data"], [74, 2, 1, "", "load_proteins"], [74, 2, 1, "", "make_df"], [74, 2, 1, "", "numof_entities"], [74, 2, 1, "", "numof_records"], [74, 2, 1, "", "numof_references"], [74, 2, 1, "", "process"], [74, 2, 1, "", "reload"], [74, 2, 1, "", "select"], [74, 2, 1, "", "set_method"], [74, 2, 1, "", "set_reference_set"], [74, 2, 1, "", "show"], [74, 2, 1, "", "subset_intersection"], [74, 2, 1, "", "to_array"], [74, 2, 1, "", "to_bool_array"], [74, 2, 1, "", "to_set"]], "pypath.core.annot.Scconnect": [[75, 2, 1, "", "__init__"], [75, 2, 1, "", "add_complexes_by_inference"], [75, 2, 1, "", "all_complexes"], [75, 2, 1, "", "all_entities"], [75, 2, 1, "", "all_mirnas"], [75, 2, 1, "", "all_proteins"], [75, 2, 1, "", "all_refs"], [75, 2, 1, "", "annotate_complex"], [75, 2, 1, "", "browse"], [75, 2, 1, "", "complex_inference"], [75, 2, 1, "", "coverage"], [75, 2, 1, "", "curation_effort"], [75, 2, 1, "", "get_names"], [75, 2, 1, "", "get_reference_set"], [75, 2, 1, "", "get_subset"], [75, 2, 1, "", "get_subset_bool_array"], [75, 2, 1, "", "get_values"], [75, 2, 1, "", "labels"], [75, 2, 1, "", "load"], [75, 2, 1, "", "load_data"], [75, 2, 1, "", "load_proteins"], [75, 2, 1, "", "make_df"], [75, 2, 1, "", "numof_entities"], [75, 2, 1, "", "numof_records"], [75, 2, 1, "", "numof_references"], [75, 2, 1, "", "process"], [75, 2, 1, "", "reload"], [75, 2, 1, "", "select"], [75, 2, 1, "", "set_method"], [75, 2, 1, "", "set_reference_set"], [75, 2, 1, "", "show"], [75, 2, 1, "", "subset_intersection"], [75, 2, 1, "", "to_array"], [75, 2, 1, "", "to_bool_array"], [75, 2, 1, "", "to_set"]], "pypath.core.annot.ScconnectComplex": [[76, 2, 1, "", "__init__"], [76, 2, 1, "", "add_complexes_by_inference"], [76, 2, 1, "", "all_complexes"], [76, 2, 1, "", "all_entities"], [76, 2, 1, "", "all_mirnas"], [76, 2, 1, "", "all_proteins"], [76, 2, 1, "", "all_refs"], [76, 2, 1, "", "annotate_complex"], [76, 2, 1, "", "browse"], [76, 2, 1, "", "complex_inference"], [76, 2, 1, "", "coverage"], [76, 2, 1, "", "curation_effort"], [76, 2, 1, "", "get_names"], [76, 2, 1, "", "get_reference_set"], [76, 2, 1, "", "get_subset"], [76, 2, 1, "", "get_subset_bool_array"], [76, 2, 1, "", "get_values"], [76, 2, 1, "", "labels"], [76, 2, 1, "", "load"], [76, 2, 1, "", "load_data"], [76, 2, 1, "", "load_proteins"], [76, 2, 1, "", "make_df"], [76, 2, 1, "", "numof_entities"], [76, 2, 1, "", "numof_records"], [76, 2, 1, "", "numof_references"], [76, 2, 1, "", "process"], [76, 2, 1, "", "reload"], [76, 2, 1, "", "select"], [76, 2, 1, "", "set_method"], [76, 2, 1, "", "set_reference_set"], [76, 2, 1, "", "show"], [76, 2, 1, "", "subset_intersection"], [76, 2, 1, "", "to_array"], [76, 2, 1, "", "to_bool_array"], [76, 2, 1, "", "to_set"]], "pypath.core.annot.SignalinkFunctions": [[77, 2, 1, "", "__init__"], [77, 2, 1, "", "add_complexes_by_inference"], [77, 2, 1, "", "all_complexes"], [77, 2, 1, "", "all_entities"], [77, 2, 1, "", "all_mirnas"], [77, 2, 1, "", "all_proteins"], [77, 2, 1, "", "all_refs"], [77, 2, 1, "", "annotate_complex"], [77, 2, 1, "", "browse"], [77, 2, 1, "", "complex_inference"], [77, 2, 1, "", "coverage"], [77, 2, 1, "", "curation_effort"], [77, 2, 1, "", "get_names"], [77, 2, 1, "", "get_reference_set"], [77, 2, 1, "", "get_subset"], [77, 2, 1, "", "get_subset_bool_array"], [77, 2, 1, "", "get_values"], [77, 2, 1, "", "labels"], [77, 2, 1, "", "load"], [77, 2, 1, "", "load_data"], [77, 2, 1, "", "load_proteins"], [77, 2, 1, "", "make_df"], [77, 2, 1, "", "numof_entities"], [77, 2, 1, "", "numof_records"], [77, 2, 1, "", "numof_references"], [77, 2, 1, "", "process"], [77, 2, 1, "", "reload"], [77, 2, 1, "", "select"], [77, 2, 1, "", "set_method"], [77, 2, 1, "", "set_reference_set"], [77, 2, 1, "", "show"], [77, 2, 1, "", "subset_intersection"], [77, 2, 1, "", "to_array"], [77, 2, 1, "", "to_bool_array"], [77, 2, 1, "", "to_set"]], "pypath.core.annot.SignalinkPathways": [[78, 2, 1, "", "__init__"], [78, 2, 1, "", "add_complexes_by_inference"], [78, 2, 1, "", "all_complexes"], [78, 2, 1, "", "all_entities"], [78, 2, 1, "", "all_mirnas"], [78, 2, 1, "", "all_proteins"], [78, 2, 1, "", "all_refs"], [78, 2, 1, "", "annotate_complex"], [78, 2, 1, "", "browse"], [78, 2, 1, "", "complex_inference"], [78, 2, 1, "", "coverage"], [78, 2, 1, "", "curation_effort"], [78, 2, 1, "", "get_names"], [78, 2, 1, "", "get_reference_set"], [78, 2, 1, "", "get_subset"], [78, 2, 1, "", "get_subset_bool_array"], [78, 2, 1, "", "get_values"], [78, 2, 1, "", "labels"], [78, 2, 1, "", "load"], [78, 2, 1, "", "load_data"], [78, 2, 1, "", "load_proteins"], [78, 2, 1, "", "make_df"], [78, 2, 1, "", "numof_entities"], [78, 2, 1, "", "numof_records"], [78, 2, 1, "", "numof_references"], [78, 2, 1, "", "process"], [78, 2, 1, "", "reload"], [78, 2, 1, "", "select"], [78, 2, 1, "", "set_method"], [78, 2, 1, "", "set_reference_set"], [78, 2, 1, "", "show"], [78, 2, 1, "", "subset_intersection"], [78, 2, 1, "", "to_array"], [78, 2, 1, "", "to_bool_array"], [78, 2, 1, "", "to_set"]], "pypath.core.annot.SignorPathways": [[79, 2, 1, "", "__init__"], [79, 2, 1, "", "add_complexes_by_inference"], [79, 2, 1, "", "all_complexes"], [79, 2, 1, "", "all_entities"], [79, 2, 1, "", "all_mirnas"], [79, 2, 1, "", "all_proteins"], [79, 2, 1, "", "all_refs"], [79, 2, 1, "", "annotate_complex"], [79, 2, 1, "", "browse"], [79, 2, 1, "", "complex_inference"], [79, 2, 1, "", "coverage"], [79, 2, 1, "", "curation_effort"], [79, 2, 1, "", "get_names"], [79, 2, 1, "", "get_reference_set"], [79, 2, 1, "", "get_subset"], [79, 2, 1, "", "get_subset_bool_array"], [79, 2, 1, "", "get_values"], [79, 2, 1, "", "labels"], [79, 2, 1, "", "load"], [79, 2, 1, "", "load_data"], [79, 2, 1, "", "load_proteins"], [79, 2, 1, "", "make_df"], [79, 2, 1, "", "numof_entities"], [79, 2, 1, "", "numof_records"], [79, 2, 1, "", "numof_references"], [79, 2, 1, "", "process"], [79, 2, 1, "", "reload"], [79, 2, 1, "", "select"], [79, 2, 1, "", "set_method"], [79, 2, 1, "", "set_reference_set"], [79, 2, 1, "", "show"], [79, 2, 1, "", "subset_intersection"], [79, 2, 1, "", "to_array"], [79, 2, 1, "", "to_bool_array"], [79, 2, 1, "", "to_set"]], "pypath.core.annot.Surfaceome": [[80, 2, 1, "", "__init__"], [80, 2, 1, "", "add_complexes_by_inference"], [80, 2, 1, "", "all_complexes"], [80, 2, 1, "", "all_entities"], [80, 2, 1, "", "all_mirnas"], [80, 2, 1, "", "all_proteins"], [80, 2, 1, "", "all_refs"], [80, 2, 1, "", "annotate_complex"], [80, 2, 1, "", "browse"], [80, 2, 1, "", "complex_inference"], [80, 2, 1, "", "coverage"], [80, 2, 1, "", "curation_effort"], [80, 2, 1, "", "get_names"], [80, 2, 1, "", "get_reference_set"], [80, 2, 1, "", "get_subset"], [80, 2, 1, "", "get_subset_bool_array"], [80, 2, 1, "", "get_values"], [80, 2, 1, "", "labels"], [80, 2, 1, "", "load"], [80, 2, 1, "", "load_data"], [80, 2, 1, "", "load_proteins"], [80, 2, 1, "", "make_df"], [80, 2, 1, "", "numof_entities"], [80, 2, 1, "", "numof_records"], [80, 2, 1, "", "numof_references"], [80, 2, 1, "", "process"], [80, 2, 1, "", "reload"], [80, 2, 1, "", "select"], [80, 2, 1, "", "set_method"], [80, 2, 1, "", "set_reference_set"], [80, 2, 1, "", "show"], [80, 2, 1, "", "subset_intersection"], [80, 2, 1, "", "to_array"], [80, 2, 1, "", "to_bool_array"], [80, 2, 1, "", "to_set"]], "pypath.core.annot.Talklr": [[81, 2, 1, "", "__init__"], [81, 2, 1, "", "add_complexes_by_inference"], [81, 2, 1, "", "all_complexes"], [81, 2, 1, "", "all_entities"], [81, 2, 1, "", "all_mirnas"], [81, 2, 1, "", "all_proteins"], [81, 2, 1, "", "all_refs"], [81, 2, 1, "", "annotate_complex"], [81, 2, 1, "", "browse"], [81, 2, 1, "", "complex_inference"], [81, 2, 1, "", "coverage"], [81, 2, 1, "", "curation_effort"], [81, 2, 1, "", "get_names"], [81, 2, 1, "", "get_reference_set"], [81, 2, 1, "", "get_subset"], [81, 2, 1, "", "get_subset_bool_array"], [81, 2, 1, "", "get_values"], [81, 2, 1, "", "labels"], [81, 2, 1, "", "load"], [81, 2, 1, "", "load_data"], [81, 2, 1, "", "load_proteins"], [81, 2, 1, "", "make_df"], [81, 2, 1, "", "numof_entities"], [81, 2, 1, "", "numof_records"], [81, 2, 1, "", "numof_references"], [81, 2, 1, "", "process"], [81, 2, 1, "", "reload"], [81, 2, 1, "", "select"], [81, 2, 1, "", "set_method"], [81, 2, 1, "", "set_reference_set"], [81, 2, 1, "", "show"], [81, 2, 1, "", "subset_intersection"], [81, 2, 1, "", "to_array"], [81, 2, 1, "", "to_bool_array"], [81, 2, 1, "", "to_set"]], "pypath.core.annot.Tcdb": [[82, 2, 1, "", "__init__"], [82, 2, 1, "", "add_complexes_by_inference"], [82, 2, 1, "", "all_complexes"], [82, 2, 1, "", "all_entities"], [82, 2, 1, "", "all_mirnas"], [82, 2, 1, "", "all_proteins"], [82, 2, 1, "", "all_refs"], [82, 2, 1, "", "annotate_complex"], [82, 2, 1, "", "browse"], [82, 2, 1, "", "complex_inference"], [82, 2, 1, "", "coverage"], [82, 2, 1, "", "curation_effort"], [82, 2, 1, "", "get_names"], [82, 2, 1, "", "get_reference_set"], [82, 2, 1, "", "get_subset"], [82, 2, 1, "", "get_subset_bool_array"], [82, 2, 1, "", "get_values"], [82, 2, 1, "", "labels"], [82, 2, 1, "", "load"], [82, 2, 1, "", "load_data"], [82, 2, 1, "", "load_proteins"], [82, 2, 1, "", "make_df"], [82, 2, 1, "", "numof_entities"], [82, 2, 1, "", "numof_records"], [82, 2, 1, "", "numof_references"], [82, 2, 1, "", "process"], [82, 2, 1, "", "reload"], [82, 2, 1, "", "select"], [82, 2, 1, "", "set_method"], [82, 2, 1, "", "set_reference_set"], [82, 2, 1, "", "show"], [82, 2, 1, "", "subset_intersection"], [82, 2, 1, "", "to_array"], [82, 2, 1, "", "to_bool_array"], [82, 2, 1, "", "to_set"]], "pypath.core.annot.Tfcensus": [[83, 2, 1, "", "__init__"], [83, 2, 1, "", "add_complexes_by_inference"], [83, 2, 1, "", "all_complexes"], [83, 2, 1, "", "all_entities"], [83, 2, 1, "", "all_mirnas"], [83, 2, 1, "", "all_proteins"], [83, 2, 1, "", "all_refs"], [83, 2, 1, "", "annotate_complex"], [83, 2, 1, "", "browse"], [83, 2, 1, "", "complex_inference"], [83, 2, 1, "", "coverage"], [83, 2, 1, "", "curation_effort"], [83, 2, 1, "", "get_names"], [83, 2, 1, "", "get_reference_set"], [83, 2, 1, "", "get_subset"], [83, 2, 1, "", "get_subset_bool_array"], [83, 2, 1, "", "get_values"], [83, 2, 1, "", "labels"], [83, 2, 1, "", "load"], [83, 2, 1, "", "load_data"], [83, 2, 1, "", "load_proteins"], [83, 2, 1, "", "make_df"], [83, 2, 1, "", "numof_entities"], [83, 2, 1, "", "numof_records"], [83, 2, 1, "", "numof_references"], [83, 2, 1, "", "process"], [83, 2, 1, "", "reload"], [83, 2, 1, "", "select"], [83, 2, 1, "", "set_method"], [83, 2, 1, "", "set_reference_set"], [83, 2, 1, "", "show"], [83, 2, 1, "", "subset_intersection"], [83, 2, 1, "", "to_array"], [83, 2, 1, "", "to_bool_array"], [83, 2, 1, "", "to_set"]], "pypath.core.annot.Topdb": [[84, 2, 1, "", "__init__"], [84, 2, 1, "", "add_complexes_by_inference"], [84, 2, 1, "", "all_complexes"], [84, 2, 1, "", "all_entities"], [84, 2, 1, "", "all_mirnas"], [84, 2, 1, "", "all_proteins"], [84, 2, 1, "", "all_refs"], [84, 2, 1, "", "annotate_complex"], [84, 2, 1, "", "browse"], [84, 2, 1, "", "complex_inference"], [84, 2, 1, "", "coverage"], [84, 2, 1, "", "curation_effort"], [84, 2, 1, "", "get_names"], [84, 2, 1, "", "get_reference_set"], [84, 2, 1, "", "get_subset"], [84, 2, 1, "", "get_subset_bool_array"], [84, 2, 1, "", "get_values"], [84, 2, 1, "", "labels"], [84, 2, 1, "", "load"], [84, 2, 1, "", "load_data"], [84, 2, 1, "", "load_proteins"], [84, 2, 1, "", "make_df"], [84, 2, 1, "", "numof_entities"], [84, 2, 1, "", "numof_records"], [84, 2, 1, "", "numof_references"], [84, 2, 1, "", "process"], [84, 2, 1, "", "reload"], [84, 2, 1, "", "select"], [84, 2, 1, "", "set_method"], [84, 2, 1, "", "set_reference_set"], [84, 2, 1, "", "show"], [84, 2, 1, "", "subset_intersection"], [84, 2, 1, "", "to_array"], [84, 2, 1, "", "to_bool_array"], [84, 2, 1, "", "to_set"]], "pypath.core.annot.UniprotFamilies": [[85, 2, 1, "", "__init__"], [85, 2, 1, "", "add_complexes_by_inference"], [85, 2, 1, "", "all_complexes"], [85, 2, 1, "", "all_entities"], [85, 2, 1, "", "all_mirnas"], [85, 2, 1, "", "all_proteins"], [85, 2, 1, "", "all_refs"], [85, 2, 1, "", "annotate_complex"], [85, 2, 1, "", "browse"], [85, 2, 1, "", "complex_inference"], [85, 2, 1, "", "coverage"], [85, 2, 1, "", "curation_effort"], [85, 2, 1, "", "get_names"], [85, 2, 1, "", "get_reference_set"], [85, 2, 1, "", "get_subset"], [85, 2, 1, "", "get_subset_bool_array"], [85, 2, 1, "", "get_values"], [85, 2, 1, "", "labels"], [85, 2, 1, "", "load"], [85, 2, 1, "", "load_data"], [85, 2, 1, "", "load_proteins"], [85, 2, 1, "", "make_df"], [85, 2, 1, "", "numof_entities"], [85, 2, 1, "", "numof_records"], [85, 2, 1, "", "numof_references"], [85, 2, 1, "", "process"], [85, 2, 1, "", "reload"], [85, 2, 1, "", "select"], [85, 2, 1, "", "set_method"], [85, 2, 1, "", "set_reference_set"], [85, 2, 1, "", "show"], [85, 2, 1, "", "subset_intersection"], [85, 2, 1, "", "to_array"], [85, 2, 1, "", "to_bool_array"], [85, 2, 1, "", "to_set"]], "pypath.core.annot.UniprotKeywords": [[86, 2, 1, "", "__init__"], [86, 2, 1, "", "add_complexes_by_inference"], [86, 2, 1, "", "all_complexes"], [86, 2, 1, "", "all_entities"], [86, 2, 1, "", "all_mirnas"], [86, 2, 1, "", "all_proteins"], [86, 2, 1, "", "all_refs"], [86, 2, 1, "", "annotate_complex"], [86, 2, 1, "", "browse"], [86, 2, 1, "", "complex_inference"], [86, 2, 1, "", "coverage"], [86, 2, 1, "", "curation_effort"], [86, 2, 1, "", "get_names"], [86, 2, 1, "", "get_reference_set"], [86, 2, 1, "", "get_subset"], [86, 2, 1, "", "get_subset_bool_array"], [86, 2, 1, "", "get_values"], [86, 2, 1, "", "labels"], [86, 2, 1, "", "load"], [86, 2, 1, "", "load_data"], [86, 2, 1, "", "load_proteins"], [86, 2, 1, "", "make_df"], [86, 2, 1, "", "numof_entities"], [86, 2, 1, "", "numof_records"], [86, 2, 1, "", "numof_references"], [86, 2, 1, "", "process"], [86, 2, 1, "", "reload"], [86, 2, 1, "", "select"], [86, 2, 1, "", "set_method"], [86, 2, 1, "", "set_reference_set"], [86, 2, 1, "", "show"], [86, 2, 1, "", "subset_intersection"], [86, 2, 1, "", "to_array"], [86, 2, 1, "", "to_bool_array"], [86, 2, 1, "", "to_set"]], "pypath.core.annot.UniprotLocations": [[87, 2, 1, "", "__init__"], [87, 2, 1, "", "add_complexes_by_inference"], [87, 2, 1, "", "all_complexes"], [87, 2, 1, "", "all_entities"], [87, 2, 1, "", "all_mirnas"], [87, 2, 1, "", "all_proteins"], [87, 2, 1, "", "all_refs"], [87, 2, 1, "", "annotate_complex"], [87, 2, 1, "", "browse"], [87, 2, 1, "", "complex_inference"], [87, 2, 1, "", "coverage"], [87, 2, 1, "", "curation_effort"], [87, 2, 1, "", "get_names"], [87, 2, 1, "", "get_reference_set"], [87, 2, 1, "", "get_subset"], [87, 2, 1, "", "get_subset_bool_array"], [87, 2, 1, "", "get_values"], [87, 2, 1, "", "labels"], [87, 2, 1, "", "load"], [87, 2, 1, "", "load_data"], [87, 2, 1, "", "load_proteins"], [87, 2, 1, "", "make_df"], [87, 2, 1, "", "numof_entities"], [87, 2, 1, "", "numof_records"], [87, 2, 1, "", "numof_references"], [87, 2, 1, "", "process"], [87, 2, 1, "", "reload"], [87, 2, 1, "", "select"], [87, 2, 1, "", "set_method"], [87, 2, 1, "", "set_reference_set"], [87, 2, 1, "", "show"], [87, 2, 1, "", "subset_intersection"], [87, 2, 1, "", "to_array"], [87, 2, 1, "", "to_bool_array"], [87, 2, 1, "", "to_set"]], "pypath.core.annot.UniprotTissues": [[88, 2, 1, "", "__init__"], [88, 2, 1, "", "add_complexes_by_inference"], [88, 2, 1, "", "all_complexes"], [88, 2, 1, "", "all_entities"], [88, 2, 1, "", "all_mirnas"], [88, 2, 1, "", "all_proteins"], [88, 2, 1, "", "all_refs"], [88, 2, 1, "", "annotate_complex"], [88, 2, 1, "", "browse"], [88, 2, 1, "", "complex_inference"], [88, 2, 1, "", "coverage"], [88, 2, 1, "", "curation_effort"], [88, 2, 1, "", "get_names"], [88, 2, 1, "", "get_reference_set"], [88, 2, 1, "", "get_subset"], [88, 2, 1, "", "get_subset_bool_array"], [88, 2, 1, "", "get_values"], [88, 2, 1, "", "labels"], [88, 2, 1, "", "load"], [88, 2, 1, "", "load_data"], [88, 2, 1, "", "load_proteins"], [88, 2, 1, "", "make_df"], [88, 2, 1, "", "numof_entities"], [88, 2, 1, "", "numof_records"], [88, 2, 1, "", "numof_references"], [88, 2, 1, "", "process"], [88, 2, 1, "", "reload"], [88, 2, 1, "", "select"], [88, 2, 1, "", "set_method"], [88, 2, 1, "", "set_reference_set"], [88, 2, 1, "", "show"], [88, 2, 1, "", "subset_intersection"], [88, 2, 1, "", "to_array"], [88, 2, 1, "", "to_bool_array"], [88, 2, 1, "", "to_set"]], "pypath.core.annot.UniprotTopologies": [[89, 2, 1, "", "__init__"], [89, 2, 1, "", "add_complexes_by_inference"], [89, 2, 1, "", "all_complexes"], [89, 2, 1, "", "all_entities"], [89, 2, 1, "", "all_mirnas"], [89, 2, 1, "", "all_proteins"], [89, 2, 1, "", "all_refs"], [89, 2, 1, "", "annotate_complex"], [89, 2, 1, "", "browse"], [89, 2, 1, "", "complex_inference"], [89, 2, 1, "", "coverage"], [89, 2, 1, "", "curation_effort"], [89, 2, 1, "", "get_names"], [89, 2, 1, "", "get_reference_set"], [89, 2, 1, "", "get_subset"], [89, 2, 1, "", "get_subset_bool_array"], [89, 2, 1, "", "get_values"], [89, 2, 1, "", "labels"], [89, 2, 1, "", "load"], [89, 2, 1, "", "load_data"], [89, 2, 1, "", "load_proteins"], [89, 2, 1, "", "make_df"], [89, 2, 1, "", "numof_entities"], [89, 2, 1, "", "numof_records"], [89, 2, 1, "", "numof_references"], [89, 2, 1, "", "process"], [89, 2, 1, "", "reload"], [89, 2, 1, "", "select"], [89, 2, 1, "", "set_method"], [89, 2, 1, "", "set_reference_set"], [89, 2, 1, "", "show"], [89, 2, 1, "", "subset_intersection"], [89, 2, 1, "", "to_array"], [89, 2, 1, "", "to_bool_array"], [89, 2, 1, "", "to_set"]], "pypath.core.annot.Vesiclepedia": [[90, 2, 1, "", "__init__"], [90, 2, 1, "", "add_complexes_by_inference"], [90, 2, 1, "", "all_complexes"], [90, 2, 1, "", "all_entities"], [90, 2, 1, "", "all_mirnas"], [90, 2, 1, "", "all_proteins"], [90, 2, 1, "", "all_refs"], [90, 2, 1, "", "annotate_complex"], [90, 2, 1, "", "browse"], [90, 2, 1, "", "complex_inference"], [90, 2, 1, "", "coverage"], [90, 2, 1, "", "curation_effort"], [90, 2, 1, "", "get_names"], [90, 2, 1, "", "get_reference_set"], [90, 2, 1, "", "get_subset"], [90, 2, 1, "", "get_subset_bool_array"], [90, 2, 1, "", "get_values"], [90, 2, 1, "", "labels"], [90, 2, 1, "", "load"], [90, 2, 1, "", "load_data"], [90, 2, 1, "", "load_proteins"], [90, 2, 1, "", "make_df"], [90, 2, 1, "", "numof_entities"], [90, 2, 1, "", "numof_records"], [90, 2, 1, "", "numof_references"], [90, 2, 1, "", "process"], [90, 2, 1, "", "reload"], [90, 2, 1, "", "select"], [90, 2, 1, "", "set_method"], [90, 2, 1, "", "set_reference_set"], [90, 2, 1, "", "show"], [90, 2, 1, "", "subset_intersection"], [90, 2, 1, "", "to_array"], [90, 2, 1, "", "to_bool_array"], [90, 2, 1, "", "to_set"]], "pypath.core.annot.Wang": [[91, 2, 1, "", "__init__"], [91, 2, 1, "", "add_complexes_by_inference"], [91, 2, 1, "", "all_complexes"], [91, 2, 1, "", "all_entities"], [91, 2, 1, "", "all_mirnas"], [91, 2, 1, "", "all_proteins"], [91, 2, 1, "", "all_refs"], [91, 2, 1, "", "annotate_complex"], [91, 2, 1, "", "browse"], [91, 2, 1, "", "complex_inference"], [91, 2, 1, "", "coverage"], [91, 2, 1, "", "curation_effort"], [91, 2, 1, "", "get_names"], [91, 2, 1, "", "get_reference_set"], [91, 2, 1, "", "get_subset"], [91, 2, 1, "", "get_subset_bool_array"], [91, 2, 1, "", "get_values"], [91, 2, 1, "", "labels"], [91, 2, 1, "", "load"], [91, 2, 1, "", "load_data"], [91, 2, 1, "", "load_proteins"], [91, 2, 1, "", "make_df"], [91, 2, 1, "", "numof_entities"], [91, 2, 1, "", "numof_records"], [91, 2, 1, "", "numof_references"], [91, 2, 1, "", "process"], [91, 2, 1, "", "reload"], [91, 2, 1, "", "select"], [91, 2, 1, "", "set_method"], [91, 2, 1, "", "set_reference_set"], [91, 2, 1, "", "show"], [91, 2, 1, "", "subset_intersection"], [91, 2, 1, "", "to_array"], [91, 2, 1, "", "to_bool_array"], [91, 2, 1, "", "to_set"]], "pypath.core.annot.Zhong2015": [[92, 2, 1, "", "__init__"], [92, 2, 1, "", "add_complexes_by_inference"], [92, 2, 1, "", "all_complexes"], [92, 2, 1, "", "all_entities"], [92, 2, 1, "", "all_mirnas"], [92, 2, 1, "", "all_proteins"], [92, 2, 1, "", "all_refs"], [92, 2, 1, "", "annotate_complex"], [92, 2, 1, "", "browse"], [92, 2, 1, "", "complex_inference"], [92, 2, 1, "", "coverage"], [92, 2, 1, "", "curation_effort"], [92, 2, 1, "", "get_names"], [92, 2, 1, "", "get_reference_set"], [92, 2, 1, "", "get_subset"], [92, 2, 1, "", "get_subset_bool_array"], [92, 2, 1, "", "get_values"], [92, 2, 1, "", "labels"], [92, 2, 1, "", "load"], [92, 2, 1, "", "load_data"], [92, 2, 1, "", "load_proteins"], [92, 2, 1, "", "make_df"], [92, 2, 1, "", "numof_entities"], [92, 2, 1, "", "numof_records"], [92, 2, 1, "", "numof_references"], [92, 2, 1, "", "process"], [92, 2, 1, "", "reload"], [92, 2, 1, "", "select"], [92, 2, 1, "", "set_method"], [92, 2, 1, "", "set_reference_set"], [92, 2, 1, "", "show"], [92, 2, 1, "", "subset_intersection"], [92, 2, 1, "", "to_array"], [92, 2, 1, "", "to_bool_array"], [92, 2, 1, "", "to_set"]], "pypath.core.attrs": [[96, 1, 1, "", "AttributeHandler"]], "pypath.core.attrs.AttributeHandler": [[96, 2, 1, "", "__init__"], [96, 2, 1, "", "serialize"], [96, 2, 1, "", "update_attrs"]], "pypath.core.common": [[98, 3, 1, "", "filter_network_df"]], "pypath.core.complex": [[100, 1, 1, "", "AbstractComplexResource"], [101, 1, 1, "", "CellPhoneDB"], [102, 1, 1, "", "Cellchatdb"], [103, 1, 1, "", "Cellinker"], [104, 1, 1, "", "Compleat"], [105, 1, 1, "", "ComplexAggregator"], [106, 1, 1, "", "ComplexPortal"], [107, 1, 1, "", "Corum"], [108, 1, 1, "", "GuideToPharmacology"], [109, 1, 1, "", "Havugimana"], [110, 1, 1, "", "Hpmr"], [111, 1, 1, "", "Humap"], [112, 1, 1, "", "Humap2"], [113, 1, 1, "", "Icellnet"], [114, 1, 1, "", "Kegg"], [115, 1, 1, "", "Pdb"], [116, 1, 1, "", "Signor"], [117, 1, 1, "", "Spike"], [118, 3, 1, "", "all_complexes"], [119, 3, 1, "", "get_db"], [120, 3, 1, "", "init_db"]], "pypath.core.complex.AbstractComplexResource": [[100, 2, 1, "", "__init__"], [100, 2, 1, "", "load_data"], [100, 2, 1, "", "process"], [100, 2, 1, "", "set_method"]], "pypath.core.complex.CellPhoneDB": [[101, 2, 1, "", "__init__"], [101, 2, 1, "", "load_data"], [101, 2, 1, "", "process"], [101, 2, 1, "", "set_method"]], "pypath.core.complex.Cellchatdb": [[102, 2, 1, "", "__init__"], [102, 2, 1, "", "load_data"], [102, 2, 1, "", "process"], [102, 2, 1, "", "set_method"]], "pypath.core.complex.Cellinker": [[103, 2, 1, "", "__init__"], [103, 2, 1, "", "load_data"], [103, 2, 1, "", "process"], [103, 2, 1, "", "set_method"]], "pypath.core.complex.Compleat": [[104, 2, 1, "", "__init__"], [104, 2, 1, "", "load_data"], [104, 2, 1, "", "process"], [104, 2, 1, "", "set_method"]], "pypath.core.complex.ComplexAggregator": [[105, 2, 1, "", "__init__"], [105, 2, 1, "", "load_data"], [105, 2, 1, "", "process"], [105, 2, 1, "", "reload"], [105, 2, 1, "", "set_method"]], "pypath.core.complex.ComplexPortal": [[106, 2, 1, "", "__init__"], [106, 2, 1, "", "load_data"], [106, 2, 1, "", "process"], [106, 2, 1, "", "set_method"]], "pypath.core.complex.Corum": [[107, 2, 1, "", "__init__"], [107, 2, 1, "", "load_data"], [107, 2, 1, "", "process"], [107, 2, 1, "", "set_method"]], "pypath.core.complex.GuideToPharmacology": [[108, 2, 1, "", "__init__"], [108, 2, 1, "", "load_data"], [108, 2, 1, "", "process"], [108, 2, 1, "", "set_method"]], "pypath.core.complex.Havugimana": [[109, 2, 1, "", "__init__"], [109, 2, 1, "", "load_data"], [109, 2, 1, "", "process"], [109, 2, 1, "", "set_method"]], "pypath.core.complex.Hpmr": [[110, 2, 1, "", "__init__"], [110, 2, 1, "", "load_data"], [110, 2, 1, "", "process"], [110, 2, 1, "", "set_method"]], "pypath.core.complex.Humap": [[111, 2, 1, "", "__init__"], [111, 2, 1, "", "load_data"], [111, 2, 1, "", "process"], [111, 2, 1, "", "set_method"]], "pypath.core.complex.Humap2": [[112, 2, 1, "", "__init__"], [112, 2, 1, "", "load_data"], [112, 2, 1, "", "process"], [112, 2, 1, "", "set_method"]], "pypath.core.complex.Icellnet": [[113, 2, 1, "", "__init__"], [113, 2, 1, "", "load_data"], [113, 2, 1, "", "process"], [113, 2, 1, "", "set_method"]], "pypath.core.complex.Kegg": [[114, 2, 1, "", "__init__"], [114, 2, 1, "", "load_data"], [114, 2, 1, "", "process"], [114, 2, 1, "", "set_method"]], "pypath.core.complex.Pdb": [[115, 2, 1, "", "__init__"], [115, 2, 1, "", "load_data"], [115, 2, 1, "", "process"], [115, 2, 1, "", "set_method"]], "pypath.core.complex.Signor": [[116, 2, 1, "", "__init__"], [116, 2, 1, "", "load_data"], [116, 2, 1, "", "process"], [116, 2, 1, "", "set_method"]], "pypath.core.complex.Spike": [[117, 2, 1, "", "__init__"], [117, 2, 1, "", "load_data"], [117, 2, 1, "", "process"], [117, 2, 1, "", "set_method"]], "pypath.core.entity": [[122, 1, 1, "", "Entity"], [123, 1, 1, "", "EntityKey"], [124, 1, 1, "", "EntityList"]], "pypath.core.entity.Entity": [[122, 2, 1, "", "__init__"], [122, 2, 1, "", "count_entity_type"], [122, 2, 1, "", "filter_entity_type"], [122, 2, 1, "", "serialize"], [122, 2, 1, "", "update_attrs"]], "pypath.core.entity.EntityKey": [[123, 2, 1, "", "__init__"], [123, 2, 1, "", "count"], [123, 4, 1, "", "entity_type"], [123, 4, 1, "", "id_type"], [123, 4, 1, "", "identifier"], [123, 2, 1, "", "index"], [123, 4, 1, "", "taxon"]], "pypath.core.entity.EntityList": [[124, 2, 1, "", "__init__"]], "pypath.core.enz_sub": [[126, 1, 1, "", "EnzymeSubstrateAggregator"], [127, 1, 1, "", "EnzymeSubstrateHomologyProcessor"], [128, 1, 1, "", "EnzymeSubstrateProcessor"], [129, 3, 1, "", "get_db"], [130, 3, 1, "", "init_db"]], "pypath.core.enz_sub.EnzymeSubstrateAggregator": [[126, 2, 1, "", "__init__"], [126, 2, 1, "", "assign_to_network"], [126, 2, 1, "", "build_list"], [126, 2, 1, "", "unique"]], "pypath.core.enz_sub.EnzymeSubstrateHomologyProcessor": [[127, 2, 1, "", "__init__"], [127, 2, 1, "", "asdict"], [127, 2, 1, "", "df"], [127, 2, 1, "", "load_data"], [127, 2, 1, "", "load_homologene"], [127, 2, 1, "", "ptm_orthology"], [127, 2, 1, "", "set_inputargs"], [127, 2, 1, "", "set_method"], [127, 2, 1, "", "translate"], [127, 2, 1, "", "translate_df"], [127, 2, 1, "", "translate_site"]], "pypath.core.enz_sub.EnzymeSubstrateProcessor": [[128, 2, 1, "", "__init__"], [128, 2, 1, "", "load_data"], [128, 2, 1, "", "set_inputargs"], [128, 2, 1, "", "set_method"]], "pypath.core.evidence": [[132, 1, 1, "", "Evidence"], [133, 1, 1, "", "Evidences"]], "pypath.core.evidence.Evidence": [[132, 2, 1, "", "__init__"], [132, 2, 1, "", "has_interaction_type"], [132, 2, 1, "", "merge"], [132, 2, 1, "", "reload"], [132, 2, 1, "", "serialize"], [132, 2, 1, "", "update_attrs"]], "pypath.core.evidence.Evidences": [[133, 2, 1, "", "__init__"], [133, 2, 1, "", "has_interaction_type"], [133, 2, 1, "", "items"], [133, 2, 1, "", "keys"], [133, 2, 1, "", "reload"], [133, 2, 1, "", "serialize_attrs"], [133, 5, 1, "", "simple_dict"]], "pypath.core.interaction": [[135, 1, 1, "", "Interaction"], [136, 1, 1, "", "InteractionDataFrameRecord"], [137, 1, 1, "", "InteractionKey"]], "pypath.core.interaction.Interaction": [[135, 2, 1, "", "__init__"], [135, 2, 1, "", "add_evidence"], [135, 2, 1, "", "add_sign"], [135, 2, 1, "", "complex_identifiers_by_data_model"], [135, 2, 1, "", "complex_identifiers_by_interaction_type"], [135, 2, 1, "", "complex_identifiers_by_interaction_type_and_data_model"], [135, 2, 1, "", "complex_identifiers_by_interaction_type_and_data_model_and_resource"], [135, 2, 1, "", "complex_identifiers_by_reference"], [135, 2, 1, "", "complex_identifiers_by_resource"], [135, 2, 1, "", "complex_labels_by_data_model"], [135, 2, 1, "", "complex_labels_by_interaction_type"], [135, 2, 1, "", "complex_labels_by_interaction_type_and_data_model"], [135, 2, 1, "", "complex_labels_by_interaction_type_and_data_model_and_resource"], [135, 2, 1, "", "complex_labels_by_reference"], [135, 2, 1, "", "complex_labels_by_resource"], [135, 2, 1, "", "complexes_by_data_model"], [135, 2, 1, "", "complexes_by_interaction_type"], [135, 2, 1, "", "complexes_by_interaction_type_and_data_model"], [135, 2, 1, "", "complexes_by_interaction_type_and_data_model_and_resource"], [135, 2, 1, "", "complexes_by_reference"], [135, 2, 1, "", "complexes_by_resource"], [135, 2, 1, "", "consensus"], [135, 2, 1, "", "consensus_edges"], [135, 2, 1, "", "count_complex_identifiers"], [135, 2, 1, "", "count_complex_labels"], [135, 2, 1, "", "count_complexes"], [135, 4, 1, "", "count_data_models"], [135, 4, 1, "", "count_degrees_directed"], [135, 4, 1, "", "count_degrees_directed_in"], [135, 4, 1, "", "count_degrees_directed_out"], [135, 4, 1, "", "count_degrees_negative"], [135, 4, 1, "", "count_degrees_negative_in"], [135, 4, 1, "", "count_degrees_negative_out"], [135, 4, 1, "", "count_degrees_non_directed"], [135, 4, 1, "", "count_degrees_positive"], [135, 4, 1, "", "count_degrees_positive_in"], [135, 4, 1, "", "count_degrees_positive_out"], [135, 4, 1, "", "count_degrees_signed"], [135, 4, 1, "", "count_degrees_signed_in"], [135, 4, 1, "", "count_degrees_signed_out"], [135, 4, 1, "", "count_degrees_undirected"], [135, 2, 1, "", "count_entities"], [135, 2, 1, "", "count_identifiers"], [135, 4, 1, "", "count_interaction_types"], [135, 2, 1, "", "count_interactions"], [135, 2, 1, "", "count_interactions_0"], [135, 2, 1, "", "count_interactions_directed"], [135, 2, 1, "", "count_interactions_mutual"], [135, 2, 1, "", "count_interactions_negative"], [135, 2, 1, "", "count_interactions_non_directed"], [135, 2, 1, "", "count_interactions_positive"], [135, 2, 1, "", "count_interactions_signed"], [135, 2, 1, "", "count_interactions_undirected"], [135, 2, 1, "", "count_labels"], [135, 2, 1, "", "count_lncrna_identifiers"], [135, 2, 1, "", "count_lncrna_labels"], [135, 2, 1, "", "count_lncrnas"], [135, 2, 1, "", "count_mirna_identifiers"], [135, 2, 1, "", "count_mirna_labels"], [135, 2, 1, "", "count_mirnas"], [135, 2, 1, "", "count_protein_identifiers"], [135, 2, 1, "", "count_protein_labels"], [135, 2, 1, "", "count_proteins"], [135, 4, 1, "", "count_references"], [135, 4, 1, "", "count_resource_names"], [135, 4, 1, "", "count_resource_names_via"], [135, 4, 1, "", "count_resources"], [135, 4, 1, "", "count_resources_via"], [135, 2, 1, "", "count_small_molecule_identifiers"], [135, 2, 1, "", "count_small_molecule_labels"], [135, 2, 1, "", "count_small_molecules"], [135, 4, 1, "", "data_models_by_data_model"], [135, 4, 1, "", "data_models_by_interaction_type"], [135, 4, 1, "", "data_models_by_interaction_type_and_data_model"], [135, 4, 1, "", "data_models_by_interaction_type_and_data_model_and_resource"], [135, 4, 1, "", "data_models_by_reference"], [135, 4, 1, "", "data_models_by_resource"], [135, 4, 1, "", "degrees_directed_by_data_model"], [135, 4, 1, "", "degrees_directed_by_interaction_type"], [135, 4, 1, "", "degrees_directed_by_interaction_type_and_data_model"], [135, 4, 1, "", "degrees_directed_by_interaction_type_and_data_model_and_resource"], [135, 4, 1, "", "degrees_directed_by_reference"], [135, 4, 1, "", "degrees_directed_by_resource"], [135, 4, 1, "", "degrees_directed_in_by_data_model"], [135, 4, 1, "", "degrees_directed_in_by_interaction_type"], [135, 4, 1, "", "degrees_directed_in_by_interaction_type_and_data_model"], [135, 4, 1, "", "degrees_directed_in_by_interaction_type_and_data_model_and_resource"], [135, 4, 1, "", "degrees_directed_in_by_reference"], [135, 4, 1, "", "degrees_directed_in_by_resource"], [135, 4, 1, "", "degrees_directed_out_by_data_model"], [135, 4, 1, "", "degrees_directed_out_by_interaction_type"], [135, 4, 1, "", "degrees_directed_out_by_interaction_type_and_data_model"], [135, 4, 1, "", "degrees_directed_out_by_interaction_type_and_data_model_and_resource"], [135, 4, 1, "", "degrees_directed_out_by_reference"], [135, 4, 1, "", "degrees_directed_out_by_resource"], [135, 4, 1, "", "degrees_negative_by_data_model"], [135, 4, 1, "", "degrees_negative_by_interaction_type"], [135, 4, 1, "", "degrees_negative_by_interaction_type_and_data_model"], [135, 4, 1, "", "degrees_negative_by_interaction_type_and_data_model_and_resource"], [135, 4, 1, "", "degrees_negative_by_reference"], [135, 4, 1, "", "degrees_negative_by_resource"], [135, 4, 1, "", "degrees_negative_in_by_data_model"], [135, 4, 1, "", "degrees_negative_in_by_interaction_type"], [135, 4, 1, "", "degrees_negative_in_by_interaction_type_and_data_model"], [135, 4, 1, "", "degrees_negative_in_by_interaction_type_and_data_model_and_resource"], [135, 4, 1, "", "degrees_negative_in_by_reference"], [135, 4, 1, "", "degrees_negative_in_by_resource"], [135, 4, 1, "", "degrees_negative_out_by_data_model"], [135, 4, 1, "", "degrees_negative_out_by_interaction_type"], [135, 4, 1, "", "degrees_negative_out_by_interaction_type_and_data_model"], [135, 4, 1, "", "degrees_negative_out_by_interaction_type_and_data_model_and_resource"], [135, 4, 1, "", "degrees_negative_out_by_reference"], [135, 4, 1, "", "degrees_negative_out_by_resource"], [135, 4, 1, "", "degrees_non_directed_by_data_model"], [135, 4, 1, "", "degrees_non_directed_by_interaction_type"], [135, 4, 1, "", "degrees_non_directed_by_interaction_type_and_data_model"], [135, 4, 1, "", "degrees_non_directed_by_interaction_type_and_data_model_and_resource"], [135, 4, 1, "", "degrees_non_directed_by_reference"], [135, 4, 1, "", "degrees_non_directed_by_resource"], [135, 4, 1, "", "degrees_positive_by_data_model"], [135, 4, 1, "", "degrees_positive_by_interaction_type"], [135, 4, 1, "", "degrees_positive_by_interaction_type_and_data_model"], [135, 4, 1, "", "degrees_positive_by_interaction_type_and_data_model_and_resource"], [135, 4, 1, "", "degrees_positive_by_reference"], [135, 4, 1, "", "degrees_positive_by_resource"], [135, 4, 1, "", "degrees_positive_in_by_data_model"], [135, 4, 1, "", "degrees_positive_in_by_interaction_type"], [135, 4, 1, "", "degrees_positive_in_by_interaction_type_and_data_model"], [135, 4, 1, "", "degrees_positive_in_by_interaction_type_and_data_model_and_resource"], [135, 4, 1, "", "degrees_positive_in_by_reference"], [135, 4, 1, "", "degrees_positive_in_by_resource"], [135, 4, 1, "", "degrees_positive_out_by_data_model"], [135, 4, 1, "", "degrees_positive_out_by_interaction_type"], [135, 4, 1, "", "degrees_positive_out_by_interaction_type_and_data_model"], [135, 4, 1, "", "degrees_positive_out_by_interaction_type_and_data_model_and_resource"], [135, 4, 1, "", "degrees_positive_out_by_reference"], [135, 4, 1, "", "degrees_positive_out_by_resource"], [135, 4, 1, "", "degrees_signed_by_data_model"], [135, 4, 1, "", "degrees_signed_by_interaction_type"], [135, 4, 1, "", "degrees_signed_by_interaction_type_and_data_model"], [135, 4, 1, "", "degrees_signed_by_interaction_type_and_data_model_and_resource"], [135, 4, 1, "", "degrees_signed_by_reference"], [135, 4, 1, "", "degrees_signed_by_resource"], [135, 4, 1, "", "degrees_signed_in_by_data_model"], [135, 4, 1, "", "degrees_signed_in_by_interaction_type"], [135, 4, 1, "", "degrees_signed_in_by_interaction_type_and_data_model"], [135, 4, 1, "", "degrees_signed_in_by_interaction_type_and_data_model_and_resource"], [135, 4, 1, "", "degrees_signed_in_by_reference"], [135, 4, 1, "", "degrees_signed_in_by_resource"], [135, 4, 1, "", "degrees_signed_out_by_data_model"], [135, 4, 1, "", "degrees_signed_out_by_interaction_type"], [135, 4, 1, "", "degrees_signed_out_by_interaction_type_and_data_model"], [135, 4, 1, "", "degrees_signed_out_by_interaction_type_and_data_model_and_resource"], [135, 4, 1, "", "degrees_signed_out_by_reference"], [135, 4, 1, "", "degrees_signed_out_by_resource"], [135, 4, 1, "", "degrees_undirected_by_data_model"], [135, 4, 1, "", "degrees_undirected_by_interaction_type"], [135, 4, 1, "", "degrees_undirected_by_interaction_type_and_data_model"], [135, 4, 1, "", "degrees_undirected_by_interaction_type_and_data_model_and_resource"], [135, 4, 1, "", "degrees_undirected_by_reference"], [135, 4, 1, "", "degrees_undirected_by_resource"], [135, 2, 1, "", "direction_key"], [135, 2, 1, "", "dorothea_level"], [135, 2, 1, "", "dorothea_levels"], [135, 2, 1, "", "entities_by_data_model"], [135, 2, 1, "", "entities_by_interaction_type"], [135, 2, 1, "", "entities_by_interaction_type_and_data_model"], [135, 2, 1, "", "entities_by_interaction_type_and_data_model_and_resource"], [135, 2, 1, "", "entities_by_reference"], [135, 2, 1, "", "entities_by_resource"], [135, 2, 1, "", "evaluate_evidences"], [135, 2, 1, "", "generate_df_records"], [135, 2, 1, "", "get_attr"], [135, 2, 1, "", "get_complex_identifiers"], [135, 2, 1, "", "get_complex_labels"], [135, 2, 1, "", "get_complexes"], [135, 4, 1, "", "get_data_models"], [135, 2, 1, "", "get_degrees"], [135, 4, 1, "", "get_degrees_directed"], [135, 4, 1, "", "get_degrees_directed_in"], [135, 4, 1, "", "get_degrees_directed_out"], [135, 4, 1, "", "get_degrees_negative"], [135, 4, 1, "", "get_degrees_negative_in"], [135, 4, 1, "", "get_degrees_negative_out"], [135, 4, 1, "", "get_degrees_non_directed"], [135, 4, 1, "", "get_degrees_positive"], [135, 4, 1, "", "get_degrees_positive_in"], [135, 4, 1, "", "get_degrees_positive_out"], [135, 4, 1, "", "get_degrees_signed"], [135, 4, 1, "", "get_degrees_signed_in"], [135, 4, 1, "", "get_degrees_signed_out"], [135, 4, 1, "", "get_degrees_undirected"], [135, 2, 1, "", "get_direction"], [135, 2, 1, "", "get_directions"], [135, 2, 1, "", "get_entities"], [135, 2, 1, "", "get_identifiers"], [135, 4, 1, "", "get_interaction_types"], [135, 2, 1, "", "get_interactions"], [135, 2, 1, "", "get_interactions_0"], [135, 2, 1, "", "get_interactions_directed"], [135, 2, 1, "", "get_interactions_mutual"], [135, 2, 1, "", "get_interactions_negative"], [135, 2, 1, "", "get_interactions_non_directed"], [135, 2, 1, "", "get_interactions_non_directed_0"], [135, 2, 1, "", "get_interactions_positive"], [135, 2, 1, "", "get_interactions_signed"], [135, 2, 1, "", "get_interactions_undirected"], [135, 2, 1, "", "get_interactions_undirected_0"], [135, 2, 1, "", "get_labels"], [135, 2, 1, "", "get_lncrna_identifiers"], [135, 2, 1, "", "get_lncrna_labels"], [135, 2, 1, "", "get_lncrnas"], [135, 2, 1, "", "get_mirna_identifiers"], [135, 2, 1, "", "get_mirna_labels"], [135, 2, 1, "", "get_mirnas"], [135, 2, 1, "", "get_protein_identifiers"], [135, 2, 1, "", "get_protein_labels"], [135, 2, 1, "", "get_proteins"], [135, 4, 1, "", "get_references"], [135, 4, 1, "", "get_resource_names"], [135, 4, 1, "", "get_resource_names_via"], [135, 4, 1, "", "get_resources"], [135, 4, 1, "", "get_resources_via"], [135, 2, 1, "", "get_sign"], [135, 2, 1, "", "get_small_molecule_identifiers"], [135, 2, 1, "", "get_small_molecule_labels"], [135, 2, 1, "", "get_small_molecules"], [135, 2, 1, "", "has_sign"], [135, 2, 1, "", "identifiers_by_data_model"], [135, 2, 1, "", "identifiers_by_interaction_type"], [135, 2, 1, "", "identifiers_by_interaction_type_and_data_model"], [135, 2, 1, "", "identifiers_by_interaction_type_and_data_model_and_resource"], [135, 2, 1, "", "identifiers_by_reference"], [135, 2, 1, "", "identifiers_by_resource"], [135, 4, 1, "", "interaction_types_by_data_model"], [135, 4, 1, "", "interaction_types_by_interaction_type"], [135, 4, 1, "", "interaction_types_by_interaction_type_and_data_model"], [135, 4, 1, "", "interaction_types_by_interaction_type_and_data_model_and_resource"], [135, 4, 1, "", "interaction_types_by_reference"], [135, 4, 1, "", "interaction_types_by_resource"], [135, 2, 1, "", "interactions_0_by_data_model"], [135, 2, 1, "", "interactions_0_by_interaction_type"], [135, 2, 1, "", "interactions_0_by_interaction_type_and_data_model"], [135, 2, 1, "", "interactions_0_by_interaction_type_and_data_model_and_resource"], [135, 2, 1, "", "interactions_0_by_reference"], [135, 2, 1, "", "interactions_0_by_resource"], [135, 2, 1, "", "interactions_by_data_model"], [135, 2, 1, "", "interactions_by_interaction_type"], [135, 2, 1, "", "interactions_by_interaction_type_and_data_model"], [135, 2, 1, "", "interactions_by_interaction_type_and_data_model_and_resource"], [135, 2, 1, "", "interactions_by_reference"], [135, 2, 1, "", "interactions_by_resource"], [135, 2, 1, "", "interactions_directed_by_data_model"], [135, 2, 1, "", "interactions_directed_by_interaction_type"], [135, 2, 1, "", "interactions_directed_by_interaction_type_and_data_model"], [135, 2, 1, "", "interactions_directed_by_interaction_type_and_data_model_and_resource"], [135, 2, 1, "", "interactions_directed_by_reference"], [135, 2, 1, "", "interactions_directed_by_resource"], [135, 2, 1, "", "interactions_mutual_by_data_model"], [135, 2, 1, "", "interactions_mutual_by_interaction_type"], [135, 2, 1, "", "interactions_mutual_by_interaction_type_and_data_model"], [135, 2, 1, "", "interactions_mutual_by_interaction_type_and_data_model_and_resource"], [135, 2, 1, "", "interactions_mutual_by_reference"], [135, 2, 1, "", "interactions_mutual_by_resource"], [135, 2, 1, "", "interactions_negative_by_data_model"], [135, 2, 1, "", "interactions_negative_by_interaction_type"], [135, 2, 1, "", "interactions_negative_by_interaction_type_and_data_model"], [135, 2, 1, "", "interactions_negative_by_interaction_type_and_data_model_and_resource"], [135, 2, 1, "", "interactions_negative_by_reference"], [135, 2, 1, "", "interactions_negative_by_resource"], [135, 2, 1, "", "interactions_non_directed_0_by_data_model"], [135, 2, 1, "", "interactions_non_directed_0_by_interaction_type"], [135, 2, 1, "", "interactions_non_directed_0_by_interaction_type_and_data_model"], [135, 2, 1, "", "interactions_non_directed_0_by_interaction_type_and_data_model_and_resource"], [135, 2, 1, "", "interactions_non_directed_0_by_reference"], [135, 2, 1, "", "interactions_non_directed_0_by_resource"], [135, 2, 1, "", "interactions_non_directed_by_data_model"], [135, 2, 1, "", "interactions_non_directed_by_interaction_type"], [135, 2, 1, "", "interactions_non_directed_by_interaction_type_and_data_model"], [135, 2, 1, "", "interactions_non_directed_by_interaction_type_and_data_model_and_resource"], [135, 2, 1, "", "interactions_non_directed_by_reference"], [135, 2, 1, "", "interactions_non_directed_by_resource"], [135, 2, 1, "", "interactions_positive_by_data_model"], [135, 2, 1, "", "interactions_positive_by_interaction_type"], [135, 2, 1, "", "interactions_positive_by_interaction_type_and_data_model"], [135, 2, 1, "", "interactions_positive_by_interaction_type_and_data_model_and_resource"], [135, 2, 1, "", "interactions_positive_by_reference"], [135, 2, 1, "", "interactions_positive_by_resource"], [135, 2, 1, "", "interactions_signed_by_data_model"], [135, 2, 1, "", "interactions_signed_by_interaction_type"], [135, 2, 1, "", "interactions_signed_by_interaction_type_and_data_model"], [135, 2, 1, "", "interactions_signed_by_interaction_type_and_data_model_and_resource"], [135, 2, 1, "", "interactions_signed_by_reference"], [135, 2, 1, "", "interactions_signed_by_resource"], [135, 2, 1, "", "interactions_undirected_0_by_data_model"], [135, 2, 1, "", "interactions_undirected_0_by_interaction_type"], [135, 2, 1, "", "interactions_undirected_0_by_interaction_type_and_data_model"], [135, 2, 1, "", "interactions_undirected_0_by_interaction_type_and_data_model_and_resource"], [135, 2, 1, "", "interactions_undirected_0_by_reference"], [135, 2, 1, "", "interactions_undirected_0_by_resource"], [135, 2, 1, "", "interactions_undirected_by_data_model"], [135, 2, 1, "", "interactions_undirected_by_interaction_type"], [135, 2, 1, "", "interactions_undirected_by_interaction_type_and_data_model"], [135, 2, 1, "", "interactions_undirected_by_interaction_type_and_data_model_and_resource"], [135, 2, 1, "", "interactions_undirected_by_reference"], [135, 2, 1, "", "interactions_undirected_by_resource"], [135, 2, 1, "", "is_directed"], [135, 2, 1, "", "is_directed_by_resources"], [135, 2, 1, "", "is_inhibition"], [135, 2, 1, "", "is_loop"], [135, 2, 1, "", "is_mutual"], [135, 2, 1, "", "is_mutual_by_resources"], [135, 2, 1, "", "is_stimulation"], [135, 2, 1, "", "iter_evidences"], [135, 2, 1, "", "iter_match_evidences"], [135, 2, 1, "", "labels_by_data_model"], [135, 2, 1, "", "labels_by_interaction_type"], [135, 2, 1, "", "labels_by_interaction_type_and_data_model"], [135, 2, 1, "", "labels_by_interaction_type_and_data_model_and_resource"], [135, 2, 1, "", "labels_by_reference"], [135, 2, 1, "", "labels_by_resource"], [135, 2, 1, "", "lncrna_identifiers_by_data_model"], [135, 2, 1, "", "lncrna_identifiers_by_interaction_type"], [135, 2, 1, "", "lncrna_identifiers_by_interaction_type_and_data_model"], [135, 2, 1, "", "lncrna_identifiers_by_interaction_type_and_data_model_and_resource"], [135, 2, 1, "", "lncrna_identifiers_by_reference"], [135, 2, 1, "", "lncrna_identifiers_by_resource"], [135, 2, 1, "", "lncrna_labels_by_data_model"], [135, 2, 1, "", "lncrna_labels_by_interaction_type"], [135, 2, 1, "", "lncrna_labels_by_interaction_type_and_data_model"], [135, 2, 1, "", "lncrna_labels_by_interaction_type_and_data_model_and_resource"], [135, 2, 1, "", "lncrna_labels_by_reference"], [135, 2, 1, "", "lncrna_labels_by_resource"], [135, 2, 1, "", "lncrnas_by_data_model"], [135, 2, 1, "", "lncrnas_by_interaction_type"], [135, 2, 1, "", "lncrnas_by_interaction_type_and_data_model"], [135, 2, 1, "", "lncrnas_by_interaction_type_and_data_model_and_resource"], [135, 2, 1, "", "lncrnas_by_reference"], [135, 2, 1, "", "lncrnas_by_resource"], [135, 2, 1, "", "majority_dir"], [135, 2, 1, "", "majority_sign"], [135, 2, 1, "", "merge"], [135, 2, 1, "", "mirna_identifiers_by_data_model"], [135, 2, 1, "", "mirna_identifiers_by_interaction_type"], [135, 2, 1, "", "mirna_identifiers_by_interaction_type_and_data_model"], [135, 2, 1, "", "mirna_identifiers_by_interaction_type_and_data_model_and_resource"], [135, 2, 1, "", "mirna_identifiers_by_reference"], [135, 2, 1, "", "mirna_identifiers_by_resource"], [135, 2, 1, "", "mirna_labels_by_data_model"], [135, 2, 1, "", "mirna_labels_by_interaction_type"], [135, 2, 1, "", "mirna_labels_by_interaction_type_and_data_model"], [135, 2, 1, "", "mirna_labels_by_interaction_type_and_data_model_and_resource"], [135, 2, 1, "", "mirna_labels_by_reference"], [135, 2, 1, "", "mirna_labels_by_resource"], [135, 2, 1, "", "mirnas_by_data_model"], [135, 2, 1, "", "mirnas_by_interaction_type"], [135, 2, 1, "", "mirnas_by_interaction_type_and_data_model"], [135, 2, 1, "", "mirnas_by_interaction_type_and_data_model_and_resource"], [135, 2, 1, "", "mirnas_by_reference"], [135, 2, 1, "", "mirnas_by_resource"], [135, 2, 1, "", "negative_a_b"], [135, 2, 1, "", "negative_b_a"], [135, 2, 1, "", "negative_resources_a_b"], [135, 2, 1, "", "negative_resources_b_a"], [135, 2, 1, "", "negative_reverse"], [135, 2, 1, "", "negative_straight"], [135, 2, 1, "", "positive_a_b"], [135, 2, 1, "", "positive_b_a"], [135, 2, 1, "", "positive_resources_a_b"], [135, 2, 1, "", "positive_resources_b_a"], [135, 2, 1, "", "positive_reverse"], [135, 2, 1, "", "positive_straight"], [135, 2, 1, "", "protein_identifiers_by_data_model"], [135, 2, 1, "", "protein_identifiers_by_interaction_type"], [135, 2, 1, "", "protein_identifiers_by_interaction_type_and_data_model"], [135, 2, 1, "", "protein_identifiers_by_interaction_type_and_data_model_and_resource"], [135, 2, 1, "", "protein_identifiers_by_reference"], [135, 2, 1, "", "protein_identifiers_by_resource"], [135, 2, 1, "", "protein_labels_by_data_model"], [135, 2, 1, "", "protein_labels_by_interaction_type"], [135, 2, 1, "", "protein_labels_by_interaction_type_and_data_model"], [135, 2, 1, "", "protein_labels_by_interaction_type_and_data_model_and_resource"], [135, 2, 1, "", "protein_labels_by_reference"], [135, 2, 1, "", "protein_labels_by_resource"], [135, 2, 1, "", "proteins_by_data_model"], [135, 2, 1, "", "proteins_by_interaction_type"], [135, 2, 1, "", "proteins_by_interaction_type_and_data_model"], [135, 2, 1, "", "proteins_by_interaction_type_and_data_model_and_resource"], [135, 2, 1, "", "proteins_by_reference"], [135, 2, 1, "", "proteins_by_resource"], [135, 4, 1, "", "references_by_data_model"], [135, 4, 1, "", "references_by_interaction_type"], [135, 4, 1, "", "references_by_interaction_type_and_data_model"], [135, 4, 1, "", "references_by_interaction_type_and_data_model_and_resource"], [135, 4, 1, "", "references_by_reference"], [135, 4, 1, "", "references_by_resource"], [135, 2, 1, "", "reload"], [135, 4, 1, "", "resource_names_by_data_model"], [135, 4, 1, "", "resource_names_by_interaction_type"], [135, 4, 1, "", "resource_names_by_interaction_type_and_data_model"], [135, 4, 1, "", "resource_names_by_interaction_type_and_data_model_and_resource"], [135, 4, 1, "", "resource_names_by_reference"], [135, 4, 1, "", "resource_names_by_resource"], [135, 4, 1, "", "resource_names_via_by_data_model"], [135, 4, 1, "", "resource_names_via_by_interaction_type"], [135, 4, 1, "", "resource_names_via_by_interaction_type_and_data_model"], [135, 4, 1, "", "resource_names_via_by_interaction_type_and_data_model_and_resource"], [135, 4, 1, "", "resource_names_via_by_reference"], [135, 4, 1, "", "resource_names_via_by_resource"], [135, 2, 1, "", "resources_a_b"], [135, 2, 1, "", "resources_b_a"], [135, 4, 1, "", "resources_by_data_model"], [135, 4, 1, "", "resources_by_interaction_type"], [135, 4, 1, "", "resources_by_interaction_type_and_data_model"], [135, 4, 1, "", "resources_by_interaction_type_and_data_model_and_resource"], [135, 4, 1, "", "resources_by_reference"], [135, 4, 1, "", "resources_by_resource"], [135, 2, 1, "", "resources_undirected"], [135, 4, 1, "", "resources_via_by_data_model"], [135, 4, 1, "", "resources_via_by_interaction_type"], [135, 4, 1, "", "resources_via_by_interaction_type_and_data_model"], [135, 4, 1, "", "resources_via_by_interaction_type_and_data_model_and_resource"], [135, 4, 1, "", "resources_via_by_reference"], [135, 4, 1, "", "resources_via_by_resource"], [135, 2, 1, "", "serialize"], [135, 2, 1, "", "small_molecule_identifiers_by_data_model"], [135, 2, 1, "", "small_molecule_identifiers_by_interaction_type"], [135, 2, 1, "", "small_molecule_identifiers_by_interaction_type_and_data_model"], [135, 2, 1, "", "small_molecule_identifiers_by_interaction_type_and_data_model_and_resource"], [135, 2, 1, "", "small_molecule_identifiers_by_reference"], [135, 2, 1, "", "small_molecule_identifiers_by_resource"], [135, 2, 1, "", "small_molecule_labels_by_data_model"], [135, 2, 1, "", "small_molecule_labels_by_interaction_type"], [135, 2, 1, "", "small_molecule_labels_by_interaction_type_and_data_model"], [135, 2, 1, "", "small_molecule_labels_by_interaction_type_and_data_model_and_resource"], [135, 2, 1, "", "small_molecule_labels_by_reference"], [135, 2, 1, "", "small_molecule_labels_by_resource"], [135, 2, 1, "", "small_molecules_by_data_model"], [135, 2, 1, "", "small_molecules_by_interaction_type"], [135, 2, 1, "", "small_molecules_by_interaction_type_and_data_model"], [135, 2, 1, "", "small_molecules_by_interaction_type_and_data_model_and_resource"], [135, 2, 1, "", "small_molecules_by_reference"], [135, 2, 1, "", "small_molecules_by_resource"], [135, 2, 1, "", "source"], [135, 2, 1, "", "sources_reverse"], [135, 2, 1, "", "sources_straight"], [135, 2, 1, "", "sources_undirected"], [135, 2, 1, "", "src"], [135, 2, 1, "", "src_by_resource"], [135, 2, 1, "", "target"], [135, 2, 1, "", "tgt"], [135, 2, 1, "", "tgt_by_resource"], [135, 2, 1, "", "translate"], [135, 2, 1, "", "unset_dir"], [135, 2, 1, "", "unset_direction"], [135, 2, 1, "", "unset_interaction_type"], [135, 2, 1, "", "unset_sign"], [135, 2, 1, "", "update_attrs"], [135, 2, 1, "", "which_directions"], [135, 2, 1, "", "which_dirs"], [135, 2, 1, "", "which_signs"]], "pypath.core.interaction.InteractionDataFrameRecord": [[136, 2, 1, "", "__init__"], [136, 2, 1, "", "count"], [136, 4, 1, "", "directed"], [136, 4, 1, "", "dmodel"], [136, 4, 1, "", "effect"], [136, 4, 1, "", "id_a"], [136, 4, 1, "", "id_b"], [136, 2, 1, "", "index"], [136, 4, 1, "", "references"], [136, 4, 1, "", "sources"], [136, 4, 1, "", "type"], [136, 4, 1, "", "type_a"], [136, 4, 1, "", "type_b"]], "pypath.core.interaction.InteractionKey": [[137, 2, 1, "", "__init__"], [137, 2, 1, "", "count"], [137, 4, 1, "", "entity_a"], [137, 4, 1, "", "entity_b"], [137, 2, 1, "", "index"]], "pypath.core.intercell": [[139, 1, 1, "", "IntercellAnnotation"], [140, 3, 1, "", "get_db"], [141, 3, 1, "", "init_db"]], "pypath.core.intercell.IntercellAnnotation": [[139, 2, 1, "", "__init__"], [139, 2, 1, "", "browse"], [139, 2, 1, "", "class_to_class_connections"], [139, 2, 1, "", "classes_by_entity"], [139, 2, 1, "", "counts"], [139, 2, 1, "", "counts_by_class"], [139, 2, 1, "", "create_class"], [139, 2, 1, "", "degree_inter_class_network"], [139, 2, 1, "", "filter"], [139, 2, 1, "", "filter_classes"], [139, 2, 1, "", "filter_interclass_network"], [139, 2, 1, "", "get_class"], [139, 2, 1, "", "get_df"], [139, 2, 1, "", "get_interclass_network_df"], [139, 2, 1, "", "get_parents"], [139, 2, 1, "", "get_resource"], [139, 2, 1, "", "get_resources"], [139, 2, 1, "", "labels"], [139, 2, 1, "", "make_df"], [139, 2, 1, "", "network_df"], [139, 2, 1, "", "populate_classes"], [139, 2, 1, "", "populate_scores"], [139, 2, 1, "", "process_annot"], [139, 2, 1, "", "quality_check_table"], [139, 2, 1, "", "register_network"], [139, 2, 1, "", "reload"], [139, 2, 1, "", "resources_in_category"], [139, 2, 1, "", "select"], [139, 2, 1, "", "set_interclass_network_df"], [139, 2, 1, "", "show"], [139, 2, 1, "", "update_parents"]], "pypath.core.intercell_annot": [[143, 6, 1, "", "excludes"]], "pypath.core.network": [[145, 1, 1, "", "Network"], [146, 1, 1, "", "NetworkEntityCollection"], [147, 1, 1, "", "NetworkStatsRecord"], [148, 3, 1, "", "get_db"], [149, 3, 1, "", "init_db"]], "pypath.core.network.Network": [[145, 2, 1, "", "__init__"], [145, 4, 1, "", "activated_by"], [145, 4, 1, "", "activates"], [145, 2, 1, "", "add_interaction"], [145, 2, 1, "", "add_node"], [145, 4, 1, "", "collect_complex_identifiers"], [145, 4, 1, "", "collect_complex_labels"], [145, 4, 1, "", "collect_complexes"], [145, 4, 1, "", "collect_curation_effort"], [145, 4, 1, "", "collect_data_models"], [145, 4, 1, "", "collect_degrees_directed"], [145, 4, 1, "", "collect_degrees_directed_in"], [145, 4, 1, "", "collect_degrees_directed_out"], [145, 4, 1, "", "collect_degrees_negative"], [145, 4, 1, "", "collect_degrees_negative_in"], [145, 4, 1, "", "collect_degrees_negative_out"], [145, 4, 1, "", "collect_degrees_non_directed"], [145, 4, 1, "", "collect_degrees_positive"], [145, 4, 1, "", "collect_degrees_positive_in"], [145, 4, 1, "", "collect_degrees_positive_out"], [145, 4, 1, "", "collect_degrees_signed"], [145, 4, 1, "", "collect_degrees_signed_in"], [145, 4, 1, "", "collect_degrees_signed_out"], [145, 4, 1, "", "collect_degrees_undirected"], [145, 4, 1, "", "collect_entities"], [145, 4, 1, "", "collect_evidences"], [145, 4, 1, "", "collect_identifiers"], [145, 4, 1, "", "collect_interaction_types"], [145, 4, 1, "", "collect_interactions"], [145, 4, 1, "", "collect_interactions_0"], [145, 4, 1, "", "collect_interactions_directed"], [145, 4, 1, "", "collect_interactions_mutual"], [145, 4, 1, "", "collect_interactions_negative"], [145, 4, 1, "", "collect_interactions_non_directed"], [145, 4, 1, "", "collect_interactions_non_directed_0"], [145, 4, 1, "", "collect_interactions_positive"], [145, 4, 1, "", "collect_interactions_signed"], [145, 4, 1, "", "collect_interactions_undirected"], [145, 4, 1, "", "collect_interactions_undirected_0"], [145, 4, 1, "", "collect_labels"], [145, 4, 1, "", "collect_lncrna_identifiers"], [145, 4, 1, "", "collect_lncrna_labels"], [145, 4, 1, "", "collect_lncrnas"], [145, 4, 1, "", "collect_mirna_identifiers"], [145, 4, 1, "", "collect_mirna_labels"], [145, 4, 1, "", "collect_mirnas"], [145, 4, 1, "", "collect_protein_identifiers"], [145, 4, 1, "", "collect_protein_labels"], [145, 4, 1, "", "collect_proteins"], [145, 4, 1, "", "collect_references"], [145, 4, 1, "", "collect_resource_names"], [145, 4, 1, "", "collect_resource_names_via"], [145, 4, 1, "", "collect_resources"], [145, 4, 1, "", "collect_resources_via"], [145, 4, 1, "", "collect_small_molecule_identifiers"], [145, 4, 1, "", "collect_small_molecule_labels"], [145, 4, 1, "", "collect_small_molecules"], [145, 2, 1, "", "collectri"], [145, 4, 1, "", "complex_identifiers_by_data_model"], [145, 4, 1, "", "complex_identifiers_by_interaction_type"], [145, 4, 1, "", "complex_identifiers_by_interaction_type_and_data_model"], [145, 4, 1, "", "complex_identifiers_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "complex_identifiers_by_reference"], [145, 4, 1, "", "complex_identifiers_by_resource"], [145, 4, 1, "", "complex_labels_by_data_model"], [145, 4, 1, "", "complex_labels_by_interaction_type"], [145, 4, 1, "", "complex_labels_by_interaction_type_and_data_model"], [145, 4, 1, "", "complex_labels_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "complex_labels_by_reference"], [145, 4, 1, "", "complex_labels_by_resource"], [145, 4, 1, "", "complexes_by_data_model"], [145, 4, 1, "", "complexes_by_interaction_type"], [145, 4, 1, "", "complexes_by_interaction_type_and_data_model"], [145, 4, 1, "", "complexes_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "complexes_by_reference"], [145, 4, 1, "", "complexes_by_resource"], [145, 4, 1, "", "count_activated_by"], [145, 4, 1, "", "count_activates"], [145, 4, 1, "", "count_complex_identifiers"], [145, 4, 1, "", "count_complex_identifiers_by_data_model"], [145, 4, 1, "", "count_complex_identifiers_by_interaction_type"], [145, 4, 1, "", "count_complex_identifiers_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_complex_identifiers_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_complex_identifiers_by_reference"], [145, 4, 1, "", "count_complex_identifiers_by_resource"], [145, 4, 1, "", "count_complex_labels"], [145, 4, 1, "", "count_complex_labels_by_data_model"], [145, 4, 1, "", "count_complex_labels_by_interaction_type"], [145, 4, 1, "", "count_complex_labels_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_complex_labels_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_complex_labels_by_reference"], [145, 4, 1, "", "count_complex_labels_by_resource"], [145, 4, 1, "", "count_complexes"], [145, 4, 1, "", "count_complexes_by_data_model"], [145, 4, 1, "", "count_complexes_by_interaction_type"], [145, 4, 1, "", "count_complexes_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_complexes_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_complexes_by_reference"], [145, 4, 1, "", "count_complexes_by_resource"], [145, 4, 1, "", "count_curation_effort"], [145, 4, 1, "", "count_curation_effort_by_data_model"], [145, 4, 1, "", "count_curation_effort_by_interaction_type"], [145, 4, 1, "", "count_curation_effort_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_curation_effort_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_curation_effort_by_reference"], [145, 4, 1, "", "count_curation_effort_by_resource"], [145, 4, 1, "", "count_data_models"], [145, 4, 1, "", "count_data_models_by_data_model"], [145, 4, 1, "", "count_data_models_by_interaction_type"], [145, 4, 1, "", "count_data_models_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_data_models_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_data_models_by_reference"], [145, 4, 1, "", "count_data_models_by_resource"], [145, 4, 1, "", "count_degrees_directed"], [145, 4, 1, "", "count_degrees_directed_by_data_model"], [145, 4, 1, "", "count_degrees_directed_by_interaction_type"], [145, 4, 1, "", "count_degrees_directed_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_degrees_directed_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_degrees_directed_by_reference"], [145, 4, 1, "", "count_degrees_directed_by_resource"], [145, 4, 1, "", "count_degrees_directed_in"], [145, 4, 1, "", "count_degrees_directed_in_by_data_model"], [145, 4, 1, "", "count_degrees_directed_in_by_interaction_type"], [145, 4, 1, "", "count_degrees_directed_in_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_degrees_directed_in_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_degrees_directed_in_by_reference"], [145, 4, 1, "", "count_degrees_directed_in_by_resource"], [145, 4, 1, "", "count_degrees_directed_out"], [145, 4, 1, "", "count_degrees_directed_out_by_data_model"], [145, 4, 1, "", "count_degrees_directed_out_by_interaction_type"], [145, 4, 1, "", "count_degrees_directed_out_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_degrees_directed_out_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_degrees_directed_out_by_reference"], [145, 4, 1, "", "count_degrees_directed_out_by_resource"], [145, 4, 1, "", "count_degrees_negative"], [145, 4, 1, "", "count_degrees_negative_by_data_model"], [145, 4, 1, "", "count_degrees_negative_by_interaction_type"], [145, 4, 1, "", "count_degrees_negative_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_degrees_negative_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_degrees_negative_by_reference"], [145, 4, 1, "", "count_degrees_negative_by_resource"], [145, 4, 1, "", "count_degrees_negative_in"], [145, 4, 1, "", "count_degrees_negative_in_by_data_model"], [145, 4, 1, "", "count_degrees_negative_in_by_interaction_type"], [145, 4, 1, "", "count_degrees_negative_in_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_degrees_negative_in_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_degrees_negative_in_by_reference"], [145, 4, 1, "", "count_degrees_negative_in_by_resource"], [145, 4, 1, "", "count_degrees_negative_out"], [145, 4, 1, "", "count_degrees_negative_out_by_data_model"], [145, 4, 1, "", "count_degrees_negative_out_by_interaction_type"], [145, 4, 1, "", "count_degrees_negative_out_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_degrees_negative_out_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_degrees_negative_out_by_reference"], [145, 4, 1, "", "count_degrees_negative_out_by_resource"], [145, 4, 1, "", "count_degrees_non_directed"], [145, 4, 1, "", "count_degrees_non_directed_by_data_model"], [145, 4, 1, "", "count_degrees_non_directed_by_interaction_type"], [145, 4, 1, "", "count_degrees_non_directed_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_degrees_non_directed_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_degrees_non_directed_by_reference"], [145, 4, 1, "", "count_degrees_non_directed_by_resource"], [145, 4, 1, "", "count_degrees_positive"], [145, 4, 1, "", "count_degrees_positive_by_data_model"], [145, 4, 1, "", "count_degrees_positive_by_interaction_type"], [145, 4, 1, "", "count_degrees_positive_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_degrees_positive_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_degrees_positive_by_reference"], [145, 4, 1, "", "count_degrees_positive_by_resource"], [145, 4, 1, "", "count_degrees_positive_in"], [145, 4, 1, "", "count_degrees_positive_in_by_data_model"], [145, 4, 1, "", "count_degrees_positive_in_by_interaction_type"], [145, 4, 1, "", "count_degrees_positive_in_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_degrees_positive_in_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_degrees_positive_in_by_reference"], [145, 4, 1, "", "count_degrees_positive_in_by_resource"], [145, 4, 1, "", "count_degrees_positive_out"], [145, 4, 1, "", "count_degrees_positive_out_by_data_model"], [145, 4, 1, "", "count_degrees_positive_out_by_interaction_type"], [145, 4, 1, "", "count_degrees_positive_out_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_degrees_positive_out_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_degrees_positive_out_by_reference"], [145, 4, 1, "", "count_degrees_positive_out_by_resource"], [145, 4, 1, "", "count_degrees_signed"], [145, 4, 1, "", "count_degrees_signed_by_data_model"], [145, 4, 1, "", "count_degrees_signed_by_interaction_type"], [145, 4, 1, "", "count_degrees_signed_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_degrees_signed_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_degrees_signed_by_reference"], [145, 4, 1, "", "count_degrees_signed_by_resource"], [145, 4, 1, "", "count_degrees_signed_in"], [145, 4, 1, "", "count_degrees_signed_in_by_data_model"], [145, 4, 1, "", "count_degrees_signed_in_by_interaction_type"], [145, 4, 1, "", "count_degrees_signed_in_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_degrees_signed_in_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_degrees_signed_in_by_reference"], [145, 4, 1, "", "count_degrees_signed_in_by_resource"], [145, 4, 1, "", "count_degrees_signed_out"], [145, 4, 1, "", "count_degrees_signed_out_by_data_model"], [145, 4, 1, "", "count_degrees_signed_out_by_interaction_type"], [145, 4, 1, "", "count_degrees_signed_out_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_degrees_signed_out_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_degrees_signed_out_by_reference"], [145, 4, 1, "", "count_degrees_signed_out_by_resource"], [145, 4, 1, "", "count_degrees_undirected"], [145, 4, 1, "", "count_degrees_undirected_by_data_model"], [145, 4, 1, "", "count_degrees_undirected_by_interaction_type"], [145, 4, 1, "", "count_degrees_undirected_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_degrees_undirected_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_degrees_undirected_by_reference"], [145, 4, 1, "", "count_degrees_undirected_by_resource"], [145, 4, 1, "", "count_entities"], [145, 4, 1, "", "count_entities_by_data_model"], [145, 4, 1, "", "count_entities_by_interaction_type"], [145, 4, 1, "", "count_entities_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_entities_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_entities_by_reference"], [145, 4, 1, "", "count_entities_by_resource"], [145, 4, 1, "", "count_evidences"], [145, 4, 1, "", "count_evidences_by_data_model"], [145, 4, 1, "", "count_evidences_by_interaction_type"], [145, 4, 1, "", "count_evidences_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_evidences_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_evidences_by_reference"], [145, 4, 1, "", "count_evidences_by_resource"], [145, 4, 1, "", "count_identifiers"], [145, 4, 1, "", "count_identifiers_by_data_model"], [145, 4, 1, "", "count_identifiers_by_interaction_type"], [145, 4, 1, "", "count_identifiers_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_identifiers_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_identifiers_by_reference"], [145, 4, 1, "", "count_identifiers_by_resource"], [145, 4, 1, "", "count_interaction_types"], [145, 4, 1, "", "count_interaction_types_by_data_model"], [145, 4, 1, "", "count_interaction_types_by_interaction_type"], [145, 4, 1, "", "count_interaction_types_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_interaction_types_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_interaction_types_by_reference"], [145, 4, 1, "", "count_interaction_types_by_resource"], [145, 4, 1, "", "count_interactions"], [145, 4, 1, "", "count_interactions_0"], [145, 4, 1, "", "count_interactions_0_by_data_model"], [145, 4, 1, "", "count_interactions_0_by_interaction_type"], [145, 4, 1, "", "count_interactions_0_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_interactions_0_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_interactions_0_by_reference"], [145, 4, 1, "", "count_interactions_0_by_resource"], [145, 4, 1, "", "count_interactions_by_data_model"], [145, 4, 1, "", "count_interactions_by_interaction_type"], [145, 4, 1, "", "count_interactions_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_interactions_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_interactions_by_reference"], [145, 4, 1, "", "count_interactions_by_resource"], [145, 4, 1, "", "count_interactions_directed"], [145, 4, 1, "", "count_interactions_directed_by_data_model"], [145, 4, 1, "", "count_interactions_directed_by_interaction_type"], [145, 4, 1, "", "count_interactions_directed_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_interactions_directed_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_interactions_directed_by_reference"], [145, 4, 1, "", "count_interactions_directed_by_resource"], [145, 4, 1, "", "count_interactions_mutual"], [145, 4, 1, "", "count_interactions_mutual_by_data_model"], [145, 4, 1, "", "count_interactions_mutual_by_interaction_type"], [145, 4, 1, "", "count_interactions_mutual_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_interactions_mutual_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_interactions_mutual_by_reference"], [145, 4, 1, "", "count_interactions_mutual_by_resource"], [145, 4, 1, "", "count_interactions_negative"], [145, 4, 1, "", "count_interactions_negative_by_data_model"], [145, 4, 1, "", "count_interactions_negative_by_interaction_type"], [145, 4, 1, "", "count_interactions_negative_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_interactions_negative_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_interactions_negative_by_reference"], [145, 4, 1, "", "count_interactions_negative_by_resource"], [145, 4, 1, "", "count_interactions_non_directed"], [145, 4, 1, "", "count_interactions_non_directed_0"], [145, 4, 1, "", "count_interactions_non_directed_0_by_data_model"], [145, 4, 1, "", "count_interactions_non_directed_0_by_interaction_type"], [145, 4, 1, "", "count_interactions_non_directed_0_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_interactions_non_directed_0_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_interactions_non_directed_0_by_reference"], [145, 4, 1, "", "count_interactions_non_directed_0_by_resource"], [145, 4, 1, "", "count_interactions_non_directed_by_data_model"], [145, 4, 1, "", "count_interactions_non_directed_by_interaction_type"], [145, 4, 1, "", "count_interactions_non_directed_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_interactions_non_directed_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_interactions_non_directed_by_reference"], [145, 4, 1, "", "count_interactions_non_directed_by_resource"], [145, 4, 1, "", "count_interactions_positive"], [145, 4, 1, "", "count_interactions_positive_by_data_model"], [145, 4, 1, "", "count_interactions_positive_by_interaction_type"], [145, 4, 1, "", "count_interactions_positive_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_interactions_positive_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_interactions_positive_by_reference"], [145, 4, 1, "", "count_interactions_positive_by_resource"], [145, 4, 1, "", "count_interactions_signed"], [145, 4, 1, "", "count_interactions_signed_by_data_model"], [145, 4, 1, "", "count_interactions_signed_by_interaction_type"], [145, 4, 1, "", "count_interactions_signed_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_interactions_signed_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_interactions_signed_by_reference"], [145, 4, 1, "", "count_interactions_signed_by_resource"], [145, 4, 1, "", "count_interactions_undirected"], [145, 4, 1, "", "count_interactions_undirected_0"], [145, 4, 1, "", "count_interactions_undirected_0_by_data_model"], [145, 4, 1, "", "count_interactions_undirected_0_by_interaction_type"], [145, 4, 1, "", "count_interactions_undirected_0_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_interactions_undirected_0_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_interactions_undirected_0_by_reference"], [145, 4, 1, "", "count_interactions_undirected_0_by_resource"], [145, 4, 1, "", "count_interactions_undirected_by_data_model"], [145, 4, 1, "", "count_interactions_undirected_by_interaction_type"], [145, 4, 1, "", "count_interactions_undirected_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_interactions_undirected_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_interactions_undirected_by_reference"], [145, 4, 1, "", "count_interactions_undirected_by_resource"], [145, 4, 1, "", "count_labels"], [145, 4, 1, "", "count_labels_by_data_model"], [145, 4, 1, "", "count_labels_by_interaction_type"], [145, 4, 1, "", "count_labels_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_labels_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_labels_by_reference"], [145, 4, 1, "", "count_labels_by_resource"], [145, 4, 1, "", "count_lncrna_identifiers"], [145, 4, 1, "", "count_lncrna_identifiers_by_data_model"], [145, 4, 1, "", "count_lncrna_identifiers_by_interaction_type"], [145, 4, 1, "", "count_lncrna_identifiers_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_lncrna_identifiers_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_lncrna_identifiers_by_reference"], [145, 4, 1, "", "count_lncrna_identifiers_by_resource"], [145, 4, 1, "", "count_lncrna_labels"], [145, 4, 1, "", "count_lncrna_labels_by_data_model"], [145, 4, 1, "", "count_lncrna_labels_by_interaction_type"], [145, 4, 1, "", "count_lncrna_labels_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_lncrna_labels_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_lncrna_labels_by_reference"], [145, 4, 1, "", "count_lncrna_labels_by_resource"], [145, 4, 1, "", "count_lncrnas"], [145, 4, 1, "", "count_lncrnas_by_data_model"], [145, 4, 1, "", "count_lncrnas_by_interaction_type"], [145, 4, 1, "", "count_lncrnas_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_lncrnas_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_lncrnas_by_reference"], [145, 4, 1, "", "count_lncrnas_by_resource"], [145, 4, 1, "", "count_mirna_identifiers"], [145, 4, 1, "", "count_mirna_identifiers_by_data_model"], [145, 4, 1, "", "count_mirna_identifiers_by_interaction_type"], [145, 4, 1, "", "count_mirna_identifiers_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_mirna_identifiers_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_mirna_identifiers_by_reference"], [145, 4, 1, "", "count_mirna_identifiers_by_resource"], [145, 4, 1, "", "count_mirna_labels"], [145, 4, 1, "", "count_mirna_labels_by_data_model"], [145, 4, 1, "", "count_mirna_labels_by_interaction_type"], [145, 4, 1, "", "count_mirna_labels_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_mirna_labels_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_mirna_labels_by_reference"], [145, 4, 1, "", "count_mirna_labels_by_resource"], [145, 4, 1, "", "count_mirnas"], [145, 4, 1, "", "count_mirnas_by_data_model"], [145, 4, 1, "", "count_mirnas_by_interaction_type"], [145, 4, 1, "", "count_mirnas_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_mirnas_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_mirnas_by_reference"], [145, 4, 1, "", "count_mirnas_by_resource"], [145, 2, 1, "", "count_partners"], [145, 4, 1, "", "count_post_transcriptionally_activated_by"], [145, 4, 1, "", "count_post_transcriptionally_activates"], [145, 4, 1, "", "count_post_transcriptionally_regulated_by"], [145, 4, 1, "", "count_post_transcriptionally_regulates"], [145, 4, 1, "", "count_post_transcriptionally_suppressed_by"], [145, 4, 1, "", "count_post_transcriptionally_suppresses"], [145, 4, 1, "", "count_post_translationally_activated_by"], [145, 4, 1, "", "count_post_translationally_activates"], [145, 4, 1, "", "count_post_translationally_regulated_by"], [145, 4, 1, "", "count_post_translationally_regulates"], [145, 4, 1, "", "count_post_translationally_suppressed_by"], [145, 4, 1, "", "count_post_translationally_suppresses"], [145, 4, 1, "", "count_protein_identifiers"], [145, 4, 1, "", "count_protein_identifiers_by_data_model"], [145, 4, 1, "", "count_protein_identifiers_by_interaction_type"], [145, 4, 1, "", "count_protein_identifiers_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_protein_identifiers_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_protein_identifiers_by_reference"], [145, 4, 1, "", "count_protein_identifiers_by_resource"], [145, 4, 1, "", "count_protein_labels"], [145, 4, 1, "", "count_protein_labels_by_data_model"], [145, 4, 1, "", "count_protein_labels_by_interaction_type"], [145, 4, 1, "", "count_protein_labels_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_protein_labels_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_protein_labels_by_reference"], [145, 4, 1, "", "count_protein_labels_by_resource"], [145, 4, 1, "", "count_proteins"], [145, 4, 1, "", "count_proteins_by_data_model"], [145, 4, 1, "", "count_proteins_by_interaction_type"], [145, 4, 1, "", "count_proteins_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_proteins_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_proteins_by_reference"], [145, 4, 1, "", "count_proteins_by_resource"], [145, 4, 1, "", "count_references"], [145, 4, 1, "", "count_references_by_data_model"], [145, 4, 1, "", "count_references_by_interaction_type"], [145, 4, 1, "", "count_references_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_references_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_references_by_reference"], [145, 4, 1, "", "count_references_by_resource"], [145, 4, 1, "", "count_regulated_by"], [145, 4, 1, "", "count_regulates"], [145, 4, 1, "", "count_resource_names"], [145, 4, 1, "", "count_resource_names_by_data_model"], [145, 4, 1, "", "count_resource_names_by_interaction_type"], [145, 4, 1, "", "count_resource_names_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_resource_names_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_resource_names_by_reference"], [145, 4, 1, "", "count_resource_names_by_resource"], [145, 4, 1, "", "count_resource_names_via"], [145, 4, 1, "", "count_resource_names_via_by_data_model"], [145, 4, 1, "", "count_resource_names_via_by_interaction_type"], [145, 4, 1, "", "count_resource_names_via_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_resource_names_via_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_resource_names_via_by_reference"], [145, 4, 1, "", "count_resource_names_via_by_resource"], [145, 4, 1, "", "count_resources"], [145, 4, 1, "", "count_resources_by_data_model"], [145, 4, 1, "", "count_resources_by_interaction_type"], [145, 4, 1, "", "count_resources_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_resources_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_resources_by_reference"], [145, 4, 1, "", "count_resources_by_resource"], [145, 4, 1, "", "count_resources_via"], [145, 4, 1, "", "count_resources_via_by_data_model"], [145, 4, 1, "", "count_resources_via_by_interaction_type"], [145, 4, 1, "", "count_resources_via_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_resources_via_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_resources_via_by_reference"], [145, 4, 1, "", "count_resources_via_by_resource"], [145, 4, 1, "", "count_small_molecule_identifiers"], [145, 4, 1, "", "count_small_molecule_identifiers_by_data_model"], [145, 4, 1, "", "count_small_molecule_identifiers_by_interaction_type"], [145, 4, 1, "", "count_small_molecule_identifiers_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_small_molecule_identifiers_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_small_molecule_identifiers_by_reference"], [145, 4, 1, "", "count_small_molecule_identifiers_by_resource"], [145, 4, 1, "", "count_small_molecule_labels"], [145, 4, 1, "", "count_small_molecule_labels_by_data_model"], [145, 4, 1, "", "count_small_molecule_labels_by_interaction_type"], [145, 4, 1, "", "count_small_molecule_labels_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_small_molecule_labels_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_small_molecule_labels_by_reference"], [145, 4, 1, "", "count_small_molecule_labels_by_resource"], [145, 4, 1, "", "count_small_molecules"], [145, 4, 1, "", "count_small_molecules_by_data_model"], [145, 4, 1, "", "count_small_molecules_by_interaction_type"], [145, 4, 1, "", "count_small_molecules_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_small_molecules_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_small_molecules_by_reference"], [145, 4, 1, "", "count_small_molecules_by_resource"], [145, 4, 1, "", "count_suppressed_by"], [145, 4, 1, "", "count_suppresses"], [145, 4, 1, "", "count_transcriptionally_activated_by"], [145, 4, 1, "", "count_transcriptionally_activates"], [145, 4, 1, "", "count_transcriptionally_regulated_by"], [145, 4, 1, "", "count_transcriptionally_regulates"], [145, 4, 1, "", "count_transcriptionally_suppressed_by"], [145, 4, 1, "", "count_transcriptionally_suppresses"], [145, 4, 1, "", "curation_effort_by_data_model"], [145, 4, 1, "", "curation_effort_by_interaction_type"], [145, 4, 1, "", "curation_effort_by_interaction_type_and_data_model"], [145, 4, 1, "", "curation_effort_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "curation_effort_by_reference"], [145, 4, 1, "", "curation_effort_by_resource"], [145, 4, 1, "", "data_models_by_data_model"], [145, 4, 1, "", "data_models_by_interaction_type"], [145, 4, 1, "", "data_models_by_interaction_type_and_data_model"], [145, 4, 1, "", "data_models_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "data_models_by_reference"], [145, 4, 1, "", "data_models_by_resource"], [145, 4, 1, "", "degrees_directed_by_data_model"], [145, 4, 1, "", "degrees_directed_by_interaction_type"], [145, 4, 1, "", "degrees_directed_by_interaction_type_and_data_model"], [145, 4, 1, "", "degrees_directed_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "degrees_directed_by_reference"], [145, 4, 1, "", "degrees_directed_by_resource"], [145, 4, 1, "", "degrees_directed_in_by_data_model"], [145, 4, 1, "", "degrees_directed_in_by_interaction_type"], [145, 4, 1, "", "degrees_directed_in_by_interaction_type_and_data_model"], [145, 4, 1, "", "degrees_directed_in_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "degrees_directed_in_by_reference"], [145, 4, 1, "", "degrees_directed_in_by_resource"], [145, 4, 1, "", "degrees_directed_out_by_data_model"], [145, 4, 1, "", "degrees_directed_out_by_interaction_type"], [145, 4, 1, "", "degrees_directed_out_by_interaction_type_and_data_model"], [145, 4, 1, "", "degrees_directed_out_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "degrees_directed_out_by_reference"], [145, 4, 1, "", "degrees_directed_out_by_resource"], [145, 4, 1, "", "degrees_negative_by_data_model"], [145, 4, 1, "", "degrees_negative_by_interaction_type"], [145, 4, 1, "", "degrees_negative_by_interaction_type_and_data_model"], [145, 4, 1, "", "degrees_negative_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "degrees_negative_by_reference"], [145, 4, 1, "", "degrees_negative_by_resource"], [145, 4, 1, "", "degrees_negative_in_by_data_model"], [145, 4, 1, "", "degrees_negative_in_by_interaction_type"], [145, 4, 1, "", "degrees_negative_in_by_interaction_type_and_data_model"], [145, 4, 1, "", "degrees_negative_in_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "degrees_negative_in_by_reference"], [145, 4, 1, "", "degrees_negative_in_by_resource"], [145, 4, 1, "", "degrees_negative_out_by_data_model"], [145, 4, 1, "", "degrees_negative_out_by_interaction_type"], [145, 4, 1, "", "degrees_negative_out_by_interaction_type_and_data_model"], [145, 4, 1, "", "degrees_negative_out_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "degrees_negative_out_by_reference"], [145, 4, 1, "", "degrees_negative_out_by_resource"], [145, 4, 1, "", "degrees_non_directed_by_data_model"], [145, 4, 1, "", "degrees_non_directed_by_interaction_type"], [145, 4, 1, "", "degrees_non_directed_by_interaction_type_and_data_model"], [145, 4, 1, "", "degrees_non_directed_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "degrees_non_directed_by_reference"], [145, 4, 1, "", "degrees_non_directed_by_resource"], [145, 4, 1, "", "degrees_positive_by_data_model"], [145, 4, 1, "", "degrees_positive_by_interaction_type"], [145, 4, 1, "", "degrees_positive_by_interaction_type_and_data_model"], [145, 4, 1, "", "degrees_positive_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "degrees_positive_by_reference"], [145, 4, 1, "", "degrees_positive_by_resource"], [145, 4, 1, "", "degrees_positive_in_by_data_model"], [145, 4, 1, "", "degrees_positive_in_by_interaction_type"], [145, 4, 1, "", "degrees_positive_in_by_interaction_type_and_data_model"], [145, 4, 1, "", "degrees_positive_in_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "degrees_positive_in_by_reference"], [145, 4, 1, "", "degrees_positive_in_by_resource"], [145, 4, 1, "", "degrees_positive_out_by_data_model"], [145, 4, 1, "", "degrees_positive_out_by_interaction_type"], [145, 4, 1, "", "degrees_positive_out_by_interaction_type_and_data_model"], [145, 4, 1, "", "degrees_positive_out_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "degrees_positive_out_by_reference"], [145, 4, 1, "", "degrees_positive_out_by_resource"], [145, 4, 1, "", "degrees_signed_by_data_model"], [145, 4, 1, "", "degrees_signed_by_interaction_type"], [145, 4, 1, "", "degrees_signed_by_interaction_type_and_data_model"], [145, 4, 1, "", "degrees_signed_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "degrees_signed_by_reference"], [145, 4, 1, "", "degrees_signed_by_resource"], [145, 4, 1, "", "degrees_signed_in_by_data_model"], [145, 4, 1, "", "degrees_signed_in_by_interaction_type"], [145, 4, 1, "", "degrees_signed_in_by_interaction_type_and_data_model"], [145, 4, 1, "", "degrees_signed_in_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "degrees_signed_in_by_reference"], [145, 4, 1, "", "degrees_signed_in_by_resource"], [145, 4, 1, "", "degrees_signed_out_by_data_model"], [145, 4, 1, "", "degrees_signed_out_by_interaction_type"], [145, 4, 1, "", "degrees_signed_out_by_interaction_type_and_data_model"], [145, 4, 1, "", "degrees_signed_out_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "degrees_signed_out_by_reference"], [145, 4, 1, "", "degrees_signed_out_by_resource"], [145, 4, 1, "", "degrees_undirected_by_data_model"], [145, 4, 1, "", "degrees_undirected_by_interaction_type"], [145, 4, 1, "", "degrees_undirected_by_interaction_type_and_data_model"], [145, 4, 1, "", "degrees_undirected_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "degrees_undirected_by_reference"], [145, 4, 1, "", "degrees_undirected_by_resource"], [145, 2, 1, "", "direction_consistency"], [145, 2, 1, "", "dorothea"], [145, 4, 1, "", "entities_by_data_model"], [145, 4, 1, "", "entities_by_interaction_type"], [145, 4, 1, "", "entities_by_interaction_type_and_data_model"], [145, 4, 1, "", "entities_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "entities_by_reference"], [145, 4, 1, "", "entities_by_resource"], [145, 2, 1, "", "entity_by_id"], [145, 2, 1, "", "entity_by_label"], [145, 4, 1, "", "evidences_by_data_model"], [145, 4, 1, "", "evidences_by_interaction_type"], [145, 4, 1, "", "evidences_by_interaction_type_and_data_model"], [145, 4, 1, "", "evidences_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "evidences_by_reference"], [145, 4, 1, "", "evidences_by_resource"], [145, 2, 1, "", "extra_directions"], [145, 2, 1, "", "find_paths"], [145, 2, 1, "", "from_igraph"], [145, 2, 1, "", "from_pickle"], [145, 4, 1, "", "get_complex_identifiers"], [145, 4, 1, "", "get_complex_labels"], [145, 4, 1, "", "get_complexes"], [145, 4, 1, "", "get_curation_effort"], [145, 4, 1, "", "get_data_models"], [145, 4, 1, "", "get_degrees_directed"], [145, 4, 1, "", "get_degrees_directed_in"], [145, 4, 1, "", "get_degrees_directed_out"], [145, 4, 1, "", "get_degrees_negative"], [145, 4, 1, "", "get_degrees_negative_in"], [145, 4, 1, "", "get_degrees_negative_out"], [145, 4, 1, "", "get_degrees_non_directed"], [145, 4, 1, "", "get_degrees_positive"], [145, 4, 1, "", "get_degrees_positive_in"], [145, 4, 1, "", "get_degrees_positive_out"], [145, 4, 1, "", "get_degrees_signed"], [145, 4, 1, "", "get_degrees_signed_in"], [145, 4, 1, "", "get_degrees_signed_out"], [145, 4, 1, "", "get_degrees_undirected"], [145, 4, 1, "", "get_entities"], [145, 4, 1, "", "get_evidences"], [145, 4, 1, "", "get_identifiers"], [145, 4, 1, "", "get_interaction_types"], [145, 4, 1, "", "get_interactions"], [145, 4, 1, "", "get_interactions_0"], [145, 4, 1, "", "get_interactions_directed"], [145, 4, 1, "", "get_interactions_mutual"], [145, 4, 1, "", "get_interactions_negative"], [145, 4, 1, "", "get_interactions_non_directed"], [145, 4, 1, "", "get_interactions_non_directed_0"], [145, 4, 1, "", "get_interactions_positive"], [145, 4, 1, "", "get_interactions_signed"], [145, 4, 1, "", "get_interactions_undirected"], [145, 4, 1, "", "get_interactions_undirected_0"], [145, 4, 1, "", "get_labels"], [145, 4, 1, "", "get_lncrna_identifiers"], [145, 4, 1, "", "get_lncrna_labels"], [145, 4, 1, "", "get_lncrnas"], [145, 4, 1, "", "get_mirna_identifiers"], [145, 4, 1, "", "get_mirna_labels"], [145, 4, 1, "", "get_mirnas"], [145, 2, 1, "", "get_organisms"], [145, 4, 1, "", "get_protein_identifiers"], [145, 4, 1, "", "get_protein_labels"], [145, 4, 1, "", "get_proteins"], [145, 4, 1, "", "get_references"], [145, 4, 1, "", "get_resource_names"], [145, 4, 1, "", "get_resource_names_via"], [145, 4, 1, "", "get_resources"], [145, 4, 1, "", "get_resources_via"], [145, 4, 1, "", "get_small_molecule_identifiers"], [145, 4, 1, "", "get_small_molecule_labels"], [145, 4, 1, "", "get_small_molecules"], [145, 2, 1, "", "htp_interactions"], [145, 2, 1, "", "htp_references"], [145, 4, 1, "", "identifiers_by_data_model"], [145, 4, 1, "", "identifiers_by_interaction_type"], [145, 4, 1, "", "identifiers_by_interaction_type_and_data_model"], [145, 4, 1, "", "identifiers_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "identifiers_by_reference"], [145, 4, 1, "", "identifiers_by_resource"], [145, 2, 1, "", "init_network"], [145, 2, 1, "", "interaction"], [145, 2, 1, "", "interaction_by_id"], [145, 2, 1, "", "interaction_by_label"], [145, 4, 1, "", "interaction_types_by_data_model"], [145, 4, 1, "", "interaction_types_by_interaction_type"], [145, 4, 1, "", "interaction_types_by_interaction_type_and_data_model"], [145, 4, 1, "", "interaction_types_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "interaction_types_by_reference"], [145, 4, 1, "", "interaction_types_by_resource"], [145, 4, 1, "", "interactions_0_by_data_model"], [145, 4, 1, "", "interactions_0_by_interaction_type"], [145, 4, 1, "", "interactions_0_by_interaction_type_and_data_model"], [145, 4, 1, "", "interactions_0_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "interactions_0_by_reference"], [145, 4, 1, "", "interactions_0_by_resource"], [145, 4, 1, "", "interactions_by_data_model"], [145, 4, 1, "", "interactions_by_interaction_type"], [145, 4, 1, "", "interactions_by_interaction_type_and_data_model"], [145, 4, 1, "", "interactions_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "interactions_by_reference"], [145, 4, 1, "", "interactions_by_resource"], [145, 4, 1, "", "interactions_directed_by_data_model"], [145, 4, 1, "", "interactions_directed_by_interaction_type"], [145, 4, 1, "", "interactions_directed_by_interaction_type_and_data_model"], [145, 4, 1, "", "interactions_directed_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "interactions_directed_by_reference"], [145, 4, 1, "", "interactions_directed_by_resource"], [145, 4, 1, "", "interactions_mutual_by_data_model"], [145, 4, 1, "", "interactions_mutual_by_interaction_type"], [145, 4, 1, "", "interactions_mutual_by_interaction_type_and_data_model"], [145, 4, 1, "", "interactions_mutual_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "interactions_mutual_by_reference"], [145, 4, 1, "", "interactions_mutual_by_resource"], [145, 4, 1, "", "interactions_negative_by_data_model"], [145, 4, 1, "", "interactions_negative_by_interaction_type"], [145, 4, 1, "", "interactions_negative_by_interaction_type_and_data_model"], [145, 4, 1, "", "interactions_negative_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "interactions_negative_by_reference"], [145, 4, 1, "", "interactions_negative_by_resource"], [145, 4, 1, "", "interactions_non_directed_0_by_data_model"], [145, 4, 1, "", "interactions_non_directed_0_by_interaction_type"], [145, 4, 1, "", "interactions_non_directed_0_by_interaction_type_and_data_model"], [145, 4, 1, "", "interactions_non_directed_0_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "interactions_non_directed_0_by_reference"], [145, 4, 1, "", "interactions_non_directed_0_by_resource"], [145, 4, 1, "", "interactions_non_directed_by_data_model"], [145, 4, 1, "", "interactions_non_directed_by_interaction_type"], [145, 4, 1, "", "interactions_non_directed_by_interaction_type_and_data_model"], [145, 4, 1, "", "interactions_non_directed_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "interactions_non_directed_by_reference"], [145, 4, 1, "", "interactions_non_directed_by_resource"], [145, 4, 1, "", "interactions_positive_by_data_model"], [145, 4, 1, "", "interactions_positive_by_interaction_type"], [145, 4, 1, "", "interactions_positive_by_interaction_type_and_data_model"], [145, 4, 1, "", "interactions_positive_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "interactions_positive_by_reference"], [145, 4, 1, "", "interactions_positive_by_resource"], [145, 4, 1, "", "interactions_signed_by_data_model"], [145, 4, 1, "", "interactions_signed_by_interaction_type"], [145, 4, 1, "", "interactions_signed_by_interaction_type_and_data_model"], [145, 4, 1, "", "interactions_signed_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "interactions_signed_by_reference"], [145, 4, 1, "", "interactions_signed_by_resource"], [145, 4, 1, "", "interactions_undirected_0_by_data_model"], [145, 4, 1, "", "interactions_undirected_0_by_interaction_type"], [145, 4, 1, "", "interactions_undirected_0_by_interaction_type_and_data_model"], [145, 4, 1, "", "interactions_undirected_0_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "interactions_undirected_0_by_reference"], [145, 4, 1, "", "interactions_undirected_0_by_resource"], [145, 4, 1, "", "interactions_undirected_by_data_model"], [145, 4, 1, "", "interactions_undirected_by_interaction_type"], [145, 4, 1, "", "interactions_undirected_by_interaction_type_and_data_model"], [145, 4, 1, "", "interactions_undirected_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "interactions_undirected_by_reference"], [145, 4, 1, "", "interactions_undirected_by_resource"], [145, 4, 1, "", "labels_by_data_model"], [145, 4, 1, "", "labels_by_interaction_type"], [145, 4, 1, "", "labels_by_interaction_type_and_data_model"], [145, 4, 1, "", "labels_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "labels_by_reference"], [145, 4, 1, "", "labels_by_resource"], [145, 4, 1, "", "lncrna_identifiers_by_data_model"], [145, 4, 1, "", "lncrna_identifiers_by_interaction_type"], [145, 4, 1, "", "lncrna_identifiers_by_interaction_type_and_data_model"], [145, 4, 1, "", "lncrna_identifiers_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "lncrna_identifiers_by_reference"], [145, 4, 1, "", "lncrna_identifiers_by_resource"], [145, 4, 1, "", "lncrna_labels_by_data_model"], [145, 4, 1, "", "lncrna_labels_by_interaction_type"], [145, 4, 1, "", "lncrna_labels_by_interaction_type_and_data_model"], [145, 4, 1, "", "lncrna_labels_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "lncrna_labels_by_reference"], [145, 4, 1, "", "lncrna_labels_by_resource"], [145, 4, 1, "", "lncrnas_by_data_model"], [145, 4, 1, "", "lncrnas_by_interaction_type"], [145, 4, 1, "", "lncrnas_by_interaction_type_and_data_model"], [145, 4, 1, "", "lncrnas_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "lncrnas_by_reference"], [145, 4, 1, "", "lncrnas_by_resource"], [145, 2, 1, "", "load"], [145, 2, 1, "", "load_from_pickle"], [145, 2, 1, "", "load_resource"], [145, 2, 1, "", "load_resources"], [145, 2, 1, "", "make_df"], [145, 4, 1, "", "mirna_identifiers_by_data_model"], [145, 4, 1, "", "mirna_identifiers_by_interaction_type"], [145, 4, 1, "", "mirna_identifiers_by_interaction_type_and_data_model"], [145, 4, 1, "", "mirna_identifiers_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "mirna_identifiers_by_reference"], [145, 4, 1, "", "mirna_identifiers_by_resource"], [145, 4, 1, "", "mirna_labels_by_data_model"], [145, 4, 1, "", "mirna_labels_by_interaction_type"], [145, 4, 1, "", "mirna_labels_by_interaction_type_and_data_model"], [145, 4, 1, "", "mirna_labels_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "mirna_labels_by_reference"], [145, 4, 1, "", "mirna_labels_by_resource"], [145, 2, 1, "", "mirna_target"], [145, 4, 1, "", "mirnas_by_data_model"], [145, 4, 1, "", "mirnas_by_interaction_type"], [145, 4, 1, "", "mirnas_by_interaction_type_and_data_model"], [145, 4, 1, "", "mirnas_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "mirnas_by_reference"], [145, 4, 1, "", "mirnas_by_resource"], [145, 2, 1, "", "numof_interactions_per_reference"], [145, 2, 1, "", "organisms_check"], [145, 2, 1, "", "partners"], [145, 4, 1, "", "post_transcriptionally_activated_by"], [145, 4, 1, "", "post_transcriptionally_activates"], [145, 4, 1, "", "post_transcriptionally_regulated_by"], [145, 4, 1, "", "post_transcriptionally_regulates"], [145, 4, 1, "", "post_transcriptionally_suppressed_by"], [145, 4, 1, "", "post_transcriptionally_suppresses"], [145, 4, 1, "", "post_translationally_activated_by"], [145, 4, 1, "", "post_translationally_activates"], [145, 4, 1, "", "post_translationally_regulated_by"], [145, 4, 1, "", "post_translationally_regulates"], [145, 4, 1, "", "post_translationally_suppressed_by"], [145, 4, 1, "", "post_translationally_suppresses"], [145, 4, 1, "", "protein_identifiers_by_data_model"], [145, 4, 1, "", "protein_identifiers_by_interaction_type"], [145, 4, 1, "", "protein_identifiers_by_interaction_type_and_data_model"], [145, 4, 1, "", "protein_identifiers_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "protein_identifiers_by_reference"], [145, 4, 1, "", "protein_identifiers_by_resource"], [145, 4, 1, "", "protein_labels_by_data_model"], [145, 4, 1, "", "protein_labels_by_interaction_type"], [145, 4, 1, "", "protein_labels_by_interaction_type_and_data_model"], [145, 4, 1, "", "protein_labels_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "protein_labels_by_reference"], [145, 4, 1, "", "protein_labels_by_resource"], [145, 4, 1, "", "proteins_by_data_model"], [145, 4, 1, "", "proteins_by_interaction_type"], [145, 4, 1, "", "proteins_by_interaction_type_and_data_model"], [145, 4, 1, "", "proteins_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "proteins_by_reference"], [145, 4, 1, "", "proteins_by_resource"], [145, 2, 1, "", "random_interaction"], [145, 4, 1, "", "references_by_data_model"], [145, 4, 1, "", "references_by_interaction_type"], [145, 4, 1, "", "references_by_interaction_type_and_data_model"], [145, 4, 1, "", "references_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "references_by_reference"], [145, 4, 1, "", "references_by_resource"], [145, 4, 1, "", "regulated_by"], [145, 4, 1, "", "regulates"], [145, 2, 1, "", "reload"], [145, 2, 1, "", "remove_interaction"], [145, 2, 1, "", "remove_loops"], [145, 2, 1, "", "remove_node"], [145, 2, 1, "", "remove_zero_degree"], [145, 2, 1, "", "reset"], [145, 5, 1, "", "resource_names"], [145, 4, 1, "", "resource_names_by_data_model"], [145, 4, 1, "", "resource_names_by_interaction_type"], [145, 4, 1, "", "resource_names_by_interaction_type_and_data_model"], [145, 4, 1, "", "resource_names_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "resource_names_by_reference"], [145, 4, 1, "", "resource_names_by_resource"], [145, 4, 1, "", "resource_names_via_by_data_model"], [145, 4, 1, "", "resource_names_via_by_interaction_type"], [145, 4, 1, "", "resource_names_via_by_interaction_type_and_data_model"], [145, 4, 1, "", "resource_names_via_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "resource_names_via_by_reference"], [145, 4, 1, "", "resource_names_via_by_resource"], [145, 5, 1, "", "resources"], [145, 4, 1, "", "resources_by_data_model"], [145, 4, 1, "", "resources_by_interaction_type"], [145, 4, 1, "", "resources_by_interaction_type_and_data_model"], [145, 4, 1, "", "resources_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "resources_by_reference"], [145, 4, 1, "", "resources_by_resource"], [145, 4, 1, "", "resources_via_by_data_model"], [145, 4, 1, "", "resources_via_by_interaction_type"], [145, 4, 1, "", "resources_via_by_interaction_type_and_data_model"], [145, 4, 1, "", "resources_via_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "resources_via_by_reference"], [145, 4, 1, "", "resources_via_by_resource"], [145, 2, 1, "", "save_to_pickle"], [145, 4, 1, "", "small_molecule_identifiers_by_data_model"], [145, 4, 1, "", "small_molecule_identifiers_by_interaction_type"], [145, 4, 1, "", "small_molecule_identifiers_by_interaction_type_and_data_model"], [145, 4, 1, "", "small_molecule_identifiers_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "small_molecule_identifiers_by_reference"], [145, 4, 1, "", "small_molecule_identifiers_by_resource"], [145, 4, 1, "", "small_molecule_labels_by_data_model"], [145, 4, 1, "", "small_molecule_labels_by_interaction_type"], [145, 4, 1, "", "small_molecule_labels_by_interaction_type_and_data_model"], [145, 4, 1, "", "small_molecule_labels_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "small_molecule_labels_by_reference"], [145, 4, 1, "", "small_molecule_labels_by_resource"], [145, 4, 1, "", "small_molecules_by_data_model"], [145, 4, 1, "", "small_molecules_by_interaction_type"], [145, 4, 1, "", "small_molecules_by_interaction_type_and_data_model"], [145, 4, 1, "", "small_molecules_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "small_molecules_by_reference"], [145, 4, 1, "", "small_molecules_by_resource"], [145, 2, 1, "", "summaries_tab"], [145, 4, 1, "", "suppressed_by"], [145, 4, 1, "", "suppresses"], [145, 2, 1, "", "to_igraph"], [145, 2, 1, "", "transcription"], [145, 4, 1, "", "transcriptionally_activated_by"], [145, 4, 1, "", "transcriptionally_activates"], [145, 4, 1, "", "transcriptionally_regulated_by"], [145, 4, 1, "", "transcriptionally_regulates"], [145, 4, 1, "", "transcriptionally_suppressed_by"], [145, 4, 1, "", "transcriptionally_suppresses"]], "pypath.core.network.NetworkEntityCollection": [[146, 2, 1, "", "__init__"]], "pypath.core.network.NetworkStatsRecord": [[147, 2, 1, "", "__init__"], [147, 4, 1, "", "by_category"], [147, 4, 1, "", "by_resource"], [147, 4, 1, "", "cat_resource"], [147, 2, 1, "", "count"], [147, 2, 1, "", "index"], [147, 4, 1, "", "label"], [147, 4, 1, "", "method"], [147, 4, 1, "", "percent"], [147, 4, 1, "", "percent_cat"], [147, 4, 1, "", "percent_res_cat"], [147, 4, 1, "", "resource_cat"], [147, 4, 1, "", "shared"], [147, 4, 1, "", "shared_cat"], [147, 4, 1, "", "shared_res_cat"], [147, 4, 1, "", "total"], [147, 4, 1, "", "unique"], [147, 4, 1, "", "unique_cat"], [147, 4, 1, "", "unique_res_cat"]], "pypath.inputs": [[154, 0, 0, "-", "abs"], [156, 0, 0, "-", "acsn"], [159, 0, 0, "-", "adhesome"], [162, 0, 0, "-", "almen2009"], [164, 0, 0, "-", "baccin2019"], [167, 0, 0, "-", "biogps"], [173, 0, 0, "-", "biogrid"], [176, 0, 0, "-", "biomart"], [182, 0, 0, "-", "biomodels"], [188, 0, 0, "-", "ca1"], [190, 0, 0, "-", "cancercellmap"], [192, 0, 0, "-", "cancerdrugsdb"], [196, 0, 0, "-", "cancersea"], [198, 0, 0, "-", "cell"], [200, 0, 0, "-", "cellcall"], [205, 0, 0, "-", "cellcellinteractions"], [207, 0, 0, "-", "cellchatdb"], [213, 0, 0, "-", "cellinker"], [225, 0, 0, "-", "cellphonedb"], [232, 0, 0, "-", "celltalkdb"], [236, 0, 0, "-", "celltypist"], [238, 0, 0, "-", "chembl"], [246, 0, 0, "-", "clinvar"], [249, 0, 0, "-", "collectri"], [251, 0, 0, "-", "common"], [258, 0, 0, "-", "compleat"], [261, 0, 0, "-", "complexportal"], [263, 0, 0, "-", "comppi"], [266, 0, 0, "-", "connectomedb"], [269, 0, 0, "-", "corum"], [271, 0, 0, "-", "cosmic"], [273, 0, 0, "-", "cpad"], [277, 0, 0, "-", "cpdb"], [280, 0, 0, "-", "credentials"], [282, 0, 0, "-", "csa"], [284, 0, 0, "-", "cspa"], [288, 0, 0, "-", "ctdbase"], [291, 0, 0, "-", "cytosig"], [294, 0, 0, "-", "dbptm"], [298, 0, 0, "-", "deathdomain"], [301, 0, 0, "-", "depod"], [304, 0, 0, "-", "dgidb"], [308, 0, 0, "-", "dip"], [311, 0, 0, "-", "disgenet"], [316, 0, 0, "-", "domino"], [321, 0, 0, "-", "dorothea"], [332, 0, 0, "-", "drugbank"], [339, 0, 0, "-", "drugcentral"], [343, 0, 0, "-", "ebi"], [345, 0, 0, "-", "elm"], [350, 0, 0, "-", "embopress"], [352, 0, 0, "-", "embrace"], [357, 0, 0, "-", "encode"], [359, 0, 0, "-", "ensembl"], [361, 0, 0, "-", "exocarta"], [364, 0, 0, "-", "genecards"], [368, 3, 1, "", "get_method"], [369, 0, 0, "-", "go"], [391, 0, 0, "-", "gpcrdb"], [393, 0, 0, "-", "graphviz"], [395, 0, 0, "-", "guide2pharma"], [399, 0, 0, "-", "havugimana"], [402, 0, 0, "-", "hgnc"], [404, 0, 0, "-", "hippie"], [406, 0, 0, "-", "hmdb"], [413, 0, 0, "-", "homologene"], [417, 0, 0, "-", "hpmr"], [423, 0, 0, "-", "hpo"], [428, 0, 0, "-", "hprd"], [433, 0, 0, "-", "htri"], [435, 0, 0, "-", "humancellmap"], [437, 0, 0, "-", "humap"], [440, 0, 0, "-", "huri"], [453, 0, 0, "-", "i3d"], [455, 0, 0, "-", "icellnet"], [460, 0, 0, "-", "ielm"], [463, 0, 0, "-", "imweb"], [466, 0, 0, "-", "innatedb"], [468, 0, 0, "-", "instruct"], [471, 0, 0, "-", "intact"], [473, 0, 0, "-", "integrins"], [475, 0, 0, "-", "interpro"], [480, 0, 0, "-", "intogen"], [482, 0, 0, "-", "ipi"], [484, 0, 0, "-", "iptmnet"], [487, 0, 0, "-", "italk"], [491, 0, 0, "-", "kea"], [494, 0, 0, "-", "kegg"], [504, 0, 0, "-", "kegg_api"], [521, 0, 0, "-", "kinasedotcom"], [523, 0, 0, "-", "kirouac2010"], [525, 0, 0, "-", "lambert2018"], [528, 0, 0, "-", "laudanna"], [531, 0, 0, "-", "li2012"], [536, 0, 0, "-", "lincs"], [538, 0, 0, "-", "lmpid"], [542, 0, 0, "-", "lncdisease"], [544, 0, 0, "-", "lncrnadb"], [546, 0, 0, "-", "locate"], [548, 0, 0, "-", "lrdb"], [552, 0, 0, "-", "macrophage"], [554, 0, 0, "-", "main"], [555, 0, 0, "-", "matrisome"], [557, 0, 0, "-", "matrixdb"], [563, 0, 0, "-", "mcam"], [565, 0, 0, "-", "membranome"], [567, 0, 0, "-", "mimp"], [571, 0, 0, "-", "mir2disease"], [573, 0, 0, "-", "mirbase"], [581, 0, 0, "-", "mirdeathdb"], [583, 0, 0, "-", "mirecords"], [585, 0, 0, "-", "mirtarbase"], [587, 0, 0, "-", "mitab"], [590, 0, 0, "-", "mppi"], [592, 0, 0, "-", "ncrdeathdb"], [594, 0, 0, "-", "negatome"], [596, 0, 0, "-", "netbiol"], [599, 0, 0, "-", "netpath"], [603, 0, 0, "-", "oma"], [605, 0, 0, "-", "ontology"], [608, 0, 0, "-", "opm"], [610, 0, 0, "-", "oreganno"], [613, 0, 0, "-", "panglaodb"], [616, 0, 0, "-", "pathophenodb"], [619, 0, 0, "-", "pathwaycommons"], [636, 0, 0, "-", "pazar"], [638, 0, 0, "-", "pdb"], [642, 0, 0, "-", "pdzbase"], [644, 0, 0, "-", "pepcyber"], [647, 0, 0, "-", "pfam"], [652, 0, 0, "-", "pharos"], [661, 0, 0, "-", "phobius"], [663, 0, 0, "-", "phosphatome"], [665, 0, 0, "-", "phosphoelm"], [669, 0, 0, "-", "phosphonetworks"], [672, 0, 0, "-", "phosphopoint"], [675, 0, 0, "-", "phosphosite"], [688, 0, 0, "-", "pisa"], [692, 0, 0, "-", "pro"], [695, 0, 0, "-", "progeny"], [698, 0, 0, "-", "proteinatlas"], [703, 0, 0, "-", "proteins"], [705, 0, 0, "-", "protmapper"], [709, 0, 0, "-", "pubchem"], [711, 0, 0, "-", "pubmed"], [718, 0, 0, "-", "ramilowski2015"], [721, 0, 0, "-", "ramp"], [728, 0, 0, "-", "rdata"], [729, 0, 0, "-", "reaction"], [749, 0, 0, "-", "scconnect"], [753, 0, 0, "-", "science"], [755, 0, 0, "-", "signalink"], [760, 0, 0, "-", "signor"], [767, 0, 0, "-", "spike"], [770, 0, 0, "-", "stitch"], [773, 0, 0, "-", "string"], [778, 0, 0, "-", "surfaceome"], [780, 0, 0, "-", "switches_elm"], [782, 0, 0, "-", "talklr"], [786, 0, 0, "-", "tcdb"], [790, 0, 0, "-", "tfcensus"], [792, 0, 0, "-", "threedcomplex"], [798, 0, 0, "-", "threedid"], [803, 0, 0, "-", "topdb"], [805, 0, 0, "-", "transmir"], [807, 0, 0, "-", "trip"], [814, 0, 0, "-", "unichem"], [819, 0, 0, "-", "uniprot"], [850, 0, 0, "-", "wang"], [855, 0, 0, "-", "wojtowicz2020"], [858, 0, 0, "-", "zhong2015"]], "pypath.inputs.abs": [[155, 3, 1, "", "abs_interactions"]], "pypath.inputs.acsn": [[157, 3, 1, "", "acsn_interactions"], [158, 3, 1, "", "acsn_interactions_sif"]], "pypath.inputs.adhesome": [[160, 3, 1, "", "adhesome_annotations"], [161, 3, 1, "", "adhesome_interactions"]], "pypath.inputs.almen2009": [[163, 3, 1, "", "almen2009_annotations"]], "pypath.inputs.baccin2019": [[165, 3, 1, "", "baccin2019_annotations"], [166, 3, 1, "", "baccin2019_interactions"]], "pypath.inputs.biogps": [[168, 1, 1, "", "BiogpsDataset"], [169, 3, 1, "", "biogps_annotations"], [170, 3, 1, "", "biogps_datasets"], [171, 3, 1, "", "biogps_download"], [172, 3, 1, "", "biogps_download_all"]], "pypath.inputs.biogps.BiogpsDataset": [[168, 2, 1, "", "__init__"], [168, 2, 1, "", "count"], [168, 2, 1, "", "index"], [168, 4, 1, "", "label"], [168, 4, 1, "", "organism"], [168, 4, 1, "", "url"]], "pypath.inputs.biogrid": [[174, 3, 1, "", "biogrid_all_interactions"], [175, 3, 1, "", "biogrid_interactions"]], "pypath.inputs.biomart": [[177, 3, 1, "", "biomart_homology"], [178, 3, 1, "", "biomart_microarray"], [179, 3, 1, "", "biomart_microarray_types"], [180, 3, 1, "", "biomart_microarrays"], [181, 3, 1, "", "biomart_query"]], "pypath.inputs.biomodels": [[183, 3, 1, "", "download_single_model"], [184, 3, 1, "", "get_all_models"], [185, 3, 1, "", "get_biomodels"], [186, 3, 1, "", "get_biomodels_req"], [187, 3, 1, "", "get_single_model"]], "pypath.inputs.ca1": [[189, 3, 1, "", "ca1_interactions"]], "pypath.inputs.cancercellmap": [[191, 3, 1, "", "ccmap_interactions"]], "pypath.inputs.cancerdrugsdb": [[193, 3, 1, "", "cancerdrugsdb_annotations"], [194, 3, 1, "", "cancerdrugsdb_download"], [195, 3, 1, "", "cancerdrugsdb_interactions"]], "pypath.inputs.cancersea": [[197, 3, 1, "", "cancersea_annotations"]], "pypath.inputs.cell": [[199, 3, 1, "", "cell_supplementary"]], "pypath.inputs.cellcall": [[201, 3, 1, "", "cellcall_annotations"], [202, 3, 1, "", "cellcall_download"], [203, 3, 1, "", "cellcall_download_all"], [204, 3, 1, "", "cellcall_interactions"]], "pypath.inputs.cellcellinteractions": [[206, 3, 1, "", "cellcellinteractions_annotations"]], "pypath.inputs.cellchatdb": [[208, 3, 1, "", "cellchatdb_annotations"], [209, 3, 1, "", "cellchatdb_cofactors"], [210, 3, 1, "", "cellchatdb_complexes"], [211, 3, 1, "", "cellchatdb_download"], [212, 3, 1, "", "cellchatdb_interactions"]], "pypath.inputs.cellinker": [[214, 1, 1, "", "CellinkerInteraction"], [215, 3, 1, "", "cellinker_annotations"], [216, 3, 1, "", "cellinker_complex_annotations"], [217, 3, 1, "", "cellinker_complexes"], [218, 3, 1, "", "cellinker_complexes_raw"], [219, 3, 1, "", "cellinker_lr_interactions"], [220, 3, 1, "", "cellinker_lr_interactions_raw"], [221, 3, 1, "", "cellinker_protein_annotations"], [222, 3, 1, "", "cellinker_smol_interactions"], [223, 3, 1, "", "cellinker_smol_interactions_raw"], [224, 3, 1, "", "components_to_complex"]], "pypath.inputs.cellinker.CellinkerInteraction": [[214, 2, 1, "", "__init__"], [214, 2, 1, "", "count"], [214, 2, 1, "", "index"], [214, 4, 1, "", "ligand"], [214, 4, 1, "", "ligand_location"], [214, 4, 1, "", "pmids"], [214, 4, 1, "", "receptor"], [214, 4, 1, "", "receptor_location"], [214, 4, 1, "", "resources"], [214, 4, 1, "", "type"]], "pypath.inputs.cellphonedb": [[226, 1, 1, "", "CellPhoneDBAnnotation"], [227, 3, 1, "", "cellphonedb_complex_annotations"], [228, 3, 1, "", "cellphonedb_complexes"], [229, 3, 1, "", "cellphonedb_interactions"], [230, 3, 1, "", "cellphonedb_ligands_receptors"], [231, 3, 1, "", "cellphonedb_protein_annotations"]], "pypath.inputs.cellphonedb.CellPhoneDBAnnotation": [[226, 2, 1, "", "__init__"], [226, 2, 1, "", "count"], [226, 2, 1, "", "index"], [226, 4, 1, "", "integrin"], [226, 4, 1, "", "peripheral"], [226, 4, 1, "", "receptor"], [226, 4, 1, "", "receptor_class"], [226, 4, 1, "", "secreted"], [226, 4, 1, "", "secreted_class"], [226, 4, 1, "", "transmembrane"]], "pypath.inputs.celltalkdb": [[233, 3, 1, "", "celltalkdb_annotations"], [234, 3, 1, "", "celltalkdb_download"], [235, 3, 1, "", "celltalkdb_interactions"]], "pypath.inputs.celltypist": [[237, 3, 1, "", "celltypist_annotations"]], "pypath.inputs.chembl": [[239, 3, 1, "", "chembl_activities"], [240, 3, 1, "", "chembl_assays"], [241, 3, 1, "", "chembl_documents"], [242, 3, 1, "", "chembl_drug_indications"], [243, 3, 1, "", "chembl_mechanisms"], [244, 3, 1, "", "chembl_molecules"], [245, 3, 1, "", "chembl_targets"]], "pypath.inputs.clinvar": [[247, 3, 1, "", "clinvar_citations"], [248, 3, 1, "", "clinvar_raw"]], "pypath.inputs.collectri": [[250, 3, 1, "", "collectri_interactions"]], "pypath.inputs.common": [[252, 3, 1, "", "csv_sep_change"], [253, 3, 1, "", "glom_fields"], [254, 3, 1, "", "json_extract"], [255, 3, 1, "", "json_read"], [256, 3, 1, "", "read_table"], [257, 3, 1, "", "read_xls"]], "pypath.inputs.compleat": [[259, 3, 1, "", "compleat_complexes"], [260, 3, 1, "", "compleat_raw"]], "pypath.inputs.complexportal": [[262, 3, 1, "", "complexportal_complexes"]], "pypath.inputs.comppi": [[264, 3, 1, "", "comppi_interaction_locations"], [265, 3, 1, "", "comppi_locations"]], "pypath.inputs.connectomedb": [[267, 3, 1, "", "connectomedb_annotations"], [268, 3, 1, "", "connectomedb_interactions"]], "pypath.inputs.corum": [[270, 3, 1, "", "corum_complexes"]], "pypath.inputs.cosmic": [[272, 3, 1, "", "cancer_gene_census_annotations"]], "pypath.inputs.cpad": [[274, 3, 1, "", "cpad_annotations"], [275, 3, 1, "", "cpad_pathway_cancer"], [276, 3, 1, "", "get_cpad"]], "pypath.inputs.cpdb": [[278, 3, 1, "", "cpdb_interactions"], [279, 3, 1, "", "cpdb_interactions_ltp"]], "pypath.inputs.credentials": [[281, 3, 1, "", "credentials"]], "pypath.inputs.csa": [[283, 3, 1, "", "get_csa"]], "pypath.inputs.cspa": [[285, 3, 1, "", "cspa_annotations"], [286, 3, 1, "", "cspa_cell_type_annotations"], [287, 3, 1, "", "cspa_cell_types"]], "pypath.inputs.ctdbase": [[289, 3, 1, "", "ctdbase_relations"], [290, 3, 1, "", "ctdbase_vocabulary"]], "pypath.inputs.cytosig": [[292, 3, 1, "", "cytosig_annotations"], [293, 3, 1, "", "cytosig_df"]], "pypath.inputs.dbptm": [[295, 3, 1, "", "dbptm_enzyme_substrate"], [296, 3, 1, "", "dbptm_enzyme_substrate_old"], [297, 3, 1, "", "dbptm_interactions"]], "pypath.inputs.deathdomain": [[299, 3, 1, "", "deathdomain_interactions"], [300, 3, 1, "", "deathdomain_interactions_rescued"]], "pypath.inputs.depod": [[302, 3, 1, "", "depod_enzyme_substrate"], [303, 3, 1, "", "depod_interactions"]], "pypath.inputs.dgidb": [[305, 3, 1, "", "dgidb_annotations"], [306, 3, 1, "", "dgidb_interactions"], [307, 3, 1, "", "get_dgidb_old"]], "pypath.inputs.dip": [[309, 3, 1, "", "dip_interactions"], [310, 3, 1, "", "dip_login"]], "pypath.inputs.disgenet": [[312, 1, 1, "", "DisgenetApi"], [313, 3, 1, "", "disease_id_mappings"], [314, 3, 1, "", "disgenet_annotations"], [315, 3, 1, "", "variant_gene_mappings"]], "pypath.inputs.disgenet.DisgenetApi": [[312, 2, 1, "", "__init__"], [312, 2, 1, "", "authenticate"], [312, 2, 1, "", "get_ddas_that_share_genes"], [312, 2, 1, "", "get_ddas_that_share_variants"], [312, 2, 1, "", "get_gdas_by_diseases"], [312, 2, 1, "", "get_gdas_by_genes"], [312, 2, 1, "", "get_gdas_by_source"], [312, 2, 1, "", "get_gdas_by_uniprots"], [312, 2, 1, "", "get_vdas_by_diseases"], [312, 2, 1, "", "get_vdas_by_genes"], [312, 2, 1, "", "get_vdas_by_source"], [312, 2, 1, "", "get_vdas_by_variants"]], "pypath.inputs.domino": [[317, 3, 1, "", "domino_ddi"], [318, 3, 1, "", "domino_enzsub"], [319, 3, 1, "", "domino_interactions"], [320, 3, 1, "", "get_domino"]], "pypath.inputs.dorothea": [[322, 1, 1, "", "DorotheaInteraction"], [323, 3, 1, "", "dorothea_full_raw"], [324, 3, 1, "", "dorothea_interactions"], [325, 3, 1, "", "dorothea_interactions_old"], [326, 3, 1, "", "dorothea_old_csv"], [327, 3, 1, "", "dorothea_rda_raw"], [328, 3, 1, "", "get_dorothea_old"], [329, 3, 1, "", "get_tfregulons"], [330, 3, 1, "", "tfregulons_interactions"], [331, 3, 1, "", "tfregulons_interactions_old"]], "pypath.inputs.dorothea.DorotheaInteraction": [[322, 2, 1, "", "__init__"], [322, 4, 1, "", "all_sources"], [322, 4, 1, "", "chipseq"], [322, 4, 1, "", "chipseq_sources"], [322, 4, 1, "", "coexp"], [322, 4, 1, "", "coexp_sources"], [322, 2, 1, "", "count"], [322, 4, 1, "", "curated"], [322, 4, 1, "", "curated_sources"], [322, 4, 1, "", "effect"], [322, 2, 1, "", "index"], [322, 4, 1, "", "kegg_pathways"], [322, 4, 1, "", "level"], [322, 4, 1, "", "predicted"], [322, 4, 1, "", "predicted_sources"], [322, 4, 1, "", "pubmed"], [322, 4, 1, "", "target"], [322, 4, 1, "", "tf"]], "pypath.inputs.drugbank": [[333, 1, 1, "", "DrugbankFull"], [334, 3, 1, "", "drugbank_annotations"], [335, 3, 1, "", "drugbank_drugs"], [336, 3, 1, "", "drugbank_interactions"], [337, 3, 1, "", "drugbank_mapping"], [338, 3, 1, "", "drugbank_raw_interactions"]], "pypath.inputs.drugbank.DrugbankFull": [[333, 2, 1, "", "__init__"], [333, 2, 1, "", "drugbank_drugs_full"], [333, 2, 1, "", "drugbank_external_ids_full"], [333, 2, 1, "", "drugbank_properties_full"], [333, 2, 1, "", "drugbank_targets_full"]], "pypath.inputs.drugcentral": [[340, 3, 1, "", "drugcentral_drugs"], [341, 3, 1, "", "drugcentral_interactions"], [342, 3, 1, "", "drugcentral_mapping"]], "pypath.inputs.ebi": [[344, 3, 1, "", "ebi_rest"]], "pypath.inputs.elm": [[346, 3, 1, "", "elm_classes"], [347, 3, 1, "", "elm_domains"], [348, 3, 1, "", "elm_instances"], [349, 3, 1, "", "elm_interactions"]], "pypath.inputs.embopress": [[351, 3, 1, "", "embopress_supplementary"]], "pypath.inputs.embrace": [[353, 3, 1, "", "embrace_annotations"], [354, 3, 1, "", "embrace_interactions"], [355, 3, 1, "", "embrace_raw"], [356, 3, 1, "", "embrace_translated"]], "pypath.inputs.encode": [[358, 3, 1, "", "encode_tf_mirna_interactions"]], "pypath.inputs.ensembl": [[360, 3, 1, "", "ensembl_organisms"]], "pypath.inputs.exocarta": [[362, 3, 1, "", "get_exocarta"], [363, 3, 1, "", "get_vesiclepedia"]], "pypath.inputs.genecards": [[365, 3, 1, "", "genecards_datasheet"], [366, 3, 1, "", "genecards_soup"], [367, 3, 1, "", "genecards_summaries"]], "pypath.inputs.go": [[370, 3, 1, "", "get_go_desc"], [371, 3, 1, "", "get_go_quick"], [372, 3, 1, "", "get_goslim"], [373, 3, 1, "", "go_ancestors"], [374, 3, 1, "", "go_ancestors_goose"], [375, 3, 1, "", "go_ancestors_quickgo"], [376, 3, 1, "", "go_annotations"], [377, 3, 1, "", "go_annotations_all"], [378, 3, 1, "", "go_annotations_goa"], [379, 3, 1, "", "go_annotations_goose"], [380, 3, 1, "", "go_annotations_quickgo"], [381, 3, 1, "", "go_annotations_solr"], [382, 3, 1, "", "go_annotations_uniprot"], [383, 3, 1, "", "go_descendants"], [384, 3, 1, "", "go_descendants_goose"], [385, 3, 1, "", "go_descendants_quickgo"], [386, 3, 1, "", "go_descendants_to_ancestors"], [387, 3, 1, "", "go_terms"], [388, 3, 1, "", "go_terms_goose"], [389, 3, 1, "", "go_terms_quickgo"], [390, 3, 1, "", "go_terms_solr"]], "pypath.inputs.gpcrdb": [[392, 3, 1, "", "gpcrdb_annotations"]], "pypath.inputs.graphviz": [[394, 3, 1, "", "graphviz_attrs"]], "pypath.inputs.guide2pharma": [[396, 3, 1, "", "guide2pharma_complexes"], [397, 3, 1, "", "guide2pharma_download"], [398, 3, 1, "", "guide2pharma_interactions"]], "pypath.inputs.havugimana": [[400, 3, 1, "", "get_havugimana"], [401, 3, 1, "", "havugimana_complexes"]], "pypath.inputs.hgnc": [[403, 3, 1, "", "hgnc_genegroups"]], "pypath.inputs.hippie": [[405, 3, 1, "", "hippie_interactions"]], "pypath.inputs.hmdb": [[407, 1, 1, "", "Field"], [408, 3, 1, "", "hmdb_iter_metabolites"], [409, 3, 1, "", "hmdb_mapping"], [410, 3, 1, "", "hmdb_metabolites_raw"], [411, 3, 1, "", "hmdb_table"], [412, 3, 1, "", "hmdb_xml"]], "pypath.inputs.hmdb.Field": [[407, 2, 1, "", "__init__"]], "pypath.inputs.homologene": [[414, 3, 1, "", "get_homologene"], [415, 3, 1, "", "homologene_dict"], [416, 3, 1, "", "homologene_uniprot_dict"]], "pypath.inputs.hpmr": [[418, 1, 1, "", "HpmrInteraction"], [419, 3, 1, "", "get_hpmr"], [420, 3, 1, "", "hpmr_annotations"], [421, 3, 1, "", "hpmr_complexes"], [422, 3, 1, "", "hpmr_interactions"]], "pypath.inputs.hpmr.HpmrInteraction": [[418, 2, 1, "", "__init__"], [418, 2, 1, "", "count"], [418, 2, 1, "", "index"], [418, 4, 1, "", "partner"], [418, 4, 1, "", "partner_role"], [418, 4, 1, "", "receptor"], [418, 4, 1, "", "references"], [418, 4, 1, "", "unambiguous"]], "pypath.inputs.hpo": [[424, 3, 1, "", "hpo_annotations"], [425, 3, 1, "", "hpo_diseases"], [426, 3, 1, "", "hpo_ontology"], [427, 3, 1, "", "hpo_terms"]], "pypath.inputs.hprd": [[429, 3, 1, "", "get_hprd"], [430, 3, 1, "", "hprd_enzyme_substrate"], [431, 3, 1, "", "hprd_interactions"], [432, 3, 1, "", "hprd_interactions_htp"]], "pypath.inputs.htri": [[434, 3, 1, "", "htri_interactions"]], "pypath.inputs.humancellmap": [[436, 3, 1, "", "humancellmap_annotations"]], "pypath.inputs.humap": [[438, 3, 1, "", "humap2_complexes"], [439, 3, 1, "", "humap_complexes"]], "pypath.inputs.huri": [[441, 3, 1, "", "hi_i_interactions"], [442, 3, 1, "", "hi_ii_interactions"], [443, 3, 1, "", "hi_iii_old"], [444, 3, 1, "", "hi_union_interactions"], [445, 3, 1, "", "huri_interactions"], [446, 3, 1, "", "lit_bm_13_interactions"], [447, 3, 1, "", "lit_bm_17_interactions"], [448, 3, 1, "", "lit_bm_interactions"], [449, 3, 1, "", "rolland_hi_ii_14"], [450, 3, 1, "", "vidal_hi_iii_old"], [451, 3, 1, "", "yang2016_interactions"], [452, 3, 1, "", "yu2011_interactions"]], "pypath.inputs.i3d": [[454, 3, 1, "", "get_i3d"]], "pypath.inputs.icellnet": [[456, 1, 1, "", "IcellnetRecord"], [457, 3, 1, "", "icellnet_annotations"], [458, 3, 1, "", "icellnet_complexes"], [459, 3, 1, "", "icellnet_interactions"]], "pypath.inputs.icellnet.IcellnetRecord": [[456, 2, 1, "", "__init__"], [456, 4, 1, "", "classification"], [456, 2, 1, "", "count"], [456, 4, 1, "", "family"], [456, 2, 1, "", "index"], [456, 4, 1, "", "ligand"], [456, 4, 1, "", "receptor"], [456, 4, 1, "", "references"], [456, 4, 1, "", "resources"], [456, 4, 1, "", "subfamily"]], "pypath.inputs.ielm": [[461, 3, 1, "", "get_ielm"], [462, 3, 1, "", "get_ielm_huge"]], "pypath.inputs.imweb": [[464, 3, 1, "", "get_imweb"], [465, 3, 1, "", "get_imweb_req"]], "pypath.inputs.innatedb": [[467, 3, 1, "", "innatedb_interactions"]], "pypath.inputs.instruct": [[469, 3, 1, "", "get_instruct"], [470, 3, 1, "", "get_instruct_offsets"]], "pypath.inputs.intact": [[472, 3, 1, "", "intact_interactions"]], "pypath.inputs.integrins": [[474, 3, 1, "", "get_integrins"]], "pypath.inputs.interpro": [[476, 3, 1, "", "interpro2go_annotations"], [477, 3, 1, "", "interpro_annotations"], [478, 3, 1, "", "interpro_entries"], [479, 3, 1, "", "interpro_xrefs"]], "pypath.inputs.intogen": [[481, 3, 1, "", "intogen_annotations"]], "pypath.inputs.ipi": [[483, 3, 1, "", "ipi_uniprot"]], "pypath.inputs.iptmnet": [[485, 1, 1, "", "IptmnetInteraction"], [486, 3, 1, "", "iptmnet_interactions"]], "pypath.inputs.iptmnet.IptmnetInteraction": [[485, 2, 1, "", "__init__"], [485, 2, 1, "", "count"], [485, 4, 1, "", "enzyme"], [485, 4, 1, "", "enzyme_isoform"], [485, 2, 1, "", "index"], [485, 4, 1, "", "ptm_type"], [485, 4, 1, "", "references"], [485, 4, 1, "", "resaa"], [485, 4, 1, "", "resnum"], [485, 4, 1, "", "score"], [485, 4, 1, "", "substrate"], [485, 4, 1, "", "substrate_isoform"]], "pypath.inputs.italk": [[488, 3, 1, "", "italk_annotations"], [489, 3, 1, "", "italk_interactions"], [490, 3, 1, "", "italk_raw"]], "pypath.inputs.kea": [[492, 3, 1, "", "kea_enzyme_substrate"], [493, 3, 1, "", "kea_interactions"]], "pypath.inputs.kegg": [[495, 1, 1, "", "KeggPathway"], [496, 3, 1, "", "kegg_dbget"], [497, 3, 1, "", "kegg_interactions"], [498, 3, 1, "", "kegg_medicus"], [499, 3, 1, "", "kegg_medicus_complexes"], [500, 3, 1, "", "kegg_medicus_interactions"], [501, 3, 1, "", "kegg_pathway_annotations"], [502, 3, 1, "", "kegg_pathway_annotations_pathwaycommons"], [503, 3, 1, "", "kegg_pathways"]], "pypath.inputs.kegg.KeggPathway": [[495, 2, 1, "", "__init__"], [495, 2, 1, "", "count"], [495, 2, 1, "", "index"], [495, 4, 1, "", "pathway"]], "pypath.inputs.kegg_api": [[505, 3, 1, "", "disease_to_drug"], [506, 3, 1, "", "disease_to_gene"], [507, 3, 1, "", "disease_to_pathway"], [508, 3, 1, "", "drug_to_disease"], [509, 3, 1, "", "drug_to_drug"], [510, 3, 1, "", "drug_to_gene"], [511, 3, 1, "", "drug_to_pathway"], [512, 3, 1, "", "gene_to_disease"], [513, 3, 1, "", "gene_to_drug"], [514, 3, 1, "", "gene_to_pathway"], [515, 3, 1, "", "kegg_drug_to_chebi"], [516, 3, 1, "", "kegg_gene_to_ncbi_geneid"], [517, 3, 1, "", "kegg_gene_to_uniprot"], [518, 3, 1, "", "pathway_to_disease"], [519, 3, 1, "", "pathway_to_drug"], [520, 3, 1, "", "pathway_to_gene"]], "pypath.inputs.kinasedotcom": [[522, 3, 1, "", "kinasedotcom_annotations"]], "pypath.inputs.kirouac2010": [[524, 3, 1, "", "kirouac2010_interactions"]], "pypath.inputs.lambert2018": [[526, 3, 1, "", "lambert2018_annotations"], [527, 3, 1, "", "lambert2018_s1_raw"]], "pypath.inputs.laudanna": [[529, 3, 1, "", "laudanna_directions"], [530, 3, 1, "", "laudanna_effects"]], "pypath.inputs.li2012": [[532, 3, 1, "", "get_li2012"], [533, 3, 1, "", "li2012_dmi"], [534, 3, 1, "", "li2012_enzyme_substrate"], [535, 3, 1, "", "li2012_interactions"]], "pypath.inputs.lincs": [[537, 3, 1, "", "lincs_compounds"]], "pypath.inputs.lmpid": [[539, 3, 1, "", "lmpid_dmi"], [540, 3, 1, "", "lmpid_interactions"], [541, 3, 1, "", "load_lmpid"]], "pypath.inputs.lncdisease": [[543, 3, 1, "", "lncdisease_interactions"]], "pypath.inputs.lncrnadb": [[545, 3, 1, "", "lncrnadb_interactions"]], "pypath.inputs.locate": [[547, 3, 1, "", "locate_localizations"]], "pypath.inputs.lrdb": [[549, 1, 1, "", "LrdbAnnotation"], [550, 3, 1, "", "lrdb_annotations"], [551, 3, 1, "", "lrdb_interactions"]], "pypath.inputs.lrdb.LrdbAnnotation": [[549, 2, 1, "", "__init__"], [549, 4, 1, "", "cell_type"], [549, 2, 1, "", "count"], [549, 2, 1, "", "index"], [549, 4, 1, "", "references"], [549, 4, 1, "", "role"], [549, 4, 1, "", "sources"]], "pypath.inputs.macrophage": [[553, 3, 1, "", "macrophage_interactions"]], "pypath.inputs.matrisome": [[556, 3, 1, "", "matrisome_annotations"]], "pypath.inputs.matrixdb": [[558, 3, 1, "", "matrixdb_annotations"], [559, 3, 1, "", "matrixdb_ecm_proteins"], [560, 3, 1, "", "matrixdb_interactions"], [561, 3, 1, "", "matrixdb_membrane_proteins"], [562, 3, 1, "", "matrixdb_secreted_proteins"]], "pypath.inputs.mcam": [[564, 3, 1, "", "mcam_cell_adhesion_molecules"]], "pypath.inputs.membranome": [[566, 3, 1, "", "membranome_annotations"]], "pypath.inputs.mimp": [[568, 3, 1, "", "get_kinase_class"], [569, 3, 1, "", "mimp_enzyme_substrate"], [570, 3, 1, "", "mimp_interactions"]], "pypath.inputs.mir2disease": [[572, 3, 1, "", "mir2disease_interactions"]], "pypath.inputs.mirbase": [[574, 3, 1, "", "get_mirbase_aliases"], [575, 3, 1, "", "mirbase_ids"], [576, 3, 1, "", "mirbase_mature"], [577, 3, 1, "", "mirbase_mature_all"], [578, 3, 1, "", "mirbase_precursor"], [579, 3, 1, "", "mirbase_precursor_all"], [580, 3, 1, "", "mirbase_precursor_to_mature"]], "pypath.inputs.mirdeathdb": [[582, 3, 1, "", "mirdeathdb_interactions"]], "pypath.inputs.mirecords": [[584, 3, 1, "", "mirecords_interactions"]], "pypath.inputs.mirtarbase": [[586, 3, 1, "", "mirtarbase_interactions"]], "pypath.inputs.mitab": [[588, 3, 1, "", "mitab_field_list"], [589, 3, 1, "", "mitab_field_uniprot"]], "pypath.inputs.mppi": [[591, 3, 1, "", "mppi_interactions"]], "pypath.inputs.ncrdeathdb": [[593, 3, 1, "", "ncrdeathdb_interactions"]], "pypath.inputs.negatome": [[595, 3, 1, "", "negatome_interactions"]], "pypath.inputs.netbiol": [[597, 3, 1, "", "arn_interactions"], [598, 3, 1, "", "nrf2ome_interactions"]], "pypath.inputs.netpath": [[600, 3, 1, "", "netpath_interactions"], [601, 3, 1, "", "netpath_names"], [602, 3, 1, "", "netpath_pathway_annotations"]], "pypath.inputs.oma": [[604, 3, 1, "", "oma_orthologs"]], "pypath.inputs.ontology": [[606, 3, 1, "", "listof_ontologies"], [607, 3, 1, "", "ontology"]], "pypath.inputs.opm": [[609, 3, 1, "", "opm_annotations"]], "pypath.inputs.oreganno": [[611, 3, 1, "", "oreganno_interactions"], [612, 3, 1, "", "oreganno_raw"]], "pypath.inputs.panglaodb": [[614, 3, 1, "", "panglaodb_annotations"], [615, 3, 1, "", "panglaodb_raw"]], "pypath.inputs.pathophenodb": [[617, 1, 1, "", "DiseasePathogen"], [618, 3, 1, "", "disease_pathogen_interactions"]], "pypath.inputs.pathophenodb.DiseasePathogen": [[617, 2, 1, "", "__init__"], [617, 2, 1, "", "count"], [617, 4, 1, "", "disease"], [617, 4, 1, "", "disease_id"], [617, 4, 1, "", "evidence"], [617, 2, 1, "", "index"], [617, 4, 1, "", "pathogen"], [617, 4, 1, "", "pathogen_taxid"]], "pypath.inputs.pathwaycommons": [[620, 1, 1, "", "PathwayCommonsInteraction"], [621, 1, 1, "", "PathwayCommonsResource"], [622, 3, 1, "", "pathwaycommons_bind_interactions"], [623, 3, 1, "", "pathwaycommons_biogrid_interactions"], [624, 3, 1, "", "pathwaycommons_corum_interactions"], [625, 3, 1, "", "pathwaycommons_dip_interactions"], [626, 3, 1, "", "pathwaycommons_hprd_interactions"], [627, 3, 1, "", "pathwaycommons_inoh_interactions"], [628, 3, 1, "", "pathwaycommons_intact_interactions"], [629, 3, 1, "", "pathwaycommons_interactions"], [630, 3, 1, "", "pathwaycommons_kegg_interactions"], [631, 3, 1, "", "pathwaycommons_netpath_interactions"], [632, 3, 1, "", "pathwaycommons_panther_interactions"], [633, 3, 1, "", "pathwaycommons_phosphosite_interactions"], [634, 3, 1, "", "pathwaycommons_reactome_interactions"], [635, 3, 1, "", "pathwaycommons_wikipathways_interactions"]], "pypath.inputs.pathwaycommons.PathwayCommonsInteraction": [[620, 2, 1, "", "__init__"], [620, 2, 1, "", "count"], [620, 4, 1, "", "id_a"], [620, 4, 1, "", "id_b"], [620, 2, 1, "", "index"], [620, 4, 1, "", "interaction_type"], [620, 4, 1, "", "resource"]], "pypath.inputs.pathwaycommons.PathwayCommonsResource": [[621, 2, 1, "", "__init__"], [621, 2, 1, "", "count"], [621, 2, 1, "", "index"], [621, 4, 1, "", "name"], [621, 4, 1, "", "pc_label"], [621, 4, 1, "", "version"]], "pypath.inputs.pazar": [[637, 3, 1, "", "pazar_interactions"]], "pypath.inputs.pdb": [[639, 3, 1, "", "pdb_chains"], [640, 3, 1, "", "pdb_complexes"], [641, 3, 1, "", "pdb_uniprot"]], "pypath.inputs.pdzbase": [[643, 3, 1, "", "pdzbase_interactions"]], "pypath.inputs.pepcyber": [[645, 3, 1, "", "pepcyber_details"], [646, 3, 1, "", "pepcyber_interactions"]], "pypath.inputs.pfam": [[648, 3, 1, "", "pfam_names"], [649, 3, 1, "", "pfam_pdb"], [650, 3, 1, "", "pfam_regions"], [651, 3, 1, "", "pfam_uniprot"]], "pypath.inputs.pharos": [[653, 3, 1, "", "pharos_diseases"], [654, 3, 1, "", "pharos_expression"], [655, 3, 1, "", "pharos_general"], [656, 3, 1, "", "pharos_gtex"], [657, 3, 1, "", "pharos_ligands"], [658, 3, 1, "", "pharos_orthologs"], [659, 3, 1, "", "pharos_targets"], [660, 3, 1, "", "pharos_xrefs"]], "pypath.inputs.phobius": [[662, 3, 1, "", "phobius_annotations"]], "pypath.inputs.phosphatome": [[664, 3, 1, "", "phosphatome_annotations"]], "pypath.inputs.phosphoelm": [[666, 3, 1, "", "phosphoelm_enzyme_substrate"], [667, 3, 1, "", "phosphoelm_interactions"], [668, 3, 1, "", "phosphoelm_kinases"]], "pypath.inputs.phosphonetworks": [[670, 3, 1, "", "phosphonetworks_enzyme_substrate"], [671, 3, 1, "", "phosphonetworks_interactions"]], "pypath.inputs.phosphopoint": [[673, 3, 1, "", "phosphopoint_directions"], [674, 3, 1, "", "phosphopoint_interactions"]], "pypath.inputs.phosphosite": [[676, 3, 1, "", "phosphosite_directions"], [677, 3, 1, "", "phosphosite_enzyme_substrate"], [678, 3, 1, "", "phosphosite_interactions"], [679, 3, 1, "", "phosphosite_interactions_all"], [680, 3, 1, "", "phosphosite_interactions_curated"], [681, 3, 1, "", "phosphosite_interactions_new"], [682, 3, 1, "", "phosphosite_interactions_noref"], [683, 3, 1, "", "phosphosite_ptm_orthology"], [684, 3, 1, "", "phosphosite_ptms"], [685, 3, 1, "", "phosphosite_regsites"], [686, 3, 1, "", "phosphosite_regsites_one_organism"], [687, 3, 1, "", "regsites_tab"]], "pypath.inputs.pisa": [[689, 1, 1, "", "PisaBond"], [690, 3, 1, "", "pisa_bonds"], [691, 3, 1, "", "pisa_interfaces"]], "pypath.inputs.pisa.PisaBond": [[689, 2, 1, "", "__init__"], [689, 4, 1, "", "chain_1"], [689, 4, 1, "", "chain_2"], [689, 2, 1, "", "count"], [689, 2, 1, "", "index"], [689, 4, 1, "", "residue_1"], [689, 4, 1, "", "residue_2"], [689, 4, 1, "", "seqnum_1"], [689, 4, 1, "", "seqnum_2"], [689, 4, 1, "", "uniprot_1"], [689, 4, 1, "", "uniprot_2"]], "pypath.inputs.pro": [[693, 3, 1, "", "get_pro"], [694, 3, 1, "", "pro_mapping"]], "pypath.inputs.progeny": [[696, 3, 1, "", "progeny_annotations"], [697, 3, 1, "", "progeny_raw"]], "pypath.inputs.proteinatlas": [[699, 3, 1, "", "get_proteinatlas"], [700, 3, 1, "", "proteinatlas_annotations"], [701, 3, 1, "", "proteinatlas_secretome_annotations"], [702, 3, 1, "", "proteinatlas_subcellular_annotations"]], "pypath.inputs.proteins": [[704, 3, 1, "", "variants"]], "pypath.inputs.protmapper": [[706, 3, 1, "", "get_protmapper"], [707, 3, 1, "", "protmapper_enzyme_substrate"], [708, 3, 1, "", "protmapper_interactions"]], "pypath.inputs.pubchem": [[710, 3, 1, "", "pubchem_mapping"]], "pypath.inputs.pubmed": [[712, 3, 1, "", "get_pmid"], [713, 3, 1, "", "get_pubmeds"], [714, 3, 1, "", "only_pmids"], [715, 3, 1, "", "open_pubmed"], [716, 3, 1, "", "pmids_dict"], [717, 3, 1, "", "pmids_list"]], "pypath.inputs.ramilowski2015": [[719, 3, 1, "", "ramilowski_interactions"], [720, 3, 1, "", "ramilowski_locations"]], "pypath.inputs.ramp": [[722, 3, 1, "", "ramp_id_types"], [723, 3, 1, "", "ramp_id_types_2"], [724, 3, 1, "", "ramp_list_tables"], [725, 3, 1, "", "ramp_mapping"], [726, 3, 1, "", "ramp_raw"], [727, 3, 1, "", "ramp_show_tables"]], "pypath.inputs.reaction": [[730, 3, 1, "", "acsn_biopax"], [731, 3, 1, "", "acsn_interactions_2"], [732, 3, 1, "", "get_acsn_effects"], [733, 3, 1, "", "get_controls"], [734, 3, 1, "", "get_interactions"], [735, 3, 1, "", "get_reactions"], [736, 3, 1, "", "get_soup"], [737, 3, 1, "", "panther_biopax"], [738, 3, 1, "", "panther_interactions"], [739, 3, 1, "", "pid_biopax"], [740, 3, 1, "", "pid_interactions"], [741, 3, 1, "", "process_complex"], [742, 3, 1, "", "process_controls"], [743, 3, 1, "", "process_reactions"], [744, 3, 1, "", "reactions_biopax"], [745, 3, 1, "", "reactome_biopax"], [746, 3, 1, "", "reactome_bs"], [747, 3, 1, "", "reactome_interactions"], [748, 3, 1, "", "reactome_sbml"]], "pypath.inputs.scconnect": [[750, 3, 1, "", "scconnect_annotations"], [751, 3, 1, "", "scconnect_complexes"], [752, 3, 1, "", "scconnect_interactions"]], "pypath.inputs.science": [[754, 3, 1, "", "science_download"]], "pypath.inputs.signalink": [[756, 3, 1, "", "signalink_annotations"], [757, 3, 1, "", "signalink_function_annotations"], [758, 3, 1, "", "signalink_interactions"], [759, 3, 1, "", "signalink_pathway_annotations"]], "pypath.inputs.signor": [[761, 3, 1, "", "signor_complexes"], [762, 3, 1, "", "signor_enzyme_substrate"], [763, 3, 1, "", "signor_interactions"], [764, 3, 1, "", "signor_pathway_annotations"], [765, 3, 1, "", "signor_pathways"], [766, 3, 1, "", "signor_protein_families"]], "pypath.inputs.spike": [[768, 3, 1, "", "spike_complexes"], [769, 3, 1, "", "spike_interactions"]], "pypath.inputs.stitch": [[771, 3, 1, "", "stitch_actions_interactions"], [772, 3, 1, "", "stitch_links_interactions"]], "pypath.inputs.string": [[774, 3, 1, "", "string_effects"], [775, 3, 1, "", "string_links_interactions"], [776, 3, 1, "", "string_physical_interactions"], [777, 3, 1, "", "string_species"]], "pypath.inputs.surfaceome": [[779, 3, 1, "", "surfaceome_annotations"]], "pypath.inputs.switches_elm": [[781, 3, 1, "", "get_switches_elm"]], "pypath.inputs.talklr": [[783, 3, 1, "", "talklr_annotations"], [784, 3, 1, "", "talklr_interactions"], [785, 3, 1, "", "talklr_raw"]], "pypath.inputs.tcdb": [[787, 3, 1, "", "tcdb_annotations"], [788, 3, 1, "", "tcdb_classes"], [789, 3, 1, "", "tcdb_families"]], "pypath.inputs.tfcensus": [[791, 3, 1, "", "tfcensus_annotations"]], "pypath.inputs.threedcomplex": [[793, 3, 1, "", "threedcomplex_chains"], [794, 3, 1, "", "threedcomplex_complexes"], [795, 3, 1, "", "threedcomplex_contacts"], [796, 3, 1, "", "threedcomplex_ddi"], [797, 3, 1, "", "threedcomplex_nresidues"]], "pypath.inputs.threedid": [[799, 3, 1, "", "get_3did"], [800, 3, 1, "", "get_3did_ddi"], [801, 3, 1, "", "get_3did_dmi"], [802, 3, 1, "", "process_3did_dmi"]], "pypath.inputs.topdb": [[804, 3, 1, "", "topdb_annotations"]], "pypath.inputs.transmir": [[806, 3, 1, "", "transmir_interactions"]], "pypath.inputs.trip": [[808, 3, 1, "", "take_a_trip"], [809, 3, 1, "", "trip_find_uniprot"], [810, 3, 1, "", "trip_get_uniprot"], [811, 3, 1, "", "trip_interactions"], [812, 3, 1, "", "trip_process"], [813, 3, 1, "", "trip_process_table"]], "pypath.inputs.unichem": [[815, 3, 1, "", "info"], [816, 3, 1, "", "unichem_info"], [817, 3, 1, "", "unichem_mapping"], [818, 3, 1, "", "unichem_sources"]], "pypath.inputs.uniprot": [[820, 1, 1, "", "Taxon"], [821, 1, 1, "", "UniprotRecordHistory"], [822, 3, 1, "", "all_swissprots"], [823, 3, 1, "", "all_trembls"], [824, 3, 1, "", "all_uniprots"], [825, 3, 1, "", "deleted_uniprot_genesymbol"], [826, 3, 1, "", "get_db"], [827, 3, 1, "", "get_uniprot_sec"], [828, 3, 1, "", "init_db"], [829, 3, 1, "", "is_swissprot"], [830, 3, 1, "", "is_trembl"], [831, 3, 1, "", "is_uniprot"], [832, 3, 1, "", "protein_datasheet"], [833, 3, 1, "", "swissprot_deleted"], [834, 3, 1, "", "trembl_deleted"], [835, 3, 1, "", "uniprot_data"], [836, 3, 1, "", "uniprot_deleted"], [837, 3, 1, "", "uniprot_families"], [838, 3, 1, "", "uniprot_history"], [839, 3, 1, "", "uniprot_history_recent_datasheet"], [840, 3, 1, "", "uniprot_keywords"], [841, 3, 1, "", "uniprot_locations"], [842, 3, 1, "", "uniprot_ncbi_taxids"], [843, 3, 1, "", "uniprot_ncbi_taxids_2"], [844, 3, 1, "", "uniprot_preprocess"], [845, 3, 1, "", "uniprot_recent_version"], [846, 3, 1, "", "uniprot_taxonomy"], [847, 3, 1, "", "uniprot_tissues"], [848, 3, 1, "", "uniprot_topology"], [849, 3, 1, "", "valid_uniprot"]], "pypath.inputs.uniprot.Taxon": [[820, 2, 1, "", "__init__"], [820, 2, 1, "", "count"], [820, 4, 1, "", "english"], [820, 2, 1, "", "index"], [820, 4, 1, "", "latin"], [820, 4, 1, "", "latin_synonym"], [820, 4, 1, "", "ncbi_id"]], "pypath.inputs.uniprot.UniprotRecordHistory": [[821, 2, 1, "", "__init__"], [821, 2, 1, "", "count"], [821, 4, 1, "", "database"], [821, 4, 1, "", "date"], [821, 4, 1, "", "entry_name"], [821, 4, 1, "", "entry_version"], [821, 2, 1, "", "index"], [821, 4, 1, "", "number"], [821, 4, 1, "", "replaced_by"], [821, 4, 1, "", "replaces"], [821, 4, 1, "", "sequence_version"]], "pypath.inputs.wang": [[851, 3, 1, "", "cui_interactions"], [852, 3, 1, "", "hsn_interactions"], [853, 3, 1, "", "wang_annotations"], [854, 3, 1, "", "wang_interactions"]], "pypath.inputs.wojtowicz2020": [[856, 3, 1, "", "wojtowicz2020_interactions"], [857, 3, 1, "", "wojtowicz2020_raw"]], "pypath.inputs.zhong2015": [[859, 3, 1, "", "zhong2015_annotations"]], "pypath.internals": [[861, 0, 0, "-", "annot_formats"], [866, 0, 0, "-", "input_formats"], [880, 0, 0, "-", "intera"], [890, 0, 0, "-", "license"], [896, 0, 0, "-", "maps"], [897, 0, 0, "-", "refs"], [900, 0, 0, "-", "resource"]], "pypath.internals.annot_formats": [[862, 1, 1, "", "AnnotDef"], [863, 1, 1, "", "AnnotDefKey"], [864, 1, 1, "", "AnnotOp"], [865, 1, 1, "", "AnnotationGroup"]], "pypath.internals.annot_formats.AnnotDef": [[862, 2, 1, "", "__init__"], [862, 4, 1, "", "args"], [862, 4, 1, "", "aspect"], [862, 4, 1, "", "avoid"], [862, 2, 1, "", "count"], [862, 4, 1, "", "enabled"], [862, 4, 1, "", "exclude"], [862, 2, 1, "", "index"], [862, 4, 1, "", "limit"], [862, 4, 1, "", "name"], [862, 4, 1, "", "parent"], [862, 4, 1, "", "receiver"], [862, 4, 1, "", "resource"], [862, 4, 1, "", "resource_name"], [862, 4, 1, "", "scope"], [862, 4, 1, "", "source"], [862, 4, 1, "", "transmitter"]], "pypath.internals.annot_formats.AnnotDefKey": [[863, 2, 1, "", "__init__"], [863, 2, 1, "", "count"], [863, 2, 1, "", "index"], [863, 4, 1, "", "name"], [863, 4, 1, "", "parent"], [863, 4, 1, "", "resource"]], "pypath.internals.annot_formats.AnnotOp": [[864, 2, 1, "", "__init__"], [864, 4, 1, "", "annots"], [864, 2, 1, "", "count"], [864, 2, 1, "", "index"], [864, 4, 1, "", "op"]], "pypath.internals.annot_formats.AnnotationGroup": [[865, 2, 1, "", "__init__"], [865, 2, 1, "", "filter_entity_type"], [865, 2, 1, "", "isdisjoint"]], "pypath.internals.input_formats": [[867, 1, 1, "", "ArrayMapping"], [868, 1, 1, "", "BiomartMapping"], [869, 1, 1, "", "FileMapping"], [870, 1, 1, "", "HmdbMapping"], [871, 1, 1, "", "MappingInput"], [872, 1, 1, "", "NetworkInput"], [873, 1, 1, "", "PickleMapping"], [874, 1, 1, "", "ProMapping"], [875, 1, 1, "", "RampMapping"], [876, 1, 1, "", "ReadList"], [877, 1, 1, "", "UnichemMapping"], [878, 1, 1, "", "UniprotListMapping"], [879, 1, 1, "", "UniprotMapping"]], "pypath.internals.input_formats.ArrayMapping": [[867, 2, 1, "", "__init__"]], "pypath.internals.input_formats.BiomartMapping": [[868, 2, 1, "", "__init__"]], "pypath.internals.input_formats.FileMapping": [[869, 2, 1, "", "__init__"]], "pypath.internals.input_formats.HmdbMapping": [[870, 2, 1, "", "__init__"]], "pypath.internals.input_formats.MappingInput": [[871, 2, 1, "", "__init__"]], "pypath.internals.input_formats.NetworkInput": [[872, 2, 1, "", "__init__"]], "pypath.internals.input_formats.PickleMapping": [[873, 2, 1, "", "__init__"]], "pypath.internals.input_formats.ProMapping": [[874, 2, 1, "", "__init__"]], "pypath.internals.input_formats.RampMapping": [[875, 2, 1, "", "__init__"]], "pypath.internals.input_formats.ReadList": [[876, 2, 1, "", "__init__"]], "pypath.internals.input_formats.UnichemMapping": [[877, 2, 1, "", "__init__"]], "pypath.internals.input_formats.UniprotListMapping": [[878, 2, 1, "", "__init__"]], "pypath.internals.input_formats.UniprotMapping": [[879, 2, 1, "", "__init__"], [879, 2, 1, "", "resource_id_type"]], "pypath.internals.intera": [[881, 1, 1, "", "Complex"], [882, 1, 1, "", "Domain"], [883, 1, 1, "", "DomainDomain"], [884, 1, 1, "", "DomainMotif"], [885, 1, 1, "", "Interface"], [886, 1, 1, "", "Motif"], [887, 1, 1, "", "Ptm"], [888, 1, 1, "", "Regulation"], [889, 1, 1, "", "Residue"]], "pypath.internals.intera.Complex": [[881, 2, 1, "", "__init__"], [881, 2, 1, "", "add_attr"], [881, 2, 1, "", "merge"]], "pypath.internals.intera.Domain": [[882, 2, 1, "", "__init__"]], "pypath.internals.intera.DomainDomain": [[883, 2, 1, "", "__init__"]], "pypath.internals.intera.DomainMotif": [[884, 2, 1, "", "__init__"], [884, 2, 1, "", "get_line"], [884, 2, 1, "", "key"]], "pypath.internals.intera.Interface": [[885, 2, 1, "", "__init__"], [885, 2, 1, "", "add_residues"], [885, 2, 1, "", "bond_types"], [885, 2, 1, "", "get_bonds"], [885, 2, 1, "", "numof_residues"]], "pypath.internals.intera.Motif": [[886, 2, 1, "", "__init__"]], "pypath.internals.intera.Ptm": [[887, 2, 1, "", "__init__"]], "pypath.internals.intera.Regulation": [[888, 2, 1, "", "__init__"]], "pypath.internals.intera.Residue": [[889, 2, 1, "", "__init__"]], "pypath.internals.license": [[891, 1, 1, "", "License"], [892, 1, 1, "", "LicenseAttrib"], [893, 1, 1, "", "LicenseFeature"], [894, 1, 1, "", "LicensePurpose"], [895, 1, 1, "", "LicenseSharing"]], "pypath.internals.license.License": [[891, 2, 1, "", "__init__"], [891, 2, 1, "", "enables"]], "pypath.internals.license.LicenseAttrib": [[892, 2, 1, "", "__init__"], [892, 2, 1, "", "check_level"], [892, 2, 1, "", "int_to_level"], [892, 2, 1, "", "level_to_int"], [892, 2, 1, "", "to_int"]], "pypath.internals.license.LicenseFeature": [[893, 2, 1, "", "__init__"], [893, 2, 1, "", "check_level"], [893, 2, 1, "", "int_to_level"], [893, 2, 1, "", "level_to_int"], [893, 2, 1, "", "to_int"]], "pypath.internals.license.LicensePurpose": [[894, 2, 1, "", "__init__"], [894, 2, 1, "", "check_level"], [894, 2, 1, "", "int_to_level"], [894, 2, 1, "", "level_to_int"], [894, 2, 1, "", "to_int"]], "pypath.internals.license.LicenseSharing": [[895, 2, 1, "", "__init__"], [895, 2, 1, "", "check_level"], [895, 2, 1, "", "int_to_level"], [895, 2, 1, "", "level_to_int"], [895, 2, 1, "", "to_int"]], "pypath.internals.refs": [[898, 1, 1, "", "Reference"], [899, 3, 1, "", "get_pubmed_data"]], "pypath.internals.refs.Reference": [[898, 2, 1, "", "__init__"]], "pypath.internals.resource": [[901, 1, 1, "", "AbstractResource"], [902, 1, 1, "", "EnzymeSubstrateResource"], [903, 1, 1, "", "EnzymeSubstrateResourceKey"], [904, 1, 1, "", "NetworkResource"], [905, 1, 1, "", "NetworkResourceKey"], [906, 1, 1, "", "ResourceAttributes"]], "pypath.internals.resource.AbstractResource": [[901, 2, 1, "", "__init__"], [901, 2, 1, "", "load_data"], [901, 2, 1, "", "process"], [901, 2, 1, "", "set_method"]], "pypath.internals.resource.EnzymeSubstrateResource": [[902, 2, 1, "", "__init__"], [902, 2, 1, "", "get_via"]], "pypath.internals.resource.EnzymeSubstrateResourceKey": [[903, 2, 1, "", "__init__"], [903, 2, 1, "", "count"], [903, 4, 1, "", "data_type"], [903, 2, 1, "", "index"], [903, 4, 1, "", "name"], [903, 4, 1, "", "via"]], "pypath.internals.resource.NetworkResource": [[904, 2, 1, "", "__init__"]], "pypath.internals.resource.NetworkResourceKey": [[905, 2, 1, "", "__init__"], [905, 2, 1, "", "count"], [905, 4, 1, "", "data_model"], [905, 4, 1, "", "data_type"], [905, 2, 1, "", "index"], [905, 4, 1, "", "interaction_type"], [905, 5, 1, "", "label"], [905, 5, 1, "", "last"], [905, 4, 1, "", "name"], [905, 4, 1, "", "via"]], "pypath.internals.resource.ResourceAttributes": [[906, 2, 1, "", "__init__"]], "pypath.legacy": [[908, 0, 0, "-", "db_categories"], [911, 0, 0, "-", "main"]], "pypath.legacy.db_categories": [[909, 3, 1, "", "get_categories"], [910, 3, 1, "", "get_category"]], "pypath.legacy.main": [[912, 1, 1, "", "Direction"], [913, 1, 1, "", "NetworkEntityCollection"], [914, 1, 1, "", "NetworkStatsRecord"], [915, 1, 1, "", "PyPath"], [916, 3, 1, "", "get_db"], [917, 3, 1, "", "init_db"]], "pypath.legacy.main.Direction": [[912, 2, 1, "", "__init__"], [912, 2, 1, "", "check_nodes"], [912, 2, 1, "", "check_param"], [912, 2, 1, "", "consensus_edges"], [912, 2, 1, "", "get_dir"], [912, 2, 1, "", "get_direction"], [912, 2, 1, "", "get_directions"], [912, 2, 1, "", "get_dirs"], [912, 2, 1, "", "get_sign"], [912, 2, 1, "", "has_sign"], [912, 2, 1, "", "is_directed"], [912, 2, 1, "", "is_directed_by_resources"], [912, 2, 1, "", "is_inhibition"], [912, 2, 1, "", "is_mutual"], [912, 2, 1, "", "is_mutual_by_resources"], [912, 2, 1, "", "is_stimulation"], [912, 2, 1, "", "majority_dir"], [912, 2, 1, "", "majority_sign"], [912, 2, 1, "", "merge"], [912, 2, 1, "", "negative_reverse"], [912, 2, 1, "", "negative_sources_reverse"], [912, 2, 1, "", "negative_sources_straight"], [912, 2, 1, "", "negative_straight"], [912, 2, 1, "", "positive_reverse"], [912, 2, 1, "", "positive_sources_reverse"], [912, 2, 1, "", "positive_sources_straight"], [912, 2, 1, "", "positive_straight"], [912, 2, 1, "", "reload"], [912, 2, 1, "", "set_dir"], [912, 2, 1, "", "set_direction"], [912, 2, 1, "", "set_sign"], [912, 2, 1, "", "source"], [912, 2, 1, "", "sources_reverse"], [912, 2, 1, "", "sources_straight"], [912, 2, 1, "", "sources_undirected"], [912, 2, 1, "", "src"], [912, 2, 1, "", "src_by_source"], [912, 2, 1, "", "target"], [912, 2, 1, "", "tgt"], [912, 2, 1, "", "tgt_by_source"], [912, 2, 1, "", "translate"], [912, 2, 1, "", "unset_dir"], [912, 2, 1, "", "unset_direction"], [912, 2, 1, "", "unset_sign"], [912, 2, 1, "", "which_directions"], [912, 2, 1, "", "which_dirs"], [912, 2, 1, "", "which_signs"]], "pypath.legacy.main.NetworkEntityCollection": [[913, 2, 1, "", "__init__"], [913, 4, 1, "", "by_category"], [913, 4, 1, "", "by_resource"], [913, 4, 1, "", "cat_resource"], [913, 2, 1, "", "count"], [913, 2, 1, "", "index"], [913, 4, 1, "", "label"], [913, 4, 1, "", "method"], [913, 4, 1, "", "resource_cat"], [913, 4, 1, "", "shared"], [913, 4, 1, "", "shared_cat"], [913, 4, 1, "", "shared_res_cat"], [913, 4, 1, "", "total"], [913, 4, 1, "", "unique"], [913, 4, 1, "", "unique_cat"], [913, 4, 1, "", "unique_res_cat"]], "pypath.legacy.main.NetworkStatsRecord": [[914, 2, 1, "", "__init__"], [914, 4, 1, "", "by_category"], [914, 4, 1, "", "by_resource"], [914, 4, 1, "", "cat_resource"], [914, 2, 1, "", "count"], [914, 2, 1, "", "index"], [914, 4, 1, "", "label"], [914, 4, 1, "", "method"], [914, 4, 1, "", "percent"], [914, 4, 1, "", "percent_cat"], [914, 4, 1, "", "percent_res_cat"], [914, 4, 1, "", "resource_cat"], [914, 4, 1, "", "shared"], [914, 4, 1, "", "shared_cat"], [914, 4, 1, "", "shared_res_cat"], [914, 4, 1, "", "total"], [914, 4, 1, "", "unique"], [914, 4, 1, "", "unique_cat"], [914, 4, 1, "", "unique_res_cat"]], "pypath.legacy.main.PyPath": [[915, 2, 1, "", "__init__"], [915, 2, 1, "", "acsn_effects"], [915, 2, 1, "", "add_genesets"], [915, 2, 1, "", "add_grouped_eattr"], [915, 2, 1, "", "add_grouped_set_eattr"], [915, 2, 1, "", "add_list_eattr"], [915, 2, 1, "", "add_set_eattr"], [915, 2, 1, "", "affects"], [915, 2, 1, "", "all_between"], [915, 2, 1, "", "all_neighbours"], [915, 2, 1, "", "apply_list"], [915, 2, 1, "", "apply_negative"], [915, 2, 1, "", "basic_stats"], [915, 2, 1, "", "basic_stats_intergroup"], [915, 2, 1, "", "cancer_drivers_list"], [915, 2, 1, "", "cancer_gene_census_list"], [915, 2, 1, "", "clean_graph"], [915, 2, 1, "", "collapse_by_name"], [915, 2, 1, "", "collect"], [915, 2, 1, "", "combine_attr"], [915, 2, 1, "", "communities"], [915, 2, 1, "", "complex_comembership_network"], [915, 2, 1, "", "complexes"], [915, 2, 1, "", "complexes_in_network"], [915, 2, 1, "", "compounds_from_chembl"], [915, 2, 1, "", "consistency"], [915, 2, 1, "", "copy"], [915, 2, 1, "", "copy_edges"], [915, 2, 1, "", "count_sol"], [915, 2, 1, "", "counts"], [915, 2, 1, "", "coverage"], [915, 2, 1, "", "curation_effort"], [915, 2, 1, "", "curation_effort_by_resource"], [915, 2, 1, "", "curation_stats"], [915, 2, 1, "", "curation_tab"], [915, 2, 1, "", "curators_work"], [915, 2, 1, "", "databases_similarity"], [915, 2, 1, "", "degree_dist"], [915, 2, 1, "", "degree_dists"], [915, 2, 1, "", "delete_by_organism"], [915, 2, 1, "", "delete_by_source"], [915, 2, 1, "", "delete_unknown"], [915, 2, 1, "", "delete_unmapped"], [915, 2, 1, "", "dgenesymbol"], [915, 2, 1, "", "dgenesymbols"], [915, 2, 1, "", "dgs"], [915, 2, 1, "", "dgss"], [915, 2, 1, "", "dneighbors"], [915, 2, 1, "", "dp"], [915, 2, 1, "", "dproteins"], [915, 2, 1, "", "dps"], [915, 2, 1, "", "duniprot"], [915, 2, 1, "", "duniprots"], [915, 2, 1, "", "dup"], [915, 2, 1, "", "dups"], [915, 2, 1, "", "dv"], [915, 2, 1, "", "dvs"], [915, 2, 1, "", "edge_exists"], [915, 2, 1, "", "edge_loc"], [915, 2, 1, "", "edge_names"], [915, 2, 1, "", "edges_3d"], [915, 2, 1, "", "edges_between"], [915, 2, 1, "", "edges_expression"], [915, 2, 1, "", "edges_in_complexes"], [915, 2, 1, "", "edges_ptms"], [915, 2, 1, "", "edgeseq_inverse"], [915, 2, 1, "", "entities_by_resource"], [915, 2, 1, "", "entities_by_resources"], [915, 2, 1, "", "export_dot"], [915, 2, 1, "", "export_edgelist"], [915, 2, 1, "", "export_graphml"], [915, 2, 1, "", "export_ptms_tab"], [915, 2, 1, "", "export_sif"], [915, 2, 1, "", "export_struct_tab"], [915, 2, 1, "", "export_tab"], [915, 2, 1, "", "find_all_paths"], [915, 2, 1, "", "find_all_paths2"], [915, 2, 1, "", "find_complex"], [915, 2, 1, "", "first_neighbours"], [915, 2, 1, "", "fisher_enrichment"], [915, 2, 1, "", "geneset_enrichment"], [915, 2, 1, "", "genesymbol"], [915, 2, 1, "", "genesymbol_labels"], [915, 2, 1, "", "genesymbols"], [915, 2, 1, "", "get_attrs"], [915, 2, 1, "", "get_directed"], [915, 2, 1, "", "get_dirs_signs"], [915, 2, 1, "", "get_edge"], [915, 2, 1, "", "get_edges"], [915, 2, 1, "", "get_function"], [915, 2, 1, "", "get_giant"], [915, 2, 1, "", "get_go"], [915, 2, 1, "", "get_max"], [915, 2, 1, "", "get_network"], [915, 2, 1, "", "get_node"], [915, 2, 1, "", "get_node_d"], [915, 2, 1, "", "get_node_pair"], [915, 2, 1, "", "get_nodes"], [915, 2, 1, "", "get_nodes_d"], [915, 2, 1, "", "get_pathways"], [915, 2, 1, "", "get_proteomicsdb"], [915, 2, 1, "", "get_sub"], [915, 2, 1, "", "get_taxon"], [915, 2, 1, "", "go_annotate_graph"], [915, 2, 1, "", "go_enrichment"], [915, 2, 1, "", "gs"], [915, 2, 1, "", "gs_affected_by"], [915, 2, 1, "", "gs_affects"], [915, 2, 1, "", "gs_edge"], [915, 2, 1, "", "gs_in_directed"], [915, 2, 1, "", "gs_in_undirected"], [915, 2, 1, "", "gs_inhibited_by"], [915, 2, 1, "", "gs_inhibits"], [915, 2, 1, "", "gs_neighborhood"], [915, 2, 1, "", "gs_neighbors"], [915, 2, 1, "", "gs_stimulated_by"], [915, 2, 1, "", "gs_stimulates"], [915, 2, 1, "", "gss"], [915, 2, 1, "", "guide2pharma"], [915, 2, 1, "", "having_attr"], [915, 2, 1, "", "having_eattr"], [915, 2, 1, "", "having_ptm"], [915, 2, 1, "", "having_vattr"], [915, 2, 1, "", "homology_translation"], [915, 2, 1, "", "htp_stats"], [915, 2, 1, "", "in_complex"], [915, 2, 1, "", "in_directed"], [915, 2, 1, "", "in_undirected"], [915, 2, 1, "", "info"], [915, 2, 1, "", "init_complex_attr"], [915, 2, 1, "", "init_edge_attr"], [915, 2, 1, "", "init_gsea"], [915, 2, 1, "", "init_network"], [915, 2, 1, "", "init_vertex_attr"], [915, 2, 1, "", "interactions_all"], [915, 2, 1, "", "interactions_directed"], [915, 2, 1, "", "interactions_directed_by_resource"], [915, 2, 1, "", "interactions_inhibitory"], [915, 2, 1, "", "interactions_inhibitory_by_resource"], [915, 2, 1, "", "interactions_mutual"], [915, 2, 1, "", "interactions_mutual_by_resource"], [915, 2, 1, "", "interactions_signed"], [915, 2, 1, "", "interactions_signed_by_resource"], [915, 2, 1, "", "interactions_stimulatory"], [915, 2, 1, "", "interactions_stimulatory_by_resource"], [915, 2, 1, "", "interactions_undirected"], [915, 2, 1, "", "interactions_undirected_by_resource"], [915, 2, 1, "", "intergroup_shortest_paths"], [915, 2, 1, "", "intogen_cancer_drivers_list"], [915, 2, 1, "", "iter_edges"], [915, 2, 1, "", "iter_interactions"], [915, 2, 1, "", "jaccard_edges"], [915, 2, 1, "", "jaccard_meta"], [915, 2, 1, "", "kegg_directions"], [915, 2, 1, "", "kegg_pathways"], [915, 2, 1, "", "kinase_stats"], [915, 2, 1, "", "label"], [915, 2, 1, "", "label_by_go"], [915, 2, 1, "", "label_edges"], [915, 2, 1, "", "label_vertices"], [915, 2, 1, "", "laudanna_directions"], [915, 2, 1, "", "laudanna_effects"], [915, 2, 1, "", "license"], [915, 2, 1, "", "list_resources"], [915, 2, 1, "", "load_3dcomplexes"], [915, 2, 1, "", "load_3did_ddi"], [915, 2, 1, "", "load_3did_ddi2"], [915, 2, 1, "", "load_3did_dmi"], [915, 2, 1, "", "load_3did_interfaces"], [915, 2, 1, "", "load_all_pathways"], [915, 2, 1, "", "load_compleat"], [915, 2, 1, "", "load_complexportal"], [915, 2, 1, "", "load_comppi"], [915, 2, 1, "", "load_corum"], [915, 2, 1, "", "load_dbptm"], [915, 2, 1, "", "load_ddi"], [915, 2, 1, "", "load_ddis"], [915, 2, 1, "", "load_depod_dmi"], [915, 2, 1, "", "load_disgenet"], [915, 2, 1, "", "load_dmi"], [915, 2, 1, "", "load_dmis"], [915, 2, 1, "", "load_domino_dmi"], [915, 2, 1, "", "load_dorothea"], [915, 2, 1, "", "load_elm"], [915, 2, 1, "", "load_exocarta_attrs"], [915, 2, 1, "", "load_expression"], [915, 2, 1, "", "load_from_pickle"], [915, 2, 1, "", "load_go"], [915, 2, 1, "", "load_havugimana"], [915, 2, 1, "", "load_hpa"], [915, 2, 1, "", "load_hprd_ptms"], [915, 2, 1, "", "load_ielm"], [915, 2, 1, "", "load_interfaces"], [915, 2, 1, "", "load_li2012_ptms"], [915, 2, 1, "", "load_ligand_receptor_network"], [915, 2, 1, "", "load_lmpid"], [915, 2, 1, "", "load_matrisome_attrs"], [915, 2, 1, "", "load_membranome_attrs"], [915, 2, 1, "", "load_mimp_dmi"], [915, 2, 1, "", "load_mutations"], [915, 2, 1, "", "load_negatives"], [915, 2, 1, "", "load_old_omnipath"], [915, 2, 1, "", "load_omnipath"], [915, 2, 1, "", "load_pathways"], [915, 2, 1, "", "load_pdb"], [915, 2, 1, "", "load_pepcyber"], [915, 2, 1, "", "load_pfam"], [915, 2, 1, "", "load_pfam2"], [915, 2, 1, "", "load_pfam3"], [915, 2, 1, "", "load_phospho_dmi"], [915, 2, 1, "", "load_phosphoelm"], [915, 2, 1, "", "load_pisa"], [915, 2, 1, "", "load_pnetworks_dmi"], [915, 2, 1, "", "load_psite_phos"], [915, 2, 1, "", "load_psite_reg"], [915, 2, 1, "", "load_ptms"], [915, 2, 1, "", "load_ptms2"], [915, 2, 1, "", "load_resource"], [915, 2, 1, "", "load_resources"], [915, 2, 1, "", "load_signor_ptms"], [915, 2, 1, "", "load_surfaceome_attrs"], [915, 2, 1, "", "load_tfregulons"], [915, 2, 1, "", "load_vesiclepedia_attrs"], [915, 2, 1, "", "lookup_cache"], [915, 2, 1, "", "loop_edges"], [915, 2, 1, "", "mean_reference_per_interaction"], [915, 2, 1, "", "mean_reference_per_interaction_by_resource"], [915, 2, 1, "", "merge_lists"], [915, 2, 1, "", "merge_nodes"], [915, 2, 1, "", "mimp_directions"], [915, 2, 1, "", "mutated_edges"], [915, 2, 1, "", "name_edgelist"], [915, 2, 1, "", "names2vids"], [915, 2, 1, "", "negative_report"], [915, 2, 1, "", "neighborhood"], [915, 2, 1, "", "neighbors"], [915, 2, 1, "", "neighbourhood_network"], [915, 2, 1, "", "network_by_go"], [915, 2, 1, "", "network_filter"], [915, 2, 1, "", "network_stats"], [915, 2, 1, "", "new_edges"], [915, 2, 1, "", "new_nodes"], [915, 2, 1, "", "node_exists"], [915, 2, 1, "", "numof_directed_edges"], [915, 2, 1, "", "numof_edges"], [915, 2, 1, "", "numof_reference_interaction_pairs"], [915, 2, 1, "", "numof_references_by_resource"], [915, 2, 1, "", "numof_undirected_edges"], [915, 2, 1, "", "orthology_translation"], [915, 2, 1, "", "p"], [915, 2, 1, "", "pathway_attributes"], [915, 2, 1, "", "pathway_members"], [915, 2, 1, "", "pathway_names"], [915, 2, 1, "", "pathway_similarity"], [915, 2, 1, "", "pathways_table"], [915, 2, 1, "", "pfam_regions"], [915, 2, 1, "", "phosphonetworks_directions"], [915, 2, 1, "", "phosphopoint_directions"], [915, 2, 1, "", "phosphorylation_directions"], [915, 2, 1, "", "phosphorylation_signs"], [915, 2, 1, "", "phosphosite_directions"], [915, 2, 1, "", "prdb_tissue_expr"], [915, 2, 1, "", "process_directions"], [915, 2, 1, "", "process_dmi"], [915, 2, 1, "", "protein"], [915, 2, 1, "", "protein_edge"], [915, 2, 1, "", "proteins"], [915, 2, 1, "", "ps"], [915, 2, 1, "", "random_walk_with_return"], [915, 2, 1, "", "random_walk_with_return2"], [915, 2, 1, "", "read_from_cache"], [915, 2, 1, "", "read_list_file"], [915, 2, 1, "", "reference_edge_ratio"], [915, 2, 1, "", "reference_hist"], [915, 2, 1, "", "references"], [915, 2, 1, "", "references_by_resource"], [915, 2, 1, "", "reload"], [915, 2, 1, "", "remove_htp"], [915, 2, 1, "", "remove_undirected"], [915, 5, 1, "", "resources"], [915, 2, 1, "", "run_batch"], [915, 2, 1, "", "save_network"], [915, 2, 1, "", "save_session"], [915, 2, 1, "", "save_to_pickle"], [915, 2, 1, "", "search_attr_and"], [915, 2, 1, "", "search_attr_or"], [915, 2, 1, "", "second_neighbours"], [915, 2, 1, "", "select_by_go"], [915, 2, 1, "", "select_by_go_all"], [915, 2, 1, "", "select_by_go_expr"], [915, 2, 1, "", "separate"], [915, 2, 1, "", "separate_by_category"], [915, 2, 1, "", "sequences"], [915, 2, 1, "", "set_boolean_vattr"], [915, 2, 1, "", "set_categories"], [915, 2, 1, "", "set_chembl_mysql"], [915, 2, 1, "", "set_disease_genes"], [915, 2, 1, "", "set_druggability"], [915, 2, 1, "", "set_drugtargets"], [915, 2, 1, "", "set_kinases"], [915, 2, 1, "", "set_plasma_membrane_proteins_cspa"], [915, 2, 1, "", "set_plasma_membrane_proteins_cspa_surfaceome"], [915, 2, 1, "", "set_plasma_membrane_proteins_surfaceome"], [915, 2, 1, "", "set_receptors"], [915, 2, 1, "", "set_signaling_proteins"], [915, 2, 1, "", "set_tfs"], [915, 2, 1, "", "set_transcription_factors"], [915, 2, 1, "", "shortest_path_dist"], [915, 2, 1, "", "signaling_proteins_list"], [915, 2, 1, "", "signor_pathways"], [915, 2, 1, "", "similarity_groups"], [915, 2, 1, "", "small_plot"], [915, 2, 1, "", "sorensen_pathways"], [915, 2, 1, "", "source_diagram"], [915, 2, 1, "", "source_network"], [915, 2, 1, "", "source_similarity"], [915, 2, 1, "", "source_stats"], [915, 2, 1, "", "sources_hist"], [915, 2, 1, "", "sources_overlap"], [915, 2, 1, "", "sources_venn_data"], [915, 2, 1, "", "stats"], [915, 2, 1, "", "straight_between"], [915, 2, 1, "", "string_effects"], [915, 2, 1, "", "sum_in_complex"], [915, 2, 1, "", "summaries_tab"], [915, 2, 1, "", "table_latex"], [915, 2, 1, "", "third_source_directions"], [915, 2, 1, "", "tissue_network"], [915, 2, 1, "", "transcription_factors"], [915, 2, 1, "", "uniprot"], [915, 2, 1, "", "uniprots"], [915, 2, 1, "", "uniq_node_list"], [915, 2, 1, "", "uniq_ptm"], [915, 2, 1, "", "uniq_ptms"], [915, 2, 1, "", "up"], [915, 2, 1, "", "up_affected_by"], [915, 2, 1, "", "up_affects"], [915, 2, 1, "", "up_edge"], [915, 2, 1, "", "up_in_directed"], [915, 2, 1, "", "up_in_undirected"], [915, 2, 1, "", "up_inhibited_by"], [915, 2, 1, "", "up_inhibits"], [915, 2, 1, "", "up_neighborhood"], [915, 2, 1, "", "up_neighbors"], [915, 2, 1, "", "up_stimulated_by"], [915, 2, 1, "", "up_stimulates"], [915, 2, 1, "", "update_adjlist"], [915, 2, 1, "", "update_attrs"], [915, 2, 1, "", "update_cats"], [915, 2, 1, "", "update_db_dict"], [915, 2, 1, "", "update_pathway_types"], [915, 2, 1, "", "update_pathways"], [915, 2, 1, "", "update_sources"], [915, 2, 1, "", "update_summaries"], [915, 2, 1, "", "update_vertex_sources"], [915, 2, 1, "", "update_vindex"], [915, 2, 1, "", "update_vname"], [915, 2, 1, "", "ups"], [915, 2, 1, "", "v"], [915, 2, 1, "", "vertex_pathways"], [915, 2, 1, "", "vsgs"], [915, 2, 1, "", "vsup"], [915, 2, 1, "", "wang_effects"], [915, 2, 1, "", "write_table"]], "pypath.omnipath": [[920, 0, 0, "-", "app"], [922, 0, 0, "-", "databases"], [931, 0, 0, "-", "export"], [933, 3, 1, "", "init"], [934, 0, 0, "-", "param"], [937, 0, 0, "-", "server"]], "pypath.omnipath.app": [[921, 1, 1, "", "DatabaseManager"]], "pypath.omnipath.app.DatabaseManager": [[921, 2, 1, "", "__init__"], [921, 2, 1, "", "build"], [921, 2, 1, "", "build_dataset"], [921, 2, 1, "", "compile_table"], [921, 2, 1, "", "compile_tables"], [921, 2, 1, "", "dataset_dependencies"], [921, 2, 1, "", "define_dataset"], [921, 2, 1, "", "ensure_dataset"], [921, 2, 1, "", "ensure_dirs"], [921, 2, 1, "", "ensure_module"], [921, 2, 1, "", "foreach_dataset"], [921, 2, 1, "", "get_args_curated"], [921, 2, 1, "", "get_args_lncrna_mrna"], [921, 2, 1, "", "get_args_mirna_mrna"], [921, 2, 1, "", "get_args_small_molecule"], [921, 2, 1, "", "get_args_tf_mirna"], [921, 2, 1, "", "get_args_tf_target"], [921, 2, 1, "", "get_build_args"], [921, 2, 1, "", "get_db"], [921, 2, 1, "", "get_param"], [921, 2, 1, "", "load_dataset"], [921, 2, 1, "", "network_df"], [921, 2, 1, "", "network_df_by_source"], [921, 2, 1, "", "pickle_exists"], [921, 2, 1, "", "pickle_path"], [921, 2, 1, "", "reload"], [921, 2, 1, "", "reload_module"], [921, 2, 1, "", "remove_all"], [921, 2, 1, "", "remove_db"], [921, 2, 1, "", "set_network"], [921, 2, 1, "", "table_path"]], "pypath.omnipath.databases": [[923, 3, 1, "", "build"], [924, 3, 1, "", "class_and_param"], [925, 0, 0, "-", "define"], [929, 3, 1, "", "get_manager"], [930, 3, 1, "", "init_manager"]], "pypath.omnipath.databases.define": [[926, 1, 1, "", "DatabaseClass"], [927, 1, 1, "", "DatabaseDefinition"], [928, 1, 1, "", "DatabaseDefinitionManager"]], "pypath.omnipath.databases.define.DatabaseClass": [[926, 2, 1, "", "__init__"]], "pypath.omnipath.databases.define.DatabaseDefinition": [[927, 2, 1, "", "__init__"], [927, 2, 1, "", "from_dict"], [927, 2, 1, "", "from_json"]], "pypath.omnipath.databases.define.DatabaseDefinitionManager": [[928, 2, 1, "", "__init__"], [928, 2, 1, "", "build"], [928, 2, 1, "", "class_and_param"]], "pypath.omnipath.export": [[932, 1, 1, "", "Export"]], "pypath.omnipath.export.Export": [[932, 2, 1, "", "__init__"], [932, 2, 1, "", "add_extra_fields"], [932, 2, 1, "", "generic_attr_processor"], [932, 2, 1, "", "get_header"], [932, 2, 1, "", "make_df"], [932, 2, 1, "", "sources_table"], [932, 2, 1, "", "write_tab"]], "pypath.omnipath.param": [[935, 3, 1, "", "curated_ppi_resources"], [936, 3, 1, "", "tf_target_resources"]], "pypath.omnipath.server": [[938, 0, 0, "-", "build"], [940, 0, 0, "-", "generate_about_page"], [945, 0, 0, "-", "legacy"], [947, 0, 0, "-", "run"]], "pypath.omnipath.server.build": [[939, 1, 1, "", "WebserviceTables"]], "pypath.omnipath.server.build.WebserviceTables": [[939, 2, 1, "", "__init__"]], "pypath.omnipath.server.generate_about_page": [[941, 3, 1, "", "export_licenses"], [942, 3, 1, "", "generate_about_html"], [943, 3, 1, "", "resource_list_latex"], [944, 3, 1, "", "write_html"]], "pypath.omnipath.server.legacy": [[946, 1, 1, "", "PypathServer"]], "pypath.omnipath.server.legacy.PypathServer": [[946, 2, 1, "", "__init__"]], "pypath.omnipath.server.run": [[948, 1, 1, "", "BaseServer"], [949, 1, 1, "", "Rest"], [950, 1, 1, "", "TableServer"], [951, 1, 1, "", "TwistedWebResource"], [952, 1, 1, "", "TwistedWebSite"], [953, 3, 1, "", "stop_server"], [954, 3, 1, "", "twisted_listen_tcp"], [955, 3, 1, "", "twisted_run"]], "pypath.omnipath.server.run.BaseServer": [[948, 2, 1, "", "__init__"]], "pypath.omnipath.server.run.Rest": [[949, 2, 1, "", "__init__"]], "pypath.omnipath.server.run.TableServer": [[950, 2, 1, "", "__init__"]], "pypath.omnipath.server.run.TwistedWebResource": [[951, 2, 1, "", "__init__"]], "pypath.omnipath.server.run.TwistedWebSite": [[952, 2, 1, "", "__init__"]], "pypath.resources": [[957, 0, 0, "-", "controller"], [959, 0, 0, "-", "data"], [960, 0, 0, "-", "data_formats"], [972, 0, 0, "-", "descriptions"], [977, 3, 1, "", "get_controller"], [978, 0, 0, "-", "licenses"], [980, 0, 0, "-", "network"], [982, 0, 0, "-", "urls"]], "pypath.resources.controller": [[958, 1, 1, "", "ResourceController"]], "pypath.resources.controller.ResourceController": [[958, 2, 1, "", "__init__"], [958, 2, 1, "", "add_resource_attrs"], [958, 2, 1, "", "collect_interaction"], [958, 2, 1, "", "collect_network"], [958, 2, 1, "", "license_filter"], [958, 2, 1, "", "update"]], "pypath.resources.data_formats": [[961, 6, 1, "", "ROOT"], [962, 6, 1, "", "activity_flow"], [963, 6, 1, "", "collectri"], [964, 6, 1, "", "enzyme_substrate"], [965, 6, 1, "", "interaction"], [966, 6, 1, "", "interaction_htp"], [967, 6, 1, "", "obsolate"], [968, 6, 1, "", "pathway_bad"], [969, 6, 1, "", "reaction_pc"], [970, 6, 1, "", "transcription_deprecated"], [971, 6, 1, "", "transcription_onebyone"]], "pypath.resources.descriptions": [[973, 3, 1, "", "export_licenses"], [974, 3, 1, "", "gen_html"], [975, 3, 1, "", "resource_list_latex"], [976, 3, 1, "", "write_html"]], "pypath.resources.licenses": [[979, 1, 1, "", "Licenses"]], "pypath.resources.licenses.Licenses": [[979, 2, 1, "", "__init__"]], "pypath.resources.network": [[981, 3, 1, "", "dorothea_expand_levels"]], "pypath.share": [[984, 0, 0, "-", "cache"], [988, 0, 0, "-", "common"], [1087, 0, 0, "-", "constants"], [1088, 0, 0, "-", "curl"], [1105, 0, 0, "-", "log"], [1108, 0, 0, "-", "progress"], [1110, 0, 0, "-", "session"], [1116, 0, 0, "-", "settings"]], "pypath.share.cache": [[985, 3, 1, "", "cache_item"], [986, 3, 1, "", "cache_path"], [987, 3, 1, "", "get_cachedir"]], "pypath.share.common": [[989, 3, 1, "", "add_to_list"], [990, 3, 1, "", "add_to_set"], [991, 3, 1, "", "at_least_in"], [992, 3, 1, "", "clean_dict"], [993, 3, 1, "", "combine_attrs"], [994, 3, 1, "", "compr"], [995, 3, 1, "", "console"], [996, 3, 1, "", "decode"], [997, 3, 1, "", "del_empty"], [998, 3, 1, "", "df_memory_usage"], [999, 3, 1, "", "dict_collapse_keys"], [1000, 3, 1, "", "dict_counts"], [1001, 3, 1, "", "dict_diff"], [1002, 3, 1, "", "dict_expand_keys"], [1003, 3, 1, "", "dict_percent"], [1004, 3, 1, "", "dict_set_path"], [1005, 3, 1, "", "dict_set_percent"], [1006, 3, 1, "", "dict_str"], [1007, 3, 1, "", "dict_subtotals"], [1008, 3, 1, "", "dict_sym_diff"], [1009, 3, 1, "", "dict_union"], [1010, 3, 1, "", "eq"], [1011, 3, 1, "", "filtr"], [1012, 3, 1, "", "first"], [1013, 3, 1, "", "flat_list"], [1014, 3, 1, "", "float_or_nan"], [1015, 3, 1, "", "format_bytes"], [1016, 3, 1, "", "gen_session_id"], [1017, 3, 1, "", "get"], [1018, 3, 1, "", "get_args"], [1019, 3, 1, "", "identity"], [1020, 3, 1, "", "is_float"], [1021, 3, 1, "", "is_int"], [1022, 3, 1, "", "is_str"], [1023, 3, 1, "", "jaccard_index"], [1024, 3, 1, "", "join_dicts"], [1025, 3, 1, "", "latex_table"], [1026, 3, 1, "", "log_memory_usage"], [1027, 3, 1, "", "match"], [1028, 3, 1, "", "maybe_in_dict"], [1029, 3, 1, "", "md5"], [1030, 3, 1, "", "merge_dicts"], [1031, 3, 1, "", "n_shared_elements"], [1032, 3, 1, "", "n_shared_foreach"], [1033, 3, 1, "", "n_shared_total"], [1034, 3, 1, "", "n_shared_unique_foreach"], [1035, 3, 1, "", "n_unique_elements"], [1036, 3, 1, "", "n_unique_foreach"], [1037, 3, 1, "", "n_unique_total"], [1038, 3, 1, "", "negate"], [1039, 3, 1, "", "nest"], [1040, 3, 1, "", "none_or_len"], [1041, 3, 1, "", "paginate"], [1042, 3, 1, "", "prefix"], [1043, 3, 1, "", "print_table"], [1044, 3, 1, "", "python_memory_usage"], [1045, 3, 1, "", "re_safe_groups"], [1046, 3, 1, "", "remove_prefix"], [1047, 3, 1, "", "rotate"], [1048, 3, 1, "", "sets_to_sorted_lists"], [1049, 3, 1, "", "sfirst"], [1050, 3, 1, "", "shared_elements"], [1051, 3, 1, "", "shared_foreach"], [1052, 3, 1, "", "shared_total"], [1053, 3, 1, "", "shared_unique"], [1054, 3, 1, "", "shared_unique_foreach"], [1055, 3, 1, "", "shared_unique_total"], [1056, 1, 1, "", "silent"], [1057, 3, 1, "", "simpson_index"], [1058, 3, 1, "", "simpson_index_counts"], [1059, 3, 1, "", "something"], [1060, 3, 1, "", "sorensen_index"], [1061, 3, 1, "", "suffix"], [1062, 3, 1, "", "sum_dicts"], [1063, 3, 1, "", "swap_dict"], [1064, 3, 1, "", "swap_dict_simple"], [1065, 3, 1, "", "swap_suffix"], [1066, 3, 1, "", "table_add_row_numbers"], [1067, 3, 1, "", "table_format"], [1068, 3, 1, "", "table_textwrap"], [1069, 3, 1, "", "to_list"], [1070, 3, 1, "", "to_set"], [1071, 3, 1, "", "to_tuple"], [1072, 3, 1, "", "try_bool"], [1073, 3, 1, "", "try_float"], [1074, 3, 1, "", "tsv_table"], [1075, 3, 1, "", "uniq_list"], [1076, 3, 1, "", "uniq_list1"], [1077, 3, 1, "", "uniq_list2"], [1078, 3, 1, "", "uniq_ord_list"], [1079, 3, 1, "", "unique_elements"], [1080, 3, 1, "", "unique_foreach"], [1081, 3, 1, "", "unique_list"], [1082, 3, 1, "", "unique_total"], [1083, 3, 1, "", "upper0"], [1084, 3, 1, "", "values"], [1085, 3, 1, "", "wcl"], [1086, 3, 1, "", "wrap_truncate"]], "pypath.share.common.silent": [[1056, 2, 1, "", "__init__"]], "pypath.share.curl": [[1089, 1, 1, "", "Curl"], [1090, 1, 1, "", "FileOpener"], [1091, 1, 1, "", "RemoteFile"], [1092, 1, 1, "", "cache_delete_off"], [1093, 1, 1, "", "cache_delete_on"], [1094, 1, 1, "", "cache_off"], [1095, 1, 1, "", "cache_on"], [1096, 1, 1, "", "cache_print_off"], [1097, 1, 1, "", "cache_print_on"], [1098, 1, 1, "", "debug_off"], [1099, 1, 1, "", "debug_on"], [1100, 1, 1, "", "dryrun_off"], [1101, 1, 1, "", "dryrun_on"], [1102, 3, 1, "", "is_url"], [1103, 1, 1, "", "preserve_off"], [1104, 1, 1, "", "preserve_on"]], "pypath.share.curl.Curl": [[1089, 2, 1, "", "__init__"], [1089, 2, 1, "", "close"], [1089, 2, 1, "", "construct_binary_data"], [1089, 2, 1, "", "extract"], [1089, 2, 1, "", "is_quoted"], [1089, 2, 1, "", "open"], [1089, 2, 1, "", "open_tgz"], [1089, 2, 1, "", "replace_forbidden"], [1089, 2, 1, "", "set_binary_data"], [1089, 2, 1, "", "url_fix"]], "pypath.share.curl.FileOpener": [[1090, 2, 1, "", "__init__"], [1090, 2, 1, "", "extract"], [1090, 2, 1, "", "open"], [1090, 2, 1, "", "open_tgz"]], "pypath.share.curl.RemoteFile": [[1091, 2, 1, "", "__init__"]], "pypath.share.curl.cache_delete_off": [[1092, 2, 1, "", "__init__"]], "pypath.share.curl.cache_delete_on": [[1093, 2, 1, "", "__init__"]], "pypath.share.curl.cache_off": [[1094, 2, 1, "", "__init__"]], "pypath.share.curl.cache_on": [[1095, 2, 1, "", "__init__"]], "pypath.share.curl.cache_print_off": [[1096, 2, 1, "", "__init__"]], "pypath.share.curl.cache_print_on": [[1097, 2, 1, "", "__init__"]], "pypath.share.curl.debug_off": [[1098, 2, 1, "", "__init__"]], "pypath.share.curl.debug_on": [[1099, 2, 1, "", "__init__"]], "pypath.share.curl.dryrun_off": [[1100, 2, 1, "", "__init__"]], "pypath.share.curl.dryrun_on": [[1101, 2, 1, "", "__init__"]], "pypath.share.curl.preserve_off": [[1103, 2, 1, "", "__init__"]], "pypath.share.curl.preserve_on": [[1104, 2, 1, "", "__init__"]], "pypath.share.log": [[1106, 1, 1, "", "Logger"], [1107, 3, 1, "", "new_logger"]], "pypath.share.log.Logger": [[1106, 2, 1, "", "__init__"], [1106, 2, 1, "", "browse"], [1106, 2, 1, "", "close_logfile"], [1106, 2, 1, "", "console"], [1106, 2, 1, "", "flush"], [1106, 2, 1, "", "get_logdir"], [1106, 2, 1, "", "label_message"], [1106, 2, 1, "", "msg"], [1106, 2, 1, "", "open_logfile"], [1106, 2, 1, "", "strftime"], [1106, 2, 1, "", "timestamp"], [1106, 2, 1, "", "timestamp_message"]], "pypath.share.progress": [[1109, 1, 1, "", "Progress"]], "pypath.share.progress.Progress": [[1109, 2, 1, "", "__init__"], [1109, 2, 1, "", "get_desc"], [1109, 2, 1, "", "init_tqdm"], [1109, 2, 1, "", "set_done"], [1109, 2, 1, "", "set_status"], [1109, 2, 1, "", "set_total"], [1109, 2, 1, "", "step"], [1109, 2, 1, "", "terminate"]], "pypath.share.session": [[1111, 1, 1, "", "Logger"], [1112, 1, 1, "", "Session"], [1113, 3, 1, "", "get_log"], [1114, 3, 1, "", "get_session"], [1115, 3, 1, "", "new_session"]], "pypath.share.session.Logger": [[1111, 2, 1, "", "__init__"]], "pypath.share.session.Session": [[1112, 2, 1, "", "__init__"], [1112, 2, 1, "", "gen_session_id"], [1112, 2, 1, "", "start_logger"]], "pypath.share.settings": [[1117, 1, 1, "", "Settings"], [1118, 3, 1, "", "context"], [1119, 3, 1, "", "get"], [1120, 3, 1, "", "setup"]], "pypath.share.settings.Settings": [[1117, 2, 1, "", "__init__"], [1117, 2, 1, "", "context"], [1117, 2, 1, "", "get"], [1117, 2, 1, "", "get_default"], [1117, 2, 1, "", "reset"], [1117, 2, 1, "", "reset_all"], [1117, 2, 1, "", "setup"]], "pypath.utils": [[1122, 0, 0, "-", "go"], [1130, 0, 0, "-", "homology"], [1143, 0, 0, "-", "mapping"], [1158, 0, 0, "-", "pdb"], [1163, 0, 0, "-", "proteomicsdb"], [1165, 0, 0, "-", "pyreact"], [1180, 0, 0, "-", "reflists"], [1188, 0, 0, "-", "residues"], [1190, 0, 0, "-", "seq"], [1197, 0, 0, "-", "taxonomy"], [1212, 0, 0, "-", "unichem"], [1214, 0, 0, "-", "uniprot"]], "pypath.utils.go": [[1123, 1, 1, "", "GOAnnotation"], [1124, 1, 1, "", "GOCustomAnnotation"], [1125, 1, 1, "", "GeneOntology"], [1126, 3, 1, "", "annotate"], [1127, 3, 1, "", "get_db"], [1128, 3, 1, "", "init_db"], [1129, 3, 1, "", "load_go"]], "pypath.utils.go.GOAnnotation": [[1123, 2, 1, "", "__init__"], [1123, 2, 1, "", "all_uniprots"], [1123, 2, 1, "", "expr_names_to_terms"], [1123, 2, 1, "", "get_annot"], [1123, 2, 1, "", "get_annot_ancestors"], [1123, 2, 1, "", "get_annots"], [1123, 2, 1, "", "get_annots_ancestors"], [1123, 2, 1, "", "get_name"], [1123, 2, 1, "", "get_term"], [1123, 2, 1, "", "has_any_term"], [1123, 2, 1, "", "has_term"], [1123, 2, 1, "", "i_select_by_term"], [1123, 2, 1, "", "reload"], [1123, 2, 1, "", "select"], [1123, 2, 1, "", "select_by_all"], [1123, 2, 1, "", "select_by_expr"], [1123, 2, 1, "", "select_by_expr_terms"], [1123, 2, 1, "", "select_by_name"], [1123, 2, 1, "", "select_by_term"]], "pypath.utils.go.GOCustomAnnotation": [[1124, 2, 1, "", "__init__"], [1124, 2, 1, "", "get_annotation"], [1124, 2, 1, "", "get_annotations"], [1124, 2, 1, "", "process_categories"], [1124, 2, 1, "", "reload"]], "pypath.utils.go.GeneOntology": [[1125, 2, 1, "", "__init__"], [1125, 2, 1, "", "all_from_aspect"], [1125, 2, 1, "", "aspect_from_name"], [1125, 2, 1, "", "flatten"], [1125, 2, 1, "", "get_all_ancestors"], [1125, 2, 1, "", "get_all_descendants"], [1125, 2, 1, "", "get_aspect"], [1125, 2, 1, "", "get_name"], [1125, 2, 1, "", "get_term"], [1125, 2, 1, "", "highest"], [1125, 2, 1, "", "is_leaf"], [1125, 2, 1, "", "is_name"], [1125, 2, 1, "", "is_root"], [1125, 2, 1, "", "is_term"], [1125, 2, 1, "", "lowest"], [1125, 2, 1, "", "names_to_terms"], [1125, 2, 1, "", "names_to_terms_aspects"], [1125, 2, 1, "", "reload"], [1125, 2, 1, "", "set_of"], [1125, 2, 1, "", "set_of_names"], [1125, 2, 1, "", "set_of_terms"], [1125, 2, 1, "", "subgraph_nodes"], [1125, 2, 1, "", "terms_to_names"], [1125, 2, 1, "", "terms_to_names_aspects"]], "pypath.utils.homology": [[1131, 1, 1, "", "HomologyManager"], [1132, 1, 1, "", "Ortholog"], [1133, 1, 1, "", "ProteinHomology"], [1134, 1, 1, "", "Proteomes"], [1135, 1, 1, "", "PtmHomology"], [1136, 1, 1, "", "SequenceContainer"], [1137, 3, 1, "", "get_df"], [1138, 3, 1, "", "get_dict"], [1139, 3, 1, "", "get_manager"], [1140, 3, 1, "", "init"], [1141, 3, 1, "", "translate"], [1142, 3, 1, "", "translate_df"]], "pypath.utils.homology.HomologyManager": [[1131, 2, 1, "", "__init__"], [1131, 2, 1, "", "get_df"], [1131, 2, 1, "", "get_dict"], [1131, 2, 1, "", "translate"], [1131, 2, 1, "", "translate_df"]], "pypath.utils.homology.Ortholog": [[1132, 2, 1, "", "__init__"], [1132, 2, 1, "", "count"], [1132, 4, 1, "", "ensembl_hc"], [1132, 4, 1, "", "ensembl_type"], [1132, 2, 1, "", "index"], [1132, 4, 1, "", "resource"], [1132, 4, 1, "", "uniprot"]], "pypath.utils.homology.ProteinHomology": [[1133, 2, 1, "", "__init__"], [1133, 2, 1, "", "asdict"], [1133, 2, 1, "", "df"], [1133, 2, 1, "", "load_homologene"], [1133, 2, 1, "", "translate"], [1133, 2, 1, "", "translate_df"]], "pypath.utils.homology.Proteomes": [[1134, 2, 1, "", "__init__"]], "pypath.utils.homology.PtmHomology": [[1135, 2, 1, "", "__init__"], [1135, 2, 1, "", "asdict"], [1135, 2, 1, "", "df"], [1135, 2, 1, "", "load_homologene"], [1135, 2, 1, "", "ptm_orthology"], [1135, 2, 1, "", "translate"], [1135, 2, 1, "", "translate_df"], [1135, 2, 1, "", "translate_site"]], "pypath.utils.homology.SequenceContainer": [[1136, 2, 1, "", "__init__"]], "pypath.utils.mapping": [[1144, 1, 1, "", "MapReader"], [1145, 1, 1, "", "Mapper"], [1146, 1, 1, "", "MappingTable"], [1147, 1, 1, "", "MappingTableKey"], [1148, 6, 1, "", "UNIPROT_ID_TYPES"], [1149, 3, 1, "", "get_mapper"], [1150, 3, 1, "", "guess_type"], [1151, 3, 1, "", "id_from_label"], [1152, 3, 1, "", "id_from_label0"], [1153, 3, 1, "", "init"], [1154, 3, 1, "", "label"], [1155, 3, 1, "", "map_name"], [1156, 3, 1, "", "map_name0"], [1157, 3, 1, "", "map_names"]], "pypath.utils.mapping.MapReader": [[1144, 2, 1, "", "__init__"], [1144, 2, 1, "", "id_type_side"], [1144, 2, 1, "", "load"], [1144, 5, 1, "", "mapping_table_a_to_b"], [1144, 5, 1, "", "mapping_table_b_to_a"], [1144, 2, 1, "", "read"], [1144, 2, 1, "", "read_cache"], [1144, 2, 1, "", "read_mapping_array"], [1144, 2, 1, "", "read_mapping_biomart"], [1144, 2, 1, "", "read_mapping_file"], [1144, 2, 1, "", "read_mapping_hmdb"], [1144, 2, 1, "", "read_mapping_ramp"], [1144, 2, 1, "", "read_mapping_unichem"], [1144, 2, 1, "", "read_mapping_uniprot"], [1144, 2, 1, "", "read_mapping_uniprot_list"], [1144, 2, 1, "", "resource_id_type"], [1144, 2, 1, "", "set_uniprot_space"], [1144, 2, 1, "", "setup_cache"], [1144, 2, 1, "", "tables_loaded"], [1144, 2, 1, "", "write_cache"]], "pypath.utils.mapping.Mapper": [[1145, 2, 1, "", "__init__"], [1145, 2, 1, "", "chain_map"], [1145, 2, 1, "", "create_reverse"], [1145, 2, 1, "", "get_table_key"], [1145, 2, 1, "", "guess_type"], [1145, 2, 1, "", "has_mapping_table"], [1145, 2, 1, "", "id_types"], [1145, 2, 1, "", "identifier"], [1145, 2, 1, "", "label"], [1145, 2, 1, "", "load_genesymbol5"], [1145, 2, 1, "", "load_mapping"], [1145, 2, 1, "", "load_uniprot_static"], [1145, 2, 1, "", "map_name"], [1145, 2, 1, "", "map_name0"], [1145, 2, 1, "", "map_names"], [1145, 2, 1, "", "mapping_tables"], [1145, 2, 1, "", "only_uniprot_ac"], [1145, 2, 1, "", "other_organism_uniprot"], [1145, 2, 1, "", "primary_uniprot"], [1145, 2, 1, "", "reload"], [1145, 2, 1, "", "remove_expired"], [1145, 2, 1, "", "remove_key"], [1145, 2, 1, "", "remove_table"], [1145, 2, 1, "", "reverse_key"], [1145, 2, 1, "", "reverse_mapping"], [1145, 2, 1, "", "swissprots"], [1145, 2, 1, "", "translate_deleted_uniprot_by_genesymbol"], [1145, 2, 1, "", "trembl_swissprot"], [1145, 2, 1, "", "uniprot_cleanup"], [1145, 2, 1, "", "valid_uniprot"], [1145, 2, 1, "", "which_table"]], "pypath.utils.mapping.MappingTable": [[1146, 2, 1, "", "__init__"], [1146, 2, 1, "", "get_key"]], "pypath.utils.mapping.MappingTableKey": [[1147, 2, 1, "", "__init__"], [1147, 2, 1, "", "count"], [1147, 4, 1, "", "id_type"], [1147, 2, 1, "", "index"], [1147, 4, 1, "", "ncbi_tax_id"], [1147, 4, 1, "", "target_id_type"]], "pypath.utils.pdb": [[1159, 1, 1, "", "Residue"], [1160, 1, 1, "", "ResidueMapper"], [1161, 1, 1, "", "Segment"], [1162, 3, 1, "", "residue_pdb"]], "pypath.utils.pdb.Residue": [[1159, 2, 1, "", "__init__"], [1159, 4, 1, "", "chain"], [1159, 2, 1, "", "count"], [1159, 2, 1, "", "index"], [1159, 4, 1, "", "offset"], [1159, 4, 1, "", "resnum"], [1159, 4, 1, "", "uniprot"]], "pypath.utils.pdb.ResidueMapper": [[1160, 2, 1, "", "__init__"], [1160, 2, 1, "", "clean"], [1160, 2, 1, "", "get_residue"], [1160, 2, 1, "", "load_mapping"]], "pypath.utils.pdb.Segment": [[1161, 2, 1, "", "__init__"], [1161, 2, 1, "", "count"], [1161, 2, 1, "", "index"], [1161, 4, 1, "", "pdb_end"], [1161, 4, 1, "", "pdb_start"], [1161, 4, 1, "", "uniprot"], [1161, 4, 1, "", "uniprot_end"], [1161, 4, 1, "", "uniprot_start"]], "pypath.utils.proteomicsdb": [[1164, 1, 1, "", "ProteomicsDB"]], "pypath.utils.proteomicsdb.ProteomicsDB": [[1164, 2, 1, "", "__init__"], [1164, 2, 1, "", "get_expression"], [1164, 2, 1, "", "get_pieces"], [1164, 2, 1, "", "get_proteins"], [1164, 2, 1, "", "get_tissues"], [1164, 2, 1, "", "pandas_matrix"], [1164, 2, 1, "", "query"], [1164, 2, 1, "", "tissues_x_proteins"]], "pypath.utils.pyreact": [[1166, 1, 1, "", "AttributeHandler"], [1167, 1, 1, "", "BioPaxReader"], [1168, 1, 1, "", "Complex"], [1169, 1, 1, "", "ComplexVariations"], [1170, 1, 1, "", "Control"], [1171, 1, 1, "", "Entity"], [1172, 1, 1, "", "EntitySet"], [1173, 1, 1, "", "Intersecting"], [1174, 1, 1, "", "Protein"], [1175, 1, 1, "", "ProteinFamily"], [1176, 1, 1, "", "PyReact"], [1177, 1, 1, "", "Reaction"], [1178, 1, 1, "", "ReactionSide"], [1179, 1, 1, "", "Reference"]], "pypath.utils.pyreact.AttributeHandler": [[1166, 2, 1, "", "__init__"]], "pypath.utils.pyreact.BioPaxReader": [[1167, 2, 1, "", "__init__"], [1167, 2, 1, "", "biopax_size"], [1167, 2, 1, "", "cleanup_hook"], [1167, 2, 1, "", "close_biopax"], [1167, 2, 1, "", "extract"], [1167, 2, 1, "", "init_etree"], [1167, 2, 1, "", "iterate"], [1167, 2, 1, "", "open_biopax"], [1167, 2, 1, "", "process"], [1167, 2, 1, "", "set_progress"]], "pypath.utils.pyreact.Complex": [[1168, 2, 1, "", "__init__"]], "pypath.utils.pyreact.ComplexVariations": [[1169, 2, 1, "", "__init__"], [1169, 2, 1, "", "itermembers"]], "pypath.utils.pyreact.Control": [[1170, 2, 1, "", "__init__"]], "pypath.utils.pyreact.Entity": [[1171, 2, 1, "", "__init__"], [1171, 2, 1, "", "expand"]], "pypath.utils.pyreact.EntitySet": [[1172, 2, 1, "", "__init__"]], "pypath.utils.pyreact.Intersecting": [[1173, 2, 1, "", "__init__"]], "pypath.utils.pyreact.Protein": [[1174, 2, 1, "", "__init__"], [1174, 2, 1, "", "expand"]], "pypath.utils.pyreact.ProteinFamily": [[1175, 2, 1, "", "__init__"]], "pypath.utils.pyreact.PyReact": [[1176, 2, 1, "", "__init__"], [1176, 2, 1, "", "gen_cvariations"], [1176, 2, 1, "", "in_same_component"], [1176, 2, 1, "", "merge_complexes"], [1176, 2, 1, "", "merge_cvariations"]], "pypath.utils.pyreact.Reaction": [[1177, 2, 1, "", "__init__"]], "pypath.utils.pyreact.ReactionSide": [[1178, 2, 1, "", "__init__"], [1178, 2, 1, "", "expand"]], "pypath.utils.pyreact.Reference": [[1179, 2, 1, "", "__init__"], [1179, 2, 1, "", "expand"]], "pypath.utils.reflists": [[1181, 1, 1, "", "ReferenceListManager"], [1182, 3, 1, "", "check"], [1183, 3, 1, "", "get_manager"], [1184, 3, 1, "", "get_reflist"], [1185, 3, 1, "", "init"], [1186, 3, 1, "", "is_not"], [1187, 3, 1, "", "select"]], "pypath.utils.reflists.ReferenceListManager": [[1181, 2, 1, "", "__init__"], [1181, 2, 1, "", "check"], [1181, 2, 1, "", "is_not"], [1181, 2, 1, "", "select"]], "pypath.utils.residues": [[1189, 1, 1, "", "ResidueMapper"]], "pypath.utils.residues.ResidueMapper": [[1189, 2, 1, "", "__init__"], [1189, 2, 1, "", "clean"]], "pypath.utils.seq": [[1191, 1, 1, "", "Pfam"], [1192, 1, 1, "", "Resource"], [1193, 1, 1, "", "Seq"], [1194, 3, 1, "", "get_isoforms"], [1195, 3, 1, "", "read_fasta"], [1196, 3, 1, "", "swissprot_seq"]], "pypath.utils.seq.Pfam": [[1191, 2, 1, "", "__init__"], [1191, 2, 1, "", "iterdb"], [1191, 2, 1, "", "iterprotein"], [1191, 2, 1, "", "load"], [1191, 2, 1, "", "processor"], [1191, 2, 1, "", "unload"]], "pypath.utils.seq.Resource": [[1192, 2, 1, "", "__init__"], [1192, 2, 1, "", "iterdb"], [1192, 2, 1, "", "iterprotein"], [1192, 2, 1, "", "load"], [1192, 2, 1, "", "processor"], [1192, 2, 1, "", "unload"]], "pypath.utils.seq.Seq": [[1193, 2, 1, "", "__init__"], [1193, 2, 1, "", "findall"]], "pypath.utils.taxonomy": [[1198, 3, 1, "", "ensure_common_name"], [1199, 3, 1, "", "ensure_ensembl_name"], [1200, 3, 1, "", "ensure_latin_name"], [1201, 3, 1, "", "ensure_ncbi_tax_id"], [1202, 3, 1, "", "get_db"], [1203, 3, 1, "", "init_db"], [1204, 3, 1, "", "short_latin_names"], [1205, 3, 1, "", "shorten_latin_name"], [1206, 3, 1, "", "taxid_from_common_name"], [1207, 3, 1, "", "taxid_from_dbptm_taxon_name"], [1208, 3, 1, "", "taxid_from_ensembl_name"], [1209, 3, 1, "", "taxid_from_latin_name"], [1210, 3, 1, "", "taxid_from_nonstandard"], [1211, 3, 1, "", "uniprot_taxid"]], "pypath.utils.unichem": [[1213, 1, 1, "", "Unichem"]], "pypath.utils.unichem.Unichem": [[1213, 2, 1, "", "__init__"], [1213, 2, 1, "", "connectivity_search"], [1213, 2, 1, "", "inchikey2anything"], [1213, 2, 1, "", "info"], [1213, 2, 1, "", "smiles2chembl"], [1213, 2, 1, "", "translate"], [1213, 2, 1, "", "usage"]], "pypath.utils.uniprot": [[1215, 1, 1, "", "UniprotProtein"], [1216, 3, 1, "", "ac"], [1217, 3, 1, "", "activity_regulation"], [1218, 3, 1, "", "activity_regulation_with_xrefs"], [1219, 3, 1, "", "alternative_products"], [1220, 3, 1, "", "alternative_products_with_xrefs"], [1221, 3, 1, "", "browse"], [1222, 3, 1, "", "catalytic_activity"], [1223, 3, 1, "", "catalytic_activity_with_xrefs"], [1224, 3, 1, "", "collect"], [1225, 3, 1, "", "databases"], [1226, 3, 1, "", "disease"], [1227, 3, 1, "", "disease_with_xrefs"], [1228, 3, 1, "", "ec"], [1229, 3, 1, "", "features_table"], [1230, 3, 1, "", "full_name"], [1231, 3, 1, "", "function"], [1232, 3, 1, "", "function_genecards"], [1233, 3, 1, "", "function_or_genecards"], [1234, 3, 1, "", "function_with_genecards"], [1235, 3, 1, "", "function_with_xrefs"], [1236, 3, 1, "", "genesymbol"], [1237, 3, 1, "", "has_tag"], [1238, 3, 1, "", "id"], [1239, 3, 1, "", "info"], [1240, 3, 1, "", "info_section"], [1241, 3, 1, "", "interaction"], [1242, 3, 1, "", "interaction_with_xrefs"], [1243, 3, 1, "", "is_reviewed"], [1244, 3, 1, "", "itertag"], [1245, 3, 1, "", "keywords"], [1246, 3, 1, "", "keywords_with_xrefs"], [1247, 3, 1, "", "length"], [1248, 3, 1, "", "lengths"], [1249, 3, 1, "", "load"], [1250, 3, 1, "", "organism"], [1251, 3, 1, "", "print_features"], [1252, 3, 1, "", "ptm"], [1253, 3, 1, "", "ptm_with_xrefs"], [1254, 3, 1, "", "query"], [1255, 3, 1, "", "reload"], [1256, 3, 1, "", "remove_xrefs"], [1257, 3, 1, "", "sequence"], [1258, 3, 1, "", "sequence_caution"], [1259, 3, 1, "", "sequence_caution_with_xrefs"], [1260, 3, 1, "", "similarity"], [1261, 3, 1, "", "similarity_with_xrefs"], [1262, 3, 1, "", "subcellular_location"], [1263, 3, 1, "", "subcellular_location_with_xrefs"], [1264, 3, 1, "", "subunit"], [1265, 3, 1, "", "subunit_with_xrefs"], [1266, 3, 1, "", "tissue_specificity"], [1267, 3, 1, "", "tissue_specificity_with_xrefs"], [1268, 3, 1, "", "update_databases"], [1269, 3, 1, "", "update_info"], [1270, 3, 1, "", "web_resource"], [1271, 3, 1, "", "web_resource_with_xrefs"], [1272, 3, 1, "", "weight"], [1273, 3, 1, "", "weights"]], "pypath.utils.uniprot.UniprotProtein": [[1215, 2, 1, "", "__init__"], [1215, 5, 1, "", "databases"], [1215, 2, 1, "", "info_section"], [1215, 5, 1, "", "keywords"], [1215, 5, 1, "", "keywords_with_xrefs"], [1215, 5, 1, "", "length"], [1215, 5, 1, "", "lengths"], [1215, 5, 1, "", "sequence"], [1215, 5, 1, "", "weight"], [1215, 5, 1, "", "weights"]], "pypath.visual": [[1275, 0, 0, "-", "drawing"], [1278, 0, 0, "-", "igraph_drawing"], [1297, 0, 0, "-", "plot"]], "pypath.visual.drawing": [[1276, 1, 1, "", "InterSet"], [1277, 1, 1, "", "Plot"]], "pypath.visual.drawing.InterSet": [[1276, 2, 1, "", "__init__"], [1276, 2, 1, "", "draw"]], "pypath.visual.drawing.Plot": [[1277, 2, 1, "", "__init__"]], "pypath.visual.igraph_drawing": [[1279, 1, 1, "", "AbstractCairoGraphDrawer"], [1280, 4, 1, "", "ArrowEdgeDrawer"], [1281, 1, 1, "", "DefaultGraphDrawerFFsupport"], [1282, 4, 1, "", "DefaultVertexDrawer"], [1283, 4, 1, "", "TextDrawer"], [1284, 0, 0, "-", "edge"], [1291, 0, 0, "-", "vertex"]], "pypath.visual.igraph_drawing.AbstractCairoGraphDrawer": [[1279, 2, 1, "", "__init__"]], "pypath.visual.igraph_drawing.DefaultGraphDrawerFFsupport": [[1281, 2, 1, "", "__init__"]], "pypath.visual.igraph_drawing.edge": [[1285, 1, 1, "", "AbstractEdgeDrawer"], [1286, 1, 1, "", "AlphaVaryingEdgeDrawer"], [1287, 1, 1, "", "ArrowEdgeDrawer"], [1288, 1, 1, "", "DarkToLightEdgeDrawer"], [1289, 1, 1, "", "LightToDarkEdgeDrawer"], [1290, 1, 1, "", "TaperedEdgeDrawer"]], "pypath.visual.igraph_drawing.edge.AbstractEdgeDrawer": [[1285, 2, 1, "", "__init__"], [1285, 2, 1, "", "draw_directed_edge"], [1285, 2, 1, "", "draw_loop_edge"], [1285, 2, 1, "", "draw_undirected_edge"], [1285, 2, 1, "", "get_label_position"]], "pypath.visual.igraph_drawing.edge.AlphaVaryingEdgeDrawer": [[1286, 2, 1, "", "__init__"], [1286, 2, 1, "", "draw_directed_edge"], [1286, 2, 1, "", "draw_loop_edge"], [1286, 2, 1, "", "draw_undirected_edge"], [1286, 2, 1, "", "get_label_position"]], "pypath.visual.igraph_drawing.edge.ArrowEdgeDrawer": [[1287, 2, 1, "", "__init__"], [1287, 2, 1, "", "draw_directed_edge"], [1287, 2, 1, "", "draw_loop_edge"], [1287, 2, 1, "", "draw_undirected_edge"], [1287, 2, 1, "", "get_label_position"]], "pypath.visual.igraph_drawing.edge.DarkToLightEdgeDrawer": [[1288, 2, 1, "", "__init__"], [1288, 2, 1, "", "draw_directed_edge"], [1288, 2, 1, "", "draw_loop_edge"], [1288, 2, 1, "", "draw_undirected_edge"], [1288, 2, 1, "", "get_label_position"]], "pypath.visual.igraph_drawing.edge.LightToDarkEdgeDrawer": [[1289, 2, 1, "", "__init__"], [1289, 2, 1, "", "draw_directed_edge"], [1289, 2, 1, "", "draw_loop_edge"], [1289, 2, 1, "", "draw_undirected_edge"], [1289, 2, 1, "", "get_label_position"]], "pypath.visual.igraph_drawing.edge.TaperedEdgeDrawer": [[1290, 2, 1, "", "__init__"], [1290, 2, 1, "", "draw_directed_edge"], [1290, 2, 1, "", "draw_loop_edge"], [1290, 2, 1, "", "draw_undirected_edge"], [1290, 2, 1, "", "get_label_position"]], "pypath.visual.igraph_drawing.vertex": [[1292, 1, 1, "", "AbstractCairoDrawer"], [1293, 1, 1, "", "AbstractCairoVertexDrawer"], [1294, 1, 1, "", "AbstractDrawer"], [1295, 1, 1, "", "AbstractVertexDrawer"], [1296, 1, 1, "", "DefaultVertexDrawer"]], "pypath.visual.igraph_drawing.vertex.AbstractCairoDrawer": [[1292, 2, 1, "", "__init__"]], "pypath.visual.igraph_drawing.vertex.AbstractCairoVertexDrawer": [[1293, 2, 1, "", "__init__"], [1293, 2, 1, "", "draw"]], "pypath.visual.igraph_drawing.vertex.AbstractDrawer": [[1294, 2, 1, "", "__init__"]], "pypath.visual.igraph_drawing.vertex.AbstractVertexDrawer": [[1295, 2, 1, "", "__init__"], [1295, 2, 1, "", "draw"]], "pypath.visual.igraph_drawing.vertex.DefaultVertexDrawer": [[1296, 2, 1, "", "__init__"], [1296, 2, 1, "", "draw"]], "pypath.visual.plot": [[1298, 1, 1, "", "Barplot"], [1299, 1, 1, "", "BarplotsGrid"], [1300, 1, 1, "", "CurationPlot"], [1301, 1, 1, "", "Dendrogram"], [1302, 1, 1, "", "Histogram"], [1303, 1, 1, "", "HistoryTree"], [1304, 1, 1, "", "HtpCharacteristics"], [1305, 1, 1, "", "MultiBarplot"], [1306, 1, 1, "", "Plot"], [1307, 1, 1, "", "RefsComposite"], [1308, 1, 1, "", "ScatterPlus"], [1309, 1, 1, "", "SimilarityGraph"], [1310, 1, 1, "", "StackedBarplot"], [1311, 3, 1, "", "boxplot"], [1312, 3, 1, "", "get_moves"], [1313, 3, 1, "", "is_opentype_cff_font"], [1314, 3, 1, "", "move_labels"], [1315, 3, 1, "", "overlap"], [1316, 3, 1, "", "rotate_labels"]], "pypath.visual.plot.Barplot": [[1298, 2, 1, "", "__init__"], [1298, 2, 1, "", "finish"]], "pypath.visual.plot.BarplotsGrid": [[1299, 2, 1, "", "__init__"], [1299, 2, 1, "", "finish"], [1299, 2, 1, "", "init_fig"], [1299, 2, 1, "", "set_figsize"], [1299, 2, 1, "", "set_grid"], [1299, 2, 1, "", "set_title"]], "pypath.visual.plot.CurationPlot": [[1300, 2, 1, "", "__init__"], [1300, 2, 1, "", "finish"], [1300, 2, 1, "", "init_fig"], [1300, 2, 1, "", "set_figsize"]], "pypath.visual.plot.Dendrogram": [[1301, 2, 1, "", "__init__"], [1301, 2, 1, "", "finish"], [1301, 2, 1, "", "init_fig"], [1301, 2, 1, "", "set_figsize"]], "pypath.visual.plot.Histogram": [[1302, 2, 1, "", "__init__"], [1302, 2, 1, "", "finish"]], "pypath.visual.plot.HistoryTree": [[1303, 2, 1, "", "__init__"], [1303, 2, 1, "", "run_latex"], [1303, 2, 1, "", "write_tex"]], "pypath.visual.plot.HtpCharacteristics": [[1304, 2, 1, "", "__init__"], [1304, 2, 1, "", "finish"], [1304, 2, 1, "", "init_fig"], [1304, 2, 1, "", "set_figsize"], [1304, 2, 1, "", "set_grid"], [1304, 2, 1, "", "set_title"]], "pypath.visual.plot.MultiBarplot": [[1305, 2, 1, "", "__init__"], [1305, 2, 1, "", "by_plot"], [1305, 2, 1, "", "do_plot"], [1305, 2, 1, "", "finish"], [1305, 2, 1, "", "init_fig"], [1305, 2, 1, "", "labels"], [1305, 2, 1, "", "make_plots"], [1305, 2, 1, "", "plot"], [1305, 2, 1, "", "plots_order"], [1305, 2, 1, "", "post_plot"], [1305, 2, 1, "", "pre_plot"], [1305, 2, 1, "", "reload"], [1305, 2, 1, "", "set_categories"], [1305, 2, 1, "", "set_colors"], [1305, 2, 1, "", "set_figsize"], [1305, 2, 1, "", "set_grid"], [1305, 2, 1, "", "set_title"], [1305, 2, 1, "", "sort"]], "pypath.visual.plot.Plot": [[1306, 2, 1, "", "__init__"], [1306, 2, 1, "", "finish"]], "pypath.visual.plot.RefsComposite": [[1307, 2, 1, "", "__init__"], [1307, 2, 1, "", "finish"], [1307, 2, 1, "", "init_fig"], [1307, 2, 1, "", "set_figsize"], [1307, 2, 1, "", "set_grid"], [1307, 2, 1, "", "set_title"]], "pypath.visual.plot.ScatterPlus": [[1308, 2, 1, "", "__init__"], [1308, 2, 1, "", "finish"], [1308, 2, 1, "", "init_fig"], [1308, 2, 1, "", "reload"], [1308, 2, 1, "", "set_figsize"], [1308, 2, 1, "", "set_title"], [1308, 2, 1, "", "values_to_sizes"]], "pypath.visual.plot.SimilarityGraph": [[1309, 2, 1, "", "__init__"], [1309, 2, 1, "", "sizes_edge"]], "pypath.visual.plot.StackedBarplot": [[1310, 2, 1, "", "__init__"], [1310, 2, 1, "", "finish"], [1310, 2, 1, "", "init_fig"], [1310, 2, 1, "", "plot"], [1310, 2, 1, "", "reload"], [1310, 2, 1, "", "set_figsize"], [1310, 2, 1, "", "set_title"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function", "4": "py:attribute", "5": "py:property", "6": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "property", "Python property"], "6": ["py", "data", "Python data"]}, "titleterms": {"pypath": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1318, 1319], "core": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149], "annot": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 1126, 1319, 1322], "adhesom": [3, 159, 160, 161], "almen2009": [4, 162, 163], "annotationbas": 5, "annotationt": 6, "baccin2019": [7, 164, 165, 166], "biogp": [8, 167, 168, 169, 170, 171, 172], "cancergenecensu": 9, "cancerdrugsdb": [10, 192, 193, 194, 195], "cancersea": [11, 196, 197], "cellphonedb": [12, 101, 225, 226, 227, 228, 229, 230, 231, 1319], "cellphonedbcomplex": 13, "cellsurfaceproteinatla": 14, "cellsurfaceproteinatlascelltyp": 15, "cellcal": [16, 200, 201, 202, 203, 204], "cellcellinteract": [17, 205, 206], "cellchatdb": [18, 102, 207, 208, 209, 210, 211, 212], "cellchatdbcomplex": 19, "cellink": [20, 103, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224], "cellinkercomplex": 21, "celltalkdb": [22, 232, 233, 234, 235], "celltypist": [23, 236, 237], "comppi": [24, 263, 264, 265], "connectomedb": [25, 266, 267, 268], "corum": [26, 107, 269, 270], "corumfuncat": 27, "corumgo": 28, "cpad": [29, 273, 274, 275, 276], "customannot": 30, "cytosig": [31, 291, 292, 293], "dgidb": [32, 304, 305, 306, 307], "disgenet": [33, 311, 312, 313, 314, 315], "embrac": [34, 352, 353, 354, 355, 356], "exocarta": [35, 361, 362, 363], "gocustomintercel": 36, "gointercel": 37, "gpcrdb": [38, 391, 392], "guidetopharmacologi": [39, 108], "hpo": [40, 423, 424, 425, 426, 427], "hgnc": [41, 402, 403], "hpmrcomplex": 42, "humanplasmamembranereceptom": 43, "humanproteinatla": 44, "humanproteinatlassecretom": 45, "humanproteinatlassubcellular": 46, "humancellmap": [47, 435, 436], "icellnet": [48, 113, 455, 456, 457, 458, 459], "icellnetcomplex": 49, "integrin": [50, 473, 474], "interpro": [51, 475, 476, 477, 478, 479], "intogen": [52, 480, 481], "italk": [53, 487, 488, 489, 490], "keggpathwai": [54, 495], "keggpathwayspc": 55, "kinasedotcom": [56, 521, 522], "kirouac2010": [57, 523, 524], "lambert2018": [58, 525, 526, 527], "ligandreceptor": 59, "locat": [60, 546, 547], "lrdb": [61, 548, 549, 550, 551], "matrisom": [62, 555, 556], "matrixdb": [63, 557, 558, 559, 560, 561, 562], "mcam": [64, 563, 564], "membranom": [65, 565, 566], "msigdb": 66, "netpathpathwai": 67, "opm": [68, 608, 609], "panglaodb": [69, 613, 614, 615], "phobiu": [70, 661, 662], "phosphatom": [71, 663, 664], "progeni": [72, 695, 696, 697], "ramilowski2015": [73, 718, 719, 720], "ramilowski2015loc": 74, "scconnect": [75, 749, 750, 751, 752], "scconnectcomplex": 76, "signalinkfunct": 77, "signalinkpathwai": 78, "signorpathwai": 79, "surfaceom": [80, 778, 779], "talklr": [81, 782, 783, 784, 785], "tcdb": [82, 786, 787, 788, 789], "tfcensu": [83, 790, 791], "topdb": [84, 803, 804], "uniprotfamili": 85, "uniprotkeyword": 86, "uniprotloc": 87, "uniprottissu": 88, "uniprottopologi": 89, "vesiclepedia": 90, "wang": [91, 850, 851, 852, 853, 854], "zhong2015": [92, 858, 859], "get_db": [93, 119, 129, 140, 148, 826, 916, 1127, 1202], "init_db": [94, 120, 130, 141, 149, 828, 917, 1128, 1203], "attr": [95, 96], "attributehandl": [96, 1166], "common": [97, 98, 251, 252, 253, 254, 255, 256, 257, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1319], "filter_network_df": 98, "complex": [99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 881, 1168, 1319, 1322], "abstractcomplexresourc": 100, "compleat": [104, 258, 259, 260], "complexaggreg": 105, "complexport": [106, 261, 262], "havugimana": [109, 399, 400, 401], "hpmr": [110, 417, 418, 419, 420, 421, 422], "humap": [111, 437, 438, 439], "humap2": 112, "kegg": [114, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503], "pdb": [115, 638, 639, 640, 641, 1158, 1159, 1160, 1161, 1162], "signor": [116, 760, 761, 762, 763, 764, 765, 766], "spike": [117, 767, 768, 769], "all_complex": 118, "entiti": [121, 122, 123, 124, 1171], "entitykei": 123, "entitylist": 124, "enz_sub": [125, 126, 127, 128, 129, 130], "enzymesubstrateaggreg": 126, "enzymesubstratehomologyprocessor": 127, "enzymesubstrateprocessor": 128, "evid": [131, 132, 133], "interact": [134, 135, 136, 137, 965, 1241, 1319, 1322], "interactiondataframerecord": 136, "interactionkei": 137, "intercel": [138, 139, 140, 141, 1319], "intercellannot": 139, "intercell_annot": [142, 143], "exclud": 143, "network": [144, 145, 146, 147, 148, 149, 980, 981, 1319, 1322], "networkentitycollect": [146, 913], "networkstatsrecord": [147, 914], "data": [150, 959, 1319], "disclaim": 151, "info": [152, 815, 1239, 1319], "input": [153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 1319], "ab": [154, 155], "abs_interact": 155, "acsn": [156, 157, 158], "acsn_interact": 157, "acsn_interactions_sif": 158, "adhesome_annot": 160, "adhesome_interact": 161, "almen2009_annot": 163, "baccin2019_annot": 165, "baccin2019_interact": 166, "biogpsdataset": 168, "biogps_annot": 169, "biogps_dataset": 170, "biogps_download": 171, "biogps_download_al": 172, "biogrid": [173, 174, 175], "biogrid_all_interact": 174, "biogrid_interact": 175, "biomart": [176, 177, 178, 179, 180, 181], "biomart_homologi": 177, "biomart_microarrai": [178, 180], "biomart_microarray_typ": 179, "biomart_queri": 181, "biomodel": [182, 183, 184, 185, 186, 187], "download_single_model": 183, "get_all_model": 184, "get_biomodel": 185, "get_biomodels_req": 186, "get_single_model": 187, "ca1": [188, 189], "ca1_interact": 189, "cancercellmap": [190, 191], "ccmap_interact": 191, "cancerdrugsdb_annot": 193, "cancerdrugsdb_download": 194, "cancerdrugsdb_interact": 195, "cancersea_annot": 197, "cell": [198, 199], "cell_supplementari": 199, "cellcall_annot": 201, "cellcall_download": 202, "cellcall_download_al": 203, "cellcall_interact": 204, "cellcellinteractions_annot": 206, "cellchatdb_annot": 208, "cellchatdb_cofactor": 209, "cellchatdb_complex": 210, "cellchatdb_download": 211, "cellchatdb_interact": 212, "cellinkerinteract": 214, "cellinker_annot": 215, "cellinker_complex_annot": 216, "cellinker_complex": 217, "cellinker_complexes_raw": 218, "cellinker_lr_interact": 219, "cellinker_lr_interactions_raw": 220, "cellinker_protein_annot": 221, "cellinker_smol_interact": 222, "cellinker_smol_interactions_raw": 223, "components_to_complex": 224, "cellphonedbannot": 226, "cellphonedb_complex_annot": 227, "cellphonedb_complex": 228, "cellphonedb_interact": 229, "cellphonedb_ligands_receptor": 230, "cellphonedb_protein_annot": 231, "celltalkdb_annot": 233, "celltalkdb_download": 234, "celltalkdb_interact": 235, "celltypist_annot": 237, "chembl": [238, 239, 240, 241, 242, 243, 244, 245], "chembl_act": 239, "chembl_assai": 240, "chembl_docu": 241, "chembl_drug_ind": 242, "chembl_mechan": 243, "chembl_molecul": 244, "chembl_target": 245, "clinvar": [246, 247, 248], "clinvar_cit": 247, "clinvar_raw": 248, "collectri": [249, 250, 963], "collectri_interact": 250, "csv_sep_chang": 252, "glom_field": 253, "json_extract": 254, "json_read": 255, "read_tabl": 256, "read_xl": 257, "compleat_complex": 259, "compleat_raw": 260, "complexportal_complex": 262, "comppi_interaction_loc": 264, "comppi_loc": 265, "connectomedb_annot": 267, "connectomedb_interact": 268, "corum_complex": 270, "cosmic": [271, 272], "cancer_gene_census_annot": 272, "cpad_annot": 274, "cpad_pathway_canc": 275, "get_cpad": 276, "cpdb": [277, 278, 279], "cpdb_interact": 278, "cpdb_interactions_ltp": 279, "credenti": [280, 281], "csa": [282, 283], "get_csa": 283, "cspa": [284, 285, 286, 287], "cspa_annot": 285, "cspa_cell_type_annot": 286, "cspa_cell_typ": 287, "ctdbase": [288, 289, 290], "ctdbase_rel": 289, "ctdbase_vocabulari": 290, "cytosig_annot": 292, "cytosig_df": 293, "dbptm": [294, 295, 296, 297], "dbptm_enzyme_substr": 295, "dbptm_enzyme_substrate_old": 296, "dbptm_interact": 297, "deathdomain": [298, 299, 300], "deathdomain_interact": 299, "deathdomain_interactions_rescu": 300, "depod": [301, 302, 303], "depod_enzyme_substr": 302, "depod_interact": 303, "dgidb_annot": 305, "dgidb_interact": 306, "get_dgidb_old": 307, "dip": [308, 309, 310], "dip_interact": 309, "dip_login": 310, "disgenetapi": 312, "disease_id_map": 313, "disgenet_annot": 314, "variant_gene_map": 315, "domino": [316, 317, 318, 319, 320], "domino_ddi": 317, "domino_enzsub": 318, "domino_interact": 319, "get_domino": 320, "dorothea": [321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 1319], "dorotheainteract": 322, "dorothea_full_raw": 323, "dorothea_interact": 324, "detail": [324, 325, 326, 328, 330, 331], "dorothea_interactions_old": 325, "dorothea_old_csv": 326, "dorothea_rda_raw": 327, "get_dorothea_old": 328, "get_tfregulon": 329, "tfregulons_interact": 330, "tfregulons_interactions_old": 331, "drugbank": [332, 333, 334, 335, 336, 337, 338], "drugbankful": 333, "drugbank_annot": 334, "drugbank_drug": 335, "drugbank_interact": 336, "drugbank_map": 337, "drugbank_raw_interact": 338, "drugcentr": [339, 340, 341, 342], "drugcentral_drug": 340, "drugcentral_interact": 341, "drugcentral_map": 342, "ebi": [343, 344], "ebi_rest": 344, "elm": [345, 346, 347, 348, 349], "elm_class": 346, "elm_domain": 347, "elm_inst": 348, "elm_interact": 349, "embopress": [350, 351], "embopress_supplementari": 351, "embrace_annot": 353, "embrace_interact": 354, "embrace_raw": 355, "embrace_transl": 356, "encod": [357, 358], "encode_tf_mirna_interact": 358, "ensembl": [359, 360], "ensembl_organ": 360, "get_exocarta": 362, "get_vesiclepedia": 363, "genecard": [364, 365, 366, 367], "genecards_datasheet": 365, "genecards_soup": 366, "genecards_summari": 367, "get_method": 368, "go": [369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129], "get_go_desc": 370, "get_go_quick": 371, "get_goslim": 372, "go_ancestor": 373, "go_ancestors_goos": 374, "go_ancestors_quickgo": 375, "go_annot": 376, "go_annotations_al": 377, "go_annotations_goa": 378, "go_annotations_goos": 379, "go_annotations_quickgo": 380, "go_annotations_solr": 381, "go_annotations_uniprot": 382, "go_descend": 383, "go_descendants_goos": 384, "go_descendants_quickgo": 385, "go_descendants_to_ancestor": 386, "go_term": 387, "go_terms_goos": 388, "go_terms_quickgo": 389, "go_terms_solr": 390, "gpcrdb_annot": 392, "graphviz": [393, 394], "graphviz_attr": 394, "guide2pharma": [395, 396, 397, 398], "guide2pharma_complex": 396, "guide2pharma_download": 397, "guide2pharma_interact": 398, "get_havugimana": 400, "havugimana_complex": 401, "hgnc_genegroup": 403, "hippi": [404, 405], "hippie_interact": 405, "hmdb": [406, 407, 408, 409, 410, 411, 412, 1319], "field": 407, "hmdb_iter_metabolit": 408, "hmdb_map": 409, "hmdb_metabolites_raw": 410, "hmdb_tabl": 411, "hmdb_xml": 412, "homologen": [413, 414, 415, 416], "get_homologen": 414, "homologene_dict": 415, "homologene_uniprot_dict": 416, "hpmrinteract": 418, "get_hpmr": 419, "hpmr_annot": 420, "hpmr_complex": 421, "hpmr_interact": 422, "hpo_annot": 424, "hpo_diseas": 425, "hpo_ontologi": 426, "hpo_term": 427, "hprd": [428, 429, 430, 431, 432], "get_hprd": 429, "hprd_enzyme_substr": 430, "hprd_interact": 431, "hprd_interactions_htp": 432, "htri": [433, 434], "htri_interact": 434, "humancellmap_annot": 436, "humap2_complex": 438, "humap_complex": 439, "huri": [440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452], "hi_i_interact": 441, "hi_ii_interact": 442, "hi_iii_old": 443, "hi_union_interact": 444, "huri_interact": 445, "lit_bm_13_interact": 446, "lit_bm_17_interact": 447, "lit_bm_interact": 448, "rolland_hi_ii_14": 449, "vidal_hi_iii_old": 450, "yang2016_interact": 451, "yu2011_interact": 452, "i3d": [453, 454], "get_i3d": 454, "icellnetrecord": 456, "icellnet_annot": 457, "icellnet_complex": 458, "icellnet_interact": 459, "ielm": [460, 461, 462], "get_ielm": 461, "get_ielm_hug": 462, "imweb": [463, 464, 465], "get_imweb": 464, "get_imweb_req": 465, "innatedb": [466, 467], "innatedb_interact": 467, "instruct": [468, 469, 470], "get_instruct": 469, "get_instruct_offset": 470, "intact": [471, 472], "intact_interact": 472, "get_integrin": 474, "interpro2go_annot": 476, "interpro_annot": 477, "interpro_entri": 478, "interpro_xref": 479, "intogen_annot": 481, "ipi": [482, 483], "ipi_uniprot": 483, "iptmnet": [484, 485, 486], "iptmnetinteract": 485, "iptmnet_interact": 486, "italk_annot": 488, "italk_interact": 489, "italk_raw": 490, "kea": [491, 492, 493], "kea_enzyme_substr": 492, "kea_interact": 493, "kegg_dbget": 496, "kegg_interact": 497, "kegg_medicu": 498, "kegg_medicus_complex": 499, "kegg_medicus_interact": 500, "kegg_pathway_annot": 501, "kegg_pathway_annotations_pathwaycommon": 502, "kegg_pathwai": 503, "kegg_api": [504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520], "disease_to_drug": 505, "disease_to_gen": 506, "disease_to_pathwai": 507, "drug_to_diseas": 508, "drug_to_drug": 509, "drug_to_gen": 510, "drug_to_pathwai": 511, "gene_to_diseas": 512, "gene_to_drug": 513, "gene_to_pathwai": 514, "kegg_drug_to_chebi": 515, "kegg_gene_to_ncbi_geneid": 516, "kegg_gene_to_uniprot": 517, "pathway_to_diseas": 518, "pathway_to_drug": 519, "pathway_to_gen": 520, "kinasedotcom_annot": 522, "kirouac2010_interact": 524, "lambert2018_annot": 526, "lambert2018_s1_raw": 527, "laudanna": [528, 529, 530], "laudanna_direct": 529, "laudanna_effect": 530, "li2012": [531, 532, 533, 534, 535], "get_li2012": 532, "li2012_dmi": 533, "li2012_enzyme_substr": 534, "li2012_interact": 535, "linc": [536, 537], "lincs_compound": 537, "lmpid": [538, 539, 540, 541], "lmpid_dmi": 539, "lmpid_interact": 540, "load_lmpid": 541, "lncdiseas": [542, 543], "lncdisease_interact": 543, "lncrnadb": [544, 545], "lncrnadb_interact": 545, "locate_loc": 547, "lrdbannot": 549, "lrdb_annot": 550, "lrdb_interact": 551, "macrophag": [552, 553], "macrophage_interact": 553, "main": [554, 911, 912, 913, 914, 915, 916, 917], "matrisome_annot": 556, "matrixdb_annot": 558, "matrixdb_ecm_protein": 559, "matrixdb_interact": 560, "matrixdb_membrane_protein": 561, "matrixdb_secreted_protein": 562, "mcam_cell_adhesion_molecul": 564, "membranome_annot": 566, "mimp": [567, 568, 569, 570], "get_kinase_class": 568, "mimp_enzyme_substr": 569, "mimp_interact": 570, "mir2diseas": [571, 572], "mir2disease_interact": 572, "mirbas": [573, 574, 575, 576, 577, 578, 579, 580], "get_mirbase_alias": 574, "mirbase_id": 575, "mirbase_matur": 576, "mirbase_mature_al": 577, "mirbase_precursor": 578, "mirbase_precursor_al": 579, "mirbase_precursor_to_matur": 580, "mirdeathdb": [581, 582], "mirdeathdb_interact": 582, "mirecord": [583, 584], "mirecords_interact": 584, "mirtarbas": [585, 586], "mirtarbase_interact": 586, "mitab": [587, 588, 589], "mitab_field_list": 588, "mitab_field_uniprot": 589, "mppi": [590, 591], "mppi_interact": 591, "ncrdeathdb": [592, 593], "ncrdeathdb_interact": 593, "negatom": [594, 595], "negatome_interact": 595, "netbiol": [596, 597, 598], "arn_interact": 597, "nrf2ome_interact": 598, "netpath": [599, 600, 601, 602], "netpath_interact": 600, "netpath_nam": 601, "netpath_pathway_annot": 602, "oma": [603, 604], "oma_ortholog": 604, "ontologi": [605, 606, 607, 1319], "listof_ontologi": 606, "opm_annot": 609, "oreganno": [610, 611, 612], "oreganno_interact": 611, "oreganno_raw": 612, "panglaodb_annot": 614, "panglaodb_raw": 615, "pathophenodb": [616, 617, 618], "diseasepathogen": 617, "disease_pathogen_interact": 618, "pathwaycommon": [619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635], "pathwaycommonsinteract": 620, "pathwaycommonsresourc": 621, "pathwaycommons_bind_interact": 622, "pathwaycommons_biogrid_interact": 623, "pathwaycommons_corum_interact": 624, "pathwaycommons_dip_interact": 625, "pathwaycommons_hprd_interact": 626, "pathwaycommons_inoh_interact": 627, "pathwaycommons_intact_interact": 628, "pathwaycommons_interact": 629, "pathwaycommons_kegg_interact": 630, "pathwaycommons_netpath_interact": 631, "pathwaycommons_panther_interact": 632, "pathwaycommons_phosphosite_interact": 633, "pathwaycommons_reactome_interact": 634, "pathwaycommons_wikipathways_interact": 635, "pazar": [636, 637], "pazar_interact": 637, "pdb_chain": 639, "pdb_complex": 640, "pdb_uniprot": 641, "pdzbase": [642, 643], "pdzbase_interact": 643, "pepcyb": [644, 645, 646], "pepcyber_detail": 645, "pepcyber_interact": 646, "pfam": [647, 648, 649, 650, 651, 1191], "pfam_nam": 648, "pfam_pdb": 649, "pfam_region": 650, "pfam_uniprot": 651, "pharo": [652, 653, 654, 655, 656, 657, 658, 659, 660], "pharos_diseas": 653, "pharos_express": 654, "pharos_gener": 655, "pharos_gtex": 656, "pharos_ligand": 657, "pharos_ortholog": 658, "pharos_target": 659, "pharos_xref": 660, "phobius_annot": 662, "phosphatome_annot": 664, "phosphoelm": [665, 666, 667, 668], "phosphoelm_enzyme_substr": 666, "phosphoelm_interact": 667, "phosphoelm_kinas": 668, "phosphonetwork": [669, 670, 671], "phosphonetworks_enzyme_substr": 670, "phosphonetworks_interact": 671, "phosphopoint": [672, 673, 674], "phosphopoint_direct": 673, "phosphopoint_interact": 674, "phosphosit": [675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687], "phosphosite_direct": 676, "phosphosite_enzyme_substr": 677, "phosphosite_interact": 678, "phosphosite_interactions_al": 679, "phosphosite_interactions_cur": 680, "phosphosite_interactions_new": 681, "phosphosite_interactions_noref": 682, "phosphosite_ptm_orthologi": 683, "phosphosite_ptm": 684, "phosphosite_regsit": 685, "phosphosite_regsites_one_organ": 686, "regsites_tab": 687, "pisa": [688, 689, 690, 691], "pisabond": 689, "pisa_bond": 690, "pisa_interfac": 691, "pro": [692, 693, 694], "get_pro": 693, "pro_map": 694, "progeny_annot": 696, "progeny_raw": 697, "proteinatla": [698, 699, 700, 701, 702], "get_proteinatla": 699, "proteinatlas_annot": 700, "proteinatlas_secretome_annot": 701, "proteinatlas_subcellular_annot": 702, "protein": [703, 704, 1174, 1319], "variant": 704, "protmapp": [705, 706, 707, 708], "get_protmapp": 706, "protmapper_enzyme_substr": 707, "protmapper_interact": 708, "pubchem": [709, 710], "pubchem_map": 710, "pubm": [711, 712, 713, 714, 715, 716, 717], "get_pmid": 712, "get_pubm": 713, "only_pmid": 714, "open_pubm": 715, "pmids_dict": 716, "pmids_list": 717, "ramilowski_interact": 719, "ramilowski_loc": 720, "ramp": [721, 722, 723, 724, 725, 726, 727, 1319], "ramp_id_typ": 722, "ramp_id_types_2": 723, "ramp_list_t": 724, "ramp_map": 725, "ramp_raw": 726, "ramp_show_t": 727, "rdata": 728, "reaction": [729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 1177], "acsn_biopax": 730, "acsn_interactions_2": 731, "get_acsn_effect": 732, "get_control": [733, 977], "get_interact": 734, "get_react": 735, "get_soup": 736, "panther_biopax": 737, "panther_interact": 738, "pid_biopax": 739, "pid_interact": 740, "process_complex": 741, "process_control": 742, "process_react": 743, "reactions_biopax": 744, "reactome_biopax": 745, "reactome_b": 746, "reactome_interact": 747, "reactome_sbml": 748, "scconnect_annot": 750, "scconnect_complex": 751, "scconnect_interact": 752, "scienc": [753, 754], "science_download": 754, "signalink": [755, 756, 757, 758, 759], "signalink_annot": 756, "signalink_function_annot": 757, "signalink_interact": 758, "signalink_pathway_annot": 759, "signor_complex": 761, "signor_enzyme_substr": 762, "signor_interact": 763, "signor_pathway_annot": 764, "signor_pathwai": 765, "signor_protein_famili": 766, "spike_complex": 768, "spike_interact": 769, "stitch": [770, 771, 772], "stitch_actions_interact": 771, "stitch_links_interact": 772, "string": [773, 774, 775, 776, 777], "string_effect": 774, "string_links_interact": 775, "string_physical_interact": 776, "string_speci": 777, "surfaceome_annot": 779, "switches_elm": [780, 781], "get_switches_elm": 781, "talklr_annot": 783, "talklr_interact": 784, "talklr_raw": 785, "tcdb_annot": 787, "tcdb_class": 788, "tcdb_famili": 789, "tfcensus_annot": 791, "threedcomplex": [792, 793, 794, 795, 796, 797], "threedcomplex_chain": 793, "threedcomplex_complex": 794, "threedcomplex_contact": 795, "threedcomplex_ddi": 796, "threedcomplex_nresidu": 797, "threedid": [798, 799, 800, 801, 802], "get_3did": 799, "get_3did_ddi": 800, "get_3did_dmi": 801, "process_3did_dmi": 802, "topdb_annot": 804, "transmir": [805, 806], "transmir_interact": 806, "trip": [807, 808, 809, 810, 811, 812, 813], "take_a_trip": 808, "trip_find_uniprot": 809, "trip_get_uniprot": 810, "trip_interact": 811, "trip_process": 812, "trip_process_t": 813, "unichem": [814, 815, 816, 817, 818, 1212, 1213], "unichem_info": 816, "unichem_map": 817, "unichem_sourc": 818, "uniprot": [819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1319], "taxon": 820, "uniprotrecordhistori": 821, "all_swissprot": 822, "all_trembl": 823, "all_uniprot": 824, "deleted_uniprot_genesymbol": 825, "get_uniprot_sec": 827, "is_swissprot": 829, "is_trembl": 830, "is_uniprot": 831, "protein_datasheet": 832, "swissprot_delet": 833, "trembl_delet": 834, "uniprot_data": 835, "uniprot_delet": 836, "uniprot_famili": 837, "uniprot_histori": 838, "uniprot_history_recent_datasheet": 839, "uniprot_keyword": 840, "uniprot_loc": 841, "uniprot_ncbi_taxid": 842, "uniprot_ncbi_taxids_2": 843, "uniprot_preprocess": 844, "uniprot_recent_vers": 845, "uniprot_taxonomi": 846, "uniprot_tissu": 847, "uniprot_topologi": 848, "valid_uniprot": 849, "cui_interact": 851, "hsn_interact": 852, "wang_annot": 853, "wang_interact": 854, "wojtowicz2020": [855, 856, 857], "wojtowicz2020_interact": 856, "wojtowicz2020_raw": 857, "zhong2015_annot": 859, "intern": [860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906], "annot_format": [861, 862, 863, 864, 865], "annotdef": 862, "annotdefkei": 863, "annotop": 864, "annotationgroup": 865, "input_format": [866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879], "arraymap": 867, "biomartmap": 868, "filemap": 869, "hmdbmap": 870, "mappinginput": 871, "networkinput": 872, "picklemap": 873, "promap": 874, "rampmap": 875, "readlist": 876, "unichemmap": 877, "uniprotlistmap": 878, "uniprotmap": 879, "intera": [880, 881, 882, 883, 884, 885, 886, 887, 888, 889], "domain": 882, "domaindomain": 883, "domainmotif": 884, "interfac": 885, "motif": 886, "ptm": [887, 1252], "regul": [888, 1319], "residu": [889, 1159, 1188, 1189], "licens": [890, 891, 892, 893, 894, 895, 978, 979, 1319], "licenseattrib": 892, "licensefeatur": 893, "licensepurpos": 894, "licenseshar": 895, "map": [896, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157], "ref": [897, 898, 899], "refer": [898, 1179, 1319, 1320], "get_pubmed_data": 899, "resourc": [900, 901, 902, 903, 904, 905, 906, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 1192, 1319], "abstractresourc": 901, "enzymesubstrateresourc": 902, "enzymesubstrateresourcekei": 903, "networkresourc": 904, "networkresourcekei": 905, "resourceattribut": 906, "legaci": [907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 945, 946, 1319], "db_categori": [908, 909, 910], "get_categori": [909, 910], "direct": [912, 1319], "exampl": [915, 1319, 1322], "log": [918, 1105, 1106, 1107, 1319], "omnipath": [919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 1318, 1319], "app": [920, 921, 1319], "databasemanag": 921, "databas": [922, 923, 924, 925, 926, 927, 928, 929, 930, 1225, 1318, 1319], "build": [923, 938, 939, 1319], "class_and_param": 924, "defin": [925, 926, 927, 928, 1319], "databaseclass": 926, "databasedefinit": 927, "databasedefinitionmanag": 928, "get_manag": [929, 1139, 1183], "init_manag": 930, "export": [931, 932, 1319], "init": [933, 1140, 1153, 1185], "param": [934, 935, 936], "curated_ppi_resourc": 935, "tf_target_resourc": 936, "server": [937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955], "webservicet": 939, "generate_about_pag": [940, 941, 942, 943, 944], "export_licens": [941, 973], "generate_about_html": 942, "resource_list_latex": [943, 975], "write_html": [944, 976], "pypathserv": 946, "run": [947, 948, 949, 950, 951, 952, 953, 954, 955], "baseserv": 948, "rest": 949, "tableserv": 950, "twistedwebresourc": 951, "twistedwebsit": 952, "stop_serv": 953, "twisted_listen_tcp": 954, "twisted_run": 955, "control": [957, 958, 1170], "resourcecontrol": 958, "data_format": [960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971], "root": 961, "activity_flow": 962, "enzyme_substr": 964, "interaction_htp": 966, "obsol": 967, "pathway_bad": 968, "reaction_pc": 969, "transcription_deprec": 970, "transcription_onebyon": 971, "descript": [972, 973, 974, 975, 976], "gen_html": 974, "dorothea_expand_level": 981, "url": 982, "share": [983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120], "cach": [984, 985, 986, 987, 1319], "cache_item": 985, "cache_path": 986, "get_cachedir": 987, "add_to_list": 989, "add_to_set": 990, "at_least_in": 991, "clean_dict": 992, "combine_attr": 993, "compr": 994, "consol": [995, 1319], "decod": 996, "del_empti": 997, "df_memory_usag": 998, "dict_collapse_kei": 999, "dict_count": 1000, "dict_diff": 1001, "dict_expand_kei": 1002, "dict_perc": 1003, "dict_set_path": 1004, "dict_set_perc": 1005, "dict_str": 1006, "dict_subtot": 1007, "dict_sym_diff": 1008, "dict_union": 1009, "eq": 1010, "filtr": 1011, "first": 1012, "flat_list": 1013, "float_or_nan": 1014, "format_byt": 1015, "gen_session_id": 1016, "get": [1017, 1119, 1318], "get_arg": 1018, "ident": 1019, "is_float": 1020, "is_int": 1021, "is_str": 1022, "jaccard_index": 1023, "join_dict": 1024, "latex_t": 1025, "log_memory_usag": 1026, "match": 1027, "maybe_in_dict": 1028, "md5": 1029, "merge_dict": 1030, "n_shared_el": 1031, "n_shared_foreach": 1032, "n_shared_tot": 1033, "n_shared_unique_foreach": 1034, "n_unique_el": 1035, "n_unique_foreach": 1036, "n_unique_tot": 1037, "negat": 1038, "nest": 1039, "none_or_len": 1040, "pagin": 1041, "prefix": 1042, "print_tabl": 1043, "python_memory_usag": 1044, "re_safe_group": 1045, "remove_prefix": 1046, "rotat": 1047, "sets_to_sorted_list": 1048, "sfirst": 1049, "shared_el": 1050, "shared_foreach": 1051, "shared_tot": 1052, "shared_uniqu": 1053, "shared_unique_foreach": 1054, "shared_unique_tot": 1055, "silent": 1056, "simpson_index": 1057, "simpson_index_count": 1058, "someth": 1059, "sorensen_index": 1060, "suffix": 1061, "sum_dict": 1062, "swap_dict": 1063, "swap_dict_simpl": 1064, "swap_suffix": 1065, "table_add_row_numb": 1066, "table_format": 1067, "table_textwrap": 1068, "to_list": 1069, "to_set": 1070, "to_tupl": 1071, "try_bool": 1072, "try_float": 1073, "tsv_tabl": 1074, "uniq_list": 1075, "uniq_list1": 1076, "uniq_list2": 1077, "uniq_ord_list": 1078, "unique_el": 1079, "unique_foreach": 1080, "unique_list": 1081, "unique_tot": 1082, "upper0": 1083, "valu": 1084, "wcl": 1085, "wrap_trunc": 1086, "constant": 1087, "curl": [1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1319], "fileopen": 1090, "remotefil": 1091, "cache_delete_off": 1092, "cache_delete_on": 1093, "cache_off": 1094, "cache_on": 1095, "cache_print_off": 1096, "cache_print_on": 1097, "debug_off": 1098, "debug_on": 1099, "dryrun_off": 1100, "dryrun_on": 1101, "is_url": 1102, "preserve_off": 1103, "preserve_on": 1104, "logger": [1106, 1111, 1319], "new_logg": 1107, "progress": [1108, 1109], "session": [1110, 1111, 1112, 1113, 1114, 1115, 1319], "get_log": 1113, "get_sess": 1114, "new_sess": 1115, "set": [1116, 1117, 1118, 1119, 1120], "context": 1118, "setup": 1120, "util": [1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1319], "goannot": 1123, "gocustomannot": 1124, "geneontologi": 1125, "load_go": 1129, "homologi": [1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1318, 1319], "homologymanag": 1131, "ortholog": 1132, "proteinhomologi": 1133, "proteom": 1134, "ptmhomologi": 1135, "sequencecontain": 1136, "get_df": 1137, "get_dict": 1138, "translat": [1141, 1318, 1319], "translate_df": 1142, "mapread": 1144, "mapper": 1145, "mappingt": 1146, "mappingtablekei": 1147, "uniprot_id_typ": 1148, "get_mapp": 1149, "guess_typ": 1150, "id_from_label": 1151, "id_from_label0": 1152, "label": 1154, "map_nam": [1155, 1157], "map_name0": 1156, "residuemapp": [1160, 1189], "segment": 1161, "residue_pdb": 1162, "proteomicsdb": [1163, 1164], "pyreact": [1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179], "biopaxread": 1167, "complexvari": 1169, "entityset": 1172, "intersect": 1173, "proteinfamili": 1175, "reactionsid": 1178, "reflist": [1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187], "referencelistmanag": 1181, "check": 1182, "get_reflist": 1184, "is_not": 1186, "select": [1187, 1319], "seq": [1190, 1191, 1192, 1193, 1194, 1195, 1196], "get_isoform": 1194, "read_fasta": 1195, "swissprot_seq": 1196, "taxonomi": [1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1319], "ensure_common_nam": 1198, "ensure_ensembl_nam": 1199, "ensure_latin_nam": 1200, "ensure_ncbi_tax_id": 1201, "short_latin_nam": 1204, "shorten_latin_nam": 1205, "taxid_from_common_nam": 1206, "taxid_from_dbptm_taxon_nam": 1207, "taxid_from_ensembl_nam": 1208, "taxid_from_latin_nam": 1209, "taxid_from_nonstandard": 1210, "uniprot_taxid": 1211, "uniprotprotein": 1215, "ac": 1216, "activity_regul": 1217, "activity_regulation_with_xref": 1218, "alternative_product": 1219, "alternative_products_with_xref": 1220, "brows": [1221, 1319], "catalytic_act": 1222, "catalytic_activity_with_xref": 1223, "collect": 1224, "diseas": 1226, "disease_with_xref": 1227, "ec": 1228, "features_t": 1229, "full_nam": 1230, "function": 1231, "function_genecard": 1232, "function_or_genecard": 1233, "function_with_genecard": 1234, "function_with_xref": 1235, "genesymbol": 1236, "has_tag": 1237, "id": [1238, 1318, 1319], "info_sect": 1240, "interaction_with_xref": 1242, "is_review": 1243, "itertag": 1244, "keyword": 1245, "keywords_with_xref": 1246, "length": [1247, 1248], "load": [1249, 1319], "organ": [1250, 1319], "print_featur": 1251, "ptm_with_xref": 1253, "queri": [1254, 1319, 1322], "reload": 1255, "remove_xref": 1256, "sequenc": [1257, 1319], "sequence_caut": 1258, "sequence_caution_with_xref": 1259, "similar": 1260, "similarity_with_xref": 1261, "subcellular_loc": 1262, "subcellular_location_with_xref": 1263, "subunit": 1264, "subunit_with_xref": 1265, "tissue_specif": 1266, "tissue_specificity_with_xref": 1267, "update_databas": 1268, "update_info": 1269, "web_resourc": 1270, "web_resource_with_xref": 1271, "weight": [1272, 1273], "visual": [1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316], "draw": [1275, 1276, 1277], "interset": 1276, "plot": [1277, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1319], "igraph_draw": [1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296], "abstractcairographdraw": 1279, "arrowedgedraw": [1280, 1287], "defaultgraphdrawerffsupport": 1281, "defaultvertexdraw": [1282, 1296], "textdraw": 1283, "edg": [1284, 1285, 1286, 1287, 1288, 1289, 1290, 1319], "abstractedgedraw": 1285, "alphavaryingedgedraw": 1286, "darktolightedgedraw": 1288, "lighttodarkedgedraw": 1289, "taperededgedraw": 1290, "vertex": [1291, 1292, 1293, 1294, 1295, 1296], "abstractcairodraw": 1292, "abstractcairovertexdraw": 1293, "abstractdraw": 1294, "abstractvertexdraw": 1295, "barplot": 1298, "barplotsgrid": 1299, "curationplot": 1300, "dendrogram": 1301, "histogram": 1302, "historytre": 1303, "htpcharacterist": 1304, "multibarplot": 1305, "refscomposit": 1307, "scatterplu": 1308, "similaritygraph": 1309, "stackedbarplot": 1310, "boxplot": 1311, "get_mov": 1312, "is_opentype_cff_font": 1313, "move_label": 1314, "overlap": 1315, "rotate_label": 1316, "content": [1317, 1319], "welcom": 1318, "do": [1318, 1319], "you": [1318, 1319], "need": 1318, "instal": 1318, "doc": 1318, "help": 1318, "featur": 1318, "integr": 1318, "manag": [1318, 1319], "further": 1318, "modul": [1318, 1319], "convers": 1318, "faq": 1318, "contact": 1318, "impressum": 1318, "histori": [1318, 1319, 1321], "releas": [1318, 1321], "The": 1319, "book": 1319, "introduct": 1319, "save": 1319, "built": 1319, "definit": 1319, "strictli": 1319, "literatur": 1319, "curat": 1319, "extra": 1319, "activ": 1319, "flow": 1319, "enzym": [1319, 1322], "substrat": [1319, 1322], "ligand": 1319, "receptor": 1319, "transcript": 1319, "from": 1319, "other": 1319, "mirna": 1319, "post": 1319, "lncrna": 1319, "mrna": 1319, "small": 1319, "molecul": 1319, "relationship": 1319, "inter": [1319, 1322], "cellular": [1319, 1322], "commun": [1319, 1322], "role": [1319, 1322], "directli": 1319, "origin": 1319, "interest": 1319, "tl": 1319, "dr": 1319, "human": 1319, "metabolom": 1319, "access": 1319, "higher": 1319, "level": 1319, "download": 1319, "custom": 1319, "failur": 1319, "corrupt": 1319, "issu": 1319, "look": 1319, "debug": 1319, "timeout": 1319, "inspect": 1319, "object": 1319, "i": 1319, "fail": 1319, "onli": 1319, "read": 1319, "ssl": 1319, "http": 1319, "error": 1319, "commerci": 1319, "us": 1319, "inform": 1319, "certain": 1319, "dataset": [1319, 1322], "which": 1319, "ar": 1319, "pre": 1319, "panda": 1319, "datafram": 1319, "self": 1319, "loop": 1319, "identifi": 1319, "tabl": 1319, "dictionari": 1319, "frame": 1319, "ncbi": 1319, "scientif": 1319, "name": 1319, "all": 1319, "one": 1319, "format": 1319, "valid": 1319, "singl": 1319, "datasheet": 1319, "record": 1319, "api": 1319, "process": 1319, "sanit": 1319, "full": 1319, "signal": 1319, "an": 1319, "intercellular": 1319, "quantit": 1319, "overview": 1319, "categori": 1319, "gene": 1319, "pickl": 1319, "messag": 1319, "basic": 1319, "about": 1319, "file": 1319, "disabl": 1319, "write": 1319, "send": 1319, "connect": 1319, "class": 1319, "bel": 1319, "igraph": 1319, "base": 1319, "just": 1319, "want": 1319, "quickli": 1319, "plai": 1319, "around": 1319, "how": [1319, 1320], "ani": 1319, "creat": 1319, "2": [1319, 1321], "test": 1319, "structur": 1319, "sign": 1319, "node": 1319, "our": 1319, "without": 1319, "causal": 1319, "navig": 1320, "0": 1321, "1": 1321, "3": 1321, "4": 1321, "5": 1321, "32": 1321, "6": 1321, "31": 1321, "7": 1321, "74": 1321, "93": 1321, "110": 1321, "8": 1321, "9": 1321, "10": 1321, "11": 1321, "12": 1321, "13": 1321, "14": 1321, "upcom": 1321, "webservic": 1322, "type": 1322, "mous": 1322, "rat": 1322, "molecular": 1322, "explor": 1322, "possibl": 1322, "paramet": 1322}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx_last_updated_by_git": 1, "nbsphinx": 4, "sphinx": 57}, "alltitles": {"pypath": [[0, "module-pypath"]], "pypath.core": [[1, "module-pypath.core"]], "pypath.core.annot": [[2, "module-pypath.core.annot"]], "pypath.core.annot.Adhesome": [[3, "pypath-core-annot-adhesome"]], "pypath.core.annot.Almen2009": [[4, "pypath-core-annot-almen2009"]], "pypath.core.annot.AnnotationBase": [[5, "pypath-core-annot-annotationbase"]], "pypath.core.annot.AnnotationTable": [[6, "pypath-core-annot-annotationtable"]], "pypath.core.annot.Baccin2019": [[7, "pypath-core-annot-baccin2019"]], "pypath.core.annot.Biogps": [[8, "pypath-core-annot-biogps"]], "pypath.core.annot.CancerGeneCensus": [[9, "pypath-core-annot-cancergenecensus"]], "pypath.core.annot.Cancerdrugsdb": [[10, "pypath-core-annot-cancerdrugsdb"]], "pypath.core.annot.Cancersea": [[11, "pypath-core-annot-cancersea"]], "pypath.core.annot.CellPhoneDB": [[12, "pypath-core-annot-cellphonedb"]], "pypath.core.annot.CellPhoneDBComplex": [[13, "pypath-core-annot-cellphonedbcomplex"]], "pypath.core.annot.CellSurfaceProteinAtlas": [[14, "pypath-core-annot-cellsurfaceproteinatlas"]], "pypath.core.annot.CellSurfaceProteinAtlasCellType": [[15, "pypath-core-annot-cellsurfaceproteinatlascelltype"]], "pypath.core.annot.Cellcall": [[16, "pypath-core-annot-cellcall"]], "pypath.core.annot.Cellcellinteractions": [[17, "pypath-core-annot-cellcellinteractions"]], "pypath.core.annot.Cellchatdb": [[18, "pypath-core-annot-cellchatdb"]], "pypath.core.annot.CellchatdbComplex": [[19, "pypath-core-annot-cellchatdbcomplex"]], "pypath.core.annot.Cellinker": [[20, "pypath-core-annot-cellinker"]], "pypath.core.annot.CellinkerComplex": [[21, "pypath-core-annot-cellinkercomplex"]], "pypath.core.annot.Celltalkdb": [[22, "pypath-core-annot-celltalkdb"]], "pypath.core.annot.Celltypist": [[23, "pypath-core-annot-celltypist"]], "pypath.core.annot.Comppi": [[24, "pypath-core-annot-comppi"]], "pypath.core.annot.Connectomedb": [[25, "pypath-core-annot-connectomedb"]], "pypath.core.annot.Corum": [[26, "pypath-core-annot-corum"]], "pypath.core.annot.CorumFuncat": [[27, "pypath-core-annot-corumfuncat"]], "pypath.core.annot.CorumGO": [[28, "pypath-core-annot-corumgo"]], "pypath.core.annot.Cpad": [[29, "pypath-core-annot-cpad"]], "pypath.core.annot.CustomAnnotation": [[30, "pypath-core-annot-customannotation"]], "pypath.core.annot.Cytosig": [[31, "pypath-core-annot-cytosig"]], "pypath.core.annot.Dgidb": [[32, "pypath-core-annot-dgidb"]], "pypath.core.annot.Disgenet": [[33, "pypath-core-annot-disgenet"]], "pypath.core.annot.Embrace": [[34, "pypath-core-annot-embrace"]], "pypath.core.annot.Exocarta": [[35, "pypath-core-annot-exocarta"]], "pypath.core.annot.GOCustomIntercell": [[36, "pypath-core-annot-gocustomintercell"]], "pypath.core.annot.GOIntercell": [[37, "pypath-core-annot-gointercell"]], "pypath.core.annot.Gpcrdb": [[38, "pypath-core-annot-gpcrdb"]], "pypath.core.annot.GuideToPharmacology": [[39, "pypath-core-annot-guidetopharmacology"]], "pypath.core.annot.HPO": [[40, "pypath-core-annot-hpo"]], "pypath.core.annot.Hgnc": [[41, "pypath-core-annot-hgnc"]], "pypath.core.annot.HpmrComplex": [[42, "pypath-core-annot-hpmrcomplex"]], "pypath.core.annot.HumanPlasmaMembraneReceptome": [[43, "pypath-core-annot-humanplasmamembranereceptome"]], "pypath.core.annot.HumanProteinAtlas": [[44, "pypath-core-annot-humanproteinatlas"]], "pypath.core.annot.HumanProteinAtlasSecretome": [[45, "pypath-core-annot-humanproteinatlassecretome"]], "pypath.core.annot.HumanProteinAtlasSubcellular": [[46, "pypath-core-annot-humanproteinatlassubcellular"]], "pypath.core.annot.Humancellmap": [[47, "pypath-core-annot-humancellmap"]], "pypath.core.annot.Icellnet": [[48, "pypath-core-annot-icellnet"]], "pypath.core.annot.IcellnetComplex": [[49, "pypath-core-annot-icellnetcomplex"]], "pypath.core.annot.Integrins": [[50, "pypath-core-annot-integrins"]], "pypath.core.annot.InterPro": [[51, "pypath-core-annot-interpro"]], "pypath.core.annot.Intogen": [[52, "pypath-core-annot-intogen"]], "pypath.core.annot.Italk": [[53, "pypath-core-annot-italk"]], "pypath.core.annot.KeggPathways": [[54, "pypath-core-annot-keggpathways"]], "pypath.core.annot.KeggPathwaysPC": [[55, "pypath-core-annot-keggpathwayspc"]], "pypath.core.annot.Kinasedotcom": [[56, "pypath-core-annot-kinasedotcom"]], "pypath.core.annot.Kirouac2010": [[57, "pypath-core-annot-kirouac2010"]], "pypath.core.annot.Lambert2018": [[58, "pypath-core-annot-lambert2018"]], "pypath.core.annot.LigandReceptor": [[59, "pypath-core-annot-ligandreceptor"]], "pypath.core.annot.Locate": [[60, "pypath-core-annot-locate"]], "pypath.core.annot.Lrdb": [[61, "pypath-core-annot-lrdb"]], "pypath.core.annot.Matrisome": [[62, "pypath-core-annot-matrisome"]], "pypath.core.annot.Matrixdb": [[63, "pypath-core-annot-matrixdb"]], "pypath.core.annot.Mcam": [[64, "pypath-core-annot-mcam"]], "pypath.core.annot.Membranome": [[65, "pypath-core-annot-membranome"]], "pypath.core.annot.Msigdb": [[66, "pypath-core-annot-msigdb"]], "pypath.core.annot.NetpathPathways": [[67, "pypath-core-annot-netpathpathways"]], "pypath.core.annot.Opm": [[68, "pypath-core-annot-opm"]], "pypath.core.annot.Panglaodb": [[69, "pypath-core-annot-panglaodb"]], "pypath.core.annot.Phobius": [[70, "pypath-core-annot-phobius"]], "pypath.core.annot.Phosphatome": [[71, "pypath-core-annot-phosphatome"]], "pypath.core.annot.Progeny": [[72, "pypath-core-annot-progeny"]], "pypath.core.annot.Ramilowski2015": [[73, "pypath-core-annot-ramilowski2015"]], "pypath.core.annot.Ramilowski2015Location": [[74, "pypath-core-annot-ramilowski2015location"]], "pypath.core.annot.Scconnect": [[75, "pypath-core-annot-scconnect"]], "pypath.core.annot.ScconnectComplex": [[76, "pypath-core-annot-scconnectcomplex"]], "pypath.core.annot.SignalinkFunctions": [[77, "pypath-core-annot-signalinkfunctions"]], "pypath.core.annot.SignalinkPathways": [[78, "pypath-core-annot-signalinkpathways"]], "pypath.core.annot.SignorPathways": [[79, "pypath-core-annot-signorpathways"]], "pypath.core.annot.Surfaceome": [[80, "pypath-core-annot-surfaceome"]], "pypath.core.annot.Talklr": [[81, "pypath-core-annot-talklr"]], "pypath.core.annot.Tcdb": [[82, "pypath-core-annot-tcdb"]], "pypath.core.annot.Tfcensus": [[83, "pypath-core-annot-tfcensus"]], "pypath.core.annot.Topdb": [[84, "pypath-core-annot-topdb"]], "pypath.core.annot.UniprotFamilies": [[85, "pypath-core-annot-uniprotfamilies"]], "pypath.core.annot.UniprotKeywords": [[86, "pypath-core-annot-uniprotkeywords"]], "pypath.core.annot.UniprotLocations": [[87, "pypath-core-annot-uniprotlocations"]], "pypath.core.annot.UniprotTissues": [[88, "pypath-core-annot-uniprottissues"]], "pypath.core.annot.UniprotTopologies": [[89, "pypath-core-annot-uniprottopologies"]], "pypath.core.annot.Vesiclepedia": [[90, "pypath-core-annot-vesiclepedia"]], "pypath.core.annot.Wang": [[91, "pypath-core-annot-wang"]], "pypath.core.annot.Zhong2015": [[92, "pypath-core-annot-zhong2015"]], "pypath.core.annot.get_db": [[93, "pypath-core-annot-get-db"]], "pypath.core.annot.init_db": [[94, "pypath-core-annot-init-db"]], "pypath.core.attrs": [[95, "module-pypath.core.attrs"]], "pypath.core.attrs.AttributeHandler": [[96, "pypath-core-attrs-attributehandler"]], "pypath.core.common": [[97, "module-pypath.core.common"]], "pypath.core.common.filter_network_df": [[98, "pypath-core-common-filter-network-df"]], "pypath.core.complex": [[99, "module-pypath.core.complex"]], "pypath.core.complex.AbstractComplexResource": [[100, "pypath-core-complex-abstractcomplexresource"]], "pypath.core.complex.CellPhoneDB": [[101, "pypath-core-complex-cellphonedb"]], "pypath.core.complex.Cellchatdb": [[102, "pypath-core-complex-cellchatdb"]], "pypath.core.complex.Cellinker": [[103, "pypath-core-complex-cellinker"]], "pypath.core.complex.Compleat": [[104, "pypath-core-complex-compleat"]], "pypath.core.complex.ComplexAggregator": [[105, "pypath-core-complex-complexaggregator"]], "pypath.core.complex.ComplexPortal": [[106, "pypath-core-complex-complexportal"]], "pypath.core.complex.Corum": [[107, "pypath-core-complex-corum"]], "pypath.core.complex.GuideToPharmacology": [[108, "pypath-core-complex-guidetopharmacology"]], "pypath.core.complex.Havugimana": [[109, "pypath-core-complex-havugimana"]], "pypath.core.complex.Hpmr": [[110, "pypath-core-complex-hpmr"]], "pypath.core.complex.Humap": [[111, "pypath-core-complex-humap"]], "pypath.core.complex.Humap2": [[112, "pypath-core-complex-humap2"]], "pypath.core.complex.Icellnet": [[113, "pypath-core-complex-icellnet"]], "pypath.core.complex.Kegg": [[114, "pypath-core-complex-kegg"]], "pypath.core.complex.Pdb": [[115, "pypath-core-complex-pdb"]], "pypath.core.complex.Signor": [[116, "pypath-core-complex-signor"]], "pypath.core.complex.Spike": [[117, "pypath-core-complex-spike"]], "pypath.core.complex.all_complexes": [[118, "pypath-core-complex-all-complexes"]], "pypath.core.complex.get_db": [[119, "pypath-core-complex-get-db"]], "pypath.core.complex.init_db": [[120, "pypath-core-complex-init-db"]], "pypath.core.entity": [[121, "module-pypath.core.entity"]], "pypath.core.entity.Entity": [[122, "pypath-core-entity-entity"]], "pypath.core.entity.EntityKey": [[123, "pypath-core-entity-entitykey"]], "pypath.core.entity.EntityList": [[124, "pypath-core-entity-entitylist"]], "pypath.core.enz_sub": [[125, "module-pypath.core.enz_sub"]], "pypath.core.enz_sub.EnzymeSubstrateAggregator": [[126, "pypath-core-enz-sub-enzymesubstrateaggregator"]], "pypath.core.enz_sub.EnzymeSubstrateHomologyProcessor": [[127, "pypath-core-enz-sub-enzymesubstratehomologyprocessor"]], "pypath.core.enz_sub.EnzymeSubstrateProcessor": [[128, "pypath-core-enz-sub-enzymesubstrateprocessor"]], "pypath.core.enz_sub.get_db": [[129, "pypath-core-enz-sub-get-db"]], "pypath.core.enz_sub.init_db": [[130, "pypath-core-enz-sub-init-db"]], "pypath.core.evidence": [[131, "module-pypath.core.evidence"]], "pypath.core.evidence.Evidence": [[132, "pypath-core-evidence-evidence"]], "pypath.core.evidence.Evidences": [[133, "pypath-core-evidence-evidences"]], "pypath.core.interaction": [[134, "module-pypath.core.interaction"]], "pypath.core.interaction.Interaction": [[135, "pypath-core-interaction-interaction"]], "pypath.core.interaction.InteractionDataFrameRecord": [[136, "pypath-core-interaction-interactiondataframerecord"]], "pypath.core.interaction.InteractionKey": [[137, "pypath-core-interaction-interactionkey"]], "pypath.core.intercell": [[138, "module-pypath.core.intercell"]], "pypath.core.intercell.IntercellAnnotation": [[139, "pypath-core-intercell-intercellannotation"]], "pypath.core.intercell.get_db": [[140, "pypath-core-intercell-get-db"]], "pypath.core.intercell.init_db": [[141, "pypath-core-intercell-init-db"]], "pypath.core.intercell_annot": [[142, "module-pypath.core.intercell_annot"]], "pypath.core.intercell_annot.excludes": [[143, "pypath-core-intercell-annot-excludes"]], "pypath.core.network": [[144, "module-pypath.core.network"]], "pypath.core.network.Network": [[145, "pypath-core-network-network"]], "pypath.core.network.NetworkEntityCollection": [[146, "pypath-core-network-networkentitycollection"]], "pypath.core.network.NetworkStatsRecord": [[147, "pypath-core-network-networkstatsrecord"]], "pypath.core.network.get_db": [[148, "pypath-core-network-get-db"]], "pypath.core.network.init_db": [[149, "pypath-core-network-init-db"]], "pypath.data": [[150, "module-pypath.data"]], "pypath.disclaimer": [[151, "pypath-disclaimer"]], "pypath.info": [[152, "pypath-info"]], "pypath.inputs": [[153, "module-pypath.inputs"]], "pypath.inputs.abs": [[154, "module-pypath.inputs.abs"]], "pypath.inputs.abs.abs_interactions": [[155, "pypath-inputs-abs-abs-interactions"]], "pypath.inputs.acsn": [[156, "module-pypath.inputs.acsn"]], "pypath.inputs.acsn.acsn_interactions": [[157, "pypath-inputs-acsn-acsn-interactions"]], "pypath.inputs.acsn.acsn_interactions_sif": [[158, "pypath-inputs-acsn-acsn-interactions-sif"]], "pypath.inputs.adhesome": [[159, "module-pypath.inputs.adhesome"]], "pypath.inputs.adhesome.adhesome_annotations": [[160, "pypath-inputs-adhesome-adhesome-annotations"]], "pypath.inputs.adhesome.adhesome_interactions": [[161, "pypath-inputs-adhesome-adhesome-interactions"]], "pypath.inputs.almen2009": [[162, "module-pypath.inputs.almen2009"]], "pypath.inputs.almen2009.almen2009_annotations": [[163, "pypath-inputs-almen2009-almen2009-annotations"]], "pypath.inputs.baccin2019": [[164, "module-pypath.inputs.baccin2019"]], "pypath.inputs.baccin2019.baccin2019_annotations": [[165, "pypath-inputs-baccin2019-baccin2019-annotations"]], "pypath.inputs.baccin2019.baccin2019_interactions": [[166, "pypath-inputs-baccin2019-baccin2019-interactions"]], "pypath.inputs.biogps": [[167, "module-pypath.inputs.biogps"]], "pypath.inputs.biogps.BiogpsDataset": [[168, "pypath-inputs-biogps-biogpsdataset"]], "pypath.inputs.biogps.biogps_annotations": [[169, "pypath-inputs-biogps-biogps-annotations"]], "pypath.inputs.biogps.biogps_datasets": [[170, "pypath-inputs-biogps-biogps-datasets"]], "pypath.inputs.biogps.biogps_download": [[171, "pypath-inputs-biogps-biogps-download"]], "pypath.inputs.biogps.biogps_download_all": [[172, "pypath-inputs-biogps-biogps-download-all"]], "pypath.inputs.biogrid": [[173, "module-pypath.inputs.biogrid"]], "pypath.inputs.biogrid.biogrid_all_interactions": [[174, "pypath-inputs-biogrid-biogrid-all-interactions"]], "pypath.inputs.biogrid.biogrid_interactions": [[175, "pypath-inputs-biogrid-biogrid-interactions"]], "pypath.inputs.biomart": [[176, "module-pypath.inputs.biomart"]], "pypath.inputs.biomart.biomart_homology": [[177, "pypath-inputs-biomart-biomart-homology"]], "pypath.inputs.biomart.biomart_microarray": [[178, "pypath-inputs-biomart-biomart-microarray"]], "pypath.inputs.biomart.biomart_microarray_types": [[179, "pypath-inputs-biomart-biomart-microarray-types"]], "pypath.inputs.biomart.biomart_microarrays": [[180, "pypath-inputs-biomart-biomart-microarrays"]], "pypath.inputs.biomart.biomart_query": [[181, "pypath-inputs-biomart-biomart-query"]], "pypath.inputs.biomodels": [[182, "module-pypath.inputs.biomodels"]], "pypath.inputs.biomodels.download_single_model": [[183, "pypath-inputs-biomodels-download-single-model"]], "pypath.inputs.biomodels.get_all_models": [[184, "pypath-inputs-biomodels-get-all-models"]], "pypath.inputs.biomodels.get_biomodels": [[185, "pypath-inputs-biomodels-get-biomodels"]], "pypath.inputs.biomodels.get_biomodels_req": [[186, "pypath-inputs-biomodels-get-biomodels-req"]], "pypath.inputs.biomodels.get_single_model": [[187, "pypath-inputs-biomodels-get-single-model"]], "pypath.inputs.ca1": [[188, "module-pypath.inputs.ca1"]], "pypath.inputs.ca1.ca1_interactions": [[189, "pypath-inputs-ca1-ca1-interactions"]], "pypath.inputs.cancercellmap": [[190, "module-pypath.inputs.cancercellmap"]], "pypath.inputs.cancercellmap.ccmap_interactions": [[191, "pypath-inputs-cancercellmap-ccmap-interactions"]], "pypath.inputs.cancerdrugsdb": [[192, "module-pypath.inputs.cancerdrugsdb"]], "pypath.inputs.cancerdrugsdb.cancerdrugsdb_annotations": [[193, "pypath-inputs-cancerdrugsdb-cancerdrugsdb-annotations"]], "pypath.inputs.cancerdrugsdb.cancerdrugsdb_download": [[194, "pypath-inputs-cancerdrugsdb-cancerdrugsdb-download"]], "pypath.inputs.cancerdrugsdb.cancerdrugsdb_interactions": [[195, "pypath-inputs-cancerdrugsdb-cancerdrugsdb-interactions"]], "pypath.inputs.cancersea": [[196, "module-pypath.inputs.cancersea"]], "pypath.inputs.cancersea.cancersea_annotations": [[197, "pypath-inputs-cancersea-cancersea-annotations"]], "pypath.inputs.cell": [[198, "module-pypath.inputs.cell"]], "pypath.inputs.cell.cell_supplementary": [[199, "pypath-inputs-cell-cell-supplementary"]], "pypath.inputs.cellcall": [[200, "module-pypath.inputs.cellcall"]], "pypath.inputs.cellcall.cellcall_annotations": [[201, "pypath-inputs-cellcall-cellcall-annotations"]], "pypath.inputs.cellcall.cellcall_download": [[202, "pypath-inputs-cellcall-cellcall-download"]], "pypath.inputs.cellcall.cellcall_download_all": [[203, "pypath-inputs-cellcall-cellcall-download-all"]], "pypath.inputs.cellcall.cellcall_interactions": [[204, "pypath-inputs-cellcall-cellcall-interactions"]], "pypath.inputs.cellcellinteractions": [[205, "module-pypath.inputs.cellcellinteractions"]], "pypath.inputs.cellcellinteractions.cellcellinteractions_annotations": [[206, "pypath-inputs-cellcellinteractions-cellcellinteractions-annotations"]], "pypath.inputs.cellchatdb": [[207, "module-pypath.inputs.cellchatdb"]], "pypath.inputs.cellchatdb.cellchatdb_annotations": [[208, "pypath-inputs-cellchatdb-cellchatdb-annotations"]], "pypath.inputs.cellchatdb.cellchatdb_cofactors": [[209, "pypath-inputs-cellchatdb-cellchatdb-cofactors"]], "pypath.inputs.cellchatdb.cellchatdb_complexes": [[210, "pypath-inputs-cellchatdb-cellchatdb-complexes"]], "pypath.inputs.cellchatdb.cellchatdb_download": [[211, "pypath-inputs-cellchatdb-cellchatdb-download"]], "pypath.inputs.cellchatdb.cellchatdb_interactions": [[212, "pypath-inputs-cellchatdb-cellchatdb-interactions"]], "pypath.inputs.cellinker": [[213, "module-pypath.inputs.cellinker"]], "pypath.inputs.cellinker.CellinkerInteraction": [[214, "pypath-inputs-cellinker-cellinkerinteraction"]], "pypath.inputs.cellinker.cellinker_annotations": [[215, "pypath-inputs-cellinker-cellinker-annotations"]], "pypath.inputs.cellinker.cellinker_complex_annotations": [[216, "pypath-inputs-cellinker-cellinker-complex-annotations"]], "pypath.inputs.cellinker.cellinker_complexes": [[217, "pypath-inputs-cellinker-cellinker-complexes"]], "pypath.inputs.cellinker.cellinker_complexes_raw": [[218, "pypath-inputs-cellinker-cellinker-complexes-raw"]], "pypath.inputs.cellinker.cellinker_lr_interactions": [[219, "pypath-inputs-cellinker-cellinker-lr-interactions"]], "pypath.inputs.cellinker.cellinker_lr_interactions_raw": [[220, "pypath-inputs-cellinker-cellinker-lr-interactions-raw"]], "pypath.inputs.cellinker.cellinker_protein_annotations": [[221, "pypath-inputs-cellinker-cellinker-protein-annotations"]], "pypath.inputs.cellinker.cellinker_smol_interactions": [[222, "pypath-inputs-cellinker-cellinker-smol-interactions"]], "pypath.inputs.cellinker.cellinker_smol_interactions_raw": [[223, "pypath-inputs-cellinker-cellinker-smol-interactions-raw"]], "pypath.inputs.cellinker.components_to_complex": [[224, "pypath-inputs-cellinker-components-to-complex"]], "pypath.inputs.cellphonedb": [[225, "module-pypath.inputs.cellphonedb"]], "pypath.inputs.cellphonedb.CellPhoneDBAnnotation": [[226, "pypath-inputs-cellphonedb-cellphonedbannotation"]], "pypath.inputs.cellphonedb.cellphonedb_complex_annotations": [[227, "pypath-inputs-cellphonedb-cellphonedb-complex-annotations"]], "pypath.inputs.cellphonedb.cellphonedb_complexes": [[228, "pypath-inputs-cellphonedb-cellphonedb-complexes"]], "pypath.inputs.cellphonedb.cellphonedb_interactions": [[229, "pypath-inputs-cellphonedb-cellphonedb-interactions"]], "pypath.inputs.cellphonedb.cellphonedb_ligands_receptors": [[230, "pypath-inputs-cellphonedb-cellphonedb-ligands-receptors"]], "pypath.inputs.cellphonedb.cellphonedb_protein_annotations": [[231, "pypath-inputs-cellphonedb-cellphonedb-protein-annotations"]], "pypath.inputs.celltalkdb": [[232, "module-pypath.inputs.celltalkdb"]], "pypath.inputs.celltalkdb.celltalkdb_annotations": [[233, "pypath-inputs-celltalkdb-celltalkdb-annotations"]], "pypath.inputs.celltalkdb.celltalkdb_download": [[234, "pypath-inputs-celltalkdb-celltalkdb-download"]], "pypath.inputs.celltalkdb.celltalkdb_interactions": [[235, "pypath-inputs-celltalkdb-celltalkdb-interactions"]], "pypath.inputs.celltypist": [[236, "module-pypath.inputs.celltypist"]], "pypath.inputs.celltypist.celltypist_annotations": [[237, "pypath-inputs-celltypist-celltypist-annotations"]], "pypath.inputs.chembl": [[238, "module-pypath.inputs.chembl"]], "pypath.inputs.chembl.chembl_activities": [[239, "pypath-inputs-chembl-chembl-activities"]], "pypath.inputs.chembl.chembl_assays": [[240, "pypath-inputs-chembl-chembl-assays"]], "pypath.inputs.chembl.chembl_documents": [[241, "pypath-inputs-chembl-chembl-documents"]], "pypath.inputs.chembl.chembl_drug_indications": [[242, "pypath-inputs-chembl-chembl-drug-indications"]], "pypath.inputs.chembl.chembl_mechanisms": [[243, "pypath-inputs-chembl-chembl-mechanisms"]], "pypath.inputs.chembl.chembl_molecules": [[244, "pypath-inputs-chembl-chembl-molecules"]], "pypath.inputs.chembl.chembl_targets": [[245, "pypath-inputs-chembl-chembl-targets"]], "pypath.inputs.clinvar": [[246, "module-pypath.inputs.clinvar"]], "pypath.inputs.clinvar.clinvar_citations": [[247, "pypath-inputs-clinvar-clinvar-citations"]], "pypath.inputs.clinvar.clinvar_raw": [[248, "pypath-inputs-clinvar-clinvar-raw"]], "pypath.inputs.collectri": [[249, "module-pypath.inputs.collectri"]], "pypath.inputs.collectri.collectri_interactions": [[250, "pypath-inputs-collectri-collectri-interactions"]], "pypath.inputs.common": [[251, "module-pypath.inputs.common"]], "pypath.inputs.common.csv_sep_change": [[252, "pypath-inputs-common-csv-sep-change"]], "pypath.inputs.common.glom_fields": [[253, "pypath-inputs-common-glom-fields"]], "pypath.inputs.common.json_extract": [[254, "pypath-inputs-common-json-extract"]], "pypath.inputs.common.json_read": [[255, "pypath-inputs-common-json-read"]], "pypath.inputs.common.read_table": [[256, "pypath-inputs-common-read-table"]], "pypath.inputs.common.read_xls": [[257, "pypath-inputs-common-read-xls"]], "pypath.inputs.compleat": [[258, "module-pypath.inputs.compleat"]], "pypath.inputs.compleat.compleat_complexes": [[259, "pypath-inputs-compleat-compleat-complexes"]], "pypath.inputs.compleat.compleat_raw": [[260, "pypath-inputs-compleat-compleat-raw"]], "pypath.inputs.complexportal": [[261, "module-pypath.inputs.complexportal"]], "pypath.inputs.complexportal.complexportal_complexes": [[262, "pypath-inputs-complexportal-complexportal-complexes"]], "pypath.inputs.comppi": [[263, "module-pypath.inputs.comppi"]], "pypath.inputs.comppi.comppi_interaction_locations": [[264, "pypath-inputs-comppi-comppi-interaction-locations"]], "pypath.inputs.comppi.comppi_locations": [[265, "pypath-inputs-comppi-comppi-locations"]], "pypath.inputs.connectomedb": [[266, "module-pypath.inputs.connectomedb"]], "pypath.inputs.connectomedb.connectomedb_annotations": [[267, "pypath-inputs-connectomedb-connectomedb-annotations"]], "pypath.inputs.connectomedb.connectomedb_interactions": [[268, "pypath-inputs-connectomedb-connectomedb-interactions"]], "pypath.inputs.corum": [[269, "module-pypath.inputs.corum"]], "pypath.inputs.corum.corum_complexes": [[270, "pypath-inputs-corum-corum-complexes"]], "pypath.inputs.cosmic": [[271, "module-pypath.inputs.cosmic"]], "pypath.inputs.cosmic.cancer_gene_census_annotations": [[272, "pypath-inputs-cosmic-cancer-gene-census-annotations"]], "pypath.inputs.cpad": [[273, "module-pypath.inputs.cpad"]], "pypath.inputs.cpad.cpad_annotations": [[274, "pypath-inputs-cpad-cpad-annotations"]], "pypath.inputs.cpad.cpad_pathway_cancer": [[275, "pypath-inputs-cpad-cpad-pathway-cancer"]], "pypath.inputs.cpad.get_cpad": [[276, "pypath-inputs-cpad-get-cpad"]], "pypath.inputs.cpdb": [[277, "module-pypath.inputs.cpdb"]], "pypath.inputs.cpdb.cpdb_interactions": [[278, "pypath-inputs-cpdb-cpdb-interactions"]], "pypath.inputs.cpdb.cpdb_interactions_ltp": [[279, "pypath-inputs-cpdb-cpdb-interactions-ltp"]], "pypath.inputs.credentials": [[280, "module-pypath.inputs.credentials"]], "pypath.inputs.credentials.credentials": [[281, "pypath-inputs-credentials-credentials"]], "pypath.inputs.csa": [[282, "module-pypath.inputs.csa"]], "pypath.inputs.csa.get_csa": [[283, "pypath-inputs-csa-get-csa"]], "pypath.inputs.cspa": [[284, "module-pypath.inputs.cspa"]], "pypath.inputs.cspa.cspa_annotations": [[285, "pypath-inputs-cspa-cspa-annotations"]], "pypath.inputs.cspa.cspa_cell_type_annotations": [[286, "pypath-inputs-cspa-cspa-cell-type-annotations"]], "pypath.inputs.cspa.cspa_cell_types": [[287, "pypath-inputs-cspa-cspa-cell-types"]], "pypath.inputs.ctdbase": [[288, "module-pypath.inputs.ctdbase"]], "pypath.inputs.ctdbase.ctdbase_relations": [[289, "pypath-inputs-ctdbase-ctdbase-relations"]], "pypath.inputs.ctdbase.ctdbase_vocabulary": [[290, "pypath-inputs-ctdbase-ctdbase-vocabulary"]], "pypath.inputs.cytosig": [[291, "module-pypath.inputs.cytosig"]], "pypath.inputs.cytosig.cytosig_annotations": [[292, "pypath-inputs-cytosig-cytosig-annotations"]], "pypath.inputs.cytosig.cytosig_df": [[293, "pypath-inputs-cytosig-cytosig-df"]], "pypath.inputs.dbptm": [[294, "module-pypath.inputs.dbptm"]], "pypath.inputs.dbptm.dbptm_enzyme_substrate": [[295, "pypath-inputs-dbptm-dbptm-enzyme-substrate"]], "pypath.inputs.dbptm.dbptm_enzyme_substrate_old": [[296, "pypath-inputs-dbptm-dbptm-enzyme-substrate-old"]], "pypath.inputs.dbptm.dbptm_interactions": [[297, "pypath-inputs-dbptm-dbptm-interactions"]], "pypath.inputs.deathdomain": [[298, "module-pypath.inputs.deathdomain"]], "pypath.inputs.deathdomain.deathdomain_interactions": [[299, "pypath-inputs-deathdomain-deathdomain-interactions"]], "pypath.inputs.deathdomain.deathdomain_interactions_rescued": [[300, "pypath-inputs-deathdomain-deathdomain-interactions-rescued"]], "pypath.inputs.depod": [[301, "module-pypath.inputs.depod"]], "pypath.inputs.depod.depod_enzyme_substrate": [[302, "pypath-inputs-depod-depod-enzyme-substrate"]], "pypath.inputs.depod.depod_interactions": [[303, "pypath-inputs-depod-depod-interactions"]], "pypath.inputs.dgidb": [[304, "module-pypath.inputs.dgidb"]], "pypath.inputs.dgidb.dgidb_annotations": [[305, "pypath-inputs-dgidb-dgidb-annotations"]], "pypath.inputs.dgidb.dgidb_interactions": [[306, "pypath-inputs-dgidb-dgidb-interactions"]], "pypath.inputs.dgidb.get_dgidb_old": [[307, "pypath-inputs-dgidb-get-dgidb-old"]], "pypath.inputs.dip": [[308, "module-pypath.inputs.dip"]], "pypath.inputs.dip.dip_interactions": [[309, "pypath-inputs-dip-dip-interactions"]], "pypath.inputs.dip.dip_login": [[310, "pypath-inputs-dip-dip-login"]], "pypath.inputs.disgenet": [[311, "module-pypath.inputs.disgenet"]], "pypath.inputs.disgenet.DisgenetApi": [[312, "pypath-inputs-disgenet-disgenetapi"]], "pypath.inputs.disgenet.disease_id_mappings": [[313, "pypath-inputs-disgenet-disease-id-mappings"]], "pypath.inputs.disgenet.disgenet_annotations": [[314, "pypath-inputs-disgenet-disgenet-annotations"]], "pypath.inputs.disgenet.variant_gene_mappings": [[315, "pypath-inputs-disgenet-variant-gene-mappings"]], "pypath.inputs.domino": [[316, "module-pypath.inputs.domino"]], "pypath.inputs.domino.domino_ddi": [[317, "pypath-inputs-domino-domino-ddi"]], "pypath.inputs.domino.domino_enzsub": [[318, "pypath-inputs-domino-domino-enzsub"]], "pypath.inputs.domino.domino_interactions": [[319, "pypath-inputs-domino-domino-interactions"]], "pypath.inputs.domino.get_domino": [[320, "pypath-inputs-domino-get-domino"]], "pypath.inputs.dorothea": [[321, "module-pypath.inputs.dorothea"]], "pypath.inputs.dorothea.DorotheaInteraction": [[322, "pypath-inputs-dorothea-dorotheainteraction"]], "pypath.inputs.dorothea.dorothea_full_raw": [[323, "pypath-inputs-dorothea-dorothea-full-raw"]], "pypath.inputs.dorothea.dorothea_interactions": [[324, "pypath-inputs-dorothea-dorothea-interactions"]], "Details": [[324, "details"], [325, "details"], [326, "details"], [328, "details"], [330, "details"], [331, "details"]], "pypath.inputs.dorothea.dorothea_interactions_old": [[325, "pypath-inputs-dorothea-dorothea-interactions-old"]], "pypath.inputs.dorothea.dorothea_old_csv": [[326, "pypath-inputs-dorothea-dorothea-old-csv"]], "pypath.inputs.dorothea.dorothea_rda_raw": [[327, "pypath-inputs-dorothea-dorothea-rda-raw"]], "pypath.inputs.dorothea.get_dorothea_old": [[328, "pypath-inputs-dorothea-get-dorothea-old"]], "pypath.inputs.dorothea.get_tfregulons": [[329, "pypath-inputs-dorothea-get-tfregulons"]], "pypath.inputs.dorothea.tfregulons_interactions": [[330, "pypath-inputs-dorothea-tfregulons-interactions"]], "pypath.inputs.dorothea.tfregulons_interactions_old": [[331, "pypath-inputs-dorothea-tfregulons-interactions-old"]], "pypath.inputs.drugbank": [[332, "module-pypath.inputs.drugbank"]], "pypath.inputs.drugbank.DrugbankFull": [[333, "pypath-inputs-drugbank-drugbankfull"]], "pypath.inputs.drugbank.drugbank_annotations": [[334, "pypath-inputs-drugbank-drugbank-annotations"]], "pypath.inputs.drugbank.drugbank_drugs": [[335, "pypath-inputs-drugbank-drugbank-drugs"]], "pypath.inputs.drugbank.drugbank_interactions": [[336, "pypath-inputs-drugbank-drugbank-interactions"]], "pypath.inputs.drugbank.drugbank_mapping": [[337, "pypath-inputs-drugbank-drugbank-mapping"]], "pypath.inputs.drugbank.drugbank_raw_interactions": [[338, "pypath-inputs-drugbank-drugbank-raw-interactions"]], "pypath.inputs.drugcentral": [[339, "module-pypath.inputs.drugcentral"]], "pypath.inputs.drugcentral.drugcentral_drugs": [[340, "pypath-inputs-drugcentral-drugcentral-drugs"]], "pypath.inputs.drugcentral.drugcentral_interactions": [[341, "pypath-inputs-drugcentral-drugcentral-interactions"]], "pypath.inputs.drugcentral.drugcentral_mapping": [[342, "pypath-inputs-drugcentral-drugcentral-mapping"]], "pypath.inputs.ebi": [[343, "module-pypath.inputs.ebi"]], "pypath.inputs.ebi.ebi_rest": [[344, "pypath-inputs-ebi-ebi-rest"]], "pypath.inputs.elm": [[345, "module-pypath.inputs.elm"]], "pypath.inputs.elm.elm_classes": [[346, "pypath-inputs-elm-elm-classes"]], "pypath.inputs.elm.elm_domains": [[347, "pypath-inputs-elm-elm-domains"]], "pypath.inputs.elm.elm_instances": [[348, "pypath-inputs-elm-elm-instances"]], "pypath.inputs.elm.elm_interactions": [[349, "pypath-inputs-elm-elm-interactions"]], "pypath.inputs.embopress": [[350, "module-pypath.inputs.embopress"]], "pypath.inputs.embopress.embopress_supplementary": [[351, "pypath-inputs-embopress-embopress-supplementary"]], "pypath.inputs.embrace": [[352, "module-pypath.inputs.embrace"]], "pypath.inputs.embrace.embrace_annotations": [[353, "pypath-inputs-embrace-embrace-annotations"]], "pypath.inputs.embrace.embrace_interactions": [[354, "pypath-inputs-embrace-embrace-interactions"]], "pypath.inputs.embrace.embrace_raw": [[355, "pypath-inputs-embrace-embrace-raw"]], "pypath.inputs.embrace.embrace_translated": [[356, "pypath-inputs-embrace-embrace-translated"]], "pypath.inputs.encode": [[357, "module-pypath.inputs.encode"]], "pypath.inputs.encode.encode_tf_mirna_interactions": [[358, "pypath-inputs-encode-encode-tf-mirna-interactions"]], "pypath.inputs.ensembl": [[359, "module-pypath.inputs.ensembl"]], "pypath.inputs.ensembl.ensembl_organisms": [[360, "pypath-inputs-ensembl-ensembl-organisms"]], "pypath.inputs.exocarta": [[361, "module-pypath.inputs.exocarta"]], "pypath.inputs.exocarta.get_exocarta": [[362, "pypath-inputs-exocarta-get-exocarta"]], "pypath.inputs.exocarta.get_vesiclepedia": [[363, "pypath-inputs-exocarta-get-vesiclepedia"]], "pypath.inputs.genecards": [[364, "module-pypath.inputs.genecards"]], "pypath.inputs.genecards.genecards_datasheet": [[365, "pypath-inputs-genecards-genecards-datasheet"]], "pypath.inputs.genecards.genecards_soup": [[366, "pypath-inputs-genecards-genecards-soup"]], "pypath.inputs.genecards.genecards_summaries": [[367, "pypath-inputs-genecards-genecards-summaries"]], "pypath.inputs.get_method": [[368, "pypath-inputs-get-method"]], "pypath.inputs.go": [[369, "module-pypath.inputs.go"]], "pypath.inputs.go.get_go_desc": [[370, "pypath-inputs-go-get-go-desc"]], "pypath.inputs.go.get_go_quick": [[371, "pypath-inputs-go-get-go-quick"]], "pypath.inputs.go.get_goslim": [[372, "pypath-inputs-go-get-goslim"]], "pypath.inputs.go.go_ancestors": [[373, "pypath-inputs-go-go-ancestors"]], "pypath.inputs.go.go_ancestors_goose": [[374, "pypath-inputs-go-go-ancestors-goose"]], "pypath.inputs.go.go_ancestors_quickgo": [[375, "pypath-inputs-go-go-ancestors-quickgo"]], "pypath.inputs.go.go_annotations": [[376, "pypath-inputs-go-go-annotations"]], "pypath.inputs.go.go_annotations_all": [[377, "pypath-inputs-go-go-annotations-all"]], "pypath.inputs.go.go_annotations_goa": [[378, "pypath-inputs-go-go-annotations-goa"]], "pypath.inputs.go.go_annotations_goose": [[379, "pypath-inputs-go-go-annotations-goose"]], "pypath.inputs.go.go_annotations_quickgo": [[380, "pypath-inputs-go-go-annotations-quickgo"]], "pypath.inputs.go.go_annotations_solr": [[381, "pypath-inputs-go-go-annotations-solr"]], "pypath.inputs.go.go_annotations_uniprot": [[382, "pypath-inputs-go-go-annotations-uniprot"]], "pypath.inputs.go.go_descendants": [[383, "pypath-inputs-go-go-descendants"]], "pypath.inputs.go.go_descendants_goose": [[384, "pypath-inputs-go-go-descendants-goose"]], "pypath.inputs.go.go_descendants_quickgo": [[385, "pypath-inputs-go-go-descendants-quickgo"]], "pypath.inputs.go.go_descendants_to_ancestors": [[386, "pypath-inputs-go-go-descendants-to-ancestors"]], "pypath.inputs.go.go_terms": [[387, "pypath-inputs-go-go-terms"]], "pypath.inputs.go.go_terms_goose": [[388, "pypath-inputs-go-go-terms-goose"]], "pypath.inputs.go.go_terms_quickgo": [[389, "pypath-inputs-go-go-terms-quickgo"]], "pypath.inputs.go.go_terms_solr": [[390, "pypath-inputs-go-go-terms-solr"]], "pypath.inputs.gpcrdb": [[391, "module-pypath.inputs.gpcrdb"]], "pypath.inputs.gpcrdb.gpcrdb_annotations": [[392, "pypath-inputs-gpcrdb-gpcrdb-annotations"]], "pypath.inputs.graphviz": [[393, "module-pypath.inputs.graphviz"]], "pypath.inputs.graphviz.graphviz_attrs": [[394, "pypath-inputs-graphviz-graphviz-attrs"]], "pypath.inputs.guide2pharma": [[395, "module-pypath.inputs.guide2pharma"]], "pypath.inputs.guide2pharma.guide2pharma_complexes": [[396, "pypath-inputs-guide2pharma-guide2pharma-complexes"]], "pypath.inputs.guide2pharma.guide2pharma_download": [[397, "pypath-inputs-guide2pharma-guide2pharma-download"]], "pypath.inputs.guide2pharma.guide2pharma_interactions": [[398, "pypath-inputs-guide2pharma-guide2pharma-interactions"]], "pypath.inputs.havugimana": [[399, "module-pypath.inputs.havugimana"]], "pypath.inputs.havugimana.get_havugimana": [[400, "pypath-inputs-havugimana-get-havugimana"]], "pypath.inputs.havugimana.havugimana_complexes": [[401, "pypath-inputs-havugimana-havugimana-complexes"]], "pypath.inputs.hgnc": [[402, "module-pypath.inputs.hgnc"]], "pypath.inputs.hgnc.hgnc_genegroups": [[403, "pypath-inputs-hgnc-hgnc-genegroups"]], "pypath.inputs.hippie": [[404, "module-pypath.inputs.hippie"]], "pypath.inputs.hippie.hippie_interactions": [[405, "pypath-inputs-hippie-hippie-interactions"]], "pypath.inputs.hmdb": [[406, "module-pypath.inputs.hmdb"]], "pypath.inputs.hmdb.Field": [[407, "pypath-inputs-hmdb-field"]], "pypath.inputs.hmdb.hmdb_iter_metabolites": [[408, "pypath-inputs-hmdb-hmdb-iter-metabolites"]], "pypath.inputs.hmdb.hmdb_mapping": [[409, "pypath-inputs-hmdb-hmdb-mapping"]], "pypath.inputs.hmdb.hmdb_metabolites_raw": [[410, "pypath-inputs-hmdb-hmdb-metabolites-raw"]], "pypath.inputs.hmdb.hmdb_table": [[411, "pypath-inputs-hmdb-hmdb-table"]], "pypath.inputs.hmdb.hmdb_xml": [[412, "pypath-inputs-hmdb-hmdb-xml"]], "pypath.inputs.homologene": [[413, "module-pypath.inputs.homologene"]], "pypath.inputs.homologene.get_homologene": [[414, "pypath-inputs-homologene-get-homologene"]], "pypath.inputs.homologene.homologene_dict": [[415, "pypath-inputs-homologene-homologene-dict"]], "pypath.inputs.homologene.homologene_uniprot_dict": [[416, "pypath-inputs-homologene-homologene-uniprot-dict"]], "pypath.inputs.hpmr": [[417, "module-pypath.inputs.hpmr"]], "pypath.inputs.hpmr.HpmrInteraction": [[418, "pypath-inputs-hpmr-hpmrinteraction"]], "pypath.inputs.hpmr.get_hpmr": [[419, "pypath-inputs-hpmr-get-hpmr"]], "pypath.inputs.hpmr.hpmr_annotations": [[420, "pypath-inputs-hpmr-hpmr-annotations"]], "pypath.inputs.hpmr.hpmr_complexes": [[421, "pypath-inputs-hpmr-hpmr-complexes"]], "pypath.inputs.hpmr.hpmr_interactions": [[422, "pypath-inputs-hpmr-hpmr-interactions"]], "pypath.inputs.hpo": [[423, "module-pypath.inputs.hpo"]], "pypath.inputs.hpo.hpo_annotations": [[424, "pypath-inputs-hpo-hpo-annotations"]], "pypath.inputs.hpo.hpo_diseases": [[425, "pypath-inputs-hpo-hpo-diseases"]], "pypath.inputs.hpo.hpo_ontology": [[426, "pypath-inputs-hpo-hpo-ontology"]], "pypath.inputs.hpo.hpo_terms": [[427, "pypath-inputs-hpo-hpo-terms"]], "pypath.inputs.hprd": [[428, "module-pypath.inputs.hprd"]], "pypath.inputs.hprd.get_hprd": [[429, "pypath-inputs-hprd-get-hprd"]], "pypath.inputs.hprd.hprd_enzyme_substrate": [[430, "pypath-inputs-hprd-hprd-enzyme-substrate"]], "pypath.inputs.hprd.hprd_interactions": [[431, "pypath-inputs-hprd-hprd-interactions"]], "pypath.inputs.hprd.hprd_interactions_htp": [[432, "pypath-inputs-hprd-hprd-interactions-htp"]], "pypath.inputs.htri": [[433, "module-pypath.inputs.htri"]], "pypath.inputs.htri.htri_interactions": [[434, "pypath-inputs-htri-htri-interactions"]], "pypath.inputs.humancellmap": [[435, "module-pypath.inputs.humancellmap"]], "pypath.inputs.humancellmap.humancellmap_annotations": [[436, "pypath-inputs-humancellmap-humancellmap-annotations"]], "pypath.inputs.humap": [[437, "module-pypath.inputs.humap"]], "pypath.inputs.humap.humap2_complexes": [[438, "pypath-inputs-humap-humap2-complexes"]], "pypath.inputs.humap.humap_complexes": [[439, "pypath-inputs-humap-humap-complexes"]], "pypath.inputs.huri": [[440, "module-pypath.inputs.huri"]], "pypath.inputs.huri.hi_i_interactions": [[441, "pypath-inputs-huri-hi-i-interactions"]], "pypath.inputs.huri.hi_ii_interactions": [[442, "pypath-inputs-huri-hi-ii-interactions"]], "pypath.inputs.huri.hi_iii_old": [[443, "pypath-inputs-huri-hi-iii-old"]], "pypath.inputs.huri.hi_union_interactions": [[444, "pypath-inputs-huri-hi-union-interactions"]], "pypath.inputs.huri.huri_interactions": [[445, "pypath-inputs-huri-huri-interactions"]], "pypath.inputs.huri.lit_bm_13_interactions": [[446, "pypath-inputs-huri-lit-bm-13-interactions"]], "pypath.inputs.huri.lit_bm_17_interactions": [[447, "pypath-inputs-huri-lit-bm-17-interactions"]], "pypath.inputs.huri.lit_bm_interactions": [[448, "pypath-inputs-huri-lit-bm-interactions"]], "pypath.inputs.huri.rolland_hi_ii_14": [[449, "pypath-inputs-huri-rolland-hi-ii-14"]], "pypath.inputs.huri.vidal_hi_iii_old": [[450, "pypath-inputs-huri-vidal-hi-iii-old"]], "pypath.inputs.huri.yang2016_interactions": [[451, "pypath-inputs-huri-yang2016-interactions"]], "pypath.inputs.huri.yu2011_interactions": [[452, "pypath-inputs-huri-yu2011-interactions"]], "pypath.inputs.i3d": [[453, "module-pypath.inputs.i3d"]], "pypath.inputs.i3d.get_i3d": [[454, "pypath-inputs-i3d-get-i3d"]], "pypath.inputs.icellnet": [[455, "module-pypath.inputs.icellnet"]], "pypath.inputs.icellnet.IcellnetRecord": [[456, "pypath-inputs-icellnet-icellnetrecord"]], "pypath.inputs.icellnet.icellnet_annotations": [[457, "pypath-inputs-icellnet-icellnet-annotations"]], "pypath.inputs.icellnet.icellnet_complexes": [[458, "pypath-inputs-icellnet-icellnet-complexes"]], "pypath.inputs.icellnet.icellnet_interactions": [[459, "pypath-inputs-icellnet-icellnet-interactions"]], "pypath.inputs.ielm": [[460, "module-pypath.inputs.ielm"]], "pypath.inputs.ielm.get_ielm": [[461, "pypath-inputs-ielm-get-ielm"]], "pypath.inputs.ielm.get_ielm_huge": [[462, "pypath-inputs-ielm-get-ielm-huge"]], "pypath.inputs.imweb": [[463, "module-pypath.inputs.imweb"]], "pypath.inputs.imweb.get_imweb": [[464, "pypath-inputs-imweb-get-imweb"]], "pypath.inputs.imweb.get_imweb_req": [[465, "pypath-inputs-imweb-get-imweb-req"]], "pypath.inputs.innatedb": [[466, "module-pypath.inputs.innatedb"]], "pypath.inputs.innatedb.innatedb_interactions": [[467, "pypath-inputs-innatedb-innatedb-interactions"]], "pypath.inputs.instruct": [[468, "module-pypath.inputs.instruct"]], "pypath.inputs.instruct.get_instruct": [[469, "pypath-inputs-instruct-get-instruct"]], "pypath.inputs.instruct.get_instruct_offsets": [[470, "pypath-inputs-instruct-get-instruct-offsets"]], "pypath.inputs.intact": [[471, "module-pypath.inputs.intact"]], "pypath.inputs.intact.intact_interactions": [[472, "pypath-inputs-intact-intact-interactions"]], "pypath.inputs.integrins": [[473, "module-pypath.inputs.integrins"]], "pypath.inputs.integrins.get_integrins": [[474, "pypath-inputs-integrins-get-integrins"]], "pypath.inputs.interpro": [[475, "module-pypath.inputs.interpro"]], "pypath.inputs.interpro.interpro2go_annotations": [[476, "pypath-inputs-interpro-interpro2go-annotations"]], "pypath.inputs.interpro.interpro_annotations": [[477, "pypath-inputs-interpro-interpro-annotations"]], "pypath.inputs.interpro.interpro_entries": [[478, "pypath-inputs-interpro-interpro-entries"]], "pypath.inputs.interpro.interpro_xrefs": [[479, "pypath-inputs-interpro-interpro-xrefs"]], "pypath.inputs.intogen": [[480, "module-pypath.inputs.intogen"]], "pypath.inputs.intogen.intogen_annotations": [[481, "pypath-inputs-intogen-intogen-annotations"]], "pypath.inputs.ipi": [[482, "module-pypath.inputs.ipi"]], "pypath.inputs.ipi.ipi_uniprot": [[483, "pypath-inputs-ipi-ipi-uniprot"]], "pypath.inputs.iptmnet": [[484, "module-pypath.inputs.iptmnet"]], "pypath.inputs.iptmnet.IptmnetInteraction": [[485, "pypath-inputs-iptmnet-iptmnetinteraction"]], "pypath.inputs.iptmnet.iptmnet_interactions": [[486, "pypath-inputs-iptmnet-iptmnet-interactions"]], "pypath.inputs.italk": [[487, "module-pypath.inputs.italk"]], "pypath.inputs.italk.italk_annotations": [[488, "pypath-inputs-italk-italk-annotations"]], "pypath.inputs.italk.italk_interactions": [[489, "pypath-inputs-italk-italk-interactions"]], "pypath.inputs.italk.italk_raw": [[490, "pypath-inputs-italk-italk-raw"]], "pypath.inputs.kea": [[491, "module-pypath.inputs.kea"]], "pypath.inputs.kea.kea_enzyme_substrate": [[492, "pypath-inputs-kea-kea-enzyme-substrate"]], "pypath.inputs.kea.kea_interactions": [[493, "pypath-inputs-kea-kea-interactions"]], "pypath.inputs.kegg": [[494, "module-pypath.inputs.kegg"]], "pypath.inputs.kegg.KeggPathway": [[495, "pypath-inputs-kegg-keggpathway"]], "pypath.inputs.kegg.kegg_dbget": [[496, "pypath-inputs-kegg-kegg-dbget"]], "pypath.inputs.kegg.kegg_interactions": [[497, "pypath-inputs-kegg-kegg-interactions"]], "pypath.inputs.kegg.kegg_medicus": [[498, "pypath-inputs-kegg-kegg-medicus"]], "pypath.inputs.kegg.kegg_medicus_complexes": [[499, "pypath-inputs-kegg-kegg-medicus-complexes"]], "pypath.inputs.kegg.kegg_medicus_interactions": [[500, "pypath-inputs-kegg-kegg-medicus-interactions"]], "pypath.inputs.kegg.kegg_pathway_annotations": [[501, "pypath-inputs-kegg-kegg-pathway-annotations"]], "pypath.inputs.kegg.kegg_pathway_annotations_pathwaycommons": [[502, "pypath-inputs-kegg-kegg-pathway-annotations-pathwaycommons"]], "pypath.inputs.kegg.kegg_pathways": [[503, "pypath-inputs-kegg-kegg-pathways"]], "pypath.inputs.kegg_api": [[504, "module-pypath.inputs.kegg_api"]], "pypath.inputs.kegg_api.disease_to_drug": [[505, "pypath-inputs-kegg-api-disease-to-drug"]], "pypath.inputs.kegg_api.disease_to_gene": [[506, "pypath-inputs-kegg-api-disease-to-gene"]], "pypath.inputs.kegg_api.disease_to_pathway": [[507, "pypath-inputs-kegg-api-disease-to-pathway"]], "pypath.inputs.kegg_api.drug_to_disease": [[508, "pypath-inputs-kegg-api-drug-to-disease"]], "pypath.inputs.kegg_api.drug_to_drug": [[509, "pypath-inputs-kegg-api-drug-to-drug"]], "pypath.inputs.kegg_api.drug_to_gene": [[510, "pypath-inputs-kegg-api-drug-to-gene"]], "pypath.inputs.kegg_api.drug_to_pathway": [[511, "pypath-inputs-kegg-api-drug-to-pathway"]], "pypath.inputs.kegg_api.gene_to_disease": [[512, "pypath-inputs-kegg-api-gene-to-disease"]], "pypath.inputs.kegg_api.gene_to_drug": [[513, "pypath-inputs-kegg-api-gene-to-drug"]], "pypath.inputs.kegg_api.gene_to_pathway": [[514, "pypath-inputs-kegg-api-gene-to-pathway"]], "pypath.inputs.kegg_api.kegg_drug_to_chebi": [[515, "pypath-inputs-kegg-api-kegg-drug-to-chebi"]], "pypath.inputs.kegg_api.kegg_gene_to_ncbi_geneid": [[516, "pypath-inputs-kegg-api-kegg-gene-to-ncbi-geneid"]], "pypath.inputs.kegg_api.kegg_gene_to_uniprot": [[517, "pypath-inputs-kegg-api-kegg-gene-to-uniprot"]], "pypath.inputs.kegg_api.pathway_to_disease": [[518, "pypath-inputs-kegg-api-pathway-to-disease"]], "pypath.inputs.kegg_api.pathway_to_drug": [[519, "pypath-inputs-kegg-api-pathway-to-drug"]], "pypath.inputs.kegg_api.pathway_to_gene": [[520, "pypath-inputs-kegg-api-pathway-to-gene"]], "pypath.inputs.kinasedotcom": [[521, "module-pypath.inputs.kinasedotcom"]], "pypath.inputs.kinasedotcom.kinasedotcom_annotations": [[522, "pypath-inputs-kinasedotcom-kinasedotcom-annotations"]], "pypath.inputs.kirouac2010": [[523, "module-pypath.inputs.kirouac2010"]], "pypath.inputs.kirouac2010.kirouac2010_interactions": [[524, "pypath-inputs-kirouac2010-kirouac2010-interactions"]], "pypath.inputs.lambert2018": [[525, "module-pypath.inputs.lambert2018"]], "pypath.inputs.lambert2018.lambert2018_annotations": [[526, "pypath-inputs-lambert2018-lambert2018-annotations"]], "pypath.inputs.lambert2018.lambert2018_s1_raw": [[527, "pypath-inputs-lambert2018-lambert2018-s1-raw"]], "pypath.inputs.laudanna": [[528, "module-pypath.inputs.laudanna"]], "pypath.inputs.laudanna.laudanna_directions": [[529, "pypath-inputs-laudanna-laudanna-directions"]], "pypath.inputs.laudanna.laudanna_effects": [[530, "pypath-inputs-laudanna-laudanna-effects"]], "pypath.inputs.li2012": [[531, "module-pypath.inputs.li2012"]], "pypath.inputs.li2012.get_li2012": [[532, "pypath-inputs-li2012-get-li2012"]], "pypath.inputs.li2012.li2012_dmi": [[533, "pypath-inputs-li2012-li2012-dmi"]], "pypath.inputs.li2012.li2012_enzyme_substrate": [[534, "pypath-inputs-li2012-li2012-enzyme-substrate"]], "pypath.inputs.li2012.li2012_interactions": [[535, "pypath-inputs-li2012-li2012-interactions"]], "pypath.inputs.lincs": [[536, "module-pypath.inputs.lincs"]], "pypath.inputs.lincs.lincs_compounds": [[537, "pypath-inputs-lincs-lincs-compounds"]], "pypath.inputs.lmpid": [[538, "module-pypath.inputs.lmpid"]], "pypath.inputs.lmpid.lmpid_dmi": [[539, "pypath-inputs-lmpid-lmpid-dmi"]], "pypath.inputs.lmpid.lmpid_interactions": [[540, "pypath-inputs-lmpid-lmpid-interactions"]], "pypath.inputs.lmpid.load_lmpid": [[541, "pypath-inputs-lmpid-load-lmpid"]], "pypath.inputs.lncdisease": [[542, "module-pypath.inputs.lncdisease"]], "pypath.inputs.lncdisease.lncdisease_interactions": [[543, "pypath-inputs-lncdisease-lncdisease-interactions"]], "pypath.inputs.lncrnadb": [[544, "module-pypath.inputs.lncrnadb"]], "pypath.inputs.lncrnadb.lncrnadb_interactions": [[545, "pypath-inputs-lncrnadb-lncrnadb-interactions"]], "pypath.inputs.locate": [[546, "module-pypath.inputs.locate"]], "pypath.inputs.locate.locate_localizations": [[547, "pypath-inputs-locate-locate-localizations"]], "pypath.inputs.lrdb": [[548, "module-pypath.inputs.lrdb"]], "pypath.inputs.lrdb.LrdbAnnotation": [[549, "pypath-inputs-lrdb-lrdbannotation"]], "pypath.inputs.lrdb.lrdb_annotations": [[550, "pypath-inputs-lrdb-lrdb-annotations"]], "pypath.inputs.lrdb.lrdb_interactions": [[551, "pypath-inputs-lrdb-lrdb-interactions"]], "pypath.inputs.macrophage": [[552, "module-pypath.inputs.macrophage"]], "pypath.inputs.macrophage.macrophage_interactions": [[553, "pypath-inputs-macrophage-macrophage-interactions"]], "pypath.inputs.main": [[554, "module-pypath.inputs.main"]], "pypath.inputs.matrisome": [[555, "module-pypath.inputs.matrisome"]], "pypath.inputs.matrisome.matrisome_annotations": [[556, "pypath-inputs-matrisome-matrisome-annotations"]], "pypath.inputs.matrixdb": [[557, "module-pypath.inputs.matrixdb"]], "pypath.inputs.matrixdb.matrixdb_annotations": [[558, "pypath-inputs-matrixdb-matrixdb-annotations"]], "pypath.inputs.matrixdb.matrixdb_ecm_proteins": [[559, "pypath-inputs-matrixdb-matrixdb-ecm-proteins"]], "pypath.inputs.matrixdb.matrixdb_interactions": [[560, "pypath-inputs-matrixdb-matrixdb-interactions"]], "pypath.inputs.matrixdb.matrixdb_membrane_proteins": [[561, "pypath-inputs-matrixdb-matrixdb-membrane-proteins"]], "pypath.inputs.matrixdb.matrixdb_secreted_proteins": [[562, "pypath-inputs-matrixdb-matrixdb-secreted-proteins"]], "pypath.inputs.mcam": [[563, "module-pypath.inputs.mcam"]], "pypath.inputs.mcam.mcam_cell_adhesion_molecules": [[564, "pypath-inputs-mcam-mcam-cell-adhesion-molecules"]], "pypath.inputs.membranome": [[565, "module-pypath.inputs.membranome"]], "pypath.inputs.membranome.membranome_annotations": [[566, "pypath-inputs-membranome-membranome-annotations"]], "pypath.inputs.mimp": [[567, "module-pypath.inputs.mimp"]], "pypath.inputs.mimp.get_kinase_class": [[568, "pypath-inputs-mimp-get-kinase-class"]], "pypath.inputs.mimp.mimp_enzyme_substrate": [[569, "pypath-inputs-mimp-mimp-enzyme-substrate"]], "pypath.inputs.mimp.mimp_interactions": [[570, "pypath-inputs-mimp-mimp-interactions"]], "pypath.inputs.mir2disease": [[571, "module-pypath.inputs.mir2disease"]], "pypath.inputs.mir2disease.mir2disease_interactions": [[572, "pypath-inputs-mir2disease-mir2disease-interactions"]], "pypath.inputs.mirbase": [[573, "module-pypath.inputs.mirbase"]], "pypath.inputs.mirbase.get_mirbase_aliases": [[574, "pypath-inputs-mirbase-get-mirbase-aliases"]], "pypath.inputs.mirbase.mirbase_ids": [[575, "pypath-inputs-mirbase-mirbase-ids"]], "pypath.inputs.mirbase.mirbase_mature": [[576, "pypath-inputs-mirbase-mirbase-mature"]], "pypath.inputs.mirbase.mirbase_mature_all": [[577, "pypath-inputs-mirbase-mirbase-mature-all"]], "pypath.inputs.mirbase.mirbase_precursor": [[578, "pypath-inputs-mirbase-mirbase-precursor"]], "pypath.inputs.mirbase.mirbase_precursor_all": [[579, "pypath-inputs-mirbase-mirbase-precursor-all"]], "pypath.inputs.mirbase.mirbase_precursor_to_mature": [[580, "pypath-inputs-mirbase-mirbase-precursor-to-mature"]], "pypath.inputs.mirdeathdb": [[581, "module-pypath.inputs.mirdeathdb"]], "pypath.inputs.mirdeathdb.mirdeathdb_interactions": [[582, "pypath-inputs-mirdeathdb-mirdeathdb-interactions"]], "pypath.inputs.mirecords": [[583, "module-pypath.inputs.mirecords"]], "pypath.inputs.mirecords.mirecords_interactions": [[584, "pypath-inputs-mirecords-mirecords-interactions"]], "pypath.inputs.mirtarbase": [[585, "module-pypath.inputs.mirtarbase"]], "pypath.inputs.mirtarbase.mirtarbase_interactions": [[586, "pypath-inputs-mirtarbase-mirtarbase-interactions"]], "pypath.inputs.mitab": [[587, "module-pypath.inputs.mitab"]], "pypath.inputs.mitab.mitab_field_list": [[588, "pypath-inputs-mitab-mitab-field-list"]], "pypath.inputs.mitab.mitab_field_uniprot": [[589, "pypath-inputs-mitab-mitab-field-uniprot"]], "pypath.inputs.mppi": [[590, "module-pypath.inputs.mppi"]], "pypath.inputs.mppi.mppi_interactions": [[591, "pypath-inputs-mppi-mppi-interactions"]], "pypath.inputs.ncrdeathdb": [[592, "module-pypath.inputs.ncrdeathdb"]], "pypath.inputs.ncrdeathdb.ncrdeathdb_interactions": [[593, "pypath-inputs-ncrdeathdb-ncrdeathdb-interactions"]], "pypath.inputs.negatome": [[594, "module-pypath.inputs.negatome"]], "pypath.inputs.negatome.negatome_interactions": [[595, "pypath-inputs-negatome-negatome-interactions"]], "pypath.inputs.netbiol": [[596, "module-pypath.inputs.netbiol"]], "pypath.inputs.netbiol.arn_interactions": [[597, "pypath-inputs-netbiol-arn-interactions"]], "pypath.inputs.netbiol.nrf2ome_interactions": [[598, "pypath-inputs-netbiol-nrf2ome-interactions"]], "pypath.inputs.netpath": [[599, "module-pypath.inputs.netpath"]], "pypath.inputs.netpath.netpath_interactions": [[600, "pypath-inputs-netpath-netpath-interactions"]], "pypath.inputs.netpath.netpath_names": [[601, "pypath-inputs-netpath-netpath-names"]], "pypath.inputs.netpath.netpath_pathway_annotations": [[602, "pypath-inputs-netpath-netpath-pathway-annotations"]], "pypath.inputs.oma": [[603, "module-pypath.inputs.oma"]], "pypath.inputs.oma.oma_orthologs": [[604, "pypath-inputs-oma-oma-orthologs"]], "pypath.inputs.ontology": [[605, "module-pypath.inputs.ontology"]], "pypath.inputs.ontology.listof_ontologies": [[606, "pypath-inputs-ontology-listof-ontologies"]], "pypath.inputs.ontology.ontology": [[607, "pypath-inputs-ontology-ontology"]], "pypath.inputs.opm": [[608, "module-pypath.inputs.opm"]], "pypath.inputs.opm.opm_annotations": [[609, "pypath-inputs-opm-opm-annotations"]], "pypath.inputs.oreganno": [[610, "module-pypath.inputs.oreganno"]], "pypath.inputs.oreganno.oreganno_interactions": [[611, "pypath-inputs-oreganno-oreganno-interactions"]], "pypath.inputs.oreganno.oreganno_raw": [[612, "pypath-inputs-oreganno-oreganno-raw"]], "pypath.inputs.panglaodb": [[613, "module-pypath.inputs.panglaodb"]], "pypath.inputs.panglaodb.panglaodb_annotations": [[614, "pypath-inputs-panglaodb-panglaodb-annotations"]], "pypath.inputs.panglaodb.panglaodb_raw": [[615, "pypath-inputs-panglaodb-panglaodb-raw"]], "pypath.inputs.pathophenodb": [[616, "module-pypath.inputs.pathophenodb"]], "pypath.inputs.pathophenodb.DiseasePathogen": [[617, "pypath-inputs-pathophenodb-diseasepathogen"]], "pypath.inputs.pathophenodb.disease_pathogen_interactions": [[618, "pypath-inputs-pathophenodb-disease-pathogen-interactions"]], "pypath.inputs.pathwaycommons": [[619, "module-pypath.inputs.pathwaycommons"]], "pypath.inputs.pathwaycommons.PathwayCommonsInteraction": [[620, "pypath-inputs-pathwaycommons-pathwaycommonsinteraction"]], "pypath.inputs.pathwaycommons.PathwayCommonsResource": [[621, "pypath-inputs-pathwaycommons-pathwaycommonsresource"]], "pypath.inputs.pathwaycommons.pathwaycommons_bind_interactions": [[622, "pypath-inputs-pathwaycommons-pathwaycommons-bind-interactions"]], "pypath.inputs.pathwaycommons.pathwaycommons_biogrid_interactions": [[623, "pypath-inputs-pathwaycommons-pathwaycommons-biogrid-interactions"]], "pypath.inputs.pathwaycommons.pathwaycommons_corum_interactions": [[624, "pypath-inputs-pathwaycommons-pathwaycommons-corum-interactions"]], "pypath.inputs.pathwaycommons.pathwaycommons_dip_interactions": [[625, "pypath-inputs-pathwaycommons-pathwaycommons-dip-interactions"]], "pypath.inputs.pathwaycommons.pathwaycommons_hprd_interactions": [[626, "pypath-inputs-pathwaycommons-pathwaycommons-hprd-interactions"]], "pypath.inputs.pathwaycommons.pathwaycommons_inoh_interactions": [[627, "pypath-inputs-pathwaycommons-pathwaycommons-inoh-interactions"]], "pypath.inputs.pathwaycommons.pathwaycommons_intact_interactions": [[628, "pypath-inputs-pathwaycommons-pathwaycommons-intact-interactions"]], "pypath.inputs.pathwaycommons.pathwaycommons_interactions": [[629, "pypath-inputs-pathwaycommons-pathwaycommons-interactions"]], "pypath.inputs.pathwaycommons.pathwaycommons_kegg_interactions": [[630, "pypath-inputs-pathwaycommons-pathwaycommons-kegg-interactions"]], "pypath.inputs.pathwaycommons.pathwaycommons_netpath_interactions": [[631, "pypath-inputs-pathwaycommons-pathwaycommons-netpath-interactions"]], "pypath.inputs.pathwaycommons.pathwaycommons_panther_interactions": [[632, "pypath-inputs-pathwaycommons-pathwaycommons-panther-interactions"]], "pypath.inputs.pathwaycommons.pathwaycommons_phosphosite_interactions": [[633, "pypath-inputs-pathwaycommons-pathwaycommons-phosphosite-interactions"]], "pypath.inputs.pathwaycommons.pathwaycommons_reactome_interactions": [[634, "pypath-inputs-pathwaycommons-pathwaycommons-reactome-interactions"]], "pypath.inputs.pathwaycommons.pathwaycommons_wikipathways_interactions": [[635, "pypath-inputs-pathwaycommons-pathwaycommons-wikipathways-interactions"]], "pypath.inputs.pazar": [[636, "module-pypath.inputs.pazar"]], "pypath.inputs.pazar.pazar_interactions": [[637, "pypath-inputs-pazar-pazar-interactions"]], "pypath.inputs.pdb": [[638, "module-pypath.inputs.pdb"]], "pypath.inputs.pdb.pdb_chains": [[639, "pypath-inputs-pdb-pdb-chains"]], "pypath.inputs.pdb.pdb_complexes": [[640, "pypath-inputs-pdb-pdb-complexes"]], "pypath.inputs.pdb.pdb_uniprot": [[641, "pypath-inputs-pdb-pdb-uniprot"]], "pypath.inputs.pdzbase": [[642, "module-pypath.inputs.pdzbase"]], "pypath.inputs.pdzbase.pdzbase_interactions": [[643, "pypath-inputs-pdzbase-pdzbase-interactions"]], "pypath.inputs.pepcyber": [[644, "module-pypath.inputs.pepcyber"]], "pypath.inputs.pepcyber.pepcyber_details": [[645, "pypath-inputs-pepcyber-pepcyber-details"]], "pypath.inputs.pepcyber.pepcyber_interactions": [[646, "pypath-inputs-pepcyber-pepcyber-interactions"]], "pypath.inputs.pfam": [[647, "module-pypath.inputs.pfam"]], "pypath.inputs.pfam.pfam_names": [[648, "pypath-inputs-pfam-pfam-names"]], "pypath.inputs.pfam.pfam_pdb": [[649, "pypath-inputs-pfam-pfam-pdb"]], "pypath.inputs.pfam.pfam_regions": [[650, "pypath-inputs-pfam-pfam-regions"]], "pypath.inputs.pfam.pfam_uniprot": [[651, "pypath-inputs-pfam-pfam-uniprot"]], "pypath.inputs.pharos": [[652, "module-pypath.inputs.pharos"]], "pypath.inputs.pharos.pharos_diseases": [[653, "pypath-inputs-pharos-pharos-diseases"]], "pypath.inputs.pharos.pharos_expression": [[654, "pypath-inputs-pharos-pharos-expression"]], "pypath.inputs.pharos.pharos_general": [[655, "pypath-inputs-pharos-pharos-general"]], "pypath.inputs.pharos.pharos_gtex": [[656, "pypath-inputs-pharos-pharos-gtex"]], "pypath.inputs.pharos.pharos_ligands": [[657, "pypath-inputs-pharos-pharos-ligands"]], "pypath.inputs.pharos.pharos_orthologs": [[658, "pypath-inputs-pharos-pharos-orthologs"]], "pypath.inputs.pharos.pharos_targets": [[659, "pypath-inputs-pharos-pharos-targets"]], "pypath.inputs.pharos.pharos_xrefs": [[660, "pypath-inputs-pharos-pharos-xrefs"]], "pypath.inputs.phobius": [[661, "module-pypath.inputs.phobius"]], "pypath.inputs.phobius.phobius_annotations": [[662, "pypath-inputs-phobius-phobius-annotations"]], "pypath.inputs.phosphatome": [[663, "module-pypath.inputs.phosphatome"]], "pypath.inputs.phosphatome.phosphatome_annotations": [[664, "pypath-inputs-phosphatome-phosphatome-annotations"]], "pypath.inputs.phosphoelm": [[665, "module-pypath.inputs.phosphoelm"]], "pypath.inputs.phosphoelm.phosphoelm_enzyme_substrate": [[666, "pypath-inputs-phosphoelm-phosphoelm-enzyme-substrate"]], "pypath.inputs.phosphoelm.phosphoelm_interactions": [[667, "pypath-inputs-phosphoelm-phosphoelm-interactions"]], "pypath.inputs.phosphoelm.phosphoelm_kinases": [[668, "pypath-inputs-phosphoelm-phosphoelm-kinases"]], "pypath.inputs.phosphonetworks": [[669, "module-pypath.inputs.phosphonetworks"]], "pypath.inputs.phosphonetworks.phosphonetworks_enzyme_substrate": [[670, "pypath-inputs-phosphonetworks-phosphonetworks-enzyme-substrate"]], "pypath.inputs.phosphonetworks.phosphonetworks_interactions": [[671, "pypath-inputs-phosphonetworks-phosphonetworks-interactions"]], "pypath.inputs.phosphopoint": [[672, "module-pypath.inputs.phosphopoint"]], "pypath.inputs.phosphopoint.phosphopoint_directions": [[673, "pypath-inputs-phosphopoint-phosphopoint-directions"]], "pypath.inputs.phosphopoint.phosphopoint_interactions": [[674, "pypath-inputs-phosphopoint-phosphopoint-interactions"]], "pypath.inputs.phosphosite": [[675, "module-pypath.inputs.phosphosite"]], "pypath.inputs.phosphosite.phosphosite_directions": [[676, "pypath-inputs-phosphosite-phosphosite-directions"]], "pypath.inputs.phosphosite.phosphosite_enzyme_substrate": [[677, "pypath-inputs-phosphosite-phosphosite-enzyme-substrate"]], "pypath.inputs.phosphosite.phosphosite_interactions": [[678, "pypath-inputs-phosphosite-phosphosite-interactions"]], "pypath.inputs.phosphosite.phosphosite_interactions_all": [[679, "pypath-inputs-phosphosite-phosphosite-interactions-all"]], "pypath.inputs.phosphosite.phosphosite_interactions_curated": [[680, "pypath-inputs-phosphosite-phosphosite-interactions-curated"]], "pypath.inputs.phosphosite.phosphosite_interactions_new": [[681, "pypath-inputs-phosphosite-phosphosite-interactions-new"]], "pypath.inputs.phosphosite.phosphosite_interactions_noref": [[682, "pypath-inputs-phosphosite-phosphosite-interactions-noref"]], "pypath.inputs.phosphosite.phosphosite_ptm_orthology": [[683, "pypath-inputs-phosphosite-phosphosite-ptm-orthology"]], "pypath.inputs.phosphosite.phosphosite_ptms": [[684, "pypath-inputs-phosphosite-phosphosite-ptms"]], "pypath.inputs.phosphosite.phosphosite_regsites": [[685, "pypath-inputs-phosphosite-phosphosite-regsites"]], "pypath.inputs.phosphosite.phosphosite_regsites_one_organism": [[686, "pypath-inputs-phosphosite-phosphosite-regsites-one-organism"]], "pypath.inputs.phosphosite.regsites_tab": [[687, "pypath-inputs-phosphosite-regsites-tab"]], "pypath.inputs.pisa": [[688, "module-pypath.inputs.pisa"]], "pypath.inputs.pisa.PisaBond": [[689, "pypath-inputs-pisa-pisabond"]], "pypath.inputs.pisa.pisa_bonds": [[690, "pypath-inputs-pisa-pisa-bonds"]], "pypath.inputs.pisa.pisa_interfaces": [[691, "pypath-inputs-pisa-pisa-interfaces"]], "pypath.inputs.pro": [[692, "module-pypath.inputs.pro"]], "pypath.inputs.pro.get_pro": [[693, "pypath-inputs-pro-get-pro"]], "pypath.inputs.pro.pro_mapping": [[694, "pypath-inputs-pro-pro-mapping"]], "pypath.inputs.progeny": [[695, "module-pypath.inputs.progeny"]], "pypath.inputs.progeny.progeny_annotations": [[696, "pypath-inputs-progeny-progeny-annotations"]], "pypath.inputs.progeny.progeny_raw": [[697, "pypath-inputs-progeny-progeny-raw"]], "pypath.inputs.proteinatlas": [[698, "module-pypath.inputs.proteinatlas"]], "pypath.inputs.proteinatlas.get_proteinatlas": [[699, "pypath-inputs-proteinatlas-get-proteinatlas"]], "pypath.inputs.proteinatlas.proteinatlas_annotations": [[700, "pypath-inputs-proteinatlas-proteinatlas-annotations"]], "pypath.inputs.proteinatlas.proteinatlas_secretome_annotations": [[701, "pypath-inputs-proteinatlas-proteinatlas-secretome-annotations"]], "pypath.inputs.proteinatlas.proteinatlas_subcellular_annotations": [[702, "pypath-inputs-proteinatlas-proteinatlas-subcellular-annotations"]], "pypath.inputs.proteins": [[703, "module-pypath.inputs.proteins"]], "pypath.inputs.proteins.variants": [[704, "pypath-inputs-proteins-variants"]], "pypath.inputs.protmapper": [[705, "module-pypath.inputs.protmapper"]], "pypath.inputs.protmapper.get_protmapper": [[706, "pypath-inputs-protmapper-get-protmapper"]], "pypath.inputs.protmapper.protmapper_enzyme_substrate": [[707, "pypath-inputs-protmapper-protmapper-enzyme-substrate"]], "pypath.inputs.protmapper.protmapper_interactions": [[708, "pypath-inputs-protmapper-protmapper-interactions"]], "pypath.inputs.pubchem": [[709, "module-pypath.inputs.pubchem"]], "pypath.inputs.pubchem.pubchem_mapping": [[710, "pypath-inputs-pubchem-pubchem-mapping"]], "pypath.inputs.pubmed": [[711, "module-pypath.inputs.pubmed"]], "pypath.inputs.pubmed.get_pmid": [[712, "pypath-inputs-pubmed-get-pmid"]], "pypath.inputs.pubmed.get_pubmeds": [[713, "pypath-inputs-pubmed-get-pubmeds"]], "pypath.inputs.pubmed.only_pmids": [[714, "pypath-inputs-pubmed-only-pmids"]], "pypath.inputs.pubmed.open_pubmed": [[715, "pypath-inputs-pubmed-open-pubmed"]], "pypath.inputs.pubmed.pmids_dict": [[716, "pypath-inputs-pubmed-pmids-dict"]], "pypath.inputs.pubmed.pmids_list": [[717, "pypath-inputs-pubmed-pmids-list"]], "pypath.inputs.ramilowski2015": [[718, "module-pypath.inputs.ramilowski2015"]], "pypath.inputs.ramilowski2015.ramilowski_interactions": [[719, "pypath-inputs-ramilowski2015-ramilowski-interactions"]], "pypath.inputs.ramilowski2015.ramilowski_locations": [[720, "pypath-inputs-ramilowski2015-ramilowski-locations"]], "pypath.inputs.ramp": [[721, "module-pypath.inputs.ramp"]], "pypath.inputs.ramp.ramp_id_types": [[722, "pypath-inputs-ramp-ramp-id-types"]], "pypath.inputs.ramp.ramp_id_types_2": [[723, "pypath-inputs-ramp-ramp-id-types-2"]], "pypath.inputs.ramp.ramp_list_tables": [[724, "pypath-inputs-ramp-ramp-list-tables"]], "pypath.inputs.ramp.ramp_mapping": [[725, "pypath-inputs-ramp-ramp-mapping"]], "pypath.inputs.ramp.ramp_raw": [[726, "pypath-inputs-ramp-ramp-raw"]], "pypath.inputs.ramp.ramp_show_tables": [[727, "pypath-inputs-ramp-ramp-show-tables"]], "pypath.inputs.rdata": [[728, "module-pypath.inputs.rdata"]], "pypath.inputs.reaction": [[729, "module-pypath.inputs.reaction"]], "pypath.inputs.reaction.acsn_biopax": [[730, "pypath-inputs-reaction-acsn-biopax"]], "pypath.inputs.reaction.acsn_interactions_2": [[731, "pypath-inputs-reaction-acsn-interactions-2"]], "pypath.inputs.reaction.get_acsn_effects": [[732, "pypath-inputs-reaction-get-acsn-effects"]], "pypath.inputs.reaction.get_controls": [[733, "pypath-inputs-reaction-get-controls"]], "pypath.inputs.reaction.get_interactions": [[734, "pypath-inputs-reaction-get-interactions"]], "pypath.inputs.reaction.get_reactions": [[735, "pypath-inputs-reaction-get-reactions"]], "pypath.inputs.reaction.get_soup": [[736, "pypath-inputs-reaction-get-soup"]], "pypath.inputs.reaction.panther_biopax": [[737, "pypath-inputs-reaction-panther-biopax"]], "pypath.inputs.reaction.panther_interactions": [[738, "pypath-inputs-reaction-panther-interactions"]], "pypath.inputs.reaction.pid_biopax": [[739, "pypath-inputs-reaction-pid-biopax"]], "pypath.inputs.reaction.pid_interactions": [[740, "pypath-inputs-reaction-pid-interactions"]], "pypath.inputs.reaction.process_complex": [[741, "pypath-inputs-reaction-process-complex"]], "pypath.inputs.reaction.process_controls": [[742, "pypath-inputs-reaction-process-controls"]], "pypath.inputs.reaction.process_reactions": [[743, "pypath-inputs-reaction-process-reactions"]], "pypath.inputs.reaction.reactions_biopax": [[744, "pypath-inputs-reaction-reactions-biopax"]], "pypath.inputs.reaction.reactome_biopax": [[745, "pypath-inputs-reaction-reactome-biopax"]], "pypath.inputs.reaction.reactome_bs": [[746, "pypath-inputs-reaction-reactome-bs"]], "pypath.inputs.reaction.reactome_interactions": [[747, "pypath-inputs-reaction-reactome-interactions"]], "pypath.inputs.reaction.reactome_sbml": [[748, "pypath-inputs-reaction-reactome-sbml"]], "pypath.inputs.scconnect": [[749, "module-pypath.inputs.scconnect"]], "pypath.inputs.scconnect.scconnect_annotations": [[750, "pypath-inputs-scconnect-scconnect-annotations"]], "pypath.inputs.scconnect.scconnect_complexes": [[751, "pypath-inputs-scconnect-scconnect-complexes"]], "pypath.inputs.scconnect.scconnect_interactions": [[752, "pypath-inputs-scconnect-scconnect-interactions"]], "pypath.inputs.science": [[753, "module-pypath.inputs.science"]], "pypath.inputs.science.science_download": [[754, "pypath-inputs-science-science-download"]], "pypath.inputs.signalink": [[755, "module-pypath.inputs.signalink"]], "pypath.inputs.signalink.signalink_annotations": [[756, "pypath-inputs-signalink-signalink-annotations"]], "pypath.inputs.signalink.signalink_function_annotations": [[757, "pypath-inputs-signalink-signalink-function-annotations"]], "pypath.inputs.signalink.signalink_interactions": [[758, "pypath-inputs-signalink-signalink-interactions"]], "pypath.inputs.signalink.signalink_pathway_annotations": [[759, "pypath-inputs-signalink-signalink-pathway-annotations"]], "pypath.inputs.signor": [[760, "module-pypath.inputs.signor"]], "pypath.inputs.signor.signor_complexes": [[761, "pypath-inputs-signor-signor-complexes"]], "pypath.inputs.signor.signor_enzyme_substrate": [[762, "pypath-inputs-signor-signor-enzyme-substrate"]], "pypath.inputs.signor.signor_interactions": [[763, "pypath-inputs-signor-signor-interactions"]], "pypath.inputs.signor.signor_pathway_annotations": [[764, "pypath-inputs-signor-signor-pathway-annotations"]], "pypath.inputs.signor.signor_pathways": [[765, "pypath-inputs-signor-signor-pathways"]], "pypath.inputs.signor.signor_protein_families": [[766, "pypath-inputs-signor-signor-protein-families"]], "pypath.inputs.spike": [[767, "module-pypath.inputs.spike"]], "pypath.inputs.spike.spike_complexes": [[768, "pypath-inputs-spike-spike-complexes"]], "pypath.inputs.spike.spike_interactions": [[769, "pypath-inputs-spike-spike-interactions"]], "pypath.inputs.stitch": [[770, "module-pypath.inputs.stitch"]], "pypath.inputs.stitch.stitch_actions_interactions": [[771, "pypath-inputs-stitch-stitch-actions-interactions"]], "pypath.inputs.stitch.stitch_links_interactions": [[772, "pypath-inputs-stitch-stitch-links-interactions"]], "pypath.inputs.string": [[773, "module-pypath.inputs.string"]], "pypath.inputs.string.string_effects": [[774, "pypath-inputs-string-string-effects"]], "pypath.inputs.string.string_links_interactions": [[775, "pypath-inputs-string-string-links-interactions"]], "pypath.inputs.string.string_physical_interactions": [[776, "pypath-inputs-string-string-physical-interactions"]], "pypath.inputs.string.string_species": [[777, "pypath-inputs-string-string-species"]], "pypath.inputs.surfaceome": [[778, "module-pypath.inputs.surfaceome"]], "pypath.inputs.surfaceome.surfaceome_annotations": [[779, "pypath-inputs-surfaceome-surfaceome-annotations"]], "pypath.inputs.switches_elm": [[780, "module-pypath.inputs.switches_elm"]], "pypath.inputs.switches_elm.get_switches_elm": [[781, "pypath-inputs-switches-elm-get-switches-elm"]], "pypath.inputs.talklr": [[782, "module-pypath.inputs.talklr"]], "pypath.inputs.talklr.talklr_annotations": [[783, "pypath-inputs-talklr-talklr-annotations"]], "pypath.inputs.talklr.talklr_interactions": [[784, "pypath-inputs-talklr-talklr-interactions"]], "pypath.inputs.talklr.talklr_raw": [[785, "pypath-inputs-talklr-talklr-raw"]], "pypath.inputs.tcdb": [[786, "module-pypath.inputs.tcdb"]], "pypath.inputs.tcdb.tcdb_annotations": [[787, "pypath-inputs-tcdb-tcdb-annotations"]], "pypath.inputs.tcdb.tcdb_classes": [[788, "pypath-inputs-tcdb-tcdb-classes"]], "pypath.inputs.tcdb.tcdb_families": [[789, "pypath-inputs-tcdb-tcdb-families"]], "pypath.inputs.tfcensus": [[790, "module-pypath.inputs.tfcensus"]], "pypath.inputs.tfcensus.tfcensus_annotations": [[791, "pypath-inputs-tfcensus-tfcensus-annotations"]], "pypath.inputs.threedcomplex": [[792, "module-pypath.inputs.threedcomplex"]], "pypath.inputs.threedcomplex.threedcomplex_chains": [[793, "pypath-inputs-threedcomplex-threedcomplex-chains"]], "pypath.inputs.threedcomplex.threedcomplex_complexes": [[794, "pypath-inputs-threedcomplex-threedcomplex-complexes"]], "pypath.inputs.threedcomplex.threedcomplex_contacts": [[795, "pypath-inputs-threedcomplex-threedcomplex-contacts"]], "pypath.inputs.threedcomplex.threedcomplex_ddi": [[796, "pypath-inputs-threedcomplex-threedcomplex-ddi"]], "pypath.inputs.threedcomplex.threedcomplex_nresidues": [[797, "pypath-inputs-threedcomplex-threedcomplex-nresidues"]], "pypath.inputs.threedid": [[798, "module-pypath.inputs.threedid"]], "pypath.inputs.threedid.get_3did": [[799, "pypath-inputs-threedid-get-3did"]], "pypath.inputs.threedid.get_3did_ddi": [[800, "pypath-inputs-threedid-get-3did-ddi"]], "pypath.inputs.threedid.get_3did_dmi": [[801, "pypath-inputs-threedid-get-3did-dmi"]], "pypath.inputs.threedid.process_3did_dmi": [[802, "pypath-inputs-threedid-process-3did-dmi"]], "pypath.inputs.topdb": [[803, "module-pypath.inputs.topdb"]], "pypath.inputs.topdb.topdb_annotations": [[804, "pypath-inputs-topdb-topdb-annotations"]], "pypath.inputs.transmir": [[805, "module-pypath.inputs.transmir"]], "pypath.inputs.transmir.transmir_interactions": [[806, "pypath-inputs-transmir-transmir-interactions"]], "pypath.inputs.trip": [[807, "module-pypath.inputs.trip"]], "pypath.inputs.trip.take_a_trip": [[808, "pypath-inputs-trip-take-a-trip"]], "pypath.inputs.trip.trip_find_uniprot": [[809, "pypath-inputs-trip-trip-find-uniprot"]], "pypath.inputs.trip.trip_get_uniprot": [[810, "pypath-inputs-trip-trip-get-uniprot"]], "pypath.inputs.trip.trip_interactions": [[811, "pypath-inputs-trip-trip-interactions"]], "pypath.inputs.trip.trip_process": [[812, "pypath-inputs-trip-trip-process"]], "pypath.inputs.trip.trip_process_table": [[813, "pypath-inputs-trip-trip-process-table"]], "pypath.inputs.unichem": [[814, "module-pypath.inputs.unichem"]], "pypath.inputs.unichem.info": [[815, "pypath-inputs-unichem-info"]], "pypath.inputs.unichem.unichem_info": [[816, "pypath-inputs-unichem-unichem-info"]], "pypath.inputs.unichem.unichem_mapping": [[817, "pypath-inputs-unichem-unichem-mapping"]], "pypath.inputs.unichem.unichem_sources": [[818, "pypath-inputs-unichem-unichem-sources"]], "pypath.inputs.uniprot": [[819, "module-pypath.inputs.uniprot"]], "pypath.inputs.uniprot.Taxon": [[820, "pypath-inputs-uniprot-taxon"]], "pypath.inputs.uniprot.UniprotRecordHistory": [[821, "pypath-inputs-uniprot-uniprotrecordhistory"]], "pypath.inputs.uniprot.all_swissprots": [[822, "pypath-inputs-uniprot-all-swissprots"]], "pypath.inputs.uniprot.all_trembls": [[823, "pypath-inputs-uniprot-all-trembls"]], "pypath.inputs.uniprot.all_uniprots": [[824, "pypath-inputs-uniprot-all-uniprots"]], "pypath.inputs.uniprot.deleted_uniprot_genesymbol": [[825, "pypath-inputs-uniprot-deleted-uniprot-genesymbol"]], "pypath.inputs.uniprot.get_db": [[826, "pypath-inputs-uniprot-get-db"]], "pypath.inputs.uniprot.get_uniprot_sec": [[827, "pypath-inputs-uniprot-get-uniprot-sec"]], "pypath.inputs.uniprot.init_db": [[828, "pypath-inputs-uniprot-init-db"]], "pypath.inputs.uniprot.is_swissprot": [[829, "pypath-inputs-uniprot-is-swissprot"]], "pypath.inputs.uniprot.is_trembl": [[830, "pypath-inputs-uniprot-is-trembl"]], "pypath.inputs.uniprot.is_uniprot": [[831, "pypath-inputs-uniprot-is-uniprot"]], "pypath.inputs.uniprot.protein_datasheet": [[832, "pypath-inputs-uniprot-protein-datasheet"]], "pypath.inputs.uniprot.swissprot_deleted": [[833, "pypath-inputs-uniprot-swissprot-deleted"]], "pypath.inputs.uniprot.trembl_deleted": [[834, "pypath-inputs-uniprot-trembl-deleted"]], "pypath.inputs.uniprot.uniprot_data": [[835, "pypath-inputs-uniprot-uniprot-data"]], "pypath.inputs.uniprot.uniprot_deleted": [[836, "pypath-inputs-uniprot-uniprot-deleted"]], "pypath.inputs.uniprot.uniprot_families": [[837, "pypath-inputs-uniprot-uniprot-families"]], "pypath.inputs.uniprot.uniprot_history": [[838, "pypath-inputs-uniprot-uniprot-history"]], "pypath.inputs.uniprot.uniprot_history_recent_datasheet": [[839, "pypath-inputs-uniprot-uniprot-history-recent-datasheet"]], "pypath.inputs.uniprot.uniprot_keywords": [[840, "pypath-inputs-uniprot-uniprot-keywords"]], "pypath.inputs.uniprot.uniprot_locations": [[841, "pypath-inputs-uniprot-uniprot-locations"]], "pypath.inputs.uniprot.uniprot_ncbi_taxids": [[842, "pypath-inputs-uniprot-uniprot-ncbi-taxids"]], "pypath.inputs.uniprot.uniprot_ncbi_taxids_2": [[843, "pypath-inputs-uniprot-uniprot-ncbi-taxids-2"]], "pypath.inputs.uniprot.uniprot_preprocess": [[844, "pypath-inputs-uniprot-uniprot-preprocess"]], "pypath.inputs.uniprot.uniprot_recent_version": [[845, "pypath-inputs-uniprot-uniprot-recent-version"]], "pypath.inputs.uniprot.uniprot_taxonomy": [[846, "pypath-inputs-uniprot-uniprot-taxonomy"]], "pypath.inputs.uniprot.uniprot_tissues": [[847, "pypath-inputs-uniprot-uniprot-tissues"]], "pypath.inputs.uniprot.uniprot_topology": [[848, "pypath-inputs-uniprot-uniprot-topology"]], "pypath.inputs.uniprot.valid_uniprot": [[849, "pypath-inputs-uniprot-valid-uniprot"]], "pypath.inputs.wang": [[850, "module-pypath.inputs.wang"]], "pypath.inputs.wang.cui_interactions": [[851, "pypath-inputs-wang-cui-interactions"]], "pypath.inputs.wang.hsn_interactions": [[852, "pypath-inputs-wang-hsn-interactions"]], "pypath.inputs.wang.wang_annotations": [[853, "pypath-inputs-wang-wang-annotations"]], "pypath.inputs.wang.wang_interactions": [[854, "pypath-inputs-wang-wang-interactions"]], "pypath.inputs.wojtowicz2020": [[855, "module-pypath.inputs.wojtowicz2020"]], "pypath.inputs.wojtowicz2020.wojtowicz2020_interactions": [[856, "pypath-inputs-wojtowicz2020-wojtowicz2020-interactions"]], "pypath.inputs.wojtowicz2020.wojtowicz2020_raw": [[857, "pypath-inputs-wojtowicz2020-wojtowicz2020-raw"]], "pypath.inputs.zhong2015": [[858, "module-pypath.inputs.zhong2015"]], "pypath.inputs.zhong2015.zhong2015_annotations": [[859, "pypath-inputs-zhong2015-zhong2015-annotations"]], "pypath.internals": [[860, "module-pypath.internals"]], "pypath.internals.annot_formats": [[861, "module-pypath.internals.annot_formats"]], "pypath.internals.annot_formats.AnnotDef": [[862, "pypath-internals-annot-formats-annotdef"]], "pypath.internals.annot_formats.AnnotDefKey": [[863, "pypath-internals-annot-formats-annotdefkey"]], "pypath.internals.annot_formats.AnnotOp": [[864, "pypath-internals-annot-formats-annotop"]], "pypath.internals.annot_formats.AnnotationGroup": [[865, "pypath-internals-annot-formats-annotationgroup"]], "pypath.internals.input_formats": [[866, "module-pypath.internals.input_formats"]], "pypath.internals.input_formats.ArrayMapping": [[867, "pypath-internals-input-formats-arraymapping"]], "pypath.internals.input_formats.BiomartMapping": [[868, "pypath-internals-input-formats-biomartmapping"]], "pypath.internals.input_formats.FileMapping": [[869, "pypath-internals-input-formats-filemapping"]], "pypath.internals.input_formats.HmdbMapping": [[870, "pypath-internals-input-formats-hmdbmapping"]], "pypath.internals.input_formats.MappingInput": [[871, "pypath-internals-input-formats-mappinginput"]], "pypath.internals.input_formats.NetworkInput": [[872, "pypath-internals-input-formats-networkinput"]], "pypath.internals.input_formats.PickleMapping": [[873, "pypath-internals-input-formats-picklemapping"]], "pypath.internals.input_formats.ProMapping": [[874, "pypath-internals-input-formats-promapping"]], "pypath.internals.input_formats.RampMapping": [[875, "pypath-internals-input-formats-rampmapping"]], "pypath.internals.input_formats.ReadList": [[876, "pypath-internals-input-formats-readlist"]], "pypath.internals.input_formats.UnichemMapping": [[877, "pypath-internals-input-formats-unichemmapping"]], "pypath.internals.input_formats.UniprotListMapping": [[878, "pypath-internals-input-formats-uniprotlistmapping"]], "pypath.internals.input_formats.UniprotMapping": [[879, "pypath-internals-input-formats-uniprotmapping"]], "pypath.internals.intera": [[880, "module-pypath.internals.intera"]], "pypath.internals.intera.Complex": [[881, "pypath-internals-intera-complex"]], "pypath.internals.intera.Domain": [[882, "pypath-internals-intera-domain"]], "pypath.internals.intera.DomainDomain": [[883, "pypath-internals-intera-domaindomain"]], "pypath.internals.intera.DomainMotif": [[884, "pypath-internals-intera-domainmotif"]], "pypath.internals.intera.Interface": [[885, "pypath-internals-intera-interface"]], "pypath.internals.intera.Motif": [[886, "pypath-internals-intera-motif"]], "pypath.internals.intera.Ptm": [[887, "pypath-internals-intera-ptm"]], "pypath.internals.intera.Regulation": [[888, "pypath-internals-intera-regulation"]], "pypath.internals.intera.Residue": [[889, "pypath-internals-intera-residue"]], "pypath.internals.license": [[890, "module-pypath.internals.license"]], "pypath.internals.license.License": [[891, "pypath-internals-license-license"]], "pypath.internals.license.LicenseAttrib": [[892, "pypath-internals-license-licenseattrib"]], "pypath.internals.license.LicenseFeature": [[893, "pypath-internals-license-licensefeature"]], "pypath.internals.license.LicensePurpose": [[894, "pypath-internals-license-licensepurpose"]], "pypath.internals.license.LicenseSharing": [[895, "pypath-internals-license-licensesharing"]], "pypath.internals.maps": [[896, "module-pypath.internals.maps"]], "pypath.internals.refs": [[897, "module-pypath.internals.refs"]], "pypath.internals.refs.Reference": [[898, "pypath-internals-refs-reference"]], "pypath.internals.refs.get_pubmed_data": [[899, "pypath-internals-refs-get-pubmed-data"]], "pypath.internals.resource": [[900, "module-pypath.internals.resource"]], "pypath.internals.resource.AbstractResource": [[901, "pypath-internals-resource-abstractresource"]], "pypath.internals.resource.EnzymeSubstrateResource": [[902, "pypath-internals-resource-enzymesubstrateresource"]], "pypath.internals.resource.EnzymeSubstrateResourceKey": [[903, "pypath-internals-resource-enzymesubstrateresourcekey"]], "pypath.internals.resource.NetworkResource": [[904, "pypath-internals-resource-networkresource"]], "pypath.internals.resource.NetworkResourceKey": [[905, "pypath-internals-resource-networkresourcekey"]], "pypath.internals.resource.ResourceAttributes": [[906, "pypath-internals-resource-resourceattributes"]], "pypath.legacy": [[907, "module-pypath.legacy"]], "pypath.legacy.db_categories": [[908, "module-pypath.legacy.db_categories"]], "pypath.legacy.db_categories.get_categories": [[909, "pypath-legacy-db-categories-get-categories"]], "pypath.legacy.db_categories.get_category": [[910, "pypath-legacy-db-categories-get-category"]], "pypath.legacy.main": [[911, "module-pypath.legacy.main"]], "pypath.legacy.main.Direction": [[912, "pypath-legacy-main-direction"]], "pypath.legacy.main.NetworkEntityCollection": [[913, "pypath-legacy-main-networkentitycollection"]], "pypath.legacy.main.NetworkStatsRecord": [[914, "pypath-legacy-main-networkstatsrecord"]], "pypath.legacy.main.PyPath": [[915, "pypath-legacy-main-pypath"]], "Example:": [[915, "example"]], "pypath.legacy.main.get_db": [[916, "pypath-legacy-main-get-db"]], "pypath.legacy.main.init_db": [[917, "pypath-legacy-main-init-db"]], "pypath.log": [[918, "pypath-log"]], "pypath.omnipath": [[919, "module-pypath.omnipath"]], "pypath.omnipath.app": [[920, "module-pypath.omnipath.app"]], "pypath.omnipath.app.DatabaseManager": [[921, "pypath-omnipath-app-databasemanager"]], "pypath.omnipath.databases": [[922, "module-pypath.omnipath.databases"]], "pypath.omnipath.databases.build": [[923, "pypath-omnipath-databases-build"]], "pypath.omnipath.databases.class_and_param": [[924, "pypath-omnipath-databases-class-and-param"]], "pypath.omnipath.databases.define": [[925, "module-pypath.omnipath.databases.define"]], "pypath.omnipath.databases.define.DatabaseClass": [[926, "pypath-omnipath-databases-define-databaseclass"]], "pypath.omnipath.databases.define.DatabaseDefinition": [[927, "pypath-omnipath-databases-define-databasedefinition"]], "pypath.omnipath.databases.define.DatabaseDefinitionManager": [[928, "pypath-omnipath-databases-define-databasedefinitionmanager"]], "pypath.omnipath.databases.get_manager": [[929, "pypath-omnipath-databases-get-manager"]], "pypath.omnipath.databases.init_manager": [[930, "pypath-omnipath-databases-init-manager"]], "pypath.omnipath.export": [[931, "module-pypath.omnipath.export"]], "pypath.omnipath.export.Export": [[932, "pypath-omnipath-export-export"]], "pypath.omnipath.init": [[933, "pypath-omnipath-init"]], "pypath.omnipath.param": [[934, "module-pypath.omnipath.param"]], "pypath.omnipath.param.curated_ppi_resources": [[935, "pypath-omnipath-param-curated-ppi-resources"]], "pypath.omnipath.param.tf_target_resources": [[936, "pypath-omnipath-param-tf-target-resources"]], "pypath.omnipath.server": [[937, "module-pypath.omnipath.server"]], "pypath.omnipath.server.build": [[938, "module-pypath.omnipath.server.build"]], "pypath.omnipath.server.build.WebserviceTables": [[939, "pypath-omnipath-server-build-webservicetables"]], "pypath.omnipath.server.generate_about_page": [[940, "module-pypath.omnipath.server.generate_about_page"]], "pypath.omnipath.server.generate_about_page.export_licenses": [[941, "pypath-omnipath-server-generate-about-page-export-licenses"]], "pypath.omnipath.server.generate_about_page.generate_about_html": [[942, "pypath-omnipath-server-generate-about-page-generate-about-html"]], "pypath.omnipath.server.generate_about_page.resource_list_latex": [[943, "pypath-omnipath-server-generate-about-page-resource-list-latex"]], "pypath.omnipath.server.generate_about_page.write_html": [[944, "pypath-omnipath-server-generate-about-page-write-html"]], "pypath.omnipath.server.legacy": [[945, "module-pypath.omnipath.server.legacy"]], "pypath.omnipath.server.legacy.PypathServer": [[946, "pypath-omnipath-server-legacy-pypathserver"]], "pypath.omnipath.server.run": [[947, "module-pypath.omnipath.server.run"]], "pypath.omnipath.server.run.BaseServer": [[948, "pypath-omnipath-server-run-baseserver"]], "pypath.omnipath.server.run.Rest": [[949, "pypath-omnipath-server-run-rest"]], "pypath.omnipath.server.run.TableServer": [[950, "pypath-omnipath-server-run-tableserver"]], "pypath.omnipath.server.run.TwistedWebResource": [[951, "pypath-omnipath-server-run-twistedwebresource"]], "pypath.omnipath.server.run.TwistedWebSite": [[952, "pypath-omnipath-server-run-twistedwebsite"]], "pypath.omnipath.server.run.stop_server": [[953, "pypath-omnipath-server-run-stop-server"]], "pypath.omnipath.server.run.twisted_listen_tcp": [[954, "pypath-omnipath-server-run-twisted-listen-tcp"]], "pypath.omnipath.server.run.twisted_run": [[955, "pypath-omnipath-server-run-twisted-run"]], "pypath.resources": [[956, "module-pypath.resources"]], "pypath.resources.controller": [[957, "module-pypath.resources.controller"]], "pypath.resources.controller.ResourceController": [[958, "pypath-resources-controller-resourcecontroller"]], "pypath.resources.data": [[959, "module-pypath.resources.data"]], "pypath.resources.data_formats": [[960, "module-pypath.resources.data_formats"]], "pypath.resources.data_formats.ROOT": [[961, "pypath-resources-data-formats-root"]], "pypath.resources.data_formats.activity_flow": [[962, "pypath-resources-data-formats-activity-flow"]], "pypath.resources.data_formats.collectri": [[963, "pypath-resources-data-formats-collectri"]], "pypath.resources.data_formats.enzyme_substrate": [[964, "pypath-resources-data-formats-enzyme-substrate"]], "pypath.resources.data_formats.interaction": [[965, "pypath-resources-data-formats-interaction"]], "pypath.resources.data_formats.interaction_htp": [[966, "pypath-resources-data-formats-interaction-htp"]], "pypath.resources.data_formats.obsolate": [[967, "pypath-resources-data-formats-obsolate"]], "pypath.resources.data_formats.pathway_bad": [[968, "pypath-resources-data-formats-pathway-bad"]], "pypath.resources.data_formats.reaction_pc": [[969, "pypath-resources-data-formats-reaction-pc"]], "pypath.resources.data_formats.transcription_deprecated": [[970, "pypath-resources-data-formats-transcription-deprecated"]], "pypath.resources.data_formats.transcription_onebyone": [[971, "pypath-resources-data-formats-transcription-onebyone"]], "pypath.resources.descriptions": [[972, "module-pypath.resources.descriptions"]], "pypath.resources.descriptions.export_licenses": [[973, "pypath-resources-descriptions-export-licenses"]], "pypath.resources.descriptions.gen_html": [[974, "pypath-resources-descriptions-gen-html"]], "pypath.resources.descriptions.resource_list_latex": [[975, "pypath-resources-descriptions-resource-list-latex"]], "pypath.resources.descriptions.write_html": [[976, "pypath-resources-descriptions-write-html"]], "pypath.resources.get_controller": [[977, "pypath-resources-get-controller"]], "pypath.resources.licenses": [[978, "module-pypath.resources.licenses"]], "pypath.resources.licenses.Licenses": [[979, "pypath-resources-licenses-licenses"]], "pypath.resources.network": [[980, "module-pypath.resources.network"]], "pypath.resources.network.dorothea_expand_levels": [[981, "pypath-resources-network-dorothea-expand-levels"]], "pypath.resources.urls": [[982, "module-pypath.resources.urls"]], "pypath.share": [[983, "module-pypath.share"]], "pypath.share.cache": [[984, "module-pypath.share.cache"]], "pypath.share.cache.cache_item": [[985, "pypath-share-cache-cache-item"]], "pypath.share.cache.cache_path": [[986, "pypath-share-cache-cache-path"]], "pypath.share.cache.get_cachedir": [[987, "pypath-share-cache-get-cachedir"]], "pypath.share.common": [[988, "module-pypath.share.common"]], "pypath.share.common.add_to_list": [[989, "pypath-share-common-add-to-list"]], "pypath.share.common.add_to_set": [[990, "pypath-share-common-add-to-set"]], "pypath.share.common.at_least_in": [[991, "pypath-share-common-at-least-in"]], "pypath.share.common.clean_dict": [[992, "pypath-share-common-clean-dict"]], "pypath.share.common.combine_attrs": [[993, "pypath-share-common-combine-attrs"]], "pypath.share.common.compr": [[994, "pypath-share-common-compr"]], "pypath.share.common.console": [[995, "pypath-share-common-console"]], "pypath.share.common.decode": [[996, "pypath-share-common-decode"]], "pypath.share.common.del_empty": [[997, "pypath-share-common-del-empty"]], "pypath.share.common.df_memory_usage": [[998, "pypath-share-common-df-memory-usage"]], "pypath.share.common.dict_collapse_keys": [[999, "pypath-share-common-dict-collapse-keys"]], "pypath.share.common.dict_counts": [[1000, "pypath-share-common-dict-counts"]], "pypath.share.common.dict_diff": [[1001, "pypath-share-common-dict-diff"]], "pypath.share.common.dict_expand_keys": [[1002, "pypath-share-common-dict-expand-keys"]], "pypath.share.common.dict_percent": [[1003, "pypath-share-common-dict-percent"]], "pypath.share.common.dict_set_path": [[1004, "pypath-share-common-dict-set-path"]], "pypath.share.common.dict_set_percent": [[1005, "pypath-share-common-dict-set-percent"]], "pypath.share.common.dict_str": [[1006, "pypath-share-common-dict-str"]], "pypath.share.common.dict_subtotals": [[1007, "pypath-share-common-dict-subtotals"]], "pypath.share.common.dict_sym_diff": [[1008, "pypath-share-common-dict-sym-diff"]], "pypath.share.common.dict_union": [[1009, "pypath-share-common-dict-union"]], "pypath.share.common.eq": [[1010, "pypath-share-common-eq"]], "pypath.share.common.filtr": [[1011, "pypath-share-common-filtr"]], "pypath.share.common.first": [[1012, "pypath-share-common-first"]], "pypath.share.common.flat_list": [[1013, "pypath-share-common-flat-list"]], "pypath.share.common.float_or_nan": [[1014, "pypath-share-common-float-or-nan"]], "pypath.share.common.format_bytes": [[1015, "pypath-share-common-format-bytes"]], "pypath.share.common.gen_session_id": [[1016, "pypath-share-common-gen-session-id"]], "pypath.share.common.get": [[1017, "pypath-share-common-get"]], "pypath.share.common.get_args": [[1018, "pypath-share-common-get-args"]], "pypath.share.common.identity": [[1019, "pypath-share-common-identity"]], "pypath.share.common.is_float": [[1020, "pypath-share-common-is-float"]], "pypath.share.common.is_int": [[1021, "pypath-share-common-is-int"]], "pypath.share.common.is_str": [[1022, "pypath-share-common-is-str"]], "pypath.share.common.jaccard_index": [[1023, "pypath-share-common-jaccard-index"]], "pypath.share.common.join_dicts": [[1024, "pypath-share-common-join-dicts"]], "pypath.share.common.latex_table": [[1025, "pypath-share-common-latex-table"]], "pypath.share.common.log_memory_usage": [[1026, "pypath-share-common-log-memory-usage"]], "pypath.share.common.match": [[1027, "pypath-share-common-match"]], "pypath.share.common.maybe_in_dict": [[1028, "pypath-share-common-maybe-in-dict"]], "pypath.share.common.md5": [[1029, "pypath-share-common-md5"]], "pypath.share.common.merge_dicts": [[1030, "pypath-share-common-merge-dicts"]], "pypath.share.common.n_shared_elements": [[1031, "pypath-share-common-n-shared-elements"]], "pypath.share.common.n_shared_foreach": [[1032, "pypath-share-common-n-shared-foreach"]], "pypath.share.common.n_shared_total": [[1033, "pypath-share-common-n-shared-total"]], "pypath.share.common.n_shared_unique_foreach": [[1034, "pypath-share-common-n-shared-unique-foreach"]], "pypath.share.common.n_unique_elements": [[1035, "pypath-share-common-n-unique-elements"]], "pypath.share.common.n_unique_foreach": [[1036, "pypath-share-common-n-unique-foreach"]], "pypath.share.common.n_unique_total": [[1037, "pypath-share-common-n-unique-total"]], "pypath.share.common.negate": [[1038, "pypath-share-common-negate"]], "pypath.share.common.nest": [[1039, "pypath-share-common-nest"]], "pypath.share.common.none_or_len": [[1040, "pypath-share-common-none-or-len"]], "pypath.share.common.paginate": [[1041, "pypath-share-common-paginate"]], "pypath.share.common.prefix": [[1042, "pypath-share-common-prefix"]], "pypath.share.common.print_table": [[1043, "pypath-share-common-print-table"]], "pypath.share.common.python_memory_usage": [[1044, "pypath-share-common-python-memory-usage"]], "pypath.share.common.re_safe_groups": [[1045, "pypath-share-common-re-safe-groups"]], "pypath.share.common.remove_prefix": [[1046, "pypath-share-common-remove-prefix"]], "pypath.share.common.rotate": [[1047, "pypath-share-common-rotate"]], "pypath.share.common.sets_to_sorted_lists": [[1048, "pypath-share-common-sets-to-sorted-lists"]], "pypath.share.common.sfirst": [[1049, "pypath-share-common-sfirst"]], "pypath.share.common.shared_elements": [[1050, "pypath-share-common-shared-elements"]], "pypath.share.common.shared_foreach": [[1051, "pypath-share-common-shared-foreach"]], "pypath.share.common.shared_total": [[1052, "pypath-share-common-shared-total"]], "pypath.share.common.shared_unique": [[1053, "pypath-share-common-shared-unique"]], "pypath.share.common.shared_unique_foreach": [[1054, "pypath-share-common-shared-unique-foreach"]], "pypath.share.common.shared_unique_total": [[1055, "pypath-share-common-shared-unique-total"]], "pypath.share.common.silent": [[1056, "pypath-share-common-silent"]], "pypath.share.common.simpson_index": [[1057, "pypath-share-common-simpson-index"]], "pypath.share.common.simpson_index_counts": [[1058, "pypath-share-common-simpson-index-counts"]], "pypath.share.common.something": [[1059, "pypath-share-common-something"]], "pypath.share.common.sorensen_index": [[1060, "pypath-share-common-sorensen-index"]], "pypath.share.common.suffix": [[1061, "pypath-share-common-suffix"]], "pypath.share.common.sum_dicts": [[1062, "pypath-share-common-sum-dicts"]], "pypath.share.common.swap_dict": [[1063, "pypath-share-common-swap-dict"]], "pypath.share.common.swap_dict_simple": [[1064, "pypath-share-common-swap-dict-simple"]], "pypath.share.common.swap_suffix": [[1065, "pypath-share-common-swap-suffix"]], "pypath.share.common.table_add_row_numbers": [[1066, "pypath-share-common-table-add-row-numbers"]], "pypath.share.common.table_format": [[1067, "pypath-share-common-table-format"]], "pypath.share.common.table_textwrap": [[1068, "pypath-share-common-table-textwrap"]], "pypath.share.common.to_list": [[1069, "pypath-share-common-to-list"]], "pypath.share.common.to_set": [[1070, "pypath-share-common-to-set"]], "pypath.share.common.to_tuple": [[1071, "pypath-share-common-to-tuple"]], "pypath.share.common.try_bool": [[1072, "pypath-share-common-try-bool"]], "pypath.share.common.try_float": [[1073, "pypath-share-common-try-float"]], "pypath.share.common.tsv_table": [[1074, "pypath-share-common-tsv-table"]], "pypath.share.common.uniq_list": [[1075, "pypath-share-common-uniq-list"]], "pypath.share.common.uniq_list1": [[1076, "pypath-share-common-uniq-list1"]], "pypath.share.common.uniq_list2": [[1077, "pypath-share-common-uniq-list2"]], "pypath.share.common.uniq_ord_list": [[1078, "pypath-share-common-uniq-ord-list"]], "pypath.share.common.unique_elements": [[1079, "pypath-share-common-unique-elements"]], "pypath.share.common.unique_foreach": [[1080, "pypath-share-common-unique-foreach"]], "pypath.share.common.unique_list": [[1081, "pypath-share-common-unique-list"]], "pypath.share.common.unique_total": [[1082, "pypath-share-common-unique-total"]], "pypath.share.common.upper0": [[1083, "pypath-share-common-upper0"]], "pypath.share.common.values": [[1084, "pypath-share-common-values"]], "pypath.share.common.wcl": [[1085, "pypath-share-common-wcl"]], "pypath.share.common.wrap_truncate": [[1086, "pypath-share-common-wrap-truncate"]], "pypath.share.constants": [[1087, "module-pypath.share.constants"]], "pypath.share.curl": [[1088, "module-pypath.share.curl"]], "pypath.share.curl.Curl": [[1089, "pypath-share-curl-curl"]], "pypath.share.curl.FileOpener": [[1090, "pypath-share-curl-fileopener"]], "pypath.share.curl.RemoteFile": [[1091, "pypath-share-curl-remotefile"]], "pypath.share.curl.cache_delete_off": [[1092, "pypath-share-curl-cache-delete-off"]], "pypath.share.curl.cache_delete_on": [[1093, "pypath-share-curl-cache-delete-on"]], "pypath.share.curl.cache_off": [[1094, "pypath-share-curl-cache-off"]], "pypath.share.curl.cache_on": [[1095, "pypath-share-curl-cache-on"]], "pypath.share.curl.cache_print_off": [[1096, "pypath-share-curl-cache-print-off"]], "pypath.share.curl.cache_print_on": [[1097, "pypath-share-curl-cache-print-on"]], "pypath.share.curl.debug_off": [[1098, "pypath-share-curl-debug-off"]], "pypath.share.curl.debug_on": [[1099, "pypath-share-curl-debug-on"]], "pypath.share.curl.dryrun_off": [[1100, "pypath-share-curl-dryrun-off"]], "pypath.share.curl.dryrun_on": [[1101, "pypath-share-curl-dryrun-on"]], "pypath.share.curl.is_url": [[1102, "pypath-share-curl-is-url"]], "pypath.share.curl.preserve_off": [[1103, "pypath-share-curl-preserve-off"]], "pypath.share.curl.preserve_on": [[1104, "pypath-share-curl-preserve-on"]], "pypath.share.log": [[1105, "module-pypath.share.log"]], "pypath.share.log.Logger": [[1106, "pypath-share-log-logger"]], "pypath.share.log.new_logger": [[1107, "pypath-share-log-new-logger"]], "pypath.share.progress": [[1108, "module-pypath.share.progress"]], "pypath.share.progress.Progress": [[1109, "pypath-share-progress-progress"]], "pypath.share.session": [[1110, "module-pypath.share.session"]], "pypath.share.session.Logger": [[1111, "pypath-share-session-logger"]], "pypath.share.session.Session": [[1112, "pypath-share-session-session"]], "pypath.share.session.get_log": [[1113, "pypath-share-session-get-log"]], "pypath.share.session.get_session": [[1114, "pypath-share-session-get-session"]], "pypath.share.session.new_session": [[1115, "pypath-share-session-new-session"]], "pypath.share.settings": [[1116, "module-pypath.share.settings"]], "pypath.share.settings.Settings": [[1117, "pypath-share-settings-settings"]], "pypath.share.settings.context": [[1118, "pypath-share-settings-context"]], "pypath.share.settings.get": [[1119, "pypath-share-settings-get"]], "pypath.share.settings.setup": [[1120, "pypath-share-settings-setup"]], "pypath.utils": [[1121, "module-pypath.utils"]], "pypath.utils.go": [[1122, "module-pypath.utils.go"]], "pypath.utils.go.GOAnnotation": [[1123, "pypath-utils-go-goannotation"]], "pypath.utils.go.GOCustomAnnotation": [[1124, "pypath-utils-go-gocustomannotation"]], "pypath.utils.go.GeneOntology": [[1125, "pypath-utils-go-geneontology"]], "pypath.utils.go.annotate": [[1126, "pypath-utils-go-annotate"]], "pypath.utils.go.get_db": [[1127, "pypath-utils-go-get-db"]], "pypath.utils.go.init_db": [[1128, "pypath-utils-go-init-db"]], "pypath.utils.go.load_go": [[1129, "pypath-utils-go-load-go"]], "pypath.utils.homology": [[1130, "module-pypath.utils.homology"]], "pypath.utils.homology.HomologyManager": [[1131, "pypath-utils-homology-homologymanager"]], "pypath.utils.homology.Ortholog": [[1132, "pypath-utils-homology-ortholog"]], "pypath.utils.homology.ProteinHomology": [[1133, "pypath-utils-homology-proteinhomology"]], "pypath.utils.homology.Proteomes": [[1134, "pypath-utils-homology-proteomes"]], "pypath.utils.homology.PtmHomology": [[1135, "pypath-utils-homology-ptmhomology"]], "pypath.utils.homology.SequenceContainer": [[1136, "pypath-utils-homology-sequencecontainer"]], "pypath.utils.homology.get_df": [[1137, "pypath-utils-homology-get-df"]], "pypath.utils.homology.get_dict": [[1138, "pypath-utils-homology-get-dict"]], "pypath.utils.homology.get_manager": [[1139, "pypath-utils-homology-get-manager"]], "pypath.utils.homology.init": [[1140, "pypath-utils-homology-init"]], "pypath.utils.homology.translate": [[1141, "pypath-utils-homology-translate"]], "pypath.utils.homology.translate_df": [[1142, "pypath-utils-homology-translate-df"]], "pypath.utils.mapping": [[1143, "module-pypath.utils.mapping"]], "pypath.utils.mapping.MapReader": [[1144, "pypath-utils-mapping-mapreader"]], "pypath.utils.mapping.Mapper": [[1145, "pypath-utils-mapping-mapper"]], "pypath.utils.mapping.MappingTable": [[1146, "pypath-utils-mapping-mappingtable"]], "pypath.utils.mapping.MappingTableKey": [[1147, "pypath-utils-mapping-mappingtablekey"]], "pypath.utils.mapping.UNIPROT_ID_TYPES": [[1148, "pypath-utils-mapping-uniprot-id-types"]], "pypath.utils.mapping.get_mapper": [[1149, "pypath-utils-mapping-get-mapper"]], "pypath.utils.mapping.guess_type": [[1150, "pypath-utils-mapping-guess-type"]], "pypath.utils.mapping.id_from_label": [[1151, "pypath-utils-mapping-id-from-label"]], "pypath.utils.mapping.id_from_label0": [[1152, "pypath-utils-mapping-id-from-label0"]], "pypath.utils.mapping.init": [[1153, "pypath-utils-mapping-init"]], "pypath.utils.mapping.label": [[1154, "pypath-utils-mapping-label"]], "pypath.utils.mapping.map_name": [[1155, "pypath-utils-mapping-map-name"]], "pypath.utils.mapping.map_name0": [[1156, "pypath-utils-mapping-map-name0"]], "pypath.utils.mapping.map_names": [[1157, "pypath-utils-mapping-map-names"]], "pypath.utils.pdb": [[1158, "module-pypath.utils.pdb"]], "pypath.utils.pdb.Residue": [[1159, "pypath-utils-pdb-residue"]], "pypath.utils.pdb.ResidueMapper": [[1160, "pypath-utils-pdb-residuemapper"]], "pypath.utils.pdb.Segment": [[1161, "pypath-utils-pdb-segment"]], "pypath.utils.pdb.residue_pdb": [[1162, "pypath-utils-pdb-residue-pdb"]], "pypath.utils.proteomicsdb": [[1163, "module-pypath.utils.proteomicsdb"]], "pypath.utils.proteomicsdb.ProteomicsDB": [[1164, "pypath-utils-proteomicsdb-proteomicsdb"]], "pypath.utils.pyreact": [[1165, "module-pypath.utils.pyreact"]], "pypath.utils.pyreact.AttributeHandler": [[1166, "pypath-utils-pyreact-attributehandler"]], "pypath.utils.pyreact.BioPaxReader": [[1167, "pypath-utils-pyreact-biopaxreader"]], "pypath.utils.pyreact.Complex": [[1168, "pypath-utils-pyreact-complex"]], "pypath.utils.pyreact.ComplexVariations": [[1169, "pypath-utils-pyreact-complexvariations"]], "pypath.utils.pyreact.Control": [[1170, "pypath-utils-pyreact-control"]], "pypath.utils.pyreact.Entity": [[1171, "pypath-utils-pyreact-entity"]], "pypath.utils.pyreact.EntitySet": [[1172, "pypath-utils-pyreact-entityset"]], "pypath.utils.pyreact.Intersecting": [[1173, "pypath-utils-pyreact-intersecting"]], "pypath.utils.pyreact.Protein": [[1174, "pypath-utils-pyreact-protein"]], "pypath.utils.pyreact.ProteinFamily": [[1175, "pypath-utils-pyreact-proteinfamily"]], "pypath.utils.pyreact.PyReact": [[1176, "pypath-utils-pyreact-pyreact"]], "pypath.utils.pyreact.Reaction": [[1177, "pypath-utils-pyreact-reaction"]], "pypath.utils.pyreact.ReactionSide": [[1178, "pypath-utils-pyreact-reactionside"]], "pypath.utils.pyreact.Reference": [[1179, "pypath-utils-pyreact-reference"]], "pypath.utils.reflists": [[1180, "module-pypath.utils.reflists"]], "pypath.utils.reflists.ReferenceListManager": [[1181, "pypath-utils-reflists-referencelistmanager"]], "pypath.utils.reflists.check": [[1182, "pypath-utils-reflists-check"]], "pypath.utils.reflists.get_manager": [[1183, "pypath-utils-reflists-get-manager"]], "pypath.utils.reflists.get_reflist": [[1184, "pypath-utils-reflists-get-reflist"]], "pypath.utils.reflists.init": [[1185, "pypath-utils-reflists-init"]], "pypath.utils.reflists.is_not": [[1186, "pypath-utils-reflists-is-not"]], "pypath.utils.reflists.select": [[1187, "pypath-utils-reflists-select"]], "pypath.utils.residues": [[1188, "module-pypath.utils.residues"]], "pypath.utils.residues.ResidueMapper": [[1189, "pypath-utils-residues-residuemapper"]], "pypath.utils.seq": [[1190, "module-pypath.utils.seq"]], "pypath.utils.seq.Pfam": [[1191, "pypath-utils-seq-pfam"]], "pypath.utils.seq.Resource": [[1192, "pypath-utils-seq-resource"]], "pypath.utils.seq.Seq": [[1193, "pypath-utils-seq-seq"]], "pypath.utils.seq.get_isoforms": [[1194, "pypath-utils-seq-get-isoforms"]], "pypath.utils.seq.read_fasta": [[1195, "pypath-utils-seq-read-fasta"]], "pypath.utils.seq.swissprot_seq": [[1196, "pypath-utils-seq-swissprot-seq"]], "pypath.utils.taxonomy": [[1197, "module-pypath.utils.taxonomy"]], "pypath.utils.taxonomy.ensure_common_name": [[1198, "pypath-utils-taxonomy-ensure-common-name"]], "pypath.utils.taxonomy.ensure_ensembl_name": [[1199, "pypath-utils-taxonomy-ensure-ensembl-name"]], "pypath.utils.taxonomy.ensure_latin_name": [[1200, "pypath-utils-taxonomy-ensure-latin-name"]], "pypath.utils.taxonomy.ensure_ncbi_tax_id": [[1201, "pypath-utils-taxonomy-ensure-ncbi-tax-id"]], "pypath.utils.taxonomy.get_db": [[1202, "pypath-utils-taxonomy-get-db"]], "pypath.utils.taxonomy.init_db": [[1203, "pypath-utils-taxonomy-init-db"]], "pypath.utils.taxonomy.short_latin_names": [[1204, "pypath-utils-taxonomy-short-latin-names"]], "pypath.utils.taxonomy.shorten_latin_name": [[1205, "pypath-utils-taxonomy-shorten-latin-name"]], "pypath.utils.taxonomy.taxid_from_common_name": [[1206, "pypath-utils-taxonomy-taxid-from-common-name"]], "pypath.utils.taxonomy.taxid_from_dbptm_taxon_name": [[1207, "pypath-utils-taxonomy-taxid-from-dbptm-taxon-name"]], "pypath.utils.taxonomy.taxid_from_ensembl_name": [[1208, "pypath-utils-taxonomy-taxid-from-ensembl-name"]], "pypath.utils.taxonomy.taxid_from_latin_name": [[1209, "pypath-utils-taxonomy-taxid-from-latin-name"]], "pypath.utils.taxonomy.taxid_from_nonstandard": [[1210, "pypath-utils-taxonomy-taxid-from-nonstandard"]], "pypath.utils.taxonomy.uniprot_taxid": [[1211, "pypath-utils-taxonomy-uniprot-taxid"]], "pypath.utils.unichem": [[1212, "module-pypath.utils.unichem"]], "pypath.utils.unichem.Unichem": [[1213, "pypath-utils-unichem-unichem"]], "pypath.utils.uniprot": [[1214, "module-pypath.utils.uniprot"]], "pypath.utils.uniprot.UniprotProtein": [[1215, "pypath-utils-uniprot-uniprotprotein"]], "pypath.utils.uniprot.ac": [[1216, "pypath-utils-uniprot-ac"]], "pypath.utils.uniprot.activity_regulation": [[1217, "pypath-utils-uniprot-activity-regulation"]], "pypath.utils.uniprot.activity_regulation_with_xrefs": [[1218, "pypath-utils-uniprot-activity-regulation-with-xrefs"]], "pypath.utils.uniprot.alternative_products": [[1219, "pypath-utils-uniprot-alternative-products"]], "pypath.utils.uniprot.alternative_products_with_xrefs": [[1220, "pypath-utils-uniprot-alternative-products-with-xrefs"]], "pypath.utils.uniprot.browse": [[1221, "pypath-utils-uniprot-browse"]], "pypath.utils.uniprot.catalytic_activity": [[1222, "pypath-utils-uniprot-catalytic-activity"]], "pypath.utils.uniprot.catalytic_activity_with_xrefs": [[1223, "pypath-utils-uniprot-catalytic-activity-with-xrefs"]], "pypath.utils.uniprot.collect": [[1224, "pypath-utils-uniprot-collect"]], "pypath.utils.uniprot.databases": [[1225, "pypath-utils-uniprot-databases"]], "pypath.utils.uniprot.disease": [[1226, "pypath-utils-uniprot-disease"]], "pypath.utils.uniprot.disease_with_xrefs": [[1227, "pypath-utils-uniprot-disease-with-xrefs"]], "pypath.utils.uniprot.ec": [[1228, "pypath-utils-uniprot-ec"]], "pypath.utils.uniprot.features_table": [[1229, "pypath-utils-uniprot-features-table"]], "pypath.utils.uniprot.full_name": [[1230, "pypath-utils-uniprot-full-name"]], "pypath.utils.uniprot.function": [[1231, "pypath-utils-uniprot-function"]], "pypath.utils.uniprot.function_genecards": [[1232, "pypath-utils-uniprot-function-genecards"]], "pypath.utils.uniprot.function_or_genecards": [[1233, "pypath-utils-uniprot-function-or-genecards"]], "pypath.utils.uniprot.function_with_genecards": [[1234, "pypath-utils-uniprot-function-with-genecards"]], "pypath.utils.uniprot.function_with_xrefs": [[1235, "pypath-utils-uniprot-function-with-xrefs"]], "pypath.utils.uniprot.genesymbol": [[1236, "pypath-utils-uniprot-genesymbol"]], "pypath.utils.uniprot.has_tag": [[1237, "pypath-utils-uniprot-has-tag"]], "pypath.utils.uniprot.id": [[1238, "pypath-utils-uniprot-id"]], "pypath.utils.uniprot.info": [[1239, "pypath-utils-uniprot-info"]], "pypath.utils.uniprot.info_section": [[1240, "pypath-utils-uniprot-info-section"]], "pypath.utils.uniprot.interaction": [[1241, "pypath-utils-uniprot-interaction"]], "pypath.utils.uniprot.interaction_with_xrefs": [[1242, "pypath-utils-uniprot-interaction-with-xrefs"]], "pypath.utils.uniprot.is_reviewed": [[1243, "pypath-utils-uniprot-is-reviewed"]], "pypath.utils.uniprot.itertag": [[1244, "pypath-utils-uniprot-itertag"]], "pypath.utils.uniprot.keywords": [[1245, "pypath-utils-uniprot-keywords"]], "pypath.utils.uniprot.keywords_with_xrefs": [[1246, "pypath-utils-uniprot-keywords-with-xrefs"]], "pypath.utils.uniprot.length": [[1247, "pypath-utils-uniprot-length"]], "pypath.utils.uniprot.lengths": [[1248, "pypath-utils-uniprot-lengths"]], "pypath.utils.uniprot.load": [[1249, "pypath-utils-uniprot-load"]], "pypath.utils.uniprot.organism": [[1250, "pypath-utils-uniprot-organism"]], "pypath.utils.uniprot.print_features": [[1251, "pypath-utils-uniprot-print-features"]], "pypath.utils.uniprot.ptm": [[1252, "pypath-utils-uniprot-ptm"]], "pypath.utils.uniprot.ptm_with_xrefs": [[1253, "pypath-utils-uniprot-ptm-with-xrefs"]], "pypath.utils.uniprot.query": [[1254, "pypath-utils-uniprot-query"]], "pypath.utils.uniprot.reload": [[1255, "pypath-utils-uniprot-reload"]], "pypath.utils.uniprot.remove_xrefs": [[1256, "pypath-utils-uniprot-remove-xrefs"]], "pypath.utils.uniprot.sequence": [[1257, "pypath-utils-uniprot-sequence"]], "pypath.utils.uniprot.sequence_caution": [[1258, "pypath-utils-uniprot-sequence-caution"]], "pypath.utils.uniprot.sequence_caution_with_xrefs": [[1259, "pypath-utils-uniprot-sequence-caution-with-xrefs"]], "pypath.utils.uniprot.similarity": [[1260, "pypath-utils-uniprot-similarity"]], "pypath.utils.uniprot.similarity_with_xrefs": [[1261, "pypath-utils-uniprot-similarity-with-xrefs"]], "pypath.utils.uniprot.subcellular_location": [[1262, "pypath-utils-uniprot-subcellular-location"]], "pypath.utils.uniprot.subcellular_location_with_xrefs": [[1263, "pypath-utils-uniprot-subcellular-location-with-xrefs"]], "pypath.utils.uniprot.subunit": [[1264, "pypath-utils-uniprot-subunit"]], "pypath.utils.uniprot.subunit_with_xrefs": [[1265, "pypath-utils-uniprot-subunit-with-xrefs"]], "pypath.utils.uniprot.tissue_specificity": [[1266, "pypath-utils-uniprot-tissue-specificity"]], "pypath.utils.uniprot.tissue_specificity_with_xrefs": [[1267, "pypath-utils-uniprot-tissue-specificity-with-xrefs"]], "pypath.utils.uniprot.update_databases": [[1268, "pypath-utils-uniprot-update-databases"]], "pypath.utils.uniprot.update_info": [[1269, "pypath-utils-uniprot-update-info"]], "pypath.utils.uniprot.web_resource": [[1270, "pypath-utils-uniprot-web-resource"]], "pypath.utils.uniprot.web_resource_with_xrefs": [[1271, "pypath-utils-uniprot-web-resource-with-xrefs"]], "pypath.utils.uniprot.weight": [[1272, "pypath-utils-uniprot-weight"]], "pypath.utils.uniprot.weights": [[1273, "pypath-utils-uniprot-weights"]], "pypath.visual": [[1274, "module-pypath.visual"]], "pypath.visual.drawing": [[1275, "module-pypath.visual.drawing"]], "pypath.visual.drawing.InterSet": [[1276, "pypath-visual-drawing-interset"]], "pypath.visual.drawing.Plot": [[1277, "pypath-visual-drawing-plot"]], "pypath.visual.igraph_drawing": [[1278, "module-pypath.visual.igraph_drawing"]], "pypath.visual.igraph_drawing.AbstractCairoGraphDrawer": [[1279, "pypath-visual-igraph-drawing-abstractcairographdrawer"]], "pypath.visual.igraph_drawing.ArrowEdgeDrawer": [[1280, "pypath-visual-igraph-drawing-arrowedgedrawer"]], "pypath.visual.igraph_drawing.DefaultGraphDrawerFFsupport": [[1281, "pypath-visual-igraph-drawing-defaultgraphdrawerffsupport"]], "pypath.visual.igraph_drawing.DefaultVertexDrawer": [[1282, "pypath-visual-igraph-drawing-defaultvertexdrawer"]], "pypath.visual.igraph_drawing.TextDrawer": [[1283, "pypath-visual-igraph-drawing-textdrawer"]], "pypath.visual.igraph_drawing.edge": [[1284, "module-pypath.visual.igraph_drawing.edge"]], "pypath.visual.igraph_drawing.edge.AbstractEdgeDrawer": [[1285, "pypath-visual-igraph-drawing-edge-abstractedgedrawer"]], "pypath.visual.igraph_drawing.edge.AlphaVaryingEdgeDrawer": [[1286, "pypath-visual-igraph-drawing-edge-alphavaryingedgedrawer"]], "pypath.visual.igraph_drawing.edge.ArrowEdgeDrawer": [[1287, "pypath-visual-igraph-drawing-edge-arrowedgedrawer"]], "pypath.visual.igraph_drawing.edge.DarkToLightEdgeDrawer": [[1288, "pypath-visual-igraph-drawing-edge-darktolightedgedrawer"]], "pypath.visual.igraph_drawing.edge.LightToDarkEdgeDrawer": [[1289, "pypath-visual-igraph-drawing-edge-lighttodarkedgedrawer"]], "pypath.visual.igraph_drawing.edge.TaperedEdgeDrawer": [[1290, "pypath-visual-igraph-drawing-edge-taperededgedrawer"]], "pypath.visual.igraph_drawing.vertex": [[1291, "module-pypath.visual.igraph_drawing.vertex"]], "pypath.visual.igraph_drawing.vertex.AbstractCairoDrawer": [[1292, "pypath-visual-igraph-drawing-vertex-abstractcairodrawer"]], "pypath.visual.igraph_drawing.vertex.AbstractCairoVertexDrawer": [[1293, "pypath-visual-igraph-drawing-vertex-abstractcairovertexdrawer"]], "pypath.visual.igraph_drawing.vertex.AbstractDrawer": [[1294, "pypath-visual-igraph-drawing-vertex-abstractdrawer"]], "pypath.visual.igraph_drawing.vertex.AbstractVertexDrawer": [[1295, "pypath-visual-igraph-drawing-vertex-abstractvertexdrawer"]], "pypath.visual.igraph_drawing.vertex.DefaultVertexDrawer": [[1296, "pypath-visual-igraph-drawing-vertex-defaultvertexdrawer"]], "pypath.visual.plot": [[1297, "module-pypath.visual.plot"]], "pypath.visual.plot.Barplot": [[1298, "pypath-visual-plot-barplot"]], "pypath.visual.plot.BarplotsGrid": [[1299, "pypath-visual-plot-barplotsgrid"]], "pypath.visual.plot.CurationPlot": [[1300, "pypath-visual-plot-curationplot"]], "pypath.visual.plot.Dendrogram": [[1301, "pypath-visual-plot-dendrogram"]], "pypath.visual.plot.Histogram": [[1302, "pypath-visual-plot-histogram"]], "pypath.visual.plot.HistoryTree": [[1303, "pypath-visual-plot-historytree"]], "pypath.visual.plot.HtpCharacteristics": [[1304, "pypath-visual-plot-htpcharacteristics"]], "pypath.visual.plot.MultiBarplot": [[1305, "pypath-visual-plot-multibarplot"]], "pypath.visual.plot.Plot": [[1306, "pypath-visual-plot-plot"]], "pypath.visual.plot.RefsComposite": [[1307, "pypath-visual-plot-refscomposite"]], "pypath.visual.plot.ScatterPlus": [[1308, "pypath-visual-plot-scatterplus"]], "pypath.visual.plot.SimilarityGraph": [[1309, "pypath-visual-plot-similaritygraph"]], "pypath.visual.plot.StackedBarplot": [[1310, "pypath-visual-plot-stackedbarplot"]], "pypath.visual.plot.boxplot": [[1311, "pypath-visual-plot-boxplot"]], "pypath.visual.plot.get_moves": [[1312, "pypath-visual-plot-get-moves"]], "pypath.visual.plot.is_opentype_cff_font": [[1313, "pypath-visual-plot-is-opentype-cff-font"]], "pypath.visual.plot.move_labels": [[1314, "pypath-visual-plot-move-labels"]], "pypath.visual.plot.overlap": [[1315, "pypath-visual-plot-overlap"]], "pypath.visual.plot.rotate_labels": [[1316, "pypath-visual-plot-rotate-labels"]], "Contents": [[1317, "contents"]], "Welcome to pypath!": [[1318, "welcome-to-pypath"]], "OmniPath": [[1318, "omnipath"]], "Do you need pypath?": [[1318, "do-you-need-pypath"]], "Installation": [[1318, "installation"]], "Docs": [[1318, "docs"]], "Get help": [[1318, "get-help"]], "Features": [[1318, "features"]], "Integrated databases": [[1318, "integrated-databases"]], "Database management": [[1318, "database-management"]], "Further modules in pypath": [[1318, "further-modules-in-pypath"]], "ID conversion": [[1318, "id-conversion"]], "Homology translation": [[1318, "homology-translation"], [1319, "Homology-translation"]], "FAQ": [[1318, "faq"]], "Contact": [[1318, "contact"]], "Impressum": [[1318, "impressum"]], "History and releases": [[1318, "history-and-releases"]], "The pypath book": [[1319, "The-pypath-book"]], "Introduction": [[1319, "Introduction"]], "Build, load and save databases": [[1319, "Build,-load-and-save-databases"]], "The OmniPath app": [[1319, "The-OmniPath-app"]], "Built-in database definitions": [[1319, "Built-in-database-definitions"]], "Networks": [[1319, "Networks"]], "Strictly literature curated network": [[1319, "Strictly-literature-curated-network"]], "The OmniPath network with extra activity flow, enzyme-substrate and ligand-receptor interactions": [[1319, "The-OmniPath-network-with-extra-activity-flow,-enzyme-substrate-and-ligand-receptor-interactions"]], "Transcriptional regulation network from DoRothEA and other resources": [[1319, "Transcriptional-regulation-network-from-DoRothEA-and-other-resources"]], "Literature curated miRNA post-transcriptional regulation network": [[1319, "Literature-curated-miRNA-post-transcriptional-regulation-network"]], "Transcriptional regulation of miRNA": [[1319, "Transcriptional-regulation-of-miRNA"]], "lncRNA-mRNA interactions": [[1319, "lncRNA-mRNA-interactions"]], "Small molecule-protein interactions": [[1319, "Small-molecule-protein-interactions"]], "Enzyme-substrate relationships": [[1319, "Enzyme-substrate-relationships"]], "Protein complexes": [[1319, "Protein-complexes"], [1319, "id2"]], "Annotations": [[1319, "Annotations"], [1319, "id1"], [1322, "annotations"]], "Inter-cellular communication roles": [[1319, "Inter-cellular-communication-roles"]], "Data directly from the original resources": [[1319, "Data-directly-from-the-original-resources"]], "Interesting resources": [[1319, "Interesting-resources"]], "RaMP": [[1319, "RaMP"]], "TL;DR": [[1319, "TL;DR"]], "HMDB (Human Metabolome Database)": [[1319, "HMDB-(Human-Metabolome-Database)"]], "Direct access to HMDB data": [[1319, "Direct-access-to-HMDB-data"]], "Higher level access to HMDB data": [[1319, "Higher-level-access-to-HMDB-data"]], "ID translation with HMDB": [[1319, "ID-translation-with-HMDB"]], "Download management": [[1319, "Download-management"]], "Cache management and customization": [[1319, "Cache-management-and-customization"]], "Download failures": [[1319, "Download-failures"]], "Corrupted cache content": [[1319, "Corrupted-cache-content"]], "Network communication issues: look into the curl debug log": [[1319, "Network-communication-issues:-look-into-the-curl-debug-log"]], "Timeouts": [[1319, "Timeouts"]], "Access and inspect the Curl object": [[1319, "Access-and-inspect-the-Curl-object"]], "Is it failing only for you?": [[1319, "Is-it-failing-only-for-you?"]], "Read the log": [[1319, "Read-the-log"]], "TLS (SSL, HTTPS) errors": [[1319, "TLS-(SSL,-HTTPS)-errors"]], "Resources": [[1319, "Resources"]], "Licenses": [[1319, "Licenses"]], "Example: build a network for commercial use": [[1319, "Example:-build-a-network-for-commercial-use"]], "Resource information": [[1319, "Resource-information"]], "Resource definitions for a certain database or dataset": [[1319, "Resource-definitions-for-a-certain-database-or-dataset"]], "Building networks": [[1319, "Building-networks"]], "Which network datasets are pre-defined in pypath?": [[1319, "Which-network-datasets-are-pre-defined-in-pypath?"]], "The Network object": [[1319, "The-Network-object"]], "Network in pandas.DataFrame": [[1319, "Network-in-pandas.DataFrame"]], "Self interactions (loop edges) in the network": [[1319, "Self-interactions-(loop-edges)-in-the-network"]], "Translating identifiers": [[1319, "Translating-identifiers"]], "Pre-defined ID translation tables": [[1319, "Pre-defined-ID-translation-tables"]], "Homology translation tables as dictionaries": [[1319, "Homology-translation-tables-as-dictionaries"]], "Homology translation data frames": [[1319, "Homology-translation-data-frames"]], "Taxonomy": [[1319, "Taxonomy"]], "Translating to NCBI Taxonomy, scientific names and common names": [[1319, "Translating-to-NCBI-Taxonomy,-scientific-names-and-common-names"]], "Organism from UniProt ID": [[1319, "Organism-from-UniProt-ID"]], "UniProt": [[1319, "UniProt"]], "The UniProt input module": [[1319, "The-UniProt-input-module"]], "All UniProt IDs for one organism": [[1319, "All-UniProt-IDs-for-one-organism"]], "UniProt ID format validation": [[1319, "UniProt-ID-format-validation"]], "UniProt ID validation": [[1319, "UniProt-ID-validation"]], "Single UniProt protein datasheet": [[1319, "Single-UniProt-protein-datasheet"]], "History of UniProt records": [[1319, "History-of-UniProt-records"]], "UniProt legacy API": [[1319, "UniProt-legacy-API"]], "Processed UniProt annotations": [[1319, "Processed-UniProt-annotations"]], "The UniProt utils module": [[1319, "The-UniProt-utils-module"]], "Datasheets": [[1319, "Datasheets"]], "Tables": [[1319, "Tables"]], "Sanitizing UniProt IDs": [[1319, "Sanitizing-UniProt-IDs"]], "Enzyme-substrate interactions": [[1319, "Enzyme-substrate-interactions"], [1322, "enzyme-substrate-interactions"]], "Enzyme-substrate objects": [[1319, "Enzyme-substrate-objects"]], "Enzyme-substrate data frame": [[1319, "Enzyme-substrate-data-frame"]], "Protein sequences": [[1319, "Protein-sequences"]], "Load a single annotation resource": [[1319, "Load-a-single-annotation-resource"]], "Load the full annotations database by the database manager": [[1319, "Load-the-full-annotations-database-by-the-database-manager"]], "Load only selected annotations": [[1319, "Load-only-selected-annotations"]], "Data frames of annotations": [[1319, "Data-frames-of-annotations"]], "Inter-cellular signaling roles": [[1319, "Inter-cellular-signaling-roles"]], "Build an intercellular communication network": [[1319, "Build-an-intercellular-communication-network"]], "Quantitative overview of intercell annotations": [[1319, "Quantitative-overview-of-intercell-annotations"]], "Intercell database as data frame": [[1319, "Intercell-database-as-data-frame"]], "Browse intercell categories": [[1319, "Browse-intercell-categories"]], "Gene Ontology": [[1319, "Gene-Ontology"]], "Protein complex objects": [[1319, "Protein-complex-objects"]], "Protein complex data frame": [[1319, "Protein-complex-data-frame"]], "Saving datasets as pickles": [[1319, "Saving-datasets-as-pickles"]], "Log messages and sessions": [[1319, "Log-messages-and-sessions"]], "Basic info about the session": [[1319, "Basic-info-about-the-session"]], "Read the log file": [[1319, "Read-the-log-file"]], "Logging to the console": [[1319, "Logging-to-the-console"]], "Disable logging": [[1319, "Disable-logging"]], "Write to the log": [[1319, "Write-to-the-log"]], "Sending a single message": [[1319, "Sending-a-single-message"]], "Connect a module or class to the pypath logger": [[1319, "Connect-a-module-or-class-to-the-pypath-logger"]], "BEL export": [[1319, "BEL-export"]], "CellPhoneDB export": [[1319, "CellPhoneDB-export"]], "The legacy igraph-based network object": [[1319, "The-legacy-igraph-based-network-object"]], "I just want a network quickly and play around with pypath": [[1319, "I-just-want-a-network-quickly-and-play-around-with-pypath"]], "How do I build networks from any data with pypath?": [[1319, "How-do-I-build-networks-from-any-data-with-pypath?"]], "Defining input formats": [[1319, "Defining-input-formats"]], "Creating PyPath object and loading the 2 test files": [[1319, "Creating-PyPath-object-and-loading-the-2-test-files"]], "Structure of the legacy network object": [[1319, "Structure-of-the-legacy-network-object"]], "Directions and signs": [[1319, "Directions-and-signs"]], "Accessing nodes in the network": [[1319, "Accessing-nodes-in-the-network"]], "Querying relationships with our without causality": [[1319, "Querying-relationships-with-our-without-causality"]], "Accessing edges by identifiers": [[1319, "Accessing-edges-by-identifiers"]], "Literature references": [[1319, "Literature-references"]], "Plotting the network with igraph": [[1319, "Plotting-the-network-with-igraph"]], "Reference": [[1320, "reference"]], "How to navigate the reference?": [[1320, "how-to-navigate-the-reference"]], "Release history": [[1321, "release-history"]], "0.1.0": [[1321, "id1"]], "0.2.0": [[1321, "id2"]], "0.3.0": [[1321, "id3"]], "0.4.0": [[1321, "id4"]], "0.5.0": [[1321, "id5"]], "0.5.32": [[1321, "id6"]], "0.6.31": [[1321, "id7"]], "0.7.0": [[1321, "id8"]], "0.7.74": [[1321, "id9"]], "0.7.93": [[1321, "id10"]], "0.7.110": [[1321, "id11"]], "0.8": [[1321, "id12"]], "0.9": [[1321, "id13"]], "0.10.0": [[1321, "id14"]], "0.11.0": [[1321, "id15"]], "0.12.0": [[1321, "id16"]], "0.13.0": [[1321, "id17"]], "0.14.0": [[1321, "id18"]], "Upcoming": [[1321, "upcoming"]], "Webservice": [[1322, "webservice"]], "Query types": [[1322, "query-types"]], "Interaction datasets": [[1322, "interaction-datasets"]], "Mouse and rat": [[1322, "mouse-and-rat"]], "Examples": [[1322, "examples"]], "Molecular interaction network": [[1322, "molecular-interaction-network"]], "Molecular complexes": [[1322, "molecular-complexes"]], "Roles in inter-cellular communication": [[1322, "roles-in-inter-cellular-communication"]], "Exploring possible parameters": [[1322, "exploring-possible-parameters"]]}, "indexentries": {"module": [[0, "module-pypath"], [1, "module-pypath.core"], [2, "module-pypath.core.annot"], [95, "module-pypath.core.attrs"], [97, "module-pypath.core.common"], [99, "module-pypath.core.complex"], [121, "module-pypath.core.entity"], [125, "module-pypath.core.enz_sub"], [131, "module-pypath.core.evidence"], [134, "module-pypath.core.interaction"], [138, "module-pypath.core.intercell"], [142, "module-pypath.core.intercell_annot"], [144, "module-pypath.core.network"], [150, "module-pypath.data"], [153, "module-pypath.inputs"], [154, "module-pypath.inputs.abs"], [156, "module-pypath.inputs.acsn"], [159, "module-pypath.inputs.adhesome"], [162, "module-pypath.inputs.almen2009"], [164, "module-pypath.inputs.baccin2019"], [167, "module-pypath.inputs.biogps"], [173, "module-pypath.inputs.biogrid"], [176, "module-pypath.inputs.biomart"], [182, "module-pypath.inputs.biomodels"], [188, "module-pypath.inputs.ca1"], [190, "module-pypath.inputs.cancercellmap"], [192, "module-pypath.inputs.cancerdrugsdb"], [196, "module-pypath.inputs.cancersea"], [198, "module-pypath.inputs.cell"], [200, "module-pypath.inputs.cellcall"], [205, "module-pypath.inputs.cellcellinteractions"], [207, "module-pypath.inputs.cellchatdb"], [213, "module-pypath.inputs.cellinker"], [225, "module-pypath.inputs.cellphonedb"], [232, "module-pypath.inputs.celltalkdb"], [236, "module-pypath.inputs.celltypist"], [238, "module-pypath.inputs.chembl"], [246, "module-pypath.inputs.clinvar"], [249, "module-pypath.inputs.collectri"], [251, "module-pypath.inputs.common"], [258, "module-pypath.inputs.compleat"], [261, "module-pypath.inputs.complexportal"], [263, "module-pypath.inputs.comppi"], [266, "module-pypath.inputs.connectomedb"], [269, "module-pypath.inputs.corum"], [271, "module-pypath.inputs.cosmic"], [273, "module-pypath.inputs.cpad"], [277, "module-pypath.inputs.cpdb"], [280, "module-pypath.inputs.credentials"], [282, "module-pypath.inputs.csa"], [284, "module-pypath.inputs.cspa"], [288, "module-pypath.inputs.ctdbase"], [291, "module-pypath.inputs.cytosig"], [294, "module-pypath.inputs.dbptm"], [298, "module-pypath.inputs.deathdomain"], [301, "module-pypath.inputs.depod"], [304, "module-pypath.inputs.dgidb"], [308, "module-pypath.inputs.dip"], [311, "module-pypath.inputs.disgenet"], [316, "module-pypath.inputs.domino"], [321, "module-pypath.inputs.dorothea"], [332, "module-pypath.inputs.drugbank"], [339, "module-pypath.inputs.drugcentral"], [343, "module-pypath.inputs.ebi"], [345, "module-pypath.inputs.elm"], [350, "module-pypath.inputs.embopress"], [352, "module-pypath.inputs.embrace"], [357, "module-pypath.inputs.encode"], [359, "module-pypath.inputs.ensembl"], [361, "module-pypath.inputs.exocarta"], [364, "module-pypath.inputs.genecards"], [369, "module-pypath.inputs.go"], [391, "module-pypath.inputs.gpcrdb"], [393, "module-pypath.inputs.graphviz"], [395, "module-pypath.inputs.guide2pharma"], [399, "module-pypath.inputs.havugimana"], [402, "module-pypath.inputs.hgnc"], [404, "module-pypath.inputs.hippie"], [406, "module-pypath.inputs.hmdb"], [413, "module-pypath.inputs.homologene"], [417, "module-pypath.inputs.hpmr"], [423, "module-pypath.inputs.hpo"], [428, "module-pypath.inputs.hprd"], [433, "module-pypath.inputs.htri"], [435, "module-pypath.inputs.humancellmap"], [437, "module-pypath.inputs.humap"], [440, "module-pypath.inputs.huri"], [453, "module-pypath.inputs.i3d"], [455, "module-pypath.inputs.icellnet"], [460, "module-pypath.inputs.ielm"], [463, "module-pypath.inputs.imweb"], [466, "module-pypath.inputs.innatedb"], [468, "module-pypath.inputs.instruct"], [471, "module-pypath.inputs.intact"], [473, "module-pypath.inputs.integrins"], [475, "module-pypath.inputs.interpro"], [480, "module-pypath.inputs.intogen"], [482, "module-pypath.inputs.ipi"], [484, "module-pypath.inputs.iptmnet"], [487, "module-pypath.inputs.italk"], [491, "module-pypath.inputs.kea"], [494, "module-pypath.inputs.kegg"], [504, "module-pypath.inputs.kegg_api"], [521, "module-pypath.inputs.kinasedotcom"], [523, "module-pypath.inputs.kirouac2010"], [525, "module-pypath.inputs.lambert2018"], [528, "module-pypath.inputs.laudanna"], [531, "module-pypath.inputs.li2012"], [536, "module-pypath.inputs.lincs"], [538, "module-pypath.inputs.lmpid"], [542, "module-pypath.inputs.lncdisease"], [544, "module-pypath.inputs.lncrnadb"], [546, "module-pypath.inputs.locate"], [548, "module-pypath.inputs.lrdb"], [552, "module-pypath.inputs.macrophage"], [554, "module-pypath.inputs.main"], [555, "module-pypath.inputs.matrisome"], [557, "module-pypath.inputs.matrixdb"], [563, "module-pypath.inputs.mcam"], [565, "module-pypath.inputs.membranome"], [567, "module-pypath.inputs.mimp"], [571, "module-pypath.inputs.mir2disease"], [573, "module-pypath.inputs.mirbase"], [581, "module-pypath.inputs.mirdeathdb"], [583, "module-pypath.inputs.mirecords"], [585, "module-pypath.inputs.mirtarbase"], [587, "module-pypath.inputs.mitab"], [590, "module-pypath.inputs.mppi"], [592, "module-pypath.inputs.ncrdeathdb"], [594, "module-pypath.inputs.negatome"], [596, "module-pypath.inputs.netbiol"], [599, "module-pypath.inputs.netpath"], [603, "module-pypath.inputs.oma"], [605, "module-pypath.inputs.ontology"], [608, "module-pypath.inputs.opm"], [610, "module-pypath.inputs.oreganno"], [613, "module-pypath.inputs.panglaodb"], [616, "module-pypath.inputs.pathophenodb"], [619, "module-pypath.inputs.pathwaycommons"], [636, "module-pypath.inputs.pazar"], [638, "module-pypath.inputs.pdb"], [642, "module-pypath.inputs.pdzbase"], [644, "module-pypath.inputs.pepcyber"], [647, "module-pypath.inputs.pfam"], [652, "module-pypath.inputs.pharos"], [661, "module-pypath.inputs.phobius"], [663, "module-pypath.inputs.phosphatome"], [665, "module-pypath.inputs.phosphoelm"], [669, "module-pypath.inputs.phosphonetworks"], [672, "module-pypath.inputs.phosphopoint"], [675, "module-pypath.inputs.phosphosite"], [688, "module-pypath.inputs.pisa"], [692, "module-pypath.inputs.pro"], [695, "module-pypath.inputs.progeny"], [698, "module-pypath.inputs.proteinatlas"], [703, "module-pypath.inputs.proteins"], [705, "module-pypath.inputs.protmapper"], [709, "module-pypath.inputs.pubchem"], [711, "module-pypath.inputs.pubmed"], [718, "module-pypath.inputs.ramilowski2015"], [721, "module-pypath.inputs.ramp"], [728, "module-pypath.inputs.rdata"], [729, "module-pypath.inputs.reaction"], [749, "module-pypath.inputs.scconnect"], [753, "module-pypath.inputs.science"], [755, "module-pypath.inputs.signalink"], [760, "module-pypath.inputs.signor"], [767, "module-pypath.inputs.spike"], [770, "module-pypath.inputs.stitch"], [773, "module-pypath.inputs.string"], [778, "module-pypath.inputs.surfaceome"], [780, "module-pypath.inputs.switches_elm"], [782, "module-pypath.inputs.talklr"], [786, "module-pypath.inputs.tcdb"], [790, "module-pypath.inputs.tfcensus"], [792, "module-pypath.inputs.threedcomplex"], [798, "module-pypath.inputs.threedid"], [803, "module-pypath.inputs.topdb"], [805, "module-pypath.inputs.transmir"], [807, "module-pypath.inputs.trip"], [814, "module-pypath.inputs.unichem"], [819, "module-pypath.inputs.uniprot"], [850, "module-pypath.inputs.wang"], [855, "module-pypath.inputs.wojtowicz2020"], [858, "module-pypath.inputs.zhong2015"], [860, "module-pypath.internals"], [861, "module-pypath.internals.annot_formats"], [866, "module-pypath.internals.input_formats"], [880, "module-pypath.internals.intera"], [890, "module-pypath.internals.license"], [896, "module-pypath.internals.maps"], [897, "module-pypath.internals.refs"], [900, "module-pypath.internals.resource"], [907, "module-pypath.legacy"], [908, "module-pypath.legacy.db_categories"], [911, "module-pypath.legacy.main"], [919, "module-pypath.omnipath"], [920, "module-pypath.omnipath.app"], [922, "module-pypath.omnipath.databases"], [925, "module-pypath.omnipath.databases.define"], [931, "module-pypath.omnipath.export"], [934, "module-pypath.omnipath.param"], [937, "module-pypath.omnipath.server"], [938, "module-pypath.omnipath.server.build"], [940, "module-pypath.omnipath.server.generate_about_page"], [945, "module-pypath.omnipath.server.legacy"], [947, "module-pypath.omnipath.server.run"], [956, "module-pypath.resources"], [957, "module-pypath.resources.controller"], [959, "module-pypath.resources.data"], [960, "module-pypath.resources.data_formats"], [972, "module-pypath.resources.descriptions"], [978, "module-pypath.resources.licenses"], [980, "module-pypath.resources.network"], [982, "module-pypath.resources.urls"], [983, "module-pypath.share"], [984, "module-pypath.share.cache"], [988, "module-pypath.share.common"], [1087, "module-pypath.share.constants"], [1088, "module-pypath.share.curl"], [1105, "module-pypath.share.log"], [1108, "module-pypath.share.progress"], [1110, "module-pypath.share.session"], [1116, "module-pypath.share.settings"], [1121, "module-pypath.utils"], [1122, "module-pypath.utils.go"], [1130, "module-pypath.utils.homology"], [1143, "module-pypath.utils.mapping"], [1158, "module-pypath.utils.pdb"], [1163, "module-pypath.utils.proteomicsdb"], [1165, "module-pypath.utils.pyreact"], [1180, "module-pypath.utils.reflists"], [1188, "module-pypath.utils.residues"], [1190, "module-pypath.utils.seq"], [1197, "module-pypath.utils.taxonomy"], [1212, "module-pypath.utils.unichem"], [1214, "module-pypath.utils.uniprot"], [1274, "module-pypath.visual"], [1275, "module-pypath.visual.drawing"], [1278, "module-pypath.visual.igraph_drawing"], [1284, "module-pypath.visual.igraph_drawing.edge"], [1291, "module-pypath.visual.igraph_drawing.vertex"], [1297, "module-pypath.visual.plot"]], "pypath": [[0, "module-pypath"]], "pypath.core": [[1, "module-pypath.core"]], "pypath.core.annot": [[2, "module-pypath.core.annot"]], "adhesome (class in pypath.core.annot)": [[3, "pypath.core.annot.Adhesome"]], "__init__() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.__init__"]], "add_complexes_by_inference() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.all_complexes"]], "all_entities() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.all_entities"]], "all_mirnas() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.all_mirnas"]], "all_proteins() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.all_proteins"]], "all_refs() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.all_refs"]], "annotate_complex() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.annotate_complex"]], "browse() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.browse"]], "complex_inference() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.complex_inference"]], "coverage() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.coverage"]], "curation_effort() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.curation_effort"]], "get_names() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.get_names"]], "get_reference_set() (pypath.core.annot.adhesome static method)": [[3, "pypath.core.annot.Adhesome.get_reference_set"]], "get_subset() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.get_subset"]], "get_subset_bool_array() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.get_subset_bool_array"]], "get_values() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.get_values"]], "labels() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.labels"]], "load() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.load"]], "load_data() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.load_data"]], "load_proteins() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.load_proteins"]], "make_df() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.make_df"]], "numof_entities() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.numof_entities"]], "numof_records() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.numof_records"]], "numof_references() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.numof_references"]], "process() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.process"]], "reload() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.reload"]], "select() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.select"]], "set_method() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.set_method"]], "set_reference_set() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.set_reference_set"]], "show() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.show"]], "subset_intersection() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.subset_intersection"]], "to_array() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.to_array"]], "to_bool_array() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.to_bool_array"]], "to_set() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.to_set"]], "almen2009 (class in pypath.core.annot)": [[4, "pypath.core.annot.Almen2009"]], "__init__() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.__init__"]], "add_complexes_by_inference() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.all_complexes"]], "all_entities() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.all_entities"]], "all_mirnas() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.all_mirnas"]], "all_proteins() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.all_proteins"]], "all_refs() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.all_refs"]], "annotate_complex() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.annotate_complex"]], "browse() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.browse"]], "complex_inference() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.complex_inference"]], "coverage() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.coverage"]], "curation_effort() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.curation_effort"]], "get_names() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.get_names"]], "get_reference_set() (pypath.core.annot.almen2009 static method)": [[4, "pypath.core.annot.Almen2009.get_reference_set"]], "get_subset() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.get_subset"]], "get_subset_bool_array() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.get_subset_bool_array"]], "get_values() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.get_values"]], "labels() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.labels"]], "load() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.load"]], "load_data() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.load_data"]], "load_proteins() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.load_proteins"]], "make_df() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.make_df"]], "numof_entities() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.numof_entities"]], "numof_records() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.numof_records"]], "numof_references() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.numof_references"]], "process() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.process"]], "reload() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.reload"]], "select() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.select"]], "set_method() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.set_method"]], "set_reference_set() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.set_reference_set"]], "show() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.show"]], "subset_intersection() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.subset_intersection"]], "to_array() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.to_array"]], "to_bool_array() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.to_bool_array"]], "to_set() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.to_set"]], "annotationbase (class in pypath.core.annot)": [[5, "pypath.core.annot.AnnotationBase"]], "__init__() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.__init__"]], "add_complexes_by_inference() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.all_complexes"]], "all_entities() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.all_entities"]], "all_mirnas() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.all_mirnas"]], "all_proteins() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.all_proteins"]], "all_refs() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.all_refs"]], "annotate_complex() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.annotate_complex"]], "browse() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.browse"]], "complex_inference() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.complex_inference"]], "coverage() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.coverage"]], "curation_effort() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.curation_effort"]], "get_names() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.get_names"]], "get_reference_set() (pypath.core.annot.annotationbase static method)": [[5, "pypath.core.annot.AnnotationBase.get_reference_set"]], "get_subset() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.get_subset"]], "get_subset_bool_array() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.get_subset_bool_array"]], "get_values() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.get_values"]], "labels() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.labels"]], "load() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.load"]], "load_data() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.load_data"]], "load_proteins() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.load_proteins"]], "make_df() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.make_df"]], "numof_entities() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.numof_entities"]], "numof_records() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.numof_records"]], "numof_references() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.numof_references"]], "process() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.process"]], "reload() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.reload"]], "select() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.select"]], "set_method() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.set_method"]], "set_reference_set() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.set_reference_set"]], "show() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.show"]], "subset_intersection() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.subset_intersection"]], "to_array() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.to_array"]], "to_bool_array() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.to_bool_array"]], "to_set() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.to_set"]], "annotationtable (class in pypath.core.annot)": [[6, "pypath.core.annot.AnnotationTable"]], "__init__() (pypath.core.annot.annotationtable method)": [[6, "pypath.core.annot.AnnotationTable.__init__"]], "all_annotations() (pypath.core.annot.annotationtable method)": [[6, "pypath.core.annot.AnnotationTable.all_annotations"]], "all_annotations_str() (pypath.core.annot.annotationtable method)": [[6, "pypath.core.annot.AnnotationTable.all_annotations_str"]], "reload() (pypath.core.annot.annotationtable method)": [[6, "pypath.core.annot.AnnotationTable.reload"]], "search() (pypath.core.annot.annotationtable method)": [[6, "pypath.core.annot.AnnotationTable.search"]], "baccin2019 (class in pypath.core.annot)": [[7, "pypath.core.annot.Baccin2019"]], "__init__() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.__init__"]], "add_complexes_by_inference() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.all_complexes"]], "all_entities() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.all_entities"]], "all_mirnas() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.all_mirnas"]], "all_proteins() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.all_proteins"]], "all_refs() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.all_refs"]], "annotate_complex() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.annotate_complex"]], "browse() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.browse"]], "complex_inference() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.complex_inference"]], "coverage() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.coverage"]], "curation_effort() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.curation_effort"]], "get_names() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.get_names"]], "get_reference_set() (pypath.core.annot.baccin2019 static method)": [[7, "pypath.core.annot.Baccin2019.get_reference_set"]], "get_subset() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.get_subset"]], "get_subset_bool_array() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.get_subset_bool_array"]], "get_values() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.get_values"]], "labels() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.labels"]], "load() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.load"]], "load_data() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.load_data"]], "load_proteins() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.load_proteins"]], "make_df() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.make_df"]], "numof_entities() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.numof_entities"]], "numof_records() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.numof_records"]], "numof_references() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.numof_references"]], "process() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.process"]], "reload() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.reload"]], "select() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.select"]], "set_method() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.set_method"]], "set_reference_set() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.set_reference_set"]], "show() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.show"]], "subset_intersection() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.subset_intersection"]], "to_array() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.to_array"]], "to_bool_array() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.to_bool_array"]], "to_set() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.to_set"]], "biogps (class in pypath.core.annot)": [[8, "pypath.core.annot.Biogps"]], "__init__() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.__init__"]], "add_complexes_by_inference() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.all_complexes"]], "all_entities() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.all_entities"]], "all_mirnas() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.all_mirnas"]], "all_proteins() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.all_proteins"]], "all_refs() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.all_refs"]], "annotate_complex() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.annotate_complex"]], "browse() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.browse"]], "complex_inference() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.complex_inference"]], "coverage() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.coverage"]], "curation_effort() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.curation_effort"]], "get_names() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.get_names"]], "get_reference_set() (pypath.core.annot.biogps static method)": [[8, "pypath.core.annot.Biogps.get_reference_set"]], "get_subset() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.get_subset"]], "get_subset_bool_array() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.get_subset_bool_array"]], "get_values() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.get_values"]], "labels() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.labels"]], "load() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.load"]], "load_data() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.load_data"]], "load_proteins() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.load_proteins"]], "make_df() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.make_df"]], "numof_entities() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.numof_entities"]], "numof_records() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.numof_records"]], "numof_references() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.numof_references"]], "process() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.process"]], "reload() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.reload"]], "select() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.select"]], "set_method() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.set_method"]], "set_reference_set() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.set_reference_set"]], "show() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.show"]], "subset_intersection() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.subset_intersection"]], "to_array() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.to_array"]], "to_bool_array() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.to_bool_array"]], "to_set() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.to_set"]], "cancergenecensus (class in pypath.core.annot)": [[9, "pypath.core.annot.CancerGeneCensus"]], "__init__() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.__init__"]], "add_complexes_by_inference() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.all_complexes"]], "all_entities() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.all_entities"]], "all_mirnas() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.all_mirnas"]], "all_proteins() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.all_proteins"]], "all_refs() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.all_refs"]], "annotate_complex() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.annotate_complex"]], "browse() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.browse"]], "complex_inference() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.complex_inference"]], "coverage() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.coverage"]], "curation_effort() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.curation_effort"]], "get_names() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.get_names"]], "get_reference_set() (pypath.core.annot.cancergenecensus static method)": [[9, "pypath.core.annot.CancerGeneCensus.get_reference_set"]], "get_subset() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.get_subset"]], "get_subset_bool_array() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.get_subset_bool_array"]], "get_values() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.get_values"]], "labels() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.labels"]], "load() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.load"]], "load_data() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.load_data"]], "load_proteins() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.load_proteins"]], "make_df() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.make_df"]], "numof_entities() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.numof_entities"]], "numof_records() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.numof_records"]], "numof_references() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.numof_references"]], "process() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.process"]], "reload() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.reload"]], "select() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.select"]], "set_method() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.set_method"]], "set_reference_set() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.set_reference_set"]], "show() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.show"]], "subset_intersection() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.subset_intersection"]], "to_array() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.to_array"]], "to_bool_array() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.to_bool_array"]], "to_set() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.to_set"]], "cancerdrugsdb (class in pypath.core.annot)": [[10, "pypath.core.annot.Cancerdrugsdb"]], "__init__() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.__init__"]], "add_complexes_by_inference() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.all_complexes"]], "all_entities() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.all_entities"]], "all_mirnas() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.all_mirnas"]], "all_proteins() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.all_proteins"]], "all_refs() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.all_refs"]], "annotate_complex() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.annotate_complex"]], "browse() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.browse"]], "complex_inference() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.complex_inference"]], "coverage() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.coverage"]], "curation_effort() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.curation_effort"]], "get_names() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.get_names"]], "get_reference_set() (pypath.core.annot.cancerdrugsdb static method)": [[10, "pypath.core.annot.Cancerdrugsdb.get_reference_set"]], "get_subset() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.get_subset"]], "get_subset_bool_array() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.get_subset_bool_array"]], "get_values() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.get_values"]], "labels() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.labels"]], "load() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.load"]], "load_data() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.load_data"]], "load_proteins() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.load_proteins"]], "make_df() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.make_df"]], "numof_entities() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.numof_entities"]], "numof_records() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.numof_records"]], "numof_references() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.numof_references"]], "process() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.process"]], "reload() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.reload"]], "select() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.select"]], "set_method() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.set_method"]], "set_reference_set() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.set_reference_set"]], "show() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.show"]], "subset_intersection() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.subset_intersection"]], "to_array() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.to_array"]], "to_bool_array() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.to_bool_array"]], "to_set() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.to_set"]], "cancersea (class in pypath.core.annot)": [[11, "pypath.core.annot.Cancersea"]], "__init__() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.__init__"]], "add_complexes_by_inference() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.all_complexes"]], "all_entities() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.all_entities"]], "all_mirnas() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.all_mirnas"]], "all_proteins() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.all_proteins"]], "all_refs() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.all_refs"]], "annotate_complex() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.annotate_complex"]], "browse() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.browse"]], "complex_inference() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.complex_inference"]], "coverage() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.coverage"]], "curation_effort() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.curation_effort"]], "get_names() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.get_names"]], "get_reference_set() (pypath.core.annot.cancersea static method)": [[11, "pypath.core.annot.Cancersea.get_reference_set"]], "get_subset() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.get_subset"]], "get_subset_bool_array() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.get_subset_bool_array"]], "get_values() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.get_values"]], "labels() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.labels"]], "load() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.load"]], "load_data() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.load_data"]], "load_proteins() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.load_proteins"]], "make_df() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.make_df"]], "numof_entities() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.numof_entities"]], "numof_records() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.numof_records"]], "numof_references() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.numof_references"]], "process() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.process"]], "reload() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.reload"]], "select() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.select"]], "set_method() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.set_method"]], "set_reference_set() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.set_reference_set"]], "show() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.show"]], "subset_intersection() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.subset_intersection"]], "to_array() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.to_array"]], "to_bool_array() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.to_bool_array"]], "to_set() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.to_set"]], "cellphonedb (class in pypath.core.annot)": [[12, "pypath.core.annot.CellPhoneDB"]], "__init__() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.__init__"]], "add_complexes_by_inference() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.all_complexes"]], "all_entities() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.all_entities"]], "all_mirnas() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.all_mirnas"]], "all_proteins() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.all_proteins"]], "all_refs() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.all_refs"]], "annotate_complex() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.annotate_complex"]], "browse() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.browse"]], "complex_inference() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.complex_inference"]], "coverage() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.coverage"]], "curation_effort() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.curation_effort"]], "get_names() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.get_names"]], "get_reference_set() (pypath.core.annot.cellphonedb static method)": [[12, "pypath.core.annot.CellPhoneDB.get_reference_set"]], "get_subset() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.get_subset"]], "get_subset_bool_array() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.get_subset_bool_array"]], "get_values() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.get_values"]], "labels() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.labels"]], "load() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.load"]], "load_data() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.load_data"]], "load_proteins() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.load_proteins"]], "make_df() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.make_df"]], "numof_entities() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.numof_entities"]], "numof_records() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.numof_records"]], "numof_references() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.numof_references"]], "process() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.process"]], "reload() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.reload"]], "select() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.select"]], "set_method() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.set_method"]], "set_reference_set() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.set_reference_set"]], "show() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.show"]], "subset_intersection() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.subset_intersection"]], "to_array() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.to_array"]], "to_bool_array() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.to_bool_array"]], "to_set() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.to_set"]], "cellphonedbcomplex (class in pypath.core.annot)": [[13, "pypath.core.annot.CellPhoneDBComplex"]], "__init__() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.__init__"]], "add_complexes_by_inference() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.all_complexes"]], "all_entities() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.all_entities"]], "all_mirnas() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.all_mirnas"]], "all_proteins() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.all_proteins"]], "all_refs() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.all_refs"]], "annotate_complex() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.annotate_complex"]], "browse() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.browse"]], "complex_inference() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.complex_inference"]], "coverage() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.coverage"]], "curation_effort() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.curation_effort"]], "get_names() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.get_names"]], "get_reference_set() (pypath.core.annot.cellphonedbcomplex static method)": [[13, "pypath.core.annot.CellPhoneDBComplex.get_reference_set"]], "get_subset() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.get_subset"]], "get_subset_bool_array() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.get_subset_bool_array"]], "get_values() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.get_values"]], "labels() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.labels"]], "load() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.load"]], "load_data() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.load_data"]], "load_proteins() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.load_proteins"]], "make_df() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.make_df"]], "numof_entities() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.numof_entities"]], "numof_records() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.numof_records"]], "numof_references() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.numof_references"]], "process() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.process"]], "reload() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.reload"]], "select() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.select"]], "set_method() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.set_method"]], "set_reference_set() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.set_reference_set"]], "show() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.show"]], "subset_intersection() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.subset_intersection"]], "to_array() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.to_array"]], "to_bool_array() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.to_bool_array"]], "to_set() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.to_set"]], "cellsurfaceproteinatlas (class in pypath.core.annot)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas"]], "__init__() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.__init__"]], "add_complexes_by_inference() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.all_complexes"]], "all_entities() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.all_entities"]], "all_mirnas() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.all_mirnas"]], "all_proteins() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.all_proteins"]], "all_refs() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.all_refs"]], "annotate_complex() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.annotate_complex"]], "browse() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.browse"]], "complex_inference() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.complex_inference"]], "coverage() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.coverage"]], "curation_effort() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.curation_effort"]], "get_names() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.get_names"]], "get_reference_set() (pypath.core.annot.cellsurfaceproteinatlas static method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.get_reference_set"]], "get_subset() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.get_subset"]], "get_subset_bool_array() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.get_subset_bool_array"]], "get_values() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.get_values"]], "labels() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.labels"]], "load() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.load"]], "load_data() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.load_data"]], "load_proteins() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.load_proteins"]], "make_df() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.make_df"]], "numof_entities() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.numof_entities"]], "numof_records() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.numof_records"]], "numof_references() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.numof_references"]], "process() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.process"]], "reload() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.reload"]], "select() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.select"]], "set_method() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.set_method"]], "set_reference_set() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.set_reference_set"]], "show() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.show"]], "subset_intersection() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.subset_intersection"]], "to_array() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.to_array"]], "to_bool_array() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.to_bool_array"]], "to_set() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.to_set"]], "cellsurfaceproteinatlascelltype (class in pypath.core.annot)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType"]], "__init__() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.__init__"]], "add_complexes_by_inference() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.all_complexes"]], "all_entities() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.all_entities"]], "all_mirnas() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.all_mirnas"]], "all_proteins() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.all_proteins"]], "all_refs() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.all_refs"]], "annotate_complex() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.annotate_complex"]], "browse() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.browse"]], "complex_inference() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.complex_inference"]], "coverage() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.coverage"]], "curation_effort() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.curation_effort"]], "get_names() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.get_names"]], "get_reference_set() (pypath.core.annot.cellsurfaceproteinatlascelltype static method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.get_reference_set"]], "get_subset() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.get_subset"]], "get_subset_bool_array() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.get_subset_bool_array"]], "get_values() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.get_values"]], "labels() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.labels"]], "load() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.load"]], "load_data() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.load_data"]], "load_proteins() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.load_proteins"]], "make_df() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.make_df"]], "numof_entities() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.numof_entities"]], "numof_records() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.numof_records"]], "numof_references() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.numof_references"]], "process() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.process"]], "reload() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.reload"]], "select() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.select"]], "set_method() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.set_method"]], "set_reference_set() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.set_reference_set"]], "show() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.show"]], "subset_intersection() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.subset_intersection"]], "to_array() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.to_array"]], "to_bool_array() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.to_bool_array"]], "to_set() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.to_set"]], "cellcall (class in pypath.core.annot)": [[16, "pypath.core.annot.Cellcall"]], "__init__() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.__init__"]], "add_complexes_by_inference() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.all_complexes"]], "all_entities() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.all_entities"]], "all_mirnas() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.all_mirnas"]], "all_proteins() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.all_proteins"]], "all_refs() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.all_refs"]], "annotate_complex() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.annotate_complex"]], "browse() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.browse"]], "complex_inference() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.complex_inference"]], "coverage() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.coverage"]], "curation_effort() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.curation_effort"]], "get_names() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.get_names"]], "get_reference_set() (pypath.core.annot.cellcall static method)": [[16, "pypath.core.annot.Cellcall.get_reference_set"]], "get_subset() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.get_subset"]], "get_subset_bool_array() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.get_subset_bool_array"]], "get_values() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.get_values"]], "labels() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.labels"]], "load() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.load"]], "load_data() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.load_data"]], "load_proteins() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.load_proteins"]], "make_df() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.make_df"]], "numof_entities() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.numof_entities"]], "numof_records() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.numof_records"]], "numof_references() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.numof_references"]], "process() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.process"]], "reload() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.reload"]], "select() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.select"]], "set_method() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.set_method"]], "set_reference_set() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.set_reference_set"]], "show() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.show"]], "subset_intersection() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.subset_intersection"]], "to_array() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.to_array"]], "to_bool_array() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.to_bool_array"]], "to_set() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.to_set"]], "cellcellinteractions (class in pypath.core.annot)": [[17, "pypath.core.annot.Cellcellinteractions"]], "__init__() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.__init__"]], "add_complexes_by_inference() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.all_complexes"]], "all_entities() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.all_entities"]], "all_mirnas() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.all_mirnas"]], "all_proteins() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.all_proteins"]], "all_refs() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.all_refs"]], "annotate_complex() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.annotate_complex"]], "browse() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.browse"]], "complex_inference() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.complex_inference"]], "coverage() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.coverage"]], "curation_effort() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.curation_effort"]], "get_names() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.get_names"]], "get_reference_set() (pypath.core.annot.cellcellinteractions static method)": [[17, "pypath.core.annot.Cellcellinteractions.get_reference_set"]], "get_subset() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.get_subset"]], "get_subset_bool_array() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.get_subset_bool_array"]], "get_values() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.get_values"]], "labels() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.labels"]], "load() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.load"]], "load_data() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.load_data"]], "load_proteins() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.load_proteins"]], "make_df() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.make_df"]], "numof_entities() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.numof_entities"]], "numof_records() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.numof_records"]], "numof_references() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.numof_references"]], "process() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.process"]], "reload() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.reload"]], "select() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.select"]], "set_method() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.set_method"]], "set_reference_set() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.set_reference_set"]], "show() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.show"]], "subset_intersection() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.subset_intersection"]], "to_array() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.to_array"]], "to_bool_array() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.to_bool_array"]], "to_set() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.to_set"]], "cellchatdb (class in pypath.core.annot)": [[18, "pypath.core.annot.Cellchatdb"]], "__init__() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.__init__"]], "add_complexes_by_inference() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.all_complexes"]], "all_entities() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.all_entities"]], "all_mirnas() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.all_mirnas"]], "all_proteins() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.all_proteins"]], "all_refs() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.all_refs"]], "annotate_complex() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.annotate_complex"]], "browse() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.browse"]], "complex_inference() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.complex_inference"]], "coverage() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.coverage"]], "curation_effort() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.curation_effort"]], "get_names() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.get_names"]], "get_reference_set() (pypath.core.annot.cellchatdb static method)": [[18, "pypath.core.annot.Cellchatdb.get_reference_set"]], "get_subset() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.get_subset"]], "get_subset_bool_array() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.get_subset_bool_array"]], "get_values() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.get_values"]], "labels() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.labels"]], "load() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.load"]], "load_data() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.load_data"]], "load_proteins() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.load_proteins"]], "make_df() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.make_df"]], "numof_entities() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.numof_entities"]], "numof_records() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.numof_records"]], "numof_references() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.numof_references"]], "process() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.process"]], "reload() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.reload"]], "select() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.select"]], "set_method() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.set_method"]], "set_reference_set() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.set_reference_set"]], "show() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.show"]], "subset_intersection() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.subset_intersection"]], "to_array() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.to_array"]], "to_bool_array() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.to_bool_array"]], "to_set() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.to_set"]], "cellchatdbcomplex (class in pypath.core.annot)": [[19, "pypath.core.annot.CellchatdbComplex"]], "__init__() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.__init__"]], "add_complexes_by_inference() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.all_complexes"]], "all_entities() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.all_entities"]], "all_mirnas() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.all_mirnas"]], "all_proteins() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.all_proteins"]], "all_refs() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.all_refs"]], "annotate_complex() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.annotate_complex"]], "browse() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.browse"]], "complex_inference() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.complex_inference"]], "coverage() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.coverage"]], "curation_effort() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.curation_effort"]], "get_names() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.get_names"]], "get_reference_set() (pypath.core.annot.cellchatdbcomplex static method)": [[19, "pypath.core.annot.CellchatdbComplex.get_reference_set"]], "get_subset() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.get_subset"]], "get_subset_bool_array() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.get_subset_bool_array"]], "get_values() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.get_values"]], "labels() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.labels"]], "load() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.load"]], "load_data() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.load_data"]], "load_proteins() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.load_proteins"]], "make_df() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.make_df"]], "numof_entities() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.numof_entities"]], "numof_records() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.numof_records"]], "numof_references() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.numof_references"]], "process() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.process"]], "reload() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.reload"]], "select() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.select"]], "set_method() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.set_method"]], "set_reference_set() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.set_reference_set"]], "show() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.show"]], "subset_intersection() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.subset_intersection"]], "to_array() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.to_array"]], "to_bool_array() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.to_bool_array"]], "to_set() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.to_set"]], "cellinker (class in pypath.core.annot)": [[20, "pypath.core.annot.Cellinker"]], "__init__() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.__init__"]], "add_complexes_by_inference() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.all_complexes"]], "all_entities() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.all_entities"]], "all_mirnas() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.all_mirnas"]], "all_proteins() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.all_proteins"]], "all_refs() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.all_refs"]], "annotate_complex() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.annotate_complex"]], "browse() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.browse"]], "complex_inference() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.complex_inference"]], "coverage() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.coverage"]], "curation_effort() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.curation_effort"]], "get_names() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.get_names"]], "get_reference_set() (pypath.core.annot.cellinker static method)": [[20, "pypath.core.annot.Cellinker.get_reference_set"]], "get_subset() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.get_subset"]], "get_subset_bool_array() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.get_subset_bool_array"]], "get_values() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.get_values"]], "labels() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.labels"]], "load() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.load"]], "load_data() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.load_data"]], "load_proteins() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.load_proteins"]], "make_df() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.make_df"]], "numof_entities() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.numof_entities"]], "numof_records() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.numof_records"]], "numof_references() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.numof_references"]], "process() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.process"]], "reload() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.reload"]], "select() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.select"]], "set_method() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.set_method"]], "set_reference_set() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.set_reference_set"]], "show() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.show"]], "subset_intersection() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.subset_intersection"]], "to_array() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.to_array"]], "to_bool_array() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.to_bool_array"]], "to_set() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.to_set"]], "cellinkercomplex (class in pypath.core.annot)": [[21, "pypath.core.annot.CellinkerComplex"]], "__init__() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.__init__"]], "add_complexes_by_inference() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.all_complexes"]], "all_entities() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.all_entities"]], "all_mirnas() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.all_mirnas"]], "all_proteins() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.all_proteins"]], "all_refs() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.all_refs"]], "annotate_complex() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.annotate_complex"]], "browse() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.browse"]], "complex_inference() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.complex_inference"]], "coverage() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.coverage"]], "curation_effort() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.curation_effort"]], "get_names() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.get_names"]], "get_reference_set() (pypath.core.annot.cellinkercomplex static method)": [[21, "pypath.core.annot.CellinkerComplex.get_reference_set"]], "get_subset() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.get_subset"]], "get_subset_bool_array() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.get_subset_bool_array"]], "get_values() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.get_values"]], "labels() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.labels"]], "load() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.load"]], "load_data() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.load_data"]], "load_proteins() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.load_proteins"]], "make_df() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.make_df"]], "numof_entities() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.numof_entities"]], "numof_records() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.numof_records"]], "numof_references() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.numof_references"]], "process() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.process"]], "reload() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.reload"]], "select() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.select"]], "set_method() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.set_method"]], "set_reference_set() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.set_reference_set"]], "show() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.show"]], "subset_intersection() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.subset_intersection"]], "to_array() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.to_array"]], "to_bool_array() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.to_bool_array"]], "to_set() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.to_set"]], "celltalkdb (class in pypath.core.annot)": [[22, "pypath.core.annot.Celltalkdb"]], "__init__() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.__init__"]], "add_complexes_by_inference() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.all_complexes"]], "all_entities() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.all_entities"]], "all_mirnas() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.all_mirnas"]], "all_proteins() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.all_proteins"]], "all_refs() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.all_refs"]], "annotate_complex() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.annotate_complex"]], "browse() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.browse"]], "complex_inference() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.complex_inference"]], "coverage() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.coverage"]], "curation_effort() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.curation_effort"]], "get_names() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.get_names"]], "get_reference_set() (pypath.core.annot.celltalkdb static method)": [[22, "pypath.core.annot.Celltalkdb.get_reference_set"]], "get_subset() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.get_subset"]], "get_subset_bool_array() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.get_subset_bool_array"]], "get_values() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.get_values"]], "labels() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.labels"]], "load() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.load"]], "load_data() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.load_data"]], "load_proteins() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.load_proteins"]], "make_df() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.make_df"]], "numof_entities() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.numof_entities"]], "numof_records() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.numof_records"]], "numof_references() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.numof_references"]], "process() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.process"]], "reload() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.reload"]], "select() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.select"]], "set_method() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.set_method"]], "set_reference_set() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.set_reference_set"]], "show() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.show"]], "subset_intersection() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.subset_intersection"]], "to_array() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.to_array"]], "to_bool_array() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.to_bool_array"]], "to_set() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.to_set"]], "celltypist (class in pypath.core.annot)": [[23, "pypath.core.annot.Celltypist"]], "__init__() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.__init__"]], "add_complexes_by_inference() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.all_complexes"]], "all_entities() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.all_entities"]], "all_mirnas() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.all_mirnas"]], "all_proteins() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.all_proteins"]], "all_refs() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.all_refs"]], "annotate_complex() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.annotate_complex"]], "browse() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.browse"]], "complex_inference() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.complex_inference"]], "coverage() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.coverage"]], "curation_effort() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.curation_effort"]], "get_names() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.get_names"]], "get_reference_set() (pypath.core.annot.celltypist static method)": [[23, "pypath.core.annot.Celltypist.get_reference_set"]], "get_subset() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.get_subset"]], "get_subset_bool_array() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.get_subset_bool_array"]], "get_values() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.get_values"]], "labels() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.labels"]], "load() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.load"]], "load_data() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.load_data"]], "load_proteins() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.load_proteins"]], "make_df() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.make_df"]], "numof_entities() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.numof_entities"]], "numof_records() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.numof_records"]], "numof_references() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.numof_references"]], "process() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.process"]], "reload() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.reload"]], "select() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.select"]], "set_method() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.set_method"]], "set_reference_set() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.set_reference_set"]], "show() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.show"]], "subset_intersection() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.subset_intersection"]], "to_array() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.to_array"]], "to_bool_array() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.to_bool_array"]], "to_set() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.to_set"]], "comppi (class in pypath.core.annot)": [[24, "pypath.core.annot.Comppi"]], "__init__() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.__init__"]], "add_complexes_by_inference() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.all_complexes"]], "all_entities() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.all_entities"]], "all_mirnas() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.all_mirnas"]], "all_proteins() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.all_proteins"]], "all_refs() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.all_refs"]], "annotate_complex() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.annotate_complex"]], "browse() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.browse"]], "complex_inference() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.complex_inference"]], "coverage() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.coverage"]], "curation_effort() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.curation_effort"]], "get_names() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.get_names"]], "get_reference_set() (pypath.core.annot.comppi static method)": [[24, "pypath.core.annot.Comppi.get_reference_set"]], "get_subset() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.get_subset"]], "get_subset_bool_array() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.get_subset_bool_array"]], "get_values() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.get_values"]], "labels() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.labels"]], "load() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.load"]], "load_data() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.load_data"]], "load_proteins() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.load_proteins"]], "make_df() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.make_df"]], "numof_entities() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.numof_entities"]], "numof_records() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.numof_records"]], "numof_references() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.numof_references"]], "process() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.process"]], "reload() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.reload"]], "select() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.select"]], "set_method() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.set_method"]], "set_reference_set() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.set_reference_set"]], "show() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.show"]], "subset_intersection() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.subset_intersection"]], "to_array() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.to_array"]], "to_bool_array() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.to_bool_array"]], "to_set() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.to_set"]], "connectomedb (class in pypath.core.annot)": [[25, "pypath.core.annot.Connectomedb"]], "__init__() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.__init__"]], "add_complexes_by_inference() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.all_complexes"]], "all_entities() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.all_entities"]], "all_mirnas() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.all_mirnas"]], "all_proteins() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.all_proteins"]], "all_refs() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.all_refs"]], "annotate_complex() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.annotate_complex"]], "browse() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.browse"]], "complex_inference() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.complex_inference"]], "coverage() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.coverage"]], "curation_effort() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.curation_effort"]], "get_names() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.get_names"]], "get_reference_set() (pypath.core.annot.connectomedb static method)": [[25, "pypath.core.annot.Connectomedb.get_reference_set"]], "get_subset() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.get_subset"]], "get_subset_bool_array() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.get_subset_bool_array"]], "get_values() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.get_values"]], "labels() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.labels"]], "load() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.load"]], "load_data() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.load_data"]], "load_proteins() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.load_proteins"]], "make_df() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.make_df"]], "numof_entities() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.numof_entities"]], "numof_records() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.numof_records"]], "numof_references() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.numof_references"]], "process() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.process"]], "reload() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.reload"]], "select() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.select"]], "set_method() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.set_method"]], "set_reference_set() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.set_reference_set"]], "show() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.show"]], "subset_intersection() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.subset_intersection"]], "to_array() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.to_array"]], "to_bool_array() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.to_bool_array"]], "to_set() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.to_set"]], "corum (class in pypath.core.annot)": [[26, "pypath.core.annot.Corum"]], "__init__() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.__init__"]], "add_complexes_by_inference() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.all_complexes"]], "all_entities() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.all_entities"]], "all_mirnas() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.all_mirnas"]], "all_proteins() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.all_proteins"]], "all_refs() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.all_refs"]], "annotate_complex() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.annotate_complex"]], "browse() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.browse"]], "complex_inference() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.complex_inference"]], "coverage() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.coverage"]], "curation_effort() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.curation_effort"]], "get_names() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.get_names"]], "get_reference_set() (pypath.core.annot.corum static method)": [[26, "pypath.core.annot.Corum.get_reference_set"]], "get_subset() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.get_subset"]], "get_subset_bool_array() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.get_subset_bool_array"]], "get_values() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.get_values"]], "labels() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.labels"]], "load() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.load"]], "load_data() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.load_data"]], "load_proteins() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.load_proteins"]], "make_df() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.make_df"]], "numof_entities() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.numof_entities"]], "numof_records() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.numof_records"]], "numof_references() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.numof_references"]], "process() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.process"]], "reload() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.reload"]], "select() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.select"]], "set_method() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.set_method"]], "set_reference_set() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.set_reference_set"]], "show() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.show"]], "subset_intersection() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.subset_intersection"]], "to_array() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.to_array"]], "to_bool_array() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.to_bool_array"]], "to_set() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.to_set"]], "corumfuncat (class in pypath.core.annot)": [[27, "pypath.core.annot.CorumFuncat"]], "__init__() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.__init__"]], "add_complexes_by_inference() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.all_complexes"]], "all_entities() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.all_entities"]], "all_mirnas() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.all_mirnas"]], "all_proteins() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.all_proteins"]], "all_refs() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.all_refs"]], "annotate_complex() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.annotate_complex"]], "browse() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.browse"]], "complex_inference() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.complex_inference"]], "coverage() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.coverage"]], "curation_effort() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.curation_effort"]], "get_names() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.get_names"]], "get_reference_set() (pypath.core.annot.corumfuncat static method)": [[27, "pypath.core.annot.CorumFuncat.get_reference_set"]], "get_subset() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.get_subset"]], "get_subset_bool_array() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.get_subset_bool_array"]], "get_values() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.get_values"]], "labels() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.labels"]], "load() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.load"]], "load_data() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.load_data"]], "load_proteins() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.load_proteins"]], "make_df() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.make_df"]], "numof_entities() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.numof_entities"]], "numof_records() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.numof_records"]], "numof_references() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.numof_references"]], "process() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.process"]], "reload() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.reload"]], "select() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.select"]], "set_method() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.set_method"]], "set_reference_set() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.set_reference_set"]], "show() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.show"]], "subset_intersection() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.subset_intersection"]], "to_array() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.to_array"]], "to_bool_array() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.to_bool_array"]], "to_set() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.to_set"]], "corumgo (class in pypath.core.annot)": [[28, "pypath.core.annot.CorumGO"]], "__init__() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.__init__"]], "add_complexes_by_inference() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.all_complexes"]], "all_entities() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.all_entities"]], "all_mirnas() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.all_mirnas"]], "all_proteins() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.all_proteins"]], "all_refs() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.all_refs"]], "annotate_complex() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.annotate_complex"]], "browse() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.browse"]], "complex_inference() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.complex_inference"]], "coverage() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.coverage"]], "curation_effort() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.curation_effort"]], "get_names() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.get_names"]], "get_reference_set() (pypath.core.annot.corumgo static method)": [[28, "pypath.core.annot.CorumGO.get_reference_set"]], "get_subset() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.get_subset"]], "get_subset_bool_array() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.get_subset_bool_array"]], "get_values() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.get_values"]], "labels() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.labels"]], "load() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.load"]], "load_data() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.load_data"]], "load_proteins() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.load_proteins"]], "make_df() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.make_df"]], "numof_entities() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.numof_entities"]], "numof_records() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.numof_records"]], "numof_references() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.numof_references"]], "process() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.process"]], "reload() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.reload"]], "select() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.select"]], "set_method() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.set_method"]], "set_reference_set() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.set_reference_set"]], "show() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.show"]], "subset_intersection() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.subset_intersection"]], "to_array() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.to_array"]], "to_bool_array() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.to_bool_array"]], "to_set() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.to_set"]], "cpad (class in pypath.core.annot)": [[29, "pypath.core.annot.Cpad"]], "__init__() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.__init__"]], "add_complexes_by_inference() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.all_complexes"]], "all_entities() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.all_entities"]], "all_mirnas() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.all_mirnas"]], "all_proteins() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.all_proteins"]], "all_refs() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.all_refs"]], "annotate_complex() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.annotate_complex"]], "browse() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.browse"]], "complex_inference() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.complex_inference"]], "coverage() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.coverage"]], "curation_effort() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.curation_effort"]], "get_names() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.get_names"]], "get_reference_set() (pypath.core.annot.cpad static method)": [[29, "pypath.core.annot.Cpad.get_reference_set"]], "get_subset() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.get_subset"]], "get_subset_bool_array() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.get_subset_bool_array"]], "get_values() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.get_values"]], "labels() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.labels"]], "load() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.load"]], "load_data() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.load_data"]], "load_proteins() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.load_proteins"]], "make_df() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.make_df"]], "numof_entities() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.numof_entities"]], "numof_records() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.numof_records"]], "numof_references() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.numof_references"]], "process() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.process"]], "reload() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.reload"]], "select() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.select"]], "set_method() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.set_method"]], "set_reference_set() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.set_reference_set"]], "show() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.show"]], "subset_intersection() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.subset_intersection"]], "to_array() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.to_array"]], "to_bool_array() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.to_bool_array"]], "to_set() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.to_set"]], "customannotation (class in pypath.core.annot)": [[30, "pypath.core.annot.CustomAnnotation"]], "__init__() (pypath.core.annot.customannotation method)": [[30, "pypath.core.annot.CustomAnnotation.__init__"]], "browse() (pypath.core.annot.customannotation method)": [[30, "pypath.core.annot.CustomAnnotation.browse"]], "class_to_class_connections() (pypath.core.annot.customannotation method)": [[30, "pypath.core.annot.CustomAnnotation.class_to_class_connections"]], "classes_by_entity() (pypath.core.annot.customannotation method)": [[30, "pypath.core.annot.CustomAnnotation.classes_by_entity"]], "counts() (pypath.core.annot.customannotation method)": [[30, "pypath.core.annot.CustomAnnotation.counts"]], "counts_by_class() (pypath.core.annot.customannotation method)": [[30, "pypath.core.annot.CustomAnnotation.counts_by_class"]], "create_class() (pypath.core.annot.customannotation method)": [[30, "pypath.core.annot.CustomAnnotation.create_class"]], "degree_inter_class_network() (pypath.core.annot.customannotation method)": [[30, "pypath.core.annot.CustomAnnotation.degree_inter_class_network"]], "filter() (pypath.core.annot.customannotation method)": [[30, "pypath.core.annot.CustomAnnotation.filter"]], "filter_classes() (pypath.core.annot.customannotation static method)": [[30, "pypath.core.annot.CustomAnnotation.filter_classes"]], "filter_interclass_network() (pypath.core.annot.customannotation method)": [[30, "pypath.core.annot.CustomAnnotation.filter_interclass_network"]], "get_class() (pypath.core.annot.customannotation method)": [[30, "pypath.core.annot.CustomAnnotation.get_class"]], "get_df() (pypath.core.annot.customannotation method)": [[30, "pypath.core.annot.CustomAnnotation.get_df"]], "get_interclass_network_df() (pypath.core.annot.customannotation method)": [[30, "pypath.core.annot.CustomAnnotation.get_interclass_network_df"]], "get_parents() (pypath.core.annot.customannotation method)": [[30, "pypath.core.annot.CustomAnnotation.get_parents"]], "get_resource() (pypath.core.annot.customannotation method)": [[30, "pypath.core.annot.CustomAnnotation.get_resource"]], "get_resources() (pypath.core.annot.customannotation method)": [[30, "pypath.core.annot.CustomAnnotation.get_resources"]], "labels() (pypath.core.annot.customannotation method)": [[30, "pypath.core.annot.CustomAnnotation.labels"]], "make_df() (pypath.core.annot.customannotation method)": [[30, "pypath.core.annot.CustomAnnotation.make_df"]], "network_df() (pypath.core.annot.customannotation method)": [[30, "pypath.core.annot.CustomAnnotation.network_df"]], "populate_classes() (pypath.core.annot.customannotation method)": [[30, "pypath.core.annot.CustomAnnotation.populate_classes"]], "populate_scores() (pypath.core.annot.customannotation method)": [[30, "pypath.core.annot.CustomAnnotation.populate_scores"]], "process_annot() (pypath.core.annot.customannotation method)": [[30, "pypath.core.annot.CustomAnnotation.process_annot"]], "quality_check_table() (pypath.core.annot.customannotation method)": [[30, "pypath.core.annot.CustomAnnotation.quality_check_table"]], "register_network() (pypath.core.annot.customannotation method)": [[30, "pypath.core.annot.CustomAnnotation.register_network"]], "reload() (pypath.core.annot.customannotation method)": [[30, "pypath.core.annot.CustomAnnotation.reload"]], "resources_in_category() (pypath.core.annot.customannotation method)": [[30, "pypath.core.annot.CustomAnnotation.resources_in_category"]], "select() (pypath.core.annot.customannotation method)": [[30, "pypath.core.annot.CustomAnnotation.select"]], "set_interclass_network_df() (pypath.core.annot.customannotation method)": [[30, "pypath.core.annot.CustomAnnotation.set_interclass_network_df"]], "show() (pypath.core.annot.customannotation method)": [[30, "pypath.core.annot.CustomAnnotation.show"]], "update_parents() (pypath.core.annot.customannotation method)": [[30, "pypath.core.annot.CustomAnnotation.update_parents"]], "cytosig (class in pypath.core.annot)": [[31, "pypath.core.annot.Cytosig"]], "__init__() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.__init__"]], "add_complexes_by_inference() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.all_complexes"]], "all_entities() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.all_entities"]], "all_mirnas() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.all_mirnas"]], "all_proteins() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.all_proteins"]], "all_refs() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.all_refs"]], "annotate_complex() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.annotate_complex"]], "browse() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.browse"]], "complex_inference() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.complex_inference"]], "coverage() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.coverage"]], "curation_effort() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.curation_effort"]], "get_names() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.get_names"]], "get_reference_set() (pypath.core.annot.cytosig static method)": [[31, "pypath.core.annot.Cytosig.get_reference_set"]], "get_subset() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.get_subset"]], "get_subset_bool_array() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.get_subset_bool_array"]], "get_values() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.get_values"]], "labels() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.labels"]], "load() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.load"]], "load_data() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.load_data"]], "load_proteins() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.load_proteins"]], "make_df() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.make_df"]], "numof_entities() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.numof_entities"]], "numof_records() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.numof_records"]], "numof_references() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.numof_references"]], "process() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.process"]], "reload() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.reload"]], "select() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.select"]], "set_method() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.set_method"]], "set_reference_set() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.set_reference_set"]], "show() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.show"]], "subset_intersection() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.subset_intersection"]], "to_array() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.to_array"]], "to_bool_array() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.to_bool_array"]], "to_set() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.to_set"]], "dgidb (class in pypath.core.annot)": [[32, "pypath.core.annot.Dgidb"]], "__init__() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.__init__"]], "add_complexes_by_inference() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.all_complexes"]], "all_entities() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.all_entities"]], "all_mirnas() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.all_mirnas"]], "all_proteins() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.all_proteins"]], "all_refs() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.all_refs"]], "annotate_complex() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.annotate_complex"]], "browse() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.browse"]], "complex_inference() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.complex_inference"]], "coverage() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.coverage"]], "curation_effort() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.curation_effort"]], "get_names() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.get_names"]], "get_reference_set() (pypath.core.annot.dgidb static method)": [[32, "pypath.core.annot.Dgidb.get_reference_set"]], "get_subset() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.get_subset"]], "get_subset_bool_array() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.get_subset_bool_array"]], "get_values() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.get_values"]], "labels() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.labels"]], "load() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.load"]], "load_data() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.load_data"]], "load_proteins() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.load_proteins"]], "make_df() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.make_df"]], "numof_entities() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.numof_entities"]], "numof_records() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.numof_records"]], "numof_references() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.numof_references"]], "process() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.process"]], "reload() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.reload"]], "select() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.select"]], "set_method() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.set_method"]], "set_reference_set() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.set_reference_set"]], "show() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.show"]], "subset_intersection() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.subset_intersection"]], "to_array() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.to_array"]], "to_bool_array() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.to_bool_array"]], "to_set() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.to_set"]], "disgenet (class in pypath.core.annot)": [[33, "pypath.core.annot.Disgenet"]], "__init__() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.__init__"]], "add_complexes_by_inference() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.all_complexes"]], "all_entities() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.all_entities"]], "all_mirnas() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.all_mirnas"]], "all_proteins() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.all_proteins"]], "all_refs() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.all_refs"]], "annotate_complex() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.annotate_complex"]], "browse() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.browse"]], "complex_inference() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.complex_inference"]], "coverage() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.coverage"]], "curation_effort() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.curation_effort"]], "get_names() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.get_names"]], "get_reference_set() (pypath.core.annot.disgenet static method)": [[33, "pypath.core.annot.Disgenet.get_reference_set"]], "get_subset() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.get_subset"]], "get_subset_bool_array() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.get_subset_bool_array"]], "get_values() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.get_values"]], "labels() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.labels"]], "load() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.load"]], "load_data() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.load_data"]], "load_proteins() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.load_proteins"]], "make_df() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.make_df"]], "numof_entities() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.numof_entities"]], "numof_records() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.numof_records"]], "numof_references() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.numof_references"]], "process() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.process"]], "reload() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.reload"]], "select() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.select"]], "set_method() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.set_method"]], "set_reference_set() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.set_reference_set"]], "show() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.show"]], "subset_intersection() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.subset_intersection"]], "to_array() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.to_array"]], "to_bool_array() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.to_bool_array"]], "to_set() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.to_set"]], "embrace (class in pypath.core.annot)": [[34, "pypath.core.annot.Embrace"]], "__init__() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.__init__"]], "add_complexes_by_inference() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.all_complexes"]], "all_entities() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.all_entities"]], "all_mirnas() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.all_mirnas"]], "all_proteins() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.all_proteins"]], "all_refs() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.all_refs"]], "annotate_complex() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.annotate_complex"]], "browse() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.browse"]], "complex_inference() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.complex_inference"]], "coverage() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.coverage"]], "curation_effort() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.curation_effort"]], "get_names() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.get_names"]], "get_reference_set() (pypath.core.annot.embrace static method)": [[34, "pypath.core.annot.Embrace.get_reference_set"]], "get_subset() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.get_subset"]], "get_subset_bool_array() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.get_subset_bool_array"]], "get_values() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.get_values"]], "labels() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.labels"]], "load() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.load"]], "load_data() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.load_data"]], "load_proteins() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.load_proteins"]], "make_df() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.make_df"]], "numof_entities() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.numof_entities"]], "numof_records() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.numof_records"]], "numof_references() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.numof_references"]], "process() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.process"]], "reload() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.reload"]], "select() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.select"]], "set_method() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.set_method"]], "set_reference_set() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.set_reference_set"]], "show() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.show"]], "subset_intersection() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.subset_intersection"]], "to_array() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.to_array"]], "to_bool_array() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.to_bool_array"]], "to_set() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.to_set"]], "exocarta (class in pypath.core.annot)": [[35, "pypath.core.annot.Exocarta"]], "__init__() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.__init__"]], "add_complexes_by_inference() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.all_complexes"]], "all_entities() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.all_entities"]], "all_mirnas() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.all_mirnas"]], "all_proteins() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.all_proteins"]], "all_refs() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.all_refs"]], "annotate_complex() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.annotate_complex"]], "browse() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.browse"]], "complex_inference() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.complex_inference"]], "coverage() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.coverage"]], "curation_effort() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.curation_effort"]], "get_names() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.get_names"]], "get_reference_set() (pypath.core.annot.exocarta static method)": [[35, "pypath.core.annot.Exocarta.get_reference_set"]], "get_subset() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.get_subset"]], "get_subset_bool_array() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.get_subset_bool_array"]], "get_values() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.get_values"]], "labels() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.labels"]], "load() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.load"]], "load_data() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.load_data"]], "load_proteins() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.load_proteins"]], "make_df() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.make_df"]], "numof_entities() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.numof_entities"]], "numof_records() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.numof_records"]], "numof_references() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.numof_references"]], "process() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.process"]], "reload() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.reload"]], "select() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.select"]], "set_method() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.set_method"]], "set_reference_set() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.set_reference_set"]], "show() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.show"]], "subset_intersection() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.subset_intersection"]], "to_array() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.to_array"]], "to_bool_array() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.to_bool_array"]], "to_set() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.to_set"]], "gocustomintercell (class in pypath.core.annot)": [[36, "pypath.core.annot.GOCustomIntercell"]], "__init__() (pypath.core.annot.gocustomintercell method)": [[36, "pypath.core.annot.GOCustomIntercell.__init__"]], "get_annotation() (pypath.core.annot.gocustomintercell method)": [[36, "pypath.core.annot.GOCustomIntercell.get_annotation"]], "get_annotations() (pypath.core.annot.gocustomintercell method)": [[36, "pypath.core.annot.GOCustomIntercell.get_annotations"]], "process_categories() (pypath.core.annot.gocustomintercell method)": [[36, "pypath.core.annot.GOCustomIntercell.process_categories"]], "reload() (pypath.core.annot.gocustomintercell method)": [[36, "pypath.core.annot.GOCustomIntercell.reload"]], "gointercell (class in pypath.core.annot)": [[37, "pypath.core.annot.GOIntercell"]], "__init__() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.__init__"]], "add_complexes_by_inference() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.all_complexes"]], "all_entities() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.all_entities"]], "all_mirnas() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.all_mirnas"]], "all_proteins() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.all_proteins"]], "all_refs() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.all_refs"]], "annotate_complex() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.annotate_complex"]], "browse() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.browse"]], "complex_inference() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.complex_inference"]], "coverage() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.coverage"]], "curation_effort() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.curation_effort"]], "get_names() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.get_names"]], "get_reference_set() (pypath.core.annot.gointercell static method)": [[37, "pypath.core.annot.GOIntercell.get_reference_set"]], "get_subset() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.get_subset"]], "get_subset_bool_array() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.get_subset_bool_array"]], "get_values() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.get_values"]], "labels() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.labels"]], "load() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.load"]], "load_data() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.load_data"]], "load_proteins() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.load_proteins"]], "make_df() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.make_df"]], "numof_entities() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.numof_entities"]], "numof_records() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.numof_records"]], "numof_references() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.numof_references"]], "process() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.process"]], "reload() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.reload"]], "select() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.select"]], "set_method() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.set_method"]], "set_reference_set() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.set_reference_set"]], "show() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.show"]], "subset_intersection() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.subset_intersection"]], "to_array() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.to_array"]], "to_bool_array() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.to_bool_array"]], "to_set() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.to_set"]], "gpcrdb (class in pypath.core.annot)": [[38, "pypath.core.annot.Gpcrdb"]], "__init__() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.__init__"]], "add_complexes_by_inference() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.all_complexes"]], "all_entities() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.all_entities"]], "all_mirnas() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.all_mirnas"]], "all_proteins() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.all_proteins"]], "all_refs() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.all_refs"]], "annotate_complex() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.annotate_complex"]], "browse() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.browse"]], "complex_inference() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.complex_inference"]], "coverage() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.coverage"]], "curation_effort() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.curation_effort"]], "get_names() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.get_names"]], "get_reference_set() (pypath.core.annot.gpcrdb static method)": [[38, "pypath.core.annot.Gpcrdb.get_reference_set"]], "get_subset() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.get_subset"]], "get_subset_bool_array() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.get_subset_bool_array"]], "get_values() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.get_values"]], "labels() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.labels"]], "load() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.load"]], "load_data() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.load_data"]], "load_proteins() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.load_proteins"]], "make_df() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.make_df"]], "numof_entities() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.numof_entities"]], "numof_records() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.numof_records"]], "numof_references() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.numof_references"]], "process() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.process"]], "reload() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.reload"]], "select() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.select"]], "set_method() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.set_method"]], "set_reference_set() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.set_reference_set"]], "show() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.show"]], "subset_intersection() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.subset_intersection"]], "to_array() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.to_array"]], "to_bool_array() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.to_bool_array"]], "to_set() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.to_set"]], "guidetopharmacology (class in pypath.core.annot)": [[39, "pypath.core.annot.GuideToPharmacology"]], "__init__() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.__init__"]], "add_complexes_by_inference() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.all_complexes"]], "all_entities() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.all_entities"]], "all_mirnas() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.all_mirnas"]], "all_proteins() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.all_proteins"]], "all_refs() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.all_refs"]], "annotate_complex() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.annotate_complex"]], "browse() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.browse"]], "complex_inference() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.complex_inference"]], "coverage() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.coverage"]], "curation_effort() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.curation_effort"]], "get_names() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.get_names"]], "get_reference_set() (pypath.core.annot.guidetopharmacology static method)": [[39, "pypath.core.annot.GuideToPharmacology.get_reference_set"]], "get_subset() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.get_subset"]], "get_subset_bool_array() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.get_subset_bool_array"]], "get_values() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.get_values"]], "labels() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.labels"]], "load() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.load"]], "load_data() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.load_data"]], "load_proteins() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.load_proteins"]], "make_df() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.make_df"]], "numof_entities() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.numof_entities"]], "numof_records() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.numof_records"]], "numof_references() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.numof_references"]], "process() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.process"]], "reload() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.reload"]], "select() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.select"]], "set_method() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.set_method"]], "set_reference_set() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.set_reference_set"]], "show() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.show"]], "subset_intersection() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.subset_intersection"]], "to_array() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.to_array"]], "to_bool_array() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.to_bool_array"]], "to_set() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.to_set"]], "hpo (class in pypath.core.annot)": [[40, "pypath.core.annot.HPO"]], "__init__() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.__init__"]], "add_complexes_by_inference() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.all_complexes"]], "all_entities() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.all_entities"]], "all_mirnas() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.all_mirnas"]], "all_proteins() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.all_proteins"]], "all_refs() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.all_refs"]], "annotate_complex() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.annotate_complex"]], "browse() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.browse"]], "complex_inference() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.complex_inference"]], "coverage() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.coverage"]], "curation_effort() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.curation_effort"]], "get_names() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.get_names"]], "get_reference_set() (pypath.core.annot.hpo static method)": [[40, "pypath.core.annot.HPO.get_reference_set"]], "get_subset() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.get_subset"]], "get_subset_bool_array() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.get_subset_bool_array"]], "get_values() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.get_values"]], "labels() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.labels"]], "load() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.load"]], "load_data() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.load_data"]], "load_proteins() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.load_proteins"]], "make_df() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.make_df"]], "numof_entities() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.numof_entities"]], "numof_records() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.numof_records"]], "numof_references() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.numof_references"]], "process() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.process"]], "reload() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.reload"]], "select() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.select"]], "set_method() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.set_method"]], "set_reference_set() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.set_reference_set"]], "show() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.show"]], "subset_intersection() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.subset_intersection"]], "to_array() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.to_array"]], "to_bool_array() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.to_bool_array"]], "to_set() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.to_set"]], "hgnc (class in pypath.core.annot)": [[41, "pypath.core.annot.Hgnc"]], "__init__() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.__init__"]], "add_complexes_by_inference() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.all_complexes"]], "all_entities() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.all_entities"]], "all_mirnas() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.all_mirnas"]], "all_proteins() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.all_proteins"]], "all_refs() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.all_refs"]], "annotate_complex() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.annotate_complex"]], "browse() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.browse"]], "complex_inference() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.complex_inference"]], "coverage() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.coverage"]], "curation_effort() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.curation_effort"]], "get_names() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.get_names"]], "get_reference_set() (pypath.core.annot.hgnc static method)": [[41, "pypath.core.annot.Hgnc.get_reference_set"]], "get_subset() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.get_subset"]], "get_subset_bool_array() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.get_subset_bool_array"]], "get_values() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.get_values"]], "labels() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.labels"]], "load() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.load"]], "load_data() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.load_data"]], "load_proteins() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.load_proteins"]], "make_df() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.make_df"]], "numof_entities() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.numof_entities"]], "numof_records() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.numof_records"]], "numof_references() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.numof_references"]], "process() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.process"]], "reload() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.reload"]], "select() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.select"]], "set_method() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.set_method"]], "set_reference_set() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.set_reference_set"]], "show() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.show"]], "subset_intersection() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.subset_intersection"]], "to_array() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.to_array"]], "to_bool_array() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.to_bool_array"]], "to_set() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.to_set"]], "hpmrcomplex (class in pypath.core.annot)": [[42, "pypath.core.annot.HpmrComplex"]], "__init__() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.__init__"]], "add_complexes_by_inference() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.all_complexes"]], "all_entities() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.all_entities"]], "all_mirnas() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.all_mirnas"]], "all_proteins() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.all_proteins"]], "all_refs() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.all_refs"]], "annotate_complex() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.annotate_complex"]], "browse() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.browse"]], "complex_inference() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.complex_inference"]], "coverage() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.coverage"]], "curation_effort() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.curation_effort"]], "get_names() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.get_names"]], "get_reference_set() (pypath.core.annot.hpmrcomplex static method)": [[42, "pypath.core.annot.HpmrComplex.get_reference_set"]], "get_subset() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.get_subset"]], "get_subset_bool_array() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.get_subset_bool_array"]], "get_values() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.get_values"]], "labels() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.labels"]], "load() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.load"]], "load_data() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.load_data"]], "load_proteins() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.load_proteins"]], "make_df() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.make_df"]], "numof_entities() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.numof_entities"]], "numof_records() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.numof_records"]], "numof_references() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.numof_references"]], "process() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.process"]], "reload() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.reload"]], "select() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.select"]], "set_method() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.set_method"]], "set_reference_set() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.set_reference_set"]], "show() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.show"]], "subset_intersection() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.subset_intersection"]], "to_array() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.to_array"]], "to_bool_array() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.to_bool_array"]], "to_set() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.to_set"]], "humanplasmamembranereceptome (class in pypath.core.annot)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome"]], "__init__() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.__init__"]], "add_complexes_by_inference() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.all_complexes"]], "all_entities() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.all_entities"]], "all_mirnas() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.all_mirnas"]], "all_proteins() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.all_proteins"]], "all_refs() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.all_refs"]], "annotate_complex() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.annotate_complex"]], "browse() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.browse"]], "complex_inference() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.complex_inference"]], "coverage() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.coverage"]], "curation_effort() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.curation_effort"]], "get_names() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.get_names"]], "get_reference_set() (pypath.core.annot.humanplasmamembranereceptome static method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.get_reference_set"]], "get_subset() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.get_subset"]], "get_subset_bool_array() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.get_subset_bool_array"]], "get_values() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.get_values"]], "labels() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.labels"]], "load() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.load"]], "load_data() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.load_data"]], "load_proteins() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.load_proteins"]], "make_df() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.make_df"]], "numof_entities() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.numof_entities"]], "numof_records() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.numof_records"]], "numof_references() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.numof_references"]], "process() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.process"]], "reload() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.reload"]], "select() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.select"]], "set_method() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.set_method"]], "set_reference_set() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.set_reference_set"]], "show() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.show"]], "subset_intersection() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.subset_intersection"]], "to_array() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.to_array"]], "to_bool_array() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.to_bool_array"]], "to_set() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.to_set"]], "humanproteinatlas (class in pypath.core.annot)": [[44, "pypath.core.annot.HumanProteinAtlas"]], "__init__() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.__init__"]], "add_complexes_by_inference() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.all_complexes"]], "all_entities() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.all_entities"]], "all_mirnas() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.all_mirnas"]], "all_proteins() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.all_proteins"]], "all_refs() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.all_refs"]], "annotate_complex() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.annotate_complex"]], "browse() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.browse"]], "complex_inference() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.complex_inference"]], "coverage() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.coverage"]], "curation_effort() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.curation_effort"]], "get_names() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.get_names"]], "get_reference_set() (pypath.core.annot.humanproteinatlas static method)": [[44, "pypath.core.annot.HumanProteinAtlas.get_reference_set"]], "get_subset() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.get_subset"]], "get_subset_bool_array() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.get_subset_bool_array"]], "get_values() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.get_values"]], "labels() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.labels"]], "load() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.load"]], "load_data() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.load_data"]], "load_proteins() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.load_proteins"]], "make_df() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.make_df"]], "numof_entities() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.numof_entities"]], "numof_records() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.numof_records"]], "numof_references() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.numof_references"]], "process() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.process"]], "reload() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.reload"]], "select() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.select"]], "set_method() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.set_method"]], "set_reference_set() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.set_reference_set"]], "show() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.show"]], "subset_intersection() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.subset_intersection"]], "to_array() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.to_array"]], "to_bool_array() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.to_bool_array"]], "to_set() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.to_set"]], "humanproteinatlassecretome (class in pypath.core.annot)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome"]], "__init__() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.__init__"]], "add_complexes_by_inference() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.all_complexes"]], "all_entities() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.all_entities"]], "all_mirnas() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.all_mirnas"]], "all_proteins() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.all_proteins"]], "all_refs() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.all_refs"]], "annotate_complex() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.annotate_complex"]], "browse() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.browse"]], "complex_inference() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.complex_inference"]], "coverage() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.coverage"]], "curation_effort() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.curation_effort"]], "get_names() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.get_names"]], "get_reference_set() (pypath.core.annot.humanproteinatlassecretome static method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.get_reference_set"]], "get_subset() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.get_subset"]], "get_subset_bool_array() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.get_subset_bool_array"]], "get_values() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.get_values"]], "labels() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.labels"]], "load() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.load"]], "load_data() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.load_data"]], "load_proteins() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.load_proteins"]], "make_df() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.make_df"]], "numof_entities() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.numof_entities"]], "numof_records() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.numof_records"]], "numof_references() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.numof_references"]], "process() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.process"]], "reload() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.reload"]], "select() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.select"]], "set_method() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.set_method"]], "set_reference_set() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.set_reference_set"]], "show() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.show"]], "subset_intersection() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.subset_intersection"]], "to_array() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.to_array"]], "to_bool_array() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.to_bool_array"]], "to_set() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.to_set"]], "humanproteinatlassubcellular (class in pypath.core.annot)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular"]], "__init__() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.__init__"]], "add_complexes_by_inference() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.all_complexes"]], "all_entities() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.all_entities"]], "all_mirnas() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.all_mirnas"]], "all_proteins() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.all_proteins"]], "all_refs() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.all_refs"]], "annotate_complex() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.annotate_complex"]], "browse() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.browse"]], "complex_inference() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.complex_inference"]], "coverage() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.coverage"]], "curation_effort() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.curation_effort"]], "get_names() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.get_names"]], "get_reference_set() (pypath.core.annot.humanproteinatlassubcellular static method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.get_reference_set"]], "get_subset() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.get_subset"]], "get_subset_bool_array() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.get_subset_bool_array"]], "get_values() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.get_values"]], "labels() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.labels"]], "load() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.load"]], "load_data() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.load_data"]], "load_proteins() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.load_proteins"]], "make_df() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.make_df"]], "numof_entities() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.numof_entities"]], "numof_records() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.numof_records"]], "numof_references() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.numof_references"]], "process() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.process"]], "reload() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.reload"]], "select() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.select"]], "set_method() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.set_method"]], "set_reference_set() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.set_reference_set"]], "show() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.show"]], "subset_intersection() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.subset_intersection"]], "to_array() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.to_array"]], "to_bool_array() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.to_bool_array"]], "to_set() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.to_set"]], "humancellmap (class in pypath.core.annot)": [[47, "pypath.core.annot.Humancellmap"]], "__init__() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.__init__"]], "add_complexes_by_inference() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.all_complexes"]], "all_entities() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.all_entities"]], "all_mirnas() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.all_mirnas"]], "all_proteins() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.all_proteins"]], "all_refs() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.all_refs"]], "annotate_complex() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.annotate_complex"]], "browse() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.browse"]], "complex_inference() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.complex_inference"]], "coverage() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.coverage"]], "curation_effort() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.curation_effort"]], "get_names() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.get_names"]], "get_reference_set() (pypath.core.annot.humancellmap static method)": [[47, "pypath.core.annot.Humancellmap.get_reference_set"]], "get_subset() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.get_subset"]], "get_subset_bool_array() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.get_subset_bool_array"]], "get_values() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.get_values"]], "labels() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.labels"]], "load() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.load"]], "load_data() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.load_data"]], "load_proteins() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.load_proteins"]], "make_df() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.make_df"]], "numof_entities() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.numof_entities"]], "numof_records() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.numof_records"]], "numof_references() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.numof_references"]], "process() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.process"]], "reload() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.reload"]], "select() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.select"]], "set_method() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.set_method"]], "set_reference_set() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.set_reference_set"]], "show() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.show"]], "subset_intersection() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.subset_intersection"]], "to_array() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.to_array"]], "to_bool_array() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.to_bool_array"]], "to_set() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.to_set"]], "icellnet (class in pypath.core.annot)": [[48, "pypath.core.annot.Icellnet"]], "__init__() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.__init__"]], "add_complexes_by_inference() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.all_complexes"]], "all_entities() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.all_entities"]], "all_mirnas() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.all_mirnas"]], "all_proteins() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.all_proteins"]], "all_refs() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.all_refs"]], "annotate_complex() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.annotate_complex"]], "browse() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.browse"]], "complex_inference() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.complex_inference"]], "coverage() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.coverage"]], "curation_effort() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.curation_effort"]], "get_names() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.get_names"]], "get_reference_set() (pypath.core.annot.icellnet static method)": [[48, "pypath.core.annot.Icellnet.get_reference_set"]], "get_subset() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.get_subset"]], "get_subset_bool_array() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.get_subset_bool_array"]], "get_values() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.get_values"]], "labels() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.labels"]], "load() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.load"]], "load_data() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.load_data"]], "load_proteins() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.load_proteins"]], "make_df() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.make_df"]], "numof_entities() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.numof_entities"]], "numof_records() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.numof_records"]], "numof_references() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.numof_references"]], "process() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.process"]], "reload() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.reload"]], "select() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.select"]], "set_method() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.set_method"]], "set_reference_set() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.set_reference_set"]], "show() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.show"]], "subset_intersection() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.subset_intersection"]], "to_array() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.to_array"]], "to_bool_array() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.to_bool_array"]], "to_set() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.to_set"]], "icellnetcomplex (class in pypath.core.annot)": [[49, "pypath.core.annot.IcellnetComplex"]], "__init__() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.__init__"]], "add_complexes_by_inference() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.all_complexes"]], "all_entities() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.all_entities"]], "all_mirnas() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.all_mirnas"]], "all_proteins() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.all_proteins"]], "all_refs() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.all_refs"]], "annotate_complex() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.annotate_complex"]], "browse() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.browse"]], "complex_inference() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.complex_inference"]], "coverage() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.coverage"]], "curation_effort() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.curation_effort"]], "get_names() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.get_names"]], "get_reference_set() (pypath.core.annot.icellnetcomplex static method)": [[49, "pypath.core.annot.IcellnetComplex.get_reference_set"]], "get_subset() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.get_subset"]], "get_subset_bool_array() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.get_subset_bool_array"]], "get_values() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.get_values"]], "labels() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.labels"]], "load() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.load"]], "load_data() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.load_data"]], "load_proteins() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.load_proteins"]], "make_df() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.make_df"]], "numof_entities() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.numof_entities"]], "numof_records() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.numof_records"]], "numof_references() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.numof_references"]], "process() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.process"]], "reload() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.reload"]], "select() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.select"]], "set_method() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.set_method"]], "set_reference_set() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.set_reference_set"]], "show() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.show"]], "subset_intersection() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.subset_intersection"]], "to_array() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.to_array"]], "to_bool_array() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.to_bool_array"]], "to_set() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.to_set"]], "integrins (class in pypath.core.annot)": [[50, "pypath.core.annot.Integrins"]], "__init__() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.__init__"]], "add_complexes_by_inference() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.all_complexes"]], "all_entities() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.all_entities"]], "all_mirnas() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.all_mirnas"]], "all_proteins() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.all_proteins"]], "all_refs() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.all_refs"]], "annotate_complex() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.annotate_complex"]], "browse() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.browse"]], "complex_inference() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.complex_inference"]], "coverage() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.coverage"]], "curation_effort() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.curation_effort"]], "get_names() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.get_names"]], "get_reference_set() (pypath.core.annot.integrins static method)": [[50, "pypath.core.annot.Integrins.get_reference_set"]], "get_subset() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.get_subset"]], "get_subset_bool_array() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.get_subset_bool_array"]], "get_values() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.get_values"]], "labels() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.labels"]], "load() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.load"]], "load_data() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.load_data"]], "load_proteins() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.load_proteins"]], "make_df() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.make_df"]], "numof_entities() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.numof_entities"]], "numof_records() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.numof_records"]], "numof_references() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.numof_references"]], "process() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.process"]], "reload() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.reload"]], "select() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.select"]], "set_method() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.set_method"]], "set_reference_set() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.set_reference_set"]], "show() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.show"]], "subset_intersection() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.subset_intersection"]], "to_array() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.to_array"]], "to_bool_array() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.to_bool_array"]], "to_set() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.to_set"]], "interpro (class in pypath.core.annot)": [[51, "pypath.core.annot.InterPro"]], "__init__() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.__init__"]], "add_complexes_by_inference() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.all_complexes"]], "all_entities() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.all_entities"]], "all_mirnas() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.all_mirnas"]], "all_proteins() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.all_proteins"]], "all_refs() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.all_refs"]], "annotate_complex() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.annotate_complex"]], "browse() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.browse"]], "complex_inference() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.complex_inference"]], "coverage() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.coverage"]], "curation_effort() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.curation_effort"]], "get_names() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.get_names"]], "get_reference_set() (pypath.core.annot.interpro static method)": [[51, "pypath.core.annot.InterPro.get_reference_set"]], "get_subset() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.get_subset"]], "get_subset_bool_array() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.get_subset_bool_array"]], "get_values() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.get_values"]], "labels() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.labels"]], "load() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.load"]], "load_data() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.load_data"]], "load_proteins() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.load_proteins"]], "make_df() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.make_df"]], "numof_entities() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.numof_entities"]], "numof_records() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.numof_records"]], "numof_references() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.numof_references"]], "process() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.process"]], "reload() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.reload"]], "select() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.select"]], "set_method() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.set_method"]], "set_reference_set() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.set_reference_set"]], "show() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.show"]], "subset_intersection() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.subset_intersection"]], "to_array() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.to_array"]], "to_bool_array() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.to_bool_array"]], "to_set() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.to_set"]], "intogen (class in pypath.core.annot)": [[52, "pypath.core.annot.Intogen"]], "__init__() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.__init__"]], "add_complexes_by_inference() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.all_complexes"]], "all_entities() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.all_entities"]], "all_mirnas() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.all_mirnas"]], "all_proteins() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.all_proteins"]], "all_refs() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.all_refs"]], "annotate_complex() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.annotate_complex"]], "browse() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.browse"]], "complex_inference() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.complex_inference"]], "coverage() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.coverage"]], "curation_effort() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.curation_effort"]], "get_names() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.get_names"]], "get_reference_set() (pypath.core.annot.intogen static method)": [[52, "pypath.core.annot.Intogen.get_reference_set"]], "get_subset() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.get_subset"]], "get_subset_bool_array() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.get_subset_bool_array"]], "get_values() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.get_values"]], "labels() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.labels"]], "load() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.load"]], "load_data() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.load_data"]], "load_proteins() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.load_proteins"]], "make_df() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.make_df"]], "numof_entities() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.numof_entities"]], "numof_records() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.numof_records"]], "numof_references() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.numof_references"]], "process() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.process"]], "reload() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.reload"]], "select() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.select"]], "set_method() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.set_method"]], "set_reference_set() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.set_reference_set"]], "show() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.show"]], "subset_intersection() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.subset_intersection"]], "to_array() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.to_array"]], "to_bool_array() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.to_bool_array"]], "to_set() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.to_set"]], "italk (class in pypath.core.annot)": [[53, "pypath.core.annot.Italk"]], "__init__() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.__init__"]], "add_complexes_by_inference() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.all_complexes"]], "all_entities() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.all_entities"]], "all_mirnas() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.all_mirnas"]], "all_proteins() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.all_proteins"]], "all_refs() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.all_refs"]], "annotate_complex() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.annotate_complex"]], "browse() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.browse"]], "complex_inference() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.complex_inference"]], "coverage() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.coverage"]], "curation_effort() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.curation_effort"]], "get_names() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.get_names"]], "get_reference_set() (pypath.core.annot.italk static method)": [[53, "pypath.core.annot.Italk.get_reference_set"]], "get_subset() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.get_subset"]], "get_subset_bool_array() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.get_subset_bool_array"]], "get_values() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.get_values"]], "labels() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.labels"]], "load() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.load"]], "load_data() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.load_data"]], "load_proteins() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.load_proteins"]], "make_df() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.make_df"]], "numof_entities() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.numof_entities"]], "numof_records() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.numof_records"]], "numof_references() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.numof_references"]], "process() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.process"]], "reload() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.reload"]], "select() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.select"]], "set_method() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.set_method"]], "set_reference_set() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.set_reference_set"]], "show() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.show"]], "subset_intersection() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.subset_intersection"]], "to_array() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.to_array"]], "to_bool_array() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.to_bool_array"]], "to_set() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.to_set"]], "keggpathways (class in pypath.core.annot)": [[54, "pypath.core.annot.KeggPathways"]], "__init__() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.__init__"]], "add_complexes_by_inference() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.all_complexes"]], "all_entities() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.all_entities"]], "all_mirnas() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.all_mirnas"]], "all_proteins() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.all_proteins"]], "all_refs() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.all_refs"]], "annotate_complex() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.annotate_complex"]], "browse() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.browse"]], "complex_inference() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.complex_inference"]], "coverage() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.coverage"]], "curation_effort() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.curation_effort"]], "get_names() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.get_names"]], "get_reference_set() (pypath.core.annot.keggpathways static method)": [[54, "pypath.core.annot.KeggPathways.get_reference_set"]], "get_subset() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.get_subset"]], "get_subset_bool_array() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.get_subset_bool_array"]], "get_values() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.get_values"]], "labels() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.labels"]], "load() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.load"]], "load_data() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.load_data"]], "load_proteins() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.load_proteins"]], "make_df() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.make_df"]], "numof_entities() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.numof_entities"]], "numof_records() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.numof_records"]], "numof_references() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.numof_references"]], "process() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.process"]], "reload() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.reload"]], "select() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.select"]], "set_method() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.set_method"]], "set_reference_set() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.set_reference_set"]], "show() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.show"]], "subset_intersection() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.subset_intersection"]], "to_array() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.to_array"]], "to_bool_array() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.to_bool_array"]], "to_set() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.to_set"]], "keggpathwayspc (class in pypath.core.annot)": [[55, "pypath.core.annot.KeggPathwaysPC"]], "__init__() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.__init__"]], "add_complexes_by_inference() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.all_complexes"]], "all_entities() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.all_entities"]], "all_mirnas() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.all_mirnas"]], "all_proteins() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.all_proteins"]], "all_refs() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.all_refs"]], "annotate_complex() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.annotate_complex"]], "browse() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.browse"]], "complex_inference() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.complex_inference"]], "coverage() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.coverage"]], "curation_effort() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.curation_effort"]], "get_names() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.get_names"]], "get_reference_set() (pypath.core.annot.keggpathwayspc static method)": [[55, "pypath.core.annot.KeggPathwaysPC.get_reference_set"]], "get_subset() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.get_subset"]], "get_subset_bool_array() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.get_subset_bool_array"]], "get_values() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.get_values"]], "labels() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.labels"]], "load() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.load"]], "load_data() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.load_data"]], "load_proteins() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.load_proteins"]], "make_df() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.make_df"]], "numof_entities() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.numof_entities"]], "numof_records() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.numof_records"]], "numof_references() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.numof_references"]], "process() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.process"]], "reload() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.reload"]], "select() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.select"]], "set_method() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.set_method"]], "set_reference_set() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.set_reference_set"]], "show() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.show"]], "subset_intersection() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.subset_intersection"]], "to_array() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.to_array"]], "to_bool_array() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.to_bool_array"]], "to_set() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.to_set"]], "kinasedotcom (class in pypath.core.annot)": [[56, "pypath.core.annot.Kinasedotcom"]], "__init__() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.__init__"]], "add_complexes_by_inference() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.all_complexes"]], "all_entities() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.all_entities"]], "all_mirnas() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.all_mirnas"]], "all_proteins() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.all_proteins"]], "all_refs() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.all_refs"]], "annotate_complex() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.annotate_complex"]], "browse() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.browse"]], "complex_inference() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.complex_inference"]], "coverage() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.coverage"]], "curation_effort() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.curation_effort"]], "get_names() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.get_names"]], "get_reference_set() (pypath.core.annot.kinasedotcom static method)": [[56, "pypath.core.annot.Kinasedotcom.get_reference_set"]], "get_subset() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.get_subset"]], "get_subset_bool_array() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.get_subset_bool_array"]], "get_values() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.get_values"]], "labels() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.labels"]], "load() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.load"]], "load_data() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.load_data"]], "load_proteins() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.load_proteins"]], "make_df() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.make_df"]], "numof_entities() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.numof_entities"]], "numof_records() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.numof_records"]], "numof_references() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.numof_references"]], "process() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.process"]], "reload() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.reload"]], "select() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.select"]], "set_method() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.set_method"]], "set_reference_set() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.set_reference_set"]], "show() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.show"]], "subset_intersection() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.subset_intersection"]], "to_array() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.to_array"]], "to_bool_array() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.to_bool_array"]], "to_set() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.to_set"]], "kirouac2010 (class in pypath.core.annot)": [[57, "pypath.core.annot.Kirouac2010"]], "__init__() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.__init__"]], "add_complexes_by_inference() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.all_complexes"]], "all_entities() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.all_entities"]], "all_mirnas() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.all_mirnas"]], "all_proteins() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.all_proteins"]], "all_refs() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.all_refs"]], "annotate_complex() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.annotate_complex"]], "browse() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.browse"]], "complex_inference() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.complex_inference"]], "coverage() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.coverage"]], "curation_effort() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.curation_effort"]], "get_names() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.get_names"]], "get_reference_set() (pypath.core.annot.kirouac2010 static method)": [[57, "pypath.core.annot.Kirouac2010.get_reference_set"]], "get_subset() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.get_subset"]], "get_subset_bool_array() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.get_subset_bool_array"]], "get_values() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.get_values"]], "labels() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.labels"]], "load() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.load"]], "load_data() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.load_data"]], "load_proteins() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.load_proteins"]], "make_df() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.make_df"]], "numof_entities() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.numof_entities"]], "numof_records() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.numof_records"]], "numof_references() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.numof_references"]], "process() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.process"]], "reload() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.reload"]], "select() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.select"]], "set_method() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.set_method"]], "set_reference_set() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.set_reference_set"]], "show() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.show"]], "subset_intersection() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.subset_intersection"]], "to_array() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.to_array"]], "to_bool_array() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.to_bool_array"]], "to_set() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.to_set"]], "lambert2018 (class in pypath.core.annot)": [[58, "pypath.core.annot.Lambert2018"]], "__init__() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.__init__"]], "add_complexes_by_inference() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.all_complexes"]], "all_entities() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.all_entities"]], "all_mirnas() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.all_mirnas"]], "all_proteins() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.all_proteins"]], "all_refs() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.all_refs"]], "annotate_complex() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.annotate_complex"]], "browse() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.browse"]], "complex_inference() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.complex_inference"]], "coverage() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.coverage"]], "curation_effort() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.curation_effort"]], "get_names() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.get_names"]], "get_reference_set() (pypath.core.annot.lambert2018 static method)": [[58, "pypath.core.annot.Lambert2018.get_reference_set"]], "get_subset() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.get_subset"]], "get_subset_bool_array() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.get_subset_bool_array"]], "get_values() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.get_values"]], "labels() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.labels"]], "load() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.load"]], "load_data() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.load_data"]], "load_proteins() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.load_proteins"]], "make_df() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.make_df"]], "numof_entities() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.numof_entities"]], "numof_records() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.numof_records"]], "numof_references() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.numof_references"]], "process() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.process"]], "reload() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.reload"]], "select() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.select"]], "set_method() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.set_method"]], "set_reference_set() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.set_reference_set"]], "show() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.show"]], "subset_intersection() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.subset_intersection"]], "to_array() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.to_array"]], "to_bool_array() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.to_bool_array"]], "to_set() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.to_set"]], "ligandreceptor (class in pypath.core.annot)": [[59, "pypath.core.annot.LigandReceptor"]], "__init__() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.__init__"]], "add_complexes_by_inference() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.all_complexes"]], "all_entities() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.all_entities"]], "all_mirnas() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.all_mirnas"]], "all_proteins() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.all_proteins"]], "all_refs() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.all_refs"]], "annotate_complex() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.annotate_complex"]], "browse() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.browse"]], "complex_inference() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.complex_inference"]], "coverage() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.coverage"]], "curation_effort() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.curation_effort"]], "get_names() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.get_names"]], "get_reference_set() (pypath.core.annot.ligandreceptor static method)": [[59, "pypath.core.annot.LigandReceptor.get_reference_set"]], "get_subset() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.get_subset"]], "get_subset_bool_array() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.get_subset_bool_array"]], "get_values() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.get_values"]], "labels() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.labels"]], "load() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.load"]], "load_data() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.load_data"]], "load_proteins() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.load_proteins"]], "make_df() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.make_df"]], "numof_entities() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.numof_entities"]], "numof_records() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.numof_records"]], "numof_references() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.numof_references"]], "process() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.process"]], "reload() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.reload"]], "select() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.select"]], "set_method() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.set_method"]], "set_reference_set() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.set_reference_set"]], "show() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.show"]], "subset_intersection() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.subset_intersection"]], "to_array() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.to_array"]], "to_bool_array() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.to_bool_array"]], "to_set() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.to_set"]], "locate (class in pypath.core.annot)": [[60, "pypath.core.annot.Locate"]], "__init__() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.__init__"]], "add_complexes_by_inference() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.all_complexes"]], "all_entities() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.all_entities"]], "all_mirnas() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.all_mirnas"]], "all_proteins() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.all_proteins"]], "all_refs() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.all_refs"]], "annotate_complex() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.annotate_complex"]], "browse() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.browse"]], "complex_inference() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.complex_inference"]], "coverage() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.coverage"]], "curation_effort() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.curation_effort"]], "get_names() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.get_names"]], "get_reference_set() (pypath.core.annot.locate static method)": [[60, "pypath.core.annot.Locate.get_reference_set"]], "get_subset() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.get_subset"]], "get_subset_bool_array() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.get_subset_bool_array"]], "get_values() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.get_values"]], "labels() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.labels"]], "load() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.load"]], "load_data() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.load_data"]], "load_proteins() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.load_proteins"]], "make_df() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.make_df"]], "numof_entities() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.numof_entities"]], "numof_records() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.numof_records"]], "numof_references() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.numof_references"]], "process() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.process"]], "reload() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.reload"]], "select() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.select"]], "set_method() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.set_method"]], "set_reference_set() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.set_reference_set"]], "show() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.show"]], "subset_intersection() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.subset_intersection"]], "to_array() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.to_array"]], "to_bool_array() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.to_bool_array"]], "to_set() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.to_set"]], "lrdb (class in pypath.core.annot)": [[61, "pypath.core.annot.Lrdb"]], "__init__() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.__init__"]], "add_complexes_by_inference() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.all_complexes"]], "all_entities() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.all_entities"]], "all_mirnas() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.all_mirnas"]], "all_proteins() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.all_proteins"]], "all_refs() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.all_refs"]], "annotate_complex() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.annotate_complex"]], "browse() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.browse"]], "complex_inference() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.complex_inference"]], "coverage() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.coverage"]], "curation_effort() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.curation_effort"]], "get_names() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.get_names"]], "get_reference_set() (pypath.core.annot.lrdb static method)": [[61, "pypath.core.annot.Lrdb.get_reference_set"]], "get_subset() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.get_subset"]], "get_subset_bool_array() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.get_subset_bool_array"]], "get_values() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.get_values"]], "labels() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.labels"]], "load() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.load"]], "load_data() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.load_data"]], "load_proteins() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.load_proteins"]], "make_df() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.make_df"]], "numof_entities() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.numof_entities"]], "numof_records() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.numof_records"]], "numof_references() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.numof_references"]], "process() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.process"]], "reload() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.reload"]], "select() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.select"]], "set_method() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.set_method"]], "set_reference_set() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.set_reference_set"]], "show() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.show"]], "subset_intersection() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.subset_intersection"]], "to_array() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.to_array"]], "to_bool_array() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.to_bool_array"]], "to_set() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.to_set"]], "matrisome (class in pypath.core.annot)": [[62, "pypath.core.annot.Matrisome"]], "__init__() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.__init__"]], "add_complexes_by_inference() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.all_complexes"]], "all_entities() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.all_entities"]], "all_mirnas() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.all_mirnas"]], "all_proteins() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.all_proteins"]], "all_refs() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.all_refs"]], "annotate_complex() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.annotate_complex"]], "browse() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.browse"]], "complex_inference() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.complex_inference"]], "coverage() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.coverage"]], "curation_effort() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.curation_effort"]], "get_names() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.get_names"]], "get_reference_set() (pypath.core.annot.matrisome static method)": [[62, "pypath.core.annot.Matrisome.get_reference_set"]], "get_subset() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.get_subset"]], "get_subset_bool_array() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.get_subset_bool_array"]], "get_values() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.get_values"]], "labels() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.labels"]], "load() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.load"]], "load_data() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.load_data"]], "load_proteins() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.load_proteins"]], "make_df() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.make_df"]], "numof_entities() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.numof_entities"]], "numof_records() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.numof_records"]], "numof_references() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.numof_references"]], "process() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.process"]], "reload() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.reload"]], "select() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.select"]], "set_method() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.set_method"]], "set_reference_set() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.set_reference_set"]], "show() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.show"]], "subset_intersection() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.subset_intersection"]], "to_array() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.to_array"]], "to_bool_array() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.to_bool_array"]], "to_set() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.to_set"]], "matrixdb (class in pypath.core.annot)": [[63, "pypath.core.annot.Matrixdb"]], "__init__() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.__init__"]], "add_complexes_by_inference() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.all_complexes"]], "all_entities() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.all_entities"]], "all_mirnas() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.all_mirnas"]], "all_proteins() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.all_proteins"]], "all_refs() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.all_refs"]], "annotate_complex() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.annotate_complex"]], "browse() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.browse"]], "complex_inference() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.complex_inference"]], "coverage() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.coverage"]], "curation_effort() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.curation_effort"]], "get_names() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.get_names"]], "get_reference_set() (pypath.core.annot.matrixdb static method)": [[63, "pypath.core.annot.Matrixdb.get_reference_set"]], "get_subset() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.get_subset"]], "get_subset_bool_array() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.get_subset_bool_array"]], "get_values() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.get_values"]], "labels() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.labels"]], "load() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.load"]], "load_data() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.load_data"]], "load_proteins() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.load_proteins"]], "make_df() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.make_df"]], "numof_entities() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.numof_entities"]], "numof_records() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.numof_records"]], "numof_references() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.numof_references"]], "process() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.process"]], "reload() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.reload"]], "select() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.select"]], "set_method() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.set_method"]], "set_reference_set() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.set_reference_set"]], "show() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.show"]], "subset_intersection() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.subset_intersection"]], "to_array() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.to_array"]], "to_bool_array() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.to_bool_array"]], "to_set() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.to_set"]], "mcam (class in pypath.core.annot)": [[64, "pypath.core.annot.Mcam"]], "__init__() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.__init__"]], "add_complexes_by_inference() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.all_complexes"]], "all_entities() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.all_entities"]], "all_mirnas() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.all_mirnas"]], "all_proteins() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.all_proteins"]], "all_refs() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.all_refs"]], "annotate_complex() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.annotate_complex"]], "browse() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.browse"]], "complex_inference() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.complex_inference"]], "coverage() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.coverage"]], "curation_effort() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.curation_effort"]], "get_names() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.get_names"]], "get_reference_set() (pypath.core.annot.mcam static method)": [[64, "pypath.core.annot.Mcam.get_reference_set"]], "get_subset() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.get_subset"]], "get_subset_bool_array() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.get_subset_bool_array"]], "get_values() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.get_values"]], "labels() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.labels"]], "load() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.load"]], "load_data() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.load_data"]], "load_proteins() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.load_proteins"]], "make_df() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.make_df"]], "numof_entities() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.numof_entities"]], "numof_records() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.numof_records"]], "numof_references() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.numof_references"]], "process() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.process"]], "reload() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.reload"]], "select() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.select"]], "set_method() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.set_method"]], "set_reference_set() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.set_reference_set"]], "show() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.show"]], "subset_intersection() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.subset_intersection"]], "to_array() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.to_array"]], "to_bool_array() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.to_bool_array"]], "to_set() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.to_set"]], "membranome (class in pypath.core.annot)": [[65, "pypath.core.annot.Membranome"]], "__init__() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.__init__"]], "add_complexes_by_inference() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.all_complexes"]], "all_entities() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.all_entities"]], "all_mirnas() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.all_mirnas"]], "all_proteins() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.all_proteins"]], "all_refs() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.all_refs"]], "annotate_complex() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.annotate_complex"]], "browse() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.browse"]], "complex_inference() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.complex_inference"]], "coverage() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.coverage"]], "curation_effort() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.curation_effort"]], "get_names() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.get_names"]], "get_reference_set() (pypath.core.annot.membranome static method)": [[65, "pypath.core.annot.Membranome.get_reference_set"]], "get_subset() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.get_subset"]], "get_subset_bool_array() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.get_subset_bool_array"]], "get_values() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.get_values"]], "labels() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.labels"]], "load() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.load"]], "load_data() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.load_data"]], "load_proteins() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.load_proteins"]], "make_df() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.make_df"]], "numof_entities() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.numof_entities"]], "numof_records() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.numof_records"]], "numof_references() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.numof_references"]], "process() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.process"]], "reload() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.reload"]], "select() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.select"]], "set_method() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.set_method"]], "set_reference_set() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.set_reference_set"]], "show() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.show"]], "subset_intersection() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.subset_intersection"]], "to_array() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.to_array"]], "to_bool_array() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.to_bool_array"]], "to_set() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.to_set"]], "msigdb (class in pypath.core.annot)": [[66, "pypath.core.annot.Msigdb"]], "__init__() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.__init__"]], "add_complexes_by_inference() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.all_complexes"]], "all_entities() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.all_entities"]], "all_mirnas() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.all_mirnas"]], "all_proteins() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.all_proteins"]], "all_refs() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.all_refs"]], "annotate_complex() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.annotate_complex"]], "browse() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.browse"]], "complex_inference() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.complex_inference"]], "coverage() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.coverage"]], "curation_effort() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.curation_effort"]], "get_names() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.get_names"]], "get_reference_set() (pypath.core.annot.msigdb static method)": [[66, "pypath.core.annot.Msigdb.get_reference_set"]], "get_subset() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.get_subset"]], "get_subset_bool_array() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.get_subset_bool_array"]], "get_values() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.get_values"]], "labels() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.labels"]], "load() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.load"]], "load_data() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.load_data"]], "load_proteins() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.load_proteins"]], "make_df() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.make_df"]], "numof_entities() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.numof_entities"]], "numof_records() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.numof_records"]], "numof_references() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.numof_references"]], "process() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.process"]], "reload() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.reload"]], "select() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.select"]], "set_method() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.set_method"]], "set_reference_set() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.set_reference_set"]], "show() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.show"]], "subset_intersection() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.subset_intersection"]], "to_array() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.to_array"]], "to_bool_array() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.to_bool_array"]], "to_set() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.to_set"]], "netpathpathways (class in pypath.core.annot)": [[67, "pypath.core.annot.NetpathPathways"]], "__init__() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.__init__"]], "add_complexes_by_inference() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.all_complexes"]], "all_entities() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.all_entities"]], "all_mirnas() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.all_mirnas"]], "all_proteins() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.all_proteins"]], "all_refs() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.all_refs"]], "annotate_complex() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.annotate_complex"]], "browse() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.browse"]], "complex_inference() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.complex_inference"]], "coverage() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.coverage"]], "curation_effort() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.curation_effort"]], "get_names() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.get_names"]], "get_reference_set() (pypath.core.annot.netpathpathways static method)": [[67, "pypath.core.annot.NetpathPathways.get_reference_set"]], "get_subset() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.get_subset"]], "get_subset_bool_array() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.get_subset_bool_array"]], "get_values() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.get_values"]], "labels() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.labels"]], "load() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.load"]], "load_data() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.load_data"]], "load_proteins() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.load_proteins"]], "make_df() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.make_df"]], "numof_entities() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.numof_entities"]], "numof_records() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.numof_records"]], "numof_references() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.numof_references"]], "process() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.process"]], "reload() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.reload"]], "select() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.select"]], "set_method() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.set_method"]], "set_reference_set() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.set_reference_set"]], "show() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.show"]], "subset_intersection() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.subset_intersection"]], "to_array() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.to_array"]], "to_bool_array() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.to_bool_array"]], "to_set() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.to_set"]], "opm (class in pypath.core.annot)": [[68, "pypath.core.annot.Opm"]], "__init__() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.__init__"]], "add_complexes_by_inference() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.all_complexes"]], "all_entities() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.all_entities"]], "all_mirnas() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.all_mirnas"]], "all_proteins() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.all_proteins"]], "all_refs() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.all_refs"]], "annotate_complex() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.annotate_complex"]], "browse() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.browse"]], "complex_inference() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.complex_inference"]], "coverage() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.coverage"]], "curation_effort() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.curation_effort"]], "get_names() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.get_names"]], "get_reference_set() (pypath.core.annot.opm static method)": [[68, "pypath.core.annot.Opm.get_reference_set"]], "get_subset() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.get_subset"]], "get_subset_bool_array() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.get_subset_bool_array"]], "get_values() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.get_values"]], "labels() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.labels"]], "load() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.load"]], "load_data() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.load_data"]], "load_proteins() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.load_proteins"]], "make_df() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.make_df"]], "numof_entities() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.numof_entities"]], "numof_records() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.numof_records"]], "numof_references() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.numof_references"]], "process() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.process"]], "reload() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.reload"]], "select() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.select"]], "set_method() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.set_method"]], "set_reference_set() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.set_reference_set"]], "show() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.show"]], "subset_intersection() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.subset_intersection"]], "to_array() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.to_array"]], "to_bool_array() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.to_bool_array"]], "to_set() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.to_set"]], "panglaodb (class in pypath.core.annot)": [[69, "pypath.core.annot.Panglaodb"]], "__init__() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.__init__"]], "add_complexes_by_inference() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.all_complexes"]], "all_entities() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.all_entities"]], "all_mirnas() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.all_mirnas"]], "all_proteins() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.all_proteins"]], "all_refs() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.all_refs"]], "annotate_complex() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.annotate_complex"]], "browse() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.browse"]], "complex_inference() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.complex_inference"]], "coverage() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.coverage"]], "curation_effort() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.curation_effort"]], "get_names() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.get_names"]], "get_reference_set() (pypath.core.annot.panglaodb static method)": [[69, "pypath.core.annot.Panglaodb.get_reference_set"]], "get_subset() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.get_subset"]], "get_subset_bool_array() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.get_subset_bool_array"]], "get_values() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.get_values"]], "labels() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.labels"]], "load() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.load"]], "load_data() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.load_data"]], "load_proteins() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.load_proteins"]], "make_df() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.make_df"]], "numof_entities() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.numof_entities"]], "numof_records() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.numof_records"]], "numof_references() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.numof_references"]], "process() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.process"]], "reload() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.reload"]], "select() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.select"]], "set_method() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.set_method"]], "set_reference_set() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.set_reference_set"]], "show() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.show"]], "subset_intersection() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.subset_intersection"]], "to_array() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.to_array"]], "to_bool_array() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.to_bool_array"]], "to_set() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.to_set"]], "phobius (class in pypath.core.annot)": [[70, "pypath.core.annot.Phobius"]], "__init__() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.__init__"]], "add_complexes_by_inference() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.all_complexes"]], "all_entities() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.all_entities"]], "all_mirnas() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.all_mirnas"]], "all_proteins() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.all_proteins"]], "all_refs() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.all_refs"]], "annotate_complex() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.annotate_complex"]], "browse() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.browse"]], "complex_inference() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.complex_inference"]], "coverage() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.coverage"]], "curation_effort() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.curation_effort"]], "get_names() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.get_names"]], "get_reference_set() (pypath.core.annot.phobius static method)": [[70, "pypath.core.annot.Phobius.get_reference_set"]], "get_subset() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.get_subset"]], "get_subset_bool_array() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.get_subset_bool_array"]], "get_values() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.get_values"]], "labels() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.labels"]], "load() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.load"]], "load_data() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.load_data"]], "load_proteins() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.load_proteins"]], "make_df() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.make_df"]], "numof_entities() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.numof_entities"]], "numof_records() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.numof_records"]], "numof_references() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.numof_references"]], "process() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.process"]], "reload() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.reload"]], "select() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.select"]], "set_method() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.set_method"]], "set_reference_set() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.set_reference_set"]], "show() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.show"]], "subset_intersection() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.subset_intersection"]], "to_array() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.to_array"]], "to_bool_array() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.to_bool_array"]], "to_set() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.to_set"]], "phosphatome (class in pypath.core.annot)": [[71, "pypath.core.annot.Phosphatome"]], "__init__() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.__init__"]], "add_complexes_by_inference() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.all_complexes"]], "all_entities() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.all_entities"]], "all_mirnas() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.all_mirnas"]], "all_proteins() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.all_proteins"]], "all_refs() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.all_refs"]], "annotate_complex() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.annotate_complex"]], "browse() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.browse"]], "complex_inference() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.complex_inference"]], "coverage() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.coverage"]], "curation_effort() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.curation_effort"]], "get_names() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.get_names"]], "get_reference_set() (pypath.core.annot.phosphatome static method)": [[71, "pypath.core.annot.Phosphatome.get_reference_set"]], "get_subset() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.get_subset"]], "get_subset_bool_array() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.get_subset_bool_array"]], "get_values() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.get_values"]], "labels() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.labels"]], "load() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.load"]], "load_data() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.load_data"]], "load_proteins() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.load_proteins"]], "make_df() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.make_df"]], "numof_entities() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.numof_entities"]], "numof_records() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.numof_records"]], "numof_references() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.numof_references"]], "process() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.process"]], "reload() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.reload"]], "select() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.select"]], "set_method() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.set_method"]], "set_reference_set() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.set_reference_set"]], "show() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.show"]], "subset_intersection() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.subset_intersection"]], "to_array() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.to_array"]], "to_bool_array() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.to_bool_array"]], "to_set() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.to_set"]], "progeny (class in pypath.core.annot)": [[72, "pypath.core.annot.Progeny"]], "__init__() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.__init__"]], "add_complexes_by_inference() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.all_complexes"]], "all_entities() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.all_entities"]], "all_mirnas() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.all_mirnas"]], "all_proteins() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.all_proteins"]], "all_refs() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.all_refs"]], "annotate_complex() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.annotate_complex"]], "browse() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.browse"]], "complex_inference() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.complex_inference"]], "coverage() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.coverage"]], "curation_effort() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.curation_effort"]], "get_names() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.get_names"]], "get_reference_set() (pypath.core.annot.progeny static method)": [[72, "pypath.core.annot.Progeny.get_reference_set"]], "get_subset() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.get_subset"]], "get_subset_bool_array() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.get_subset_bool_array"]], "get_values() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.get_values"]], "labels() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.labels"]], "load() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.load"]], "load_data() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.load_data"]], "load_proteins() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.load_proteins"]], "make_df() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.make_df"]], "numof_entities() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.numof_entities"]], "numof_records() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.numof_records"]], "numof_references() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.numof_references"]], "process() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.process"]], "reload() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.reload"]], "select() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.select"]], "set_method() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.set_method"]], "set_reference_set() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.set_reference_set"]], "show() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.show"]], "subset_intersection() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.subset_intersection"]], "to_array() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.to_array"]], "to_bool_array() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.to_bool_array"]], "to_set() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.to_set"]], "ramilowski2015 (class in pypath.core.annot)": [[73, "pypath.core.annot.Ramilowski2015"]], "__init__() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.__init__"]], "add_complexes_by_inference() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.all_complexes"]], "all_entities() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.all_entities"]], "all_mirnas() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.all_mirnas"]], "all_proteins() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.all_proteins"]], "all_refs() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.all_refs"]], "annotate_complex() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.annotate_complex"]], "browse() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.browse"]], "complex_inference() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.complex_inference"]], "coverage() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.coverage"]], "curation_effort() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.curation_effort"]], "get_names() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.get_names"]], "get_reference_set() (pypath.core.annot.ramilowski2015 static method)": [[73, "pypath.core.annot.Ramilowski2015.get_reference_set"]], "get_subset() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.get_subset"]], "get_subset_bool_array() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.get_subset_bool_array"]], "get_values() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.get_values"]], "labels() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.labels"]], "load() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.load"]], "load_data() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.load_data"]], "load_proteins() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.load_proteins"]], "make_df() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.make_df"]], "numof_entities() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.numof_entities"]], "numof_records() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.numof_records"]], "numof_references() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.numof_references"]], "process() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.process"]], "reload() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.reload"]], "select() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.select"]], "set_method() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.set_method"]], "set_reference_set() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.set_reference_set"]], "show() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.show"]], "subset_intersection() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.subset_intersection"]], "to_array() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.to_array"]], "to_bool_array() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.to_bool_array"]], "to_set() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.to_set"]], "ramilowski2015location (class in pypath.core.annot)": [[74, "pypath.core.annot.Ramilowski2015Location"]], "__init__() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.__init__"]], "add_complexes_by_inference() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.all_complexes"]], "all_entities() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.all_entities"]], "all_mirnas() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.all_mirnas"]], "all_proteins() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.all_proteins"]], "all_refs() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.all_refs"]], "annotate_complex() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.annotate_complex"]], "browse() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.browse"]], "complex_inference() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.complex_inference"]], "coverage() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.coverage"]], "curation_effort() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.curation_effort"]], "get_names() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.get_names"]], "get_reference_set() (pypath.core.annot.ramilowski2015location static method)": [[74, "pypath.core.annot.Ramilowski2015Location.get_reference_set"]], "get_subset() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.get_subset"]], "get_subset_bool_array() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.get_subset_bool_array"]], "get_values() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.get_values"]], "labels() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.labels"]], "load() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.load"]], "load_data() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.load_data"]], "load_proteins() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.load_proteins"]], "make_df() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.make_df"]], "numof_entities() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.numof_entities"]], "numof_records() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.numof_records"]], "numof_references() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.numof_references"]], "process() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.process"]], "reload() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.reload"]], "select() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.select"]], "set_method() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.set_method"]], "set_reference_set() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.set_reference_set"]], "show() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.show"]], "subset_intersection() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.subset_intersection"]], "to_array() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.to_array"]], "to_bool_array() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.to_bool_array"]], "to_set() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.to_set"]], "scconnect (class in pypath.core.annot)": [[75, "pypath.core.annot.Scconnect"]], "__init__() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.__init__"]], "add_complexes_by_inference() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.all_complexes"]], "all_entities() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.all_entities"]], "all_mirnas() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.all_mirnas"]], "all_proteins() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.all_proteins"]], "all_refs() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.all_refs"]], "annotate_complex() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.annotate_complex"]], "browse() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.browse"]], "complex_inference() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.complex_inference"]], "coverage() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.coverage"]], "curation_effort() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.curation_effort"]], "get_names() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.get_names"]], "get_reference_set() (pypath.core.annot.scconnect static method)": [[75, "pypath.core.annot.Scconnect.get_reference_set"]], "get_subset() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.get_subset"]], "get_subset_bool_array() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.get_subset_bool_array"]], "get_values() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.get_values"]], "labels() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.labels"]], "load() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.load"]], "load_data() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.load_data"]], "load_proteins() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.load_proteins"]], "make_df() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.make_df"]], "numof_entities() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.numof_entities"]], "numof_records() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.numof_records"]], "numof_references() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.numof_references"]], "process() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.process"]], "reload() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.reload"]], "select() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.select"]], "set_method() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.set_method"]], "set_reference_set() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.set_reference_set"]], "show() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.show"]], "subset_intersection() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.subset_intersection"]], "to_array() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.to_array"]], "to_bool_array() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.to_bool_array"]], "to_set() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.to_set"]], "scconnectcomplex (class in pypath.core.annot)": [[76, "pypath.core.annot.ScconnectComplex"]], "__init__() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.__init__"]], "add_complexes_by_inference() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.all_complexes"]], "all_entities() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.all_entities"]], "all_mirnas() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.all_mirnas"]], "all_proteins() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.all_proteins"]], "all_refs() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.all_refs"]], "annotate_complex() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.annotate_complex"]], "browse() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.browse"]], "complex_inference() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.complex_inference"]], "coverage() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.coverage"]], "curation_effort() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.curation_effort"]], "get_names() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.get_names"]], "get_reference_set() (pypath.core.annot.scconnectcomplex static method)": [[76, "pypath.core.annot.ScconnectComplex.get_reference_set"]], "get_subset() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.get_subset"]], "get_subset_bool_array() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.get_subset_bool_array"]], "get_values() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.get_values"]], "labels() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.labels"]], "load() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.load"]], "load_data() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.load_data"]], "load_proteins() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.load_proteins"]], "make_df() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.make_df"]], "numof_entities() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.numof_entities"]], "numof_records() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.numof_records"]], "numof_references() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.numof_references"]], "process() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.process"]], "reload() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.reload"]], "select() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.select"]], "set_method() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.set_method"]], "set_reference_set() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.set_reference_set"]], "show() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.show"]], "subset_intersection() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.subset_intersection"]], "to_array() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.to_array"]], "to_bool_array() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.to_bool_array"]], "to_set() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.to_set"]], "signalinkfunctions (class in pypath.core.annot)": [[77, "pypath.core.annot.SignalinkFunctions"]], "__init__() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.__init__"]], "add_complexes_by_inference() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.all_complexes"]], "all_entities() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.all_entities"]], "all_mirnas() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.all_mirnas"]], "all_proteins() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.all_proteins"]], "all_refs() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.all_refs"]], "annotate_complex() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.annotate_complex"]], "browse() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.browse"]], "complex_inference() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.complex_inference"]], "coverage() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.coverage"]], "curation_effort() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.curation_effort"]], "get_names() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.get_names"]], "get_reference_set() (pypath.core.annot.signalinkfunctions static method)": [[77, "pypath.core.annot.SignalinkFunctions.get_reference_set"]], "get_subset() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.get_subset"]], "get_subset_bool_array() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.get_subset_bool_array"]], "get_values() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.get_values"]], "labels() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.labels"]], "load() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.load"]], "load_data() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.load_data"]], "load_proteins() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.load_proteins"]], "make_df() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.make_df"]], "numof_entities() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.numof_entities"]], "numof_records() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.numof_records"]], "numof_references() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.numof_references"]], "process() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.process"]], "reload() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.reload"]], "select() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.select"]], "set_method() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.set_method"]], "set_reference_set() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.set_reference_set"]], "show() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.show"]], "subset_intersection() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.subset_intersection"]], "to_array() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.to_array"]], "to_bool_array() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.to_bool_array"]], "to_set() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.to_set"]], "signalinkpathways (class in pypath.core.annot)": [[78, "pypath.core.annot.SignalinkPathways"]], "__init__() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.__init__"]], "add_complexes_by_inference() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.all_complexes"]], "all_entities() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.all_entities"]], "all_mirnas() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.all_mirnas"]], "all_proteins() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.all_proteins"]], "all_refs() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.all_refs"]], "annotate_complex() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.annotate_complex"]], "browse() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.browse"]], "complex_inference() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.complex_inference"]], "coverage() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.coverage"]], "curation_effort() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.curation_effort"]], "get_names() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.get_names"]], "get_reference_set() (pypath.core.annot.signalinkpathways static method)": [[78, "pypath.core.annot.SignalinkPathways.get_reference_set"]], "get_subset() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.get_subset"]], "get_subset_bool_array() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.get_subset_bool_array"]], "get_values() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.get_values"]], "labels() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.labels"]], "load() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.load"]], "load_data() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.load_data"]], "load_proteins() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.load_proteins"]], "make_df() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.make_df"]], "numof_entities() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.numof_entities"]], "numof_records() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.numof_records"]], "numof_references() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.numof_references"]], "process() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.process"]], "reload() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.reload"]], "select() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.select"]], "set_method() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.set_method"]], "set_reference_set() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.set_reference_set"]], "show() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.show"]], "subset_intersection() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.subset_intersection"]], "to_array() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.to_array"]], "to_bool_array() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.to_bool_array"]], "to_set() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.to_set"]], "signorpathways (class in pypath.core.annot)": [[79, "pypath.core.annot.SignorPathways"]], "__init__() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.__init__"]], "add_complexes_by_inference() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.all_complexes"]], "all_entities() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.all_entities"]], "all_mirnas() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.all_mirnas"]], "all_proteins() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.all_proteins"]], "all_refs() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.all_refs"]], "annotate_complex() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.annotate_complex"]], "browse() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.browse"]], "complex_inference() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.complex_inference"]], "coverage() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.coverage"]], "curation_effort() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.curation_effort"]], "get_names() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.get_names"]], "get_reference_set() (pypath.core.annot.signorpathways static method)": [[79, "pypath.core.annot.SignorPathways.get_reference_set"]], "get_subset() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.get_subset"]], "get_subset_bool_array() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.get_subset_bool_array"]], "get_values() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.get_values"]], "labels() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.labels"]], "load() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.load"]], "load_data() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.load_data"]], "load_proteins() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.load_proteins"]], "make_df() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.make_df"]], "numof_entities() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.numof_entities"]], "numof_records() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.numof_records"]], "numof_references() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.numof_references"]], "process() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.process"]], "reload() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.reload"]], "select() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.select"]], "set_method() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.set_method"]], "set_reference_set() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.set_reference_set"]], "show() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.show"]], "subset_intersection() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.subset_intersection"]], "to_array() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.to_array"]], "to_bool_array() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.to_bool_array"]], "to_set() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.to_set"]], "surfaceome (class in pypath.core.annot)": [[80, "pypath.core.annot.Surfaceome"]], "__init__() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.__init__"]], "add_complexes_by_inference() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.all_complexes"]], "all_entities() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.all_entities"]], "all_mirnas() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.all_mirnas"]], "all_proteins() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.all_proteins"]], "all_refs() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.all_refs"]], "annotate_complex() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.annotate_complex"]], "browse() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.browse"]], "complex_inference() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.complex_inference"]], "coverage() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.coverage"]], "curation_effort() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.curation_effort"]], "get_names() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.get_names"]], "get_reference_set() (pypath.core.annot.surfaceome static method)": [[80, "pypath.core.annot.Surfaceome.get_reference_set"]], "get_subset() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.get_subset"]], "get_subset_bool_array() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.get_subset_bool_array"]], "get_values() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.get_values"]], "labels() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.labels"]], "load() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.load"]], "load_data() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.load_data"]], "load_proteins() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.load_proteins"]], "make_df() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.make_df"]], "numof_entities() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.numof_entities"]], "numof_records() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.numof_records"]], "numof_references() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.numof_references"]], "process() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.process"]], "reload() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.reload"]], "select() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.select"]], "set_method() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.set_method"]], "set_reference_set() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.set_reference_set"]], "show() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.show"]], "subset_intersection() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.subset_intersection"]], "to_array() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.to_array"]], "to_bool_array() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.to_bool_array"]], "to_set() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.to_set"]], "talklr (class in pypath.core.annot)": [[81, "pypath.core.annot.Talklr"]], "__init__() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.__init__"]], "add_complexes_by_inference() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.all_complexes"]], "all_entities() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.all_entities"]], "all_mirnas() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.all_mirnas"]], "all_proteins() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.all_proteins"]], "all_refs() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.all_refs"]], "annotate_complex() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.annotate_complex"]], "browse() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.browse"]], "complex_inference() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.complex_inference"]], "coverage() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.coverage"]], "curation_effort() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.curation_effort"]], "get_names() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.get_names"]], "get_reference_set() (pypath.core.annot.talklr static method)": [[81, "pypath.core.annot.Talklr.get_reference_set"]], "get_subset() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.get_subset"]], "get_subset_bool_array() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.get_subset_bool_array"]], "get_values() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.get_values"]], "labels() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.labels"]], "load() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.load"]], "load_data() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.load_data"]], "load_proteins() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.load_proteins"]], "make_df() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.make_df"]], "numof_entities() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.numof_entities"]], "numof_records() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.numof_records"]], "numof_references() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.numof_references"]], "process() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.process"]], "reload() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.reload"]], "select() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.select"]], "set_method() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.set_method"]], "set_reference_set() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.set_reference_set"]], "show() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.show"]], "subset_intersection() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.subset_intersection"]], "to_array() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.to_array"]], "to_bool_array() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.to_bool_array"]], "to_set() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.to_set"]], "tcdb (class in pypath.core.annot)": [[82, "pypath.core.annot.Tcdb"]], "__init__() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.__init__"]], "add_complexes_by_inference() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.all_complexes"]], "all_entities() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.all_entities"]], "all_mirnas() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.all_mirnas"]], "all_proteins() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.all_proteins"]], "all_refs() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.all_refs"]], "annotate_complex() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.annotate_complex"]], "browse() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.browse"]], "complex_inference() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.complex_inference"]], "coverage() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.coverage"]], "curation_effort() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.curation_effort"]], "get_names() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.get_names"]], "get_reference_set() (pypath.core.annot.tcdb static method)": [[82, "pypath.core.annot.Tcdb.get_reference_set"]], "get_subset() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.get_subset"]], "get_subset_bool_array() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.get_subset_bool_array"]], "get_values() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.get_values"]], "labels() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.labels"]], "load() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.load"]], "load_data() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.load_data"]], "load_proteins() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.load_proteins"]], "make_df() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.make_df"]], "numof_entities() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.numof_entities"]], "numof_records() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.numof_records"]], "numof_references() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.numof_references"]], "process() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.process"]], "reload() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.reload"]], "select() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.select"]], "set_method() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.set_method"]], "set_reference_set() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.set_reference_set"]], "show() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.show"]], "subset_intersection() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.subset_intersection"]], "to_array() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.to_array"]], "to_bool_array() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.to_bool_array"]], "to_set() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.to_set"]], "tfcensus (class in pypath.core.annot)": [[83, "pypath.core.annot.Tfcensus"]], "__init__() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.__init__"]], "add_complexes_by_inference() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.all_complexes"]], "all_entities() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.all_entities"]], "all_mirnas() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.all_mirnas"]], "all_proteins() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.all_proteins"]], "all_refs() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.all_refs"]], "annotate_complex() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.annotate_complex"]], "browse() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.browse"]], "complex_inference() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.complex_inference"]], "coverage() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.coverage"]], "curation_effort() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.curation_effort"]], "get_names() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.get_names"]], "get_reference_set() (pypath.core.annot.tfcensus static method)": [[83, "pypath.core.annot.Tfcensus.get_reference_set"]], "get_subset() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.get_subset"]], "get_subset_bool_array() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.get_subset_bool_array"]], "get_values() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.get_values"]], "labels() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.labels"]], "load() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.load"]], "load_data() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.load_data"]], "load_proteins() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.load_proteins"]], "make_df() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.make_df"]], "numof_entities() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.numof_entities"]], "numof_records() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.numof_records"]], "numof_references() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.numof_references"]], "process() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.process"]], "reload() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.reload"]], "select() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.select"]], "set_method() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.set_method"]], "set_reference_set() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.set_reference_set"]], "show() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.show"]], "subset_intersection() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.subset_intersection"]], "to_array() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.to_array"]], "to_bool_array() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.to_bool_array"]], "to_set() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.to_set"]], "topdb (class in pypath.core.annot)": [[84, "pypath.core.annot.Topdb"]], "__init__() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.__init__"]], "add_complexes_by_inference() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.all_complexes"]], "all_entities() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.all_entities"]], "all_mirnas() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.all_mirnas"]], "all_proteins() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.all_proteins"]], "all_refs() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.all_refs"]], "annotate_complex() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.annotate_complex"]], "browse() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.browse"]], "complex_inference() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.complex_inference"]], "coverage() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.coverage"]], "curation_effort() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.curation_effort"]], "get_names() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.get_names"]], "get_reference_set() (pypath.core.annot.topdb static method)": [[84, "pypath.core.annot.Topdb.get_reference_set"]], "get_subset() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.get_subset"]], "get_subset_bool_array() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.get_subset_bool_array"]], "get_values() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.get_values"]], "labels() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.labels"]], "load() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.load"]], "load_data() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.load_data"]], "load_proteins() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.load_proteins"]], "make_df() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.make_df"]], "numof_entities() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.numof_entities"]], "numof_records() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.numof_records"]], "numof_references() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.numof_references"]], "process() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.process"]], "reload() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.reload"]], "select() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.select"]], "set_method() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.set_method"]], "set_reference_set() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.set_reference_set"]], "show() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.show"]], "subset_intersection() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.subset_intersection"]], "to_array() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.to_array"]], "to_bool_array() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.to_bool_array"]], "to_set() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.to_set"]], "uniprotfamilies (class in pypath.core.annot)": [[85, "pypath.core.annot.UniprotFamilies"]], "__init__() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.__init__"]], "add_complexes_by_inference() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.all_complexes"]], "all_entities() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.all_entities"]], "all_mirnas() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.all_mirnas"]], "all_proteins() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.all_proteins"]], "all_refs() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.all_refs"]], "annotate_complex() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.annotate_complex"]], "browse() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.browse"]], "complex_inference() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.complex_inference"]], "coverage() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.coverage"]], "curation_effort() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.curation_effort"]], "get_names() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.get_names"]], "get_reference_set() (pypath.core.annot.uniprotfamilies static method)": [[85, "pypath.core.annot.UniprotFamilies.get_reference_set"]], "get_subset() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.get_subset"]], "get_subset_bool_array() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.get_subset_bool_array"]], "get_values() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.get_values"]], "labels() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.labels"]], "load() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.load"]], "load_data() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.load_data"]], "load_proteins() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.load_proteins"]], "make_df() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.make_df"]], "numof_entities() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.numof_entities"]], "numof_records() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.numof_records"]], "numof_references() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.numof_references"]], "process() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.process"]], "reload() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.reload"]], "select() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.select"]], "set_method() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.set_method"]], "set_reference_set() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.set_reference_set"]], "show() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.show"]], "subset_intersection() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.subset_intersection"]], "to_array() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.to_array"]], "to_bool_array() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.to_bool_array"]], "to_set() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.to_set"]], "uniprotkeywords (class in pypath.core.annot)": [[86, "pypath.core.annot.UniprotKeywords"]], "__init__() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.__init__"]], "add_complexes_by_inference() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.all_complexes"]], "all_entities() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.all_entities"]], "all_mirnas() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.all_mirnas"]], "all_proteins() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.all_proteins"]], "all_refs() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.all_refs"]], "annotate_complex() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.annotate_complex"]], "browse() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.browse"]], "complex_inference() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.complex_inference"]], "coverage() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.coverage"]], "curation_effort() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.curation_effort"]], "get_names() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.get_names"]], "get_reference_set() (pypath.core.annot.uniprotkeywords static method)": [[86, "pypath.core.annot.UniprotKeywords.get_reference_set"]], "get_subset() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.get_subset"]], "get_subset_bool_array() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.get_subset_bool_array"]], "get_values() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.get_values"]], "labels() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.labels"]], "load() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.load"]], "load_data() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.load_data"]], "load_proteins() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.load_proteins"]], "make_df() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.make_df"]], "numof_entities() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.numof_entities"]], "numof_records() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.numof_records"]], "numof_references() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.numof_references"]], "process() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.process"]], "reload() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.reload"]], "select() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.select"]], "set_method() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.set_method"]], "set_reference_set() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.set_reference_set"]], "show() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.show"]], "subset_intersection() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.subset_intersection"]], "to_array() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.to_array"]], "to_bool_array() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.to_bool_array"]], "to_set() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.to_set"]], "uniprotlocations (class in pypath.core.annot)": [[87, "pypath.core.annot.UniprotLocations"]], "__init__() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.__init__"]], "add_complexes_by_inference() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.all_complexes"]], "all_entities() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.all_entities"]], "all_mirnas() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.all_mirnas"]], "all_proteins() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.all_proteins"]], "all_refs() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.all_refs"]], "annotate_complex() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.annotate_complex"]], "browse() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.browse"]], "complex_inference() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.complex_inference"]], "coverage() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.coverage"]], "curation_effort() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.curation_effort"]], "get_names() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.get_names"]], "get_reference_set() (pypath.core.annot.uniprotlocations static method)": [[87, "pypath.core.annot.UniprotLocations.get_reference_set"]], "get_subset() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.get_subset"]], "get_subset_bool_array() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.get_subset_bool_array"]], "get_values() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.get_values"]], "labels() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.labels"]], "load() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.load"]], "load_data() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.load_data"]], "load_proteins() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.load_proteins"]], "make_df() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.make_df"]], "numof_entities() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.numof_entities"]], "numof_records() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.numof_records"]], "numof_references() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.numof_references"]], "process() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.process"]], "reload() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.reload"]], "select() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.select"]], "set_method() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.set_method"]], "set_reference_set() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.set_reference_set"]], "show() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.show"]], "subset_intersection() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.subset_intersection"]], "to_array() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.to_array"]], "to_bool_array() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.to_bool_array"]], "to_set() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.to_set"]], "uniprottissues (class in pypath.core.annot)": [[88, "pypath.core.annot.UniprotTissues"]], "__init__() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.__init__"]], "add_complexes_by_inference() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.all_complexes"]], "all_entities() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.all_entities"]], "all_mirnas() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.all_mirnas"]], "all_proteins() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.all_proteins"]], "all_refs() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.all_refs"]], "annotate_complex() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.annotate_complex"]], "browse() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.browse"]], "complex_inference() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.complex_inference"]], "coverage() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.coverage"]], "curation_effort() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.curation_effort"]], "get_names() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.get_names"]], "get_reference_set() (pypath.core.annot.uniprottissues static method)": [[88, "pypath.core.annot.UniprotTissues.get_reference_set"]], "get_subset() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.get_subset"]], "get_subset_bool_array() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.get_subset_bool_array"]], "get_values() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.get_values"]], "labels() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.labels"]], "load() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.load"]], "load_data() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.load_data"]], "load_proteins() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.load_proteins"]], "make_df() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.make_df"]], "numof_entities() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.numof_entities"]], "numof_records() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.numof_records"]], "numof_references() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.numof_references"]], "process() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.process"]], "reload() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.reload"]], "select() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.select"]], "set_method() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.set_method"]], "set_reference_set() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.set_reference_set"]], "show() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.show"]], "subset_intersection() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.subset_intersection"]], "to_array() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.to_array"]], "to_bool_array() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.to_bool_array"]], "to_set() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.to_set"]], "uniprottopologies (class in pypath.core.annot)": [[89, "pypath.core.annot.UniprotTopologies"]], "__init__() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.__init__"]], "add_complexes_by_inference() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.all_complexes"]], "all_entities() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.all_entities"]], "all_mirnas() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.all_mirnas"]], "all_proteins() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.all_proteins"]], "all_refs() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.all_refs"]], "annotate_complex() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.annotate_complex"]], "browse() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.browse"]], "complex_inference() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.complex_inference"]], "coverage() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.coverage"]], "curation_effort() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.curation_effort"]], "get_names() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.get_names"]], "get_reference_set() (pypath.core.annot.uniprottopologies static method)": [[89, "pypath.core.annot.UniprotTopologies.get_reference_set"]], "get_subset() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.get_subset"]], "get_subset_bool_array() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.get_subset_bool_array"]], "get_values() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.get_values"]], "labels() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.labels"]], "load() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.load"]], "load_data() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.load_data"]], "load_proteins() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.load_proteins"]], "make_df() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.make_df"]], "numof_entities() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.numof_entities"]], "numof_records() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.numof_records"]], "numof_references() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.numof_references"]], "process() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.process"]], "reload() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.reload"]], "select() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.select"]], "set_method() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.set_method"]], "set_reference_set() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.set_reference_set"]], "show() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.show"]], "subset_intersection() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.subset_intersection"]], "to_array() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.to_array"]], "to_bool_array() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.to_bool_array"]], "to_set() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.to_set"]], "vesiclepedia (class in pypath.core.annot)": [[90, "pypath.core.annot.Vesiclepedia"]], "__init__() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.__init__"]], "add_complexes_by_inference() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.all_complexes"]], "all_entities() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.all_entities"]], "all_mirnas() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.all_mirnas"]], "all_proteins() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.all_proteins"]], "all_refs() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.all_refs"]], "annotate_complex() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.annotate_complex"]], "browse() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.browse"]], "complex_inference() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.complex_inference"]], "coverage() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.coverage"]], "curation_effort() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.curation_effort"]], "get_names() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.get_names"]], "get_reference_set() (pypath.core.annot.vesiclepedia static method)": [[90, "pypath.core.annot.Vesiclepedia.get_reference_set"]], "get_subset() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.get_subset"]], "get_subset_bool_array() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.get_subset_bool_array"]], "get_values() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.get_values"]], "labels() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.labels"]], "load() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.load"]], "load_data() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.load_data"]], "load_proteins() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.load_proteins"]], "make_df() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.make_df"]], "numof_entities() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.numof_entities"]], "numof_records() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.numof_records"]], "numof_references() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.numof_references"]], "process() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.process"]], "reload() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.reload"]], "select() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.select"]], "set_method() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.set_method"]], "set_reference_set() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.set_reference_set"]], "show() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.show"]], "subset_intersection() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.subset_intersection"]], "to_array() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.to_array"]], "to_bool_array() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.to_bool_array"]], "to_set() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.to_set"]], "wang (class in pypath.core.annot)": [[91, "pypath.core.annot.Wang"]], "__init__() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.__init__"]], "add_complexes_by_inference() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.all_complexes"]], "all_entities() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.all_entities"]], "all_mirnas() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.all_mirnas"]], "all_proteins() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.all_proteins"]], "all_refs() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.all_refs"]], "annotate_complex() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.annotate_complex"]], "browse() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.browse"]], "complex_inference() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.complex_inference"]], "coverage() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.coverage"]], "curation_effort() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.curation_effort"]], "get_names() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.get_names"]], "get_reference_set() (pypath.core.annot.wang static method)": [[91, "pypath.core.annot.Wang.get_reference_set"]], "get_subset() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.get_subset"]], "get_subset_bool_array() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.get_subset_bool_array"]], "get_values() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.get_values"]], "labels() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.labels"]], "load() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.load"]], "load_data() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.load_data"]], "load_proteins() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.load_proteins"]], "make_df() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.make_df"]], "numof_entities() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.numof_entities"]], "numof_records() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.numof_records"]], "numof_references() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.numof_references"]], "process() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.process"]], "reload() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.reload"]], "select() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.select"]], "set_method() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.set_method"]], "set_reference_set() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.set_reference_set"]], "show() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.show"]], "subset_intersection() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.subset_intersection"]], "to_array() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.to_array"]], "to_bool_array() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.to_bool_array"]], "to_set() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.to_set"]], "zhong2015 (class in pypath.core.annot)": [[92, "pypath.core.annot.Zhong2015"]], "__init__() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.__init__"]], "add_complexes_by_inference() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.all_complexes"]], "all_entities() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.all_entities"]], "all_mirnas() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.all_mirnas"]], "all_proteins() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.all_proteins"]], "all_refs() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.all_refs"]], "annotate_complex() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.annotate_complex"]], "browse() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.browse"]], "complex_inference() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.complex_inference"]], "coverage() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.coverage"]], "curation_effort() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.curation_effort"]], "get_names() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.get_names"]], "get_reference_set() (pypath.core.annot.zhong2015 static method)": [[92, "pypath.core.annot.Zhong2015.get_reference_set"]], "get_subset() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.get_subset"]], "get_subset_bool_array() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.get_subset_bool_array"]], "get_values() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.get_values"]], "labels() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.labels"]], "load() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.load"]], "load_data() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.load_data"]], "load_proteins() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.load_proteins"]], "make_df() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.make_df"]], "numof_entities() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.numof_entities"]], "numof_records() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.numof_records"]], "numof_references() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.numof_references"]], "process() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.process"]], "reload() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.reload"]], "select() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.select"]], "set_method() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.set_method"]], "set_reference_set() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.set_reference_set"]], "show() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.show"]], "subset_intersection() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.subset_intersection"]], "to_array() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.to_array"]], "to_bool_array() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.to_bool_array"]], "to_set() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.to_set"]], "get_db() (in module pypath.core.annot)": [[93, "pypath.core.annot.get_db"]], "init_db() (in module pypath.core.annot)": [[94, "pypath.core.annot.init_db"]], "pypath.core.attrs": [[95, "module-pypath.core.attrs"]], "attributehandler (class in pypath.core.attrs)": [[96, "pypath.core.attrs.AttributeHandler"]], "__init__() (pypath.core.attrs.attributehandler method)": [[96, "pypath.core.attrs.AttributeHandler.__init__"]], "serialize() (pypath.core.attrs.attributehandler method)": [[96, "pypath.core.attrs.AttributeHandler.serialize"]], "update_attrs() (pypath.core.attrs.attributehandler method)": [[96, "pypath.core.attrs.AttributeHandler.update_attrs"]], "pypath.core.common": [[97, "module-pypath.core.common"]], "filter_network_df() (in module pypath.core.common)": [[98, "pypath.core.common.filter_network_df"]], "pypath.core.complex": [[99, "module-pypath.core.complex"]], "abstractcomplexresource (class in pypath.core.complex)": [[100, "pypath.core.complex.AbstractComplexResource"]], "__init__() (pypath.core.complex.abstractcomplexresource method)": [[100, "pypath.core.complex.AbstractComplexResource.__init__"]], "load_data() (pypath.core.complex.abstractcomplexresource method)": [[100, "pypath.core.complex.AbstractComplexResource.load_data"]], "process() (pypath.core.complex.abstractcomplexresource method)": [[100, "pypath.core.complex.AbstractComplexResource.process"]], "set_method() (pypath.core.complex.abstractcomplexresource method)": [[100, "pypath.core.complex.AbstractComplexResource.set_method"]], "cellphonedb (class in pypath.core.complex)": [[101, "pypath.core.complex.CellPhoneDB"]], "__init__() (pypath.core.complex.cellphonedb method)": [[101, "pypath.core.complex.CellPhoneDB.__init__"]], "load_data() (pypath.core.complex.cellphonedb method)": [[101, "pypath.core.complex.CellPhoneDB.load_data"]], "process() (pypath.core.complex.cellphonedb method)": [[101, "pypath.core.complex.CellPhoneDB.process"]], "set_method() (pypath.core.complex.cellphonedb method)": [[101, "pypath.core.complex.CellPhoneDB.set_method"]], "cellchatdb (class in pypath.core.complex)": [[102, "pypath.core.complex.Cellchatdb"]], "__init__() (pypath.core.complex.cellchatdb method)": [[102, "pypath.core.complex.Cellchatdb.__init__"]], "load_data() (pypath.core.complex.cellchatdb method)": [[102, "pypath.core.complex.Cellchatdb.load_data"]], "process() (pypath.core.complex.cellchatdb method)": [[102, "pypath.core.complex.Cellchatdb.process"]], "set_method() (pypath.core.complex.cellchatdb method)": [[102, "pypath.core.complex.Cellchatdb.set_method"]], "cellinker (class in pypath.core.complex)": [[103, "pypath.core.complex.Cellinker"]], "__init__() (pypath.core.complex.cellinker method)": [[103, "pypath.core.complex.Cellinker.__init__"]], "load_data() (pypath.core.complex.cellinker method)": [[103, "pypath.core.complex.Cellinker.load_data"]], "process() (pypath.core.complex.cellinker method)": [[103, "pypath.core.complex.Cellinker.process"]], "set_method() (pypath.core.complex.cellinker method)": [[103, "pypath.core.complex.Cellinker.set_method"]], "compleat (class in pypath.core.complex)": [[104, "pypath.core.complex.Compleat"]], "__init__() (pypath.core.complex.compleat method)": [[104, "pypath.core.complex.Compleat.__init__"]], "load_data() (pypath.core.complex.compleat method)": [[104, "pypath.core.complex.Compleat.load_data"]], "process() (pypath.core.complex.compleat method)": [[104, "pypath.core.complex.Compleat.process"]], "set_method() (pypath.core.complex.compleat method)": [[104, "pypath.core.complex.Compleat.set_method"]], "complexaggregator (class in pypath.core.complex)": [[105, "pypath.core.complex.ComplexAggregator"]], "__init__() (pypath.core.complex.complexaggregator method)": [[105, "pypath.core.complex.ComplexAggregator.__init__"]], "load_data() (pypath.core.complex.complexaggregator method)": [[105, "pypath.core.complex.ComplexAggregator.load_data"]], "process() (pypath.core.complex.complexaggregator method)": [[105, "pypath.core.complex.ComplexAggregator.process"]], "reload() (pypath.core.complex.complexaggregator method)": [[105, "pypath.core.complex.ComplexAggregator.reload"]], "set_method() (pypath.core.complex.complexaggregator method)": [[105, "pypath.core.complex.ComplexAggregator.set_method"]], "complexportal (class in pypath.core.complex)": [[106, "pypath.core.complex.ComplexPortal"]], "__init__() (pypath.core.complex.complexportal method)": [[106, "pypath.core.complex.ComplexPortal.__init__"]], "load_data() (pypath.core.complex.complexportal method)": [[106, "pypath.core.complex.ComplexPortal.load_data"]], "process() (pypath.core.complex.complexportal method)": [[106, "pypath.core.complex.ComplexPortal.process"]], "set_method() (pypath.core.complex.complexportal method)": [[106, "pypath.core.complex.ComplexPortal.set_method"]], "corum (class in pypath.core.complex)": [[107, "pypath.core.complex.Corum"]], "__init__() (pypath.core.complex.corum method)": [[107, "pypath.core.complex.Corum.__init__"]], "load_data() (pypath.core.complex.corum method)": [[107, "pypath.core.complex.Corum.load_data"]], "process() (pypath.core.complex.corum method)": [[107, "pypath.core.complex.Corum.process"]], "set_method() (pypath.core.complex.corum method)": [[107, "pypath.core.complex.Corum.set_method"]], "guidetopharmacology (class in pypath.core.complex)": [[108, "pypath.core.complex.GuideToPharmacology"]], "__init__() (pypath.core.complex.guidetopharmacology method)": [[108, "pypath.core.complex.GuideToPharmacology.__init__"]], "load_data() (pypath.core.complex.guidetopharmacology method)": [[108, "pypath.core.complex.GuideToPharmacology.load_data"]], "process() (pypath.core.complex.guidetopharmacology method)": [[108, "pypath.core.complex.GuideToPharmacology.process"]], "set_method() (pypath.core.complex.guidetopharmacology method)": [[108, "pypath.core.complex.GuideToPharmacology.set_method"]], "havugimana (class in pypath.core.complex)": [[109, "pypath.core.complex.Havugimana"]], "__init__() (pypath.core.complex.havugimana method)": [[109, "pypath.core.complex.Havugimana.__init__"]], "load_data() (pypath.core.complex.havugimana method)": [[109, "pypath.core.complex.Havugimana.load_data"]], "process() (pypath.core.complex.havugimana method)": [[109, "pypath.core.complex.Havugimana.process"]], "set_method() (pypath.core.complex.havugimana method)": [[109, "pypath.core.complex.Havugimana.set_method"]], "hpmr (class in pypath.core.complex)": [[110, "pypath.core.complex.Hpmr"]], "__init__() (pypath.core.complex.hpmr method)": [[110, "pypath.core.complex.Hpmr.__init__"]], "load_data() (pypath.core.complex.hpmr method)": [[110, "pypath.core.complex.Hpmr.load_data"]], "process() (pypath.core.complex.hpmr method)": [[110, "pypath.core.complex.Hpmr.process"]], "set_method() (pypath.core.complex.hpmr method)": [[110, "pypath.core.complex.Hpmr.set_method"]], "humap (class in pypath.core.complex)": [[111, "pypath.core.complex.Humap"]], "__init__() (pypath.core.complex.humap method)": [[111, "pypath.core.complex.Humap.__init__"]], "load_data() (pypath.core.complex.humap method)": [[111, "pypath.core.complex.Humap.load_data"]], "process() (pypath.core.complex.humap method)": [[111, "pypath.core.complex.Humap.process"]], "set_method() (pypath.core.complex.humap method)": [[111, "pypath.core.complex.Humap.set_method"]], "humap2 (class in pypath.core.complex)": [[112, "pypath.core.complex.Humap2"]], "__init__() (pypath.core.complex.humap2 method)": [[112, "pypath.core.complex.Humap2.__init__"]], "load_data() (pypath.core.complex.humap2 method)": [[112, "pypath.core.complex.Humap2.load_data"]], "process() (pypath.core.complex.humap2 method)": [[112, "pypath.core.complex.Humap2.process"]], "set_method() (pypath.core.complex.humap2 method)": [[112, "pypath.core.complex.Humap2.set_method"]], "icellnet (class in pypath.core.complex)": [[113, "pypath.core.complex.Icellnet"]], "__init__() (pypath.core.complex.icellnet method)": [[113, "pypath.core.complex.Icellnet.__init__"]], "load_data() (pypath.core.complex.icellnet method)": [[113, "pypath.core.complex.Icellnet.load_data"]], "process() (pypath.core.complex.icellnet method)": [[113, "pypath.core.complex.Icellnet.process"]], "set_method() (pypath.core.complex.icellnet method)": [[113, "pypath.core.complex.Icellnet.set_method"]], "kegg (class in pypath.core.complex)": [[114, "pypath.core.complex.Kegg"]], "__init__() (pypath.core.complex.kegg method)": [[114, "pypath.core.complex.Kegg.__init__"]], "load_data() (pypath.core.complex.kegg method)": [[114, "pypath.core.complex.Kegg.load_data"]], "process() (pypath.core.complex.kegg method)": [[114, "pypath.core.complex.Kegg.process"]], "set_method() (pypath.core.complex.kegg method)": [[114, "pypath.core.complex.Kegg.set_method"]], "pdb (class in pypath.core.complex)": [[115, "pypath.core.complex.Pdb"]], "__init__() (pypath.core.complex.pdb method)": [[115, "pypath.core.complex.Pdb.__init__"]], "load_data() (pypath.core.complex.pdb method)": [[115, "pypath.core.complex.Pdb.load_data"]], "process() (pypath.core.complex.pdb method)": [[115, "pypath.core.complex.Pdb.process"]], "set_method() (pypath.core.complex.pdb method)": [[115, "pypath.core.complex.Pdb.set_method"]], "signor (class in pypath.core.complex)": [[116, "pypath.core.complex.Signor"]], "__init__() (pypath.core.complex.signor method)": [[116, "pypath.core.complex.Signor.__init__"]], "load_data() (pypath.core.complex.signor method)": [[116, "pypath.core.complex.Signor.load_data"]], "process() (pypath.core.complex.signor method)": [[116, "pypath.core.complex.Signor.process"]], "set_method() (pypath.core.complex.signor method)": [[116, "pypath.core.complex.Signor.set_method"]], "spike (class in pypath.core.complex)": [[117, "pypath.core.complex.Spike"]], "__init__() (pypath.core.complex.spike method)": [[117, "pypath.core.complex.Spike.__init__"]], "load_data() (pypath.core.complex.spike method)": [[117, "pypath.core.complex.Spike.load_data"]], "process() (pypath.core.complex.spike method)": [[117, "pypath.core.complex.Spike.process"]], "set_method() (pypath.core.complex.spike method)": [[117, "pypath.core.complex.Spike.set_method"]], "all_complexes() (in module pypath.core.complex)": [[118, "pypath.core.complex.all_complexes"]], "get_db() (in module pypath.core.complex)": [[119, "pypath.core.complex.get_db"]], "init_db() (in module pypath.core.complex)": [[120, "pypath.core.complex.init_db"]], "pypath.core.entity": [[121, "module-pypath.core.entity"]], "entity (class in pypath.core.entity)": [[122, "pypath.core.entity.Entity"]], "__init__() (pypath.core.entity.entity method)": [[122, "pypath.core.entity.Entity.__init__"]], "count_entity_type() (pypath.core.entity.entity class method)": [[122, "pypath.core.entity.Entity.count_entity_type"]], "filter_entity_type() (pypath.core.entity.entity class method)": [[122, "pypath.core.entity.Entity.filter_entity_type"]], "serialize() (pypath.core.entity.entity method)": [[122, "pypath.core.entity.Entity.serialize"]], "update_attrs() (pypath.core.entity.entity method)": [[122, "pypath.core.entity.Entity.update_attrs"]], "entitykey (class in pypath.core.entity)": [[123, "pypath.core.entity.EntityKey"]], "__init__() (pypath.core.entity.entitykey method)": [[123, "pypath.core.entity.EntityKey.__init__"]], "count() (pypath.core.entity.entitykey method)": [[123, "pypath.core.entity.EntityKey.count"]], "entity_type (pypath.core.entity.entitykey attribute)": [[123, "pypath.core.entity.EntityKey.entity_type"]], "id_type (pypath.core.entity.entitykey attribute)": [[123, "pypath.core.entity.EntityKey.id_type"]], "identifier (pypath.core.entity.entitykey attribute)": [[123, "pypath.core.entity.EntityKey.identifier"]], "index() (pypath.core.entity.entitykey method)": [[123, "pypath.core.entity.EntityKey.index"]], "taxon (pypath.core.entity.entitykey attribute)": [[123, "pypath.core.entity.EntityKey.taxon"]], "entitylist (class in pypath.core.entity)": [[124, "pypath.core.entity.EntityList"]], "__init__() (pypath.core.entity.entitylist method)": [[124, "pypath.core.entity.EntityList.__init__"]], "pypath.core.enz_sub": [[125, "module-pypath.core.enz_sub"]], "enzymesubstrateaggregator (class in pypath.core.enz_sub)": [[126, "pypath.core.enz_sub.EnzymeSubstrateAggregator"]], "__init__() (pypath.core.enz_sub.enzymesubstrateaggregator method)": [[126, "pypath.core.enz_sub.EnzymeSubstrateAggregator.__init__"]], "assign_to_network() (pypath.core.enz_sub.enzymesubstrateaggregator method)": [[126, "pypath.core.enz_sub.EnzymeSubstrateAggregator.assign_to_network"]], "build_list() (pypath.core.enz_sub.enzymesubstrateaggregator method)": [[126, "pypath.core.enz_sub.EnzymeSubstrateAggregator.build_list"]], "unique() (pypath.core.enz_sub.enzymesubstrateaggregator method)": [[126, "pypath.core.enz_sub.EnzymeSubstrateAggregator.unique"]], "enzymesubstratehomologyprocessor (class in pypath.core.enz_sub)": [[127, "pypath.core.enz_sub.EnzymeSubstrateHomologyProcessor"]], "__init__() (pypath.core.enz_sub.enzymesubstratehomologyprocessor method)": [[127, "pypath.core.enz_sub.EnzymeSubstrateHomologyProcessor.__init__"]], "asdict() (pypath.core.enz_sub.enzymesubstratehomologyprocessor method)": [[127, "pypath.core.enz_sub.EnzymeSubstrateHomologyProcessor.asdict"]], "df() (pypath.core.enz_sub.enzymesubstratehomologyprocessor method)": [[127, "pypath.core.enz_sub.EnzymeSubstrateHomologyProcessor.df"]], "load_data() (pypath.core.enz_sub.enzymesubstratehomologyprocessor method)": [[127, "pypath.core.enz_sub.EnzymeSubstrateHomologyProcessor.load_data"]], "load_homologene() (pypath.core.enz_sub.enzymesubstratehomologyprocessor method)": [[127, "pypath.core.enz_sub.EnzymeSubstrateHomologyProcessor.load_homologene"]], "ptm_orthology() (pypath.core.enz_sub.enzymesubstratehomologyprocessor method)": [[127, "pypath.core.enz_sub.EnzymeSubstrateHomologyProcessor.ptm_orthology"]], "set_inputargs() (pypath.core.enz_sub.enzymesubstratehomologyprocessor method)": [[127, "pypath.core.enz_sub.EnzymeSubstrateHomologyProcessor.set_inputargs"]], "set_method() (pypath.core.enz_sub.enzymesubstratehomologyprocessor method)": [[127, "pypath.core.enz_sub.EnzymeSubstrateHomologyProcessor.set_method"]], "translate() (pypath.core.enz_sub.enzymesubstratehomologyprocessor method)": [[127, "pypath.core.enz_sub.EnzymeSubstrateHomologyProcessor.translate"]], "translate_df() (pypath.core.enz_sub.enzymesubstratehomologyprocessor method)": [[127, "pypath.core.enz_sub.EnzymeSubstrateHomologyProcessor.translate_df"]], "translate_site() (pypath.core.enz_sub.enzymesubstratehomologyprocessor method)": [[127, "pypath.core.enz_sub.EnzymeSubstrateHomologyProcessor.translate_site"]], "enzymesubstrateprocessor (class in pypath.core.enz_sub)": [[128, "pypath.core.enz_sub.EnzymeSubstrateProcessor"]], "__init__() (pypath.core.enz_sub.enzymesubstrateprocessor method)": [[128, "pypath.core.enz_sub.EnzymeSubstrateProcessor.__init__"]], "load_data() (pypath.core.enz_sub.enzymesubstrateprocessor method)": [[128, "pypath.core.enz_sub.EnzymeSubstrateProcessor.load_data"]], "set_inputargs() (pypath.core.enz_sub.enzymesubstrateprocessor method)": [[128, "pypath.core.enz_sub.EnzymeSubstrateProcessor.set_inputargs"]], "set_method() (pypath.core.enz_sub.enzymesubstrateprocessor method)": [[128, "pypath.core.enz_sub.EnzymeSubstrateProcessor.set_method"]], "get_db() (in module pypath.core.enz_sub)": [[129, "pypath.core.enz_sub.get_db"]], "init_db() (in module pypath.core.enz_sub)": [[130, "pypath.core.enz_sub.init_db"]], "pypath.core.evidence": [[131, "module-pypath.core.evidence"]], "evidence (class in pypath.core.evidence)": [[132, "pypath.core.evidence.Evidence"]], "__init__() (pypath.core.evidence.evidence method)": [[132, "pypath.core.evidence.Evidence.__init__"]], "has_interaction_type() (pypath.core.evidence.evidence method)": [[132, "pypath.core.evidence.Evidence.has_interaction_type"]], "merge() (pypath.core.evidence.evidence method)": [[132, "pypath.core.evidence.Evidence.merge"]], "reload() (pypath.core.evidence.evidence method)": [[132, "pypath.core.evidence.Evidence.reload"]], "serialize() (pypath.core.evidence.evidence method)": [[132, "pypath.core.evidence.Evidence.serialize"]], "update_attrs() (pypath.core.evidence.evidence method)": [[132, "pypath.core.evidence.Evidence.update_attrs"]], "evidences (class in pypath.core.evidence)": [[133, "pypath.core.evidence.Evidences"]], "__init__() (pypath.core.evidence.evidences method)": [[133, "pypath.core.evidence.Evidences.__init__"]], "has_interaction_type() (pypath.core.evidence.evidences method)": [[133, "pypath.core.evidence.Evidences.has_interaction_type"]], "items() (pypath.core.evidence.evidences method)": [[133, "pypath.core.evidence.Evidences.items"]], "keys() (pypath.core.evidence.evidences method)": [[133, "pypath.core.evidence.Evidences.keys"]], "reload() (pypath.core.evidence.evidences method)": [[133, "pypath.core.evidence.Evidences.reload"]], "serialize_attrs() (pypath.core.evidence.evidences method)": [[133, "pypath.core.evidence.Evidences.serialize_attrs"]], "simple_dict (pypath.core.evidence.evidences property)": [[133, "pypath.core.evidence.Evidences.simple_dict"]], "pypath.core.interaction": [[134, "module-pypath.core.interaction"]], "interaction (class in pypath.core.interaction)": [[135, "pypath.core.interaction.Interaction"]], "__init__() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.__init__"]], "add_evidence() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.add_evidence"]], "add_sign() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.add_sign"]], "complex_identifiers_by_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.complex_identifiers_by_data_model"]], "complex_identifiers_by_interaction_type() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.complex_identifiers_by_interaction_type"]], "complex_identifiers_by_interaction_type_and_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.complex_identifiers_by_interaction_type_and_data_model"]], "complex_identifiers_by_interaction_type_and_data_model_and_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.complex_identifiers_by_interaction_type_and_data_model_and_resource"]], "complex_identifiers_by_reference() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.complex_identifiers_by_reference"]], "complex_identifiers_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.complex_identifiers_by_resource"]], "complex_labels_by_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.complex_labels_by_data_model"]], "complex_labels_by_interaction_type() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.complex_labels_by_interaction_type"]], "complex_labels_by_interaction_type_and_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.complex_labels_by_interaction_type_and_data_model"]], "complex_labels_by_interaction_type_and_data_model_and_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.complex_labels_by_interaction_type_and_data_model_and_resource"]], "complex_labels_by_reference() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.complex_labels_by_reference"]], "complex_labels_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.complex_labels_by_resource"]], "complexes_by_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.complexes_by_data_model"]], "complexes_by_interaction_type() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.complexes_by_interaction_type"]], "complexes_by_interaction_type_and_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.complexes_by_interaction_type_and_data_model"]], "complexes_by_interaction_type_and_data_model_and_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.complexes_by_interaction_type_and_data_model_and_resource"]], "complexes_by_reference() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.complexes_by_reference"]], "complexes_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.complexes_by_resource"]], "consensus() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.consensus"]], "consensus_edges() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.consensus_edges"]], "count_complex_identifiers() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.count_complex_identifiers"]], "count_complex_labels() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.count_complex_labels"]], "count_complexes() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.count_complexes"]], "count_data_models (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.count_data_models"]], "count_degrees_directed (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.count_degrees_directed"]], "count_degrees_directed_in (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.count_degrees_directed_in"]], "count_degrees_directed_out (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.count_degrees_directed_out"]], "count_degrees_negative (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.count_degrees_negative"]], "count_degrees_negative_in (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.count_degrees_negative_in"]], "count_degrees_negative_out (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.count_degrees_negative_out"]], "count_degrees_non_directed (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.count_degrees_non_directed"]], "count_degrees_positive (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.count_degrees_positive"]], "count_degrees_positive_in (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.count_degrees_positive_in"]], "count_degrees_positive_out (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.count_degrees_positive_out"]], "count_degrees_signed (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.count_degrees_signed"]], "count_degrees_signed_in (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.count_degrees_signed_in"]], "count_degrees_signed_out (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.count_degrees_signed_out"]], "count_degrees_undirected (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.count_degrees_undirected"]], "count_entities() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.count_entities"]], "count_identifiers() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.count_identifiers"]], "count_interaction_types (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.count_interaction_types"]], "count_interactions() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.count_interactions"]], "count_interactions_0() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.count_interactions_0"]], "count_interactions_directed() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.count_interactions_directed"]], "count_interactions_mutual() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.count_interactions_mutual"]], "count_interactions_negative() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.count_interactions_negative"]], "count_interactions_non_directed() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.count_interactions_non_directed"]], "count_interactions_positive() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.count_interactions_positive"]], "count_interactions_signed() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.count_interactions_signed"]], "count_interactions_undirected() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.count_interactions_undirected"]], "count_labels() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.count_labels"]], "count_lncrna_identifiers() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.count_lncrna_identifiers"]], "count_lncrna_labels() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.count_lncrna_labels"]], "count_lncrnas() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.count_lncrnas"]], "count_mirna_identifiers() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.count_mirna_identifiers"]], "count_mirna_labels() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.count_mirna_labels"]], "count_mirnas() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.count_mirnas"]], "count_protein_identifiers() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.count_protein_identifiers"]], "count_protein_labels() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.count_protein_labels"]], "count_proteins() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.count_proteins"]], "count_references (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.count_references"]], "count_resource_names (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.count_resource_names"]], "count_resource_names_via (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.count_resource_names_via"]], "count_resources (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.count_resources"]], "count_resources_via (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.count_resources_via"]], "count_small_molecule_identifiers() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.count_small_molecule_identifiers"]], "count_small_molecule_labels() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.count_small_molecule_labels"]], "count_small_molecules() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.count_small_molecules"]], "data_models_by_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.data_models_by_data_model"]], "data_models_by_interaction_type (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.data_models_by_interaction_type"]], "data_models_by_interaction_type_and_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.data_models_by_interaction_type_and_data_model"]], "data_models_by_interaction_type_and_data_model_and_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.data_models_by_interaction_type_and_data_model_and_resource"]], "data_models_by_reference (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.data_models_by_reference"]], "data_models_by_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.data_models_by_resource"]], "degrees_directed_by_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_directed_by_data_model"]], "degrees_directed_by_interaction_type (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_directed_by_interaction_type"]], "degrees_directed_by_interaction_type_and_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_directed_by_interaction_type_and_data_model"]], "degrees_directed_by_interaction_type_and_data_model_and_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_directed_by_interaction_type_and_data_model_and_resource"]], "degrees_directed_by_reference (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_directed_by_reference"]], "degrees_directed_by_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_directed_by_resource"]], "degrees_directed_in_by_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_directed_in_by_data_model"]], "degrees_directed_in_by_interaction_type (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_directed_in_by_interaction_type"]], "degrees_directed_in_by_interaction_type_and_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_directed_in_by_interaction_type_and_data_model"]], "degrees_directed_in_by_interaction_type_and_data_model_and_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_directed_in_by_interaction_type_and_data_model_and_resource"]], "degrees_directed_in_by_reference (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_directed_in_by_reference"]], "degrees_directed_in_by_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_directed_in_by_resource"]], "degrees_directed_out_by_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_directed_out_by_data_model"]], "degrees_directed_out_by_interaction_type (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_directed_out_by_interaction_type"]], "degrees_directed_out_by_interaction_type_and_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_directed_out_by_interaction_type_and_data_model"]], "degrees_directed_out_by_interaction_type_and_data_model_and_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_directed_out_by_interaction_type_and_data_model_and_resource"]], "degrees_directed_out_by_reference (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_directed_out_by_reference"]], "degrees_directed_out_by_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_directed_out_by_resource"]], "degrees_negative_by_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_negative_by_data_model"]], "degrees_negative_by_interaction_type (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_negative_by_interaction_type"]], "degrees_negative_by_interaction_type_and_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_negative_by_interaction_type_and_data_model"]], "degrees_negative_by_interaction_type_and_data_model_and_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_negative_by_interaction_type_and_data_model_and_resource"]], "degrees_negative_by_reference (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_negative_by_reference"]], "degrees_negative_by_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_negative_by_resource"]], "degrees_negative_in_by_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_negative_in_by_data_model"]], "degrees_negative_in_by_interaction_type (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_negative_in_by_interaction_type"]], "degrees_negative_in_by_interaction_type_and_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_negative_in_by_interaction_type_and_data_model"]], "degrees_negative_in_by_interaction_type_and_data_model_and_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_negative_in_by_interaction_type_and_data_model_and_resource"]], "degrees_negative_in_by_reference (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_negative_in_by_reference"]], "degrees_negative_in_by_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_negative_in_by_resource"]], "degrees_negative_out_by_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_negative_out_by_data_model"]], "degrees_negative_out_by_interaction_type (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_negative_out_by_interaction_type"]], "degrees_negative_out_by_interaction_type_and_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_negative_out_by_interaction_type_and_data_model"]], "degrees_negative_out_by_interaction_type_and_data_model_and_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_negative_out_by_interaction_type_and_data_model_and_resource"]], "degrees_negative_out_by_reference (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_negative_out_by_reference"]], "degrees_negative_out_by_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_negative_out_by_resource"]], "degrees_non_directed_by_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_non_directed_by_data_model"]], "degrees_non_directed_by_interaction_type (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_non_directed_by_interaction_type"]], "degrees_non_directed_by_interaction_type_and_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_non_directed_by_interaction_type_and_data_model"]], "degrees_non_directed_by_interaction_type_and_data_model_and_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_non_directed_by_interaction_type_and_data_model_and_resource"]], "degrees_non_directed_by_reference (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_non_directed_by_reference"]], "degrees_non_directed_by_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_non_directed_by_resource"]], "degrees_positive_by_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_positive_by_data_model"]], "degrees_positive_by_interaction_type (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_positive_by_interaction_type"]], "degrees_positive_by_interaction_type_and_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_positive_by_interaction_type_and_data_model"]], "degrees_positive_by_interaction_type_and_data_model_and_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_positive_by_interaction_type_and_data_model_and_resource"]], "degrees_positive_by_reference (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_positive_by_reference"]], "degrees_positive_by_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_positive_by_resource"]], "degrees_positive_in_by_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_positive_in_by_data_model"]], "degrees_positive_in_by_interaction_type (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_positive_in_by_interaction_type"]], "degrees_positive_in_by_interaction_type_and_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_positive_in_by_interaction_type_and_data_model"]], "degrees_positive_in_by_interaction_type_and_data_model_and_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_positive_in_by_interaction_type_and_data_model_and_resource"]], "degrees_positive_in_by_reference (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_positive_in_by_reference"]], "degrees_positive_in_by_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_positive_in_by_resource"]], "degrees_positive_out_by_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_positive_out_by_data_model"]], "degrees_positive_out_by_interaction_type (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_positive_out_by_interaction_type"]], "degrees_positive_out_by_interaction_type_and_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_positive_out_by_interaction_type_and_data_model"]], "degrees_positive_out_by_interaction_type_and_data_model_and_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_positive_out_by_interaction_type_and_data_model_and_resource"]], "degrees_positive_out_by_reference (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_positive_out_by_reference"]], "degrees_positive_out_by_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_positive_out_by_resource"]], "degrees_signed_by_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_signed_by_data_model"]], "degrees_signed_by_interaction_type (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_signed_by_interaction_type"]], "degrees_signed_by_interaction_type_and_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_signed_by_interaction_type_and_data_model"]], "degrees_signed_by_interaction_type_and_data_model_and_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_signed_by_interaction_type_and_data_model_and_resource"]], "degrees_signed_by_reference (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_signed_by_reference"]], "degrees_signed_by_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_signed_by_resource"]], "degrees_signed_in_by_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_signed_in_by_data_model"]], "degrees_signed_in_by_interaction_type (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_signed_in_by_interaction_type"]], "degrees_signed_in_by_interaction_type_and_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_signed_in_by_interaction_type_and_data_model"]], "degrees_signed_in_by_interaction_type_and_data_model_and_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_signed_in_by_interaction_type_and_data_model_and_resource"]], "degrees_signed_in_by_reference (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_signed_in_by_reference"]], "degrees_signed_in_by_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_signed_in_by_resource"]], "degrees_signed_out_by_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_signed_out_by_data_model"]], "degrees_signed_out_by_interaction_type (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_signed_out_by_interaction_type"]], "degrees_signed_out_by_interaction_type_and_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_signed_out_by_interaction_type_and_data_model"]], "degrees_signed_out_by_interaction_type_and_data_model_and_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_signed_out_by_interaction_type_and_data_model_and_resource"]], "degrees_signed_out_by_reference (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_signed_out_by_reference"]], "degrees_signed_out_by_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_signed_out_by_resource"]], "degrees_undirected_by_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_undirected_by_data_model"]], "degrees_undirected_by_interaction_type (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_undirected_by_interaction_type"]], "degrees_undirected_by_interaction_type_and_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_undirected_by_interaction_type_and_data_model"]], "degrees_undirected_by_interaction_type_and_data_model_and_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_undirected_by_interaction_type_and_data_model_and_resource"]], "degrees_undirected_by_reference (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_undirected_by_reference"]], "degrees_undirected_by_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_undirected_by_resource"]], "direction_key() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.direction_key"]], "dorothea_level() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.dorothea_level"]], "dorothea_levels() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.dorothea_levels"]], "entities_by_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.entities_by_data_model"]], "entities_by_interaction_type() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.entities_by_interaction_type"]], "entities_by_interaction_type_and_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.entities_by_interaction_type_and_data_model"]], "entities_by_interaction_type_and_data_model_and_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.entities_by_interaction_type_and_data_model_and_resource"]], "entities_by_reference() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.entities_by_reference"]], "entities_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.entities_by_resource"]], "evaluate_evidences() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.evaluate_evidences"]], "generate_df_records() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.generate_df_records"]], "get_attr() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_attr"]], "get_complex_identifiers() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_complex_identifiers"]], "get_complex_labels() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_complex_labels"]], "get_complexes() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_complexes"]], "get_data_models (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.get_data_models"]], "get_degrees() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_degrees"]], "get_degrees_directed (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.get_degrees_directed"]], "get_degrees_directed_in (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.get_degrees_directed_in"]], "get_degrees_directed_out (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.get_degrees_directed_out"]], "get_degrees_negative (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.get_degrees_negative"]], "get_degrees_negative_in (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.get_degrees_negative_in"]], "get_degrees_negative_out (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.get_degrees_negative_out"]], "get_degrees_non_directed (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.get_degrees_non_directed"]], "get_degrees_positive (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.get_degrees_positive"]], "get_degrees_positive_in (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.get_degrees_positive_in"]], "get_degrees_positive_out (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.get_degrees_positive_out"]], "get_degrees_signed (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.get_degrees_signed"]], "get_degrees_signed_in (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.get_degrees_signed_in"]], "get_degrees_signed_out (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.get_degrees_signed_out"]], "get_degrees_undirected (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.get_degrees_undirected"]], "get_direction() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_direction"]], "get_directions() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_directions"]], "get_entities() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_entities"]], "get_identifiers() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_identifiers"]], "get_interaction_types (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.get_interaction_types"]], "get_interactions() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_interactions"]], "get_interactions_0() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_interactions_0"]], "get_interactions_directed() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_interactions_directed"]], "get_interactions_mutual() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_interactions_mutual"]], "get_interactions_negative() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_interactions_negative"]], "get_interactions_non_directed() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_interactions_non_directed"]], "get_interactions_non_directed_0() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_interactions_non_directed_0"]], "get_interactions_positive() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_interactions_positive"]], "get_interactions_signed() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_interactions_signed"]], "get_interactions_undirected() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_interactions_undirected"]], "get_interactions_undirected_0() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_interactions_undirected_0"]], "get_labels() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_labels"]], "get_lncrna_identifiers() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_lncrna_identifiers"]], "get_lncrna_labels() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_lncrna_labels"]], "get_lncrnas() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_lncrnas"]], "get_mirna_identifiers() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_mirna_identifiers"]], "get_mirna_labels() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_mirna_labels"]], "get_mirnas() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_mirnas"]], "get_protein_identifiers() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_protein_identifiers"]], "get_protein_labels() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_protein_labels"]], "get_proteins() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_proteins"]], "get_references (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.get_references"]], "get_resource_names (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.get_resource_names"]], "get_resource_names_via (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.get_resource_names_via"]], "get_resources (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.get_resources"]], "get_resources_via (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.get_resources_via"]], "get_sign() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_sign"]], "get_small_molecule_identifiers() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_small_molecule_identifiers"]], "get_small_molecule_labels() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_small_molecule_labels"]], "get_small_molecules() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_small_molecules"]], "has_sign() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.has_sign"]], "identifiers_by_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.identifiers_by_data_model"]], "identifiers_by_interaction_type() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.identifiers_by_interaction_type"]], "identifiers_by_interaction_type_and_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.identifiers_by_interaction_type_and_data_model"]], "identifiers_by_interaction_type_and_data_model_and_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.identifiers_by_interaction_type_and_data_model_and_resource"]], "identifiers_by_reference() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.identifiers_by_reference"]], "identifiers_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.identifiers_by_resource"]], "interaction_types_by_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.interaction_types_by_data_model"]], "interaction_types_by_interaction_type (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.interaction_types_by_interaction_type"]], "interaction_types_by_interaction_type_and_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.interaction_types_by_interaction_type_and_data_model"]], "interaction_types_by_interaction_type_and_data_model_and_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.interaction_types_by_interaction_type_and_data_model_and_resource"]], "interaction_types_by_reference (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.interaction_types_by_reference"]], "interaction_types_by_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.interaction_types_by_resource"]], "interactions_0_by_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_0_by_data_model"]], "interactions_0_by_interaction_type() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_0_by_interaction_type"]], "interactions_0_by_interaction_type_and_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_0_by_interaction_type_and_data_model"]], "interactions_0_by_interaction_type_and_data_model_and_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_0_by_interaction_type_and_data_model_and_resource"]], "interactions_0_by_reference() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_0_by_reference"]], "interactions_0_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_0_by_resource"]], "interactions_by_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_by_data_model"]], "interactions_by_interaction_type() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_by_interaction_type"]], "interactions_by_interaction_type_and_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_by_interaction_type_and_data_model"]], "interactions_by_interaction_type_and_data_model_and_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_by_interaction_type_and_data_model_and_resource"]], "interactions_by_reference() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_by_reference"]], "interactions_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_by_resource"]], "interactions_directed_by_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_directed_by_data_model"]], "interactions_directed_by_interaction_type() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_directed_by_interaction_type"]], "interactions_directed_by_interaction_type_and_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_directed_by_interaction_type_and_data_model"]], "interactions_directed_by_interaction_type_and_data_model_and_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_directed_by_interaction_type_and_data_model_and_resource"]], "interactions_directed_by_reference() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_directed_by_reference"]], "interactions_directed_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_directed_by_resource"]], "interactions_mutual_by_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_mutual_by_data_model"]], "interactions_mutual_by_interaction_type() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_mutual_by_interaction_type"]], "interactions_mutual_by_interaction_type_and_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_mutual_by_interaction_type_and_data_model"]], "interactions_mutual_by_interaction_type_and_data_model_and_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_mutual_by_interaction_type_and_data_model_and_resource"]], "interactions_mutual_by_reference() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_mutual_by_reference"]], "interactions_mutual_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_mutual_by_resource"]], "interactions_negative_by_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_negative_by_data_model"]], "interactions_negative_by_interaction_type() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_negative_by_interaction_type"]], "interactions_negative_by_interaction_type_and_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_negative_by_interaction_type_and_data_model"]], "interactions_negative_by_interaction_type_and_data_model_and_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_negative_by_interaction_type_and_data_model_and_resource"]], "interactions_negative_by_reference() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_negative_by_reference"]], "interactions_negative_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_negative_by_resource"]], "interactions_non_directed_0_by_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_non_directed_0_by_data_model"]], "interactions_non_directed_0_by_interaction_type() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_non_directed_0_by_interaction_type"]], "interactions_non_directed_0_by_interaction_type_and_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_non_directed_0_by_interaction_type_and_data_model"]], "interactions_non_directed_0_by_interaction_type_and_data_model_and_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_non_directed_0_by_interaction_type_and_data_model_and_resource"]], "interactions_non_directed_0_by_reference() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_non_directed_0_by_reference"]], "interactions_non_directed_0_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_non_directed_0_by_resource"]], "interactions_non_directed_by_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_non_directed_by_data_model"]], "interactions_non_directed_by_interaction_type() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_non_directed_by_interaction_type"]], "interactions_non_directed_by_interaction_type_and_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_non_directed_by_interaction_type_and_data_model"]], "interactions_non_directed_by_interaction_type_and_data_model_and_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_non_directed_by_interaction_type_and_data_model_and_resource"]], "interactions_non_directed_by_reference() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_non_directed_by_reference"]], "interactions_non_directed_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_non_directed_by_resource"]], "interactions_positive_by_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_positive_by_data_model"]], "interactions_positive_by_interaction_type() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_positive_by_interaction_type"]], "interactions_positive_by_interaction_type_and_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_positive_by_interaction_type_and_data_model"]], "interactions_positive_by_interaction_type_and_data_model_and_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_positive_by_interaction_type_and_data_model_and_resource"]], "interactions_positive_by_reference() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_positive_by_reference"]], "interactions_positive_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_positive_by_resource"]], "interactions_signed_by_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_signed_by_data_model"]], "interactions_signed_by_interaction_type() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_signed_by_interaction_type"]], "interactions_signed_by_interaction_type_and_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_signed_by_interaction_type_and_data_model"]], "interactions_signed_by_interaction_type_and_data_model_and_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_signed_by_interaction_type_and_data_model_and_resource"]], "interactions_signed_by_reference() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_signed_by_reference"]], "interactions_signed_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_signed_by_resource"]], "interactions_undirected_0_by_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_undirected_0_by_data_model"]], "interactions_undirected_0_by_interaction_type() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_undirected_0_by_interaction_type"]], "interactions_undirected_0_by_interaction_type_and_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_undirected_0_by_interaction_type_and_data_model"]], "interactions_undirected_0_by_interaction_type_and_data_model_and_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_undirected_0_by_interaction_type_and_data_model_and_resource"]], "interactions_undirected_0_by_reference() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_undirected_0_by_reference"]], "interactions_undirected_0_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_undirected_0_by_resource"]], "interactions_undirected_by_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_undirected_by_data_model"]], "interactions_undirected_by_interaction_type() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_undirected_by_interaction_type"]], "interactions_undirected_by_interaction_type_and_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_undirected_by_interaction_type_and_data_model"]], "interactions_undirected_by_interaction_type_and_data_model_and_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_undirected_by_interaction_type_and_data_model_and_resource"]], "interactions_undirected_by_reference() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_undirected_by_reference"]], "interactions_undirected_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_undirected_by_resource"]], "is_directed() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.is_directed"]], "is_directed_by_resources() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.is_directed_by_resources"]], "is_inhibition() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.is_inhibition"]], "is_loop() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.is_loop"]], "is_mutual() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.is_mutual"]], "is_mutual_by_resources() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.is_mutual_by_resources"]], "is_stimulation() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.is_stimulation"]], "iter_evidences() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.iter_evidences"]], "iter_match_evidences() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.iter_match_evidences"]], "labels_by_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.labels_by_data_model"]], "labels_by_interaction_type() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.labels_by_interaction_type"]], "labels_by_interaction_type_and_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.labels_by_interaction_type_and_data_model"]], "labels_by_interaction_type_and_data_model_and_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.labels_by_interaction_type_and_data_model_and_resource"]], "labels_by_reference() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.labels_by_reference"]], "labels_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.labels_by_resource"]], "lncrna_identifiers_by_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.lncrna_identifiers_by_data_model"]], "lncrna_identifiers_by_interaction_type() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.lncrna_identifiers_by_interaction_type"]], "lncrna_identifiers_by_interaction_type_and_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.lncrna_identifiers_by_interaction_type_and_data_model"]], "lncrna_identifiers_by_interaction_type_and_data_model_and_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.lncrna_identifiers_by_interaction_type_and_data_model_and_resource"]], "lncrna_identifiers_by_reference() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.lncrna_identifiers_by_reference"]], "lncrna_identifiers_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.lncrna_identifiers_by_resource"]], "lncrna_labels_by_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.lncrna_labels_by_data_model"]], "lncrna_labels_by_interaction_type() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.lncrna_labels_by_interaction_type"]], "lncrna_labels_by_interaction_type_and_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.lncrna_labels_by_interaction_type_and_data_model"]], "lncrna_labels_by_interaction_type_and_data_model_and_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.lncrna_labels_by_interaction_type_and_data_model_and_resource"]], "lncrna_labels_by_reference() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.lncrna_labels_by_reference"]], "lncrna_labels_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.lncrna_labels_by_resource"]], "lncrnas_by_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.lncrnas_by_data_model"]], "lncrnas_by_interaction_type() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.lncrnas_by_interaction_type"]], "lncrnas_by_interaction_type_and_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.lncrnas_by_interaction_type_and_data_model"]], "lncrnas_by_interaction_type_and_data_model_and_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.lncrnas_by_interaction_type_and_data_model_and_resource"]], "lncrnas_by_reference() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.lncrnas_by_reference"]], "lncrnas_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.lncrnas_by_resource"]], "majority_dir() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.majority_dir"]], "majority_sign() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.majority_sign"]], "merge() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.merge"]], "mirna_identifiers_by_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.mirna_identifiers_by_data_model"]], "mirna_identifiers_by_interaction_type() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.mirna_identifiers_by_interaction_type"]], "mirna_identifiers_by_interaction_type_and_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.mirna_identifiers_by_interaction_type_and_data_model"]], "mirna_identifiers_by_interaction_type_and_data_model_and_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.mirna_identifiers_by_interaction_type_and_data_model_and_resource"]], "mirna_identifiers_by_reference() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.mirna_identifiers_by_reference"]], "mirna_identifiers_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.mirna_identifiers_by_resource"]], "mirna_labels_by_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.mirna_labels_by_data_model"]], "mirna_labels_by_interaction_type() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.mirna_labels_by_interaction_type"]], "mirna_labels_by_interaction_type_and_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.mirna_labels_by_interaction_type_and_data_model"]], "mirna_labels_by_interaction_type_and_data_model_and_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.mirna_labels_by_interaction_type_and_data_model_and_resource"]], "mirna_labels_by_reference() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.mirna_labels_by_reference"]], "mirna_labels_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.mirna_labels_by_resource"]], "mirnas_by_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.mirnas_by_data_model"]], "mirnas_by_interaction_type() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.mirnas_by_interaction_type"]], "mirnas_by_interaction_type_and_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.mirnas_by_interaction_type_and_data_model"]], "mirnas_by_interaction_type_and_data_model_and_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.mirnas_by_interaction_type_and_data_model_and_resource"]], "mirnas_by_reference() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.mirnas_by_reference"]], "mirnas_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.mirnas_by_resource"]], "negative_a_b() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.negative_a_b"]], "negative_b_a() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.negative_b_a"]], "negative_resources_a_b() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.negative_resources_a_b"]], "negative_resources_b_a() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.negative_resources_b_a"]], "negative_reverse() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.negative_reverse"]], "negative_straight() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.negative_straight"]], "positive_a_b() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.positive_a_b"]], "positive_b_a() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.positive_b_a"]], "positive_resources_a_b() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.positive_resources_a_b"]], "positive_resources_b_a() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.positive_resources_b_a"]], "positive_reverse() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.positive_reverse"]], "positive_straight() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.positive_straight"]], "protein_identifiers_by_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.protein_identifiers_by_data_model"]], "protein_identifiers_by_interaction_type() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.protein_identifiers_by_interaction_type"]], "protein_identifiers_by_interaction_type_and_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.protein_identifiers_by_interaction_type_and_data_model"]], "protein_identifiers_by_interaction_type_and_data_model_and_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.protein_identifiers_by_interaction_type_and_data_model_and_resource"]], "protein_identifiers_by_reference() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.protein_identifiers_by_reference"]], "protein_identifiers_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.protein_identifiers_by_resource"]], "protein_labels_by_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.protein_labels_by_data_model"]], "protein_labels_by_interaction_type() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.protein_labels_by_interaction_type"]], "protein_labels_by_interaction_type_and_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.protein_labels_by_interaction_type_and_data_model"]], "protein_labels_by_interaction_type_and_data_model_and_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.protein_labels_by_interaction_type_and_data_model_and_resource"]], "protein_labels_by_reference() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.protein_labels_by_reference"]], "protein_labels_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.protein_labels_by_resource"]], "proteins_by_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.proteins_by_data_model"]], "proteins_by_interaction_type() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.proteins_by_interaction_type"]], "proteins_by_interaction_type_and_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.proteins_by_interaction_type_and_data_model"]], "proteins_by_interaction_type_and_data_model_and_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.proteins_by_interaction_type_and_data_model_and_resource"]], "proteins_by_reference() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.proteins_by_reference"]], "proteins_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.proteins_by_resource"]], "references_by_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.references_by_data_model"]], "references_by_interaction_type (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.references_by_interaction_type"]], "references_by_interaction_type_and_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.references_by_interaction_type_and_data_model"]], "references_by_interaction_type_and_data_model_and_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.references_by_interaction_type_and_data_model_and_resource"]], "references_by_reference (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.references_by_reference"]], "references_by_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.references_by_resource"]], "reload() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.reload"]], "resource_names_by_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.resource_names_by_data_model"]], "resource_names_by_interaction_type (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.resource_names_by_interaction_type"]], "resource_names_by_interaction_type_and_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.resource_names_by_interaction_type_and_data_model"]], "resource_names_by_interaction_type_and_data_model_and_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.resource_names_by_interaction_type_and_data_model_and_resource"]], "resource_names_by_reference (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.resource_names_by_reference"]], "resource_names_by_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.resource_names_by_resource"]], "resource_names_via_by_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.resource_names_via_by_data_model"]], "resource_names_via_by_interaction_type (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.resource_names_via_by_interaction_type"]], "resource_names_via_by_interaction_type_and_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.resource_names_via_by_interaction_type_and_data_model"]], "resource_names_via_by_interaction_type_and_data_model_and_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.resource_names_via_by_interaction_type_and_data_model_and_resource"]], "resource_names_via_by_reference (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.resource_names_via_by_reference"]], "resource_names_via_by_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.resource_names_via_by_resource"]], "resources_a_b() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.resources_a_b"]], "resources_b_a() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.resources_b_a"]], "resources_by_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.resources_by_data_model"]], "resources_by_interaction_type (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.resources_by_interaction_type"]], "resources_by_interaction_type_and_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.resources_by_interaction_type_and_data_model"]], "resources_by_interaction_type_and_data_model_and_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.resources_by_interaction_type_and_data_model_and_resource"]], "resources_by_reference (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.resources_by_reference"]], "resources_by_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.resources_by_resource"]], "resources_undirected() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.resources_undirected"]], "resources_via_by_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.resources_via_by_data_model"]], "resources_via_by_interaction_type (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.resources_via_by_interaction_type"]], "resources_via_by_interaction_type_and_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.resources_via_by_interaction_type_and_data_model"]], "resources_via_by_interaction_type_and_data_model_and_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.resources_via_by_interaction_type_and_data_model_and_resource"]], "resources_via_by_reference (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.resources_via_by_reference"]], "resources_via_by_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.resources_via_by_resource"]], "serialize() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.serialize"]], "small_molecule_identifiers_by_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.small_molecule_identifiers_by_data_model"]], "small_molecule_identifiers_by_interaction_type() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.small_molecule_identifiers_by_interaction_type"]], "small_molecule_identifiers_by_interaction_type_and_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.small_molecule_identifiers_by_interaction_type_and_data_model"]], "small_molecule_identifiers_by_interaction_type_and_data_model_and_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.small_molecule_identifiers_by_interaction_type_and_data_model_and_resource"]], "small_molecule_identifiers_by_reference() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.small_molecule_identifiers_by_reference"]], "small_molecule_identifiers_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.small_molecule_identifiers_by_resource"]], "small_molecule_labels_by_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.small_molecule_labels_by_data_model"]], "small_molecule_labels_by_interaction_type() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.small_molecule_labels_by_interaction_type"]], "small_molecule_labels_by_interaction_type_and_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.small_molecule_labels_by_interaction_type_and_data_model"]], "small_molecule_labels_by_interaction_type_and_data_model_and_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.small_molecule_labels_by_interaction_type_and_data_model_and_resource"]], "small_molecule_labels_by_reference() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.small_molecule_labels_by_reference"]], "small_molecule_labels_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.small_molecule_labels_by_resource"]], "small_molecules_by_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.small_molecules_by_data_model"]], "small_molecules_by_interaction_type() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.small_molecules_by_interaction_type"]], "small_molecules_by_interaction_type_and_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.small_molecules_by_interaction_type_and_data_model"]], "small_molecules_by_interaction_type_and_data_model_and_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.small_molecules_by_interaction_type_and_data_model_and_resource"]], "small_molecules_by_reference() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.small_molecules_by_reference"]], "small_molecules_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.small_molecules_by_resource"]], "source() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.source"]], "sources_reverse() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.sources_reverse"]], "sources_straight() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.sources_straight"]], "sources_undirected() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.sources_undirected"]], "src() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.src"]], "src_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.src_by_resource"]], "target() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.target"]], "tgt() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.tgt"]], "tgt_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.tgt_by_resource"]], "translate() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.translate"]], "unset_dir() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.unset_dir"]], "unset_direction() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.unset_direction"]], "unset_interaction_type() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.unset_interaction_type"]], "unset_sign() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.unset_sign"]], "update_attrs() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.update_attrs"]], "which_directions() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.which_directions"]], "which_dirs() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.which_dirs"]], "which_signs() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.which_signs"]], "interactiondataframerecord (class in pypath.core.interaction)": [[136, "pypath.core.interaction.InteractionDataFrameRecord"]], "__init__() (pypath.core.interaction.interactiondataframerecord method)": [[136, "pypath.core.interaction.InteractionDataFrameRecord.__init__"]], "count() (pypath.core.interaction.interactiondataframerecord method)": [[136, "pypath.core.interaction.InteractionDataFrameRecord.count"]], "directed (pypath.core.interaction.interactiondataframerecord attribute)": [[136, "pypath.core.interaction.InteractionDataFrameRecord.directed"]], "dmodel (pypath.core.interaction.interactiondataframerecord attribute)": [[136, "pypath.core.interaction.InteractionDataFrameRecord.dmodel"]], "effect (pypath.core.interaction.interactiondataframerecord attribute)": [[136, "pypath.core.interaction.InteractionDataFrameRecord.effect"]], "id_a (pypath.core.interaction.interactiondataframerecord attribute)": [[136, "pypath.core.interaction.InteractionDataFrameRecord.id_a"]], "id_b (pypath.core.interaction.interactiondataframerecord attribute)": [[136, "pypath.core.interaction.InteractionDataFrameRecord.id_b"]], "index() (pypath.core.interaction.interactiondataframerecord method)": [[136, "pypath.core.interaction.InteractionDataFrameRecord.index"]], "references (pypath.core.interaction.interactiondataframerecord attribute)": [[136, "pypath.core.interaction.InteractionDataFrameRecord.references"]], "sources (pypath.core.interaction.interactiondataframerecord attribute)": [[136, "pypath.core.interaction.InteractionDataFrameRecord.sources"]], "type (pypath.core.interaction.interactiondataframerecord attribute)": [[136, "pypath.core.interaction.InteractionDataFrameRecord.type"]], "type_a (pypath.core.interaction.interactiondataframerecord attribute)": [[136, "pypath.core.interaction.InteractionDataFrameRecord.type_a"]], "type_b (pypath.core.interaction.interactiondataframerecord attribute)": [[136, "pypath.core.interaction.InteractionDataFrameRecord.type_b"]], "interactionkey (class in pypath.core.interaction)": [[137, "pypath.core.interaction.InteractionKey"]], "__init__() (pypath.core.interaction.interactionkey method)": [[137, "pypath.core.interaction.InteractionKey.__init__"]], "count() (pypath.core.interaction.interactionkey method)": [[137, "pypath.core.interaction.InteractionKey.count"]], "entity_a (pypath.core.interaction.interactionkey attribute)": [[137, "pypath.core.interaction.InteractionKey.entity_a"]], "entity_b (pypath.core.interaction.interactionkey attribute)": [[137, "pypath.core.interaction.InteractionKey.entity_b"]], "index() (pypath.core.interaction.interactionkey method)": [[137, "pypath.core.interaction.InteractionKey.index"]], "pypath.core.intercell": [[138, "module-pypath.core.intercell"]], "intercellannotation (class in pypath.core.intercell)": [[139, "pypath.core.intercell.IntercellAnnotation"]], "__init__() (pypath.core.intercell.intercellannotation method)": [[139, "pypath.core.intercell.IntercellAnnotation.__init__"]], "browse() (pypath.core.intercell.intercellannotation method)": [[139, "pypath.core.intercell.IntercellAnnotation.browse"]], "class_to_class_connections() (pypath.core.intercell.intercellannotation method)": [[139, "pypath.core.intercell.IntercellAnnotation.class_to_class_connections"]], "classes_by_entity() (pypath.core.intercell.intercellannotation method)": [[139, "pypath.core.intercell.IntercellAnnotation.classes_by_entity"]], "counts() (pypath.core.intercell.intercellannotation method)": [[139, "pypath.core.intercell.IntercellAnnotation.counts"]], "counts_by_class() (pypath.core.intercell.intercellannotation method)": [[139, "pypath.core.intercell.IntercellAnnotation.counts_by_class"]], "create_class() (pypath.core.intercell.intercellannotation method)": [[139, "pypath.core.intercell.IntercellAnnotation.create_class"]], "degree_inter_class_network() (pypath.core.intercell.intercellannotation method)": [[139, "pypath.core.intercell.IntercellAnnotation.degree_inter_class_network"]], "filter() (pypath.core.intercell.intercellannotation method)": [[139, "pypath.core.intercell.IntercellAnnotation.filter"]], "filter_classes() (pypath.core.intercell.intercellannotation static method)": [[139, "pypath.core.intercell.IntercellAnnotation.filter_classes"]], "filter_interclass_network() (pypath.core.intercell.intercellannotation method)": [[139, "pypath.core.intercell.IntercellAnnotation.filter_interclass_network"]], "get_class() (pypath.core.intercell.intercellannotation method)": [[139, "pypath.core.intercell.IntercellAnnotation.get_class"]], "get_df() (pypath.core.intercell.intercellannotation method)": [[139, "pypath.core.intercell.IntercellAnnotation.get_df"]], "get_interclass_network_df() (pypath.core.intercell.intercellannotation method)": [[139, "pypath.core.intercell.IntercellAnnotation.get_interclass_network_df"]], "get_parents() (pypath.core.intercell.intercellannotation method)": [[139, "pypath.core.intercell.IntercellAnnotation.get_parents"]], "get_resource() (pypath.core.intercell.intercellannotation method)": [[139, "pypath.core.intercell.IntercellAnnotation.get_resource"]], "get_resources() (pypath.core.intercell.intercellannotation method)": [[139, "pypath.core.intercell.IntercellAnnotation.get_resources"]], "labels() (pypath.core.intercell.intercellannotation method)": [[139, "pypath.core.intercell.IntercellAnnotation.labels"]], "make_df() (pypath.core.intercell.intercellannotation method)": [[139, "pypath.core.intercell.IntercellAnnotation.make_df"]], "network_df() (pypath.core.intercell.intercellannotation method)": [[139, "pypath.core.intercell.IntercellAnnotation.network_df"]], "populate_classes() (pypath.core.intercell.intercellannotation method)": [[139, "pypath.core.intercell.IntercellAnnotation.populate_classes"]], "populate_scores() (pypath.core.intercell.intercellannotation method)": [[139, "pypath.core.intercell.IntercellAnnotation.populate_scores"]], "process_annot() (pypath.core.intercell.intercellannotation method)": [[139, "pypath.core.intercell.IntercellAnnotation.process_annot"]], "quality_check_table() (pypath.core.intercell.intercellannotation method)": [[139, "pypath.core.intercell.IntercellAnnotation.quality_check_table"]], "register_network() (pypath.core.intercell.intercellannotation method)": [[139, "pypath.core.intercell.IntercellAnnotation.register_network"]], "reload() (pypath.core.intercell.intercellannotation method)": [[139, "pypath.core.intercell.IntercellAnnotation.reload"]], "resources_in_category() (pypath.core.intercell.intercellannotation method)": [[139, "pypath.core.intercell.IntercellAnnotation.resources_in_category"]], "select() (pypath.core.intercell.intercellannotation method)": [[139, "pypath.core.intercell.IntercellAnnotation.select"]], "set_interclass_network_df() (pypath.core.intercell.intercellannotation method)": [[139, "pypath.core.intercell.IntercellAnnotation.set_interclass_network_df"]], "show() (pypath.core.intercell.intercellannotation method)": [[139, "pypath.core.intercell.IntercellAnnotation.show"]], "update_parents() (pypath.core.intercell.intercellannotation method)": [[139, "pypath.core.intercell.IntercellAnnotation.update_parents"]], "get_db() (in module pypath.core.intercell)": [[140, "pypath.core.intercell.get_db"]], "init_db() (in module pypath.core.intercell)": [[141, "pypath.core.intercell.init_db"]], "pypath.core.intercell_annot": [[142, "module-pypath.core.intercell_annot"]], "excludes (in module pypath.core.intercell_annot)": [[143, "pypath.core.intercell_annot.excludes"]], "pypath.core.network": [[144, "module-pypath.core.network"]], "network (class in pypath.core.network)": [[145, "pypath.core.network.Network"]], "__init__() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.__init__"]], "activated_by (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.activated_by"]], "activates (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.activates"]], "add_interaction() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.add_interaction"]], "add_node() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.add_node"]], "collect_complex_identifiers (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_complex_identifiers"]], "collect_complex_labels (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_complex_labels"]], "collect_complexes (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_complexes"]], "collect_curation_effort (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_curation_effort"]], "collect_data_models (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_data_models"]], "collect_degrees_directed (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_degrees_directed"]], "collect_degrees_directed_in (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_degrees_directed_in"]], "collect_degrees_directed_out (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_degrees_directed_out"]], "collect_degrees_negative (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_degrees_negative"]], "collect_degrees_negative_in (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_degrees_negative_in"]], "collect_degrees_negative_out (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_degrees_negative_out"]], "collect_degrees_non_directed (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_degrees_non_directed"]], "collect_degrees_positive (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_degrees_positive"]], "collect_degrees_positive_in (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_degrees_positive_in"]], "collect_degrees_positive_out (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_degrees_positive_out"]], "collect_degrees_signed (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_degrees_signed"]], "collect_degrees_signed_in (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_degrees_signed_in"]], "collect_degrees_signed_out (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_degrees_signed_out"]], "collect_degrees_undirected (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_degrees_undirected"]], "collect_entities (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_entities"]], "collect_evidences (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_evidences"]], "collect_identifiers (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_identifiers"]], "collect_interaction_types (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_interaction_types"]], "collect_interactions (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_interactions"]], "collect_interactions_0 (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_interactions_0"]], "collect_interactions_directed (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_interactions_directed"]], "collect_interactions_mutual (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_interactions_mutual"]], "collect_interactions_negative (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_interactions_negative"]], "collect_interactions_non_directed (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_interactions_non_directed"]], "collect_interactions_non_directed_0 (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_interactions_non_directed_0"]], "collect_interactions_positive (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_interactions_positive"]], "collect_interactions_signed (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_interactions_signed"]], "collect_interactions_undirected (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_interactions_undirected"]], "collect_interactions_undirected_0 (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_interactions_undirected_0"]], "collect_labels (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_labels"]], "collect_lncrna_identifiers (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_lncrna_identifiers"]], "collect_lncrna_labels (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_lncrna_labels"]], "collect_lncrnas (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_lncrnas"]], "collect_mirna_identifiers (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_mirna_identifiers"]], "collect_mirna_labels (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_mirna_labels"]], "collect_mirnas (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_mirnas"]], "collect_protein_identifiers (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_protein_identifiers"]], "collect_protein_labels (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_protein_labels"]], "collect_proteins (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_proteins"]], "collect_references (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_references"]], "collect_resource_names (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_resource_names"]], "collect_resource_names_via (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_resource_names_via"]], "collect_resources (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_resources"]], "collect_resources_via (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_resources_via"]], "collect_small_molecule_identifiers (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_small_molecule_identifiers"]], "collect_small_molecule_labels (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_small_molecule_labels"]], "collect_small_molecules (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_small_molecules"]], "collectri() (pypath.core.network.network class method)": [[145, "pypath.core.network.Network.collectri"]], "complex_identifiers_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.complex_identifiers_by_data_model"]], "complex_identifiers_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.complex_identifiers_by_interaction_type"]], "complex_identifiers_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.complex_identifiers_by_interaction_type_and_data_model"]], "complex_identifiers_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.complex_identifiers_by_interaction_type_and_data_model_and_resource"]], "complex_identifiers_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.complex_identifiers_by_reference"]], "complex_identifiers_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.complex_identifiers_by_resource"]], "complex_labels_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.complex_labels_by_data_model"]], "complex_labels_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.complex_labels_by_interaction_type"]], "complex_labels_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.complex_labels_by_interaction_type_and_data_model"]], "complex_labels_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.complex_labels_by_interaction_type_and_data_model_and_resource"]], "complex_labels_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.complex_labels_by_reference"]], "complex_labels_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.complex_labels_by_resource"]], "complexes_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.complexes_by_data_model"]], "complexes_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.complexes_by_interaction_type"]], "complexes_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.complexes_by_interaction_type_and_data_model"]], "complexes_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.complexes_by_interaction_type_and_data_model_and_resource"]], "complexes_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.complexes_by_reference"]], "complexes_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.complexes_by_resource"]], "count_activated_by (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_activated_by"]], "count_activates (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_activates"]], "count_complex_identifiers (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_complex_identifiers"]], "count_complex_identifiers_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_complex_identifiers_by_data_model"]], "count_complex_identifiers_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_complex_identifiers_by_interaction_type"]], "count_complex_identifiers_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_complex_identifiers_by_interaction_type_and_data_model"]], "count_complex_identifiers_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_complex_identifiers_by_interaction_type_and_data_model_and_resource"]], "count_complex_identifiers_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_complex_identifiers_by_reference"]], "count_complex_identifiers_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_complex_identifiers_by_resource"]], "count_complex_labels (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_complex_labels"]], "count_complex_labels_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_complex_labels_by_data_model"]], "count_complex_labels_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_complex_labels_by_interaction_type"]], "count_complex_labels_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_complex_labels_by_interaction_type_and_data_model"]], "count_complex_labels_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_complex_labels_by_interaction_type_and_data_model_and_resource"]], "count_complex_labels_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_complex_labels_by_reference"]], "count_complex_labels_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_complex_labels_by_resource"]], "count_complexes (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_complexes"]], "count_complexes_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_complexes_by_data_model"]], "count_complexes_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_complexes_by_interaction_type"]], "count_complexes_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_complexes_by_interaction_type_and_data_model"]], "count_complexes_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_complexes_by_interaction_type_and_data_model_and_resource"]], "count_complexes_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_complexes_by_reference"]], "count_complexes_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_complexes_by_resource"]], "count_curation_effort (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_curation_effort"]], "count_curation_effort_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_curation_effort_by_data_model"]], "count_curation_effort_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_curation_effort_by_interaction_type"]], "count_curation_effort_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_curation_effort_by_interaction_type_and_data_model"]], "count_curation_effort_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_curation_effort_by_interaction_type_and_data_model_and_resource"]], "count_curation_effort_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_curation_effort_by_reference"]], "count_curation_effort_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_curation_effort_by_resource"]], "count_data_models (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_data_models"]], "count_data_models_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_data_models_by_data_model"]], "count_data_models_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_data_models_by_interaction_type"]], "count_data_models_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_data_models_by_interaction_type_and_data_model"]], "count_data_models_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_data_models_by_interaction_type_and_data_model_and_resource"]], "count_data_models_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_data_models_by_reference"]], "count_data_models_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_data_models_by_resource"]], "count_degrees_directed (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_directed"]], "count_degrees_directed_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_directed_by_data_model"]], "count_degrees_directed_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_directed_by_interaction_type"]], "count_degrees_directed_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_directed_by_interaction_type_and_data_model"]], "count_degrees_directed_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_directed_by_interaction_type_and_data_model_and_resource"]], "count_degrees_directed_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_directed_by_reference"]], "count_degrees_directed_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_directed_by_resource"]], "count_degrees_directed_in (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_directed_in"]], "count_degrees_directed_in_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_directed_in_by_data_model"]], "count_degrees_directed_in_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_directed_in_by_interaction_type"]], "count_degrees_directed_in_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_directed_in_by_interaction_type_and_data_model"]], "count_degrees_directed_in_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_directed_in_by_interaction_type_and_data_model_and_resource"]], "count_degrees_directed_in_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_directed_in_by_reference"]], "count_degrees_directed_in_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_directed_in_by_resource"]], "count_degrees_directed_out (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_directed_out"]], "count_degrees_directed_out_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_directed_out_by_data_model"]], "count_degrees_directed_out_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_directed_out_by_interaction_type"]], "count_degrees_directed_out_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_directed_out_by_interaction_type_and_data_model"]], "count_degrees_directed_out_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_directed_out_by_interaction_type_and_data_model_and_resource"]], "count_degrees_directed_out_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_directed_out_by_reference"]], "count_degrees_directed_out_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_directed_out_by_resource"]], "count_degrees_negative (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_negative"]], "count_degrees_negative_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_negative_by_data_model"]], "count_degrees_negative_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_negative_by_interaction_type"]], "count_degrees_negative_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_negative_by_interaction_type_and_data_model"]], "count_degrees_negative_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_negative_by_interaction_type_and_data_model_and_resource"]], "count_degrees_negative_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_negative_by_reference"]], "count_degrees_negative_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_negative_by_resource"]], "count_degrees_negative_in (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_negative_in"]], "count_degrees_negative_in_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_negative_in_by_data_model"]], "count_degrees_negative_in_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_negative_in_by_interaction_type"]], "count_degrees_negative_in_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_negative_in_by_interaction_type_and_data_model"]], "count_degrees_negative_in_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_negative_in_by_interaction_type_and_data_model_and_resource"]], "count_degrees_negative_in_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_negative_in_by_reference"]], "count_degrees_negative_in_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_negative_in_by_resource"]], "count_degrees_negative_out (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_negative_out"]], "count_degrees_negative_out_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_negative_out_by_data_model"]], "count_degrees_negative_out_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_negative_out_by_interaction_type"]], "count_degrees_negative_out_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_negative_out_by_interaction_type_and_data_model"]], "count_degrees_negative_out_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_negative_out_by_interaction_type_and_data_model_and_resource"]], "count_degrees_negative_out_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_negative_out_by_reference"]], "count_degrees_negative_out_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_negative_out_by_resource"]], "count_degrees_non_directed (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_non_directed"]], "count_degrees_non_directed_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_non_directed_by_data_model"]], "count_degrees_non_directed_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_non_directed_by_interaction_type"]], "count_degrees_non_directed_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_non_directed_by_interaction_type_and_data_model"]], "count_degrees_non_directed_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_non_directed_by_interaction_type_and_data_model_and_resource"]], "count_degrees_non_directed_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_non_directed_by_reference"]], "count_degrees_non_directed_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_non_directed_by_resource"]], "count_degrees_positive (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_positive"]], "count_degrees_positive_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_positive_by_data_model"]], "count_degrees_positive_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_positive_by_interaction_type"]], "count_degrees_positive_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_positive_by_interaction_type_and_data_model"]], "count_degrees_positive_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_positive_by_interaction_type_and_data_model_and_resource"]], "count_degrees_positive_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_positive_by_reference"]], "count_degrees_positive_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_positive_by_resource"]], "count_degrees_positive_in (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_positive_in"]], "count_degrees_positive_in_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_positive_in_by_data_model"]], "count_degrees_positive_in_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_positive_in_by_interaction_type"]], "count_degrees_positive_in_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_positive_in_by_interaction_type_and_data_model"]], "count_degrees_positive_in_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_positive_in_by_interaction_type_and_data_model_and_resource"]], "count_degrees_positive_in_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_positive_in_by_reference"]], "count_degrees_positive_in_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_positive_in_by_resource"]], "count_degrees_positive_out (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_positive_out"]], "count_degrees_positive_out_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_positive_out_by_data_model"]], "count_degrees_positive_out_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_positive_out_by_interaction_type"]], "count_degrees_positive_out_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_positive_out_by_interaction_type_and_data_model"]], "count_degrees_positive_out_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_positive_out_by_interaction_type_and_data_model_and_resource"]], "count_degrees_positive_out_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_positive_out_by_reference"]], "count_degrees_positive_out_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_positive_out_by_resource"]], "count_degrees_signed (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_signed"]], "count_degrees_signed_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_signed_by_data_model"]], "count_degrees_signed_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_signed_by_interaction_type"]], "count_degrees_signed_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_signed_by_interaction_type_and_data_model"]], "count_degrees_signed_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_signed_by_interaction_type_and_data_model_and_resource"]], "count_degrees_signed_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_signed_by_reference"]], "count_degrees_signed_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_signed_by_resource"]], "count_degrees_signed_in (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_signed_in"]], "count_degrees_signed_in_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_signed_in_by_data_model"]], "count_degrees_signed_in_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_signed_in_by_interaction_type"]], "count_degrees_signed_in_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_signed_in_by_interaction_type_and_data_model"]], "count_degrees_signed_in_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_signed_in_by_interaction_type_and_data_model_and_resource"]], "count_degrees_signed_in_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_signed_in_by_reference"]], "count_degrees_signed_in_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_signed_in_by_resource"]], "count_degrees_signed_out (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_signed_out"]], "count_degrees_signed_out_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_signed_out_by_data_model"]], "count_degrees_signed_out_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_signed_out_by_interaction_type"]], "count_degrees_signed_out_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_signed_out_by_interaction_type_and_data_model"]], "count_degrees_signed_out_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_signed_out_by_interaction_type_and_data_model_and_resource"]], "count_degrees_signed_out_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_signed_out_by_reference"]], "count_degrees_signed_out_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_signed_out_by_resource"]], "count_degrees_undirected (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_undirected"]], "count_degrees_undirected_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_undirected_by_data_model"]], "count_degrees_undirected_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_undirected_by_interaction_type"]], "count_degrees_undirected_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_undirected_by_interaction_type_and_data_model"]], "count_degrees_undirected_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_undirected_by_interaction_type_and_data_model_and_resource"]], "count_degrees_undirected_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_undirected_by_reference"]], "count_degrees_undirected_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_undirected_by_resource"]], "count_entities (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_entities"]], "count_entities_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_entities_by_data_model"]], "count_entities_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_entities_by_interaction_type"]], "count_entities_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_entities_by_interaction_type_and_data_model"]], "count_entities_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_entities_by_interaction_type_and_data_model_and_resource"]], "count_entities_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_entities_by_reference"]], "count_entities_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_entities_by_resource"]], "count_evidences (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_evidences"]], "count_evidences_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_evidences_by_data_model"]], "count_evidences_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_evidences_by_interaction_type"]], "count_evidences_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_evidences_by_interaction_type_and_data_model"]], "count_evidences_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_evidences_by_interaction_type_and_data_model_and_resource"]], "count_evidences_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_evidences_by_reference"]], "count_evidences_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_evidences_by_resource"]], "count_identifiers (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_identifiers"]], "count_identifiers_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_identifiers_by_data_model"]], "count_identifiers_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_identifiers_by_interaction_type"]], "count_identifiers_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_identifiers_by_interaction_type_and_data_model"]], "count_identifiers_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_identifiers_by_interaction_type_and_data_model_and_resource"]], "count_identifiers_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_identifiers_by_reference"]], "count_identifiers_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_identifiers_by_resource"]], "count_interaction_types (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interaction_types"]], "count_interaction_types_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interaction_types_by_data_model"]], "count_interaction_types_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interaction_types_by_interaction_type"]], "count_interaction_types_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interaction_types_by_interaction_type_and_data_model"]], "count_interaction_types_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interaction_types_by_interaction_type_and_data_model_and_resource"]], "count_interaction_types_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interaction_types_by_reference"]], "count_interaction_types_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interaction_types_by_resource"]], "count_interactions (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions"]], "count_interactions_0 (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_0"]], "count_interactions_0_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_0_by_data_model"]], "count_interactions_0_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_0_by_interaction_type"]], "count_interactions_0_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_0_by_interaction_type_and_data_model"]], "count_interactions_0_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_0_by_interaction_type_and_data_model_and_resource"]], "count_interactions_0_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_0_by_reference"]], "count_interactions_0_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_0_by_resource"]], "count_interactions_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_by_data_model"]], "count_interactions_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_by_interaction_type"]], "count_interactions_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_by_interaction_type_and_data_model"]], "count_interactions_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_by_interaction_type_and_data_model_and_resource"]], "count_interactions_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_by_reference"]], "count_interactions_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_by_resource"]], "count_interactions_directed (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_directed"]], "count_interactions_directed_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_directed_by_data_model"]], "count_interactions_directed_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_directed_by_interaction_type"]], "count_interactions_directed_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_directed_by_interaction_type_and_data_model"]], "count_interactions_directed_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_directed_by_interaction_type_and_data_model_and_resource"]], "count_interactions_directed_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_directed_by_reference"]], "count_interactions_directed_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_directed_by_resource"]], "count_interactions_mutual (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_mutual"]], "count_interactions_mutual_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_mutual_by_data_model"]], "count_interactions_mutual_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_mutual_by_interaction_type"]], "count_interactions_mutual_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_mutual_by_interaction_type_and_data_model"]], "count_interactions_mutual_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_mutual_by_interaction_type_and_data_model_and_resource"]], "count_interactions_mutual_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_mutual_by_reference"]], "count_interactions_mutual_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_mutual_by_resource"]], "count_interactions_negative (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_negative"]], "count_interactions_negative_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_negative_by_data_model"]], "count_interactions_negative_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_negative_by_interaction_type"]], "count_interactions_negative_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_negative_by_interaction_type_and_data_model"]], "count_interactions_negative_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_negative_by_interaction_type_and_data_model_and_resource"]], "count_interactions_negative_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_negative_by_reference"]], "count_interactions_negative_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_negative_by_resource"]], "count_interactions_non_directed (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_non_directed"]], "count_interactions_non_directed_0 (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_non_directed_0"]], "count_interactions_non_directed_0_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_non_directed_0_by_data_model"]], "count_interactions_non_directed_0_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_non_directed_0_by_interaction_type"]], "count_interactions_non_directed_0_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_non_directed_0_by_interaction_type_and_data_model"]], "count_interactions_non_directed_0_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_non_directed_0_by_interaction_type_and_data_model_and_resource"]], "count_interactions_non_directed_0_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_non_directed_0_by_reference"]], "count_interactions_non_directed_0_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_non_directed_0_by_resource"]], "count_interactions_non_directed_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_non_directed_by_data_model"]], "count_interactions_non_directed_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_non_directed_by_interaction_type"]], "count_interactions_non_directed_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_non_directed_by_interaction_type_and_data_model"]], "count_interactions_non_directed_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_non_directed_by_interaction_type_and_data_model_and_resource"]], "count_interactions_non_directed_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_non_directed_by_reference"]], "count_interactions_non_directed_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_non_directed_by_resource"]], "count_interactions_positive (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_positive"]], "count_interactions_positive_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_positive_by_data_model"]], "count_interactions_positive_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_positive_by_interaction_type"]], "count_interactions_positive_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_positive_by_interaction_type_and_data_model"]], "count_interactions_positive_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_positive_by_interaction_type_and_data_model_and_resource"]], "count_interactions_positive_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_positive_by_reference"]], "count_interactions_positive_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_positive_by_resource"]], "count_interactions_signed (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_signed"]], "count_interactions_signed_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_signed_by_data_model"]], "count_interactions_signed_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_signed_by_interaction_type"]], "count_interactions_signed_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_signed_by_interaction_type_and_data_model"]], "count_interactions_signed_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_signed_by_interaction_type_and_data_model_and_resource"]], "count_interactions_signed_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_signed_by_reference"]], "count_interactions_signed_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_signed_by_resource"]], "count_interactions_undirected (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_undirected"]], "count_interactions_undirected_0 (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_undirected_0"]], "count_interactions_undirected_0_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_undirected_0_by_data_model"]], "count_interactions_undirected_0_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_undirected_0_by_interaction_type"]], "count_interactions_undirected_0_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_undirected_0_by_interaction_type_and_data_model"]], "count_interactions_undirected_0_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_undirected_0_by_interaction_type_and_data_model_and_resource"]], "count_interactions_undirected_0_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_undirected_0_by_reference"]], "count_interactions_undirected_0_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_undirected_0_by_resource"]], "count_interactions_undirected_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_undirected_by_data_model"]], "count_interactions_undirected_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_undirected_by_interaction_type"]], "count_interactions_undirected_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_undirected_by_interaction_type_and_data_model"]], "count_interactions_undirected_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_undirected_by_interaction_type_and_data_model_and_resource"]], "count_interactions_undirected_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_undirected_by_reference"]], "count_interactions_undirected_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_undirected_by_resource"]], "count_labels (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_labels"]], "count_labels_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_labels_by_data_model"]], "count_labels_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_labels_by_interaction_type"]], "count_labels_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_labels_by_interaction_type_and_data_model"]], "count_labels_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_labels_by_interaction_type_and_data_model_and_resource"]], "count_labels_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_labels_by_reference"]], "count_labels_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_labels_by_resource"]], "count_lncrna_identifiers (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_lncrna_identifiers"]], "count_lncrna_identifiers_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_lncrna_identifiers_by_data_model"]], "count_lncrna_identifiers_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_lncrna_identifiers_by_interaction_type"]], "count_lncrna_identifiers_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_lncrna_identifiers_by_interaction_type_and_data_model"]], "count_lncrna_identifiers_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_lncrna_identifiers_by_interaction_type_and_data_model_and_resource"]], "count_lncrna_identifiers_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_lncrna_identifiers_by_reference"]], "count_lncrna_identifiers_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_lncrna_identifiers_by_resource"]], "count_lncrna_labels (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_lncrna_labels"]], "count_lncrna_labels_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_lncrna_labels_by_data_model"]], "count_lncrna_labels_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_lncrna_labels_by_interaction_type"]], "count_lncrna_labels_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_lncrna_labels_by_interaction_type_and_data_model"]], "count_lncrna_labels_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_lncrna_labels_by_interaction_type_and_data_model_and_resource"]], "count_lncrna_labels_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_lncrna_labels_by_reference"]], "count_lncrna_labels_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_lncrna_labels_by_resource"]], "count_lncrnas (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_lncrnas"]], "count_lncrnas_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_lncrnas_by_data_model"]], "count_lncrnas_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_lncrnas_by_interaction_type"]], "count_lncrnas_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_lncrnas_by_interaction_type_and_data_model"]], "count_lncrnas_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_lncrnas_by_interaction_type_and_data_model_and_resource"]], "count_lncrnas_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_lncrnas_by_reference"]], "count_lncrnas_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_lncrnas_by_resource"]], "count_mirna_identifiers (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_mirna_identifiers"]], "count_mirna_identifiers_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_mirna_identifiers_by_data_model"]], "count_mirna_identifiers_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_mirna_identifiers_by_interaction_type"]], "count_mirna_identifiers_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_mirna_identifiers_by_interaction_type_and_data_model"]], "count_mirna_identifiers_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_mirna_identifiers_by_interaction_type_and_data_model_and_resource"]], "count_mirna_identifiers_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_mirna_identifiers_by_reference"]], "count_mirna_identifiers_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_mirna_identifiers_by_resource"]], "count_mirna_labels (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_mirna_labels"]], "count_mirna_labels_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_mirna_labels_by_data_model"]], "count_mirna_labels_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_mirna_labels_by_interaction_type"]], "count_mirna_labels_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_mirna_labels_by_interaction_type_and_data_model"]], "count_mirna_labels_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_mirna_labels_by_interaction_type_and_data_model_and_resource"]], "count_mirna_labels_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_mirna_labels_by_reference"]], "count_mirna_labels_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_mirna_labels_by_resource"]], "count_mirnas (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_mirnas"]], "count_mirnas_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_mirnas_by_data_model"]], "count_mirnas_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_mirnas_by_interaction_type"]], "count_mirnas_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_mirnas_by_interaction_type_and_data_model"]], "count_mirnas_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_mirnas_by_interaction_type_and_data_model_and_resource"]], "count_mirnas_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_mirnas_by_reference"]], "count_mirnas_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_mirnas_by_resource"]], "count_partners() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.count_partners"]], "count_post_transcriptionally_activated_by (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_post_transcriptionally_activated_by"]], "count_post_transcriptionally_activates (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_post_transcriptionally_activates"]], "count_post_transcriptionally_regulated_by (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_post_transcriptionally_regulated_by"]], "count_post_transcriptionally_regulates (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_post_transcriptionally_regulates"]], "count_post_transcriptionally_suppressed_by (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_post_transcriptionally_suppressed_by"]], "count_post_transcriptionally_suppresses (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_post_transcriptionally_suppresses"]], "count_post_translationally_activated_by (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_post_translationally_activated_by"]], "count_post_translationally_activates (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_post_translationally_activates"]], "count_post_translationally_regulated_by (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_post_translationally_regulated_by"]], "count_post_translationally_regulates (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_post_translationally_regulates"]], "count_post_translationally_suppressed_by (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_post_translationally_suppressed_by"]], "count_post_translationally_suppresses (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_post_translationally_suppresses"]], "count_protein_identifiers (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_protein_identifiers"]], "count_protein_identifiers_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_protein_identifiers_by_data_model"]], "count_protein_identifiers_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_protein_identifiers_by_interaction_type"]], "count_protein_identifiers_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_protein_identifiers_by_interaction_type_and_data_model"]], "count_protein_identifiers_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_protein_identifiers_by_interaction_type_and_data_model_and_resource"]], "count_protein_identifiers_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_protein_identifiers_by_reference"]], "count_protein_identifiers_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_protein_identifiers_by_resource"]], "count_protein_labels (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_protein_labels"]], "count_protein_labels_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_protein_labels_by_data_model"]], "count_protein_labels_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_protein_labels_by_interaction_type"]], "count_protein_labels_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_protein_labels_by_interaction_type_and_data_model"]], "count_protein_labels_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_protein_labels_by_interaction_type_and_data_model_and_resource"]], "count_protein_labels_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_protein_labels_by_reference"]], "count_protein_labels_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_protein_labels_by_resource"]], "count_proteins (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_proteins"]], "count_proteins_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_proteins_by_data_model"]], "count_proteins_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_proteins_by_interaction_type"]], "count_proteins_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_proteins_by_interaction_type_and_data_model"]], "count_proteins_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_proteins_by_interaction_type_and_data_model_and_resource"]], "count_proteins_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_proteins_by_reference"]], "count_proteins_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_proteins_by_resource"]], "count_references (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_references"]], "count_references_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_references_by_data_model"]], "count_references_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_references_by_interaction_type"]], "count_references_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_references_by_interaction_type_and_data_model"]], "count_references_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_references_by_interaction_type_and_data_model_and_resource"]], "count_references_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_references_by_reference"]], "count_references_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_references_by_resource"]], "count_regulated_by (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_regulated_by"]], "count_regulates (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_regulates"]], "count_resource_names (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_resource_names"]], "count_resource_names_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_resource_names_by_data_model"]], "count_resource_names_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_resource_names_by_interaction_type"]], "count_resource_names_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_resource_names_by_interaction_type_and_data_model"]], "count_resource_names_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_resource_names_by_interaction_type_and_data_model_and_resource"]], "count_resource_names_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_resource_names_by_reference"]], "count_resource_names_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_resource_names_by_resource"]], "count_resource_names_via (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_resource_names_via"]], "count_resource_names_via_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_resource_names_via_by_data_model"]], "count_resource_names_via_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_resource_names_via_by_interaction_type"]], "count_resource_names_via_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_resource_names_via_by_interaction_type_and_data_model"]], "count_resource_names_via_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_resource_names_via_by_interaction_type_and_data_model_and_resource"]], "count_resource_names_via_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_resource_names_via_by_reference"]], "count_resource_names_via_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_resource_names_via_by_resource"]], "count_resources (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_resources"]], "count_resources_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_resources_by_data_model"]], "count_resources_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_resources_by_interaction_type"]], "count_resources_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_resources_by_interaction_type_and_data_model"]], "count_resources_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_resources_by_interaction_type_and_data_model_and_resource"]], "count_resources_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_resources_by_reference"]], "count_resources_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_resources_by_resource"]], "count_resources_via (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_resources_via"]], "count_resources_via_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_resources_via_by_data_model"]], "count_resources_via_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_resources_via_by_interaction_type"]], "count_resources_via_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_resources_via_by_interaction_type_and_data_model"]], "count_resources_via_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_resources_via_by_interaction_type_and_data_model_and_resource"]], "count_resources_via_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_resources_via_by_reference"]], "count_resources_via_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_resources_via_by_resource"]], "count_small_molecule_identifiers (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_small_molecule_identifiers"]], "count_small_molecule_identifiers_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_small_molecule_identifiers_by_data_model"]], "count_small_molecule_identifiers_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_small_molecule_identifiers_by_interaction_type"]], "count_small_molecule_identifiers_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_small_molecule_identifiers_by_interaction_type_and_data_model"]], "count_small_molecule_identifiers_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_small_molecule_identifiers_by_interaction_type_and_data_model_and_resource"]], "count_small_molecule_identifiers_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_small_molecule_identifiers_by_reference"]], "count_small_molecule_identifiers_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_small_molecule_identifiers_by_resource"]], "count_small_molecule_labels (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_small_molecule_labels"]], "count_small_molecule_labels_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_small_molecule_labels_by_data_model"]], "count_small_molecule_labels_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_small_molecule_labels_by_interaction_type"]], "count_small_molecule_labels_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_small_molecule_labels_by_interaction_type_and_data_model"]], "count_small_molecule_labels_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_small_molecule_labels_by_interaction_type_and_data_model_and_resource"]], "count_small_molecule_labels_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_small_molecule_labels_by_reference"]], "count_small_molecule_labels_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_small_molecule_labels_by_resource"]], "count_small_molecules (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_small_molecules"]], "count_small_molecules_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_small_molecules_by_data_model"]], "count_small_molecules_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_small_molecules_by_interaction_type"]], "count_small_molecules_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_small_molecules_by_interaction_type_and_data_model"]], "count_small_molecules_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_small_molecules_by_interaction_type_and_data_model_and_resource"]], "count_small_molecules_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_small_molecules_by_reference"]], "count_small_molecules_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_small_molecules_by_resource"]], "count_suppressed_by (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_suppressed_by"]], "count_suppresses (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_suppresses"]], "count_transcriptionally_activated_by (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_transcriptionally_activated_by"]], "count_transcriptionally_activates (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_transcriptionally_activates"]], "count_transcriptionally_regulated_by (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_transcriptionally_regulated_by"]], "count_transcriptionally_regulates (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_transcriptionally_regulates"]], "count_transcriptionally_suppressed_by (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_transcriptionally_suppressed_by"]], "count_transcriptionally_suppresses (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_transcriptionally_suppresses"]], "curation_effort_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.curation_effort_by_data_model"]], "curation_effort_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.curation_effort_by_interaction_type"]], "curation_effort_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.curation_effort_by_interaction_type_and_data_model"]], "curation_effort_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.curation_effort_by_interaction_type_and_data_model_and_resource"]], "curation_effort_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.curation_effort_by_reference"]], "curation_effort_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.curation_effort_by_resource"]], "data_models_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.data_models_by_data_model"]], "data_models_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.data_models_by_interaction_type"]], "data_models_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.data_models_by_interaction_type_and_data_model"]], "data_models_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.data_models_by_interaction_type_and_data_model_and_resource"]], "data_models_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.data_models_by_reference"]], "data_models_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.data_models_by_resource"]], "degrees_directed_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_directed_by_data_model"]], "degrees_directed_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_directed_by_interaction_type"]], "degrees_directed_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_directed_by_interaction_type_and_data_model"]], "degrees_directed_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_directed_by_interaction_type_and_data_model_and_resource"]], "degrees_directed_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_directed_by_reference"]], "degrees_directed_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_directed_by_resource"]], "degrees_directed_in_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_directed_in_by_data_model"]], "degrees_directed_in_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_directed_in_by_interaction_type"]], "degrees_directed_in_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_directed_in_by_interaction_type_and_data_model"]], "degrees_directed_in_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_directed_in_by_interaction_type_and_data_model_and_resource"]], "degrees_directed_in_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_directed_in_by_reference"]], "degrees_directed_in_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_directed_in_by_resource"]], "degrees_directed_out_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_directed_out_by_data_model"]], "degrees_directed_out_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_directed_out_by_interaction_type"]], "degrees_directed_out_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_directed_out_by_interaction_type_and_data_model"]], "degrees_directed_out_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_directed_out_by_interaction_type_and_data_model_and_resource"]], "degrees_directed_out_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_directed_out_by_reference"]], "degrees_directed_out_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_directed_out_by_resource"]], "degrees_negative_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_negative_by_data_model"]], "degrees_negative_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_negative_by_interaction_type"]], "degrees_negative_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_negative_by_interaction_type_and_data_model"]], "degrees_negative_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_negative_by_interaction_type_and_data_model_and_resource"]], "degrees_negative_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_negative_by_reference"]], "degrees_negative_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_negative_by_resource"]], "degrees_negative_in_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_negative_in_by_data_model"]], "degrees_negative_in_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_negative_in_by_interaction_type"]], "degrees_negative_in_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_negative_in_by_interaction_type_and_data_model"]], "degrees_negative_in_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_negative_in_by_interaction_type_and_data_model_and_resource"]], "degrees_negative_in_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_negative_in_by_reference"]], "degrees_negative_in_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_negative_in_by_resource"]], "degrees_negative_out_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_negative_out_by_data_model"]], "degrees_negative_out_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_negative_out_by_interaction_type"]], "degrees_negative_out_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_negative_out_by_interaction_type_and_data_model"]], "degrees_negative_out_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_negative_out_by_interaction_type_and_data_model_and_resource"]], "degrees_negative_out_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_negative_out_by_reference"]], "degrees_negative_out_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_negative_out_by_resource"]], "degrees_non_directed_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_non_directed_by_data_model"]], "degrees_non_directed_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_non_directed_by_interaction_type"]], "degrees_non_directed_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_non_directed_by_interaction_type_and_data_model"]], "degrees_non_directed_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_non_directed_by_interaction_type_and_data_model_and_resource"]], "degrees_non_directed_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_non_directed_by_reference"]], "degrees_non_directed_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_non_directed_by_resource"]], "degrees_positive_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_positive_by_data_model"]], "degrees_positive_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_positive_by_interaction_type"]], "degrees_positive_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_positive_by_interaction_type_and_data_model"]], "degrees_positive_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_positive_by_interaction_type_and_data_model_and_resource"]], "degrees_positive_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_positive_by_reference"]], "degrees_positive_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_positive_by_resource"]], "degrees_positive_in_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_positive_in_by_data_model"]], "degrees_positive_in_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_positive_in_by_interaction_type"]], "degrees_positive_in_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_positive_in_by_interaction_type_and_data_model"]], "degrees_positive_in_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_positive_in_by_interaction_type_and_data_model_and_resource"]], "degrees_positive_in_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_positive_in_by_reference"]], "degrees_positive_in_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_positive_in_by_resource"]], "degrees_positive_out_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_positive_out_by_data_model"]], "degrees_positive_out_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_positive_out_by_interaction_type"]], "degrees_positive_out_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_positive_out_by_interaction_type_and_data_model"]], "degrees_positive_out_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_positive_out_by_interaction_type_and_data_model_and_resource"]], "degrees_positive_out_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_positive_out_by_reference"]], "degrees_positive_out_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_positive_out_by_resource"]], "degrees_signed_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_signed_by_data_model"]], "degrees_signed_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_signed_by_interaction_type"]], "degrees_signed_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_signed_by_interaction_type_and_data_model"]], "degrees_signed_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_signed_by_interaction_type_and_data_model_and_resource"]], "degrees_signed_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_signed_by_reference"]], "degrees_signed_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_signed_by_resource"]], "degrees_signed_in_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_signed_in_by_data_model"]], "degrees_signed_in_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_signed_in_by_interaction_type"]], "degrees_signed_in_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_signed_in_by_interaction_type_and_data_model"]], "degrees_signed_in_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_signed_in_by_interaction_type_and_data_model_and_resource"]], "degrees_signed_in_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_signed_in_by_reference"]], "degrees_signed_in_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_signed_in_by_resource"]], "degrees_signed_out_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_signed_out_by_data_model"]], "degrees_signed_out_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_signed_out_by_interaction_type"]], "degrees_signed_out_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_signed_out_by_interaction_type_and_data_model"]], "degrees_signed_out_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_signed_out_by_interaction_type_and_data_model_and_resource"]], "degrees_signed_out_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_signed_out_by_reference"]], "degrees_signed_out_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_signed_out_by_resource"]], "degrees_undirected_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_undirected_by_data_model"]], "degrees_undirected_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_undirected_by_interaction_type"]], "degrees_undirected_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_undirected_by_interaction_type_and_data_model"]], "degrees_undirected_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_undirected_by_interaction_type_and_data_model_and_resource"]], "degrees_undirected_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_undirected_by_reference"]], "degrees_undirected_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_undirected_by_resource"]], "direction_consistency() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.direction_consistency"]], "dorothea() (pypath.core.network.network class method)": [[145, "pypath.core.network.Network.dorothea"]], "entities_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.entities_by_data_model"]], "entities_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.entities_by_interaction_type"]], "entities_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.entities_by_interaction_type_and_data_model"]], "entities_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.entities_by_interaction_type_and_data_model_and_resource"]], "entities_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.entities_by_reference"]], "entities_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.entities_by_resource"]], "entity_by_id() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.entity_by_id"]], "entity_by_label() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.entity_by_label"]], "evidences_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.evidences_by_data_model"]], "evidences_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.evidences_by_interaction_type"]], "evidences_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.evidences_by_interaction_type_and_data_model"]], "evidences_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.evidences_by_interaction_type_and_data_model_and_resource"]], "evidences_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.evidences_by_reference"]], "evidences_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.evidences_by_resource"]], "extra_directions() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.extra_directions"]], "find_paths() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.find_paths"]], "from_igraph() (pypath.core.network.network class method)": [[145, "pypath.core.network.Network.from_igraph"]], "from_pickle() (pypath.core.network.network class method)": [[145, "pypath.core.network.Network.from_pickle"]], "get_complex_identifiers (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_complex_identifiers"]], "get_complex_labels (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_complex_labels"]], "get_complexes (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_complexes"]], "get_curation_effort (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_curation_effort"]], "get_data_models (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_data_models"]], "get_degrees_directed (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_degrees_directed"]], "get_degrees_directed_in (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_degrees_directed_in"]], "get_degrees_directed_out (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_degrees_directed_out"]], "get_degrees_negative (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_degrees_negative"]], "get_degrees_negative_in (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_degrees_negative_in"]], "get_degrees_negative_out (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_degrees_negative_out"]], "get_degrees_non_directed (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_degrees_non_directed"]], "get_degrees_positive (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_degrees_positive"]], "get_degrees_positive_in (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_degrees_positive_in"]], "get_degrees_positive_out (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_degrees_positive_out"]], "get_degrees_signed (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_degrees_signed"]], "get_degrees_signed_in (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_degrees_signed_in"]], "get_degrees_signed_out (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_degrees_signed_out"]], "get_degrees_undirected (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_degrees_undirected"]], "get_entities (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_entities"]], "get_evidences (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_evidences"]], "get_identifiers (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_identifiers"]], "get_interaction_types (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_interaction_types"]], "get_interactions (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_interactions"]], "get_interactions_0 (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_interactions_0"]], "get_interactions_directed (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_interactions_directed"]], "get_interactions_mutual (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_interactions_mutual"]], "get_interactions_negative (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_interactions_negative"]], "get_interactions_non_directed (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_interactions_non_directed"]], "get_interactions_non_directed_0 (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_interactions_non_directed_0"]], "get_interactions_positive (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_interactions_positive"]], "get_interactions_signed (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_interactions_signed"]], "get_interactions_undirected (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_interactions_undirected"]], "get_interactions_undirected_0 (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_interactions_undirected_0"]], "get_labels (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_labels"]], "get_lncrna_identifiers (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_lncrna_identifiers"]], "get_lncrna_labels (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_lncrna_labels"]], "get_lncrnas (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_lncrnas"]], "get_mirna_identifiers (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_mirna_identifiers"]], "get_mirna_labels (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_mirna_labels"]], "get_mirnas (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_mirnas"]], "get_organisms() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.get_organisms"]], "get_protein_identifiers (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_protein_identifiers"]], "get_protein_labels (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_protein_labels"]], "get_proteins (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_proteins"]], "get_references (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_references"]], "get_resource_names (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_resource_names"]], "get_resource_names_via (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_resource_names_via"]], "get_resources (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_resources"]], "get_resources_via (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_resources_via"]], "get_small_molecule_identifiers (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_small_molecule_identifiers"]], "get_small_molecule_labels (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_small_molecule_labels"]], "get_small_molecules (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_small_molecules"]], "htp_interactions() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.htp_interactions"]], "htp_references() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.htp_references"]], "identifiers_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.identifiers_by_data_model"]], "identifiers_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.identifiers_by_interaction_type"]], "identifiers_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.identifiers_by_interaction_type_and_data_model"]], "identifiers_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.identifiers_by_interaction_type_and_data_model_and_resource"]], "identifiers_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.identifiers_by_reference"]], "identifiers_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.identifiers_by_resource"]], "init_network() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.init_network"]], "interaction() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.interaction"]], "interaction_by_id() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.interaction_by_id"]], "interaction_by_label() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.interaction_by_label"]], "interaction_types_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interaction_types_by_data_model"]], "interaction_types_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interaction_types_by_interaction_type"]], "interaction_types_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interaction_types_by_interaction_type_and_data_model"]], "interaction_types_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interaction_types_by_interaction_type_and_data_model_and_resource"]], "interaction_types_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interaction_types_by_reference"]], "interaction_types_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interaction_types_by_resource"]], "interactions_0_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_0_by_data_model"]], "interactions_0_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_0_by_interaction_type"]], "interactions_0_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_0_by_interaction_type_and_data_model"]], "interactions_0_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_0_by_interaction_type_and_data_model_and_resource"]], "interactions_0_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_0_by_reference"]], "interactions_0_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_0_by_resource"]], "interactions_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_by_data_model"]], "interactions_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_by_interaction_type"]], "interactions_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_by_interaction_type_and_data_model"]], "interactions_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_by_interaction_type_and_data_model_and_resource"]], "interactions_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_by_reference"]], "interactions_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_by_resource"]], "interactions_directed_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_directed_by_data_model"]], "interactions_directed_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_directed_by_interaction_type"]], "interactions_directed_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_directed_by_interaction_type_and_data_model"]], "interactions_directed_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_directed_by_interaction_type_and_data_model_and_resource"]], "interactions_directed_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_directed_by_reference"]], "interactions_directed_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_directed_by_resource"]], "interactions_mutual_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_mutual_by_data_model"]], "interactions_mutual_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_mutual_by_interaction_type"]], "interactions_mutual_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_mutual_by_interaction_type_and_data_model"]], "interactions_mutual_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_mutual_by_interaction_type_and_data_model_and_resource"]], "interactions_mutual_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_mutual_by_reference"]], "interactions_mutual_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_mutual_by_resource"]], "interactions_negative_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_negative_by_data_model"]], "interactions_negative_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_negative_by_interaction_type"]], "interactions_negative_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_negative_by_interaction_type_and_data_model"]], "interactions_negative_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_negative_by_interaction_type_and_data_model_and_resource"]], "interactions_negative_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_negative_by_reference"]], "interactions_negative_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_negative_by_resource"]], "interactions_non_directed_0_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_non_directed_0_by_data_model"]], "interactions_non_directed_0_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_non_directed_0_by_interaction_type"]], "interactions_non_directed_0_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_non_directed_0_by_interaction_type_and_data_model"]], "interactions_non_directed_0_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_non_directed_0_by_interaction_type_and_data_model_and_resource"]], "interactions_non_directed_0_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_non_directed_0_by_reference"]], "interactions_non_directed_0_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_non_directed_0_by_resource"]], "interactions_non_directed_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_non_directed_by_data_model"]], "interactions_non_directed_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_non_directed_by_interaction_type"]], "interactions_non_directed_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_non_directed_by_interaction_type_and_data_model"]], "interactions_non_directed_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_non_directed_by_interaction_type_and_data_model_and_resource"]], "interactions_non_directed_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_non_directed_by_reference"]], "interactions_non_directed_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_non_directed_by_resource"]], "interactions_positive_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_positive_by_data_model"]], "interactions_positive_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_positive_by_interaction_type"]], "interactions_positive_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_positive_by_interaction_type_and_data_model"]], "interactions_positive_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_positive_by_interaction_type_and_data_model_and_resource"]], "interactions_positive_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_positive_by_reference"]], "interactions_positive_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_positive_by_resource"]], "interactions_signed_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_signed_by_data_model"]], "interactions_signed_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_signed_by_interaction_type"]], "interactions_signed_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_signed_by_interaction_type_and_data_model"]], "interactions_signed_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_signed_by_interaction_type_and_data_model_and_resource"]], "interactions_signed_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_signed_by_reference"]], "interactions_signed_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_signed_by_resource"]], "interactions_undirected_0_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_undirected_0_by_data_model"]], "interactions_undirected_0_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_undirected_0_by_interaction_type"]], "interactions_undirected_0_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_undirected_0_by_interaction_type_and_data_model"]], "interactions_undirected_0_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_undirected_0_by_interaction_type_and_data_model_and_resource"]], "interactions_undirected_0_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_undirected_0_by_reference"]], "interactions_undirected_0_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_undirected_0_by_resource"]], "interactions_undirected_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_undirected_by_data_model"]], "interactions_undirected_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_undirected_by_interaction_type"]], "interactions_undirected_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_undirected_by_interaction_type_and_data_model"]], "interactions_undirected_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_undirected_by_interaction_type_and_data_model_and_resource"]], "interactions_undirected_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_undirected_by_reference"]], "interactions_undirected_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_undirected_by_resource"]], "labels_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.labels_by_data_model"]], "labels_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.labels_by_interaction_type"]], "labels_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.labels_by_interaction_type_and_data_model"]], "labels_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.labels_by_interaction_type_and_data_model_and_resource"]], "labels_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.labels_by_reference"]], "labels_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.labels_by_resource"]], "lncrna_identifiers_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.lncrna_identifiers_by_data_model"]], "lncrna_identifiers_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.lncrna_identifiers_by_interaction_type"]], "lncrna_identifiers_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.lncrna_identifiers_by_interaction_type_and_data_model"]], "lncrna_identifiers_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.lncrna_identifiers_by_interaction_type_and_data_model_and_resource"]], "lncrna_identifiers_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.lncrna_identifiers_by_reference"]], "lncrna_identifiers_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.lncrna_identifiers_by_resource"]], "lncrna_labels_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.lncrna_labels_by_data_model"]], "lncrna_labels_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.lncrna_labels_by_interaction_type"]], "lncrna_labels_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.lncrna_labels_by_interaction_type_and_data_model"]], "lncrna_labels_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.lncrna_labels_by_interaction_type_and_data_model_and_resource"]], "lncrna_labels_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.lncrna_labels_by_reference"]], "lncrna_labels_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.lncrna_labels_by_resource"]], "lncrnas_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.lncrnas_by_data_model"]], "lncrnas_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.lncrnas_by_interaction_type"]], "lncrnas_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.lncrnas_by_interaction_type_and_data_model"]], "lncrnas_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.lncrnas_by_interaction_type_and_data_model_and_resource"]], "lncrnas_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.lncrnas_by_reference"]], "lncrnas_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.lncrnas_by_resource"]], "load() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.load"]], "load_from_pickle() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.load_from_pickle"]], "load_resource() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.load_resource"]], "load_resources() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.load_resources"]], "make_df() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.make_df"]], "mirna_identifiers_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.mirna_identifiers_by_data_model"]], "mirna_identifiers_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.mirna_identifiers_by_interaction_type"]], "mirna_identifiers_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.mirna_identifiers_by_interaction_type_and_data_model"]], "mirna_identifiers_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.mirna_identifiers_by_interaction_type_and_data_model_and_resource"]], "mirna_identifiers_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.mirna_identifiers_by_reference"]], "mirna_identifiers_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.mirna_identifiers_by_resource"]], "mirna_labels_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.mirna_labels_by_data_model"]], "mirna_labels_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.mirna_labels_by_interaction_type"]], "mirna_labels_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.mirna_labels_by_interaction_type_and_data_model"]], "mirna_labels_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.mirna_labels_by_interaction_type_and_data_model_and_resource"]], "mirna_labels_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.mirna_labels_by_reference"]], "mirna_labels_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.mirna_labels_by_resource"]], "mirna_target() (pypath.core.network.network class method)": [[145, "pypath.core.network.Network.mirna_target"]], "mirnas_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.mirnas_by_data_model"]], "mirnas_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.mirnas_by_interaction_type"]], "mirnas_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.mirnas_by_interaction_type_and_data_model"]], "mirnas_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.mirnas_by_interaction_type_and_data_model_and_resource"]], "mirnas_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.mirnas_by_reference"]], "mirnas_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.mirnas_by_resource"]], "numof_interactions_per_reference() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.numof_interactions_per_reference"]], "organisms_check() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.organisms_check"]], "partners() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.partners"]], "post_transcriptionally_activated_by (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.post_transcriptionally_activated_by"]], "post_transcriptionally_activates (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.post_transcriptionally_activates"]], "post_transcriptionally_regulated_by (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.post_transcriptionally_regulated_by"]], "post_transcriptionally_regulates (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.post_transcriptionally_regulates"]], "post_transcriptionally_suppressed_by (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.post_transcriptionally_suppressed_by"]], "post_transcriptionally_suppresses (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.post_transcriptionally_suppresses"]], "post_translationally_activated_by (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.post_translationally_activated_by"]], "post_translationally_activates (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.post_translationally_activates"]], "post_translationally_regulated_by (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.post_translationally_regulated_by"]], "post_translationally_regulates (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.post_translationally_regulates"]], "post_translationally_suppressed_by (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.post_translationally_suppressed_by"]], "post_translationally_suppresses (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.post_translationally_suppresses"]], "protein_identifiers_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.protein_identifiers_by_data_model"]], "protein_identifiers_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.protein_identifiers_by_interaction_type"]], "protein_identifiers_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.protein_identifiers_by_interaction_type_and_data_model"]], "protein_identifiers_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.protein_identifiers_by_interaction_type_and_data_model_and_resource"]], "protein_identifiers_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.protein_identifiers_by_reference"]], "protein_identifiers_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.protein_identifiers_by_resource"]], "protein_labels_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.protein_labels_by_data_model"]], "protein_labels_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.protein_labels_by_interaction_type"]], "protein_labels_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.protein_labels_by_interaction_type_and_data_model"]], "protein_labels_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.protein_labels_by_interaction_type_and_data_model_and_resource"]], "protein_labels_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.protein_labels_by_reference"]], "protein_labels_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.protein_labels_by_resource"]], "proteins_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.proteins_by_data_model"]], "proteins_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.proteins_by_interaction_type"]], "proteins_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.proteins_by_interaction_type_and_data_model"]], "proteins_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.proteins_by_interaction_type_and_data_model_and_resource"]], "proteins_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.proteins_by_reference"]], "proteins_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.proteins_by_resource"]], "random_interaction() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.random_interaction"]], "references_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.references_by_data_model"]], "references_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.references_by_interaction_type"]], "references_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.references_by_interaction_type_and_data_model"]], "references_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.references_by_interaction_type_and_data_model_and_resource"]], "references_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.references_by_reference"]], "references_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.references_by_resource"]], "regulated_by (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.regulated_by"]], "regulates (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.regulates"]], "reload() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.reload"]], "remove_interaction() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.remove_interaction"]], "remove_loops() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.remove_loops"]], "remove_node() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.remove_node"]], "remove_zero_degree() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.remove_zero_degree"]], "reset() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.reset"]], "resource_names (pypath.core.network.network property)": [[145, "pypath.core.network.Network.resource_names"]], "resource_names_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.resource_names_by_data_model"]], "resource_names_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.resource_names_by_interaction_type"]], "resource_names_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.resource_names_by_interaction_type_and_data_model"]], "resource_names_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.resource_names_by_interaction_type_and_data_model_and_resource"]], "resource_names_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.resource_names_by_reference"]], "resource_names_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.resource_names_by_resource"]], "resource_names_via_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.resource_names_via_by_data_model"]], "resource_names_via_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.resource_names_via_by_interaction_type"]], "resource_names_via_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.resource_names_via_by_interaction_type_and_data_model"]], "resource_names_via_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.resource_names_via_by_interaction_type_and_data_model_and_resource"]], "resource_names_via_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.resource_names_via_by_reference"]], "resource_names_via_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.resource_names_via_by_resource"]], "resources (pypath.core.network.network property)": [[145, "pypath.core.network.Network.resources"]], "resources_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.resources_by_data_model"]], "resources_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.resources_by_interaction_type"]], "resources_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.resources_by_interaction_type_and_data_model"]], "resources_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.resources_by_interaction_type_and_data_model_and_resource"]], "resources_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.resources_by_reference"]], "resources_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.resources_by_resource"]], "resources_via_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.resources_via_by_data_model"]], "resources_via_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.resources_via_by_interaction_type"]], "resources_via_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.resources_via_by_interaction_type_and_data_model"]], "resources_via_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.resources_via_by_interaction_type_and_data_model_and_resource"]], "resources_via_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.resources_via_by_reference"]], "resources_via_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.resources_via_by_resource"]], "save_to_pickle() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.save_to_pickle"]], "small_molecule_identifiers_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.small_molecule_identifiers_by_data_model"]], "small_molecule_identifiers_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.small_molecule_identifiers_by_interaction_type"]], "small_molecule_identifiers_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.small_molecule_identifiers_by_interaction_type_and_data_model"]], "small_molecule_identifiers_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.small_molecule_identifiers_by_interaction_type_and_data_model_and_resource"]], "small_molecule_identifiers_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.small_molecule_identifiers_by_reference"]], "small_molecule_identifiers_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.small_molecule_identifiers_by_resource"]], "small_molecule_labels_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.small_molecule_labels_by_data_model"]], "small_molecule_labels_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.small_molecule_labels_by_interaction_type"]], "small_molecule_labels_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.small_molecule_labels_by_interaction_type_and_data_model"]], "small_molecule_labels_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.small_molecule_labels_by_interaction_type_and_data_model_and_resource"]], "small_molecule_labels_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.small_molecule_labels_by_reference"]], "small_molecule_labels_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.small_molecule_labels_by_resource"]], "small_molecules_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.small_molecules_by_data_model"]], "small_molecules_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.small_molecules_by_interaction_type"]], "small_molecules_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.small_molecules_by_interaction_type_and_data_model"]], "small_molecules_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.small_molecules_by_interaction_type_and_data_model_and_resource"]], "small_molecules_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.small_molecules_by_reference"]], "small_molecules_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.small_molecules_by_resource"]], "summaries_tab() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.summaries_tab"]], "suppressed_by (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.suppressed_by"]], "suppresses (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.suppresses"]], "to_igraph() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.to_igraph"]], "transcription() (pypath.core.network.network class method)": [[145, "pypath.core.network.Network.transcription"]], "transcriptionally_activated_by (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.transcriptionally_activated_by"]], "transcriptionally_activates (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.transcriptionally_activates"]], "transcriptionally_regulated_by (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.transcriptionally_regulated_by"]], "transcriptionally_regulates (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.transcriptionally_regulates"]], "transcriptionally_suppressed_by (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.transcriptionally_suppressed_by"]], "transcriptionally_suppresses (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.transcriptionally_suppresses"]], "networkentitycollection (class in pypath.core.network)": [[146, "pypath.core.network.NetworkEntityCollection"]], "__init__() (pypath.core.network.networkentitycollection method)": [[146, "pypath.core.network.NetworkEntityCollection.__init__"]], "networkstatsrecord (class in pypath.core.network)": [[147, "pypath.core.network.NetworkStatsRecord"]], "__init__() (pypath.core.network.networkstatsrecord method)": [[147, "pypath.core.network.NetworkStatsRecord.__init__"]], "by_category (pypath.core.network.networkstatsrecord attribute)": [[147, "pypath.core.network.NetworkStatsRecord.by_category"]], "by_resource (pypath.core.network.networkstatsrecord attribute)": [[147, "pypath.core.network.NetworkStatsRecord.by_resource"]], "cat_resource (pypath.core.network.networkstatsrecord attribute)": [[147, "pypath.core.network.NetworkStatsRecord.cat_resource"]], "count() (pypath.core.network.networkstatsrecord method)": [[147, "pypath.core.network.NetworkStatsRecord.count"]], "index() (pypath.core.network.networkstatsrecord method)": [[147, "pypath.core.network.NetworkStatsRecord.index"]], "label (pypath.core.network.networkstatsrecord attribute)": [[147, "pypath.core.network.NetworkStatsRecord.label"]], "method (pypath.core.network.networkstatsrecord attribute)": [[147, "pypath.core.network.NetworkStatsRecord.method"]], "percent (pypath.core.network.networkstatsrecord attribute)": [[147, "pypath.core.network.NetworkStatsRecord.percent"]], "percent_cat (pypath.core.network.networkstatsrecord attribute)": [[147, "pypath.core.network.NetworkStatsRecord.percent_cat"]], "percent_res_cat (pypath.core.network.networkstatsrecord attribute)": [[147, "pypath.core.network.NetworkStatsRecord.percent_res_cat"]], "resource_cat (pypath.core.network.networkstatsrecord attribute)": [[147, "pypath.core.network.NetworkStatsRecord.resource_cat"]], "shared (pypath.core.network.networkstatsrecord attribute)": [[147, "pypath.core.network.NetworkStatsRecord.shared"]], "shared_cat (pypath.core.network.networkstatsrecord attribute)": [[147, "pypath.core.network.NetworkStatsRecord.shared_cat"]], "shared_res_cat (pypath.core.network.networkstatsrecord attribute)": [[147, "pypath.core.network.NetworkStatsRecord.shared_res_cat"]], "total (pypath.core.network.networkstatsrecord attribute)": [[147, "pypath.core.network.NetworkStatsRecord.total"]], "unique (pypath.core.network.networkstatsrecord attribute)": [[147, "pypath.core.network.NetworkStatsRecord.unique"]], "unique_cat (pypath.core.network.networkstatsrecord attribute)": [[147, "pypath.core.network.NetworkStatsRecord.unique_cat"]], "unique_res_cat (pypath.core.network.networkstatsrecord attribute)": [[147, "pypath.core.network.NetworkStatsRecord.unique_res_cat"]], "get_db() (in module pypath.core.network)": [[148, "pypath.core.network.get_db"]], "init_db() (in module pypath.core.network)": [[149, "pypath.core.network.init_db"]], "pypath.data": [[150, "module-pypath.data"]], "disclaimer() (in module pypath)": [[151, "pypath.disclaimer"]], "info() (in module pypath)": [[152, "pypath.info"]], "pypath.inputs": [[153, "module-pypath.inputs"]], "pypath.inputs.abs": [[154, "module-pypath.inputs.abs"]], "abs_interactions() (in module pypath.inputs.abs)": [[155, "pypath.inputs.abs.abs_interactions"]], "pypath.inputs.acsn": [[156, "module-pypath.inputs.acsn"]], "acsn_interactions() (in module pypath.inputs.acsn)": [[157, "pypath.inputs.acsn.acsn_interactions"]], "acsn_interactions_sif() (in module pypath.inputs.acsn)": [[158, "pypath.inputs.acsn.acsn_interactions_sif"]], "pypath.inputs.adhesome": [[159, "module-pypath.inputs.adhesome"]], "adhesome_annotations() (in module pypath.inputs.adhesome)": [[160, "pypath.inputs.adhesome.adhesome_annotations"]], "adhesome_interactions() (in module pypath.inputs.adhesome)": [[161, "pypath.inputs.adhesome.adhesome_interactions"]], "pypath.inputs.almen2009": [[162, "module-pypath.inputs.almen2009"]], "almen2009_annotations() (in module pypath.inputs.almen2009)": [[163, "pypath.inputs.almen2009.almen2009_annotations"]], "pypath.inputs.baccin2019": [[164, "module-pypath.inputs.baccin2019"]], "baccin2019_annotations() (in module pypath.inputs.baccin2019)": [[165, "pypath.inputs.baccin2019.baccin2019_annotations"]], "baccin2019_interactions() (in module pypath.inputs.baccin2019)": [[166, "pypath.inputs.baccin2019.baccin2019_interactions"]], "pypath.inputs.biogps": [[167, "module-pypath.inputs.biogps"]], "biogpsdataset (class in pypath.inputs.biogps)": [[168, "pypath.inputs.biogps.BiogpsDataset"]], "__init__() (pypath.inputs.biogps.biogpsdataset method)": [[168, "pypath.inputs.biogps.BiogpsDataset.__init__"]], "count() (pypath.inputs.biogps.biogpsdataset method)": [[168, "pypath.inputs.biogps.BiogpsDataset.count"]], "index() (pypath.inputs.biogps.biogpsdataset method)": [[168, "pypath.inputs.biogps.BiogpsDataset.index"]], "label (pypath.inputs.biogps.biogpsdataset attribute)": [[168, "pypath.inputs.biogps.BiogpsDataset.label"]], "organism (pypath.inputs.biogps.biogpsdataset attribute)": [[168, "pypath.inputs.biogps.BiogpsDataset.organism"]], "url (pypath.inputs.biogps.biogpsdataset attribute)": [[168, "pypath.inputs.biogps.BiogpsDataset.url"]], "biogps_annotations() (in module pypath.inputs.biogps)": [[169, "pypath.inputs.biogps.biogps_annotations"]], "biogps_datasets() (in module pypath.inputs.biogps)": [[170, "pypath.inputs.biogps.biogps_datasets"]], "biogps_download() (in module pypath.inputs.biogps)": [[171, "pypath.inputs.biogps.biogps_download"]], "biogps_download_all() (in module pypath.inputs.biogps)": [[172, "pypath.inputs.biogps.biogps_download_all"]], "pypath.inputs.biogrid": [[173, "module-pypath.inputs.biogrid"]], "biogrid_all_interactions() (in module pypath.inputs.biogrid)": [[174, "pypath.inputs.biogrid.biogrid_all_interactions"]], "biogrid_interactions() (in module pypath.inputs.biogrid)": [[175, "pypath.inputs.biogrid.biogrid_interactions"]], "pypath.inputs.biomart": [[176, "module-pypath.inputs.biomart"]], "biomart_homology() (in module pypath.inputs.biomart)": [[177, "pypath.inputs.biomart.biomart_homology"]], "biomart_microarray() (in module pypath.inputs.biomart)": [[178, "pypath.inputs.biomart.biomart_microarray"]], "biomart_microarray_types() (in module pypath.inputs.biomart)": [[179, "pypath.inputs.biomart.biomart_microarray_types"]], "biomart_microarrays() (in module pypath.inputs.biomart)": [[180, "pypath.inputs.biomart.biomart_microarrays"]], "biomart_query() (in module pypath.inputs.biomart)": [[181, "pypath.inputs.biomart.biomart_query"]], "pypath.inputs.biomodels": [[182, "module-pypath.inputs.biomodels"]], "download_single_model() (in module pypath.inputs.biomodels)": [[183, "pypath.inputs.biomodels.download_single_model"]], "get_all_models() (in module pypath.inputs.biomodels)": [[184, "pypath.inputs.biomodels.get_all_models"]], "get_biomodels() (in module pypath.inputs.biomodels)": [[185, "pypath.inputs.biomodels.get_biomodels"]], "get_biomodels_req() (in module pypath.inputs.biomodels)": [[186, "pypath.inputs.biomodels.get_biomodels_req"]], "get_single_model() (in module pypath.inputs.biomodels)": [[187, "pypath.inputs.biomodels.get_single_model"]], "pypath.inputs.ca1": [[188, "module-pypath.inputs.ca1"]], "ca1_interactions() (in module pypath.inputs.ca1)": [[189, "pypath.inputs.ca1.ca1_interactions"]], "pypath.inputs.cancercellmap": [[190, "module-pypath.inputs.cancercellmap"]], "ccmap_interactions() (in module pypath.inputs.cancercellmap)": [[191, "pypath.inputs.cancercellmap.ccmap_interactions"]], "pypath.inputs.cancerdrugsdb": [[192, "module-pypath.inputs.cancerdrugsdb"]], "cancerdrugsdb_annotations() (in module pypath.inputs.cancerdrugsdb)": [[193, "pypath.inputs.cancerdrugsdb.cancerdrugsdb_annotations"]], "cancerdrugsdb_download() (in module pypath.inputs.cancerdrugsdb)": [[194, "pypath.inputs.cancerdrugsdb.cancerdrugsdb_download"]], "cancerdrugsdb_interactions() (in module pypath.inputs.cancerdrugsdb)": [[195, "pypath.inputs.cancerdrugsdb.cancerdrugsdb_interactions"]], "pypath.inputs.cancersea": [[196, "module-pypath.inputs.cancersea"]], "cancersea_annotations() (in module pypath.inputs.cancersea)": [[197, "pypath.inputs.cancersea.cancersea_annotations"]], "pypath.inputs.cell": [[198, "module-pypath.inputs.cell"]], "cell_supplementary() (in module pypath.inputs.cell)": [[199, "pypath.inputs.cell.cell_supplementary"]], "pypath.inputs.cellcall": [[200, "module-pypath.inputs.cellcall"]], "cellcall_annotations() (in module pypath.inputs.cellcall)": [[201, "pypath.inputs.cellcall.cellcall_annotations"]], "cellcall_download() (in module pypath.inputs.cellcall)": [[202, "pypath.inputs.cellcall.cellcall_download"]], "cellcall_download_all() (in module pypath.inputs.cellcall)": [[203, "pypath.inputs.cellcall.cellcall_download_all"]], "cellcall_interactions() (in module pypath.inputs.cellcall)": [[204, "pypath.inputs.cellcall.cellcall_interactions"]], "pypath.inputs.cellcellinteractions": [[205, "module-pypath.inputs.cellcellinteractions"]], "cellcellinteractions_annotations() (in module pypath.inputs.cellcellinteractions)": [[206, "pypath.inputs.cellcellinteractions.cellcellinteractions_annotations"]], "pypath.inputs.cellchatdb": [[207, "module-pypath.inputs.cellchatdb"]], "cellchatdb_annotations() (in module pypath.inputs.cellchatdb)": [[208, "pypath.inputs.cellchatdb.cellchatdb_annotations"]], "cellchatdb_cofactors() (in module pypath.inputs.cellchatdb)": [[209, "pypath.inputs.cellchatdb.cellchatdb_cofactors"]], "cellchatdb_complexes() (in module pypath.inputs.cellchatdb)": [[210, "pypath.inputs.cellchatdb.cellchatdb_complexes"]], "cellchatdb_download() (in module pypath.inputs.cellchatdb)": [[211, "pypath.inputs.cellchatdb.cellchatdb_download"]], "cellchatdb_interactions() (in module pypath.inputs.cellchatdb)": [[212, "pypath.inputs.cellchatdb.cellchatdb_interactions"]], "pypath.inputs.cellinker": [[213, "module-pypath.inputs.cellinker"]], "cellinkerinteraction (class in pypath.inputs.cellinker)": [[214, "pypath.inputs.cellinker.CellinkerInteraction"]], "__init__() (pypath.inputs.cellinker.cellinkerinteraction method)": [[214, "pypath.inputs.cellinker.CellinkerInteraction.__init__"]], "count() (pypath.inputs.cellinker.cellinkerinteraction method)": [[214, "pypath.inputs.cellinker.CellinkerInteraction.count"]], "index() (pypath.inputs.cellinker.cellinkerinteraction method)": [[214, "pypath.inputs.cellinker.CellinkerInteraction.index"]], "ligand (pypath.inputs.cellinker.cellinkerinteraction attribute)": [[214, "pypath.inputs.cellinker.CellinkerInteraction.ligand"]], "ligand_location (pypath.inputs.cellinker.cellinkerinteraction attribute)": [[214, "pypath.inputs.cellinker.CellinkerInteraction.ligand_location"]], "pmids (pypath.inputs.cellinker.cellinkerinteraction attribute)": [[214, "pypath.inputs.cellinker.CellinkerInteraction.pmids"]], "receptor (pypath.inputs.cellinker.cellinkerinteraction attribute)": [[214, "pypath.inputs.cellinker.CellinkerInteraction.receptor"]], "receptor_location (pypath.inputs.cellinker.cellinkerinteraction attribute)": [[214, "pypath.inputs.cellinker.CellinkerInteraction.receptor_location"]], "resources (pypath.inputs.cellinker.cellinkerinteraction attribute)": [[214, "pypath.inputs.cellinker.CellinkerInteraction.resources"]], "type (pypath.inputs.cellinker.cellinkerinteraction attribute)": [[214, "pypath.inputs.cellinker.CellinkerInteraction.type"]], "cellinker_annotations() (in module pypath.inputs.cellinker)": [[215, "pypath.inputs.cellinker.cellinker_annotations"]], "cellinker_complex_annotations() (in module pypath.inputs.cellinker)": [[216, "pypath.inputs.cellinker.cellinker_complex_annotations"]], "cellinker_complexes() (in module pypath.inputs.cellinker)": [[217, "pypath.inputs.cellinker.cellinker_complexes"]], "cellinker_complexes_raw() (in module pypath.inputs.cellinker)": [[218, "pypath.inputs.cellinker.cellinker_complexes_raw"]], "cellinker_lr_interactions() (in module pypath.inputs.cellinker)": [[219, "pypath.inputs.cellinker.cellinker_lr_interactions"]], "cellinker_lr_interactions_raw() (in module pypath.inputs.cellinker)": [[220, "pypath.inputs.cellinker.cellinker_lr_interactions_raw"]], "cellinker_protein_annotations() (in module pypath.inputs.cellinker)": [[221, "pypath.inputs.cellinker.cellinker_protein_annotations"]], "cellinker_smol_interactions() (in module pypath.inputs.cellinker)": [[222, "pypath.inputs.cellinker.cellinker_smol_interactions"]], "cellinker_smol_interactions_raw() (in module pypath.inputs.cellinker)": [[223, "pypath.inputs.cellinker.cellinker_smol_interactions_raw"]], "components_to_complex() (in module pypath.inputs.cellinker)": [[224, "pypath.inputs.cellinker.components_to_complex"]], "pypath.inputs.cellphonedb": [[225, "module-pypath.inputs.cellphonedb"]], "cellphonedbannotation (class in pypath.inputs.cellphonedb)": [[226, "pypath.inputs.cellphonedb.CellPhoneDBAnnotation"]], "__init__() (pypath.inputs.cellphonedb.cellphonedbannotation method)": [[226, "pypath.inputs.cellphonedb.CellPhoneDBAnnotation.__init__"]], "count() (pypath.inputs.cellphonedb.cellphonedbannotation method)": [[226, "pypath.inputs.cellphonedb.CellPhoneDBAnnotation.count"]], "index() (pypath.inputs.cellphonedb.cellphonedbannotation method)": [[226, "pypath.inputs.cellphonedb.CellPhoneDBAnnotation.index"]], "integrin (pypath.inputs.cellphonedb.cellphonedbannotation attribute)": [[226, "pypath.inputs.cellphonedb.CellPhoneDBAnnotation.integrin"]], "peripheral (pypath.inputs.cellphonedb.cellphonedbannotation attribute)": [[226, "pypath.inputs.cellphonedb.CellPhoneDBAnnotation.peripheral"]], "receptor (pypath.inputs.cellphonedb.cellphonedbannotation attribute)": [[226, "pypath.inputs.cellphonedb.CellPhoneDBAnnotation.receptor"]], "receptor_class (pypath.inputs.cellphonedb.cellphonedbannotation attribute)": [[226, "pypath.inputs.cellphonedb.CellPhoneDBAnnotation.receptor_class"]], "secreted (pypath.inputs.cellphonedb.cellphonedbannotation attribute)": [[226, "pypath.inputs.cellphonedb.CellPhoneDBAnnotation.secreted"]], "secreted_class (pypath.inputs.cellphonedb.cellphonedbannotation attribute)": [[226, "pypath.inputs.cellphonedb.CellPhoneDBAnnotation.secreted_class"]], "transmembrane (pypath.inputs.cellphonedb.cellphonedbannotation attribute)": [[226, "pypath.inputs.cellphonedb.CellPhoneDBAnnotation.transmembrane"]], "cellphonedb_complex_annotations() (in module pypath.inputs.cellphonedb)": [[227, "pypath.inputs.cellphonedb.cellphonedb_complex_annotations"]], "cellphonedb_complexes() (in module pypath.inputs.cellphonedb)": [[228, "pypath.inputs.cellphonedb.cellphonedb_complexes"]], "cellphonedb_interactions() (in module pypath.inputs.cellphonedb)": [[229, "pypath.inputs.cellphonedb.cellphonedb_interactions"]], "cellphonedb_ligands_receptors() (in module pypath.inputs.cellphonedb)": [[230, "pypath.inputs.cellphonedb.cellphonedb_ligands_receptors"]], "cellphonedb_protein_annotations() (in module pypath.inputs.cellphonedb)": [[231, "pypath.inputs.cellphonedb.cellphonedb_protein_annotations"]], "pypath.inputs.celltalkdb": [[232, "module-pypath.inputs.celltalkdb"]], "celltalkdb_annotations() (in module pypath.inputs.celltalkdb)": [[233, "pypath.inputs.celltalkdb.celltalkdb_annotations"]], "celltalkdb_download() (in module pypath.inputs.celltalkdb)": [[234, "pypath.inputs.celltalkdb.celltalkdb_download"]], "celltalkdb_interactions() (in module pypath.inputs.celltalkdb)": [[235, "pypath.inputs.celltalkdb.celltalkdb_interactions"]], "pypath.inputs.celltypist": [[236, "module-pypath.inputs.celltypist"]], "celltypist_annotations() (in module pypath.inputs.celltypist)": [[237, "pypath.inputs.celltypist.celltypist_annotations"]], "pypath.inputs.chembl": [[238, "module-pypath.inputs.chembl"]], "chembl_activities() (in module pypath.inputs.chembl)": [[239, "pypath.inputs.chembl.chembl_activities"]], "chembl_assays() (in module pypath.inputs.chembl)": [[240, "pypath.inputs.chembl.chembl_assays"]], "chembl_documents() (in module pypath.inputs.chembl)": [[241, "pypath.inputs.chembl.chembl_documents"]], "chembl_drug_indications() (in module pypath.inputs.chembl)": [[242, "pypath.inputs.chembl.chembl_drug_indications"]], "chembl_mechanisms() (in module pypath.inputs.chembl)": [[243, "pypath.inputs.chembl.chembl_mechanisms"]], "chembl_molecules() (in module pypath.inputs.chembl)": [[244, "pypath.inputs.chembl.chembl_molecules"]], "chembl_targets() (in module pypath.inputs.chembl)": [[245, "pypath.inputs.chembl.chembl_targets"]], "pypath.inputs.clinvar": [[246, "module-pypath.inputs.clinvar"]], "clinvar_citations() (in module pypath.inputs.clinvar)": [[247, "pypath.inputs.clinvar.clinvar_citations"]], "clinvar_raw() (in module pypath.inputs.clinvar)": [[248, "pypath.inputs.clinvar.clinvar_raw"]], "pypath.inputs.collectri": [[249, "module-pypath.inputs.collectri"]], "collectri_interactions() (in module pypath.inputs.collectri)": [[250, "pypath.inputs.collectri.collectri_interactions"]], "pypath.inputs.common": [[251, "module-pypath.inputs.common"]], "csv_sep_change() (in module pypath.inputs.common)": [[252, "pypath.inputs.common.csv_sep_change"]], "glom_fields() (in module pypath.inputs.common)": [[253, "pypath.inputs.common.glom_fields"]], "json_extract() (in module pypath.inputs.common)": [[254, "pypath.inputs.common.json_extract"]], "json_read() (in module pypath.inputs.common)": [[255, "pypath.inputs.common.json_read"]], "read_table() (in module pypath.inputs.common)": [[256, "pypath.inputs.common.read_table"]], "read_xls() (in module pypath.inputs.common)": [[257, "pypath.inputs.common.read_xls"]], "pypath.inputs.compleat": [[258, "module-pypath.inputs.compleat"]], "compleat_complexes() (in module pypath.inputs.compleat)": [[259, "pypath.inputs.compleat.compleat_complexes"]], "compleat_raw() (in module pypath.inputs.compleat)": [[260, "pypath.inputs.compleat.compleat_raw"]], "pypath.inputs.complexportal": [[261, "module-pypath.inputs.complexportal"]], "complexportal_complexes() (in module pypath.inputs.complexportal)": [[262, "pypath.inputs.complexportal.complexportal_complexes"]], "pypath.inputs.comppi": [[263, "module-pypath.inputs.comppi"]], "comppi_interaction_locations() (in module pypath.inputs.comppi)": [[264, "pypath.inputs.comppi.comppi_interaction_locations"]], "comppi_locations() (in module pypath.inputs.comppi)": [[265, "pypath.inputs.comppi.comppi_locations"]], "pypath.inputs.connectomedb": [[266, "module-pypath.inputs.connectomedb"]], "connectomedb_annotations() (in module pypath.inputs.connectomedb)": [[267, "pypath.inputs.connectomedb.connectomedb_annotations"]], "connectomedb_interactions() (in module pypath.inputs.connectomedb)": [[268, "pypath.inputs.connectomedb.connectomedb_interactions"]], "pypath.inputs.corum": [[269, "module-pypath.inputs.corum"]], "corum_complexes() (in module pypath.inputs.corum)": [[270, "pypath.inputs.corum.corum_complexes"]], "pypath.inputs.cosmic": [[271, "module-pypath.inputs.cosmic"]], "cancer_gene_census_annotations() (in module pypath.inputs.cosmic)": [[272, "pypath.inputs.cosmic.cancer_gene_census_annotations"]], "pypath.inputs.cpad": [[273, "module-pypath.inputs.cpad"]], "cpad_annotations() (in module pypath.inputs.cpad)": [[274, "pypath.inputs.cpad.cpad_annotations"]], "cpad_pathway_cancer() (in module pypath.inputs.cpad)": [[275, "pypath.inputs.cpad.cpad_pathway_cancer"]], "get_cpad() (in module pypath.inputs.cpad)": [[276, "pypath.inputs.cpad.get_cpad"]], "pypath.inputs.cpdb": [[277, "module-pypath.inputs.cpdb"]], "cpdb_interactions() (in module pypath.inputs.cpdb)": [[278, "pypath.inputs.cpdb.cpdb_interactions"]], "cpdb_interactions_ltp() (in module pypath.inputs.cpdb)": [[279, "pypath.inputs.cpdb.cpdb_interactions_ltp"]], "pypath.inputs.credentials": [[280, "module-pypath.inputs.credentials"]], "credentials() (in module pypath.inputs.credentials)": [[281, "pypath.inputs.credentials.credentials"]], "pypath.inputs.csa": [[282, "module-pypath.inputs.csa"]], "get_csa() (in module pypath.inputs.csa)": [[283, "pypath.inputs.csa.get_csa"]], "pypath.inputs.cspa": [[284, "module-pypath.inputs.cspa"]], "cspa_annotations() (in module pypath.inputs.cspa)": [[285, "pypath.inputs.cspa.cspa_annotations"]], "cspa_cell_type_annotations() (in module pypath.inputs.cspa)": [[286, "pypath.inputs.cspa.cspa_cell_type_annotations"]], "cspa_cell_types() (in module pypath.inputs.cspa)": [[287, "pypath.inputs.cspa.cspa_cell_types"]], "pypath.inputs.ctdbase": [[288, "module-pypath.inputs.ctdbase"]], "ctdbase_relations() (in module pypath.inputs.ctdbase)": [[289, "pypath.inputs.ctdbase.ctdbase_relations"]], "ctdbase_vocabulary() (in module pypath.inputs.ctdbase)": [[290, "pypath.inputs.ctdbase.ctdbase_vocabulary"]], "pypath.inputs.cytosig": [[291, "module-pypath.inputs.cytosig"]], "cytosig_annotations() (in module pypath.inputs.cytosig)": [[292, "pypath.inputs.cytosig.cytosig_annotations"]], "cytosig_df() (in module pypath.inputs.cytosig)": [[293, "pypath.inputs.cytosig.cytosig_df"]], "pypath.inputs.dbptm": [[294, "module-pypath.inputs.dbptm"]], "dbptm_enzyme_substrate() (in module pypath.inputs.dbptm)": [[295, "pypath.inputs.dbptm.dbptm_enzyme_substrate"]], "dbptm_enzyme_substrate_old() (in module pypath.inputs.dbptm)": [[296, "pypath.inputs.dbptm.dbptm_enzyme_substrate_old"]], "dbptm_interactions() (in module pypath.inputs.dbptm)": [[297, "pypath.inputs.dbptm.dbptm_interactions"]], "pypath.inputs.deathdomain": [[298, "module-pypath.inputs.deathdomain"]], "deathdomain_interactions() (in module pypath.inputs.deathdomain)": [[299, "pypath.inputs.deathdomain.deathdomain_interactions"]], "deathdomain_interactions_rescued() (in module pypath.inputs.deathdomain)": [[300, "pypath.inputs.deathdomain.deathdomain_interactions_rescued"]], "pypath.inputs.depod": [[301, "module-pypath.inputs.depod"]], "depod_enzyme_substrate() (in module pypath.inputs.depod)": [[302, "pypath.inputs.depod.depod_enzyme_substrate"]], "depod_interactions() (in module pypath.inputs.depod)": [[303, "pypath.inputs.depod.depod_interactions"]], "pypath.inputs.dgidb": [[304, "module-pypath.inputs.dgidb"]], "dgidb_annotations() (in module pypath.inputs.dgidb)": [[305, "pypath.inputs.dgidb.dgidb_annotations"]], "dgidb_interactions() (in module pypath.inputs.dgidb)": [[306, "pypath.inputs.dgidb.dgidb_interactions"]], "get_dgidb_old() (in module pypath.inputs.dgidb)": [[307, "pypath.inputs.dgidb.get_dgidb_old"]], "pypath.inputs.dip": [[308, "module-pypath.inputs.dip"]], "dip_interactions() (in module pypath.inputs.dip)": [[309, "pypath.inputs.dip.dip_interactions"]], "dip_login() (in module pypath.inputs.dip)": [[310, "pypath.inputs.dip.dip_login"]], "pypath.inputs.disgenet": [[311, "module-pypath.inputs.disgenet"]], "disgenetapi (class in pypath.inputs.disgenet)": [[312, "pypath.inputs.disgenet.DisgenetApi"]], "__init__() (pypath.inputs.disgenet.disgenetapi method)": [[312, "pypath.inputs.disgenet.DisgenetApi.__init__"]], "authenticate() (pypath.inputs.disgenet.disgenetapi method)": [[312, "pypath.inputs.disgenet.DisgenetApi.authenticate"]], "get_ddas_that_share_genes() (pypath.inputs.disgenet.disgenetapi method)": [[312, "pypath.inputs.disgenet.DisgenetApi.get_ddas_that_share_genes"]], "get_ddas_that_share_variants() (pypath.inputs.disgenet.disgenetapi method)": [[312, "pypath.inputs.disgenet.DisgenetApi.get_ddas_that_share_variants"]], "get_gdas_by_diseases() (pypath.inputs.disgenet.disgenetapi method)": [[312, "pypath.inputs.disgenet.DisgenetApi.get_gdas_by_diseases"]], "get_gdas_by_genes() (pypath.inputs.disgenet.disgenetapi method)": [[312, "pypath.inputs.disgenet.DisgenetApi.get_gdas_by_genes"]], "get_gdas_by_source() (pypath.inputs.disgenet.disgenetapi method)": [[312, "pypath.inputs.disgenet.DisgenetApi.get_gdas_by_source"]], "get_gdas_by_uniprots() (pypath.inputs.disgenet.disgenetapi method)": [[312, "pypath.inputs.disgenet.DisgenetApi.get_gdas_by_uniprots"]], "get_vdas_by_diseases() (pypath.inputs.disgenet.disgenetapi method)": [[312, "pypath.inputs.disgenet.DisgenetApi.get_vdas_by_diseases"]], "get_vdas_by_genes() (pypath.inputs.disgenet.disgenetapi method)": [[312, "pypath.inputs.disgenet.DisgenetApi.get_vdas_by_genes"]], "get_vdas_by_source() (pypath.inputs.disgenet.disgenetapi method)": [[312, "pypath.inputs.disgenet.DisgenetApi.get_vdas_by_source"]], "get_vdas_by_variants() (pypath.inputs.disgenet.disgenetapi method)": [[312, "pypath.inputs.disgenet.DisgenetApi.get_vdas_by_variants"]], "disease_id_mappings() (in module pypath.inputs.disgenet)": [[313, "pypath.inputs.disgenet.disease_id_mappings"]], "disgenet_annotations() (in module pypath.inputs.disgenet)": [[314, "pypath.inputs.disgenet.disgenet_annotations"]], "variant_gene_mappings() (in module pypath.inputs.disgenet)": [[315, "pypath.inputs.disgenet.variant_gene_mappings"]], "pypath.inputs.domino": [[316, "module-pypath.inputs.domino"]], "domino_ddi() (in module pypath.inputs.domino)": [[317, "pypath.inputs.domino.domino_ddi"]], "domino_enzsub() (in module pypath.inputs.domino)": [[318, "pypath.inputs.domino.domino_enzsub"]], "domino_interactions() (in module pypath.inputs.domino)": [[319, "pypath.inputs.domino.domino_interactions"]], "get_domino() (in module pypath.inputs.domino)": [[320, "pypath.inputs.domino.get_domino"]], "pypath.inputs.dorothea": [[321, "module-pypath.inputs.dorothea"]], "dorotheainteraction (class in pypath.inputs.dorothea)": [[322, "pypath.inputs.dorothea.DorotheaInteraction"]], "__init__() (pypath.inputs.dorothea.dorotheainteraction method)": [[322, "pypath.inputs.dorothea.DorotheaInteraction.__init__"]], "all_sources (pypath.inputs.dorothea.dorotheainteraction attribute)": [[322, "pypath.inputs.dorothea.DorotheaInteraction.all_sources"]], "chipseq (pypath.inputs.dorothea.dorotheainteraction attribute)": [[322, "pypath.inputs.dorothea.DorotheaInteraction.chipseq"]], "chipseq_sources (pypath.inputs.dorothea.dorotheainteraction attribute)": [[322, "pypath.inputs.dorothea.DorotheaInteraction.chipseq_sources"]], "coexp (pypath.inputs.dorothea.dorotheainteraction attribute)": [[322, "pypath.inputs.dorothea.DorotheaInteraction.coexp"]], "coexp_sources (pypath.inputs.dorothea.dorotheainteraction attribute)": [[322, "pypath.inputs.dorothea.DorotheaInteraction.coexp_sources"]], "count() (pypath.inputs.dorothea.dorotheainteraction method)": [[322, "pypath.inputs.dorothea.DorotheaInteraction.count"]], "curated (pypath.inputs.dorothea.dorotheainteraction attribute)": [[322, "pypath.inputs.dorothea.DorotheaInteraction.curated"]], "curated_sources (pypath.inputs.dorothea.dorotheainteraction attribute)": [[322, "pypath.inputs.dorothea.DorotheaInteraction.curated_sources"]], "effect (pypath.inputs.dorothea.dorotheainteraction attribute)": [[322, "pypath.inputs.dorothea.DorotheaInteraction.effect"]], "index() (pypath.inputs.dorothea.dorotheainteraction method)": [[322, "pypath.inputs.dorothea.DorotheaInteraction.index"]], "kegg_pathways (pypath.inputs.dorothea.dorotheainteraction attribute)": [[322, "pypath.inputs.dorothea.DorotheaInteraction.kegg_pathways"]], "level (pypath.inputs.dorothea.dorotheainteraction attribute)": [[322, "pypath.inputs.dorothea.DorotheaInteraction.level"]], "predicted (pypath.inputs.dorothea.dorotheainteraction attribute)": [[322, "pypath.inputs.dorothea.DorotheaInteraction.predicted"]], "predicted_sources (pypath.inputs.dorothea.dorotheainteraction attribute)": [[322, "pypath.inputs.dorothea.DorotheaInteraction.predicted_sources"]], "pubmed (pypath.inputs.dorothea.dorotheainteraction attribute)": [[322, "pypath.inputs.dorothea.DorotheaInteraction.pubmed"]], "target (pypath.inputs.dorothea.dorotheainteraction attribute)": [[322, "pypath.inputs.dorothea.DorotheaInteraction.target"]], "tf (pypath.inputs.dorothea.dorotheainteraction attribute)": [[322, "pypath.inputs.dorothea.DorotheaInteraction.tf"]], "dorothea_full_raw() (in module pypath.inputs.dorothea)": [[323, "pypath.inputs.dorothea.dorothea_full_raw"]], "dorothea_interactions() (in module pypath.inputs.dorothea)": [[324, "pypath.inputs.dorothea.dorothea_interactions"]], "dorothea_interactions_old() (in module pypath.inputs.dorothea)": [[325, "pypath.inputs.dorothea.dorothea_interactions_old"]], "dorothea_old_csv() (in module pypath.inputs.dorothea)": [[326, "pypath.inputs.dorothea.dorothea_old_csv"]], "dorothea_rda_raw() (in module pypath.inputs.dorothea)": [[327, "pypath.inputs.dorothea.dorothea_rda_raw"]], "get_dorothea_old() (in module pypath.inputs.dorothea)": [[328, "pypath.inputs.dorothea.get_dorothea_old"]], "get_tfregulons() (in module pypath.inputs.dorothea)": [[329, "pypath.inputs.dorothea.get_tfregulons"]], "tfregulons_interactions() (in module pypath.inputs.dorothea)": [[330, "pypath.inputs.dorothea.tfregulons_interactions"]], "tfregulons_interactions_old() (in module pypath.inputs.dorothea)": [[331, "pypath.inputs.dorothea.tfregulons_interactions_old"]], "pypath.inputs.drugbank": [[332, "module-pypath.inputs.drugbank"]], "drugbankfull (class in pypath.inputs.drugbank)": [[333, "pypath.inputs.drugbank.DrugbankFull"]], "__init__() (pypath.inputs.drugbank.drugbankfull method)": [[333, "pypath.inputs.drugbank.DrugbankFull.__init__"]], "drugbank_drugs_full() (pypath.inputs.drugbank.drugbankfull method)": [[333, "pypath.inputs.drugbank.DrugbankFull.drugbank_drugs_full"]], "drugbank_external_ids_full() (pypath.inputs.drugbank.drugbankfull method)": [[333, "pypath.inputs.drugbank.DrugbankFull.drugbank_external_ids_full"]], "drugbank_properties_full() (pypath.inputs.drugbank.drugbankfull method)": [[333, "pypath.inputs.drugbank.DrugbankFull.drugbank_properties_full"]], "drugbank_targets_full() (pypath.inputs.drugbank.drugbankfull method)": [[333, "pypath.inputs.drugbank.DrugbankFull.drugbank_targets_full"]], "drugbank_annotations() (in module pypath.inputs.drugbank)": [[334, "pypath.inputs.drugbank.drugbank_annotations"]], "drugbank_drugs() (in module pypath.inputs.drugbank)": [[335, "pypath.inputs.drugbank.drugbank_drugs"]], "drugbank_interactions() (in module pypath.inputs.drugbank)": [[336, "pypath.inputs.drugbank.drugbank_interactions"]], "drugbank_mapping() (in module pypath.inputs.drugbank)": [[337, "pypath.inputs.drugbank.drugbank_mapping"]], "drugbank_raw_interactions() (in module pypath.inputs.drugbank)": [[338, "pypath.inputs.drugbank.drugbank_raw_interactions"]], "pypath.inputs.drugcentral": [[339, "module-pypath.inputs.drugcentral"]], "drugcentral_drugs() (in module pypath.inputs.drugcentral)": [[340, "pypath.inputs.drugcentral.drugcentral_drugs"]], "drugcentral_interactions() (in module pypath.inputs.drugcentral)": [[341, "pypath.inputs.drugcentral.drugcentral_interactions"]], "drugcentral_mapping() (in module pypath.inputs.drugcentral)": [[342, "pypath.inputs.drugcentral.drugcentral_mapping"]], "pypath.inputs.ebi": [[343, "module-pypath.inputs.ebi"]], "ebi_rest() (in module pypath.inputs.ebi)": [[344, "pypath.inputs.ebi.ebi_rest"]], "pypath.inputs.elm": [[345, "module-pypath.inputs.elm"]], "elm_classes() (in module pypath.inputs.elm)": [[346, "pypath.inputs.elm.elm_classes"]], "elm_domains() (in module pypath.inputs.elm)": [[347, "pypath.inputs.elm.elm_domains"]], "elm_instances() (in module pypath.inputs.elm)": [[348, "pypath.inputs.elm.elm_instances"]], "elm_interactions() (in module pypath.inputs.elm)": [[349, "pypath.inputs.elm.elm_interactions"]], "pypath.inputs.embopress": [[350, "module-pypath.inputs.embopress"]], "embopress_supplementary() (in module pypath.inputs.embopress)": [[351, "pypath.inputs.embopress.embopress_supplementary"]], "pypath.inputs.embrace": [[352, "module-pypath.inputs.embrace"]], "embrace_annotations() (in module pypath.inputs.embrace)": [[353, "pypath.inputs.embrace.embrace_annotations"]], "embrace_interactions() (in module pypath.inputs.embrace)": [[354, "pypath.inputs.embrace.embrace_interactions"]], "embrace_raw() (in module pypath.inputs.embrace)": [[355, "pypath.inputs.embrace.embrace_raw"]], "embrace_translated() (in module pypath.inputs.embrace)": [[356, "pypath.inputs.embrace.embrace_translated"]], "pypath.inputs.encode": [[357, "module-pypath.inputs.encode"]], "encode_tf_mirna_interactions() (in module pypath.inputs.encode)": [[358, "pypath.inputs.encode.encode_tf_mirna_interactions"]], "pypath.inputs.ensembl": [[359, "module-pypath.inputs.ensembl"]], "ensembl_organisms() (in module pypath.inputs.ensembl)": [[360, "pypath.inputs.ensembl.ensembl_organisms"]], "pypath.inputs.exocarta": [[361, "module-pypath.inputs.exocarta"]], "get_exocarta() (in module pypath.inputs.exocarta)": [[362, "pypath.inputs.exocarta.get_exocarta"]], "get_vesiclepedia() (in module pypath.inputs.exocarta)": [[363, "pypath.inputs.exocarta.get_vesiclepedia"]], "pypath.inputs.genecards": [[364, "module-pypath.inputs.genecards"]], "genecards_datasheet() (in module pypath.inputs.genecards)": [[365, "pypath.inputs.genecards.genecards_datasheet"]], "genecards_soup() (in module pypath.inputs.genecards)": [[366, "pypath.inputs.genecards.genecards_soup"]], "genecards_summaries() (in module pypath.inputs.genecards)": [[367, "pypath.inputs.genecards.genecards_summaries"]], "get_method() (in module pypath.inputs)": [[368, "pypath.inputs.get_method"]], "pypath.inputs.go": [[369, "module-pypath.inputs.go"]], "get_go_desc() (in module pypath.inputs.go)": [[370, "pypath.inputs.go.get_go_desc"]], "get_go_quick() (in module pypath.inputs.go)": [[371, "pypath.inputs.go.get_go_quick"]], "get_goslim() (in module pypath.inputs.go)": [[372, "pypath.inputs.go.get_goslim"]], "go_ancestors() (in module pypath.inputs.go)": [[373, "pypath.inputs.go.go_ancestors"]], "go_ancestors_goose() (in module pypath.inputs.go)": [[374, "pypath.inputs.go.go_ancestors_goose"]], "go_ancestors_quickgo() (in module pypath.inputs.go)": [[375, "pypath.inputs.go.go_ancestors_quickgo"]], "go_annotations() (in module pypath.inputs.go)": [[376, "pypath.inputs.go.go_annotations"]], "go_annotations_all() (in module pypath.inputs.go)": [[377, "pypath.inputs.go.go_annotations_all"]], "go_annotations_goa() (in module pypath.inputs.go)": [[378, "pypath.inputs.go.go_annotations_goa"]], "go_annotations_goose() (in module pypath.inputs.go)": [[379, "pypath.inputs.go.go_annotations_goose"]], "go_annotations_quickgo() (in module pypath.inputs.go)": [[380, "pypath.inputs.go.go_annotations_quickgo"]], "go_annotations_solr() (in module pypath.inputs.go)": [[381, "pypath.inputs.go.go_annotations_solr"]], "go_annotations_uniprot() (in module pypath.inputs.go)": [[382, "pypath.inputs.go.go_annotations_uniprot"]], "go_descendants() (in module pypath.inputs.go)": [[383, "pypath.inputs.go.go_descendants"]], "go_descendants_goose() (in module pypath.inputs.go)": [[384, "pypath.inputs.go.go_descendants_goose"]], "go_descendants_quickgo() (in module pypath.inputs.go)": [[385, "pypath.inputs.go.go_descendants_quickgo"]], "go_descendants_to_ancestors() (in module pypath.inputs.go)": [[386, "pypath.inputs.go.go_descendants_to_ancestors"]], "go_terms() (in module pypath.inputs.go)": [[387, "pypath.inputs.go.go_terms"]], "go_terms_goose() (in module pypath.inputs.go)": [[388, "pypath.inputs.go.go_terms_goose"]], "go_terms_quickgo() (in module pypath.inputs.go)": [[389, "pypath.inputs.go.go_terms_quickgo"]], "go_terms_solr() (in module pypath.inputs.go)": [[390, "pypath.inputs.go.go_terms_solr"]], "pypath.inputs.gpcrdb": [[391, "module-pypath.inputs.gpcrdb"]], "gpcrdb_annotations() (in module pypath.inputs.gpcrdb)": [[392, "pypath.inputs.gpcrdb.gpcrdb_annotations"]], "pypath.inputs.graphviz": [[393, "module-pypath.inputs.graphviz"]], "graphviz_attrs() (in module pypath.inputs.graphviz)": [[394, "pypath.inputs.graphviz.graphviz_attrs"]], "pypath.inputs.guide2pharma": [[395, "module-pypath.inputs.guide2pharma"]], "guide2pharma_complexes() (in module pypath.inputs.guide2pharma)": [[396, "pypath.inputs.guide2pharma.guide2pharma_complexes"]], "guide2pharma_download() (in module pypath.inputs.guide2pharma)": [[397, "pypath.inputs.guide2pharma.guide2pharma_download"]], "guide2pharma_interactions() (in module pypath.inputs.guide2pharma)": [[398, "pypath.inputs.guide2pharma.guide2pharma_interactions"]], "pypath.inputs.havugimana": [[399, "module-pypath.inputs.havugimana"]], "get_havugimana() (in module pypath.inputs.havugimana)": [[400, "pypath.inputs.havugimana.get_havugimana"]], "havugimana_complexes() (in module pypath.inputs.havugimana)": [[401, "pypath.inputs.havugimana.havugimana_complexes"]], "pypath.inputs.hgnc": [[402, "module-pypath.inputs.hgnc"]], "hgnc_genegroups() (in module pypath.inputs.hgnc)": [[403, "pypath.inputs.hgnc.hgnc_genegroups"]], "pypath.inputs.hippie": [[404, "module-pypath.inputs.hippie"]], "hippie_interactions() (in module pypath.inputs.hippie)": [[405, "pypath.inputs.hippie.hippie_interactions"]], "pypath.inputs.hmdb": [[406, "module-pypath.inputs.hmdb"]], "field (class in pypath.inputs.hmdb)": [[407, "pypath.inputs.hmdb.Field"]], "__init__() (pypath.inputs.hmdb.field method)": [[407, "pypath.inputs.hmdb.Field.__init__"]], "hmdb_iter_metabolites() (in module pypath.inputs.hmdb)": [[408, "pypath.inputs.hmdb.hmdb_iter_metabolites"]], "hmdb_mapping() (in module pypath.inputs.hmdb)": [[409, "pypath.inputs.hmdb.hmdb_mapping"]], "hmdb_metabolites_raw() (in module pypath.inputs.hmdb)": [[410, "pypath.inputs.hmdb.hmdb_metabolites_raw"]], "hmdb_table() (in module pypath.inputs.hmdb)": [[411, "pypath.inputs.hmdb.hmdb_table"]], "hmdb_xml() (in module pypath.inputs.hmdb)": [[412, "pypath.inputs.hmdb.hmdb_xml"]], "pypath.inputs.homologene": [[413, "module-pypath.inputs.homologene"]], "get_homologene() (in module pypath.inputs.homologene)": [[414, "pypath.inputs.homologene.get_homologene"]], "homologene_dict() (in module pypath.inputs.homologene)": [[415, "pypath.inputs.homologene.homologene_dict"]], "homologene_uniprot_dict() (in module pypath.inputs.homologene)": [[416, "pypath.inputs.homologene.homologene_uniprot_dict"]], "pypath.inputs.hpmr": [[417, "module-pypath.inputs.hpmr"]], "hpmrinteraction (class in pypath.inputs.hpmr)": [[418, "pypath.inputs.hpmr.HpmrInteraction"]], "__init__() (pypath.inputs.hpmr.hpmrinteraction method)": [[418, "pypath.inputs.hpmr.HpmrInteraction.__init__"]], "count() (pypath.inputs.hpmr.hpmrinteraction method)": [[418, "pypath.inputs.hpmr.HpmrInteraction.count"]], "index() (pypath.inputs.hpmr.hpmrinteraction method)": [[418, "pypath.inputs.hpmr.HpmrInteraction.index"]], "partner (pypath.inputs.hpmr.hpmrinteraction attribute)": [[418, "pypath.inputs.hpmr.HpmrInteraction.partner"]], "partner_role (pypath.inputs.hpmr.hpmrinteraction attribute)": [[418, "pypath.inputs.hpmr.HpmrInteraction.partner_role"]], "receptor (pypath.inputs.hpmr.hpmrinteraction attribute)": [[418, "pypath.inputs.hpmr.HpmrInteraction.receptor"]], "references (pypath.inputs.hpmr.hpmrinteraction attribute)": [[418, "pypath.inputs.hpmr.HpmrInteraction.references"]], "unambiguous (pypath.inputs.hpmr.hpmrinteraction attribute)": [[418, "pypath.inputs.hpmr.HpmrInteraction.unambiguous"]], "get_hpmr() (in module pypath.inputs.hpmr)": [[419, "pypath.inputs.hpmr.get_hpmr"]], "hpmr_annotations() (in module pypath.inputs.hpmr)": [[420, "pypath.inputs.hpmr.hpmr_annotations"]], "hpmr_complexes() (in module pypath.inputs.hpmr)": [[421, "pypath.inputs.hpmr.hpmr_complexes"]], "hpmr_interactions() (in module pypath.inputs.hpmr)": [[422, "pypath.inputs.hpmr.hpmr_interactions"]], "pypath.inputs.hpo": [[423, "module-pypath.inputs.hpo"]], "hpo_annotations() (in module pypath.inputs.hpo)": [[424, "pypath.inputs.hpo.hpo_annotations"]], "hpo_diseases() (in module pypath.inputs.hpo)": [[425, "pypath.inputs.hpo.hpo_diseases"]], "hpo_ontology() (in module pypath.inputs.hpo)": [[426, "pypath.inputs.hpo.hpo_ontology"]], "hpo_terms() (in module pypath.inputs.hpo)": [[427, "pypath.inputs.hpo.hpo_terms"]], "pypath.inputs.hprd": [[428, "module-pypath.inputs.hprd"]], "get_hprd() (in module pypath.inputs.hprd)": [[429, "pypath.inputs.hprd.get_hprd"]], "hprd_enzyme_substrate() (in module pypath.inputs.hprd)": [[430, "pypath.inputs.hprd.hprd_enzyme_substrate"]], "hprd_interactions() (in module pypath.inputs.hprd)": [[431, "pypath.inputs.hprd.hprd_interactions"]], "hprd_interactions_htp() (in module pypath.inputs.hprd)": [[432, "pypath.inputs.hprd.hprd_interactions_htp"]], "pypath.inputs.htri": [[433, "module-pypath.inputs.htri"]], "htri_interactions() (in module pypath.inputs.htri)": [[434, "pypath.inputs.htri.htri_interactions"]], "pypath.inputs.humancellmap": [[435, "module-pypath.inputs.humancellmap"]], "humancellmap_annotations() (in module pypath.inputs.humancellmap)": [[436, "pypath.inputs.humancellmap.humancellmap_annotations"]], "pypath.inputs.humap": [[437, "module-pypath.inputs.humap"]], "humap2_complexes() (in module pypath.inputs.humap)": [[438, "pypath.inputs.humap.humap2_complexes"]], "humap_complexes() (in module pypath.inputs.humap)": [[439, "pypath.inputs.humap.humap_complexes"]], "pypath.inputs.huri": [[440, "module-pypath.inputs.huri"]], "hi_i_interactions() (in module pypath.inputs.huri)": [[441, "pypath.inputs.huri.hi_i_interactions"]], "hi_ii_interactions() (in module pypath.inputs.huri)": [[442, "pypath.inputs.huri.hi_ii_interactions"]], "hi_iii_old() (in module pypath.inputs.huri)": [[443, "pypath.inputs.huri.hi_iii_old"]], "hi_union_interactions() (in module pypath.inputs.huri)": [[444, "pypath.inputs.huri.hi_union_interactions"]], "huri_interactions() (in module pypath.inputs.huri)": [[445, "pypath.inputs.huri.huri_interactions"]], "lit_bm_13_interactions() (in module pypath.inputs.huri)": [[446, "pypath.inputs.huri.lit_bm_13_interactions"]], "lit_bm_17_interactions() (in module pypath.inputs.huri)": [[447, "pypath.inputs.huri.lit_bm_17_interactions"]], "lit_bm_interactions() (in module pypath.inputs.huri)": [[448, "pypath.inputs.huri.lit_bm_interactions"]], "rolland_hi_ii_14() (in module pypath.inputs.huri)": [[449, "pypath.inputs.huri.rolland_hi_ii_14"]], "vidal_hi_iii_old() (in module pypath.inputs.huri)": [[450, "pypath.inputs.huri.vidal_hi_iii_old"]], "yang2016_interactions() (in module pypath.inputs.huri)": [[451, "pypath.inputs.huri.yang2016_interactions"]], "yu2011_interactions() (in module pypath.inputs.huri)": [[452, "pypath.inputs.huri.yu2011_interactions"]], "pypath.inputs.i3d": [[453, "module-pypath.inputs.i3d"]], "get_i3d() (in module pypath.inputs.i3d)": [[454, "pypath.inputs.i3d.get_i3d"]], "pypath.inputs.icellnet": [[455, "module-pypath.inputs.icellnet"]], "icellnetrecord (class in pypath.inputs.icellnet)": [[456, "pypath.inputs.icellnet.IcellnetRecord"]], "__init__() (pypath.inputs.icellnet.icellnetrecord method)": [[456, "pypath.inputs.icellnet.IcellnetRecord.__init__"]], "classification (pypath.inputs.icellnet.icellnetrecord attribute)": [[456, "pypath.inputs.icellnet.IcellnetRecord.classification"]], "count() (pypath.inputs.icellnet.icellnetrecord method)": [[456, "pypath.inputs.icellnet.IcellnetRecord.count"]], "family (pypath.inputs.icellnet.icellnetrecord attribute)": [[456, "pypath.inputs.icellnet.IcellnetRecord.family"]], "index() (pypath.inputs.icellnet.icellnetrecord method)": [[456, "pypath.inputs.icellnet.IcellnetRecord.index"]], "ligand (pypath.inputs.icellnet.icellnetrecord attribute)": [[456, "pypath.inputs.icellnet.IcellnetRecord.ligand"]], "receptor (pypath.inputs.icellnet.icellnetrecord attribute)": [[456, "pypath.inputs.icellnet.IcellnetRecord.receptor"]], "references (pypath.inputs.icellnet.icellnetrecord attribute)": [[456, "pypath.inputs.icellnet.IcellnetRecord.references"]], "resources (pypath.inputs.icellnet.icellnetrecord attribute)": [[456, "pypath.inputs.icellnet.IcellnetRecord.resources"]], "subfamily (pypath.inputs.icellnet.icellnetrecord attribute)": [[456, "pypath.inputs.icellnet.IcellnetRecord.subfamily"]], "icellnet_annotations() (in module pypath.inputs.icellnet)": [[457, "pypath.inputs.icellnet.icellnet_annotations"]], "icellnet_complexes() (in module pypath.inputs.icellnet)": [[458, "pypath.inputs.icellnet.icellnet_complexes"]], "icellnet_interactions() (in module pypath.inputs.icellnet)": [[459, "pypath.inputs.icellnet.icellnet_interactions"]], "pypath.inputs.ielm": [[460, "module-pypath.inputs.ielm"]], "get_ielm() (in module pypath.inputs.ielm)": [[461, "pypath.inputs.ielm.get_ielm"]], "get_ielm_huge() (in module pypath.inputs.ielm)": [[462, "pypath.inputs.ielm.get_ielm_huge"]], "pypath.inputs.imweb": [[463, "module-pypath.inputs.imweb"]], "get_imweb() (in module pypath.inputs.imweb)": [[464, "pypath.inputs.imweb.get_imweb"]], "get_imweb_req() (in module pypath.inputs.imweb)": [[465, "pypath.inputs.imweb.get_imweb_req"]], "pypath.inputs.innatedb": [[466, "module-pypath.inputs.innatedb"]], "innatedb_interactions() (in module pypath.inputs.innatedb)": [[467, "pypath.inputs.innatedb.innatedb_interactions"]], "pypath.inputs.instruct": [[468, "module-pypath.inputs.instruct"]], "get_instruct() (in module pypath.inputs.instruct)": [[469, "pypath.inputs.instruct.get_instruct"]], "get_instruct_offsets() (in module pypath.inputs.instruct)": [[470, "pypath.inputs.instruct.get_instruct_offsets"]], "pypath.inputs.intact": [[471, "module-pypath.inputs.intact"]], "intact_interactions() (in module pypath.inputs.intact)": [[472, "pypath.inputs.intact.intact_interactions"]], "pypath.inputs.integrins": [[473, "module-pypath.inputs.integrins"]], "get_integrins() (in module pypath.inputs.integrins)": [[474, "pypath.inputs.integrins.get_integrins"]], "pypath.inputs.interpro": [[475, "module-pypath.inputs.interpro"]], "interpro2go_annotations() (in module pypath.inputs.interpro)": [[476, "pypath.inputs.interpro.interpro2go_annotations"]], "interpro_annotations() (in module pypath.inputs.interpro)": [[477, "pypath.inputs.interpro.interpro_annotations"]], "interpro_entries() (in module pypath.inputs.interpro)": [[478, "pypath.inputs.interpro.interpro_entries"]], "interpro_xrefs() (in module pypath.inputs.interpro)": [[479, "pypath.inputs.interpro.interpro_xrefs"]], "pypath.inputs.intogen": [[480, "module-pypath.inputs.intogen"]], "intogen_annotations() (in module pypath.inputs.intogen)": [[481, "pypath.inputs.intogen.intogen_annotations"]], "pypath.inputs.ipi": [[482, "module-pypath.inputs.ipi"]], "ipi_uniprot() (in module pypath.inputs.ipi)": [[483, "pypath.inputs.ipi.ipi_uniprot"]], "pypath.inputs.iptmnet": [[484, "module-pypath.inputs.iptmnet"]], "iptmnetinteraction (class in pypath.inputs.iptmnet)": [[485, "pypath.inputs.iptmnet.IptmnetInteraction"]], "__init__() (pypath.inputs.iptmnet.iptmnetinteraction method)": [[485, "pypath.inputs.iptmnet.IptmnetInteraction.__init__"]], "count() (pypath.inputs.iptmnet.iptmnetinteraction method)": [[485, "pypath.inputs.iptmnet.IptmnetInteraction.count"]], "enzyme (pypath.inputs.iptmnet.iptmnetinteraction attribute)": [[485, "pypath.inputs.iptmnet.IptmnetInteraction.enzyme"]], "enzyme_isoform (pypath.inputs.iptmnet.iptmnetinteraction attribute)": [[485, "pypath.inputs.iptmnet.IptmnetInteraction.enzyme_isoform"]], "index() (pypath.inputs.iptmnet.iptmnetinteraction method)": [[485, "pypath.inputs.iptmnet.IptmnetInteraction.index"]], "ptm_type (pypath.inputs.iptmnet.iptmnetinteraction attribute)": [[485, "pypath.inputs.iptmnet.IptmnetInteraction.ptm_type"]], "references (pypath.inputs.iptmnet.iptmnetinteraction attribute)": [[485, "pypath.inputs.iptmnet.IptmnetInteraction.references"]], "resaa (pypath.inputs.iptmnet.iptmnetinteraction attribute)": [[485, "pypath.inputs.iptmnet.IptmnetInteraction.resaa"]], "resnum (pypath.inputs.iptmnet.iptmnetinteraction attribute)": [[485, "pypath.inputs.iptmnet.IptmnetInteraction.resnum"]], "score (pypath.inputs.iptmnet.iptmnetinteraction attribute)": [[485, "pypath.inputs.iptmnet.IptmnetInteraction.score"]], "substrate (pypath.inputs.iptmnet.iptmnetinteraction attribute)": [[485, "pypath.inputs.iptmnet.IptmnetInteraction.substrate"]], "substrate_isoform (pypath.inputs.iptmnet.iptmnetinteraction attribute)": [[485, "pypath.inputs.iptmnet.IptmnetInteraction.substrate_isoform"]], "iptmnet_interactions() (in module pypath.inputs.iptmnet)": [[486, "pypath.inputs.iptmnet.iptmnet_interactions"]], "pypath.inputs.italk": [[487, "module-pypath.inputs.italk"]], "italk_annotations() (in module pypath.inputs.italk)": [[488, "pypath.inputs.italk.italk_annotations"]], "italk_interactions() (in module pypath.inputs.italk)": [[489, "pypath.inputs.italk.italk_interactions"]], "italk_raw() (in module pypath.inputs.italk)": [[490, "pypath.inputs.italk.italk_raw"]], "pypath.inputs.kea": [[491, "module-pypath.inputs.kea"]], "kea_enzyme_substrate() (in module pypath.inputs.kea)": [[492, "pypath.inputs.kea.kea_enzyme_substrate"]], "kea_interactions() (in module pypath.inputs.kea)": [[493, "pypath.inputs.kea.kea_interactions"]], "pypath.inputs.kegg": [[494, "module-pypath.inputs.kegg"]], "keggpathway (class in pypath.inputs.kegg)": [[495, "pypath.inputs.kegg.KeggPathway"]], "__init__() (pypath.inputs.kegg.keggpathway method)": [[495, "pypath.inputs.kegg.KeggPathway.__init__"]], "count() (pypath.inputs.kegg.keggpathway method)": [[495, "pypath.inputs.kegg.KeggPathway.count"]], "index() (pypath.inputs.kegg.keggpathway method)": [[495, "pypath.inputs.kegg.KeggPathway.index"]], "pathway (pypath.inputs.kegg.keggpathway attribute)": [[495, "pypath.inputs.kegg.KeggPathway.pathway"]], "kegg_dbget() (in module pypath.inputs.kegg)": [[496, "pypath.inputs.kegg.kegg_dbget"]], "kegg_interactions() (in module pypath.inputs.kegg)": [[497, "pypath.inputs.kegg.kegg_interactions"]], "kegg_medicus() (in module pypath.inputs.kegg)": [[498, "pypath.inputs.kegg.kegg_medicus"]], "kegg_medicus_complexes() (in module pypath.inputs.kegg)": [[499, "pypath.inputs.kegg.kegg_medicus_complexes"]], "kegg_medicus_interactions() (in module pypath.inputs.kegg)": [[500, "pypath.inputs.kegg.kegg_medicus_interactions"]], "kegg_pathway_annotations() (in module pypath.inputs.kegg)": [[501, "pypath.inputs.kegg.kegg_pathway_annotations"]], "kegg_pathway_annotations_pathwaycommons() (in module pypath.inputs.kegg)": [[502, "pypath.inputs.kegg.kegg_pathway_annotations_pathwaycommons"]], "kegg_pathways() (in module pypath.inputs.kegg)": [[503, "pypath.inputs.kegg.kegg_pathways"]], "pypath.inputs.kegg_api": [[504, "module-pypath.inputs.kegg_api"]], "disease_to_drug() (in module pypath.inputs.kegg_api)": [[505, "pypath.inputs.kegg_api.disease_to_drug"]], "disease_to_gene() (in module pypath.inputs.kegg_api)": [[506, "pypath.inputs.kegg_api.disease_to_gene"]], "disease_to_pathway() (in module pypath.inputs.kegg_api)": [[507, "pypath.inputs.kegg_api.disease_to_pathway"]], "drug_to_disease() (in module pypath.inputs.kegg_api)": [[508, "pypath.inputs.kegg_api.drug_to_disease"]], "drug_to_drug() (in module pypath.inputs.kegg_api)": [[509, "pypath.inputs.kegg_api.drug_to_drug"]], "drug_to_gene() (in module pypath.inputs.kegg_api)": [[510, "pypath.inputs.kegg_api.drug_to_gene"]], "drug_to_pathway() (in module pypath.inputs.kegg_api)": [[511, "pypath.inputs.kegg_api.drug_to_pathway"]], "gene_to_disease() (in module pypath.inputs.kegg_api)": [[512, "pypath.inputs.kegg_api.gene_to_disease"]], "gene_to_drug() (in module pypath.inputs.kegg_api)": [[513, "pypath.inputs.kegg_api.gene_to_drug"]], "gene_to_pathway() (in module pypath.inputs.kegg_api)": [[514, "pypath.inputs.kegg_api.gene_to_pathway"]], "kegg_drug_to_chebi() (in module pypath.inputs.kegg_api)": [[515, "pypath.inputs.kegg_api.kegg_drug_to_chebi"]], "kegg_gene_to_ncbi_geneid() (in module pypath.inputs.kegg_api)": [[516, "pypath.inputs.kegg_api.kegg_gene_to_ncbi_geneid"]], "kegg_gene_to_uniprot() (in module pypath.inputs.kegg_api)": [[517, "pypath.inputs.kegg_api.kegg_gene_to_uniprot"]], "pathway_to_disease() (in module pypath.inputs.kegg_api)": [[518, "pypath.inputs.kegg_api.pathway_to_disease"]], "pathway_to_drug() (in module pypath.inputs.kegg_api)": [[519, "pypath.inputs.kegg_api.pathway_to_drug"]], "pathway_to_gene() (in module pypath.inputs.kegg_api)": [[520, "pypath.inputs.kegg_api.pathway_to_gene"]], "pypath.inputs.kinasedotcom": [[521, "module-pypath.inputs.kinasedotcom"]], "kinasedotcom_annotations() (in module pypath.inputs.kinasedotcom)": [[522, "pypath.inputs.kinasedotcom.kinasedotcom_annotations"]], "pypath.inputs.kirouac2010": [[523, "module-pypath.inputs.kirouac2010"]], "kirouac2010_interactions() (in module pypath.inputs.kirouac2010)": [[524, "pypath.inputs.kirouac2010.kirouac2010_interactions"]], "pypath.inputs.lambert2018": [[525, "module-pypath.inputs.lambert2018"]], "lambert2018_annotations() (in module pypath.inputs.lambert2018)": [[526, "pypath.inputs.lambert2018.lambert2018_annotations"]], "lambert2018_s1_raw() (in module pypath.inputs.lambert2018)": [[527, "pypath.inputs.lambert2018.lambert2018_s1_raw"]], "pypath.inputs.laudanna": [[528, "module-pypath.inputs.laudanna"]], "laudanna_directions() (in module pypath.inputs.laudanna)": [[529, "pypath.inputs.laudanna.laudanna_directions"]], "laudanna_effects() (in module pypath.inputs.laudanna)": [[530, "pypath.inputs.laudanna.laudanna_effects"]], "pypath.inputs.li2012": [[531, "module-pypath.inputs.li2012"]], "get_li2012() (in module pypath.inputs.li2012)": [[532, "pypath.inputs.li2012.get_li2012"]], "li2012_dmi() (in module pypath.inputs.li2012)": [[533, "pypath.inputs.li2012.li2012_dmi"]], "li2012_enzyme_substrate() (in module pypath.inputs.li2012)": [[534, "pypath.inputs.li2012.li2012_enzyme_substrate"]], "li2012_interactions() (in module pypath.inputs.li2012)": [[535, "pypath.inputs.li2012.li2012_interactions"]], "pypath.inputs.lincs": [[536, "module-pypath.inputs.lincs"]], "lincs_compounds() (in module pypath.inputs.lincs)": [[537, "pypath.inputs.lincs.lincs_compounds"]], "pypath.inputs.lmpid": [[538, "module-pypath.inputs.lmpid"]], "lmpid_dmi() (in module pypath.inputs.lmpid)": [[539, "pypath.inputs.lmpid.lmpid_dmi"]], "lmpid_interactions() (in module pypath.inputs.lmpid)": [[540, "pypath.inputs.lmpid.lmpid_interactions"]], "load_lmpid() (in module pypath.inputs.lmpid)": [[541, "pypath.inputs.lmpid.load_lmpid"]], "pypath.inputs.lncdisease": [[542, "module-pypath.inputs.lncdisease"]], "lncdisease_interactions() (in module pypath.inputs.lncdisease)": [[543, "pypath.inputs.lncdisease.lncdisease_interactions"]], "pypath.inputs.lncrnadb": [[544, "module-pypath.inputs.lncrnadb"]], "lncrnadb_interactions() (in module pypath.inputs.lncrnadb)": [[545, "pypath.inputs.lncrnadb.lncrnadb_interactions"]], "pypath.inputs.locate": [[546, "module-pypath.inputs.locate"]], "locate_localizations() (in module pypath.inputs.locate)": [[547, "pypath.inputs.locate.locate_localizations"]], "pypath.inputs.lrdb": [[548, "module-pypath.inputs.lrdb"]], "lrdbannotation (class in pypath.inputs.lrdb)": [[549, "pypath.inputs.lrdb.LrdbAnnotation"]], "__init__() (pypath.inputs.lrdb.lrdbannotation method)": [[549, "pypath.inputs.lrdb.LrdbAnnotation.__init__"]], "cell_type (pypath.inputs.lrdb.lrdbannotation attribute)": [[549, "pypath.inputs.lrdb.LrdbAnnotation.cell_type"]], "count() (pypath.inputs.lrdb.lrdbannotation method)": [[549, "pypath.inputs.lrdb.LrdbAnnotation.count"]], "index() (pypath.inputs.lrdb.lrdbannotation method)": [[549, "pypath.inputs.lrdb.LrdbAnnotation.index"]], "references (pypath.inputs.lrdb.lrdbannotation attribute)": [[549, "pypath.inputs.lrdb.LrdbAnnotation.references"]], "role (pypath.inputs.lrdb.lrdbannotation attribute)": [[549, "pypath.inputs.lrdb.LrdbAnnotation.role"]], "sources (pypath.inputs.lrdb.lrdbannotation attribute)": [[549, "pypath.inputs.lrdb.LrdbAnnotation.sources"]], "lrdb_annotations() (in module pypath.inputs.lrdb)": [[550, "pypath.inputs.lrdb.lrdb_annotations"]], "lrdb_interactions() (in module pypath.inputs.lrdb)": [[551, "pypath.inputs.lrdb.lrdb_interactions"]], "pypath.inputs.macrophage": [[552, "module-pypath.inputs.macrophage"]], "macrophage_interactions() (in module pypath.inputs.macrophage)": [[553, "pypath.inputs.macrophage.macrophage_interactions"]], "pypath.inputs.main": [[554, "module-pypath.inputs.main"]], "pypath.inputs.matrisome": [[555, "module-pypath.inputs.matrisome"]], "matrisome_annotations() (in module pypath.inputs.matrisome)": [[556, "pypath.inputs.matrisome.matrisome_annotations"]], "pypath.inputs.matrixdb": [[557, "module-pypath.inputs.matrixdb"]], "matrixdb_annotations() (in module pypath.inputs.matrixdb)": [[558, "pypath.inputs.matrixdb.matrixdb_annotations"]], "matrixdb_ecm_proteins() (in module pypath.inputs.matrixdb)": [[559, "pypath.inputs.matrixdb.matrixdb_ecm_proteins"]], "matrixdb_interactions() (in module pypath.inputs.matrixdb)": [[560, "pypath.inputs.matrixdb.matrixdb_interactions"]], "matrixdb_membrane_proteins() (in module pypath.inputs.matrixdb)": [[561, "pypath.inputs.matrixdb.matrixdb_membrane_proteins"]], "matrixdb_secreted_proteins() (in module pypath.inputs.matrixdb)": [[562, "pypath.inputs.matrixdb.matrixdb_secreted_proteins"]], "pypath.inputs.mcam": [[563, "module-pypath.inputs.mcam"]], "mcam_cell_adhesion_molecules() (in module pypath.inputs.mcam)": [[564, "pypath.inputs.mcam.mcam_cell_adhesion_molecules"]], "pypath.inputs.membranome": [[565, "module-pypath.inputs.membranome"]], "membranome_annotations() (in module pypath.inputs.membranome)": [[566, "pypath.inputs.membranome.membranome_annotations"]], "pypath.inputs.mimp": [[567, "module-pypath.inputs.mimp"]], "get_kinase_class() (in module pypath.inputs.mimp)": [[568, "pypath.inputs.mimp.get_kinase_class"]], "mimp_enzyme_substrate() (in module pypath.inputs.mimp)": [[569, "pypath.inputs.mimp.mimp_enzyme_substrate"]], "mimp_interactions() (in module pypath.inputs.mimp)": [[570, "pypath.inputs.mimp.mimp_interactions"]], "pypath.inputs.mir2disease": [[571, "module-pypath.inputs.mir2disease"]], "mir2disease_interactions() (in module pypath.inputs.mir2disease)": [[572, "pypath.inputs.mir2disease.mir2disease_interactions"]], "pypath.inputs.mirbase": [[573, "module-pypath.inputs.mirbase"]], "get_mirbase_aliases() (in module pypath.inputs.mirbase)": [[574, "pypath.inputs.mirbase.get_mirbase_aliases"]], "mirbase_ids() (in module pypath.inputs.mirbase)": [[575, "pypath.inputs.mirbase.mirbase_ids"]], "mirbase_mature() (in module pypath.inputs.mirbase)": [[576, "pypath.inputs.mirbase.mirbase_mature"]], "mirbase_mature_all() (in module pypath.inputs.mirbase)": [[577, "pypath.inputs.mirbase.mirbase_mature_all"]], "mirbase_precursor() (in module pypath.inputs.mirbase)": [[578, "pypath.inputs.mirbase.mirbase_precursor"]], "mirbase_precursor_all() (in module pypath.inputs.mirbase)": [[579, "pypath.inputs.mirbase.mirbase_precursor_all"]], "mirbase_precursor_to_mature() (in module pypath.inputs.mirbase)": [[580, "pypath.inputs.mirbase.mirbase_precursor_to_mature"]], "pypath.inputs.mirdeathdb": [[581, "module-pypath.inputs.mirdeathdb"]], "mirdeathdb_interactions() (in module pypath.inputs.mirdeathdb)": [[582, "pypath.inputs.mirdeathdb.mirdeathdb_interactions"]], "pypath.inputs.mirecords": [[583, "module-pypath.inputs.mirecords"]], "mirecords_interactions() (in module pypath.inputs.mirecords)": [[584, "pypath.inputs.mirecords.mirecords_interactions"]], "pypath.inputs.mirtarbase": [[585, "module-pypath.inputs.mirtarbase"]], "mirtarbase_interactions() (in module pypath.inputs.mirtarbase)": [[586, "pypath.inputs.mirtarbase.mirtarbase_interactions"]], "pypath.inputs.mitab": [[587, "module-pypath.inputs.mitab"]], "mitab_field_list() (in module pypath.inputs.mitab)": [[588, "pypath.inputs.mitab.mitab_field_list"]], "mitab_field_uniprot() (in module pypath.inputs.mitab)": [[589, "pypath.inputs.mitab.mitab_field_uniprot"]], "pypath.inputs.mppi": [[590, "module-pypath.inputs.mppi"]], "mppi_interactions() (in module pypath.inputs.mppi)": [[591, "pypath.inputs.mppi.mppi_interactions"]], "pypath.inputs.ncrdeathdb": [[592, "module-pypath.inputs.ncrdeathdb"]], "ncrdeathdb_interactions() (in module pypath.inputs.ncrdeathdb)": [[593, "pypath.inputs.ncrdeathdb.ncrdeathdb_interactions"]], "pypath.inputs.negatome": [[594, "module-pypath.inputs.negatome"]], "negatome_interactions() (in module pypath.inputs.negatome)": [[595, "pypath.inputs.negatome.negatome_interactions"]], "pypath.inputs.netbiol": [[596, "module-pypath.inputs.netbiol"]], "arn_interactions() (in module pypath.inputs.netbiol)": [[597, "pypath.inputs.netbiol.arn_interactions"]], "nrf2ome_interactions() (in module pypath.inputs.netbiol)": [[598, "pypath.inputs.netbiol.nrf2ome_interactions"]], "pypath.inputs.netpath": [[599, "module-pypath.inputs.netpath"]], "netpath_interactions() (in module pypath.inputs.netpath)": [[600, "pypath.inputs.netpath.netpath_interactions"]], "netpath_names() (in module pypath.inputs.netpath)": [[601, "pypath.inputs.netpath.netpath_names"]], "netpath_pathway_annotations() (in module pypath.inputs.netpath)": [[602, "pypath.inputs.netpath.netpath_pathway_annotations"]], "pypath.inputs.oma": [[603, "module-pypath.inputs.oma"]], "oma_orthologs() (in module pypath.inputs.oma)": [[604, "pypath.inputs.oma.oma_orthologs"]], "pypath.inputs.ontology": [[605, "module-pypath.inputs.ontology"]], "listof_ontologies() (in module pypath.inputs.ontology)": [[606, "pypath.inputs.ontology.listof_ontologies"]], "ontology() (in module pypath.inputs.ontology)": [[607, "pypath.inputs.ontology.ontology"]], "pypath.inputs.opm": [[608, "module-pypath.inputs.opm"]], "opm_annotations() (in module pypath.inputs.opm)": [[609, "pypath.inputs.opm.opm_annotations"]], "pypath.inputs.oreganno": [[610, "module-pypath.inputs.oreganno"]], "oreganno_interactions() (in module pypath.inputs.oreganno)": [[611, "pypath.inputs.oreganno.oreganno_interactions"]], "oreganno_raw() (in module pypath.inputs.oreganno)": [[612, "pypath.inputs.oreganno.oreganno_raw"]], "pypath.inputs.panglaodb": [[613, "module-pypath.inputs.panglaodb"]], "panglaodb_annotations() (in module pypath.inputs.panglaodb)": [[614, "pypath.inputs.panglaodb.panglaodb_annotations"]], "panglaodb_raw() (in module pypath.inputs.panglaodb)": [[615, "pypath.inputs.panglaodb.panglaodb_raw"]], "pypath.inputs.pathophenodb": [[616, "module-pypath.inputs.pathophenodb"]], "diseasepathogen (class in pypath.inputs.pathophenodb)": [[617, "pypath.inputs.pathophenodb.DiseasePathogen"]], "__init__() (pypath.inputs.pathophenodb.diseasepathogen method)": [[617, "pypath.inputs.pathophenodb.DiseasePathogen.__init__"]], "count() (pypath.inputs.pathophenodb.diseasepathogen method)": [[617, "pypath.inputs.pathophenodb.DiseasePathogen.count"]], "disease (pypath.inputs.pathophenodb.diseasepathogen attribute)": [[617, "pypath.inputs.pathophenodb.DiseasePathogen.disease"]], "disease_id (pypath.inputs.pathophenodb.diseasepathogen attribute)": [[617, "pypath.inputs.pathophenodb.DiseasePathogen.disease_id"]], "evidence (pypath.inputs.pathophenodb.diseasepathogen attribute)": [[617, "pypath.inputs.pathophenodb.DiseasePathogen.evidence"]], "index() (pypath.inputs.pathophenodb.diseasepathogen method)": [[617, "pypath.inputs.pathophenodb.DiseasePathogen.index"]], "pathogen (pypath.inputs.pathophenodb.diseasepathogen attribute)": [[617, "pypath.inputs.pathophenodb.DiseasePathogen.pathogen"]], "pathogen_taxid (pypath.inputs.pathophenodb.diseasepathogen attribute)": [[617, "pypath.inputs.pathophenodb.DiseasePathogen.pathogen_taxid"]], "disease_pathogen_interactions() (in module pypath.inputs.pathophenodb)": [[618, "pypath.inputs.pathophenodb.disease_pathogen_interactions"]], "pypath.inputs.pathwaycommons": [[619, "module-pypath.inputs.pathwaycommons"]], "pathwaycommonsinteraction (class in pypath.inputs.pathwaycommons)": [[620, "pypath.inputs.pathwaycommons.PathwayCommonsInteraction"]], "__init__() (pypath.inputs.pathwaycommons.pathwaycommonsinteraction method)": [[620, "pypath.inputs.pathwaycommons.PathwayCommonsInteraction.__init__"]], "count() (pypath.inputs.pathwaycommons.pathwaycommonsinteraction method)": [[620, "pypath.inputs.pathwaycommons.PathwayCommonsInteraction.count"]], "id_a (pypath.inputs.pathwaycommons.pathwaycommonsinteraction attribute)": [[620, "pypath.inputs.pathwaycommons.PathwayCommonsInteraction.id_a"]], "id_b (pypath.inputs.pathwaycommons.pathwaycommonsinteraction attribute)": [[620, "pypath.inputs.pathwaycommons.PathwayCommonsInteraction.id_b"]], "index() (pypath.inputs.pathwaycommons.pathwaycommonsinteraction method)": [[620, "pypath.inputs.pathwaycommons.PathwayCommonsInteraction.index"]], "interaction_type (pypath.inputs.pathwaycommons.pathwaycommonsinteraction attribute)": [[620, "pypath.inputs.pathwaycommons.PathwayCommonsInteraction.interaction_type"]], "resource (pypath.inputs.pathwaycommons.pathwaycommonsinteraction attribute)": [[620, "pypath.inputs.pathwaycommons.PathwayCommonsInteraction.resource"]], "pathwaycommonsresource (class in pypath.inputs.pathwaycommons)": [[621, "pypath.inputs.pathwaycommons.PathwayCommonsResource"]], "__init__() (pypath.inputs.pathwaycommons.pathwaycommonsresource method)": [[621, "pypath.inputs.pathwaycommons.PathwayCommonsResource.__init__"]], "count() (pypath.inputs.pathwaycommons.pathwaycommonsresource method)": [[621, "pypath.inputs.pathwaycommons.PathwayCommonsResource.count"]], "index() (pypath.inputs.pathwaycommons.pathwaycommonsresource method)": [[621, "pypath.inputs.pathwaycommons.PathwayCommonsResource.index"]], "name (pypath.inputs.pathwaycommons.pathwaycommonsresource attribute)": [[621, "pypath.inputs.pathwaycommons.PathwayCommonsResource.name"]], "pc_label (pypath.inputs.pathwaycommons.pathwaycommonsresource attribute)": [[621, "pypath.inputs.pathwaycommons.PathwayCommonsResource.pc_label"]], "version (pypath.inputs.pathwaycommons.pathwaycommonsresource attribute)": [[621, "pypath.inputs.pathwaycommons.PathwayCommonsResource.version"]], "pathwaycommons_bind_interactions() (in module pypath.inputs.pathwaycommons)": [[622, "pypath.inputs.pathwaycommons.pathwaycommons_bind_interactions"]], "pathwaycommons_biogrid_interactions() (in module pypath.inputs.pathwaycommons)": [[623, "pypath.inputs.pathwaycommons.pathwaycommons_biogrid_interactions"]], "pathwaycommons_corum_interactions() (in module pypath.inputs.pathwaycommons)": [[624, "pypath.inputs.pathwaycommons.pathwaycommons_corum_interactions"]], "pathwaycommons_dip_interactions() (in module pypath.inputs.pathwaycommons)": [[625, "pypath.inputs.pathwaycommons.pathwaycommons_dip_interactions"]], "pathwaycommons_hprd_interactions() (in module pypath.inputs.pathwaycommons)": [[626, "pypath.inputs.pathwaycommons.pathwaycommons_hprd_interactions"]], "pathwaycommons_inoh_interactions() (in module pypath.inputs.pathwaycommons)": [[627, "pypath.inputs.pathwaycommons.pathwaycommons_inoh_interactions"]], "pathwaycommons_intact_interactions() (in module pypath.inputs.pathwaycommons)": [[628, "pypath.inputs.pathwaycommons.pathwaycommons_intact_interactions"]], "pathwaycommons_interactions() (in module pypath.inputs.pathwaycommons)": [[629, "pypath.inputs.pathwaycommons.pathwaycommons_interactions"]], "pathwaycommons_kegg_interactions() (in module pypath.inputs.pathwaycommons)": [[630, "pypath.inputs.pathwaycommons.pathwaycommons_kegg_interactions"]], "pathwaycommons_netpath_interactions() (in module pypath.inputs.pathwaycommons)": [[631, "pypath.inputs.pathwaycommons.pathwaycommons_netpath_interactions"]], "pathwaycommons_panther_interactions() (in module pypath.inputs.pathwaycommons)": [[632, "pypath.inputs.pathwaycommons.pathwaycommons_panther_interactions"]], "pathwaycommons_phosphosite_interactions() (in module pypath.inputs.pathwaycommons)": [[633, "pypath.inputs.pathwaycommons.pathwaycommons_phosphosite_interactions"]], "pathwaycommons_reactome_interactions() (in module pypath.inputs.pathwaycommons)": [[634, "pypath.inputs.pathwaycommons.pathwaycommons_reactome_interactions"]], "pathwaycommons_wikipathways_interactions() (in module pypath.inputs.pathwaycommons)": [[635, "pypath.inputs.pathwaycommons.pathwaycommons_wikipathways_interactions"]], "pypath.inputs.pazar": [[636, "module-pypath.inputs.pazar"]], "pazar_interactions() (in module pypath.inputs.pazar)": [[637, "pypath.inputs.pazar.pazar_interactions"]], "pypath.inputs.pdb": [[638, "module-pypath.inputs.pdb"]], "pdb_chains() (in module pypath.inputs.pdb)": [[639, "pypath.inputs.pdb.pdb_chains"]], "pdb_complexes() (in module pypath.inputs.pdb)": [[640, "pypath.inputs.pdb.pdb_complexes"]], "pdb_uniprot() (in module pypath.inputs.pdb)": [[641, "pypath.inputs.pdb.pdb_uniprot"]], "pypath.inputs.pdzbase": [[642, "module-pypath.inputs.pdzbase"]], "pdzbase_interactions() (in module pypath.inputs.pdzbase)": [[643, "pypath.inputs.pdzbase.pdzbase_interactions"]], "pypath.inputs.pepcyber": [[644, "module-pypath.inputs.pepcyber"]], "pepcyber_details() (in module pypath.inputs.pepcyber)": [[645, "pypath.inputs.pepcyber.pepcyber_details"]], "pepcyber_interactions() (in module pypath.inputs.pepcyber)": [[646, "pypath.inputs.pepcyber.pepcyber_interactions"]], "pypath.inputs.pfam": [[647, "module-pypath.inputs.pfam"]], "pfam_names() (in module pypath.inputs.pfam)": [[648, "pypath.inputs.pfam.pfam_names"]], "pfam_pdb() (in module pypath.inputs.pfam)": [[649, "pypath.inputs.pfam.pfam_pdb"]], "pfam_regions() (in module pypath.inputs.pfam)": [[650, "pypath.inputs.pfam.pfam_regions"]], "pfam_uniprot() (in module pypath.inputs.pfam)": [[651, "pypath.inputs.pfam.pfam_uniprot"]], "pypath.inputs.pharos": [[652, "module-pypath.inputs.pharos"]], "pharos_diseases() (in module pypath.inputs.pharos)": [[653, "pypath.inputs.pharos.pharos_diseases"]], "pharos_expression() (in module pypath.inputs.pharos)": [[654, "pypath.inputs.pharos.pharos_expression"]], "pharos_general() (in module pypath.inputs.pharos)": [[655, "pypath.inputs.pharos.pharos_general"]], "pharos_gtex() (in module pypath.inputs.pharos)": [[656, "pypath.inputs.pharos.pharos_gtex"]], "pharos_ligands() (in module pypath.inputs.pharos)": [[657, "pypath.inputs.pharos.pharos_ligands"]], "pharos_orthologs() (in module pypath.inputs.pharos)": [[658, "pypath.inputs.pharos.pharos_orthologs"]], "pharos_targets() (in module pypath.inputs.pharos)": [[659, "pypath.inputs.pharos.pharos_targets"]], "pharos_xrefs() (in module pypath.inputs.pharos)": [[660, "pypath.inputs.pharos.pharos_xrefs"]], "pypath.inputs.phobius": [[661, "module-pypath.inputs.phobius"]], "phobius_annotations() (in module pypath.inputs.phobius)": [[662, "pypath.inputs.phobius.phobius_annotations"]], "pypath.inputs.phosphatome": [[663, "module-pypath.inputs.phosphatome"]], "phosphatome_annotations() (in module pypath.inputs.phosphatome)": [[664, "pypath.inputs.phosphatome.phosphatome_annotations"]], "pypath.inputs.phosphoelm": [[665, "module-pypath.inputs.phosphoelm"]], "phosphoelm_enzyme_substrate() (in module pypath.inputs.phosphoelm)": [[666, "pypath.inputs.phosphoelm.phosphoelm_enzyme_substrate"]], "phosphoelm_interactions() (in module pypath.inputs.phosphoelm)": [[667, "pypath.inputs.phosphoelm.phosphoelm_interactions"]], "phosphoelm_kinases() (in module pypath.inputs.phosphoelm)": [[668, "pypath.inputs.phosphoelm.phosphoelm_kinases"]], "pypath.inputs.phosphonetworks": [[669, "module-pypath.inputs.phosphonetworks"]], "phosphonetworks_enzyme_substrate() (in module pypath.inputs.phosphonetworks)": [[670, "pypath.inputs.phosphonetworks.phosphonetworks_enzyme_substrate"]], "phosphonetworks_interactions() (in module pypath.inputs.phosphonetworks)": [[671, "pypath.inputs.phosphonetworks.phosphonetworks_interactions"]], "pypath.inputs.phosphopoint": [[672, "module-pypath.inputs.phosphopoint"]], "phosphopoint_directions() (in module pypath.inputs.phosphopoint)": [[673, "pypath.inputs.phosphopoint.phosphopoint_directions"]], "phosphopoint_interactions() (in module pypath.inputs.phosphopoint)": [[674, "pypath.inputs.phosphopoint.phosphopoint_interactions"]], "pypath.inputs.phosphosite": [[675, "module-pypath.inputs.phosphosite"]], "phosphosite_directions() (in module pypath.inputs.phosphosite)": [[676, "pypath.inputs.phosphosite.phosphosite_directions"]], "phosphosite_enzyme_substrate() (in module pypath.inputs.phosphosite)": [[677, "pypath.inputs.phosphosite.phosphosite_enzyme_substrate"]], "phosphosite_interactions() (in module pypath.inputs.phosphosite)": [[678, "pypath.inputs.phosphosite.phosphosite_interactions"]], "phosphosite_interactions_all() (in module pypath.inputs.phosphosite)": [[679, "pypath.inputs.phosphosite.phosphosite_interactions_all"]], "phosphosite_interactions_curated() (in module pypath.inputs.phosphosite)": [[680, "pypath.inputs.phosphosite.phosphosite_interactions_curated"]], "phosphosite_interactions_new() (in module pypath.inputs.phosphosite)": [[681, "pypath.inputs.phosphosite.phosphosite_interactions_new"]], "phosphosite_interactions_noref() (in module pypath.inputs.phosphosite)": [[682, "pypath.inputs.phosphosite.phosphosite_interactions_noref"]], "phosphosite_ptm_orthology() (in module pypath.inputs.phosphosite)": [[683, "pypath.inputs.phosphosite.phosphosite_ptm_orthology"]], "phosphosite_ptms() (in module pypath.inputs.phosphosite)": [[684, "pypath.inputs.phosphosite.phosphosite_ptms"]], "phosphosite_regsites() (in module pypath.inputs.phosphosite)": [[685, "pypath.inputs.phosphosite.phosphosite_regsites"]], "phosphosite_regsites_one_organism() (in module pypath.inputs.phosphosite)": [[686, "pypath.inputs.phosphosite.phosphosite_regsites_one_organism"]], "regsites_tab() (in module pypath.inputs.phosphosite)": [[687, "pypath.inputs.phosphosite.regsites_tab"]], "pypath.inputs.pisa": [[688, "module-pypath.inputs.pisa"]], "pisabond (class in pypath.inputs.pisa)": [[689, "pypath.inputs.pisa.PisaBond"]], "__init__() (pypath.inputs.pisa.pisabond method)": [[689, "pypath.inputs.pisa.PisaBond.__init__"]], "chain_1 (pypath.inputs.pisa.pisabond attribute)": [[689, "pypath.inputs.pisa.PisaBond.chain_1"]], "chain_2 (pypath.inputs.pisa.pisabond attribute)": [[689, "pypath.inputs.pisa.PisaBond.chain_2"]], "count() (pypath.inputs.pisa.pisabond method)": [[689, "pypath.inputs.pisa.PisaBond.count"]], "index() (pypath.inputs.pisa.pisabond method)": [[689, "pypath.inputs.pisa.PisaBond.index"]], "residue_1 (pypath.inputs.pisa.pisabond attribute)": [[689, "pypath.inputs.pisa.PisaBond.residue_1"]], "residue_2 (pypath.inputs.pisa.pisabond attribute)": [[689, "pypath.inputs.pisa.PisaBond.residue_2"]], "seqnum_1 (pypath.inputs.pisa.pisabond attribute)": [[689, "pypath.inputs.pisa.PisaBond.seqnum_1"]], "seqnum_2 (pypath.inputs.pisa.pisabond attribute)": [[689, "pypath.inputs.pisa.PisaBond.seqnum_2"]], "uniprot_1 (pypath.inputs.pisa.pisabond attribute)": [[689, "pypath.inputs.pisa.PisaBond.uniprot_1"]], "uniprot_2 (pypath.inputs.pisa.pisabond attribute)": [[689, "pypath.inputs.pisa.PisaBond.uniprot_2"]], "pisa_bonds() (in module pypath.inputs.pisa)": [[690, "pypath.inputs.pisa.pisa_bonds"]], "pisa_interfaces() (in module pypath.inputs.pisa)": [[691, "pypath.inputs.pisa.pisa_interfaces"]], "pypath.inputs.pro": [[692, "module-pypath.inputs.pro"]], "get_pro() (in module pypath.inputs.pro)": [[693, "pypath.inputs.pro.get_pro"]], "pro_mapping() (in module pypath.inputs.pro)": [[694, "pypath.inputs.pro.pro_mapping"]], "pypath.inputs.progeny": [[695, "module-pypath.inputs.progeny"]], "progeny_annotations() (in module pypath.inputs.progeny)": [[696, "pypath.inputs.progeny.progeny_annotations"]], "progeny_raw() (in module pypath.inputs.progeny)": [[697, "pypath.inputs.progeny.progeny_raw"]], "pypath.inputs.proteinatlas": [[698, "module-pypath.inputs.proteinatlas"]], "get_proteinatlas() (in module pypath.inputs.proteinatlas)": [[699, "pypath.inputs.proteinatlas.get_proteinatlas"]], "proteinatlas_annotations() (in module pypath.inputs.proteinatlas)": [[700, "pypath.inputs.proteinatlas.proteinatlas_annotations"]], "proteinatlas_secretome_annotations() (in module pypath.inputs.proteinatlas)": [[701, "pypath.inputs.proteinatlas.proteinatlas_secretome_annotations"]], "proteinatlas_subcellular_annotations() (in module pypath.inputs.proteinatlas)": [[702, "pypath.inputs.proteinatlas.proteinatlas_subcellular_annotations"]], "pypath.inputs.proteins": [[703, "module-pypath.inputs.proteins"]], "variants() (in module pypath.inputs.proteins)": [[704, "pypath.inputs.proteins.variants"]], "pypath.inputs.protmapper": [[705, "module-pypath.inputs.protmapper"]], "get_protmapper() (in module pypath.inputs.protmapper)": [[706, "pypath.inputs.protmapper.get_protmapper"]], "protmapper_enzyme_substrate() (in module pypath.inputs.protmapper)": [[707, "pypath.inputs.protmapper.protmapper_enzyme_substrate"]], "protmapper_interactions() (in module pypath.inputs.protmapper)": [[708, "pypath.inputs.protmapper.protmapper_interactions"]], "pypath.inputs.pubchem": [[709, "module-pypath.inputs.pubchem"]], "pubchem_mapping() (in module pypath.inputs.pubchem)": [[710, "pypath.inputs.pubchem.pubchem_mapping"]], "pypath.inputs.pubmed": [[711, "module-pypath.inputs.pubmed"]], "get_pmid() (in module pypath.inputs.pubmed)": [[712, "pypath.inputs.pubmed.get_pmid"]], "get_pubmeds() (in module pypath.inputs.pubmed)": [[713, "pypath.inputs.pubmed.get_pubmeds"]], "only_pmids() (in module pypath.inputs.pubmed)": [[714, "pypath.inputs.pubmed.only_pmids"]], "open_pubmed() (in module pypath.inputs.pubmed)": [[715, "pypath.inputs.pubmed.open_pubmed"]], "pmids_dict() (in module pypath.inputs.pubmed)": [[716, "pypath.inputs.pubmed.pmids_dict"]], "pmids_list() (in module pypath.inputs.pubmed)": [[717, "pypath.inputs.pubmed.pmids_list"]], "pypath.inputs.ramilowski2015": [[718, "module-pypath.inputs.ramilowski2015"]], "ramilowski_interactions() (in module pypath.inputs.ramilowski2015)": [[719, "pypath.inputs.ramilowski2015.ramilowski_interactions"]], "ramilowski_locations() (in module pypath.inputs.ramilowski2015)": [[720, "pypath.inputs.ramilowski2015.ramilowski_locations"]], "pypath.inputs.ramp": [[721, "module-pypath.inputs.ramp"]], "ramp_id_types() (in module pypath.inputs.ramp)": [[722, "pypath.inputs.ramp.ramp_id_types"]], "ramp_id_types_2() (in module pypath.inputs.ramp)": [[723, "pypath.inputs.ramp.ramp_id_types_2"]], "ramp_list_tables() (in module pypath.inputs.ramp)": [[724, "pypath.inputs.ramp.ramp_list_tables"]], "ramp_mapping() (in module pypath.inputs.ramp)": [[725, "pypath.inputs.ramp.ramp_mapping"]], "ramp_raw() (in module pypath.inputs.ramp)": [[726, "pypath.inputs.ramp.ramp_raw"]], "ramp_show_tables() (in module pypath.inputs.ramp)": [[727, "pypath.inputs.ramp.ramp_show_tables"]], "pypath.inputs.rdata": [[728, "module-pypath.inputs.rdata"]], "pypath.inputs.reaction": [[729, "module-pypath.inputs.reaction"]], "acsn_biopax() (in module pypath.inputs.reaction)": [[730, "pypath.inputs.reaction.acsn_biopax"]], "acsn_interactions_2() (in module pypath.inputs.reaction)": [[731, "pypath.inputs.reaction.acsn_interactions_2"]], "get_acsn_effects() (in module pypath.inputs.reaction)": [[732, "pypath.inputs.reaction.get_acsn_effects"]], "get_controls() (in module pypath.inputs.reaction)": [[733, "pypath.inputs.reaction.get_controls"]], "get_interactions() (in module pypath.inputs.reaction)": [[734, "pypath.inputs.reaction.get_interactions"]], "get_reactions() (in module pypath.inputs.reaction)": [[735, "pypath.inputs.reaction.get_reactions"]], "get_soup() (in module pypath.inputs.reaction)": [[736, "pypath.inputs.reaction.get_soup"]], "panther_biopax() (in module pypath.inputs.reaction)": [[737, "pypath.inputs.reaction.panther_biopax"]], "panther_interactions() (in module pypath.inputs.reaction)": [[738, "pypath.inputs.reaction.panther_interactions"]], "pid_biopax() (in module pypath.inputs.reaction)": [[739, "pypath.inputs.reaction.pid_biopax"]], "pid_interactions() (in module pypath.inputs.reaction)": [[740, "pypath.inputs.reaction.pid_interactions"]], "process_complex() (in module pypath.inputs.reaction)": [[741, "pypath.inputs.reaction.process_complex"]], "process_controls() (in module pypath.inputs.reaction)": [[742, "pypath.inputs.reaction.process_controls"]], "process_reactions() (in module pypath.inputs.reaction)": [[743, "pypath.inputs.reaction.process_reactions"]], "reactions_biopax() (in module pypath.inputs.reaction)": [[744, "pypath.inputs.reaction.reactions_biopax"]], "reactome_biopax() (in module pypath.inputs.reaction)": [[745, "pypath.inputs.reaction.reactome_biopax"]], "reactome_bs() (in module pypath.inputs.reaction)": [[746, "pypath.inputs.reaction.reactome_bs"]], "reactome_interactions() (in module pypath.inputs.reaction)": [[747, "pypath.inputs.reaction.reactome_interactions"]], "reactome_sbml() (in module pypath.inputs.reaction)": [[748, "pypath.inputs.reaction.reactome_sbml"]], "pypath.inputs.scconnect": [[749, "module-pypath.inputs.scconnect"]], "scconnect_annotations() (in module pypath.inputs.scconnect)": [[750, "pypath.inputs.scconnect.scconnect_annotations"]], "scconnect_complexes() (in module pypath.inputs.scconnect)": [[751, "pypath.inputs.scconnect.scconnect_complexes"]], "scconnect_interactions() (in module pypath.inputs.scconnect)": [[752, "pypath.inputs.scconnect.scconnect_interactions"]], "pypath.inputs.science": [[753, "module-pypath.inputs.science"]], "science_download() (in module pypath.inputs.science)": [[754, "pypath.inputs.science.science_download"]], "pypath.inputs.signalink": [[755, "module-pypath.inputs.signalink"]], "signalink_annotations() (in module pypath.inputs.signalink)": [[756, "pypath.inputs.signalink.signalink_annotations"]], "signalink_function_annotations() (in module pypath.inputs.signalink)": [[757, "pypath.inputs.signalink.signalink_function_annotations"]], "signalink_interactions() (in module pypath.inputs.signalink)": [[758, "pypath.inputs.signalink.signalink_interactions"]], "signalink_pathway_annotations() (in module pypath.inputs.signalink)": [[759, "pypath.inputs.signalink.signalink_pathway_annotations"]], "pypath.inputs.signor": [[760, "module-pypath.inputs.signor"]], "signor_complexes() (in module pypath.inputs.signor)": [[761, "pypath.inputs.signor.signor_complexes"]], "signor_enzyme_substrate() (in module pypath.inputs.signor)": [[762, "pypath.inputs.signor.signor_enzyme_substrate"]], "signor_interactions() (in module pypath.inputs.signor)": [[763, "pypath.inputs.signor.signor_interactions"]], "signor_pathway_annotations() (in module pypath.inputs.signor)": [[764, "pypath.inputs.signor.signor_pathway_annotations"]], "signor_pathways() (in module pypath.inputs.signor)": [[765, "pypath.inputs.signor.signor_pathways"]], "signor_protein_families() (in module pypath.inputs.signor)": [[766, "pypath.inputs.signor.signor_protein_families"]], "pypath.inputs.spike": [[767, "module-pypath.inputs.spike"]], "spike_complexes() (in module pypath.inputs.spike)": [[768, "pypath.inputs.spike.spike_complexes"]], "spike_interactions() (in module pypath.inputs.spike)": [[769, "pypath.inputs.spike.spike_interactions"]], "pypath.inputs.stitch": [[770, "module-pypath.inputs.stitch"]], "stitch_actions_interactions() (in module pypath.inputs.stitch)": [[771, "pypath.inputs.stitch.stitch_actions_interactions"]], "stitch_links_interactions() (in module pypath.inputs.stitch)": [[772, "pypath.inputs.stitch.stitch_links_interactions"]], "pypath.inputs.string": [[773, "module-pypath.inputs.string"]], "string_effects() (in module pypath.inputs.string)": [[774, "pypath.inputs.string.string_effects"]], "string_links_interactions() (in module pypath.inputs.string)": [[775, "pypath.inputs.string.string_links_interactions"]], "string_physical_interactions() (in module pypath.inputs.string)": [[776, "pypath.inputs.string.string_physical_interactions"]], "string_species() (in module pypath.inputs.string)": [[777, "pypath.inputs.string.string_species"]], "pypath.inputs.surfaceome": [[778, "module-pypath.inputs.surfaceome"]], "surfaceome_annotations() (in module pypath.inputs.surfaceome)": [[779, "pypath.inputs.surfaceome.surfaceome_annotations"]], "pypath.inputs.switches_elm": [[780, "module-pypath.inputs.switches_elm"]], "get_switches_elm() (in module pypath.inputs.switches_elm)": [[781, "pypath.inputs.switches_elm.get_switches_elm"]], "pypath.inputs.talklr": [[782, "module-pypath.inputs.talklr"]], "talklr_annotations() (in module pypath.inputs.talklr)": [[783, "pypath.inputs.talklr.talklr_annotations"]], "talklr_interactions() (in module pypath.inputs.talklr)": [[784, "pypath.inputs.talklr.talklr_interactions"]], "talklr_raw() (in module pypath.inputs.talklr)": [[785, "pypath.inputs.talklr.talklr_raw"]], "pypath.inputs.tcdb": [[786, "module-pypath.inputs.tcdb"]], "tcdb_annotations() (in module pypath.inputs.tcdb)": [[787, "pypath.inputs.tcdb.tcdb_annotations"]], "tcdb_classes() (in module pypath.inputs.tcdb)": [[788, "pypath.inputs.tcdb.tcdb_classes"]], "tcdb_families() (in module pypath.inputs.tcdb)": [[789, "pypath.inputs.tcdb.tcdb_families"]], "pypath.inputs.tfcensus": [[790, "module-pypath.inputs.tfcensus"]], "tfcensus_annotations() (in module pypath.inputs.tfcensus)": [[791, "pypath.inputs.tfcensus.tfcensus_annotations"]], "pypath.inputs.threedcomplex": [[792, "module-pypath.inputs.threedcomplex"]], "threedcomplex_chains() (in module pypath.inputs.threedcomplex)": [[793, "pypath.inputs.threedcomplex.threedcomplex_chains"]], "threedcomplex_complexes() (in module pypath.inputs.threedcomplex)": [[794, "pypath.inputs.threedcomplex.threedcomplex_complexes"]], "threedcomplex_contacts() (in module pypath.inputs.threedcomplex)": [[795, "pypath.inputs.threedcomplex.threedcomplex_contacts"]], "threedcomplex_ddi() (in module pypath.inputs.threedcomplex)": [[796, "pypath.inputs.threedcomplex.threedcomplex_ddi"]], "threedcomplex_nresidues() (in module pypath.inputs.threedcomplex)": [[797, "pypath.inputs.threedcomplex.threedcomplex_nresidues"]], "pypath.inputs.threedid": [[798, "module-pypath.inputs.threedid"]], "get_3did() (in module pypath.inputs.threedid)": [[799, "pypath.inputs.threedid.get_3did"]], "get_3did_ddi() (in module pypath.inputs.threedid)": [[800, "pypath.inputs.threedid.get_3did_ddi"]], "get_3did_dmi() (in module pypath.inputs.threedid)": [[801, "pypath.inputs.threedid.get_3did_dmi"]], "process_3did_dmi() (in module pypath.inputs.threedid)": [[802, "pypath.inputs.threedid.process_3did_dmi"]], "pypath.inputs.topdb": [[803, "module-pypath.inputs.topdb"]], "topdb_annotations() (in module pypath.inputs.topdb)": [[804, "pypath.inputs.topdb.topdb_annotations"]], "pypath.inputs.transmir": [[805, "module-pypath.inputs.transmir"]], "transmir_interactions() (in module pypath.inputs.transmir)": [[806, "pypath.inputs.transmir.transmir_interactions"]], "pypath.inputs.trip": [[807, "module-pypath.inputs.trip"]], "take_a_trip() (in module pypath.inputs.trip)": [[808, "pypath.inputs.trip.take_a_trip"]], "trip_find_uniprot() (in module pypath.inputs.trip)": [[809, "pypath.inputs.trip.trip_find_uniprot"]], "trip_get_uniprot() (in module pypath.inputs.trip)": [[810, "pypath.inputs.trip.trip_get_uniprot"]], "trip_interactions() (in module pypath.inputs.trip)": [[811, "pypath.inputs.trip.trip_interactions"]], "trip_process() (in module pypath.inputs.trip)": [[812, "pypath.inputs.trip.trip_process"]], "trip_process_table() (in module pypath.inputs.trip)": [[813, "pypath.inputs.trip.trip_process_table"]], "pypath.inputs.unichem": [[814, "module-pypath.inputs.unichem"]], "info() (in module pypath.inputs.unichem)": [[815, "pypath.inputs.unichem.info"]], "unichem_info() (in module pypath.inputs.unichem)": [[816, "pypath.inputs.unichem.unichem_info"]], "unichem_mapping() (in module pypath.inputs.unichem)": [[817, "pypath.inputs.unichem.unichem_mapping"]], "unichem_sources() (in module pypath.inputs.unichem)": [[818, "pypath.inputs.unichem.unichem_sources"]], "pypath.inputs.uniprot": [[819, "module-pypath.inputs.uniprot"]], "taxon (class in pypath.inputs.uniprot)": [[820, "pypath.inputs.uniprot.Taxon"]], "__init__() (pypath.inputs.uniprot.taxon method)": [[820, "pypath.inputs.uniprot.Taxon.__init__"]], "count() (pypath.inputs.uniprot.taxon method)": [[820, "pypath.inputs.uniprot.Taxon.count"]], "english (pypath.inputs.uniprot.taxon attribute)": [[820, "pypath.inputs.uniprot.Taxon.english"]], "index() (pypath.inputs.uniprot.taxon method)": [[820, "pypath.inputs.uniprot.Taxon.index"]], "latin (pypath.inputs.uniprot.taxon attribute)": [[820, "pypath.inputs.uniprot.Taxon.latin"]], "latin_synonym (pypath.inputs.uniprot.taxon attribute)": [[820, "pypath.inputs.uniprot.Taxon.latin_synonym"]], "ncbi_id (pypath.inputs.uniprot.taxon attribute)": [[820, "pypath.inputs.uniprot.Taxon.ncbi_id"]], "uniprotrecordhistory (class in pypath.inputs.uniprot)": [[821, "pypath.inputs.uniprot.UniprotRecordHistory"]], "__init__() (pypath.inputs.uniprot.uniprotrecordhistory method)": [[821, "pypath.inputs.uniprot.UniprotRecordHistory.__init__"]], "count() (pypath.inputs.uniprot.uniprotrecordhistory method)": [[821, "pypath.inputs.uniprot.UniprotRecordHistory.count"]], "database (pypath.inputs.uniprot.uniprotrecordhistory attribute)": [[821, "pypath.inputs.uniprot.UniprotRecordHistory.database"]], "date (pypath.inputs.uniprot.uniprotrecordhistory attribute)": [[821, "pypath.inputs.uniprot.UniprotRecordHistory.date"]], "entry_name (pypath.inputs.uniprot.uniprotrecordhistory attribute)": [[821, "pypath.inputs.uniprot.UniprotRecordHistory.entry_name"]], "entry_version (pypath.inputs.uniprot.uniprotrecordhistory attribute)": [[821, "pypath.inputs.uniprot.UniprotRecordHistory.entry_version"]], "index() (pypath.inputs.uniprot.uniprotrecordhistory method)": [[821, "pypath.inputs.uniprot.UniprotRecordHistory.index"]], "number (pypath.inputs.uniprot.uniprotrecordhistory attribute)": [[821, "pypath.inputs.uniprot.UniprotRecordHistory.number"]], "replaced_by (pypath.inputs.uniprot.uniprotrecordhistory attribute)": [[821, "pypath.inputs.uniprot.UniprotRecordHistory.replaced_by"]], "replaces (pypath.inputs.uniprot.uniprotrecordhistory attribute)": [[821, "pypath.inputs.uniprot.UniprotRecordHistory.replaces"]], "sequence_version (pypath.inputs.uniprot.uniprotrecordhistory attribute)": [[821, "pypath.inputs.uniprot.UniprotRecordHistory.sequence_version"]], "all_swissprots() (in module pypath.inputs.uniprot)": [[822, "pypath.inputs.uniprot.all_swissprots"]], "all_trembls() (in module pypath.inputs.uniprot)": [[823, "pypath.inputs.uniprot.all_trembls"]], "all_uniprots() (in module pypath.inputs.uniprot)": [[824, "pypath.inputs.uniprot.all_uniprots"]], "deleted_uniprot_genesymbol() (in module pypath.inputs.uniprot)": [[825, "pypath.inputs.uniprot.deleted_uniprot_genesymbol"]], "get_db() (in module pypath.inputs.uniprot)": [[826, "pypath.inputs.uniprot.get_db"]], "get_uniprot_sec() (in module pypath.inputs.uniprot)": [[827, "pypath.inputs.uniprot.get_uniprot_sec"]], "init_db() (in module pypath.inputs.uniprot)": [[828, "pypath.inputs.uniprot.init_db"]], "is_swissprot() (in module pypath.inputs.uniprot)": [[829, "pypath.inputs.uniprot.is_swissprot"]], "is_trembl() (in module pypath.inputs.uniprot)": [[830, "pypath.inputs.uniprot.is_trembl"]], "is_uniprot() (in module pypath.inputs.uniprot)": [[831, "pypath.inputs.uniprot.is_uniprot"]], "protein_datasheet() (in module pypath.inputs.uniprot)": [[832, "pypath.inputs.uniprot.protein_datasheet"]], "swissprot_deleted() (in module pypath.inputs.uniprot)": [[833, "pypath.inputs.uniprot.swissprot_deleted"]], "trembl_deleted() (in module pypath.inputs.uniprot)": [[834, "pypath.inputs.uniprot.trembl_deleted"]], "uniprot_data() (in module pypath.inputs.uniprot)": [[835, "pypath.inputs.uniprot.uniprot_data"]], "uniprot_deleted() (in module pypath.inputs.uniprot)": [[836, "pypath.inputs.uniprot.uniprot_deleted"]], "uniprot_families() (in module pypath.inputs.uniprot)": [[837, "pypath.inputs.uniprot.uniprot_families"]], "uniprot_history() (in module pypath.inputs.uniprot)": [[838, "pypath.inputs.uniprot.uniprot_history"]], "uniprot_history_recent_datasheet() (in module pypath.inputs.uniprot)": [[839, "pypath.inputs.uniprot.uniprot_history_recent_datasheet"]], "uniprot_keywords() (in module pypath.inputs.uniprot)": [[840, "pypath.inputs.uniprot.uniprot_keywords"]], "uniprot_locations() (in module pypath.inputs.uniprot)": [[841, "pypath.inputs.uniprot.uniprot_locations"]], "uniprot_ncbi_taxids() (in module pypath.inputs.uniprot)": [[842, "pypath.inputs.uniprot.uniprot_ncbi_taxids"]], "uniprot_ncbi_taxids_2() (in module pypath.inputs.uniprot)": [[843, "pypath.inputs.uniprot.uniprot_ncbi_taxids_2"]], "uniprot_preprocess() (in module pypath.inputs.uniprot)": [[844, "pypath.inputs.uniprot.uniprot_preprocess"]], "uniprot_recent_version() (in module pypath.inputs.uniprot)": [[845, "pypath.inputs.uniprot.uniprot_recent_version"]], "uniprot_taxonomy() (in module pypath.inputs.uniprot)": [[846, "pypath.inputs.uniprot.uniprot_taxonomy"]], "uniprot_tissues() (in module pypath.inputs.uniprot)": [[847, "pypath.inputs.uniprot.uniprot_tissues"]], "uniprot_topology() (in module pypath.inputs.uniprot)": [[848, "pypath.inputs.uniprot.uniprot_topology"]], "valid_uniprot() (in module pypath.inputs.uniprot)": [[849, "pypath.inputs.uniprot.valid_uniprot"]], "pypath.inputs.wang": [[850, "module-pypath.inputs.wang"]], "cui_interactions() (in module pypath.inputs.wang)": [[851, "pypath.inputs.wang.cui_interactions"]], "hsn_interactions() (in module pypath.inputs.wang)": [[852, "pypath.inputs.wang.hsn_interactions"]], "wang_annotations() (in module pypath.inputs.wang)": [[853, "pypath.inputs.wang.wang_annotations"]], "wang_interactions() (in module pypath.inputs.wang)": [[854, "pypath.inputs.wang.wang_interactions"]], "pypath.inputs.wojtowicz2020": [[855, "module-pypath.inputs.wojtowicz2020"]], "wojtowicz2020_interactions() (in module pypath.inputs.wojtowicz2020)": [[856, "pypath.inputs.wojtowicz2020.wojtowicz2020_interactions"]], "wojtowicz2020_raw() (in module pypath.inputs.wojtowicz2020)": [[857, "pypath.inputs.wojtowicz2020.wojtowicz2020_raw"]], "pypath.inputs.zhong2015": [[858, "module-pypath.inputs.zhong2015"]], "zhong2015_annotations() (in module pypath.inputs.zhong2015)": [[859, "pypath.inputs.zhong2015.zhong2015_annotations"]], "pypath.internals": [[860, "module-pypath.internals"]], "pypath.internals.annot_formats": [[861, "module-pypath.internals.annot_formats"]], "annotdef (class in pypath.internals.annot_formats)": [[862, "pypath.internals.annot_formats.AnnotDef"]], "__init__() (pypath.internals.annot_formats.annotdef method)": [[862, "pypath.internals.annot_formats.AnnotDef.__init__"]], "args (pypath.internals.annot_formats.annotdef attribute)": [[862, "pypath.internals.annot_formats.AnnotDef.args"]], "aspect (pypath.internals.annot_formats.annotdef attribute)": [[862, "pypath.internals.annot_formats.AnnotDef.aspect"]], "avoid (pypath.internals.annot_formats.annotdef attribute)": [[862, "pypath.internals.annot_formats.AnnotDef.avoid"]], "count() (pypath.internals.annot_formats.annotdef method)": [[862, "pypath.internals.annot_formats.AnnotDef.count"]], "enabled (pypath.internals.annot_formats.annotdef attribute)": [[862, "pypath.internals.annot_formats.AnnotDef.enabled"]], "exclude (pypath.internals.annot_formats.annotdef attribute)": [[862, "pypath.internals.annot_formats.AnnotDef.exclude"]], "index() (pypath.internals.annot_formats.annotdef method)": [[862, "pypath.internals.annot_formats.AnnotDef.index"]], "limit (pypath.internals.annot_formats.annotdef attribute)": [[862, "pypath.internals.annot_formats.AnnotDef.limit"]], "name (pypath.internals.annot_formats.annotdef attribute)": [[862, "pypath.internals.annot_formats.AnnotDef.name"]], "parent (pypath.internals.annot_formats.annotdef attribute)": [[862, "pypath.internals.annot_formats.AnnotDef.parent"]], "receiver (pypath.internals.annot_formats.annotdef attribute)": [[862, "pypath.internals.annot_formats.AnnotDef.receiver"]], "resource (pypath.internals.annot_formats.annotdef attribute)": [[862, "pypath.internals.annot_formats.AnnotDef.resource"]], "resource_name (pypath.internals.annot_formats.annotdef attribute)": [[862, "pypath.internals.annot_formats.AnnotDef.resource_name"]], "scope (pypath.internals.annot_formats.annotdef attribute)": [[862, "pypath.internals.annot_formats.AnnotDef.scope"]], "source (pypath.internals.annot_formats.annotdef attribute)": [[862, "pypath.internals.annot_formats.AnnotDef.source"]], "transmitter (pypath.internals.annot_formats.annotdef attribute)": [[862, "pypath.internals.annot_formats.AnnotDef.transmitter"]], "annotdefkey (class in pypath.internals.annot_formats)": [[863, "pypath.internals.annot_formats.AnnotDefKey"]], "__init__() (pypath.internals.annot_formats.annotdefkey method)": [[863, "pypath.internals.annot_formats.AnnotDefKey.__init__"]], "count() (pypath.internals.annot_formats.annotdefkey method)": [[863, "pypath.internals.annot_formats.AnnotDefKey.count"]], "index() (pypath.internals.annot_formats.annotdefkey method)": [[863, "pypath.internals.annot_formats.AnnotDefKey.index"]], "name (pypath.internals.annot_formats.annotdefkey attribute)": [[863, "pypath.internals.annot_formats.AnnotDefKey.name"]], "parent (pypath.internals.annot_formats.annotdefkey attribute)": [[863, "pypath.internals.annot_formats.AnnotDefKey.parent"]], "resource (pypath.internals.annot_formats.annotdefkey attribute)": [[863, "pypath.internals.annot_formats.AnnotDefKey.resource"]], "annotop (class in pypath.internals.annot_formats)": [[864, "pypath.internals.annot_formats.AnnotOp"]], "__init__() (pypath.internals.annot_formats.annotop method)": [[864, "pypath.internals.annot_formats.AnnotOp.__init__"]], "annots (pypath.internals.annot_formats.annotop attribute)": [[864, "pypath.internals.annot_formats.AnnotOp.annots"]], "count() (pypath.internals.annot_formats.annotop method)": [[864, "pypath.internals.annot_formats.AnnotOp.count"]], "index() (pypath.internals.annot_formats.annotop method)": [[864, "pypath.internals.annot_formats.AnnotOp.index"]], "op (pypath.internals.annot_formats.annotop attribute)": [[864, "pypath.internals.annot_formats.AnnotOp.op"]], "annotationgroup (class in pypath.internals.annot_formats)": [[865, "pypath.internals.annot_formats.AnnotationGroup"]], "__init__() (pypath.internals.annot_formats.annotationgroup method)": [[865, "pypath.internals.annot_formats.AnnotationGroup.__init__"]], "filter_entity_type() (pypath.internals.annot_formats.annotationgroup method)": [[865, "pypath.internals.annot_formats.AnnotationGroup.filter_entity_type"]], "isdisjoint() (pypath.internals.annot_formats.annotationgroup class method)": [[865, "pypath.internals.annot_formats.AnnotationGroup.isdisjoint"]], "pypath.internals.input_formats": [[866, "module-pypath.internals.input_formats"]], "arraymapping (class in pypath.internals.input_formats)": [[867, "pypath.internals.input_formats.ArrayMapping"]], "__init__() (pypath.internals.input_formats.arraymapping method)": [[867, "pypath.internals.input_formats.ArrayMapping.__init__"]], "biomartmapping (class in pypath.internals.input_formats)": [[868, "pypath.internals.input_formats.BiomartMapping"]], "__init__() (pypath.internals.input_formats.biomartmapping method)": [[868, "pypath.internals.input_formats.BiomartMapping.__init__"]], "filemapping (class in pypath.internals.input_formats)": [[869, "pypath.internals.input_formats.FileMapping"]], "__init__() (pypath.internals.input_formats.filemapping method)": [[869, "pypath.internals.input_formats.FileMapping.__init__"]], "hmdbmapping (class in pypath.internals.input_formats)": [[870, "pypath.internals.input_formats.HmdbMapping"]], "__init__() (pypath.internals.input_formats.hmdbmapping method)": [[870, "pypath.internals.input_formats.HmdbMapping.__init__"]], "mappinginput (class in pypath.internals.input_formats)": [[871, "pypath.internals.input_formats.MappingInput"]], "__init__() (pypath.internals.input_formats.mappinginput method)": [[871, "pypath.internals.input_formats.MappingInput.__init__"]], "networkinput (class in pypath.internals.input_formats)": [[872, "pypath.internals.input_formats.NetworkInput"]], "__init__() (pypath.internals.input_formats.networkinput method)": [[872, "pypath.internals.input_formats.NetworkInput.__init__"]], "picklemapping (class in pypath.internals.input_formats)": [[873, "pypath.internals.input_formats.PickleMapping"]], "__init__() (pypath.internals.input_formats.picklemapping method)": [[873, "pypath.internals.input_formats.PickleMapping.__init__"]], "promapping (class in pypath.internals.input_formats)": [[874, "pypath.internals.input_formats.ProMapping"]], "__init__() (pypath.internals.input_formats.promapping method)": [[874, "pypath.internals.input_formats.ProMapping.__init__"]], "rampmapping (class in pypath.internals.input_formats)": [[875, "pypath.internals.input_formats.RampMapping"]], "__init__() (pypath.internals.input_formats.rampmapping method)": [[875, "pypath.internals.input_formats.RampMapping.__init__"]], "readlist (class in pypath.internals.input_formats)": [[876, "pypath.internals.input_formats.ReadList"]], "__init__() (pypath.internals.input_formats.readlist method)": [[876, "pypath.internals.input_formats.ReadList.__init__"]], "unichemmapping (class in pypath.internals.input_formats)": [[877, "pypath.internals.input_formats.UnichemMapping"]], "__init__() (pypath.internals.input_formats.unichemmapping method)": [[877, "pypath.internals.input_formats.UnichemMapping.__init__"]], "uniprotlistmapping (class in pypath.internals.input_formats)": [[878, "pypath.internals.input_formats.UniprotListMapping"]], "__init__() (pypath.internals.input_formats.uniprotlistmapping method)": [[878, "pypath.internals.input_formats.UniprotListMapping.__init__"]], "uniprotmapping (class in pypath.internals.input_formats)": [[879, "pypath.internals.input_formats.UniprotMapping"]], "__init__() (pypath.internals.input_formats.uniprotmapping method)": [[879, "pypath.internals.input_formats.UniprotMapping.__init__"]], "resource_id_type() (pypath.internals.input_formats.uniprotmapping static method)": [[879, "pypath.internals.input_formats.UniprotMapping.resource_id_type"]], "pypath.internals.intera": [[880, "module-pypath.internals.intera"]], "complex (class in pypath.internals.intera)": [[881, "pypath.internals.intera.Complex"]], "__init__() (pypath.internals.intera.complex method)": [[881, "pypath.internals.intera.Complex.__init__"]], "add_attr() (pypath.internals.intera.complex method)": [[881, "pypath.internals.intera.Complex.add_attr"]], "merge() (pypath.internals.intera.complex method)": [[881, "pypath.internals.intera.Complex.merge"]], "domain (class in pypath.internals.intera)": [[882, "pypath.internals.intera.Domain"]], "__init__() (pypath.internals.intera.domain method)": [[882, "pypath.internals.intera.Domain.__init__"]], "domaindomain (class in pypath.internals.intera)": [[883, "pypath.internals.intera.DomainDomain"]], "__init__() (pypath.internals.intera.domaindomain method)": [[883, "pypath.internals.intera.DomainDomain.__init__"]], "domainmotif (class in pypath.internals.intera)": [[884, "pypath.internals.intera.DomainMotif"]], "__init__() (pypath.internals.intera.domainmotif method)": [[884, "pypath.internals.intera.DomainMotif.__init__"]], "get_line() (pypath.internals.intera.domainmotif method)": [[884, "pypath.internals.intera.DomainMotif.get_line"]], "key() (pypath.internals.intera.domainmotif method)": [[884, "pypath.internals.intera.DomainMotif.key"]], "interface (class in pypath.internals.intera)": [[885, "pypath.internals.intera.Interface"]], "__init__() (pypath.internals.intera.interface method)": [[885, "pypath.internals.intera.Interface.__init__"]], "add_residues() (pypath.internals.intera.interface method)": [[885, "pypath.internals.intera.Interface.add_residues"]], "bond_types() (pypath.internals.intera.interface method)": [[885, "pypath.internals.intera.Interface.bond_types"]], "get_bonds() (pypath.internals.intera.interface method)": [[885, "pypath.internals.intera.Interface.get_bonds"]], "numof_residues() (pypath.internals.intera.interface method)": [[885, "pypath.internals.intera.Interface.numof_residues"]], "motif (class in pypath.internals.intera)": [[886, "pypath.internals.intera.Motif"]], "__init__() (pypath.internals.intera.motif method)": [[886, "pypath.internals.intera.Motif.__init__"]], "ptm (class in pypath.internals.intera)": [[887, "pypath.internals.intera.Ptm"]], "__init__() (pypath.internals.intera.ptm method)": [[887, "pypath.internals.intera.Ptm.__init__"]], "regulation (class in pypath.internals.intera)": [[888, "pypath.internals.intera.Regulation"]], "__init__() (pypath.internals.intera.regulation method)": [[888, "pypath.internals.intera.Regulation.__init__"]], "residue (class in pypath.internals.intera)": [[889, "pypath.internals.intera.Residue"]], "__init__() (pypath.internals.intera.residue method)": [[889, "pypath.internals.intera.Residue.__init__"]], "pypath.internals.license": [[890, "module-pypath.internals.license"]], "license (class in pypath.internals.license)": [[891, "pypath.internals.license.License"]], "__init__() (pypath.internals.license.license method)": [[891, "pypath.internals.license.License.__init__"]], "enables() (pypath.internals.license.license method)": [[891, "pypath.internals.license.License.enables"]], "licenseattrib (class in pypath.internals.license)": [[892, "pypath.internals.license.LicenseAttrib"]], "__init__() (pypath.internals.license.licenseattrib method)": [[892, "pypath.internals.license.LicenseAttrib.__init__"]], "check_level() (pypath.internals.license.licenseattrib class method)": [[892, "pypath.internals.license.LicenseAttrib.check_level"]], "int_to_level() (pypath.internals.license.licenseattrib class method)": [[892, "pypath.internals.license.LicenseAttrib.int_to_level"]], "level_to_int() (pypath.internals.license.licenseattrib class method)": [[892, "pypath.internals.license.LicenseAttrib.level_to_int"]], "to_int() (pypath.internals.license.licenseattrib method)": [[892, "pypath.internals.license.LicenseAttrib.to_int"]], "licensefeature (class in pypath.internals.license)": [[893, "pypath.internals.license.LicenseFeature"]], "__init__() (pypath.internals.license.licensefeature method)": [[893, "pypath.internals.license.LicenseFeature.__init__"]], "check_level() (pypath.internals.license.licensefeature class method)": [[893, "pypath.internals.license.LicenseFeature.check_level"]], "int_to_level() (pypath.internals.license.licensefeature class method)": [[893, "pypath.internals.license.LicenseFeature.int_to_level"]], "level_to_int() (pypath.internals.license.licensefeature class method)": [[893, "pypath.internals.license.LicenseFeature.level_to_int"]], "to_int() (pypath.internals.license.licensefeature method)": [[893, "pypath.internals.license.LicenseFeature.to_int"]], "licensepurpose (class in pypath.internals.license)": [[894, "pypath.internals.license.LicensePurpose"]], "__init__() (pypath.internals.license.licensepurpose method)": [[894, "pypath.internals.license.LicensePurpose.__init__"]], "check_level() (pypath.internals.license.licensepurpose class method)": [[894, "pypath.internals.license.LicensePurpose.check_level"]], "int_to_level() (pypath.internals.license.licensepurpose class method)": [[894, "pypath.internals.license.LicensePurpose.int_to_level"]], "level_to_int() (pypath.internals.license.licensepurpose class method)": [[894, "pypath.internals.license.LicensePurpose.level_to_int"]], "to_int() (pypath.internals.license.licensepurpose method)": [[894, "pypath.internals.license.LicensePurpose.to_int"]], "licensesharing (class in pypath.internals.license)": [[895, "pypath.internals.license.LicenseSharing"]], "__init__() (pypath.internals.license.licensesharing method)": [[895, "pypath.internals.license.LicenseSharing.__init__"]], "check_level() (pypath.internals.license.licensesharing class method)": [[895, "pypath.internals.license.LicenseSharing.check_level"]], "int_to_level() (pypath.internals.license.licensesharing class method)": [[895, "pypath.internals.license.LicenseSharing.int_to_level"]], "level_to_int() (pypath.internals.license.licensesharing class method)": [[895, "pypath.internals.license.LicenseSharing.level_to_int"]], "to_int() (pypath.internals.license.licensesharing method)": [[895, "pypath.internals.license.LicenseSharing.to_int"]], "pypath.internals.maps": [[896, "module-pypath.internals.maps"]], "pypath.internals.refs": [[897, "module-pypath.internals.refs"]], "reference (class in pypath.internals.refs)": [[898, "pypath.internals.refs.Reference"]], "__init__() (pypath.internals.refs.reference method)": [[898, "pypath.internals.refs.Reference.__init__"]], "get_pubmed_data() (in module pypath.internals.refs)": [[899, "pypath.internals.refs.get_pubmed_data"]], "pypath.internals.resource": [[900, "module-pypath.internals.resource"]], "abstractresource (class in pypath.internals.resource)": [[901, "pypath.internals.resource.AbstractResource"]], "__init__() (pypath.internals.resource.abstractresource method)": [[901, "pypath.internals.resource.AbstractResource.__init__"]], "load_data() (pypath.internals.resource.abstractresource method)": [[901, "pypath.internals.resource.AbstractResource.load_data"]], "process() (pypath.internals.resource.abstractresource method)": [[901, "pypath.internals.resource.AbstractResource.process"]], "set_method() (pypath.internals.resource.abstractresource method)": [[901, "pypath.internals.resource.AbstractResource.set_method"]], "enzymesubstrateresource (class in pypath.internals.resource)": [[902, "pypath.internals.resource.EnzymeSubstrateResource"]], "__init__() (pypath.internals.resource.enzymesubstrateresource method)": [[902, "pypath.internals.resource.EnzymeSubstrateResource.__init__"]], "get_via() (pypath.internals.resource.enzymesubstrateresource method)": [[902, "pypath.internals.resource.EnzymeSubstrateResource.get_via"]], "enzymesubstrateresourcekey (class in pypath.internals.resource)": [[903, "pypath.internals.resource.EnzymeSubstrateResourceKey"]], "__init__() (pypath.internals.resource.enzymesubstrateresourcekey method)": [[903, "pypath.internals.resource.EnzymeSubstrateResourceKey.__init__"]], "count() (pypath.internals.resource.enzymesubstrateresourcekey method)": [[903, "pypath.internals.resource.EnzymeSubstrateResourceKey.count"]], "data_type (pypath.internals.resource.enzymesubstrateresourcekey attribute)": [[903, "pypath.internals.resource.EnzymeSubstrateResourceKey.data_type"]], "index() (pypath.internals.resource.enzymesubstrateresourcekey method)": [[903, "pypath.internals.resource.EnzymeSubstrateResourceKey.index"]], "name (pypath.internals.resource.enzymesubstrateresourcekey attribute)": [[903, "pypath.internals.resource.EnzymeSubstrateResourceKey.name"]], "via (pypath.internals.resource.enzymesubstrateresourcekey attribute)": [[903, "pypath.internals.resource.EnzymeSubstrateResourceKey.via"]], "networkresource (class in pypath.internals.resource)": [[904, "pypath.internals.resource.NetworkResource"]], "__init__() (pypath.internals.resource.networkresource method)": [[904, "pypath.internals.resource.NetworkResource.__init__"]], "networkresourcekey (class in pypath.internals.resource)": [[905, "pypath.internals.resource.NetworkResourceKey"]], "__init__() (pypath.internals.resource.networkresourcekey method)": [[905, "pypath.internals.resource.NetworkResourceKey.__init__"]], "count() (pypath.internals.resource.networkresourcekey method)": [[905, "pypath.internals.resource.NetworkResourceKey.count"]], "data_model (pypath.internals.resource.networkresourcekey attribute)": [[905, "pypath.internals.resource.NetworkResourceKey.data_model"]], "data_type (pypath.internals.resource.networkresourcekey attribute)": [[905, "pypath.internals.resource.NetworkResourceKey.data_type"]], "index() (pypath.internals.resource.networkresourcekey method)": [[905, "pypath.internals.resource.NetworkResourceKey.index"]], "interaction_type (pypath.internals.resource.networkresourcekey attribute)": [[905, "pypath.internals.resource.NetworkResourceKey.interaction_type"]], "label (pypath.internals.resource.networkresourcekey property)": [[905, "pypath.internals.resource.NetworkResourceKey.label"]], "last (pypath.internals.resource.networkresourcekey property)": [[905, "pypath.internals.resource.NetworkResourceKey.last"]], "name (pypath.internals.resource.networkresourcekey attribute)": [[905, "pypath.internals.resource.NetworkResourceKey.name"]], "via (pypath.internals.resource.networkresourcekey attribute)": [[905, "pypath.internals.resource.NetworkResourceKey.via"]], "resourceattributes (class in pypath.internals.resource)": [[906, "pypath.internals.resource.ResourceAttributes"]], "__init__() (pypath.internals.resource.resourceattributes method)": [[906, "pypath.internals.resource.ResourceAttributes.__init__"]], "pypath.legacy": [[907, "module-pypath.legacy"]], "pypath.legacy.db_categories": [[908, "module-pypath.legacy.db_categories"]], "get_categories() (in module pypath.legacy.db_categories)": [[909, "pypath.legacy.db_categories.get_categories"]], "get_category() (in module pypath.legacy.db_categories)": [[910, "pypath.legacy.db_categories.get_category"]], "pypath.legacy.main": [[911, "module-pypath.legacy.main"]], "direction (class in pypath.legacy.main)": [[912, "pypath.legacy.main.Direction"]], "__init__() (pypath.legacy.main.direction method)": [[912, "pypath.legacy.main.Direction.__init__"]], "check_nodes() (pypath.legacy.main.direction method)": [[912, "pypath.legacy.main.Direction.check_nodes"]], "check_param() (pypath.legacy.main.direction method)": [[912, "pypath.legacy.main.Direction.check_param"]], "consensus_edges() (pypath.legacy.main.direction method)": [[912, "pypath.legacy.main.Direction.consensus_edges"]], "get_dir() (pypath.legacy.main.direction method)": [[912, "pypath.legacy.main.Direction.get_dir"]], "get_direction() (pypath.legacy.main.direction method)": [[912, "pypath.legacy.main.Direction.get_direction"]], "get_directions() (pypath.legacy.main.direction method)": [[912, "pypath.legacy.main.Direction.get_directions"]], "get_dirs() (pypath.legacy.main.direction method)": [[912, "pypath.legacy.main.Direction.get_dirs"]], "get_sign() (pypath.legacy.main.direction method)": [[912, "pypath.legacy.main.Direction.get_sign"]], "has_sign() (pypath.legacy.main.direction method)": [[912, "pypath.legacy.main.Direction.has_sign"]], "is_directed() (pypath.legacy.main.direction method)": [[912, "pypath.legacy.main.Direction.is_directed"]], "is_directed_by_resources() (pypath.legacy.main.direction method)": [[912, "pypath.legacy.main.Direction.is_directed_by_resources"]], "is_inhibition() (pypath.legacy.main.direction method)": [[912, "pypath.legacy.main.Direction.is_inhibition"]], "is_mutual() (pypath.legacy.main.direction method)": [[912, "pypath.legacy.main.Direction.is_mutual"]], "is_mutual_by_resources() (pypath.legacy.main.direction method)": [[912, "pypath.legacy.main.Direction.is_mutual_by_resources"]], "is_stimulation() (pypath.legacy.main.direction method)": [[912, "pypath.legacy.main.Direction.is_stimulation"]], "majority_dir() (pypath.legacy.main.direction method)": [[912, "pypath.legacy.main.Direction.majority_dir"]], "majority_sign() (pypath.legacy.main.direction method)": [[912, "pypath.legacy.main.Direction.majority_sign"]], "merge() (pypath.legacy.main.direction method)": [[912, "pypath.legacy.main.Direction.merge"]], "negative_reverse() (pypath.legacy.main.direction method)": [[912, "pypath.legacy.main.Direction.negative_reverse"]], "negative_sources_reverse() (pypath.legacy.main.direction method)": [[912, "pypath.legacy.main.Direction.negative_sources_reverse"]], "negative_sources_straight() (pypath.legacy.main.direction method)": [[912, "pypath.legacy.main.Direction.negative_sources_straight"]], "negative_straight() (pypath.legacy.main.direction method)": [[912, "pypath.legacy.main.Direction.negative_straight"]], "positive_reverse() (pypath.legacy.main.direction method)": [[912, "pypath.legacy.main.Direction.positive_reverse"]], "positive_sources_reverse() (pypath.legacy.main.direction method)": [[912, "pypath.legacy.main.Direction.positive_sources_reverse"]], "positive_sources_straight() (pypath.legacy.main.direction method)": [[912, "pypath.legacy.main.Direction.positive_sources_straight"]], "positive_straight() (pypath.legacy.main.direction method)": [[912, "pypath.legacy.main.Direction.positive_straight"]], "reload() (pypath.legacy.main.direction method)": [[912, "pypath.legacy.main.Direction.reload"]], "set_dir() (pypath.legacy.main.direction method)": [[912, "pypath.legacy.main.Direction.set_dir"]], "set_direction() (pypath.legacy.main.direction method)": [[912, "pypath.legacy.main.Direction.set_direction"]], "set_sign() (pypath.legacy.main.direction method)": [[912, "pypath.legacy.main.Direction.set_sign"]], "source() (pypath.legacy.main.direction method)": [[912, "pypath.legacy.main.Direction.source"]], "sources_reverse() (pypath.legacy.main.direction method)": [[912, "pypath.legacy.main.Direction.sources_reverse"]], "sources_straight() (pypath.legacy.main.direction method)": [[912, "pypath.legacy.main.Direction.sources_straight"]], "sources_undirected() (pypath.legacy.main.direction method)": [[912, "pypath.legacy.main.Direction.sources_undirected"]], "src() (pypath.legacy.main.direction method)": [[912, "pypath.legacy.main.Direction.src"]], "src_by_source() (pypath.legacy.main.direction method)": [[912, "pypath.legacy.main.Direction.src_by_source"]], "target() (pypath.legacy.main.direction method)": [[912, "pypath.legacy.main.Direction.target"]], "tgt() (pypath.legacy.main.direction method)": [[912, "pypath.legacy.main.Direction.tgt"]], "tgt_by_source() (pypath.legacy.main.direction method)": [[912, "pypath.legacy.main.Direction.tgt_by_source"]], "translate() (pypath.legacy.main.direction method)": [[912, "pypath.legacy.main.Direction.translate"]], "unset_dir() (pypath.legacy.main.direction method)": [[912, "pypath.legacy.main.Direction.unset_dir"]], "unset_direction() (pypath.legacy.main.direction method)": [[912, "pypath.legacy.main.Direction.unset_direction"]], "unset_sign() (pypath.legacy.main.direction method)": [[912, "pypath.legacy.main.Direction.unset_sign"]], "which_directions() (pypath.legacy.main.direction method)": [[912, "pypath.legacy.main.Direction.which_directions"]], "which_dirs() (pypath.legacy.main.direction method)": [[912, "pypath.legacy.main.Direction.which_dirs"]], "which_signs() (pypath.legacy.main.direction method)": [[912, "pypath.legacy.main.Direction.which_signs"]], "networkentitycollection (class in pypath.legacy.main)": [[913, "pypath.legacy.main.NetworkEntityCollection"]], "__init__() (pypath.legacy.main.networkentitycollection method)": [[913, "pypath.legacy.main.NetworkEntityCollection.__init__"]], "by_category (pypath.legacy.main.networkentitycollection attribute)": [[913, "pypath.legacy.main.NetworkEntityCollection.by_category"]], "by_resource (pypath.legacy.main.networkentitycollection attribute)": [[913, "pypath.legacy.main.NetworkEntityCollection.by_resource"]], "cat_resource (pypath.legacy.main.networkentitycollection attribute)": [[913, "pypath.legacy.main.NetworkEntityCollection.cat_resource"]], "count() (pypath.legacy.main.networkentitycollection method)": [[913, "pypath.legacy.main.NetworkEntityCollection.count"]], "index() (pypath.legacy.main.networkentitycollection method)": [[913, "pypath.legacy.main.NetworkEntityCollection.index"]], "label (pypath.legacy.main.networkentitycollection attribute)": [[913, "pypath.legacy.main.NetworkEntityCollection.label"]], "method (pypath.legacy.main.networkentitycollection attribute)": [[913, "pypath.legacy.main.NetworkEntityCollection.method"]], "resource_cat (pypath.legacy.main.networkentitycollection attribute)": [[913, "pypath.legacy.main.NetworkEntityCollection.resource_cat"]], "shared (pypath.legacy.main.networkentitycollection attribute)": [[913, "pypath.legacy.main.NetworkEntityCollection.shared"]], "shared_cat (pypath.legacy.main.networkentitycollection attribute)": [[913, "pypath.legacy.main.NetworkEntityCollection.shared_cat"]], "shared_res_cat (pypath.legacy.main.networkentitycollection attribute)": [[913, "pypath.legacy.main.NetworkEntityCollection.shared_res_cat"]], "total (pypath.legacy.main.networkentitycollection attribute)": [[913, "pypath.legacy.main.NetworkEntityCollection.total"]], "unique (pypath.legacy.main.networkentitycollection attribute)": [[913, "pypath.legacy.main.NetworkEntityCollection.unique"]], "unique_cat (pypath.legacy.main.networkentitycollection attribute)": [[913, "pypath.legacy.main.NetworkEntityCollection.unique_cat"]], "unique_res_cat (pypath.legacy.main.networkentitycollection attribute)": [[913, "pypath.legacy.main.NetworkEntityCollection.unique_res_cat"]], "networkstatsrecord (class in pypath.legacy.main)": [[914, "pypath.legacy.main.NetworkStatsRecord"]], "__init__() (pypath.legacy.main.networkstatsrecord method)": [[914, "pypath.legacy.main.NetworkStatsRecord.__init__"]], "by_category (pypath.legacy.main.networkstatsrecord attribute)": [[914, "pypath.legacy.main.NetworkStatsRecord.by_category"]], "by_resource (pypath.legacy.main.networkstatsrecord attribute)": [[914, "pypath.legacy.main.NetworkStatsRecord.by_resource"]], "cat_resource (pypath.legacy.main.networkstatsrecord attribute)": [[914, "pypath.legacy.main.NetworkStatsRecord.cat_resource"]], "count() (pypath.legacy.main.networkstatsrecord method)": [[914, "pypath.legacy.main.NetworkStatsRecord.count"]], "index() (pypath.legacy.main.networkstatsrecord method)": [[914, "pypath.legacy.main.NetworkStatsRecord.index"]], "label (pypath.legacy.main.networkstatsrecord attribute)": [[914, "pypath.legacy.main.NetworkStatsRecord.label"]], "method (pypath.legacy.main.networkstatsrecord attribute)": [[914, "pypath.legacy.main.NetworkStatsRecord.method"]], "percent (pypath.legacy.main.networkstatsrecord attribute)": [[914, "pypath.legacy.main.NetworkStatsRecord.percent"]], "percent_cat (pypath.legacy.main.networkstatsrecord attribute)": [[914, "pypath.legacy.main.NetworkStatsRecord.percent_cat"]], "percent_res_cat (pypath.legacy.main.networkstatsrecord attribute)": [[914, "pypath.legacy.main.NetworkStatsRecord.percent_res_cat"]], "resource_cat (pypath.legacy.main.networkstatsrecord attribute)": [[914, "pypath.legacy.main.NetworkStatsRecord.resource_cat"]], "shared (pypath.legacy.main.networkstatsrecord attribute)": [[914, "pypath.legacy.main.NetworkStatsRecord.shared"]], "shared_cat (pypath.legacy.main.networkstatsrecord attribute)": [[914, "pypath.legacy.main.NetworkStatsRecord.shared_cat"]], "shared_res_cat (pypath.legacy.main.networkstatsrecord attribute)": [[914, "pypath.legacy.main.NetworkStatsRecord.shared_res_cat"]], "total (pypath.legacy.main.networkstatsrecord attribute)": [[914, "pypath.legacy.main.NetworkStatsRecord.total"]], "unique (pypath.legacy.main.networkstatsrecord attribute)": [[914, "pypath.legacy.main.NetworkStatsRecord.unique"]], "unique_cat (pypath.legacy.main.networkstatsrecord attribute)": [[914, "pypath.legacy.main.NetworkStatsRecord.unique_cat"]], "unique_res_cat (pypath.legacy.main.networkstatsrecord attribute)": [[914, "pypath.legacy.main.NetworkStatsRecord.unique_res_cat"]], "pypath (class in pypath.legacy.main)": [[915, "pypath.legacy.main.PyPath"]], "__init__() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.__init__"]], "acsn_effects() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.acsn_effects"]], "add_genesets() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.add_genesets"]], "add_grouped_eattr() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.add_grouped_eattr"]], "add_grouped_set_eattr() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.add_grouped_set_eattr"]], "add_list_eattr() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.add_list_eattr"]], "add_set_eattr() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.add_set_eattr"]], "affects() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.affects"]], "all_between() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.all_between"]], "all_neighbours() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.all_neighbours"]], "apply_list() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.apply_list"]], "apply_negative() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.apply_negative"]], "basic_stats() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.basic_stats"]], "basic_stats_intergroup() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.basic_stats_intergroup"]], "cancer_drivers_list() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.cancer_drivers_list"]], "cancer_gene_census_list() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.cancer_gene_census_list"]], "clean_graph() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.clean_graph"]], "collapse_by_name() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.collapse_by_name"]], "collect() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.collect"]], "combine_attr() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.combine_attr"]], "communities() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.communities"]], "complex_comembership_network() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.complex_comembership_network"]], "complexes() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.complexes"]], "complexes_in_network() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.complexes_in_network"]], "compounds_from_chembl() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.compounds_from_chembl"]], "consistency() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.consistency"]], "copy() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.copy"]], "copy_edges() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.copy_edges"]], "count_sol() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.count_sol"]], "counts() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.counts"]], "coverage() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.coverage"]], "curation_effort() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.curation_effort"]], "curation_effort_by_resource() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.curation_effort_by_resource"]], "curation_stats() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.curation_stats"]], "curation_tab() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.curation_tab"]], "curators_work() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.curators_work"]], "databases_similarity() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.databases_similarity"]], "degree_dist() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.degree_dist"]], "degree_dists() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.degree_dists"]], "delete_by_organism() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.delete_by_organism"]], "delete_by_source() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.delete_by_source"]], "delete_unknown() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.delete_unknown"]], "delete_unmapped() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.delete_unmapped"]], "dgenesymbol() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.dgenesymbol"]], "dgenesymbols() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.dgenesymbols"]], "dgs() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.dgs"]], "dgss() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.dgss"]], "dneighbors() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.dneighbors"]], "dp() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.dp"]], "dproteins() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.dproteins"]], "dps() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.dps"]], "duniprot() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.duniprot"]], "duniprots() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.duniprots"]], "dup() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.dup"]], "dups() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.dups"]], "dv() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.dv"]], "dvs() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.dvs"]], "edge_exists() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.edge_exists"]], "edge_loc() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.edge_loc"]], "edge_names() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.edge_names"]], "edges_3d() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.edges_3d"]], "edges_between() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.edges_between"]], "edges_expression() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.edges_expression"]], "edges_in_complexes() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.edges_in_complexes"]], "edges_ptms() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.edges_ptms"]], "edgeseq_inverse() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.edgeseq_inverse"]], "entities_by_resource() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.entities_by_resource"]], "entities_by_resources() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.entities_by_resources"]], "export_dot() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.export_dot"]], "export_edgelist() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.export_edgelist"]], "export_graphml() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.export_graphml"]], "export_ptms_tab() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.export_ptms_tab"]], "export_sif() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.export_sif"]], "export_struct_tab() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.export_struct_tab"]], "export_tab() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.export_tab"]], "find_all_paths() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.find_all_paths"]], "find_all_paths2() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.find_all_paths2"]], "find_complex() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.find_complex"]], "first_neighbours() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.first_neighbours"]], "fisher_enrichment() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.fisher_enrichment"]], "geneset_enrichment() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.geneset_enrichment"]], "genesymbol() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.genesymbol"]], "genesymbol_labels() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.genesymbol_labels"]], "genesymbols() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.genesymbols"]], "get_attrs() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.get_attrs"]], "get_directed() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.get_directed"]], "get_dirs_signs() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.get_dirs_signs"]], "get_edge() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.get_edge"]], "get_edges() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.get_edges"]], "get_function() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.get_function"]], "get_giant() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.get_giant"]], "get_go() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.get_go"]], "get_max() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.get_max"]], "get_network() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.get_network"]], "get_node() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.get_node"]], "get_node_d() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.get_node_d"]], "get_node_pair() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.get_node_pair"]], "get_nodes() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.get_nodes"]], "get_nodes_d() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.get_nodes_d"]], "get_pathways() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.get_pathways"]], "get_proteomicsdb() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.get_proteomicsdb"]], "get_sub() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.get_sub"]], "get_taxon() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.get_taxon"]], "go_annotate_graph() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.go_annotate_graph"]], "go_enrichment() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.go_enrichment"]], "gs() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.gs"]], "gs_affected_by() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.gs_affected_by"]], "gs_affects() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.gs_affects"]], "gs_edge() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.gs_edge"]], "gs_in_directed() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.gs_in_directed"]], "gs_in_undirected() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.gs_in_undirected"]], "gs_inhibited_by() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.gs_inhibited_by"]], "gs_inhibits() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.gs_inhibits"]], "gs_neighborhood() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.gs_neighborhood"]], "gs_neighbors() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.gs_neighbors"]], "gs_stimulated_by() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.gs_stimulated_by"]], "gs_stimulates() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.gs_stimulates"]], "gss() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.gss"]], "guide2pharma() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.guide2pharma"]], "having_attr() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.having_attr"]], "having_eattr() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.having_eattr"]], "having_ptm() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.having_ptm"]], "having_vattr() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.having_vattr"]], "homology_translation() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.homology_translation"]], "htp_stats() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.htp_stats"]], "in_complex() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.in_complex"]], "in_directed() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.in_directed"]], "in_undirected() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.in_undirected"]], "info() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.info"]], "init_complex_attr() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.init_complex_attr"]], "init_edge_attr() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.init_edge_attr"]], "init_gsea() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.init_gsea"]], "init_network() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.init_network"]], "init_vertex_attr() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.init_vertex_attr"]], "interactions_all() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.interactions_all"]], "interactions_directed() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.interactions_directed"]], "interactions_directed_by_resource() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.interactions_directed_by_resource"]], "interactions_inhibitory() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.interactions_inhibitory"]], "interactions_inhibitory_by_resource() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.interactions_inhibitory_by_resource"]], "interactions_mutual() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.interactions_mutual"]], "interactions_mutual_by_resource() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.interactions_mutual_by_resource"]], "interactions_signed() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.interactions_signed"]], "interactions_signed_by_resource() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.interactions_signed_by_resource"]], "interactions_stimulatory() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.interactions_stimulatory"]], "interactions_stimulatory_by_resource() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.interactions_stimulatory_by_resource"]], "interactions_undirected() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.interactions_undirected"]], "interactions_undirected_by_resource() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.interactions_undirected_by_resource"]], "intergroup_shortest_paths() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.intergroup_shortest_paths"]], "intogen_cancer_drivers_list() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.intogen_cancer_drivers_list"]], "iter_edges() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.iter_edges"]], "iter_interactions() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.iter_interactions"]], "jaccard_edges() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.jaccard_edges"]], "jaccard_meta() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.jaccard_meta"]], "kegg_directions() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.kegg_directions"]], "kegg_pathways() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.kegg_pathways"]], "kinase_stats() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.kinase_stats"]], "label() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.label"]], "label_by_go() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.label_by_go"]], "label_edges() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.label_edges"]], "label_vertices() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.label_vertices"]], "laudanna_directions() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.laudanna_directions"]], "laudanna_effects() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.laudanna_effects"]], "license() (pypath.legacy.main.pypath static method)": [[915, "pypath.legacy.main.PyPath.license"]], "list_resources() (pypath.legacy.main.pypath static method)": [[915, "pypath.legacy.main.PyPath.list_resources"]], "load_3dcomplexes() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.load_3dcomplexes"]], "load_3did_ddi() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.load_3did_ddi"]], "load_3did_ddi2() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.load_3did_ddi2"]], "load_3did_dmi() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.load_3did_dmi"]], "load_3did_interfaces() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.load_3did_interfaces"]], "load_all_pathways() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.load_all_pathways"]], "load_compleat() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.load_compleat"]], "load_complexportal() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.load_complexportal"]], "load_comppi() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.load_comppi"]], "load_corum() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.load_corum"]], "load_dbptm() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.load_dbptm"]], "load_ddi() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.load_ddi"]], "load_ddis() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.load_ddis"]], "load_depod_dmi() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.load_depod_dmi"]], "load_disgenet() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.load_disgenet"]], "load_dmi() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.load_dmi"]], "load_dmis() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.load_dmis"]], "load_domino_dmi() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.load_domino_dmi"]], "load_dorothea() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.load_dorothea"]], "load_elm() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.load_elm"]], "load_exocarta_attrs() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.load_exocarta_attrs"]], "load_expression() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.load_expression"]], "load_from_pickle() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.load_from_pickle"]], "load_go() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.load_go"]], "load_havugimana() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.load_havugimana"]], "load_hpa() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.load_hpa"]], "load_hprd_ptms() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.load_hprd_ptms"]], "load_ielm() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.load_ielm"]], "load_interfaces() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.load_interfaces"]], "load_li2012_ptms() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.load_li2012_ptms"]], "load_ligand_receptor_network() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.load_ligand_receptor_network"]], "load_lmpid() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.load_lmpid"]], "load_matrisome_attrs() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.load_matrisome_attrs"]], "load_membranome_attrs() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.load_membranome_attrs"]], "load_mimp_dmi() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.load_mimp_dmi"]], "load_mutations() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.load_mutations"]], "load_negatives() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.load_negatives"]], "load_old_omnipath() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.load_old_omnipath"]], "load_omnipath() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.load_omnipath"]], "load_pathways() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.load_pathways"]], "load_pdb() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.load_pdb"]], "load_pepcyber() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.load_pepcyber"]], "load_pfam() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.load_pfam"]], "load_pfam2() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.load_pfam2"]], "load_pfam3() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.load_pfam3"]], "load_phospho_dmi() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.load_phospho_dmi"]], "load_phosphoelm() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.load_phosphoelm"]], "load_pisa() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.load_pisa"]], "load_pnetworks_dmi() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.load_pnetworks_dmi"]], "load_psite_phos() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.load_psite_phos"]], "load_psite_reg() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.load_psite_reg"]], "load_ptms() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.load_ptms"]], "load_ptms2() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.load_ptms2"]], "load_resource() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.load_resource"]], "load_resources() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.load_resources"]], "load_signor_ptms() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.load_signor_ptms"]], "load_surfaceome_attrs() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.load_surfaceome_attrs"]], "load_tfregulons() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.load_tfregulons"]], "load_vesiclepedia_attrs() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.load_vesiclepedia_attrs"]], "lookup_cache() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.lookup_cache"]], "loop_edges() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.loop_edges"]], "mean_reference_per_interaction() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.mean_reference_per_interaction"]], "mean_reference_per_interaction_by_resource() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.mean_reference_per_interaction_by_resource"]], "merge_lists() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.merge_lists"]], "merge_nodes() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.merge_nodes"]], "mimp_directions() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.mimp_directions"]], "mutated_edges() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.mutated_edges"]], "name_edgelist() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.name_edgelist"]], "names2vids() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.names2vids"]], "negative_report() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.negative_report"]], "neighborhood() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.neighborhood"]], "neighbors() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.neighbors"]], "neighbourhood_network() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.neighbourhood_network"]], "network_by_go() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.network_by_go"]], "network_filter() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.network_filter"]], "network_stats() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.network_stats"]], "new_edges() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.new_edges"]], "new_nodes() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.new_nodes"]], "node_exists() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.node_exists"]], "numof_directed_edges() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.numof_directed_edges"]], "numof_edges() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.numof_edges"]], "numof_reference_interaction_pairs() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.numof_reference_interaction_pairs"]], "numof_references_by_resource() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.numof_references_by_resource"]], "numof_undirected_edges() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.numof_undirected_edges"]], "orthology_translation() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.orthology_translation"]], "p() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.p"]], "pathway_attributes() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.pathway_attributes"]], "pathway_members() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.pathway_members"]], "pathway_names() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.pathway_names"]], "pathway_similarity() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.pathway_similarity"]], "pathways_table() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.pathways_table"]], "pfam_regions() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.pfam_regions"]], "phosphonetworks_directions() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.phosphonetworks_directions"]], "phosphopoint_directions() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.phosphopoint_directions"]], "phosphorylation_directions() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.phosphorylation_directions"]], "phosphorylation_signs() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.phosphorylation_signs"]], "phosphosite_directions() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.phosphosite_directions"]], "prdb_tissue_expr() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.prdb_tissue_expr"]], "process_directions() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.process_directions"]], "process_dmi() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.process_dmi"]], "protein() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.protein"]], "protein_edge() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.protein_edge"]], "proteins() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.proteins"]], "ps() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.ps"]], "random_walk_with_return() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.random_walk_with_return"]], "random_walk_with_return2() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.random_walk_with_return2"]], "read_from_cache() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.read_from_cache"]], "read_list_file() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.read_list_file"]], "reference_edge_ratio() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.reference_edge_ratio"]], "reference_hist() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.reference_hist"]], "references() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.references"]], "references_by_resource() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.references_by_resource"]], "reload() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.reload"]], "remove_htp() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.remove_htp"]], "remove_undirected() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.remove_undirected"]], "resources (pypath.legacy.main.pypath property)": [[915, "pypath.legacy.main.PyPath.resources"]], "run_batch() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.run_batch"]], "save_network() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.save_network"]], "save_session() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.save_session"]], "save_to_pickle() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.save_to_pickle"]], "search_attr_and() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.search_attr_and"]], "search_attr_or() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.search_attr_or"]], "second_neighbours() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.second_neighbours"]], "select_by_go() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.select_by_go"]], "select_by_go_all() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.select_by_go_all"]], "select_by_go_expr() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.select_by_go_expr"]], "separate() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.separate"]], "separate_by_category() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.separate_by_category"]], "sequences() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.sequences"]], "set_boolean_vattr() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.set_boolean_vattr"]], "set_categories() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.set_categories"]], "set_chembl_mysql() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.set_chembl_mysql"]], "set_disease_genes() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.set_disease_genes"]], "set_druggability() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.set_druggability"]], "set_drugtargets() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.set_drugtargets"]], "set_kinases() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.set_kinases"]], "set_plasma_membrane_proteins_cspa() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.set_plasma_membrane_proteins_cspa"]], "set_plasma_membrane_proteins_cspa_surfaceome() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.set_plasma_membrane_proteins_cspa_surfaceome"]], "set_plasma_membrane_proteins_surfaceome() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.set_plasma_membrane_proteins_surfaceome"]], "set_receptors() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.set_receptors"]], "set_signaling_proteins() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.set_signaling_proteins"]], "set_tfs() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.set_tfs"]], "set_transcription_factors() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.set_transcription_factors"]], "shortest_path_dist() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.shortest_path_dist"]], "signaling_proteins_list() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.signaling_proteins_list"]], "signor_pathways() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.signor_pathways"]], "similarity_groups() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.similarity_groups"]], "small_plot() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.small_plot"]], "sorensen_pathways() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.sorensen_pathways"]], "source_diagram() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.source_diagram"]], "source_network() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.source_network"]], "source_similarity() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.source_similarity"]], "source_stats() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.source_stats"]], "sources_hist() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.sources_hist"]], "sources_overlap() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.sources_overlap"]], "sources_venn_data() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.sources_venn_data"]], "stats() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.stats"]], "straight_between() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.straight_between"]], "string_effects() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.string_effects"]], "sum_in_complex() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.sum_in_complex"]], "summaries_tab() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.summaries_tab"]], "table_latex() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.table_latex"]], "third_source_directions() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.third_source_directions"]], "tissue_network() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.tissue_network"]], "transcription_factors() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.transcription_factors"]], "uniprot() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.uniprot"]], "uniprots() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.uniprots"]], "uniq_node_list() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.uniq_node_list"]], "uniq_ptm() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.uniq_ptm"]], "uniq_ptms() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.uniq_ptms"]], "up() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.up"]], "up_affected_by() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.up_affected_by"]], "up_affects() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.up_affects"]], "up_edge() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.up_edge"]], "up_in_directed() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.up_in_directed"]], "up_in_undirected() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.up_in_undirected"]], "up_inhibited_by() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.up_inhibited_by"]], "up_inhibits() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.up_inhibits"]], "up_neighborhood() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.up_neighborhood"]], "up_neighbors() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.up_neighbors"]], "up_stimulated_by() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.up_stimulated_by"]], "up_stimulates() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.up_stimulates"]], "update_adjlist() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.update_adjlist"]], "update_attrs() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.update_attrs"]], "update_cats() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.update_cats"]], "update_db_dict() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.update_db_dict"]], "update_pathway_types() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.update_pathway_types"]], "update_pathways() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.update_pathways"]], "update_sources() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.update_sources"]], "update_summaries() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.update_summaries"]], "update_vertex_sources() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.update_vertex_sources"]], "update_vindex() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.update_vindex"]], "update_vname() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.update_vname"]], "ups() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.ups"]], "v() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.v"]], "vertex_pathways() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.vertex_pathways"]], "vsgs() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.vsgs"]], "vsup() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.vsup"]], "wang_effects() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.wang_effects"]], "write_table() (pypath.legacy.main.pypath method)": [[915, "pypath.legacy.main.PyPath.write_table"]], "get_db() (in module pypath.legacy.main)": [[916, "pypath.legacy.main.get_db"]], "init_db() (in module pypath.legacy.main)": [[917, "pypath.legacy.main.init_db"]], "log() (in module pypath)": [[918, "pypath.log"]], "pypath.omnipath": [[919, "module-pypath.omnipath"]], "pypath.omnipath.app": [[920, "module-pypath.omnipath.app"]], "databasemanager (class in pypath.omnipath.app)": [[921, "pypath.omnipath.app.DatabaseManager"]], "__init__() (pypath.omnipath.app.databasemanager method)": [[921, "pypath.omnipath.app.DatabaseManager.__init__"]], "build() (pypath.omnipath.app.databasemanager method)": [[921, "pypath.omnipath.app.DatabaseManager.build"]], "build_dataset() (pypath.omnipath.app.databasemanager method)": [[921, "pypath.omnipath.app.DatabaseManager.build_dataset"]], "compile_table() (pypath.omnipath.app.databasemanager method)": [[921, "pypath.omnipath.app.DatabaseManager.compile_table"]], "compile_tables() (pypath.omnipath.app.databasemanager method)": [[921, "pypath.omnipath.app.DatabaseManager.compile_tables"]], "dataset_dependencies() (pypath.omnipath.app.databasemanager method)": [[921, "pypath.omnipath.app.DatabaseManager.dataset_dependencies"]], "define_dataset() (pypath.omnipath.app.databasemanager method)": [[921, "pypath.omnipath.app.DatabaseManager.define_dataset"]], "ensure_dataset() (pypath.omnipath.app.databasemanager method)": [[921, "pypath.omnipath.app.DatabaseManager.ensure_dataset"]], "ensure_dirs() (pypath.omnipath.app.databasemanager method)": [[921, "pypath.omnipath.app.DatabaseManager.ensure_dirs"]], "ensure_module() (pypath.omnipath.app.databasemanager method)": [[921, "pypath.omnipath.app.DatabaseManager.ensure_module"]], "foreach_dataset() (pypath.omnipath.app.databasemanager method)": [[921, "pypath.omnipath.app.DatabaseManager.foreach_dataset"]], "get_args_curated() (pypath.omnipath.app.databasemanager method)": [[921, "pypath.omnipath.app.DatabaseManager.get_args_curated"]], "get_args_lncrna_mrna() (pypath.omnipath.app.databasemanager method)": [[921, "pypath.omnipath.app.DatabaseManager.get_args_lncrna_mrna"]], "get_args_mirna_mrna() (pypath.omnipath.app.databasemanager method)": [[921, "pypath.omnipath.app.DatabaseManager.get_args_mirna_mrna"]], "get_args_small_molecule() (pypath.omnipath.app.databasemanager method)": [[921, "pypath.omnipath.app.DatabaseManager.get_args_small_molecule"]], "get_args_tf_mirna() (pypath.omnipath.app.databasemanager method)": [[921, "pypath.omnipath.app.DatabaseManager.get_args_tf_mirna"]], "get_args_tf_target() (pypath.omnipath.app.databasemanager method)": [[921, "pypath.omnipath.app.DatabaseManager.get_args_tf_target"]], "get_build_args() (pypath.omnipath.app.databasemanager method)": [[921, "pypath.omnipath.app.DatabaseManager.get_build_args"]], "get_db() (pypath.omnipath.app.databasemanager method)": [[921, "pypath.omnipath.app.DatabaseManager.get_db"]], "get_param() (pypath.omnipath.app.databasemanager method)": [[921, "pypath.omnipath.app.DatabaseManager.get_param"]], "load_dataset() (pypath.omnipath.app.databasemanager method)": [[921, "pypath.omnipath.app.DatabaseManager.load_dataset"]], "network_df() (pypath.omnipath.app.databasemanager method)": [[921, "pypath.omnipath.app.DatabaseManager.network_df"]], "network_df_by_source() (pypath.omnipath.app.databasemanager method)": [[921, "pypath.omnipath.app.DatabaseManager.network_df_by_source"]], "pickle_exists() (pypath.omnipath.app.databasemanager method)": [[921, "pypath.omnipath.app.DatabaseManager.pickle_exists"]], "pickle_path() (pypath.omnipath.app.databasemanager method)": [[921, "pypath.omnipath.app.DatabaseManager.pickle_path"]], "reload() (pypath.omnipath.app.databasemanager method)": [[921, "pypath.omnipath.app.DatabaseManager.reload"]], "reload_module() (pypath.omnipath.app.databasemanager method)": [[921, "pypath.omnipath.app.DatabaseManager.reload_module"]], "remove_all() (pypath.omnipath.app.databasemanager method)": [[921, "pypath.omnipath.app.DatabaseManager.remove_all"]], "remove_db() (pypath.omnipath.app.databasemanager method)": [[921, "pypath.omnipath.app.DatabaseManager.remove_db"]], "set_network() (pypath.omnipath.app.databasemanager method)": [[921, "pypath.omnipath.app.DatabaseManager.set_network"]], "table_path() (pypath.omnipath.app.databasemanager method)": [[921, "pypath.omnipath.app.DatabaseManager.table_path"]], "pypath.omnipath.databases": [[922, "module-pypath.omnipath.databases"]], "build() (in module pypath.omnipath.databases)": [[923, "pypath.omnipath.databases.build"]], "class_and_param() (in module pypath.omnipath.databases)": [[924, "pypath.omnipath.databases.class_and_param"]], "pypath.omnipath.databases.define": [[925, "module-pypath.omnipath.databases.define"]], "databaseclass (class in pypath.omnipath.databases.define)": [[926, "pypath.omnipath.databases.define.DatabaseClass"]], "__init__() (pypath.omnipath.databases.define.databaseclass method)": [[926, "pypath.omnipath.databases.define.DatabaseClass.__init__"]], "databasedefinition (class in pypath.omnipath.databases.define)": [[927, "pypath.omnipath.databases.define.DatabaseDefinition"]], "__init__() (pypath.omnipath.databases.define.databasedefinition method)": [[927, "pypath.omnipath.databases.define.DatabaseDefinition.__init__"]], "from_dict() (pypath.omnipath.databases.define.databasedefinition class method)": [[927, "pypath.omnipath.databases.define.DatabaseDefinition.from_dict"]], "from_json() (pypath.omnipath.databases.define.databasedefinition class method)": [[927, "pypath.omnipath.databases.define.DatabaseDefinition.from_json"]], "databasedefinitionmanager (class in pypath.omnipath.databases.define)": [[928, "pypath.omnipath.databases.define.DatabaseDefinitionManager"]], "__init__() (pypath.omnipath.databases.define.databasedefinitionmanager method)": [[928, "pypath.omnipath.databases.define.DatabaseDefinitionManager.__init__"]], "build() (pypath.omnipath.databases.define.databasedefinitionmanager method)": [[928, "pypath.omnipath.databases.define.DatabaseDefinitionManager.build"]], "class_and_param() (pypath.omnipath.databases.define.databasedefinitionmanager method)": [[928, "pypath.omnipath.databases.define.DatabaseDefinitionManager.class_and_param"]], "get_manager() (in module pypath.omnipath.databases)": [[929, "pypath.omnipath.databases.get_manager"]], "init_manager() (in module pypath.omnipath.databases)": [[930, "pypath.omnipath.databases.init_manager"]], "pypath.omnipath.export": [[931, "module-pypath.omnipath.export"]], "export (class in pypath.omnipath.export)": [[932, "pypath.omnipath.export.Export"]], "__init__() (pypath.omnipath.export.export method)": [[932, "pypath.omnipath.export.Export.__init__"]], "add_extra_fields() (pypath.omnipath.export.export method)": [[932, "pypath.omnipath.export.Export.add_extra_fields"]], "generic_attr_processor() (pypath.omnipath.export.export static method)": [[932, "pypath.omnipath.export.Export.generic_attr_processor"]], "get_header() (pypath.omnipath.export.export method)": [[932, "pypath.omnipath.export.Export.get_header"]], "make_df() (pypath.omnipath.export.export method)": [[932, "pypath.omnipath.export.Export.make_df"]], "sources_table() (pypath.omnipath.export.export class method)": [[932, "pypath.omnipath.export.Export.sources_table"]], "write_tab() (pypath.omnipath.export.export method)": [[932, "pypath.omnipath.export.Export.write_tab"]], "init() (in module pypath.omnipath)": [[933, "pypath.omnipath.init"]], "pypath.omnipath.param": [[934, "module-pypath.omnipath.param"]], "curated_ppi_resources() (in module pypath.omnipath.param)": [[935, "pypath.omnipath.param.curated_ppi_resources"]], "tf_target_resources() (in module pypath.omnipath.param)": [[936, "pypath.omnipath.param.tf_target_resources"]], "pypath.omnipath.server": [[937, "module-pypath.omnipath.server"]], "pypath.omnipath.server.build": [[938, "module-pypath.omnipath.server.build"]], "webservicetables (class in pypath.omnipath.server.build)": [[939, "pypath.omnipath.server.build.WebserviceTables"]], "__init__() (pypath.omnipath.server.build.webservicetables method)": [[939, "pypath.omnipath.server.build.WebserviceTables.__init__"]], "pypath.omnipath.server.generate_about_page": [[940, "module-pypath.omnipath.server.generate_about_page"]], "export_licenses() (in module pypath.omnipath.server.generate_about_page)": [[941, "pypath.omnipath.server.generate_about_page.export_licenses"]], "generate_about_html() (in module pypath.omnipath.server.generate_about_page)": [[942, "pypath.omnipath.server.generate_about_page.generate_about_html"]], "resource_list_latex() (in module pypath.omnipath.server.generate_about_page)": [[943, "pypath.omnipath.server.generate_about_page.resource_list_latex"]], "write_html() (in module pypath.omnipath.server.generate_about_page)": [[944, "pypath.omnipath.server.generate_about_page.write_html"]], "pypath.omnipath.server.legacy": [[945, "module-pypath.omnipath.server.legacy"]], "pypathserver (class in pypath.omnipath.server.legacy)": [[946, "pypath.omnipath.server.legacy.PypathServer"]], "__init__() (pypath.omnipath.server.legacy.pypathserver method)": [[946, "pypath.omnipath.server.legacy.PypathServer.__init__"]], "pypath.omnipath.server.run": [[947, "module-pypath.omnipath.server.run"]], "baseserver (class in pypath.omnipath.server.run)": [[948, "pypath.omnipath.server.run.BaseServer"]], "__init__() (pypath.omnipath.server.run.baseserver method)": [[948, "pypath.omnipath.server.run.BaseServer.__init__"]], "rest (class in pypath.omnipath.server.run)": [[949, "pypath.omnipath.server.run.Rest"]], "__init__() (pypath.omnipath.server.run.rest method)": [[949, "pypath.omnipath.server.run.Rest.__init__"]], "tableserver (class in pypath.omnipath.server.run)": [[950, "pypath.omnipath.server.run.TableServer"]], "__init__() (pypath.omnipath.server.run.tableserver method)": [[950, "pypath.omnipath.server.run.TableServer.__init__"]], "twistedwebresource (class in pypath.omnipath.server.run)": [[951, "pypath.omnipath.server.run.TwistedWebResource"]], "__init__() (pypath.omnipath.server.run.twistedwebresource method)": [[951, "pypath.omnipath.server.run.TwistedWebResource.__init__"]], "twistedwebsite (class in pypath.omnipath.server.run)": [[952, "pypath.omnipath.server.run.TwistedWebSite"]], "__init__() (pypath.omnipath.server.run.twistedwebsite method)": [[952, "pypath.omnipath.server.run.TwistedWebSite.__init__"]], "stop_server() (in module pypath.omnipath.server.run)": [[953, "pypath.omnipath.server.run.stop_server"]], "twisted_listen_tcp() (in module pypath.omnipath.server.run)": [[954, "pypath.omnipath.server.run.twisted_listen_tcp"]], "twisted_run() (in module pypath.omnipath.server.run)": [[955, "pypath.omnipath.server.run.twisted_run"]], "pypath.resources": [[956, "module-pypath.resources"]], "pypath.resources.controller": [[957, "module-pypath.resources.controller"]], "resourcecontroller (class in pypath.resources.controller)": [[958, "pypath.resources.controller.ResourceController"]], "__init__() (pypath.resources.controller.resourcecontroller method)": [[958, "pypath.resources.controller.ResourceController.__init__"]], "add_resource_attrs() (pypath.resources.controller.resourcecontroller method)": [[958, "pypath.resources.controller.ResourceController.add_resource_attrs"]], "collect_interaction() (pypath.resources.controller.resourcecontroller method)": [[958, "pypath.resources.controller.ResourceController.collect_interaction"]], "collect_network() (pypath.resources.controller.resourcecontroller method)": [[958, "pypath.resources.controller.ResourceController.collect_network"]], "license_filter() (pypath.resources.controller.resourcecontroller method)": [[958, "pypath.resources.controller.ResourceController.license_filter"]], "update() (pypath.resources.controller.resourcecontroller method)": [[958, "pypath.resources.controller.ResourceController.update"]], "pypath.resources.data": [[959, "module-pypath.resources.data"]], "pypath.resources.data_formats": [[960, "module-pypath.resources.data_formats"]], "root (in module pypath.resources.data_formats)": [[961, "pypath.resources.data_formats.ROOT"]], "activity_flow (in module pypath.resources.data_formats)": [[962, "pypath.resources.data_formats.activity_flow"]], "collectri (in module pypath.resources.data_formats)": [[963, "pypath.resources.data_formats.collectri"]], "enzyme_substrate (in module pypath.resources.data_formats)": [[964, "pypath.resources.data_formats.enzyme_substrate"]], "interaction (in module pypath.resources.data_formats)": [[965, "pypath.resources.data_formats.interaction"]], "interaction_htp (in module pypath.resources.data_formats)": [[966, "pypath.resources.data_formats.interaction_htp"]], "obsolate (in module pypath.resources.data_formats)": [[967, "pypath.resources.data_formats.obsolate"]], "pathway_bad (in module pypath.resources.data_formats)": [[968, "pypath.resources.data_formats.pathway_bad"]], "reaction_pc (in module pypath.resources.data_formats)": [[969, "pypath.resources.data_formats.reaction_pc"]], "transcription_deprecated (in module pypath.resources.data_formats)": [[970, "pypath.resources.data_formats.transcription_deprecated"]], "transcription_onebyone (in module pypath.resources.data_formats)": [[971, "pypath.resources.data_formats.transcription_onebyone"]], "pypath.resources.descriptions": [[972, "module-pypath.resources.descriptions"]], "export_licenses() (in module pypath.resources.descriptions)": [[973, "pypath.resources.descriptions.export_licenses"]], "gen_html() (in module pypath.resources.descriptions)": [[974, "pypath.resources.descriptions.gen_html"]], "resource_list_latex() (in module pypath.resources.descriptions)": [[975, "pypath.resources.descriptions.resource_list_latex"]], "write_html() (in module pypath.resources.descriptions)": [[976, "pypath.resources.descriptions.write_html"]], "get_controller() (in module pypath.resources)": [[977, "pypath.resources.get_controller"]], "pypath.resources.licenses": [[978, "module-pypath.resources.licenses"]], "licenses (class in pypath.resources.licenses)": [[979, "pypath.resources.licenses.Licenses"]], "__init__() (pypath.resources.licenses.licenses method)": [[979, "pypath.resources.licenses.Licenses.__init__"]], "pypath.resources.network": [[980, "module-pypath.resources.network"]], "dorothea_expand_levels() (in module pypath.resources.network)": [[981, "pypath.resources.network.dorothea_expand_levels"]], "pypath.resources.urls": [[982, "module-pypath.resources.urls"]], "pypath.share": [[983, "module-pypath.share"]], "pypath.share.cache": [[984, "module-pypath.share.cache"]], "cache_item() (in module pypath.share.cache)": [[985, "pypath.share.cache.cache_item"]], "cache_path() (in module pypath.share.cache)": [[986, "pypath.share.cache.cache_path"]], "get_cachedir() (in module pypath.share.cache)": [[987, "pypath.share.cache.get_cachedir"]], "pypath.share.common": [[988, "module-pypath.share.common"]], "add_to_list() (in module pypath.share.common)": [[989, "pypath.share.common.add_to_list"]], "add_to_set() (in module pypath.share.common)": [[990, "pypath.share.common.add_to_set"]], "at_least_in() (in module pypath.share.common)": [[991, "pypath.share.common.at_least_in"]], "clean_dict() (in module pypath.share.common)": [[992, "pypath.share.common.clean_dict"]], "combine_attrs() (in module pypath.share.common)": [[993, "pypath.share.common.combine_attrs"]], "compr() (in module pypath.share.common)": [[994, "pypath.share.common.compr"]], "console() (in module pypath.share.common)": [[995, "pypath.share.common.console"]], "decode() (in module pypath.share.common)": [[996, "pypath.share.common.decode"]], "del_empty() (in module pypath.share.common)": [[997, "pypath.share.common.del_empty"]], "df_memory_usage() (in module pypath.share.common)": [[998, "pypath.share.common.df_memory_usage"]], "dict_collapse_keys() (in module pypath.share.common)": [[999, "pypath.share.common.dict_collapse_keys"]], "dict_counts() (in module pypath.share.common)": [[1000, "pypath.share.common.dict_counts"]], "dict_diff() (in module pypath.share.common)": [[1001, "pypath.share.common.dict_diff"]], "dict_expand_keys() (in module pypath.share.common)": [[1002, "pypath.share.common.dict_expand_keys"]], "dict_percent() (in module pypath.share.common)": [[1003, "pypath.share.common.dict_percent"]], "dict_set_path() (in module pypath.share.common)": [[1004, "pypath.share.common.dict_set_path"]], "dict_set_percent() (in module pypath.share.common)": [[1005, "pypath.share.common.dict_set_percent"]], "dict_str() (in module pypath.share.common)": [[1006, "pypath.share.common.dict_str"]], "dict_subtotals() (in module pypath.share.common)": [[1007, "pypath.share.common.dict_subtotals"]], "dict_sym_diff() (in module pypath.share.common)": [[1008, "pypath.share.common.dict_sym_diff"]], "dict_union() (in module pypath.share.common)": [[1009, "pypath.share.common.dict_union"]], "eq() (in module pypath.share.common)": [[1010, "pypath.share.common.eq"]], "filtr() (in module pypath.share.common)": [[1011, "pypath.share.common.filtr"]], "first() (in module pypath.share.common)": [[1012, "pypath.share.common.first"]], "flat_list() (in module pypath.share.common)": [[1013, "pypath.share.common.flat_list"]], "float_or_nan() (in module pypath.share.common)": [[1014, "pypath.share.common.float_or_nan"]], "format_bytes() (in module pypath.share.common)": [[1015, "pypath.share.common.format_bytes"]], "gen_session_id() (in module pypath.share.common)": [[1016, "pypath.share.common.gen_session_id"]], "get() (in module pypath.share.common)": [[1017, "pypath.share.common.get"]], "get_args() (in module pypath.share.common)": [[1018, "pypath.share.common.get_args"]], "identity() (in module pypath.share.common)": [[1019, "pypath.share.common.identity"]], "is_float() (in module pypath.share.common)": [[1020, "pypath.share.common.is_float"]], "is_int() (in module pypath.share.common)": [[1021, "pypath.share.common.is_int"]], "is_str() (in module pypath.share.common)": [[1022, "pypath.share.common.is_str"]], "jaccard_index() (in module pypath.share.common)": [[1023, "pypath.share.common.jaccard_index"]], "join_dicts() (in module pypath.share.common)": [[1024, "pypath.share.common.join_dicts"]], "latex_table() (in module pypath.share.common)": [[1025, "pypath.share.common.latex_table"]], "log_memory_usage() (in module pypath.share.common)": [[1026, "pypath.share.common.log_memory_usage"]], "match() (in module pypath.share.common)": [[1027, "pypath.share.common.match"]], "maybe_in_dict() (in module pypath.share.common)": [[1028, "pypath.share.common.maybe_in_dict"]], "md5() (in module pypath.share.common)": [[1029, "pypath.share.common.md5"]], "merge_dicts() (in module pypath.share.common)": [[1030, "pypath.share.common.merge_dicts"]], "n_shared_elements() (in module pypath.share.common)": [[1031, "pypath.share.common.n_shared_elements"]], "n_shared_foreach() (in module pypath.share.common)": [[1032, "pypath.share.common.n_shared_foreach"]], "n_shared_total() (in module pypath.share.common)": [[1033, "pypath.share.common.n_shared_total"]], "n_shared_unique_foreach() (in module pypath.share.common)": [[1034, "pypath.share.common.n_shared_unique_foreach"]], "n_unique_elements() (in module pypath.share.common)": [[1035, "pypath.share.common.n_unique_elements"]], "n_unique_foreach() (in module pypath.share.common)": [[1036, "pypath.share.common.n_unique_foreach"]], "n_unique_total() (in module pypath.share.common)": [[1037, "pypath.share.common.n_unique_total"]], "negate() (in module pypath.share.common)": [[1038, "pypath.share.common.negate"]], "nest() (in module pypath.share.common)": [[1039, "pypath.share.common.nest"]], "none_or_len() (in module pypath.share.common)": [[1040, "pypath.share.common.none_or_len"]], "paginate() (in module pypath.share.common)": [[1041, "pypath.share.common.paginate"]], "prefix() (in module pypath.share.common)": [[1042, "pypath.share.common.prefix"]], "print_table() (in module pypath.share.common)": [[1043, "pypath.share.common.print_table"]], "python_memory_usage() (in module pypath.share.common)": [[1044, "pypath.share.common.python_memory_usage"]], "re_safe_groups() (in module pypath.share.common)": [[1045, "pypath.share.common.re_safe_groups"]], "remove_prefix() (in module pypath.share.common)": [[1046, "pypath.share.common.remove_prefix"]], "rotate() (in module pypath.share.common)": [[1047, "pypath.share.common.rotate"]], "sets_to_sorted_lists() (in module pypath.share.common)": [[1048, "pypath.share.common.sets_to_sorted_lists"]], "sfirst() (in module pypath.share.common)": [[1049, "pypath.share.common.sfirst"]], "shared_elements() (in module pypath.share.common)": [[1050, "pypath.share.common.shared_elements"]], "shared_foreach() (in module pypath.share.common)": [[1051, "pypath.share.common.shared_foreach"]], "shared_total() (in module pypath.share.common)": [[1052, "pypath.share.common.shared_total"]], "shared_unique() (in module pypath.share.common)": [[1053, "pypath.share.common.shared_unique"]], "shared_unique_foreach() (in module pypath.share.common)": [[1054, "pypath.share.common.shared_unique_foreach"]], "shared_unique_total() (in module pypath.share.common)": [[1055, "pypath.share.common.shared_unique_total"]], "__init__() (pypath.share.common.silent method)": [[1056, "pypath.share.common.silent.__init__"]], "silent (class in pypath.share.common)": [[1056, "pypath.share.common.silent"]], "simpson_index() (in module pypath.share.common)": [[1057, "pypath.share.common.simpson_index"]], "simpson_index_counts() (in module pypath.share.common)": [[1058, "pypath.share.common.simpson_index_counts"]], "something() (in module pypath.share.common)": [[1059, "pypath.share.common.something"]], "sorensen_index() (in module pypath.share.common)": [[1060, "pypath.share.common.sorensen_index"]], "suffix() (in module pypath.share.common)": [[1061, "pypath.share.common.suffix"]], "sum_dicts() (in module pypath.share.common)": [[1062, "pypath.share.common.sum_dicts"]], "swap_dict() (in module pypath.share.common)": [[1063, "pypath.share.common.swap_dict"]], "swap_dict_simple() (in module pypath.share.common)": [[1064, "pypath.share.common.swap_dict_simple"]], "swap_suffix() (in module pypath.share.common)": [[1065, "pypath.share.common.swap_suffix"]], "table_add_row_numbers() (in module pypath.share.common)": [[1066, "pypath.share.common.table_add_row_numbers"]], "table_format() (in module pypath.share.common)": [[1067, "pypath.share.common.table_format"]], "table_textwrap() (in module pypath.share.common)": [[1068, "pypath.share.common.table_textwrap"]], "to_list() (in module pypath.share.common)": [[1069, "pypath.share.common.to_list"]], "to_set() (in module pypath.share.common)": [[1070, "pypath.share.common.to_set"]], "to_tuple() (in module pypath.share.common)": [[1071, "pypath.share.common.to_tuple"]], "try_bool() (in module pypath.share.common)": [[1072, "pypath.share.common.try_bool"]], "try_float() (in module pypath.share.common)": [[1073, "pypath.share.common.try_float"]], "tsv_table() (in module pypath.share.common)": [[1074, "pypath.share.common.tsv_table"]], "uniq_list() (in module pypath.share.common)": [[1075, "pypath.share.common.uniq_list"]], "uniq_list1() (in module pypath.share.common)": [[1076, "pypath.share.common.uniq_list1"]], "uniq_list2() (in module pypath.share.common)": [[1077, "pypath.share.common.uniq_list2"]], "uniq_ord_list() (in module pypath.share.common)": [[1078, "pypath.share.common.uniq_ord_list"]], "unique_elements() (in module pypath.share.common)": [[1079, "pypath.share.common.unique_elements"]], "unique_foreach() (in module pypath.share.common)": [[1080, "pypath.share.common.unique_foreach"]], "unique_list() (in module pypath.share.common)": [[1081, "pypath.share.common.unique_list"]], "unique_total() (in module pypath.share.common)": [[1082, "pypath.share.common.unique_total"]], "upper0() (in module pypath.share.common)": [[1083, "pypath.share.common.upper0"]], "values() (in module pypath.share.common)": [[1084, "pypath.share.common.values"]], "wcl() (in module pypath.share.common)": [[1085, "pypath.share.common.wcl"]], "wrap_truncate() (in module pypath.share.common)": [[1086, "pypath.share.common.wrap_truncate"]], "pypath.share.constants": [[1087, "module-pypath.share.constants"]], "pypath.share.curl": [[1088, "module-pypath.share.curl"]], "curl (class in pypath.share.curl)": [[1089, "pypath.share.curl.Curl"]], "__init__() (pypath.share.curl.curl method)": [[1089, "pypath.share.curl.Curl.__init__"]], "close() (pypath.share.curl.curl method)": [[1089, "pypath.share.curl.Curl.close"]], "construct_binary_data() (pypath.share.curl.curl method)": [[1089, "pypath.share.curl.Curl.construct_binary_data"]], "extract() (pypath.share.curl.curl method)": [[1089, "pypath.share.curl.Curl.extract"]], "is_quoted() (pypath.share.curl.curl method)": [[1089, "pypath.share.curl.Curl.is_quoted"]], "open() (pypath.share.curl.curl method)": [[1089, "pypath.share.curl.Curl.open"]], "open_tgz() (pypath.share.curl.curl method)": [[1089, "pypath.share.curl.Curl.open_tgz"]], "replace_forbidden() (pypath.share.curl.curl class method)": [[1089, "pypath.share.curl.Curl.replace_forbidden"]], "set_binary_data() (pypath.share.curl.curl method)": [[1089, "pypath.share.curl.Curl.set_binary_data"]], "url_fix() (pypath.share.curl.curl method)": [[1089, "pypath.share.curl.Curl.url_fix"]], "fileopener (class in pypath.share.curl)": [[1090, "pypath.share.curl.FileOpener"]], "__init__() (pypath.share.curl.fileopener method)": [[1090, "pypath.share.curl.FileOpener.__init__"]], "extract() (pypath.share.curl.fileopener method)": [[1090, "pypath.share.curl.FileOpener.extract"]], "open() (pypath.share.curl.fileopener method)": [[1090, "pypath.share.curl.FileOpener.open"]], "open_tgz() (pypath.share.curl.fileopener method)": [[1090, "pypath.share.curl.FileOpener.open_tgz"]], "remotefile (class in pypath.share.curl)": [[1091, "pypath.share.curl.RemoteFile"]], "__init__() (pypath.share.curl.remotefile method)": [[1091, "pypath.share.curl.RemoteFile.__init__"]], "__init__() (pypath.share.curl.cache_delete_off method)": [[1092, "pypath.share.curl.cache_delete_off.__init__"]], "cache_delete_off (class in pypath.share.curl)": [[1092, "pypath.share.curl.cache_delete_off"]], "__init__() (pypath.share.curl.cache_delete_on method)": [[1093, "pypath.share.curl.cache_delete_on.__init__"]], "cache_delete_on (class in pypath.share.curl)": [[1093, "pypath.share.curl.cache_delete_on"]], "__init__() (pypath.share.curl.cache_off method)": [[1094, "pypath.share.curl.cache_off.__init__"]], "cache_off (class in pypath.share.curl)": [[1094, "pypath.share.curl.cache_off"]], "__init__() (pypath.share.curl.cache_on method)": [[1095, "pypath.share.curl.cache_on.__init__"]], "cache_on (class in pypath.share.curl)": [[1095, "pypath.share.curl.cache_on"]], "__init__() (pypath.share.curl.cache_print_off method)": [[1096, "pypath.share.curl.cache_print_off.__init__"]], "cache_print_off (class in pypath.share.curl)": [[1096, "pypath.share.curl.cache_print_off"]], "__init__() (pypath.share.curl.cache_print_on method)": [[1097, "pypath.share.curl.cache_print_on.__init__"]], "cache_print_on (class in pypath.share.curl)": [[1097, "pypath.share.curl.cache_print_on"]], "__init__() (pypath.share.curl.debug_off method)": [[1098, "pypath.share.curl.debug_off.__init__"]], "debug_off (class in pypath.share.curl)": [[1098, "pypath.share.curl.debug_off"]], "__init__() (pypath.share.curl.debug_on method)": [[1099, "pypath.share.curl.debug_on.__init__"]], "debug_on (class in pypath.share.curl)": [[1099, "pypath.share.curl.debug_on"]], "__init__() (pypath.share.curl.dryrun_off method)": [[1100, "pypath.share.curl.dryrun_off.__init__"]], "dryrun_off (class in pypath.share.curl)": [[1100, "pypath.share.curl.dryrun_off"]], "__init__() (pypath.share.curl.dryrun_on method)": [[1101, "pypath.share.curl.dryrun_on.__init__"]], "dryrun_on (class in pypath.share.curl)": [[1101, "pypath.share.curl.dryrun_on"]], "is_url() (in module pypath.share.curl)": [[1102, "pypath.share.curl.is_url"]], "__init__() (pypath.share.curl.preserve_off method)": [[1103, "pypath.share.curl.preserve_off.__init__"]], "preserve_off (class in pypath.share.curl)": [[1103, "pypath.share.curl.preserve_off"]], "__init__() (pypath.share.curl.preserve_on method)": [[1104, "pypath.share.curl.preserve_on.__init__"]], "preserve_on (class in pypath.share.curl)": [[1104, "pypath.share.curl.preserve_on"]], "pypath.share.log": [[1105, "module-pypath.share.log"]], "logger (class in pypath.share.log)": [[1106, "pypath.share.log.Logger"]], "__init__() (pypath.share.log.logger method)": [[1106, "pypath.share.log.Logger.__init__"]], "browse() (pypath.share.log.logger method)": [[1106, "pypath.share.log.Logger.browse"]], "close_logfile() (pypath.share.log.logger method)": [[1106, "pypath.share.log.Logger.close_logfile"]], "console() (pypath.share.log.logger method)": [[1106, "pypath.share.log.Logger.console"]], "flush() (pypath.share.log.logger method)": [[1106, "pypath.share.log.Logger.flush"]], "get_logdir() (pypath.share.log.logger method)": [[1106, "pypath.share.log.Logger.get_logdir"]], "label_message() (pypath.share.log.logger method)": [[1106, "pypath.share.log.Logger.label_message"]], "msg() (pypath.share.log.logger method)": [[1106, "pypath.share.log.Logger.msg"]], "open_logfile() (pypath.share.log.logger method)": [[1106, "pypath.share.log.Logger.open_logfile"]], "strftime() (pypath.share.log.logger method)": [[1106, "pypath.share.log.Logger.strftime"]], "timestamp() (pypath.share.log.logger class method)": [[1106, "pypath.share.log.Logger.timestamp"]], "timestamp_message() (pypath.share.log.logger method)": [[1106, "pypath.share.log.Logger.timestamp_message"]], "new_logger() (in module pypath.share.log)": [[1107, "pypath.share.log.new_logger"]], "pypath.share.progress": [[1108, "module-pypath.share.progress"]], "progress (class in pypath.share.progress)": [[1109, "pypath.share.progress.Progress"]], "__init__() (pypath.share.progress.progress method)": [[1109, "pypath.share.progress.Progress.__init__"]], "get_desc() (pypath.share.progress.progress method)": [[1109, "pypath.share.progress.Progress.get_desc"]], "init_tqdm() (pypath.share.progress.progress method)": [[1109, "pypath.share.progress.Progress.init_tqdm"]], "set_done() (pypath.share.progress.progress method)": [[1109, "pypath.share.progress.Progress.set_done"]], "set_status() (pypath.share.progress.progress method)": [[1109, "pypath.share.progress.Progress.set_status"]], "set_total() (pypath.share.progress.progress method)": [[1109, "pypath.share.progress.Progress.set_total"]], "step() (pypath.share.progress.progress method)": [[1109, "pypath.share.progress.Progress.step"]], "terminate() (pypath.share.progress.progress method)": [[1109, "pypath.share.progress.Progress.terminate"]], "pypath.share.session": [[1110, "module-pypath.share.session"]], "logger (class in pypath.share.session)": [[1111, "pypath.share.session.Logger"]], "__init__() (pypath.share.session.logger method)": [[1111, "pypath.share.session.Logger.__init__"]], "session (class in pypath.share.session)": [[1112, "pypath.share.session.Session"]], "__init__() (pypath.share.session.session method)": [[1112, "pypath.share.session.Session.__init__"]], "gen_session_id() (pypath.share.session.session static method)": [[1112, "pypath.share.session.Session.gen_session_id"]], "start_logger() (pypath.share.session.session method)": [[1112, "pypath.share.session.Session.start_logger"]], "get_log() (in module pypath.share.session)": [[1113, "pypath.share.session.get_log"]], "get_session() (in module pypath.share.session)": [[1114, "pypath.share.session.get_session"]], "new_session() (in module pypath.share.session)": [[1115, "pypath.share.session.new_session"]], "pypath.share.settings": [[1116, "module-pypath.share.settings"]], "settings (class in pypath.share.settings)": [[1117, "pypath.share.settings.Settings"]], "__init__() (pypath.share.settings.settings method)": [[1117, "pypath.share.settings.Settings.__init__"]], "context() (pypath.share.settings.settings method)": [[1117, "pypath.share.settings.Settings.context"]], "get() (pypath.share.settings.settings method)": [[1117, "pypath.share.settings.Settings.get"]], "get_default() (pypath.share.settings.settings method)": [[1117, "pypath.share.settings.Settings.get_default"]], "reset() (pypath.share.settings.settings method)": [[1117, "pypath.share.settings.Settings.reset"]], "reset_all() (pypath.share.settings.settings method)": [[1117, "pypath.share.settings.Settings.reset_all"]], "setup() (pypath.share.settings.settings method)": [[1117, "pypath.share.settings.Settings.setup"]], "context() (in module pypath.share.settings)": [[1118, "pypath.share.settings.context"]], "get() (in module pypath.share.settings)": [[1119, "pypath.share.settings.get"]], "setup() (in module pypath.share.settings)": [[1120, "pypath.share.settings.setup"]], "pypath.utils": [[1121, "module-pypath.utils"]], "pypath.utils.go": [[1122, "module-pypath.utils.go"]], "goannotation (class in pypath.utils.go)": [[1123, "pypath.utils.go.GOAnnotation"]], "__init__() (pypath.utils.go.goannotation method)": [[1123, "pypath.utils.go.GOAnnotation.__init__"]], "all_uniprots() (pypath.utils.go.goannotation method)": [[1123, "pypath.utils.go.GOAnnotation.all_uniprots"]], "expr_names_to_terms() (pypath.utils.go.goannotation method)": [[1123, "pypath.utils.go.GOAnnotation.expr_names_to_terms"]], "get_annot() (pypath.utils.go.goannotation method)": [[1123, "pypath.utils.go.GOAnnotation.get_annot"]], "get_annot_ancestors() (pypath.utils.go.goannotation method)": [[1123, "pypath.utils.go.GOAnnotation.get_annot_ancestors"]], "get_annots() (pypath.utils.go.goannotation method)": [[1123, "pypath.utils.go.GOAnnotation.get_annots"]], "get_annots_ancestors() (pypath.utils.go.goannotation method)": [[1123, "pypath.utils.go.GOAnnotation.get_annots_ancestors"]], "get_name() (pypath.utils.go.goannotation method)": [[1123, "pypath.utils.go.GOAnnotation.get_name"]], "get_term() (pypath.utils.go.goannotation method)": [[1123, "pypath.utils.go.GOAnnotation.get_term"]], "has_any_term() (pypath.utils.go.goannotation method)": [[1123, "pypath.utils.go.GOAnnotation.has_any_term"]], "has_term() (pypath.utils.go.goannotation method)": [[1123, "pypath.utils.go.GOAnnotation.has_term"]], "i_select_by_term() (pypath.utils.go.goannotation method)": [[1123, "pypath.utils.go.GOAnnotation.i_select_by_term"]], "reload() (pypath.utils.go.goannotation method)": [[1123, "pypath.utils.go.GOAnnotation.reload"]], "select() (pypath.utils.go.goannotation method)": [[1123, "pypath.utils.go.GOAnnotation.select"]], "select_by_all() (pypath.utils.go.goannotation method)": [[1123, "pypath.utils.go.GOAnnotation.select_by_all"]], "select_by_expr() (pypath.utils.go.goannotation method)": [[1123, "pypath.utils.go.GOAnnotation.select_by_expr"]], "select_by_expr_terms() (pypath.utils.go.goannotation method)": [[1123, "pypath.utils.go.GOAnnotation.select_by_expr_terms"]], "select_by_name() (pypath.utils.go.goannotation method)": [[1123, "pypath.utils.go.GOAnnotation.select_by_name"]], "select_by_term() (pypath.utils.go.goannotation method)": [[1123, "pypath.utils.go.GOAnnotation.select_by_term"]], "gocustomannotation (class in pypath.utils.go)": [[1124, "pypath.utils.go.GOCustomAnnotation"]], "__init__() (pypath.utils.go.gocustomannotation method)": [[1124, "pypath.utils.go.GOCustomAnnotation.__init__"]], "get_annotation() (pypath.utils.go.gocustomannotation method)": [[1124, "pypath.utils.go.GOCustomAnnotation.get_annotation"]], "get_annotations() (pypath.utils.go.gocustomannotation method)": [[1124, "pypath.utils.go.GOCustomAnnotation.get_annotations"]], "process_categories() (pypath.utils.go.gocustomannotation method)": [[1124, "pypath.utils.go.GOCustomAnnotation.process_categories"]], "reload() (pypath.utils.go.gocustomannotation method)": [[1124, "pypath.utils.go.GOCustomAnnotation.reload"]], "geneontology (class in pypath.utils.go)": [[1125, "pypath.utils.go.GeneOntology"]], "__init__() (pypath.utils.go.geneontology method)": [[1125, "pypath.utils.go.GeneOntology.__init__"]], "all_from_aspect() (pypath.utils.go.geneontology method)": [[1125, "pypath.utils.go.GeneOntology.all_from_aspect"]], "aspect_from_name() (pypath.utils.go.geneontology method)": [[1125, "pypath.utils.go.GeneOntology.aspect_from_name"]], "flatten() (pypath.utils.go.geneontology method)": [[1125, "pypath.utils.go.GeneOntology.flatten"]], "get_all_ancestors() (pypath.utils.go.geneontology method)": [[1125, "pypath.utils.go.GeneOntology.get_all_ancestors"]], "get_all_descendants() (pypath.utils.go.geneontology method)": [[1125, "pypath.utils.go.GeneOntology.get_all_descendants"]], "get_aspect() (pypath.utils.go.geneontology method)": [[1125, "pypath.utils.go.GeneOntology.get_aspect"]], "get_name() (pypath.utils.go.geneontology method)": [[1125, "pypath.utils.go.GeneOntology.get_name"]], "get_term() (pypath.utils.go.geneontology method)": [[1125, "pypath.utils.go.GeneOntology.get_term"]], "highest() (pypath.utils.go.geneontology method)": [[1125, "pypath.utils.go.GeneOntology.highest"]], "is_leaf() (pypath.utils.go.geneontology method)": [[1125, "pypath.utils.go.GeneOntology.is_leaf"]], "is_name() (pypath.utils.go.geneontology method)": [[1125, "pypath.utils.go.GeneOntology.is_name"]], "is_root() (pypath.utils.go.geneontology method)": [[1125, "pypath.utils.go.GeneOntology.is_root"]], "is_term() (pypath.utils.go.geneontology method)": [[1125, "pypath.utils.go.GeneOntology.is_term"]], "lowest() (pypath.utils.go.geneontology method)": [[1125, "pypath.utils.go.GeneOntology.lowest"]], "names_to_terms() (pypath.utils.go.geneontology method)": [[1125, "pypath.utils.go.GeneOntology.names_to_terms"]], "names_to_terms_aspects() (pypath.utils.go.geneontology method)": [[1125, "pypath.utils.go.GeneOntology.names_to_terms_aspects"]], "reload() (pypath.utils.go.geneontology method)": [[1125, "pypath.utils.go.GeneOntology.reload"]], "set_of() (pypath.utils.go.geneontology method)": [[1125, "pypath.utils.go.GeneOntology.set_of"]], "set_of_names() (pypath.utils.go.geneontology method)": [[1125, "pypath.utils.go.GeneOntology.set_of_names"]], "set_of_terms() (pypath.utils.go.geneontology method)": [[1125, "pypath.utils.go.GeneOntology.set_of_terms"]], "subgraph_nodes() (pypath.utils.go.geneontology method)": [[1125, "pypath.utils.go.GeneOntology.subgraph_nodes"]], "terms_to_names() (pypath.utils.go.geneontology method)": [[1125, "pypath.utils.go.GeneOntology.terms_to_names"]], "terms_to_names_aspects() (pypath.utils.go.geneontology method)": [[1125, "pypath.utils.go.GeneOntology.terms_to_names_aspects"]], "annotate() (in module pypath.utils.go)": [[1126, "pypath.utils.go.annotate"]], "get_db() (in module pypath.utils.go)": [[1127, "pypath.utils.go.get_db"]], "init_db() (in module pypath.utils.go)": [[1128, "pypath.utils.go.init_db"]], "load_go() (in module pypath.utils.go)": [[1129, "pypath.utils.go.load_go"]], "pypath.utils.homology": [[1130, "module-pypath.utils.homology"]], "homologymanager (class in pypath.utils.homology)": [[1131, "pypath.utils.homology.HomologyManager"]], "__init__() (pypath.utils.homology.homologymanager method)": [[1131, "pypath.utils.homology.HomologyManager.__init__"]], "get_df() (pypath.utils.homology.homologymanager method)": [[1131, "pypath.utils.homology.HomologyManager.get_df"]], "get_dict() (pypath.utils.homology.homologymanager method)": [[1131, "pypath.utils.homology.HomologyManager.get_dict"]], "translate() (pypath.utils.homology.homologymanager method)": [[1131, "pypath.utils.homology.HomologyManager.translate"]], "translate_df() (pypath.utils.homology.homologymanager method)": [[1131, "pypath.utils.homology.HomologyManager.translate_df"]], "ortholog (class in pypath.utils.homology)": [[1132, "pypath.utils.homology.Ortholog"]], "__init__() (pypath.utils.homology.ortholog method)": [[1132, "pypath.utils.homology.Ortholog.__init__"]], "count() (pypath.utils.homology.ortholog method)": [[1132, "pypath.utils.homology.Ortholog.count"]], "ensembl_hc (pypath.utils.homology.ortholog attribute)": [[1132, "pypath.utils.homology.Ortholog.ensembl_hc"]], "ensembl_type (pypath.utils.homology.ortholog attribute)": [[1132, "pypath.utils.homology.Ortholog.ensembl_type"]], "index() (pypath.utils.homology.ortholog method)": [[1132, "pypath.utils.homology.Ortholog.index"]], "resource (pypath.utils.homology.ortholog attribute)": [[1132, "pypath.utils.homology.Ortholog.resource"]], "uniprot (pypath.utils.homology.ortholog attribute)": [[1132, "pypath.utils.homology.Ortholog.uniprot"]], "proteinhomology (class in pypath.utils.homology)": [[1133, "pypath.utils.homology.ProteinHomology"]], "__init__() (pypath.utils.homology.proteinhomology method)": [[1133, "pypath.utils.homology.ProteinHomology.__init__"]], "asdict() (pypath.utils.homology.proteinhomology method)": [[1133, "pypath.utils.homology.ProteinHomology.asdict"]], "df() (pypath.utils.homology.proteinhomology method)": [[1133, "pypath.utils.homology.ProteinHomology.df"]], "load_homologene() (pypath.utils.homology.proteinhomology method)": [[1133, "pypath.utils.homology.ProteinHomology.load_homologene"]], "translate() (pypath.utils.homology.proteinhomology method)": [[1133, "pypath.utils.homology.ProteinHomology.translate"]], "translate_df() (pypath.utils.homology.proteinhomology method)": [[1133, "pypath.utils.homology.ProteinHomology.translate_df"]], "proteomes (class in pypath.utils.homology)": [[1134, "pypath.utils.homology.Proteomes"]], "__init__() (pypath.utils.homology.proteomes method)": [[1134, "pypath.utils.homology.Proteomes.__init__"]], "ptmhomology (class in pypath.utils.homology)": [[1135, "pypath.utils.homology.PtmHomology"]], "__init__() (pypath.utils.homology.ptmhomology method)": [[1135, "pypath.utils.homology.PtmHomology.__init__"]], "asdict() (pypath.utils.homology.ptmhomology method)": [[1135, "pypath.utils.homology.PtmHomology.asdict"]], "df() (pypath.utils.homology.ptmhomology method)": [[1135, "pypath.utils.homology.PtmHomology.df"]], "load_homologene() (pypath.utils.homology.ptmhomology method)": [[1135, "pypath.utils.homology.PtmHomology.load_homologene"]], "ptm_orthology() (pypath.utils.homology.ptmhomology method)": [[1135, "pypath.utils.homology.PtmHomology.ptm_orthology"]], "translate() (pypath.utils.homology.ptmhomology method)": [[1135, "pypath.utils.homology.PtmHomology.translate"]], "translate_df() (pypath.utils.homology.ptmhomology method)": [[1135, "pypath.utils.homology.PtmHomology.translate_df"]], "translate_site() (pypath.utils.homology.ptmhomology method)": [[1135, "pypath.utils.homology.PtmHomology.translate_site"]], "sequencecontainer (class in pypath.utils.homology)": [[1136, "pypath.utils.homology.SequenceContainer"]], "__init__() (pypath.utils.homology.sequencecontainer method)": [[1136, "pypath.utils.homology.SequenceContainer.__init__"]], "get_df() (in module pypath.utils.homology)": [[1137, "pypath.utils.homology.get_df"]], "get_dict() (in module pypath.utils.homology)": [[1138, "pypath.utils.homology.get_dict"]], "get_manager() (in module pypath.utils.homology)": [[1139, "pypath.utils.homology.get_manager"]], "init() (in module pypath.utils.homology)": [[1140, "pypath.utils.homology.init"]], "translate() (in module pypath.utils.homology)": [[1141, "pypath.utils.homology.translate"]], "translate_df() (in module pypath.utils.homology)": [[1142, "pypath.utils.homology.translate_df"]], "pypath.utils.mapping": [[1143, "module-pypath.utils.mapping"]], "mapreader (class in pypath.utils.mapping)": [[1144, "pypath.utils.mapping.MapReader"]], "__init__() (pypath.utils.mapping.mapreader method)": [[1144, "pypath.utils.mapping.MapReader.__init__"]], "id_type_side() (pypath.utils.mapping.mapreader method)": [[1144, "pypath.utils.mapping.MapReader.id_type_side"]], "load() (pypath.utils.mapping.mapreader method)": [[1144, "pypath.utils.mapping.MapReader.load"]], "mapping_table_a_to_b (pypath.utils.mapping.mapreader property)": [[1144, "pypath.utils.mapping.MapReader.mapping_table_a_to_b"]], "mapping_table_b_to_a (pypath.utils.mapping.mapreader property)": [[1144, "pypath.utils.mapping.MapReader.mapping_table_b_to_a"]], "read() (pypath.utils.mapping.mapreader method)": [[1144, "pypath.utils.mapping.MapReader.read"]], "read_cache() (pypath.utils.mapping.mapreader method)": [[1144, "pypath.utils.mapping.MapReader.read_cache"]], "read_mapping_array() (pypath.utils.mapping.mapreader method)": [[1144, "pypath.utils.mapping.MapReader.read_mapping_array"]], "read_mapping_biomart() (pypath.utils.mapping.mapreader method)": [[1144, "pypath.utils.mapping.MapReader.read_mapping_biomart"]], "read_mapping_file() (pypath.utils.mapping.mapreader method)": [[1144, "pypath.utils.mapping.MapReader.read_mapping_file"]], "read_mapping_hmdb() (pypath.utils.mapping.mapreader method)": [[1144, "pypath.utils.mapping.MapReader.read_mapping_hmdb"]], "read_mapping_ramp() (pypath.utils.mapping.mapreader method)": [[1144, "pypath.utils.mapping.MapReader.read_mapping_ramp"]], "read_mapping_unichem() (pypath.utils.mapping.mapreader method)": [[1144, "pypath.utils.mapping.MapReader.read_mapping_unichem"]], "read_mapping_uniprot() (pypath.utils.mapping.mapreader method)": [[1144, "pypath.utils.mapping.MapReader.read_mapping_uniprot"]], "read_mapping_uniprot_list() (pypath.utils.mapping.mapreader method)": [[1144, "pypath.utils.mapping.MapReader.read_mapping_uniprot_list"]], "resource_id_type() (pypath.utils.mapping.mapreader method)": [[1144, "pypath.utils.mapping.MapReader.resource_id_type"]], "set_uniprot_space() (pypath.utils.mapping.mapreader method)": [[1144, "pypath.utils.mapping.MapReader.set_uniprot_space"]], "setup_cache() (pypath.utils.mapping.mapreader method)": [[1144, "pypath.utils.mapping.MapReader.setup_cache"]], "tables_loaded() (pypath.utils.mapping.mapreader method)": [[1144, "pypath.utils.mapping.MapReader.tables_loaded"]], "write_cache() (pypath.utils.mapping.mapreader method)": [[1144, "pypath.utils.mapping.MapReader.write_cache"]], "mapper (class in pypath.utils.mapping)": [[1145, "pypath.utils.mapping.Mapper"]], "__init__() (pypath.utils.mapping.mapper method)": [[1145, "pypath.utils.mapping.Mapper.__init__"]], "chain_map() (pypath.utils.mapping.mapper method)": [[1145, "pypath.utils.mapping.Mapper.chain_map"]], "create_reverse() (pypath.utils.mapping.mapper method)": [[1145, "pypath.utils.mapping.Mapper.create_reverse"]], "get_table_key() (pypath.utils.mapping.mapper method)": [[1145, "pypath.utils.mapping.Mapper.get_table_key"]], "guess_type() (pypath.utils.mapping.mapper method)": [[1145, "pypath.utils.mapping.Mapper.guess_type"]], "has_mapping_table() (pypath.utils.mapping.mapper method)": [[1145, "pypath.utils.mapping.Mapper.has_mapping_table"]], "id_types() (pypath.utils.mapping.mapper class method)": [[1145, "pypath.utils.mapping.Mapper.id_types"]], "identifier() (pypath.utils.mapping.mapper method)": [[1145, "pypath.utils.mapping.Mapper.identifier"]], "label() (pypath.utils.mapping.mapper method)": [[1145, "pypath.utils.mapping.Mapper.label"]], "load_genesymbol5() (pypath.utils.mapping.mapper method)": [[1145, "pypath.utils.mapping.Mapper.load_genesymbol5"]], "load_mapping() (pypath.utils.mapping.mapper method)": [[1145, "pypath.utils.mapping.Mapper.load_mapping"]], "load_uniprot_static() (pypath.utils.mapping.mapper method)": [[1145, "pypath.utils.mapping.Mapper.load_uniprot_static"]], "map_name() (pypath.utils.mapping.mapper method)": [[1145, "pypath.utils.mapping.Mapper.map_name"]], "map_name0() (pypath.utils.mapping.mapper method)": [[1145, "pypath.utils.mapping.Mapper.map_name0"]], "map_names() (pypath.utils.mapping.mapper method)": [[1145, "pypath.utils.mapping.Mapper.map_names"]], "mapping_tables() (pypath.utils.mapping.mapper static method)": [[1145, "pypath.utils.mapping.Mapper.mapping_tables"]], "only_uniprot_ac() (pypath.utils.mapping.mapper method)": [[1145, "pypath.utils.mapping.Mapper.only_uniprot_ac"]], "other_organism_uniprot() (pypath.utils.mapping.mapper method)": [[1145, "pypath.utils.mapping.Mapper.other_organism_uniprot"]], "primary_uniprot() (pypath.utils.mapping.mapper method)": [[1145, "pypath.utils.mapping.Mapper.primary_uniprot"]], "reload() (pypath.utils.mapping.mapper method)": [[1145, "pypath.utils.mapping.Mapper.reload"]], "remove_expired() (pypath.utils.mapping.mapper method)": [[1145, "pypath.utils.mapping.Mapper.remove_expired"]], "remove_key() (pypath.utils.mapping.mapper method)": [[1145, "pypath.utils.mapping.Mapper.remove_key"]], "remove_table() (pypath.utils.mapping.mapper method)": [[1145, "pypath.utils.mapping.Mapper.remove_table"]], "reverse_key() (pypath.utils.mapping.mapper method)": [[1145, "pypath.utils.mapping.Mapper.reverse_key"]], "reverse_mapping() (pypath.utils.mapping.mapper static method)": [[1145, "pypath.utils.mapping.Mapper.reverse_mapping"]], "swissprots() (pypath.utils.mapping.mapper method)": [[1145, "pypath.utils.mapping.Mapper.swissprots"]], "translate_deleted_uniprot_by_genesymbol() (pypath.utils.mapping.mapper method)": [[1145, "pypath.utils.mapping.Mapper.translate_deleted_uniprot_by_genesymbol"]], "trembl_swissprot() (pypath.utils.mapping.mapper method)": [[1145, "pypath.utils.mapping.Mapper.trembl_swissprot"]], "uniprot_cleanup() (pypath.utils.mapping.mapper method)": [[1145, "pypath.utils.mapping.Mapper.uniprot_cleanup"]], "valid_uniprot() (pypath.utils.mapping.mapper method)": [[1145, "pypath.utils.mapping.Mapper.valid_uniprot"]], "which_table() (pypath.utils.mapping.mapper method)": [[1145, "pypath.utils.mapping.Mapper.which_table"]], "mappingtable (class in pypath.utils.mapping)": [[1146, "pypath.utils.mapping.MappingTable"]], "__init__() (pypath.utils.mapping.mappingtable method)": [[1146, "pypath.utils.mapping.MappingTable.__init__"]], "get_key() (pypath.utils.mapping.mappingtable method)": [[1146, "pypath.utils.mapping.MappingTable.get_key"]], "mappingtablekey (class in pypath.utils.mapping)": [[1147, "pypath.utils.mapping.MappingTableKey"]], "__init__() (pypath.utils.mapping.mappingtablekey method)": [[1147, "pypath.utils.mapping.MappingTableKey.__init__"]], "count() (pypath.utils.mapping.mappingtablekey method)": [[1147, "pypath.utils.mapping.MappingTableKey.count"]], "id_type (pypath.utils.mapping.mappingtablekey attribute)": [[1147, "pypath.utils.mapping.MappingTableKey.id_type"]], "index() (pypath.utils.mapping.mappingtablekey method)": [[1147, "pypath.utils.mapping.MappingTableKey.index"]], "ncbi_tax_id (pypath.utils.mapping.mappingtablekey attribute)": [[1147, "pypath.utils.mapping.MappingTableKey.ncbi_tax_id"]], "target_id_type (pypath.utils.mapping.mappingtablekey attribute)": [[1147, "pypath.utils.mapping.MappingTableKey.target_id_type"]], "uniprot_id_types (in module pypath.utils.mapping)": [[1148, "pypath.utils.mapping.UNIPROT_ID_TYPES"]], "get_mapper() (in module pypath.utils.mapping)": [[1149, "pypath.utils.mapping.get_mapper"]], "guess_type() (in module pypath.utils.mapping)": [[1150, "pypath.utils.mapping.guess_type"]], "id_from_label() (in module pypath.utils.mapping)": [[1151, "pypath.utils.mapping.id_from_label"]], "id_from_label0() (in module pypath.utils.mapping)": [[1152, "pypath.utils.mapping.id_from_label0"]], "init() (in module pypath.utils.mapping)": [[1153, "pypath.utils.mapping.init"]], "label() (in module pypath.utils.mapping)": [[1154, "pypath.utils.mapping.label"]], "map_name() (in module pypath.utils.mapping)": [[1155, "pypath.utils.mapping.map_name"]], "map_name0() (in module pypath.utils.mapping)": [[1156, "pypath.utils.mapping.map_name0"]], "map_names() (in module pypath.utils.mapping)": [[1157, "pypath.utils.mapping.map_names"]], "pypath.utils.pdb": [[1158, "module-pypath.utils.pdb"]], "residue (class in pypath.utils.pdb)": [[1159, "pypath.utils.pdb.Residue"]], "__init__() (pypath.utils.pdb.residue method)": [[1159, "pypath.utils.pdb.Residue.__init__"]], "chain (pypath.utils.pdb.residue attribute)": [[1159, "pypath.utils.pdb.Residue.chain"]], "count() (pypath.utils.pdb.residue method)": [[1159, "pypath.utils.pdb.Residue.count"]], "index() (pypath.utils.pdb.residue method)": [[1159, "pypath.utils.pdb.Residue.index"]], "offset (pypath.utils.pdb.residue attribute)": [[1159, "pypath.utils.pdb.Residue.offset"]], "resnum (pypath.utils.pdb.residue attribute)": [[1159, "pypath.utils.pdb.Residue.resnum"]], "uniprot (pypath.utils.pdb.residue attribute)": [[1159, "pypath.utils.pdb.Residue.uniprot"]], "residuemapper (class in pypath.utils.pdb)": [[1160, "pypath.utils.pdb.ResidueMapper"]], "__init__() (pypath.utils.pdb.residuemapper method)": [[1160, "pypath.utils.pdb.ResidueMapper.__init__"]], "clean() (pypath.utils.pdb.residuemapper method)": [[1160, "pypath.utils.pdb.ResidueMapper.clean"]], "get_residue() (pypath.utils.pdb.residuemapper method)": [[1160, "pypath.utils.pdb.ResidueMapper.get_residue"]], "load_mapping() (pypath.utils.pdb.residuemapper method)": [[1160, "pypath.utils.pdb.ResidueMapper.load_mapping"]], "segment (class in pypath.utils.pdb)": [[1161, "pypath.utils.pdb.Segment"]], "__init__() (pypath.utils.pdb.segment method)": [[1161, "pypath.utils.pdb.Segment.__init__"]], "count() (pypath.utils.pdb.segment method)": [[1161, "pypath.utils.pdb.Segment.count"]], "index() (pypath.utils.pdb.segment method)": [[1161, "pypath.utils.pdb.Segment.index"]], "pdb_end (pypath.utils.pdb.segment attribute)": [[1161, "pypath.utils.pdb.Segment.pdb_end"]], "pdb_start (pypath.utils.pdb.segment attribute)": [[1161, "pypath.utils.pdb.Segment.pdb_start"]], "uniprot (pypath.utils.pdb.segment attribute)": [[1161, "pypath.utils.pdb.Segment.uniprot"]], "uniprot_end (pypath.utils.pdb.segment attribute)": [[1161, "pypath.utils.pdb.Segment.uniprot_end"]], "uniprot_start (pypath.utils.pdb.segment attribute)": [[1161, "pypath.utils.pdb.Segment.uniprot_start"]], "residue_pdb() (in module pypath.utils.pdb)": [[1162, "pypath.utils.pdb.residue_pdb"]], "pypath.utils.proteomicsdb": [[1163, "module-pypath.utils.proteomicsdb"]], "proteomicsdb (class in pypath.utils.proteomicsdb)": [[1164, "pypath.utils.proteomicsdb.ProteomicsDB"]], "__init__() (pypath.utils.proteomicsdb.proteomicsdb method)": [[1164, "pypath.utils.proteomicsdb.ProteomicsDB.__init__"]], "get_expression() (pypath.utils.proteomicsdb.proteomicsdb method)": [[1164, "pypath.utils.proteomicsdb.ProteomicsDB.get_expression"]], "get_pieces() (pypath.utils.proteomicsdb.proteomicsdb method)": [[1164, "pypath.utils.proteomicsdb.ProteomicsDB.get_pieces"]], "get_proteins() (pypath.utils.proteomicsdb.proteomicsdb method)": [[1164, "pypath.utils.proteomicsdb.ProteomicsDB.get_proteins"]], "get_tissues() (pypath.utils.proteomicsdb.proteomicsdb method)": [[1164, "pypath.utils.proteomicsdb.ProteomicsDB.get_tissues"]], "pandas_matrix() (pypath.utils.proteomicsdb.proteomicsdb method)": [[1164, "pypath.utils.proteomicsdb.ProteomicsDB.pandas_matrix"]], "query() (pypath.utils.proteomicsdb.proteomicsdb method)": [[1164, "pypath.utils.proteomicsdb.ProteomicsDB.query"]], "tissues_x_proteins() (pypath.utils.proteomicsdb.proteomicsdb method)": [[1164, "pypath.utils.proteomicsdb.ProteomicsDB.tissues_x_proteins"]], "pypath.utils.pyreact": [[1165, "module-pypath.utils.pyreact"]], "attributehandler (class in pypath.utils.pyreact)": [[1166, "pypath.utils.pyreact.AttributeHandler"]], "__init__() (pypath.utils.pyreact.attributehandler method)": [[1166, "pypath.utils.pyreact.AttributeHandler.__init__"]], "biopaxreader (class in pypath.utils.pyreact)": [[1167, "pypath.utils.pyreact.BioPaxReader"]], "__init__() (pypath.utils.pyreact.biopaxreader method)": [[1167, "pypath.utils.pyreact.BioPaxReader.__init__"]], "biopax_size() (pypath.utils.pyreact.biopaxreader method)": [[1167, "pypath.utils.pyreact.BioPaxReader.biopax_size"]], "cleanup_hook() (pypath.utils.pyreact.biopaxreader method)": [[1167, "pypath.utils.pyreact.BioPaxReader.cleanup_hook"]], "close_biopax() (pypath.utils.pyreact.biopaxreader method)": [[1167, "pypath.utils.pyreact.BioPaxReader.close_biopax"]], "extract() (pypath.utils.pyreact.biopaxreader method)": [[1167, "pypath.utils.pyreact.BioPaxReader.extract"]], "init_etree() (pypath.utils.pyreact.biopaxreader method)": [[1167, "pypath.utils.pyreact.BioPaxReader.init_etree"]], "iterate() (pypath.utils.pyreact.biopaxreader method)": [[1167, "pypath.utils.pyreact.BioPaxReader.iterate"]], "open_biopax() (pypath.utils.pyreact.biopaxreader method)": [[1167, "pypath.utils.pyreact.BioPaxReader.open_biopax"]], "process() (pypath.utils.pyreact.biopaxreader method)": [[1167, "pypath.utils.pyreact.BioPaxReader.process"]], "set_progress() (pypath.utils.pyreact.biopaxreader method)": [[1167, "pypath.utils.pyreact.BioPaxReader.set_progress"]], "complex (class in pypath.utils.pyreact)": [[1168, "pypath.utils.pyreact.Complex"]], "__init__() (pypath.utils.pyreact.complex method)": [[1168, "pypath.utils.pyreact.Complex.__init__"]], "complexvariations (class in pypath.utils.pyreact)": [[1169, "pypath.utils.pyreact.ComplexVariations"]], "__init__() (pypath.utils.pyreact.complexvariations method)": [[1169, "pypath.utils.pyreact.ComplexVariations.__init__"]], "itermembers() (pypath.utils.pyreact.complexvariations method)": [[1169, "pypath.utils.pyreact.ComplexVariations.itermembers"]], "control (class in pypath.utils.pyreact)": [[1170, "pypath.utils.pyreact.Control"]], "__init__() (pypath.utils.pyreact.control method)": [[1170, "pypath.utils.pyreact.Control.__init__"]], "entity (class in pypath.utils.pyreact)": [[1171, "pypath.utils.pyreact.Entity"]], "__init__() (pypath.utils.pyreact.entity method)": [[1171, "pypath.utils.pyreact.Entity.__init__"]], "expand() (pypath.utils.pyreact.entity method)": [[1171, "pypath.utils.pyreact.Entity.expand"]], "entityset (class in pypath.utils.pyreact)": [[1172, "pypath.utils.pyreact.EntitySet"]], "__init__() (pypath.utils.pyreact.entityset method)": [[1172, "pypath.utils.pyreact.EntitySet.__init__"]], "intersecting (class in pypath.utils.pyreact)": [[1173, "pypath.utils.pyreact.Intersecting"]], "__init__() (pypath.utils.pyreact.intersecting method)": [[1173, "pypath.utils.pyreact.Intersecting.__init__"]], "protein (class in pypath.utils.pyreact)": [[1174, "pypath.utils.pyreact.Protein"]], "__init__() (pypath.utils.pyreact.protein method)": [[1174, "pypath.utils.pyreact.Protein.__init__"]], "expand() (pypath.utils.pyreact.protein method)": [[1174, "pypath.utils.pyreact.Protein.expand"]], "proteinfamily (class in pypath.utils.pyreact)": [[1175, "pypath.utils.pyreact.ProteinFamily"]], "__init__() (pypath.utils.pyreact.proteinfamily method)": [[1175, "pypath.utils.pyreact.ProteinFamily.__init__"]], "pyreact (class in pypath.utils.pyreact)": [[1176, "pypath.utils.pyreact.PyReact"]], "__init__() (pypath.utils.pyreact.pyreact method)": [[1176, "pypath.utils.pyreact.PyReact.__init__"]], "gen_cvariations() (pypath.utils.pyreact.pyreact method)": [[1176, "pypath.utils.pyreact.PyReact.gen_cvariations"]], "in_same_component() (pypath.utils.pyreact.pyreact method)": [[1176, "pypath.utils.pyreact.PyReact.in_same_component"]], "merge_complexes() (pypath.utils.pyreact.pyreact method)": [[1176, "pypath.utils.pyreact.PyReact.merge_complexes"]], "merge_cvariations() (pypath.utils.pyreact.pyreact method)": [[1176, "pypath.utils.pyreact.PyReact.merge_cvariations"]], "reaction (class in pypath.utils.pyreact)": [[1177, "pypath.utils.pyreact.Reaction"]], "__init__() (pypath.utils.pyreact.reaction method)": [[1177, "pypath.utils.pyreact.Reaction.__init__"]], "reactionside (class in pypath.utils.pyreact)": [[1178, "pypath.utils.pyreact.ReactionSide"]], "__init__() (pypath.utils.pyreact.reactionside method)": [[1178, "pypath.utils.pyreact.ReactionSide.__init__"]], "expand() (pypath.utils.pyreact.reactionside method)": [[1178, "pypath.utils.pyreact.ReactionSide.expand"]], "reference (class in pypath.utils.pyreact)": [[1179, "pypath.utils.pyreact.Reference"]], "__init__() (pypath.utils.pyreact.reference method)": [[1179, "pypath.utils.pyreact.Reference.__init__"]], "expand() (pypath.utils.pyreact.reference method)": [[1179, "pypath.utils.pyreact.Reference.expand"]], "pypath.utils.reflists": [[1180, "module-pypath.utils.reflists"]], "referencelistmanager (class in pypath.utils.reflists)": [[1181, "pypath.utils.reflists.ReferenceListManager"]], "__init__() (pypath.utils.reflists.referencelistmanager method)": [[1181, "pypath.utils.reflists.ReferenceListManager.__init__"]], "check() (pypath.utils.reflists.referencelistmanager method)": [[1181, "pypath.utils.reflists.ReferenceListManager.check"]], "is_not() (pypath.utils.reflists.referencelistmanager method)": [[1181, "pypath.utils.reflists.ReferenceListManager.is_not"]], "select() (pypath.utils.reflists.referencelistmanager method)": [[1181, "pypath.utils.reflists.ReferenceListManager.select"]], "check() (in module pypath.utils.reflists)": [[1182, "pypath.utils.reflists.check"]], "get_manager() (in module pypath.utils.reflists)": [[1183, "pypath.utils.reflists.get_manager"]], "get_reflist() (in module pypath.utils.reflists)": [[1184, "pypath.utils.reflists.get_reflist"]], "init() (in module pypath.utils.reflists)": [[1185, "pypath.utils.reflists.init"]], "is_not() (in module pypath.utils.reflists)": [[1186, "pypath.utils.reflists.is_not"]], "select() (in module pypath.utils.reflists)": [[1187, "pypath.utils.reflists.select"]], "pypath.utils.residues": [[1188, "module-pypath.utils.residues"]], "residuemapper (class in pypath.utils.residues)": [[1189, "pypath.utils.residues.ResidueMapper"]], "__init__() (pypath.utils.residues.residuemapper method)": [[1189, "pypath.utils.residues.ResidueMapper.__init__"]], "clean() (pypath.utils.residues.residuemapper method)": [[1189, "pypath.utils.residues.ResidueMapper.clean"]], "pypath.utils.seq": [[1190, "module-pypath.utils.seq"]], "pfam (class in pypath.utils.seq)": [[1191, "pypath.utils.seq.Pfam"]], "__init__() (pypath.utils.seq.pfam method)": [[1191, "pypath.utils.seq.Pfam.__init__"]], "iterdb() (pypath.utils.seq.pfam method)": [[1191, "pypath.utils.seq.Pfam.iterdb"]], "iterprotein() (pypath.utils.seq.pfam method)": [[1191, "pypath.utils.seq.Pfam.iterprotein"]], "load() (pypath.utils.seq.pfam method)": [[1191, "pypath.utils.seq.Pfam.load"]], "processor() (pypath.utils.seq.pfam method)": [[1191, "pypath.utils.seq.Pfam.processor"]], "unload() (pypath.utils.seq.pfam method)": [[1191, "pypath.utils.seq.Pfam.unload"]], "resource (class in pypath.utils.seq)": [[1192, "pypath.utils.seq.Resource"]], "__init__() (pypath.utils.seq.resource method)": [[1192, "pypath.utils.seq.Resource.__init__"]], "iterdb() (pypath.utils.seq.resource method)": [[1192, "pypath.utils.seq.Resource.iterdb"]], "iterprotein() (pypath.utils.seq.resource method)": [[1192, "pypath.utils.seq.Resource.iterprotein"]], "load() (pypath.utils.seq.resource method)": [[1192, "pypath.utils.seq.Resource.load"]], "processor() (pypath.utils.seq.resource method)": [[1192, "pypath.utils.seq.Resource.processor"]], "unload() (pypath.utils.seq.resource method)": [[1192, "pypath.utils.seq.Resource.unload"]], "seq (class in pypath.utils.seq)": [[1193, "pypath.utils.seq.Seq"]], "__init__() (pypath.utils.seq.seq method)": [[1193, "pypath.utils.seq.Seq.__init__"]], "findall() (pypath.utils.seq.seq method)": [[1193, "pypath.utils.seq.Seq.findall"]], "get_isoforms() (in module pypath.utils.seq)": [[1194, "pypath.utils.seq.get_isoforms"]], "read_fasta() (in module pypath.utils.seq)": [[1195, "pypath.utils.seq.read_fasta"]], "swissprot_seq() (in module pypath.utils.seq)": [[1196, "pypath.utils.seq.swissprot_seq"]], "pypath.utils.taxonomy": [[1197, "module-pypath.utils.taxonomy"]], "ensure_common_name() (in module pypath.utils.taxonomy)": [[1198, "pypath.utils.taxonomy.ensure_common_name"]], "ensure_ensembl_name() (in module pypath.utils.taxonomy)": [[1199, "pypath.utils.taxonomy.ensure_ensembl_name"]], "ensure_latin_name() (in module pypath.utils.taxonomy)": [[1200, "pypath.utils.taxonomy.ensure_latin_name"]], "ensure_ncbi_tax_id() (in module pypath.utils.taxonomy)": [[1201, "pypath.utils.taxonomy.ensure_ncbi_tax_id"]], "get_db() (in module pypath.utils.taxonomy)": [[1202, "pypath.utils.taxonomy.get_db"]], "init_db() (in module pypath.utils.taxonomy)": [[1203, "pypath.utils.taxonomy.init_db"]], "short_latin_names() (in module pypath.utils.taxonomy)": [[1204, "pypath.utils.taxonomy.short_latin_names"]], "shorten_latin_name() (in module pypath.utils.taxonomy)": [[1205, "pypath.utils.taxonomy.shorten_latin_name"]], "taxid_from_common_name() (in module pypath.utils.taxonomy)": [[1206, "pypath.utils.taxonomy.taxid_from_common_name"]], "taxid_from_dbptm_taxon_name() (in module pypath.utils.taxonomy)": [[1207, "pypath.utils.taxonomy.taxid_from_dbptm_taxon_name"]], "taxid_from_ensembl_name() (in module pypath.utils.taxonomy)": [[1208, "pypath.utils.taxonomy.taxid_from_ensembl_name"]], "taxid_from_latin_name() (in module pypath.utils.taxonomy)": [[1209, "pypath.utils.taxonomy.taxid_from_latin_name"]], "taxid_from_nonstandard() (in module pypath.utils.taxonomy)": [[1210, "pypath.utils.taxonomy.taxid_from_nonstandard"]], "uniprot_taxid() (in module pypath.utils.taxonomy)": [[1211, "pypath.utils.taxonomy.uniprot_taxid"]], "pypath.utils.unichem": [[1212, "module-pypath.utils.unichem"]], "unichem (class in pypath.utils.unichem)": [[1213, "pypath.utils.unichem.Unichem"]], "__init__() (pypath.utils.unichem.unichem method)": [[1213, "pypath.utils.unichem.Unichem.__init__"]], "connectivity_search() (pypath.utils.unichem.unichem method)": [[1213, "pypath.utils.unichem.Unichem.connectivity_search"]], "inchikey2anything() (pypath.utils.unichem.unichem method)": [[1213, "pypath.utils.unichem.Unichem.inchikey2anything"]], "info() (pypath.utils.unichem.unichem static method)": [[1213, "pypath.utils.unichem.Unichem.info"]], "smiles2chembl() (pypath.utils.unichem.unichem method)": [[1213, "pypath.utils.unichem.Unichem.smiles2chembl"]], "translate() (pypath.utils.unichem.unichem method)": [[1213, "pypath.utils.unichem.Unichem.translate"]], "usage() (pypath.utils.unichem.unichem method)": [[1213, "pypath.utils.unichem.Unichem.usage"]], "pypath.utils.uniprot": [[1214, "module-pypath.utils.uniprot"]], "uniprotprotein (class in pypath.utils.uniprot)": [[1215, "pypath.utils.uniprot.UniprotProtein"]], "__init__() (pypath.utils.uniprot.uniprotprotein method)": [[1215, "pypath.utils.uniprot.UniprotProtein.__init__"]], "databases (pypath.utils.uniprot.uniprotprotein property)": [[1215, "pypath.utils.uniprot.UniprotProtein.databases"]], "info_section() (pypath.utils.uniprot.uniprotprotein method)": [[1215, "pypath.utils.uniprot.UniprotProtein.info_section"]], "keywords (pypath.utils.uniprot.uniprotprotein property)": [[1215, "pypath.utils.uniprot.UniprotProtein.keywords"]], "keywords_with_xrefs (pypath.utils.uniprot.uniprotprotein property)": [[1215, "pypath.utils.uniprot.UniprotProtein.keywords_with_xrefs"]], "length (pypath.utils.uniprot.uniprotprotein property)": [[1215, "pypath.utils.uniprot.UniprotProtein.length"]], "lengths (pypath.utils.uniprot.uniprotprotein property)": [[1215, "pypath.utils.uniprot.UniprotProtein.lengths"]], "sequence (pypath.utils.uniprot.uniprotprotein property)": [[1215, "pypath.utils.uniprot.UniprotProtein.sequence"]], "weight (pypath.utils.uniprot.uniprotprotein property)": [[1215, "pypath.utils.uniprot.UniprotProtein.weight"]], "weights (pypath.utils.uniprot.uniprotprotein property)": [[1215, "pypath.utils.uniprot.UniprotProtein.weights"]], "ac() (in module pypath.utils.uniprot)": [[1216, "pypath.utils.uniprot.ac"]], "activity_regulation() (in module pypath.utils.uniprot)": [[1217, "pypath.utils.uniprot.activity_regulation"]], "activity_regulation_with_xrefs() (in module pypath.utils.uniprot)": [[1218, "pypath.utils.uniprot.activity_regulation_with_xrefs"]], "alternative_products() (in module pypath.utils.uniprot)": [[1219, "pypath.utils.uniprot.alternative_products"]], "alternative_products_with_xrefs() (in module pypath.utils.uniprot)": [[1220, "pypath.utils.uniprot.alternative_products_with_xrefs"]], "browse() (in module pypath.utils.uniprot)": [[1221, "pypath.utils.uniprot.browse"]], "catalytic_activity() (in module pypath.utils.uniprot)": [[1222, "pypath.utils.uniprot.catalytic_activity"]], "catalytic_activity_with_xrefs() (in module pypath.utils.uniprot)": [[1223, "pypath.utils.uniprot.catalytic_activity_with_xrefs"]], "collect() (in module pypath.utils.uniprot)": [[1224, "pypath.utils.uniprot.collect"]], "databases() (in module pypath.utils.uniprot)": [[1225, "pypath.utils.uniprot.databases"]], "disease() (in module pypath.utils.uniprot)": [[1226, "pypath.utils.uniprot.disease"]], "disease_with_xrefs() (in module pypath.utils.uniprot)": [[1227, "pypath.utils.uniprot.disease_with_xrefs"]], "ec() (in module pypath.utils.uniprot)": [[1228, "pypath.utils.uniprot.ec"]], "features_table() (in module pypath.utils.uniprot)": [[1229, "pypath.utils.uniprot.features_table"]], "full_name() (in module pypath.utils.uniprot)": [[1230, "pypath.utils.uniprot.full_name"]], "function() (in module pypath.utils.uniprot)": [[1231, "pypath.utils.uniprot.function"]], "function_genecards() (in module pypath.utils.uniprot)": [[1232, "pypath.utils.uniprot.function_genecards"]], "function_or_genecards() (in module pypath.utils.uniprot)": [[1233, "pypath.utils.uniprot.function_or_genecards"]], "function_with_genecards() (in module pypath.utils.uniprot)": [[1234, "pypath.utils.uniprot.function_with_genecards"]], "function_with_xrefs() (in module pypath.utils.uniprot)": [[1235, "pypath.utils.uniprot.function_with_xrefs"]], "genesymbol() (in module pypath.utils.uniprot)": [[1236, "pypath.utils.uniprot.genesymbol"]], "has_tag() (in module pypath.utils.uniprot)": [[1237, "pypath.utils.uniprot.has_tag"]], "id() (in module pypath.utils.uniprot)": [[1238, "pypath.utils.uniprot.id"]], "info() (in module pypath.utils.uniprot)": [[1239, "pypath.utils.uniprot.info"]], "info_section() (in module pypath.utils.uniprot)": [[1240, "pypath.utils.uniprot.info_section"]], "interaction() (in module pypath.utils.uniprot)": [[1241, "pypath.utils.uniprot.interaction"]], "interaction_with_xrefs() (in module pypath.utils.uniprot)": [[1242, "pypath.utils.uniprot.interaction_with_xrefs"]], "is_reviewed() (in module pypath.utils.uniprot)": [[1243, "pypath.utils.uniprot.is_reviewed"]], "itertag() (in module pypath.utils.uniprot)": [[1244, "pypath.utils.uniprot.itertag"]], "keywords() (in module pypath.utils.uniprot)": [[1245, "pypath.utils.uniprot.keywords"]], "keywords_with_xrefs() (in module pypath.utils.uniprot)": [[1246, "pypath.utils.uniprot.keywords_with_xrefs"]], "length() (in module pypath.utils.uniprot)": [[1247, "pypath.utils.uniprot.length"]], "lengths() (in module pypath.utils.uniprot)": [[1248, "pypath.utils.uniprot.lengths"]], "load() (in module pypath.utils.uniprot)": [[1249, "pypath.utils.uniprot.load"]], "organism() (in module pypath.utils.uniprot)": [[1250, "pypath.utils.uniprot.organism"]], "print_features() (in module pypath.utils.uniprot)": [[1251, "pypath.utils.uniprot.print_features"]], "ptm() (in module pypath.utils.uniprot)": [[1252, "pypath.utils.uniprot.ptm"]], "ptm_with_xrefs() (in module pypath.utils.uniprot)": [[1253, "pypath.utils.uniprot.ptm_with_xrefs"]], "query() (in module pypath.utils.uniprot)": [[1254, "pypath.utils.uniprot.query"]], "reload() (in module pypath.utils.uniprot)": [[1255, "pypath.utils.uniprot.reload"]], "remove_xrefs() (in module pypath.utils.uniprot)": [[1256, "pypath.utils.uniprot.remove_xrefs"]], "sequence() (in module pypath.utils.uniprot)": [[1257, "pypath.utils.uniprot.sequence"]], "sequence_caution() (in module pypath.utils.uniprot)": [[1258, "pypath.utils.uniprot.sequence_caution"]], "sequence_caution_with_xrefs() (in module pypath.utils.uniprot)": [[1259, "pypath.utils.uniprot.sequence_caution_with_xrefs"]], "similarity() (in module pypath.utils.uniprot)": [[1260, "pypath.utils.uniprot.similarity"]], "similarity_with_xrefs() (in module pypath.utils.uniprot)": [[1261, "pypath.utils.uniprot.similarity_with_xrefs"]], "subcellular_location() (in module pypath.utils.uniprot)": [[1262, "pypath.utils.uniprot.subcellular_location"]], "subcellular_location_with_xrefs() (in module pypath.utils.uniprot)": [[1263, "pypath.utils.uniprot.subcellular_location_with_xrefs"]], "subunit() (in module pypath.utils.uniprot)": [[1264, "pypath.utils.uniprot.subunit"]], "subunit_with_xrefs() (in module pypath.utils.uniprot)": [[1265, "pypath.utils.uniprot.subunit_with_xrefs"]], "tissue_specificity() (in module pypath.utils.uniprot)": [[1266, "pypath.utils.uniprot.tissue_specificity"]], "tissue_specificity_with_xrefs() (in module pypath.utils.uniprot)": [[1267, "pypath.utils.uniprot.tissue_specificity_with_xrefs"]], "update_databases() (in module pypath.utils.uniprot)": [[1268, "pypath.utils.uniprot.update_databases"]], "update_info() (in module pypath.utils.uniprot)": [[1269, "pypath.utils.uniprot.update_info"]], "web_resource() (in module pypath.utils.uniprot)": [[1270, "pypath.utils.uniprot.web_resource"]], "web_resource_with_xrefs() (in module pypath.utils.uniprot)": [[1271, "pypath.utils.uniprot.web_resource_with_xrefs"]], "weight() (in module pypath.utils.uniprot)": [[1272, "pypath.utils.uniprot.weight"]], "weights() (in module pypath.utils.uniprot)": [[1273, "pypath.utils.uniprot.weights"]], "pypath.visual": [[1274, "module-pypath.visual"]], "pypath.visual.drawing": [[1275, "module-pypath.visual.drawing"]], "interset (class in pypath.visual.drawing)": [[1276, "pypath.visual.drawing.InterSet"]], "__init__() (pypath.visual.drawing.interset method)": [[1276, "pypath.visual.drawing.InterSet.__init__"]], "draw() (pypath.visual.drawing.interset method)": [[1276, "pypath.visual.drawing.InterSet.draw"]], "plot (class in pypath.visual.drawing)": [[1277, "pypath.visual.drawing.Plot"]], "__init__() (pypath.visual.drawing.plot method)": [[1277, "pypath.visual.drawing.Plot.__init__"]], "pypath.visual.igraph_drawing": [[1278, "module-pypath.visual.igraph_drawing"]], "abstractcairographdrawer (class in pypath.visual.igraph_drawing)": [[1279, "pypath.visual.igraph_drawing.AbstractCairoGraphDrawer"]], "__init__() (pypath.visual.igraph_drawing.abstractcairographdrawer method)": [[1279, "pypath.visual.igraph_drawing.AbstractCairoGraphDrawer.__init__"]], "arrowedgedrawer (in module pypath.visual.igraph_drawing)": [[1280, "pypath.visual.igraph_drawing.ArrowEdgeDrawer"]], "defaultgraphdrawerffsupport (class in pypath.visual.igraph_drawing)": [[1281, "pypath.visual.igraph_drawing.DefaultGraphDrawerFFsupport"]], "__init__() (pypath.visual.igraph_drawing.defaultgraphdrawerffsupport method)": [[1281, "pypath.visual.igraph_drawing.DefaultGraphDrawerFFsupport.__init__"]], "defaultvertexdrawer (in module pypath.visual.igraph_drawing)": [[1282, "pypath.visual.igraph_drawing.DefaultVertexDrawer"]], "textdrawer (in module pypath.visual.igraph_drawing)": [[1283, "pypath.visual.igraph_drawing.TextDrawer"]], "pypath.visual.igraph_drawing.edge": [[1284, "module-pypath.visual.igraph_drawing.edge"]], "abstractedgedrawer (class in pypath.visual.igraph_drawing.edge)": [[1285, "pypath.visual.igraph_drawing.edge.AbstractEdgeDrawer"]], "__init__() (pypath.visual.igraph_drawing.edge.abstractedgedrawer method)": [[1285, "pypath.visual.igraph_drawing.edge.AbstractEdgeDrawer.__init__"]], "draw_directed_edge() (pypath.visual.igraph_drawing.edge.abstractedgedrawer method)": [[1285, "pypath.visual.igraph_drawing.edge.AbstractEdgeDrawer.draw_directed_edge"]], "draw_loop_edge() (pypath.visual.igraph_drawing.edge.abstractedgedrawer method)": [[1285, "pypath.visual.igraph_drawing.edge.AbstractEdgeDrawer.draw_loop_edge"]], "draw_undirected_edge() (pypath.visual.igraph_drawing.edge.abstractedgedrawer method)": [[1285, "pypath.visual.igraph_drawing.edge.AbstractEdgeDrawer.draw_undirected_edge"]], "get_label_position() (pypath.visual.igraph_drawing.edge.abstractedgedrawer method)": [[1285, "pypath.visual.igraph_drawing.edge.AbstractEdgeDrawer.get_label_position"]], "alphavaryingedgedrawer (class in pypath.visual.igraph_drawing.edge)": [[1286, "pypath.visual.igraph_drawing.edge.AlphaVaryingEdgeDrawer"]], "__init__() (pypath.visual.igraph_drawing.edge.alphavaryingedgedrawer method)": [[1286, "pypath.visual.igraph_drawing.edge.AlphaVaryingEdgeDrawer.__init__"]], "draw_directed_edge() (pypath.visual.igraph_drawing.edge.alphavaryingedgedrawer method)": [[1286, "pypath.visual.igraph_drawing.edge.AlphaVaryingEdgeDrawer.draw_directed_edge"]], "draw_loop_edge() (pypath.visual.igraph_drawing.edge.alphavaryingedgedrawer method)": [[1286, "pypath.visual.igraph_drawing.edge.AlphaVaryingEdgeDrawer.draw_loop_edge"]], "draw_undirected_edge() (pypath.visual.igraph_drawing.edge.alphavaryingedgedrawer method)": [[1286, "pypath.visual.igraph_drawing.edge.AlphaVaryingEdgeDrawer.draw_undirected_edge"]], "get_label_position() (pypath.visual.igraph_drawing.edge.alphavaryingedgedrawer method)": [[1286, "pypath.visual.igraph_drawing.edge.AlphaVaryingEdgeDrawer.get_label_position"]], "arrowedgedrawer (class in pypath.visual.igraph_drawing.edge)": [[1287, "pypath.visual.igraph_drawing.edge.ArrowEdgeDrawer"]], "__init__() (pypath.visual.igraph_drawing.edge.arrowedgedrawer method)": [[1287, "pypath.visual.igraph_drawing.edge.ArrowEdgeDrawer.__init__"]], "draw_directed_edge() (pypath.visual.igraph_drawing.edge.arrowedgedrawer method)": [[1287, "pypath.visual.igraph_drawing.edge.ArrowEdgeDrawer.draw_directed_edge"]], "draw_loop_edge() (pypath.visual.igraph_drawing.edge.arrowedgedrawer method)": [[1287, "pypath.visual.igraph_drawing.edge.ArrowEdgeDrawer.draw_loop_edge"]], "draw_undirected_edge() (pypath.visual.igraph_drawing.edge.arrowedgedrawer method)": [[1287, "pypath.visual.igraph_drawing.edge.ArrowEdgeDrawer.draw_undirected_edge"]], "get_label_position() (pypath.visual.igraph_drawing.edge.arrowedgedrawer method)": [[1287, "pypath.visual.igraph_drawing.edge.ArrowEdgeDrawer.get_label_position"]], "darktolightedgedrawer (class in pypath.visual.igraph_drawing.edge)": [[1288, "pypath.visual.igraph_drawing.edge.DarkToLightEdgeDrawer"]], "__init__() (pypath.visual.igraph_drawing.edge.darktolightedgedrawer method)": [[1288, "pypath.visual.igraph_drawing.edge.DarkToLightEdgeDrawer.__init__"]], "draw_directed_edge() (pypath.visual.igraph_drawing.edge.darktolightedgedrawer method)": [[1288, "pypath.visual.igraph_drawing.edge.DarkToLightEdgeDrawer.draw_directed_edge"]], "draw_loop_edge() (pypath.visual.igraph_drawing.edge.darktolightedgedrawer method)": [[1288, "pypath.visual.igraph_drawing.edge.DarkToLightEdgeDrawer.draw_loop_edge"]], "draw_undirected_edge() (pypath.visual.igraph_drawing.edge.darktolightedgedrawer method)": [[1288, "pypath.visual.igraph_drawing.edge.DarkToLightEdgeDrawer.draw_undirected_edge"]], "get_label_position() (pypath.visual.igraph_drawing.edge.darktolightedgedrawer method)": [[1288, "pypath.visual.igraph_drawing.edge.DarkToLightEdgeDrawer.get_label_position"]], "lighttodarkedgedrawer (class in pypath.visual.igraph_drawing.edge)": [[1289, "pypath.visual.igraph_drawing.edge.LightToDarkEdgeDrawer"]], "__init__() (pypath.visual.igraph_drawing.edge.lighttodarkedgedrawer method)": [[1289, "pypath.visual.igraph_drawing.edge.LightToDarkEdgeDrawer.__init__"]], "draw_directed_edge() (pypath.visual.igraph_drawing.edge.lighttodarkedgedrawer method)": [[1289, "pypath.visual.igraph_drawing.edge.LightToDarkEdgeDrawer.draw_directed_edge"]], "draw_loop_edge() (pypath.visual.igraph_drawing.edge.lighttodarkedgedrawer method)": [[1289, "pypath.visual.igraph_drawing.edge.LightToDarkEdgeDrawer.draw_loop_edge"]], "draw_undirected_edge() (pypath.visual.igraph_drawing.edge.lighttodarkedgedrawer method)": [[1289, "pypath.visual.igraph_drawing.edge.LightToDarkEdgeDrawer.draw_undirected_edge"]], "get_label_position() (pypath.visual.igraph_drawing.edge.lighttodarkedgedrawer method)": [[1289, "pypath.visual.igraph_drawing.edge.LightToDarkEdgeDrawer.get_label_position"]], "taperededgedrawer (class in pypath.visual.igraph_drawing.edge)": [[1290, "pypath.visual.igraph_drawing.edge.TaperedEdgeDrawer"]], "__init__() (pypath.visual.igraph_drawing.edge.taperededgedrawer method)": [[1290, "pypath.visual.igraph_drawing.edge.TaperedEdgeDrawer.__init__"]], "draw_directed_edge() (pypath.visual.igraph_drawing.edge.taperededgedrawer method)": [[1290, "pypath.visual.igraph_drawing.edge.TaperedEdgeDrawer.draw_directed_edge"]], "draw_loop_edge() (pypath.visual.igraph_drawing.edge.taperededgedrawer method)": [[1290, "pypath.visual.igraph_drawing.edge.TaperedEdgeDrawer.draw_loop_edge"]], "draw_undirected_edge() (pypath.visual.igraph_drawing.edge.taperededgedrawer method)": [[1290, "pypath.visual.igraph_drawing.edge.TaperedEdgeDrawer.draw_undirected_edge"]], "get_label_position() (pypath.visual.igraph_drawing.edge.taperededgedrawer method)": [[1290, "pypath.visual.igraph_drawing.edge.TaperedEdgeDrawer.get_label_position"]], "pypath.visual.igraph_drawing.vertex": [[1291, "module-pypath.visual.igraph_drawing.vertex"]], "abstractcairodrawer (class in pypath.visual.igraph_drawing.vertex)": [[1292, "pypath.visual.igraph_drawing.vertex.AbstractCairoDrawer"]], "__init__() (pypath.visual.igraph_drawing.vertex.abstractcairodrawer method)": [[1292, "pypath.visual.igraph_drawing.vertex.AbstractCairoDrawer.__init__"]], "abstractcairovertexdrawer (class in pypath.visual.igraph_drawing.vertex)": [[1293, "pypath.visual.igraph_drawing.vertex.AbstractCairoVertexDrawer"]], "__init__() (pypath.visual.igraph_drawing.vertex.abstractcairovertexdrawer method)": [[1293, "pypath.visual.igraph_drawing.vertex.AbstractCairoVertexDrawer.__init__"]], "draw() (pypath.visual.igraph_drawing.vertex.abstractcairovertexdrawer method)": [[1293, "pypath.visual.igraph_drawing.vertex.AbstractCairoVertexDrawer.draw"]], "abstractdrawer (class in pypath.visual.igraph_drawing.vertex)": [[1294, "pypath.visual.igraph_drawing.vertex.AbstractDrawer"]], "__init__() (pypath.visual.igraph_drawing.vertex.abstractdrawer method)": [[1294, "pypath.visual.igraph_drawing.vertex.AbstractDrawer.__init__"]], "abstractvertexdrawer (class in pypath.visual.igraph_drawing.vertex)": [[1295, "pypath.visual.igraph_drawing.vertex.AbstractVertexDrawer"]], "__init__() (pypath.visual.igraph_drawing.vertex.abstractvertexdrawer method)": [[1295, "pypath.visual.igraph_drawing.vertex.AbstractVertexDrawer.__init__"]], "draw() (pypath.visual.igraph_drawing.vertex.abstractvertexdrawer method)": [[1295, "pypath.visual.igraph_drawing.vertex.AbstractVertexDrawer.draw"]], "defaultvertexdrawer (class in pypath.visual.igraph_drawing.vertex)": [[1296, "pypath.visual.igraph_drawing.vertex.DefaultVertexDrawer"]], "__init__() (pypath.visual.igraph_drawing.vertex.defaultvertexdrawer method)": [[1296, "pypath.visual.igraph_drawing.vertex.DefaultVertexDrawer.__init__"]], "draw() (pypath.visual.igraph_drawing.vertex.defaultvertexdrawer method)": [[1296, "pypath.visual.igraph_drawing.vertex.DefaultVertexDrawer.draw"]], "pypath.visual.plot": [[1297, "module-pypath.visual.plot"]], "barplot (class in pypath.visual.plot)": [[1298, "pypath.visual.plot.Barplot"]], "__init__() (pypath.visual.plot.barplot method)": [[1298, "pypath.visual.plot.Barplot.__init__"]], "finish() (pypath.visual.plot.barplot method)": [[1298, "pypath.visual.plot.Barplot.finish"]], "barplotsgrid (class in pypath.visual.plot)": [[1299, "pypath.visual.plot.BarplotsGrid"]], "__init__() (pypath.visual.plot.barplotsgrid method)": [[1299, "pypath.visual.plot.BarplotsGrid.__init__"]], "finish() (pypath.visual.plot.barplotsgrid method)": [[1299, "pypath.visual.plot.BarplotsGrid.finish"]], "init_fig() (pypath.visual.plot.barplotsgrid method)": [[1299, "pypath.visual.plot.BarplotsGrid.init_fig"]], "set_figsize() (pypath.visual.plot.barplotsgrid method)": [[1299, "pypath.visual.plot.BarplotsGrid.set_figsize"]], "set_grid() (pypath.visual.plot.barplotsgrid method)": [[1299, "pypath.visual.plot.BarplotsGrid.set_grid"]], "set_title() (pypath.visual.plot.barplotsgrid method)": [[1299, "pypath.visual.plot.BarplotsGrid.set_title"]], "curationplot (class in pypath.visual.plot)": [[1300, "pypath.visual.plot.CurationPlot"]], "__init__() (pypath.visual.plot.curationplot method)": [[1300, "pypath.visual.plot.CurationPlot.__init__"]], "finish() (pypath.visual.plot.curationplot method)": [[1300, "pypath.visual.plot.CurationPlot.finish"]], "init_fig() (pypath.visual.plot.curationplot method)": [[1300, "pypath.visual.plot.CurationPlot.init_fig"]], "set_figsize() (pypath.visual.plot.curationplot method)": [[1300, "pypath.visual.plot.CurationPlot.set_figsize"]], "dendrogram (class in pypath.visual.plot)": [[1301, "pypath.visual.plot.Dendrogram"]], "__init__() (pypath.visual.plot.dendrogram method)": [[1301, "pypath.visual.plot.Dendrogram.__init__"]], "finish() (pypath.visual.plot.dendrogram method)": [[1301, "pypath.visual.plot.Dendrogram.finish"]], "init_fig() (pypath.visual.plot.dendrogram method)": [[1301, "pypath.visual.plot.Dendrogram.init_fig"]], "set_figsize() (pypath.visual.plot.dendrogram method)": [[1301, "pypath.visual.plot.Dendrogram.set_figsize"]], "histogram (class in pypath.visual.plot)": [[1302, "pypath.visual.plot.Histogram"]], "__init__() (pypath.visual.plot.histogram method)": [[1302, "pypath.visual.plot.Histogram.__init__"]], "finish() (pypath.visual.plot.histogram method)": [[1302, "pypath.visual.plot.Histogram.finish"]], "historytree (class in pypath.visual.plot)": [[1303, "pypath.visual.plot.HistoryTree"]], "__init__() (pypath.visual.plot.historytree method)": [[1303, "pypath.visual.plot.HistoryTree.__init__"]], "run_latex() (pypath.visual.plot.historytree method)": [[1303, "pypath.visual.plot.HistoryTree.run_latex"]], "write_tex() (pypath.visual.plot.historytree method)": [[1303, "pypath.visual.plot.HistoryTree.write_tex"]], "htpcharacteristics (class in pypath.visual.plot)": [[1304, "pypath.visual.plot.HtpCharacteristics"]], "__init__() (pypath.visual.plot.htpcharacteristics method)": [[1304, "pypath.visual.plot.HtpCharacteristics.__init__"]], "finish() (pypath.visual.plot.htpcharacteristics method)": [[1304, "pypath.visual.plot.HtpCharacteristics.finish"]], "init_fig() (pypath.visual.plot.htpcharacteristics method)": [[1304, "pypath.visual.plot.HtpCharacteristics.init_fig"]], "set_figsize() (pypath.visual.plot.htpcharacteristics method)": [[1304, "pypath.visual.plot.HtpCharacteristics.set_figsize"]], "set_grid() (pypath.visual.plot.htpcharacteristics method)": [[1304, "pypath.visual.plot.HtpCharacteristics.set_grid"]], "set_title() (pypath.visual.plot.htpcharacteristics method)": [[1304, "pypath.visual.plot.HtpCharacteristics.set_title"]], "multibarplot (class in pypath.visual.plot)": [[1305, "pypath.visual.plot.MultiBarplot"]], "__init__() (pypath.visual.plot.multibarplot method)": [[1305, "pypath.visual.plot.MultiBarplot.__init__"]], "by_plot() (pypath.visual.plot.multibarplot method)": [[1305, "pypath.visual.plot.MultiBarplot.by_plot"]], "do_plot() (pypath.visual.plot.multibarplot method)": [[1305, "pypath.visual.plot.MultiBarplot.do_plot"]], "finish() (pypath.visual.plot.multibarplot method)": [[1305, "pypath.visual.plot.MultiBarplot.finish"]], "init_fig() (pypath.visual.plot.multibarplot method)": [[1305, "pypath.visual.plot.MultiBarplot.init_fig"]], "labels() (pypath.visual.plot.multibarplot method)": [[1305, "pypath.visual.plot.MultiBarplot.labels"]], "make_plots() (pypath.visual.plot.multibarplot method)": [[1305, "pypath.visual.plot.MultiBarplot.make_plots"]], "plot() (pypath.visual.plot.multibarplot method)": [[1305, "pypath.visual.plot.MultiBarplot.plot"]], "plots_order() (pypath.visual.plot.multibarplot method)": [[1305, "pypath.visual.plot.MultiBarplot.plots_order"]], "post_plot() (pypath.visual.plot.multibarplot method)": [[1305, "pypath.visual.plot.MultiBarplot.post_plot"]], "pre_plot() (pypath.visual.plot.multibarplot method)": [[1305, "pypath.visual.plot.MultiBarplot.pre_plot"]], "reload() (pypath.visual.plot.multibarplot method)": [[1305, "pypath.visual.plot.MultiBarplot.reload"]], "set_categories() (pypath.visual.plot.multibarplot method)": [[1305, "pypath.visual.plot.MultiBarplot.set_categories"]], "set_colors() (pypath.visual.plot.multibarplot method)": [[1305, "pypath.visual.plot.MultiBarplot.set_colors"]], "set_figsize() (pypath.visual.plot.multibarplot method)": [[1305, "pypath.visual.plot.MultiBarplot.set_figsize"]], "set_grid() (pypath.visual.plot.multibarplot method)": [[1305, "pypath.visual.plot.MultiBarplot.set_grid"]], "set_title() (pypath.visual.plot.multibarplot method)": [[1305, "pypath.visual.plot.MultiBarplot.set_title"]], "sort() (pypath.visual.plot.multibarplot method)": [[1305, "pypath.visual.plot.MultiBarplot.sort"]], "plot (class in pypath.visual.plot)": [[1306, "pypath.visual.plot.Plot"]], "__init__() (pypath.visual.plot.plot method)": [[1306, "pypath.visual.plot.Plot.__init__"]], "finish() (pypath.visual.plot.plot method)": [[1306, "pypath.visual.plot.Plot.finish"]], "refscomposite (class in pypath.visual.plot)": [[1307, "pypath.visual.plot.RefsComposite"]], "__init__() (pypath.visual.plot.refscomposite method)": [[1307, "pypath.visual.plot.RefsComposite.__init__"]], "finish() (pypath.visual.plot.refscomposite method)": [[1307, "pypath.visual.plot.RefsComposite.finish"]], "init_fig() (pypath.visual.plot.refscomposite method)": [[1307, "pypath.visual.plot.RefsComposite.init_fig"]], "set_figsize() (pypath.visual.plot.refscomposite method)": [[1307, "pypath.visual.plot.RefsComposite.set_figsize"]], "set_grid() (pypath.visual.plot.refscomposite method)": [[1307, "pypath.visual.plot.RefsComposite.set_grid"]], "set_title() (pypath.visual.plot.refscomposite method)": [[1307, "pypath.visual.plot.RefsComposite.set_title"]], "scatterplus (class in pypath.visual.plot)": [[1308, "pypath.visual.plot.ScatterPlus"]], "__init__() (pypath.visual.plot.scatterplus method)": [[1308, "pypath.visual.plot.ScatterPlus.__init__"]], "finish() (pypath.visual.plot.scatterplus method)": [[1308, "pypath.visual.plot.ScatterPlus.finish"]], "init_fig() (pypath.visual.plot.scatterplus method)": [[1308, "pypath.visual.plot.ScatterPlus.init_fig"]], "reload() (pypath.visual.plot.scatterplus method)": [[1308, "pypath.visual.plot.ScatterPlus.reload"]], "set_figsize() (pypath.visual.plot.scatterplus method)": [[1308, "pypath.visual.plot.ScatterPlus.set_figsize"]], "set_title() (pypath.visual.plot.scatterplus method)": [[1308, "pypath.visual.plot.ScatterPlus.set_title"]], "values_to_sizes() (pypath.visual.plot.scatterplus method)": [[1308, "pypath.visual.plot.ScatterPlus.values_to_sizes"]], "similaritygraph (class in pypath.visual.plot)": [[1309, "pypath.visual.plot.SimilarityGraph"]], "__init__() (pypath.visual.plot.similaritygraph method)": [[1309, "pypath.visual.plot.SimilarityGraph.__init__"]], "sizes_edge() (pypath.visual.plot.similaritygraph method)": [[1309, "pypath.visual.plot.SimilarityGraph.sizes_edge"]], "stackedbarplot (class in pypath.visual.plot)": [[1310, "pypath.visual.plot.StackedBarplot"]], "__init__() (pypath.visual.plot.stackedbarplot method)": [[1310, "pypath.visual.plot.StackedBarplot.__init__"]], "finish() (pypath.visual.plot.stackedbarplot method)": [[1310, "pypath.visual.plot.StackedBarplot.finish"]], "init_fig() (pypath.visual.plot.stackedbarplot method)": [[1310, "pypath.visual.plot.StackedBarplot.init_fig"]], "plot() (pypath.visual.plot.stackedbarplot method)": [[1310, "pypath.visual.plot.StackedBarplot.plot"]], "reload() (pypath.visual.plot.stackedbarplot method)": [[1310, "pypath.visual.plot.StackedBarplot.reload"]], "set_figsize() (pypath.visual.plot.stackedbarplot method)": [[1310, "pypath.visual.plot.StackedBarplot.set_figsize"]], "set_title() (pypath.visual.plot.stackedbarplot method)": [[1310, "pypath.visual.plot.StackedBarplot.set_title"]], "boxplot() (in module pypath.visual.plot)": [[1311, "pypath.visual.plot.boxplot"]], "get_moves() (in module pypath.visual.plot)": [[1312, "pypath.visual.plot.get_moves"]], "is_opentype_cff_font() (in module pypath.visual.plot)": [[1313, "pypath.visual.plot.is_opentype_cff_font"]], "move_labels() (in module pypath.visual.plot)": [[1314, "pypath.visual.plot.move_labels"]], "overlap() (in module pypath.visual.plot)": [[1315, "pypath.visual.plot.overlap"]], "rotate_labels() (in module pypath.visual.plot)": [[1316, "pypath.visual.plot.rotate_labels"]]}})