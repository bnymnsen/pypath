Search.setIndex({"docnames": ["_autosummary/pypath", "_autosummary/pypath.core", "_autosummary/pypath.core.annot", "_autosummary/pypath.core.annot.Adhesome", "_autosummary/pypath.core.annot.Almen2009", "_autosummary/pypath.core.annot.AnnotationBase", "_autosummary/pypath.core.annot.AnnotationTable", "_autosummary/pypath.core.annot.Baccin2019", "_autosummary/pypath.core.annot.Biogps", "_autosummary/pypath.core.annot.CancerGeneCensus", "_autosummary/pypath.core.annot.Cancerdrugsdb", "_autosummary/pypath.core.annot.Cancersea", "_autosummary/pypath.core.annot.CellPhoneDB", "_autosummary/pypath.core.annot.CellPhoneDBComplex", "_autosummary/pypath.core.annot.CellSurfaceProteinAtlas", "_autosummary/pypath.core.annot.CellSurfaceProteinAtlasCellType", "_autosummary/pypath.core.annot.Cellcall", "_autosummary/pypath.core.annot.Cellcellinteractions", "_autosummary/pypath.core.annot.Cellchatdb", "_autosummary/pypath.core.annot.CellchatdbComplex", "_autosummary/pypath.core.annot.Cellinker", "_autosummary/pypath.core.annot.CellinkerComplex", "_autosummary/pypath.core.annot.Celltalkdb", "_autosummary/pypath.core.annot.Celltypist", "_autosummary/pypath.core.annot.Comppi", "_autosummary/pypath.core.annot.Connectomedb", "_autosummary/pypath.core.annot.Corum", "_autosummary/pypath.core.annot.CorumFuncat", "_autosummary/pypath.core.annot.CorumGO", "_autosummary/pypath.core.annot.Cpad", "_autosummary/pypath.core.annot.CustomAnnotation", "_autosummary/pypath.core.annot.Cytosig", "_autosummary/pypath.core.annot.Dgidb", "_autosummary/pypath.core.annot.Disgenet", "_autosummary/pypath.core.annot.Embrace", "_autosummary/pypath.core.annot.Exocarta", "_autosummary/pypath.core.annot.GOCustomIntercell", "_autosummary/pypath.core.annot.GOIntercell", "_autosummary/pypath.core.annot.Gpcrdb", "_autosummary/pypath.core.annot.GuideToPharmacology", "_autosummary/pypath.core.annot.HPO", "_autosummary/pypath.core.annot.Hgnc", "_autosummary/pypath.core.annot.HpmrComplex", "_autosummary/pypath.core.annot.HumanPlasmaMembraneReceptome", "_autosummary/pypath.core.annot.HumanProteinAtlas", "_autosummary/pypath.core.annot.HumanProteinAtlasSecretome", "_autosummary/pypath.core.annot.HumanProteinAtlasSubcellular", "_autosummary/pypath.core.annot.Humancellmap", "_autosummary/pypath.core.annot.Icellnet", "_autosummary/pypath.core.annot.IcellnetComplex", "_autosummary/pypath.core.annot.Integrins", "_autosummary/pypath.core.annot.InterPro", "_autosummary/pypath.core.annot.Intogen", "_autosummary/pypath.core.annot.Italk", "_autosummary/pypath.core.annot.KeggPathways", "_autosummary/pypath.core.annot.KeggPathwaysPC", "_autosummary/pypath.core.annot.Kinasedotcom", "_autosummary/pypath.core.annot.Kirouac2010", "_autosummary/pypath.core.annot.Lambert2018", "_autosummary/pypath.core.annot.LigandReceptor", "_autosummary/pypath.core.annot.Locate", "_autosummary/pypath.core.annot.Lrdb", "_autosummary/pypath.core.annot.Matrisome", "_autosummary/pypath.core.annot.Matrixdb", "_autosummary/pypath.core.annot.Mcam", "_autosummary/pypath.core.annot.Membranome", "_autosummary/pypath.core.annot.Msigdb", "_autosummary/pypath.core.annot.NetpathPathways", "_autosummary/pypath.core.annot.Opm", "_autosummary/pypath.core.annot.Panglaodb", "_autosummary/pypath.core.annot.Phobius", "_autosummary/pypath.core.annot.Phosphatome", "_autosummary/pypath.core.annot.Progeny", "_autosummary/pypath.core.annot.Ramilowski2015", "_autosummary/pypath.core.annot.Ramilowski2015Location", "_autosummary/pypath.core.annot.Scconnect", "_autosummary/pypath.core.annot.ScconnectComplex", "_autosummary/pypath.core.annot.SignalinkFunctions", "_autosummary/pypath.core.annot.SignalinkPathways", "_autosummary/pypath.core.annot.SignorPathways", "_autosummary/pypath.core.annot.Surfaceome", "_autosummary/pypath.core.annot.Talklr", "_autosummary/pypath.core.annot.Tcdb", "_autosummary/pypath.core.annot.Tfcensus", "_autosummary/pypath.core.annot.Topdb", "_autosummary/pypath.core.annot.UniprotFamilies", "_autosummary/pypath.core.annot.UniprotKeywords", "_autosummary/pypath.core.annot.UniprotLocations", "_autosummary/pypath.core.annot.UniprotTissues", "_autosummary/pypath.core.annot.UniprotTopologies", "_autosummary/pypath.core.annot.Vesiclepedia", "_autosummary/pypath.core.annot.Wang", "_autosummary/pypath.core.annot.Zhong2015", "_autosummary/pypath.core.annot.get_db", "_autosummary/pypath.core.annot.init_db", "_autosummary/pypath.core.attrs", "_autosummary/pypath.core.attrs.AttributeHandler", "_autosummary/pypath.core.common", "_autosummary/pypath.core.common.filter_network_df", "_autosummary/pypath.core.complex", "_autosummary/pypath.core.complex.AbstractComplexResource", "_autosummary/pypath.core.complex.CellPhoneDB", "_autosummary/pypath.core.complex.Cellchatdb", "_autosummary/pypath.core.complex.Cellinker", "_autosummary/pypath.core.complex.Compleat", "_autosummary/pypath.core.complex.ComplexAggregator", "_autosummary/pypath.core.complex.ComplexPortal", "_autosummary/pypath.core.complex.Corum", "_autosummary/pypath.core.complex.GuideToPharmacology", "_autosummary/pypath.core.complex.Havugimana", "_autosummary/pypath.core.complex.Hpmr", "_autosummary/pypath.core.complex.Humap", "_autosummary/pypath.core.complex.Humap2", "_autosummary/pypath.core.complex.Icellnet", "_autosummary/pypath.core.complex.Kegg", "_autosummary/pypath.core.complex.Pdb", "_autosummary/pypath.core.complex.Signor", "_autosummary/pypath.core.complex.Spike", "_autosummary/pypath.core.complex.all_complexes", "_autosummary/pypath.core.complex.get_db", "_autosummary/pypath.core.complex.init_db", "_autosummary/pypath.core.entity", "_autosummary/pypath.core.entity.Entity", "_autosummary/pypath.core.entity.EntityKey", "_autosummary/pypath.core.entity.EntityList", "_autosummary/pypath.core.enz_sub", "_autosummary/pypath.core.enz_sub.EnzymeSubstrateAggregator", "_autosummary/pypath.core.enz_sub.EnzymeSubstrateHomologyProcessor", "_autosummary/pypath.core.enz_sub.EnzymeSubstrateProcessor", "_autosummary/pypath.core.enz_sub.get_db", "_autosummary/pypath.core.enz_sub.init_db", "_autosummary/pypath.core.evidence", "_autosummary/pypath.core.evidence.Evidence", "_autosummary/pypath.core.evidence.Evidences", "_autosummary/pypath.core.interaction", "_autosummary/pypath.core.interaction.Interaction", "_autosummary/pypath.core.interaction.InteractionDataFrameRecord", "_autosummary/pypath.core.interaction.InteractionKey", "_autosummary/pypath.core.intercell", "_autosummary/pypath.core.intercell.IntercellAnnotation", "_autosummary/pypath.core.intercell.get_db", "_autosummary/pypath.core.intercell.init_db", "_autosummary/pypath.core.intercell_annot", "_autosummary/pypath.core.intercell_annot.excludes", "_autosummary/pypath.core.network", "_autosummary/pypath.core.network.Network", "_autosummary/pypath.core.network.NetworkEntityCollection", "_autosummary/pypath.core.network.NetworkStatsRecord", "_autosummary/pypath.core.network.get_db", "_autosummary/pypath.core.network.init_db", "_autosummary/pypath.data", "_autosummary/pypath.disclaimer", "_autosummary/pypath.info", "_autosummary/pypath.inputs", "_autosummary/pypath.inputs.abs", "_autosummary/pypath.inputs.abs.abs_interactions", "_autosummary/pypath.inputs.acsn", "_autosummary/pypath.inputs.acsn.acsn_interactions", "_autosummary/pypath.inputs.acsn.acsn_interactions_sif", "_autosummary/pypath.inputs.adhesome", "_autosummary/pypath.inputs.adhesome.adhesome_annotations", "_autosummary/pypath.inputs.adhesome.adhesome_interactions", "_autosummary/pypath.inputs.almen2009", "_autosummary/pypath.inputs.almen2009.almen2009_annotations", "_autosummary/pypath.inputs.baccin2019", "_autosummary/pypath.inputs.baccin2019.baccin2019_annotations", "_autosummary/pypath.inputs.baccin2019.baccin2019_interactions", "_autosummary/pypath.inputs.biogps", "_autosummary/pypath.inputs.biogps.BiogpsDataset", "_autosummary/pypath.inputs.biogps.biogps_annotations", "_autosummary/pypath.inputs.biogps.biogps_datasets", "_autosummary/pypath.inputs.biogps.biogps_download", "_autosummary/pypath.inputs.biogps.biogps_download_all", "_autosummary/pypath.inputs.biogrid", "_autosummary/pypath.inputs.biogrid.biogrid_all_interactions", "_autosummary/pypath.inputs.biogrid.biogrid_interactions", "_autosummary/pypath.inputs.biomart", "_autosummary/pypath.inputs.biomart.biomart_homology", "_autosummary/pypath.inputs.biomart.biomart_microarray", "_autosummary/pypath.inputs.biomart.biomart_microarray_types", "_autosummary/pypath.inputs.biomart.biomart_microarrays", "_autosummary/pypath.inputs.biomart.biomart_query", "_autosummary/pypath.inputs.ca1", "_autosummary/pypath.inputs.ca1.ca1_interactions", "_autosummary/pypath.inputs.cancercellmap", "_autosummary/pypath.inputs.cancercellmap.ccmap_interactions", "_autosummary/pypath.inputs.cancerdrugsdb", "_autosummary/pypath.inputs.cancerdrugsdb.cancerdrugsdb_annotations", "_autosummary/pypath.inputs.cancerdrugsdb.cancerdrugsdb_download", "_autosummary/pypath.inputs.cancerdrugsdb.cancerdrugsdb_interactions", "_autosummary/pypath.inputs.cancersea", "_autosummary/pypath.inputs.cancersea.cancersea_annotations", "_autosummary/pypath.inputs.cell", "_autosummary/pypath.inputs.cell.cell_supplementary", "_autosummary/pypath.inputs.cellcall", "_autosummary/pypath.inputs.cellcall.cellcall_annotations", "_autosummary/pypath.inputs.cellcall.cellcall_download", "_autosummary/pypath.inputs.cellcall.cellcall_download_all", "_autosummary/pypath.inputs.cellcall.cellcall_interactions", "_autosummary/pypath.inputs.cellcellinteractions", "_autosummary/pypath.inputs.cellcellinteractions.cellcellinteractions_annotations", "_autosummary/pypath.inputs.cellchatdb", "_autosummary/pypath.inputs.cellchatdb.cellchatdb_annotations", "_autosummary/pypath.inputs.cellchatdb.cellchatdb_cofactors", "_autosummary/pypath.inputs.cellchatdb.cellchatdb_complexes", "_autosummary/pypath.inputs.cellchatdb.cellchatdb_download", "_autosummary/pypath.inputs.cellchatdb.cellchatdb_interactions", "_autosummary/pypath.inputs.cellinker", "_autosummary/pypath.inputs.cellinker.CellinkerInteraction", "_autosummary/pypath.inputs.cellinker.cellinker_annotations", "_autosummary/pypath.inputs.cellinker.cellinker_complex_annotations", "_autosummary/pypath.inputs.cellinker.cellinker_complexes", "_autosummary/pypath.inputs.cellinker.cellinker_complexes_raw", "_autosummary/pypath.inputs.cellinker.cellinker_lr_interactions", "_autosummary/pypath.inputs.cellinker.cellinker_lr_interactions_raw", "_autosummary/pypath.inputs.cellinker.cellinker_protein_annotations", "_autosummary/pypath.inputs.cellinker.cellinker_smol_interactions", "_autosummary/pypath.inputs.cellinker.cellinker_smol_interactions_raw", "_autosummary/pypath.inputs.cellinker.components_to_complex", "_autosummary/pypath.inputs.cellphonedb", "_autosummary/pypath.inputs.cellphonedb.CellPhoneDBAnnotation", "_autosummary/pypath.inputs.cellphonedb.cellphonedb_complex_annotations", "_autosummary/pypath.inputs.cellphonedb.cellphonedb_complexes", "_autosummary/pypath.inputs.cellphonedb.cellphonedb_interactions", "_autosummary/pypath.inputs.cellphonedb.cellphonedb_ligands_receptors", "_autosummary/pypath.inputs.cellphonedb.cellphonedb_protein_annotations", "_autosummary/pypath.inputs.celltalkdb", "_autosummary/pypath.inputs.celltalkdb.celltalkdb_annotations", "_autosummary/pypath.inputs.celltalkdb.celltalkdb_download", "_autosummary/pypath.inputs.celltalkdb.celltalkdb_interactions", "_autosummary/pypath.inputs.celltypist", "_autosummary/pypath.inputs.celltypist.celltypist_annotations", "_autosummary/pypath.inputs.chembl", "_autosummary/pypath.inputs.chembl.chembl_activities", "_autosummary/pypath.inputs.chembl.chembl_assays", "_autosummary/pypath.inputs.chembl.chembl_molecules", "_autosummary/pypath.inputs.chembl.chembl_targets", "_autosummary/pypath.inputs.common", "_autosummary/pypath.inputs.common.csv_sep_change", "_autosummary/pypath.inputs.common.glom_fields", "_autosummary/pypath.inputs.common.json_extract", "_autosummary/pypath.inputs.common.json_read", "_autosummary/pypath.inputs.common.read_table", "_autosummary/pypath.inputs.common.read_xls", "_autosummary/pypath.inputs.compleat", "_autosummary/pypath.inputs.compleat.compleat_complexes", "_autosummary/pypath.inputs.compleat.compleat_raw", "_autosummary/pypath.inputs.complexportal", "_autosummary/pypath.inputs.complexportal.complexportal_complexes", "_autosummary/pypath.inputs.comppi", "_autosummary/pypath.inputs.comppi.comppi_interaction_locations", "_autosummary/pypath.inputs.comppi.comppi_locations", "_autosummary/pypath.inputs.connectomedb", "_autosummary/pypath.inputs.connectomedb.connectomedb_annotations", "_autosummary/pypath.inputs.connectomedb.connectomedb_interactions", "_autosummary/pypath.inputs.corum", "_autosummary/pypath.inputs.corum.corum_complexes", "_autosummary/pypath.inputs.cosmic", "_autosummary/pypath.inputs.cosmic.cancer_gene_census_annotations", "_autosummary/pypath.inputs.cpad", "_autosummary/pypath.inputs.cpad.cpad_annotations", "_autosummary/pypath.inputs.cpad.cpad_pathway_cancer", "_autosummary/pypath.inputs.cpad.get_cpad", "_autosummary/pypath.inputs.cpdb", "_autosummary/pypath.inputs.cpdb.cpdb_interactions", "_autosummary/pypath.inputs.cpdb.cpdb_interactions_ltp", "_autosummary/pypath.inputs.credentials", "_autosummary/pypath.inputs.credentials.credentials", "_autosummary/pypath.inputs.csa", "_autosummary/pypath.inputs.csa.get_csa", "_autosummary/pypath.inputs.cspa", "_autosummary/pypath.inputs.cspa.cspa_annotations", "_autosummary/pypath.inputs.cspa.cspa_cell_type_annotations", "_autosummary/pypath.inputs.cspa.cspa_cell_types", "_autosummary/pypath.inputs.cytosig", "_autosummary/pypath.inputs.cytosig.cytosig_annotations", "_autosummary/pypath.inputs.cytosig.cytosig_df", "_autosummary/pypath.inputs.dbptm", "_autosummary/pypath.inputs.dbptm.dbptm_enzyme_substrate", "_autosummary/pypath.inputs.dbptm.dbptm_enzyme_substrate_old", "_autosummary/pypath.inputs.dbptm.dbptm_interactions", "_autosummary/pypath.inputs.deathdomain", "_autosummary/pypath.inputs.deathdomain.deathdomain_interactions", "_autosummary/pypath.inputs.deathdomain.deathdomain_interactions_rescued", "_autosummary/pypath.inputs.depod", "_autosummary/pypath.inputs.depod.depod_enzyme_substrate", "_autosummary/pypath.inputs.depod.depod_interactions", "_autosummary/pypath.inputs.dgidb", "_autosummary/pypath.inputs.dgidb.dgidb_annotations", "_autosummary/pypath.inputs.dgidb.get_dgidb_old", "_autosummary/pypath.inputs.dip", "_autosummary/pypath.inputs.dip.dip_interactions", "_autosummary/pypath.inputs.dip.dip_login", "_autosummary/pypath.inputs.disgenet", "_autosummary/pypath.inputs.disgenet.disgenet_annotations", "_autosummary/pypath.inputs.domino", "_autosummary/pypath.inputs.domino.domino_ddi", "_autosummary/pypath.inputs.domino.domino_enzsub", "_autosummary/pypath.inputs.domino.domino_interactions", "_autosummary/pypath.inputs.domino.get_domino", "_autosummary/pypath.inputs.dorothea", "_autosummary/pypath.inputs.dorothea.DorotheaInteraction", "_autosummary/pypath.inputs.dorothea.dorothea_full_raw", "_autosummary/pypath.inputs.dorothea.dorothea_interactions", "_autosummary/pypath.inputs.dorothea.dorothea_interactions_old", "_autosummary/pypath.inputs.dorothea.dorothea_old_csv", "_autosummary/pypath.inputs.dorothea.dorothea_rda_raw", "_autosummary/pypath.inputs.dorothea.get_dorothea_old", "_autosummary/pypath.inputs.dorothea.get_tfregulons", "_autosummary/pypath.inputs.dorothea.tfregulons_interactions", "_autosummary/pypath.inputs.dorothea.tfregulons_interactions_old", "_autosummary/pypath.inputs.drugbank", "_autosummary/pypath.inputs.drugbank.drugbank_annotations", "_autosummary/pypath.inputs.drugbank.drugbank_drugs", "_autosummary/pypath.inputs.drugbank.drugbank_interactions", "_autosummary/pypath.inputs.drugbank.drugbank_mapping", "_autosummary/pypath.inputs.drugbank.drugbank_raw_interactions", "_autosummary/pypath.inputs.drugcentral", "_autosummary/pypath.inputs.drugcentral.drugcentral_drugs", "_autosummary/pypath.inputs.drugcentral.drugcentral_interactions", "_autosummary/pypath.inputs.drugcentral.drugcentral_mapping", "_autosummary/pypath.inputs.ebi", "_autosummary/pypath.inputs.ebi.ebi_rest", "_autosummary/pypath.inputs.elm", "_autosummary/pypath.inputs.elm.elm_classes", "_autosummary/pypath.inputs.elm.elm_domains", "_autosummary/pypath.inputs.elm.elm_instances", "_autosummary/pypath.inputs.elm.elm_interactions", "_autosummary/pypath.inputs.embopress", "_autosummary/pypath.inputs.embopress.embopress_supplementary", "_autosummary/pypath.inputs.embrace", "_autosummary/pypath.inputs.embrace.embrace_annotations", "_autosummary/pypath.inputs.embrace.embrace_interactions", "_autosummary/pypath.inputs.embrace.embrace_raw", "_autosummary/pypath.inputs.embrace.embrace_translated", "_autosummary/pypath.inputs.encode", "_autosummary/pypath.inputs.encode.encode_tf_mirna_interactions", "_autosummary/pypath.inputs.ensembl", "_autosummary/pypath.inputs.ensembl.ensembl_organisms", "_autosummary/pypath.inputs.exocarta", "_autosummary/pypath.inputs.exocarta.get_exocarta", "_autosummary/pypath.inputs.exocarta.get_vesiclepedia", "_autosummary/pypath.inputs.genecards", "_autosummary/pypath.inputs.genecards.genecards_datasheet", "_autosummary/pypath.inputs.genecards.genecards_soup", "_autosummary/pypath.inputs.genecards.genecards_summaries", "_autosummary/pypath.inputs.get_method", "_autosummary/pypath.inputs.go", "_autosummary/pypath.inputs.go.get_go_desc", "_autosummary/pypath.inputs.go.get_go_quick", "_autosummary/pypath.inputs.go.get_goslim", "_autosummary/pypath.inputs.go.go_ancestors", "_autosummary/pypath.inputs.go.go_ancestors_goose", "_autosummary/pypath.inputs.go.go_ancestors_quickgo", "_autosummary/pypath.inputs.go.go_annotations", "_autosummary/pypath.inputs.go.go_annotations_goa", "_autosummary/pypath.inputs.go.go_annotations_goose", "_autosummary/pypath.inputs.go.go_annotations_quickgo", "_autosummary/pypath.inputs.go.go_annotations_solr", "_autosummary/pypath.inputs.go.go_annotations_uniprot", "_autosummary/pypath.inputs.go.go_descendants", "_autosummary/pypath.inputs.go.go_descendants_goose", "_autosummary/pypath.inputs.go.go_descendants_quickgo", "_autosummary/pypath.inputs.go.go_descendants_to_ancestors", "_autosummary/pypath.inputs.go.go_terms", "_autosummary/pypath.inputs.go.go_terms_goose", "_autosummary/pypath.inputs.go.go_terms_quickgo", "_autosummary/pypath.inputs.go.go_terms_solr", "_autosummary/pypath.inputs.gpcrdb", "_autosummary/pypath.inputs.gpcrdb.gpcrdb_annotations", "_autosummary/pypath.inputs.graphviz", "_autosummary/pypath.inputs.graphviz.graphviz_attrs", "_autosummary/pypath.inputs.guide2pharma", "_autosummary/pypath.inputs.guide2pharma.guide2pharma_complexes", "_autosummary/pypath.inputs.guide2pharma.guide2pharma_download", "_autosummary/pypath.inputs.guide2pharma.guide2pharma_interactions", "_autosummary/pypath.inputs.havugimana", "_autosummary/pypath.inputs.havugimana.get_havugimana", "_autosummary/pypath.inputs.havugimana.havugimana_complexes", "_autosummary/pypath.inputs.hgnc", "_autosummary/pypath.inputs.hgnc.hgnc_genegroups", "_autosummary/pypath.inputs.hippie", "_autosummary/pypath.inputs.hippie.hippie_interactions", "_autosummary/pypath.inputs.homologene", "_autosummary/pypath.inputs.homologene.get_homologene", "_autosummary/pypath.inputs.homologene.homologene_dict", "_autosummary/pypath.inputs.homologene.homologene_uniprot_dict", "_autosummary/pypath.inputs.hpmr", "_autosummary/pypath.inputs.hpmr.HpmrInteraction", "_autosummary/pypath.inputs.hpmr.get_hpmr", "_autosummary/pypath.inputs.hpmr.hpmr_annotations", "_autosummary/pypath.inputs.hpmr.hpmr_complexes", "_autosummary/pypath.inputs.hpmr.hpmr_interactions", "_autosummary/pypath.inputs.hpo", "_autosummary/pypath.inputs.hpo.hpo_annotations", "_autosummary/pypath.inputs.hpo.hpo_diseases", "_autosummary/pypath.inputs.hpo.hpo_ontology", "_autosummary/pypath.inputs.hpo.hpo_terms", "_autosummary/pypath.inputs.hprd", "_autosummary/pypath.inputs.hprd.get_hprd", "_autosummary/pypath.inputs.hprd.hprd_enzyme_substrate", "_autosummary/pypath.inputs.hprd.hprd_interactions", "_autosummary/pypath.inputs.hprd.hprd_interactions_htp", "_autosummary/pypath.inputs.htri", "_autosummary/pypath.inputs.htri.htri_interactions", "_autosummary/pypath.inputs.humancellmap", "_autosummary/pypath.inputs.humancellmap.humancellmap_annotations", "_autosummary/pypath.inputs.humap", "_autosummary/pypath.inputs.humap.humap2_complexes", "_autosummary/pypath.inputs.humap.humap_complexes", "_autosummary/pypath.inputs.huri", "_autosummary/pypath.inputs.huri.hi_i_interactions", "_autosummary/pypath.inputs.huri.hi_ii_interactions", "_autosummary/pypath.inputs.huri.hi_iii_old", "_autosummary/pypath.inputs.huri.hi_union_interactions", "_autosummary/pypath.inputs.huri.huri_interactions", "_autosummary/pypath.inputs.huri.lit_bm_13_interactions", "_autosummary/pypath.inputs.huri.lit_bm_17_interactions", "_autosummary/pypath.inputs.huri.lit_bm_interactions", "_autosummary/pypath.inputs.huri.rolland_hi_ii_14", "_autosummary/pypath.inputs.huri.vidal_hi_iii_old", "_autosummary/pypath.inputs.huri.yang2016_interactions", "_autosummary/pypath.inputs.huri.yu2011_interactions", "_autosummary/pypath.inputs.i3d", "_autosummary/pypath.inputs.i3d.get_i3d", "_autosummary/pypath.inputs.icellnet", "_autosummary/pypath.inputs.icellnet.IcellnetRecord", "_autosummary/pypath.inputs.icellnet.icellnet_annotations", "_autosummary/pypath.inputs.icellnet.icellnet_complexes", "_autosummary/pypath.inputs.icellnet.icellnet_interactions", "_autosummary/pypath.inputs.ielm", "_autosummary/pypath.inputs.ielm.get_ielm", "_autosummary/pypath.inputs.ielm.get_ielm_huge", "_autosummary/pypath.inputs.imweb", "_autosummary/pypath.inputs.imweb.get_imweb", "_autosummary/pypath.inputs.imweb.get_imweb_req", "_autosummary/pypath.inputs.innatedb", "_autosummary/pypath.inputs.innatedb.innatedb_interactions", "_autosummary/pypath.inputs.instruct", "_autosummary/pypath.inputs.instruct.get_instruct", "_autosummary/pypath.inputs.instruct.get_instruct_offsets", "_autosummary/pypath.inputs.intact", "_autosummary/pypath.inputs.intact.intact_interactions", "_autosummary/pypath.inputs.integrins", "_autosummary/pypath.inputs.integrins.get_integrins", "_autosummary/pypath.inputs.interpro", "_autosummary/pypath.inputs.interpro.interpro2go_annotations", "_autosummary/pypath.inputs.interpro.interpro_annotations", "_autosummary/pypath.inputs.interpro.interpro_entries", "_autosummary/pypath.inputs.interpro.interpro_xrefs", "_autosummary/pypath.inputs.intogen", "_autosummary/pypath.inputs.intogen.intogen_annotations", "_autosummary/pypath.inputs.ipi", "_autosummary/pypath.inputs.ipi.ipi_uniprot", "_autosummary/pypath.inputs.iptmnet", "_autosummary/pypath.inputs.iptmnet.IptmnetInteraction", "_autosummary/pypath.inputs.iptmnet.iptmnet_interactions", "_autosummary/pypath.inputs.italk", "_autosummary/pypath.inputs.italk.italk_annotations", "_autosummary/pypath.inputs.italk.italk_interactions", "_autosummary/pypath.inputs.italk.italk_raw", "_autosummary/pypath.inputs.kea", "_autosummary/pypath.inputs.kea.kea_enzyme_substrate", "_autosummary/pypath.inputs.kea.kea_interactions", "_autosummary/pypath.inputs.kegg", "_autosummary/pypath.inputs.kegg.KeggPathway", "_autosummary/pypath.inputs.kegg.kegg_dbget", "_autosummary/pypath.inputs.kegg.kegg_interactions", "_autosummary/pypath.inputs.kegg.kegg_medicus", "_autosummary/pypath.inputs.kegg.kegg_medicus_complexes", "_autosummary/pypath.inputs.kegg.kegg_medicus_interactions", "_autosummary/pypath.inputs.kegg.kegg_pathway_annotations", "_autosummary/pypath.inputs.kegg.kegg_pathway_annotations_pathwaycommons", "_autosummary/pypath.inputs.kegg.kegg_pathways", "_autosummary/pypath.inputs.kinasedotcom", "_autosummary/pypath.inputs.kinasedotcom.kinasedotcom_annotations", "_autosummary/pypath.inputs.kirouac2010", "_autosummary/pypath.inputs.kirouac2010.kirouac2010_interactions", "_autosummary/pypath.inputs.lambert2018", "_autosummary/pypath.inputs.lambert2018.lambert2018_annotations", "_autosummary/pypath.inputs.lambert2018.lambert2018_s1_raw", "_autosummary/pypath.inputs.laudanna", "_autosummary/pypath.inputs.laudanna.laudanna_directions", "_autosummary/pypath.inputs.laudanna.laudanna_effects", "_autosummary/pypath.inputs.li2012", "_autosummary/pypath.inputs.li2012.get_li2012", "_autosummary/pypath.inputs.li2012.li2012_dmi", "_autosummary/pypath.inputs.li2012.li2012_enzyme_substrate", "_autosummary/pypath.inputs.li2012.li2012_interactions", "_autosummary/pypath.inputs.lincs", "_autosummary/pypath.inputs.lincs.lincs_compounds", "_autosummary/pypath.inputs.lmpid", "_autosummary/pypath.inputs.lmpid.lmpid_dmi", "_autosummary/pypath.inputs.lmpid.lmpid_interactions", "_autosummary/pypath.inputs.lmpid.load_lmpid", "_autosummary/pypath.inputs.lncdisease", "_autosummary/pypath.inputs.lncdisease.lncdisease_interactions", "_autosummary/pypath.inputs.lncrnadb", "_autosummary/pypath.inputs.lncrnadb.lncrnadb_interactions", "_autosummary/pypath.inputs.locate", "_autosummary/pypath.inputs.locate.locate_localizations", "_autosummary/pypath.inputs.lrdb", "_autosummary/pypath.inputs.lrdb.LrdbAnnotation", "_autosummary/pypath.inputs.lrdb.lrdb_annotations", "_autosummary/pypath.inputs.lrdb.lrdb_interactions", "_autosummary/pypath.inputs.macrophage", "_autosummary/pypath.inputs.macrophage.macrophage_interactions", "_autosummary/pypath.inputs.main", "_autosummary/pypath.inputs.matrisome", "_autosummary/pypath.inputs.matrisome.matrisome_annotations", "_autosummary/pypath.inputs.matrixdb", "_autosummary/pypath.inputs.matrixdb.matrixdb_annotations", "_autosummary/pypath.inputs.matrixdb.matrixdb_ecm_proteins", "_autosummary/pypath.inputs.matrixdb.matrixdb_interactions", "_autosummary/pypath.inputs.matrixdb.matrixdb_membrane_proteins", "_autosummary/pypath.inputs.matrixdb.matrixdb_secreted_proteins", "_autosummary/pypath.inputs.mcam", "_autosummary/pypath.inputs.mcam.mcam_cell_adhesion_molecules", "_autosummary/pypath.inputs.membranome", "_autosummary/pypath.inputs.membranome.membranome_annotations", "_autosummary/pypath.inputs.mimp", "_autosummary/pypath.inputs.mimp.get_kinase_class", "_autosummary/pypath.inputs.mimp.mimp_enzyme_substrate", "_autosummary/pypath.inputs.mimp.mimp_interactions", "_autosummary/pypath.inputs.mir2disease", "_autosummary/pypath.inputs.mir2disease.mir2disease_interactions", "_autosummary/pypath.inputs.mirbase", "_autosummary/pypath.inputs.mirbase.get_mirbase_aliases", "_autosummary/pypath.inputs.mirbase.mirbase_ids", "_autosummary/pypath.inputs.mirbase.mirbase_mature", "_autosummary/pypath.inputs.mirbase.mirbase_mature_all", "_autosummary/pypath.inputs.mirbase.mirbase_precursor", "_autosummary/pypath.inputs.mirbase.mirbase_precursor_all", "_autosummary/pypath.inputs.mirbase.mirbase_precursor_to_mature", "_autosummary/pypath.inputs.mirdeathdb", "_autosummary/pypath.inputs.mirdeathdb.mirdeathdb_interactions", "_autosummary/pypath.inputs.mirecords", "_autosummary/pypath.inputs.mirecords.mirecords_interactions", "_autosummary/pypath.inputs.mirtarbase", "_autosummary/pypath.inputs.mirtarbase.mirtarbase_interactions", "_autosummary/pypath.inputs.mitab", "_autosummary/pypath.inputs.mitab.mitab_field_list", "_autosummary/pypath.inputs.mitab.mitab_field_uniprot", "_autosummary/pypath.inputs.mppi", "_autosummary/pypath.inputs.mppi.mppi_interactions", "_autosummary/pypath.inputs.msigdb", "_autosummary/pypath.inputs.msigdb.msigdb_annotations", "_autosummary/pypath.inputs.msigdb.msigdb_download", "_autosummary/pypath.inputs.msigdb.msigdb_download_collections", "_autosummary/pypath.inputs.ncrdeathdb", "_autosummary/pypath.inputs.ncrdeathdb.ncrdeathdb_interactions", "_autosummary/pypath.inputs.negatome", "_autosummary/pypath.inputs.negatome.negatome_interactions", "_autosummary/pypath.inputs.netbiol", "_autosummary/pypath.inputs.netbiol.arn_interactions", "_autosummary/pypath.inputs.netbiol.nrf2ome_interactions", "_autosummary/pypath.inputs.netpath", "_autosummary/pypath.inputs.netpath.netpath_interactions", "_autosummary/pypath.inputs.netpath.netpath_names", "_autosummary/pypath.inputs.netpath.netpath_pathway_annotations", "_autosummary/pypath.inputs.ontology", "_autosummary/pypath.inputs.ontology.listof_ontologies", "_autosummary/pypath.inputs.ontology.ontology", "_autosummary/pypath.inputs.opm", "_autosummary/pypath.inputs.opm.opm_annotations", "_autosummary/pypath.inputs.oreganno", "_autosummary/pypath.inputs.oreganno.oreganno_interactions", "_autosummary/pypath.inputs.oreganno.oreganno_raw", "_autosummary/pypath.inputs.panglaodb", "_autosummary/pypath.inputs.panglaodb.panglaodb_annotations", "_autosummary/pypath.inputs.panglaodb.panglaodb_raw", "_autosummary/pypath.inputs.pathwaycommons", "_autosummary/pypath.inputs.pathwaycommons.PathwayCommonsInteraction", "_autosummary/pypath.inputs.pathwaycommons.PathwayCommonsResource", "_autosummary/pypath.inputs.pathwaycommons.pathwaycommons_bind_interactions", "_autosummary/pypath.inputs.pathwaycommons.pathwaycommons_biogrid_interactions", "_autosummary/pypath.inputs.pathwaycommons.pathwaycommons_corum_interactions", "_autosummary/pypath.inputs.pathwaycommons.pathwaycommons_dip_interactions", "_autosummary/pypath.inputs.pathwaycommons.pathwaycommons_hprd_interactions", "_autosummary/pypath.inputs.pathwaycommons.pathwaycommons_inoh_interactions", "_autosummary/pypath.inputs.pathwaycommons.pathwaycommons_intact_interactions", "_autosummary/pypath.inputs.pathwaycommons.pathwaycommons_interactions", "_autosummary/pypath.inputs.pathwaycommons.pathwaycommons_kegg_interactions", "_autosummary/pypath.inputs.pathwaycommons.pathwaycommons_netpath_interactions", "_autosummary/pypath.inputs.pathwaycommons.pathwaycommons_panther_interactions", "_autosummary/pypath.inputs.pathwaycommons.pathwaycommons_phosphosite_interactions", "_autosummary/pypath.inputs.pathwaycommons.pathwaycommons_reactome_interactions", "_autosummary/pypath.inputs.pathwaycommons.pathwaycommons_wikipathways_interactions", "_autosummary/pypath.inputs.pazar", "_autosummary/pypath.inputs.pazar.pazar_interactions", "_autosummary/pypath.inputs.pdb", "_autosummary/pypath.inputs.pdb.pdb_chains", "_autosummary/pypath.inputs.pdb.pdb_complexes", "_autosummary/pypath.inputs.pdb.pdb_uniprot", "_autosummary/pypath.inputs.pdzbase", "_autosummary/pypath.inputs.pdzbase.pdzbase_interactions", "_autosummary/pypath.inputs.pepcyber", "_autosummary/pypath.inputs.pepcyber.pepcyber_details", "_autosummary/pypath.inputs.pepcyber.pepcyber_interactions", "_autosummary/pypath.inputs.pfam", "_autosummary/pypath.inputs.pfam.pfam_names", "_autosummary/pypath.inputs.pfam.pfam_pdb", "_autosummary/pypath.inputs.pfam.pfam_regions", "_autosummary/pypath.inputs.pfam.pfam_uniprot", "_autosummary/pypath.inputs.phobius", "_autosummary/pypath.inputs.phobius.phobius_annotations", "_autosummary/pypath.inputs.phosphatome", "_autosummary/pypath.inputs.phosphatome.phosphatome_annotations", "_autosummary/pypath.inputs.phosphoelm", "_autosummary/pypath.inputs.phosphoelm.phosphoelm_enzyme_substrate", "_autosummary/pypath.inputs.phosphoelm.phosphoelm_interactions", "_autosummary/pypath.inputs.phosphoelm.phosphoelm_kinases", "_autosummary/pypath.inputs.phosphonetworks", "_autosummary/pypath.inputs.phosphonetworks.phosphonetworks_enzyme_substrate", "_autosummary/pypath.inputs.phosphonetworks.phosphonetworks_interactions", "_autosummary/pypath.inputs.phosphopoint", "_autosummary/pypath.inputs.phosphopoint.phosphopoint_directions", "_autosummary/pypath.inputs.phosphopoint.phosphopoint_interactions", "_autosummary/pypath.inputs.phosphosite", "_autosummary/pypath.inputs.phosphosite.phosphosite_directions", "_autosummary/pypath.inputs.phosphosite.phosphosite_enzyme_substrate", "_autosummary/pypath.inputs.phosphosite.phosphosite_interactions", "_autosummary/pypath.inputs.phosphosite.phosphosite_interactions_all", "_autosummary/pypath.inputs.phosphosite.phosphosite_interactions_curated", "_autosummary/pypath.inputs.phosphosite.phosphosite_interactions_new", "_autosummary/pypath.inputs.phosphosite.phosphosite_interactions_noref", "_autosummary/pypath.inputs.phosphosite.phosphosite_ptm_orthology", "_autosummary/pypath.inputs.phosphosite.phosphosite_ptms", "_autosummary/pypath.inputs.phosphosite.phosphosite_regsites", "_autosummary/pypath.inputs.phosphosite.phosphosite_regsites_one_organism", "_autosummary/pypath.inputs.phosphosite.regsites_tab", "_autosummary/pypath.inputs.pisa", "_autosummary/pypath.inputs.pisa.PisaBond", "_autosummary/pypath.inputs.pisa.pisa_bonds", "_autosummary/pypath.inputs.pisa.pisa_interfaces", "_autosummary/pypath.inputs.pro", "_autosummary/pypath.inputs.pro.get_pro", "_autosummary/pypath.inputs.pro.pro_mapping", "_autosummary/pypath.inputs.progeny", "_autosummary/pypath.inputs.progeny.progeny_annotations", "_autosummary/pypath.inputs.progeny.progeny_raw", "_autosummary/pypath.inputs.proteinatlas", "_autosummary/pypath.inputs.proteinatlas.get_proteinatlas", "_autosummary/pypath.inputs.proteinatlas.proteinatlas_annotations", "_autosummary/pypath.inputs.proteinatlas.proteinatlas_secretome_annotations", "_autosummary/pypath.inputs.proteinatlas.proteinatlas_subcellular_annotations", "_autosummary/pypath.inputs.proteins", "_autosummary/pypath.inputs.proteins.variants", "_autosummary/pypath.inputs.protmapper", "_autosummary/pypath.inputs.protmapper.get_protmapper", "_autosummary/pypath.inputs.protmapper.protmapper_enzyme_substrate", "_autosummary/pypath.inputs.protmapper.protmapper_interactions", "_autosummary/pypath.inputs.pubchem", "_autosummary/pypath.inputs.pubchem.pubchem_mapping", "_autosummary/pypath.inputs.pubmed", "_autosummary/pypath.inputs.pubmed.get_pmid", "_autosummary/pypath.inputs.pubmed.get_pubmeds", "_autosummary/pypath.inputs.pubmed.only_pmids", "_autosummary/pypath.inputs.pubmed.open_pubmed", "_autosummary/pypath.inputs.pubmed.pmids_dict", "_autosummary/pypath.inputs.pubmed.pmids_list", "_autosummary/pypath.inputs.ramilowski2015", "_autosummary/pypath.inputs.ramilowski2015.ramilowski_interactions", "_autosummary/pypath.inputs.ramilowski2015.ramilowski_locations", "_autosummary/pypath.inputs.rdata", "_autosummary/pypath.inputs.reaction", "_autosummary/pypath.inputs.reaction.acsn_biopax", "_autosummary/pypath.inputs.reaction.acsn_interactions_2", "_autosummary/pypath.inputs.reaction.get_acsn_effects", "_autosummary/pypath.inputs.reaction.get_controls", "_autosummary/pypath.inputs.reaction.get_interactions", "_autosummary/pypath.inputs.reaction.get_reactions", "_autosummary/pypath.inputs.reaction.get_soup", "_autosummary/pypath.inputs.reaction.panther_biopax", "_autosummary/pypath.inputs.reaction.panther_interactions", "_autosummary/pypath.inputs.reaction.pid_biopax", "_autosummary/pypath.inputs.reaction.pid_interactions", "_autosummary/pypath.inputs.reaction.process_complex", "_autosummary/pypath.inputs.reaction.process_controls", "_autosummary/pypath.inputs.reaction.process_reactions", "_autosummary/pypath.inputs.reaction.reactions_biopax", "_autosummary/pypath.inputs.reaction.reactome_biopax", "_autosummary/pypath.inputs.reaction.reactome_bs", "_autosummary/pypath.inputs.reaction.reactome_interactions", "_autosummary/pypath.inputs.reaction.reactome_sbml", "_autosummary/pypath.inputs.scconnect", "_autosummary/pypath.inputs.scconnect.scconnect_annotations", "_autosummary/pypath.inputs.scconnect.scconnect_complexes", "_autosummary/pypath.inputs.scconnect.scconnect_interactions", "_autosummary/pypath.inputs.science", "_autosummary/pypath.inputs.science.science_download", "_autosummary/pypath.inputs.signalink", "_autosummary/pypath.inputs.signalink.signalink_annotations", "_autosummary/pypath.inputs.signalink.signalink_function_annotations", "_autosummary/pypath.inputs.signalink.signalink_interactions", "_autosummary/pypath.inputs.signalink.signalink_pathway_annotations", "_autosummary/pypath.inputs.signor", "_autosummary/pypath.inputs.signor.signor_complexes", "_autosummary/pypath.inputs.signor.signor_enzyme_substrate", "_autosummary/pypath.inputs.signor.signor_interactions", "_autosummary/pypath.inputs.signor.signor_pathway_annotations", "_autosummary/pypath.inputs.signor.signor_pathways", "_autosummary/pypath.inputs.signor.signor_protein_families", "_autosummary/pypath.inputs.spike", "_autosummary/pypath.inputs.spike.spike_complexes", "_autosummary/pypath.inputs.spike.spike_interactions", "_autosummary/pypath.inputs.stitch", "_autosummary/pypath.inputs.stitch.stitch_actions_interactions", "_autosummary/pypath.inputs.stitch.stitch_links_interactions", "_autosummary/pypath.inputs.string", "_autosummary/pypath.inputs.string.string_effects", "_autosummary/pypath.inputs.string.string_links_interactions", "_autosummary/pypath.inputs.string.string_physical_interactions", "_autosummary/pypath.inputs.string.string_species", "_autosummary/pypath.inputs.surfaceome", "_autosummary/pypath.inputs.surfaceome.surfaceome_annotations", "_autosummary/pypath.inputs.switches_elm", "_autosummary/pypath.inputs.switches_elm.get_switches_elm", "_autosummary/pypath.inputs.talklr", "_autosummary/pypath.inputs.talklr.talklr_annotations", "_autosummary/pypath.inputs.talklr.talklr_interactions", "_autosummary/pypath.inputs.talklr.talklr_raw", "_autosummary/pypath.inputs.tcdb", "_autosummary/pypath.inputs.tcdb.tcdb_annotations", "_autosummary/pypath.inputs.tcdb.tcdb_classes", "_autosummary/pypath.inputs.tcdb.tcdb_families", "_autosummary/pypath.inputs.tfcensus", "_autosummary/pypath.inputs.tfcensus.tfcensus_annotations", "_autosummary/pypath.inputs.threedcomplex", "_autosummary/pypath.inputs.threedcomplex.threedcomplex_chains", "_autosummary/pypath.inputs.threedcomplex.threedcomplex_complexes", "_autosummary/pypath.inputs.threedcomplex.threedcomplex_contacts", "_autosummary/pypath.inputs.threedcomplex.threedcomplex_ddi", "_autosummary/pypath.inputs.threedcomplex.threedcomplex_nresidues", "_autosummary/pypath.inputs.threedid", "_autosummary/pypath.inputs.threedid.get_3did", "_autosummary/pypath.inputs.threedid.get_3did_ddi", "_autosummary/pypath.inputs.threedid.get_3did_dmi", "_autosummary/pypath.inputs.threedid.process_3did_dmi", "_autosummary/pypath.inputs.topdb", "_autosummary/pypath.inputs.topdb.topdb_annotations", "_autosummary/pypath.inputs.transmir", "_autosummary/pypath.inputs.transmir.transmir_interactions", "_autosummary/pypath.inputs.trip", "_autosummary/pypath.inputs.trip.take_a_trip", "_autosummary/pypath.inputs.trip.trip_find_uniprot", "_autosummary/pypath.inputs.trip.trip_get_uniprot", "_autosummary/pypath.inputs.trip.trip_interactions", "_autosummary/pypath.inputs.trip.trip_process", "_autosummary/pypath.inputs.trip.trip_process_table", "_autosummary/pypath.inputs.unichem", "_autosummary/pypath.inputs.unichem.info", "_autosummary/pypath.inputs.unichem.unichem_info", "_autosummary/pypath.inputs.unichem.unichem_mapping", "_autosummary/pypath.inputs.unichem.unichem_sources", "_autosummary/pypath.inputs.uniprot", "_autosummary/pypath.inputs.uniprot.Taxon", "_autosummary/pypath.inputs.uniprot.UniprotRecordHistory", "_autosummary/pypath.inputs.uniprot.all_swissprots", "_autosummary/pypath.inputs.uniprot.all_trembls", "_autosummary/pypath.inputs.uniprot.all_uniprots", "_autosummary/pypath.inputs.uniprot.deleted_uniprot_genesymbol", "_autosummary/pypath.inputs.uniprot.get_db", "_autosummary/pypath.inputs.uniprot.get_uniprot_sec", "_autosummary/pypath.inputs.uniprot.init_db", "_autosummary/pypath.inputs.uniprot.is_swissprot", "_autosummary/pypath.inputs.uniprot.is_trembl", "_autosummary/pypath.inputs.uniprot.is_uniprot", "_autosummary/pypath.inputs.uniprot.protein_datasheet", "_autosummary/pypath.inputs.uniprot.swissprot_deleted", "_autosummary/pypath.inputs.uniprot.trembl_deleted", "_autosummary/pypath.inputs.uniprot.uniprot_data", "_autosummary/pypath.inputs.uniprot.uniprot_deleted", "_autosummary/pypath.inputs.uniprot.uniprot_families", "_autosummary/pypath.inputs.uniprot.uniprot_history", "_autosummary/pypath.inputs.uniprot.uniprot_history_recent_datasheet", "_autosummary/pypath.inputs.uniprot.uniprot_keywords", "_autosummary/pypath.inputs.uniprot.uniprot_locations", "_autosummary/pypath.inputs.uniprot.uniprot_ncbi_taxids", "_autosummary/pypath.inputs.uniprot.uniprot_ncbi_taxids_2", "_autosummary/pypath.inputs.uniprot.uniprot_preprocess", "_autosummary/pypath.inputs.uniprot.uniprot_recent_version", "_autosummary/pypath.inputs.uniprot.uniprot_taxonomy", "_autosummary/pypath.inputs.uniprot.uniprot_tissues", "_autosummary/pypath.inputs.uniprot.uniprot_topology", "_autosummary/pypath.inputs.uniprot.valid_uniprot", "_autosummary/pypath.inputs.wang", "_autosummary/pypath.inputs.wang.cui_interactions", "_autosummary/pypath.inputs.wang.hsn_interactions", "_autosummary/pypath.inputs.wang.wang_annotations", "_autosummary/pypath.inputs.wang.wang_interactions", "_autosummary/pypath.inputs.wojtowicz2020", "_autosummary/pypath.inputs.wojtowicz2020.wojtowicz2020_interactions", "_autosummary/pypath.inputs.wojtowicz2020.wojtowicz2020_raw", "_autosummary/pypath.inputs.zhong2015", "_autosummary/pypath.inputs.zhong2015.zhong2015_annotations", "_autosummary/pypath.internals", "_autosummary/pypath.internals.annot_formats", "_autosummary/pypath.internals.annot_formats.AnnotDef", "_autosummary/pypath.internals.annot_formats.AnnotDefKey", "_autosummary/pypath.internals.annot_formats.AnnotOp", "_autosummary/pypath.internals.annot_formats.AnnotationGroup", "_autosummary/pypath.internals.input_formats", "_autosummary/pypath.internals.input_formats.ArrayMapping", "_autosummary/pypath.internals.input_formats.BiomartMapping", "_autosummary/pypath.internals.input_formats.FileMapping", "_autosummary/pypath.internals.input_formats.MappingInput", "_autosummary/pypath.internals.input_formats.NetworkInput", "_autosummary/pypath.internals.input_formats.PickleMapping", "_autosummary/pypath.internals.input_formats.ProMapping", "_autosummary/pypath.internals.input_formats.ReadList", "_autosummary/pypath.internals.input_formats.UnichemMapping", "_autosummary/pypath.internals.input_formats.UniprotListMapping", "_autosummary/pypath.internals.input_formats.UniprotMapping", "_autosummary/pypath.internals.intera", "_autosummary/pypath.internals.intera.Complex", "_autosummary/pypath.internals.intera.Domain", "_autosummary/pypath.internals.intera.DomainDomain", "_autosummary/pypath.internals.intera.DomainMotif", "_autosummary/pypath.internals.intera.Interface", "_autosummary/pypath.internals.intera.Motif", "_autosummary/pypath.internals.intera.Ptm", "_autosummary/pypath.internals.intera.Regulation", "_autosummary/pypath.internals.intera.Residue", "_autosummary/pypath.internals.license", "_autosummary/pypath.internals.license.License", "_autosummary/pypath.internals.license.LicenseAttrib", "_autosummary/pypath.internals.license.LicenseFeature", "_autosummary/pypath.internals.license.LicensePurpose", "_autosummary/pypath.internals.license.LicenseSharing", "_autosummary/pypath.internals.maps", "_autosummary/pypath.internals.refs", "_autosummary/pypath.internals.refs.Reference", "_autosummary/pypath.internals.refs.get_pubmed_data", "_autosummary/pypath.internals.resource", "_autosummary/pypath.internals.resource.AbstractResource", "_autosummary/pypath.internals.resource.EnzymeSubstrateResource", "_autosummary/pypath.internals.resource.EnzymeSubstrateResourceKey", "_autosummary/pypath.internals.resource.NetworkResource", "_autosummary/pypath.internals.resource.NetworkResourceKey", "_autosummary/pypath.internals.resource.ResourceAttributes", "_autosummary/pypath.legacy", "_autosummary/pypath.legacy.db_categories", "_autosummary/pypath.legacy.db_categories.get_categories", "_autosummary/pypath.legacy.db_categories.get_category", "_autosummary/pypath.log", "_autosummary/pypath.obsolete", "_autosummary/pypath.obsolete.colorgen", "_autosummary/pypath.obsolete.colorgen.bias", "_autosummary/pypath.obsolete.colorgen.colormix", "_autosummary/pypath.obsolete.colorgen.dec2hex", "_autosummary/pypath.obsolete.colorgen.embl_colors", "_autosummary/pypath.obsolete.colorgen.genhsv", "_autosummary/pypath.obsolete.colorgen.genrgb", "_autosummary/pypath.obsolete.colorgen.getfracs", "_autosummary/pypath.obsolete.colorgen.gethexrgbs", "_autosummary/pypath.obsolete.colorgen.gethsvs", "_autosummary/pypath.obsolete.colorgen.getrgbs", "_autosummary/pypath.obsolete.colorgen.hex2dec", "_autosummary/pypath.obsolete.colorgen.hex2rgb", "_autosummary/pypath.obsolete.colorgen.read_palette", "_autosummary/pypath.obsolete.colorgen.rgb1", "_autosummary/pypath.obsolete.colorgen.rgb256", "_autosummary/pypath.obsolete.colorgen.rgb2hex", "_autosummary/pypath.obsolete.colorgen.zenos_dichotomy", "_autosummary/pypath.obsolete.enrich", "_autosummary/pypath.obsolete.enrich.Enrichment", "_autosummary/pypath.obsolete.enrich.EnrichmentSet", "_autosummary/pypath.obsolete.gsea", "_autosummary/pypath.obsolete.gsea.GSEA", "_autosummary/pypath.obsolete.gsea.GSEABinaryEnrichmentSet", "_autosummary/pypath.obsolete.linkcomm", "_autosummary/pypath.obsolete.linkcomm.Dc", "_autosummary/pypath.obsolete.linkcomm.HLC", "_autosummary/pypath.obsolete.linkcomm.read_edgelist_unweighted", "_autosummary/pypath.obsolete.linkcomm.read_edgelist_weighted", "_autosummary/pypath.obsolete.linkcomm.similarities_unweighted", "_autosummary/pypath.obsolete.linkcomm.similarities_weighted", "_autosummary/pypath.obsolete.linkcomm.swap", "_autosummary/pypath.obsolete.linkcomm.write_dendro", "_autosummary/pypath.obsolete.linkcomm.write_edge2cid", "_autosummary/pypath.omnipath", "_autosummary/pypath.omnipath.app", "_autosummary/pypath.omnipath.app.DatabaseManager", "_autosummary/pypath.omnipath.databases", "_autosummary/pypath.omnipath.databases.build", "_autosummary/pypath.omnipath.databases.class_and_param", "_autosummary/pypath.omnipath.databases.define", "_autosummary/pypath.omnipath.databases.define.DatabaseClass", "_autosummary/pypath.omnipath.databases.define.DatabaseDefinition", "_autosummary/pypath.omnipath.databases.define.DatabaseDefinitionManager", "_autosummary/pypath.omnipath.databases.get_manager", "_autosummary/pypath.omnipath.databases.init_manager", "_autosummary/pypath.omnipath.export", "_autosummary/pypath.omnipath.export.Export", "_autosummary/pypath.omnipath.init", "_autosummary/pypath.omnipath.param", "_autosummary/pypath.omnipath.param.curated_ppi_resources", "_autosummary/pypath.omnipath.param.tf_target_resources", "_autosummary/pypath.omnipath.server", "_autosummary/pypath.omnipath.server.build", "_autosummary/pypath.omnipath.server.build.WebserviceTables", "_autosummary/pypath.omnipath.server.generate_about_page", "_autosummary/pypath.omnipath.server.generate_about_page.export_licenses", "_autosummary/pypath.omnipath.server.generate_about_page.generate_about_html", "_autosummary/pypath.omnipath.server.generate_about_page.resource_list_latex", "_autosummary/pypath.omnipath.server.generate_about_page.write_html", "_autosummary/pypath.resources", "_autosummary/pypath.resources.controller", "_autosummary/pypath.resources.controller.ResourceController", "_autosummary/pypath.resources.data", "_autosummary/pypath.resources.data_formats", "_autosummary/pypath.resources.data_formats.ROOT", "_autosummary/pypath.resources.data_formats.activity_flow", "_autosummary/pypath.resources.data_formats.enzyme_substrate", "_autosummary/pypath.resources.data_formats.interaction", "_autosummary/pypath.resources.data_formats.interaction_htp", "_autosummary/pypath.resources.data_formats.obsolate", "_autosummary/pypath.resources.data_formats.pathway_bad", "_autosummary/pypath.resources.data_formats.reaction_pc", "_autosummary/pypath.resources.data_formats.transcription_deprecated", "_autosummary/pypath.resources.data_formats.transcription_onebyone", "_autosummary/pypath.resources.descriptions", "_autosummary/pypath.resources.descriptions.export_licenses", "_autosummary/pypath.resources.descriptions.gen_html", "_autosummary/pypath.resources.descriptions.resource_list_latex", "_autosummary/pypath.resources.descriptions.write_html", "_autosummary/pypath.resources.get_controller", "_autosummary/pypath.resources.licenses", "_autosummary/pypath.resources.licenses.Licenses", "_autosummary/pypath.resources.network", "_autosummary/pypath.resources.network.dorothea_expand_levels", "_autosummary/pypath.resources.urls", "_autosummary/pypath.share", "_autosummary/pypath.share.cache", "_autosummary/pypath.share.cache.cache_item", "_autosummary/pypath.share.cache.get_cachedir", "_autosummary/pypath.share.common", "_autosummary/pypath.share.common.add_to_list", "_autosummary/pypath.share.common.add_to_set", "_autosummary/pypath.share.common.at_least_in", "_autosummary/pypath.share.common.clean_dict", "_autosummary/pypath.share.common.combine_attrs", "_autosummary/pypath.share.common.console", "_autosummary/pypath.share.common.decode", "_autosummary/pypath.share.common.del_empty", "_autosummary/pypath.share.common.df_memory_usage", "_autosummary/pypath.share.common.dict_collapse_keys", "_autosummary/pypath.share.common.dict_counts", "_autosummary/pypath.share.common.dict_diff", "_autosummary/pypath.share.common.dict_expand_keys", "_autosummary/pypath.share.common.dict_percent", "_autosummary/pypath.share.common.dict_set_path", "_autosummary/pypath.share.common.dict_set_percent", "_autosummary/pypath.share.common.dict_str", "_autosummary/pypath.share.common.dict_subtotals", "_autosummary/pypath.share.common.dict_sym_diff", "_autosummary/pypath.share.common.dict_union", "_autosummary/pypath.share.common.eq", "_autosummary/pypath.share.common.filtr", "_autosummary/pypath.share.common.first", "_autosummary/pypath.share.common.flat_list", "_autosummary/pypath.share.common.float_or_nan", "_autosummary/pypath.share.common.gen_session_id", "_autosummary/pypath.share.common.get", "_autosummary/pypath.share.common.get_args", "_autosummary/pypath.share.common.is_float", "_autosummary/pypath.share.common.is_int", "_autosummary/pypath.share.common.is_str", "_autosummary/pypath.share.common.jaccard_index", "_autosummary/pypath.share.common.join_dicts", "_autosummary/pypath.share.common.latex_table", "_autosummary/pypath.share.common.match", "_autosummary/pypath.share.common.maybe_in_dict", "_autosummary/pypath.share.common.md5", "_autosummary/pypath.share.common.merge_dicts", "_autosummary/pypath.share.common.n_shared_elements", "_autosummary/pypath.share.common.n_shared_foreach", "_autosummary/pypath.share.common.n_shared_total", "_autosummary/pypath.share.common.n_shared_unique_foreach", "_autosummary/pypath.share.common.n_unique_elements", "_autosummary/pypath.share.common.n_unique_foreach", "_autosummary/pypath.share.common.n_unique_total", "_autosummary/pypath.share.common.negate", "_autosummary/pypath.share.common.none_or_len", "_autosummary/pypath.share.common.paginate", "_autosummary/pypath.share.common.prefix", "_autosummary/pypath.share.common.print_table", "_autosummary/pypath.share.common.re_safe_groups", "_autosummary/pypath.share.common.remove_prefix", "_autosummary/pypath.share.common.rotate", "_autosummary/pypath.share.common.sets_to_sorted_lists", "_autosummary/pypath.share.common.sfirst", "_autosummary/pypath.share.common.shared_elements", "_autosummary/pypath.share.common.shared_foreach", "_autosummary/pypath.share.common.shared_total", "_autosummary/pypath.share.common.shared_unique", "_autosummary/pypath.share.common.shared_unique_foreach", "_autosummary/pypath.share.common.shared_unique_total", "_autosummary/pypath.share.common.silent", "_autosummary/pypath.share.common.simpson_index", "_autosummary/pypath.share.common.simpson_index_counts", "_autosummary/pypath.share.common.something", "_autosummary/pypath.share.common.sorensen_index", "_autosummary/pypath.share.common.suffix", "_autosummary/pypath.share.common.sum_dicts", "_autosummary/pypath.share.common.swap_dict", "_autosummary/pypath.share.common.swap_dict_simple", "_autosummary/pypath.share.common.swap_suffix", "_autosummary/pypath.share.common.table_add_row_numbers", "_autosummary/pypath.share.common.table_format", "_autosummary/pypath.share.common.table_textwrap", "_autosummary/pypath.share.common.to_list", "_autosummary/pypath.share.common.to_set", "_autosummary/pypath.share.common.try_bool", "_autosummary/pypath.share.common.try_float", "_autosummary/pypath.share.common.tsv_table", "_autosummary/pypath.share.common.uniq_list", "_autosummary/pypath.share.common.uniq_list1", "_autosummary/pypath.share.common.uniq_list2", "_autosummary/pypath.share.common.uniq_ord_list", "_autosummary/pypath.share.common.unique_elements", "_autosummary/pypath.share.common.unique_foreach", "_autosummary/pypath.share.common.unique_list", "_autosummary/pypath.share.common.unique_total", "_autosummary/pypath.share.common.upper0", "_autosummary/pypath.share.common.values", "_autosummary/pypath.share.common.wcl", "_autosummary/pypath.share.common.wrap_truncate", "_autosummary/pypath.share.constants", "_autosummary/pypath.share.curl", "_autosummary/pypath.share.curl.Curl", "_autosummary/pypath.share.curl.FileOpener", "_autosummary/pypath.share.curl.RemoteFile", "_autosummary/pypath.share.curl.cache_delete_off", "_autosummary/pypath.share.curl.cache_delete_on", "_autosummary/pypath.share.curl.cache_off", "_autosummary/pypath.share.curl.cache_on", "_autosummary/pypath.share.curl.cache_print_off", "_autosummary/pypath.share.curl.cache_print_on", "_autosummary/pypath.share.curl.debug_off", "_autosummary/pypath.share.curl.debug_on", "_autosummary/pypath.share.curl.dryrun_off", "_autosummary/pypath.share.curl.dryrun_on", "_autosummary/pypath.share.curl.is_url", "_autosummary/pypath.share.curl.preserve_off", "_autosummary/pypath.share.curl.preserve_on", "_autosummary/pypath.share.log", "_autosummary/pypath.share.log.Logger", "_autosummary/pypath.share.log.new_logger", "_autosummary/pypath.share.progress", "_autosummary/pypath.share.progress.Progress", "_autosummary/pypath.share.session", "_autosummary/pypath.share.session.Logger", "_autosummary/pypath.share.session.Session", "_autosummary/pypath.share.session.get_log", "_autosummary/pypath.share.session.get_session", "_autosummary/pypath.share.session.new_session", "_autosummary/pypath.share.settings", "_autosummary/pypath.share.settings.Settings", "_autosummary/pypath.share.settings.context", "_autosummary/pypath.share.settings.get", "_autosummary/pypath.share.settings.setup", "_autosummary/pypath.utils", "_autosummary/pypath.utils.go", "_autosummary/pypath.utils.go.GOAnnotation", "_autosummary/pypath.utils.go.GOCustomAnnotation", "_autosummary/pypath.utils.go.GeneOntology", "_autosummary/pypath.utils.go.annotate", "_autosummary/pypath.utils.go.get_db", "_autosummary/pypath.utils.go.init_db", "_autosummary/pypath.utils.go.load_go", "_autosummary/pypath.utils.homology", "_autosummary/pypath.utils.homology.HomologyManager", "_autosummary/pypath.utils.homology.Ortholog", "_autosummary/pypath.utils.homology.ProteinHomology", "_autosummary/pypath.utils.homology.Proteomes", "_autosummary/pypath.utils.homology.PtmHomology", "_autosummary/pypath.utils.homology.SequenceContainer", "_autosummary/pypath.utils.homology.get_df", "_autosummary/pypath.utils.homology.get_dict", "_autosummary/pypath.utils.homology.get_manager", "_autosummary/pypath.utils.homology.init", "_autosummary/pypath.utils.homology.translate", "_autosummary/pypath.utils.homology.translate_df", "_autosummary/pypath.utils.mapping", "_autosummary/pypath.utils.mapping.MapReader", "_autosummary/pypath.utils.mapping.Mapper", "_autosummary/pypath.utils.mapping.MappingTable", "_autosummary/pypath.utils.mapping.MappingTableKey", "_autosummary/pypath.utils.mapping.UNIPROT_ID_TYPES", "_autosummary/pypath.utils.mapping.get_mapper", "_autosummary/pypath.utils.mapping.guess_type", "_autosummary/pypath.utils.mapping.id_from_label", "_autosummary/pypath.utils.mapping.id_from_label0", "_autosummary/pypath.utils.mapping.init", "_autosummary/pypath.utils.mapping.label", "_autosummary/pypath.utils.mapping.map_name", "_autosummary/pypath.utils.mapping.map_name0", "_autosummary/pypath.utils.mapping.map_names", "_autosummary/pypath.utils.pdb", "_autosummary/pypath.utils.pdb.Residue", "_autosummary/pypath.utils.pdb.ResidueMapper", "_autosummary/pypath.utils.pdb.Segment", "_autosummary/pypath.utils.pdb.residue_pdb", "_autosummary/pypath.utils.proteomicsdb", "_autosummary/pypath.utils.proteomicsdb.ProteomicsDB", "_autosummary/pypath.utils.pyreact", "_autosummary/pypath.utils.pyreact.AttributeHandler", "_autosummary/pypath.utils.pyreact.BioPaxReader", "_autosummary/pypath.utils.pyreact.Complex", "_autosummary/pypath.utils.pyreact.ComplexVariations", "_autosummary/pypath.utils.pyreact.Control", "_autosummary/pypath.utils.pyreact.Entity", "_autosummary/pypath.utils.pyreact.EntitySet", "_autosummary/pypath.utils.pyreact.Intersecting", "_autosummary/pypath.utils.pyreact.Protein", "_autosummary/pypath.utils.pyreact.ProteinFamily", "_autosummary/pypath.utils.pyreact.PyReact", "_autosummary/pypath.utils.pyreact.Reaction", "_autosummary/pypath.utils.pyreact.ReactionSide", "_autosummary/pypath.utils.pyreact.Reference", "_autosummary/pypath.utils.reflists", "_autosummary/pypath.utils.reflists.ReferenceListManager", "_autosummary/pypath.utils.reflists.check", "_autosummary/pypath.utils.reflists.get_manager", "_autosummary/pypath.utils.reflists.get_reflist", "_autosummary/pypath.utils.reflists.init", "_autosummary/pypath.utils.reflists.is_not", "_autosummary/pypath.utils.reflists.select", "_autosummary/pypath.utils.residues", "_autosummary/pypath.utils.residues.ResidueMapper", "_autosummary/pypath.utils.seq", "_autosummary/pypath.utils.seq.Pfam", "_autosummary/pypath.utils.seq.Resource", "_autosummary/pypath.utils.seq.Seq", "_autosummary/pypath.utils.seq.get_isoforms", "_autosummary/pypath.utils.seq.read_fasta", "_autosummary/pypath.utils.seq.swissprot_seq", "_autosummary/pypath.utils.taxonomy", "_autosummary/pypath.utils.taxonomy.ensure_common_name", "_autosummary/pypath.utils.taxonomy.ensure_ensembl_name", "_autosummary/pypath.utils.taxonomy.ensure_latin_name", "_autosummary/pypath.utils.taxonomy.ensure_ncbi_tax_id", "_autosummary/pypath.utils.taxonomy.get_db", "_autosummary/pypath.utils.taxonomy.init_db", "_autosummary/pypath.utils.taxonomy.short_latin_names", "_autosummary/pypath.utils.taxonomy.shorten_latin_name", "_autosummary/pypath.utils.taxonomy.taxid_from_common_name", "_autosummary/pypath.utils.taxonomy.taxid_from_dbptm_taxon_name", "_autosummary/pypath.utils.taxonomy.taxid_from_ensembl_name", "_autosummary/pypath.utils.taxonomy.taxid_from_latin_name", "_autosummary/pypath.utils.taxonomy.taxid_from_nonstandard", "_autosummary/pypath.utils.taxonomy.uniprot_taxid", "_autosummary/pypath.utils.unichem", "_autosummary/pypath.utils.unichem.Unichem", "_autosummary/pypath.utils.uniprot", "_autosummary/pypath.utils.uniprot.UniprotProtein", "_autosummary/pypath.utils.uniprot.ac", "_autosummary/pypath.utils.uniprot.activity_regulation", "_autosummary/pypath.utils.uniprot.activity_regulation_with_xrefs", "_autosummary/pypath.utils.uniprot.alternative_products", "_autosummary/pypath.utils.uniprot.alternative_products_with_xrefs", "_autosummary/pypath.utils.uniprot.browse", "_autosummary/pypath.utils.uniprot.catalytic_activity", "_autosummary/pypath.utils.uniprot.catalytic_activity_with_xrefs", "_autosummary/pypath.utils.uniprot.collect", "_autosummary/pypath.utils.uniprot.databases", "_autosummary/pypath.utils.uniprot.disease", "_autosummary/pypath.utils.uniprot.disease_with_xrefs", "_autosummary/pypath.utils.uniprot.ec", "_autosummary/pypath.utils.uniprot.features_table", "_autosummary/pypath.utils.uniprot.full_name", "_autosummary/pypath.utils.uniprot.function", "_autosummary/pypath.utils.uniprot.function_genecards", "_autosummary/pypath.utils.uniprot.function_or_genecards", "_autosummary/pypath.utils.uniprot.function_with_genecards", "_autosummary/pypath.utils.uniprot.function_with_xrefs", "_autosummary/pypath.utils.uniprot.genesymbol", "_autosummary/pypath.utils.uniprot.has_tag", "_autosummary/pypath.utils.uniprot.id", "_autosummary/pypath.utils.uniprot.info", "_autosummary/pypath.utils.uniprot.info_section", "_autosummary/pypath.utils.uniprot.interaction", "_autosummary/pypath.utils.uniprot.interaction_with_xrefs", "_autosummary/pypath.utils.uniprot.is_reviewed", "_autosummary/pypath.utils.uniprot.itertag", "_autosummary/pypath.utils.uniprot.keywords", "_autosummary/pypath.utils.uniprot.keywords_with_xrefs", "_autosummary/pypath.utils.uniprot.length", "_autosummary/pypath.utils.uniprot.lengths", "_autosummary/pypath.utils.uniprot.load", "_autosummary/pypath.utils.uniprot.organism", "_autosummary/pypath.utils.uniprot.print_features", "_autosummary/pypath.utils.uniprot.ptm", "_autosummary/pypath.utils.uniprot.ptm_with_xrefs", "_autosummary/pypath.utils.uniprot.query", "_autosummary/pypath.utils.uniprot.reload", "_autosummary/pypath.utils.uniprot.remove_xrefs", "_autosummary/pypath.utils.uniprot.sequence", "_autosummary/pypath.utils.uniprot.sequence_caution", "_autosummary/pypath.utils.uniprot.sequence_caution_with_xrefs", "_autosummary/pypath.utils.uniprot.similarity", "_autosummary/pypath.utils.uniprot.similarity_with_xrefs", "_autosummary/pypath.utils.uniprot.subcellular_location", "_autosummary/pypath.utils.uniprot.subcellular_location_with_xrefs", "_autosummary/pypath.utils.uniprot.subunit", "_autosummary/pypath.utils.uniprot.subunit_with_xrefs", "_autosummary/pypath.utils.uniprot.tissue_specificity", "_autosummary/pypath.utils.uniprot.tissue_specificity_with_xrefs", "_autosummary/pypath.utils.uniprot.update_databases", "_autosummary/pypath.utils.uniprot.update_info", "_autosummary/pypath.utils.uniprot.web_resource", "_autosummary/pypath.utils.uniprot.web_resource_with_xrefs", "_autosummary/pypath.utils.uniprot.weight", "_autosummary/pypath.utils.uniprot.weights", "_autosummary/pypath.visual", "changelog", "features", "index", "installation", "releasehistory", "webservice"], "filenames": ["_autosummary/pypath.rst", "_autosummary/pypath.core.rst", "_autosummary/pypath.core.annot.rst", "_autosummary/pypath.core.annot.Adhesome.rst", "_autosummary/pypath.core.annot.Almen2009.rst", "_autosummary/pypath.core.annot.AnnotationBase.rst", "_autosummary/pypath.core.annot.AnnotationTable.rst", "_autosummary/pypath.core.annot.Baccin2019.rst", "_autosummary/pypath.core.annot.Biogps.rst", "_autosummary/pypath.core.annot.CancerGeneCensus.rst", "_autosummary/pypath.core.annot.Cancerdrugsdb.rst", "_autosummary/pypath.core.annot.Cancersea.rst", "_autosummary/pypath.core.annot.CellPhoneDB.rst", "_autosummary/pypath.core.annot.CellPhoneDBComplex.rst", "_autosummary/pypath.core.annot.CellSurfaceProteinAtlas.rst", "_autosummary/pypath.core.annot.CellSurfaceProteinAtlasCellType.rst", "_autosummary/pypath.core.annot.Cellcall.rst", "_autosummary/pypath.core.annot.Cellcellinteractions.rst", "_autosummary/pypath.core.annot.Cellchatdb.rst", "_autosummary/pypath.core.annot.CellchatdbComplex.rst", "_autosummary/pypath.core.annot.Cellinker.rst", "_autosummary/pypath.core.annot.CellinkerComplex.rst", "_autosummary/pypath.core.annot.Celltalkdb.rst", "_autosummary/pypath.core.annot.Celltypist.rst", "_autosummary/pypath.core.annot.Comppi.rst", "_autosummary/pypath.core.annot.Connectomedb.rst", "_autosummary/pypath.core.annot.Corum.rst", "_autosummary/pypath.core.annot.CorumFuncat.rst", "_autosummary/pypath.core.annot.CorumGO.rst", "_autosummary/pypath.core.annot.Cpad.rst", "_autosummary/pypath.core.annot.CustomAnnotation.rst", "_autosummary/pypath.core.annot.Cytosig.rst", "_autosummary/pypath.core.annot.Dgidb.rst", "_autosummary/pypath.core.annot.Disgenet.rst", "_autosummary/pypath.core.annot.Embrace.rst", "_autosummary/pypath.core.annot.Exocarta.rst", "_autosummary/pypath.core.annot.GOCustomIntercell.rst", "_autosummary/pypath.core.annot.GOIntercell.rst", "_autosummary/pypath.core.annot.Gpcrdb.rst", "_autosummary/pypath.core.annot.GuideToPharmacology.rst", "_autosummary/pypath.core.annot.HPO.rst", "_autosummary/pypath.core.annot.Hgnc.rst", "_autosummary/pypath.core.annot.HpmrComplex.rst", "_autosummary/pypath.core.annot.HumanPlasmaMembraneReceptome.rst", "_autosummary/pypath.core.annot.HumanProteinAtlas.rst", "_autosummary/pypath.core.annot.HumanProteinAtlasSecretome.rst", "_autosummary/pypath.core.annot.HumanProteinAtlasSubcellular.rst", "_autosummary/pypath.core.annot.Humancellmap.rst", "_autosummary/pypath.core.annot.Icellnet.rst", "_autosummary/pypath.core.annot.IcellnetComplex.rst", "_autosummary/pypath.core.annot.Integrins.rst", "_autosummary/pypath.core.annot.InterPro.rst", "_autosummary/pypath.core.annot.Intogen.rst", "_autosummary/pypath.core.annot.Italk.rst", "_autosummary/pypath.core.annot.KeggPathways.rst", "_autosummary/pypath.core.annot.KeggPathwaysPC.rst", "_autosummary/pypath.core.annot.Kinasedotcom.rst", "_autosummary/pypath.core.annot.Kirouac2010.rst", "_autosummary/pypath.core.annot.Lambert2018.rst", "_autosummary/pypath.core.annot.LigandReceptor.rst", "_autosummary/pypath.core.annot.Locate.rst", "_autosummary/pypath.core.annot.Lrdb.rst", "_autosummary/pypath.core.annot.Matrisome.rst", "_autosummary/pypath.core.annot.Matrixdb.rst", "_autosummary/pypath.core.annot.Mcam.rst", "_autosummary/pypath.core.annot.Membranome.rst", "_autosummary/pypath.core.annot.Msigdb.rst", "_autosummary/pypath.core.annot.NetpathPathways.rst", "_autosummary/pypath.core.annot.Opm.rst", "_autosummary/pypath.core.annot.Panglaodb.rst", "_autosummary/pypath.core.annot.Phobius.rst", "_autosummary/pypath.core.annot.Phosphatome.rst", "_autosummary/pypath.core.annot.Progeny.rst", "_autosummary/pypath.core.annot.Ramilowski2015.rst", "_autosummary/pypath.core.annot.Ramilowski2015Location.rst", "_autosummary/pypath.core.annot.Scconnect.rst", "_autosummary/pypath.core.annot.ScconnectComplex.rst", "_autosummary/pypath.core.annot.SignalinkFunctions.rst", "_autosummary/pypath.core.annot.SignalinkPathways.rst", "_autosummary/pypath.core.annot.SignorPathways.rst", "_autosummary/pypath.core.annot.Surfaceome.rst", "_autosummary/pypath.core.annot.Talklr.rst", "_autosummary/pypath.core.annot.Tcdb.rst", "_autosummary/pypath.core.annot.Tfcensus.rst", "_autosummary/pypath.core.annot.Topdb.rst", "_autosummary/pypath.core.annot.UniprotFamilies.rst", "_autosummary/pypath.core.annot.UniprotKeywords.rst", "_autosummary/pypath.core.annot.UniprotLocations.rst", "_autosummary/pypath.core.annot.UniprotTissues.rst", "_autosummary/pypath.core.annot.UniprotTopologies.rst", "_autosummary/pypath.core.annot.Vesiclepedia.rst", "_autosummary/pypath.core.annot.Wang.rst", "_autosummary/pypath.core.annot.Zhong2015.rst", "_autosummary/pypath.core.annot.get_db.rst", "_autosummary/pypath.core.annot.init_db.rst", "_autosummary/pypath.core.attrs.rst", "_autosummary/pypath.core.attrs.AttributeHandler.rst", "_autosummary/pypath.core.common.rst", "_autosummary/pypath.core.common.filter_network_df.rst", "_autosummary/pypath.core.complex.rst", "_autosummary/pypath.core.complex.AbstractComplexResource.rst", "_autosummary/pypath.core.complex.CellPhoneDB.rst", "_autosummary/pypath.core.complex.Cellchatdb.rst", "_autosummary/pypath.core.complex.Cellinker.rst", "_autosummary/pypath.core.complex.Compleat.rst", "_autosummary/pypath.core.complex.ComplexAggregator.rst", "_autosummary/pypath.core.complex.ComplexPortal.rst", "_autosummary/pypath.core.complex.Corum.rst", "_autosummary/pypath.core.complex.GuideToPharmacology.rst", "_autosummary/pypath.core.complex.Havugimana.rst", "_autosummary/pypath.core.complex.Hpmr.rst", "_autosummary/pypath.core.complex.Humap.rst", "_autosummary/pypath.core.complex.Humap2.rst", "_autosummary/pypath.core.complex.Icellnet.rst", "_autosummary/pypath.core.complex.Kegg.rst", "_autosummary/pypath.core.complex.Pdb.rst", "_autosummary/pypath.core.complex.Signor.rst", "_autosummary/pypath.core.complex.Spike.rst", "_autosummary/pypath.core.complex.all_complexes.rst", "_autosummary/pypath.core.complex.get_db.rst", "_autosummary/pypath.core.complex.init_db.rst", "_autosummary/pypath.core.entity.rst", "_autosummary/pypath.core.entity.Entity.rst", "_autosummary/pypath.core.entity.EntityKey.rst", "_autosummary/pypath.core.entity.EntityList.rst", "_autosummary/pypath.core.enz_sub.rst", "_autosummary/pypath.core.enz_sub.EnzymeSubstrateAggregator.rst", "_autosummary/pypath.core.enz_sub.EnzymeSubstrateHomologyProcessor.rst", "_autosummary/pypath.core.enz_sub.EnzymeSubstrateProcessor.rst", "_autosummary/pypath.core.enz_sub.get_db.rst", "_autosummary/pypath.core.enz_sub.init_db.rst", "_autosummary/pypath.core.evidence.rst", "_autosummary/pypath.core.evidence.Evidence.rst", "_autosummary/pypath.core.evidence.Evidences.rst", "_autosummary/pypath.core.interaction.rst", "_autosummary/pypath.core.interaction.Interaction.rst", "_autosummary/pypath.core.interaction.InteractionDataFrameRecord.rst", "_autosummary/pypath.core.interaction.InteractionKey.rst", "_autosummary/pypath.core.intercell.rst", "_autosummary/pypath.core.intercell.IntercellAnnotation.rst", "_autosummary/pypath.core.intercell.get_db.rst", "_autosummary/pypath.core.intercell.init_db.rst", "_autosummary/pypath.core.intercell_annot.rst", "_autosummary/pypath.core.intercell_annot.excludes.rst", "_autosummary/pypath.core.network.rst", "_autosummary/pypath.core.network.Network.rst", "_autosummary/pypath.core.network.NetworkEntityCollection.rst", "_autosummary/pypath.core.network.NetworkStatsRecord.rst", "_autosummary/pypath.core.network.get_db.rst", "_autosummary/pypath.core.network.init_db.rst", "_autosummary/pypath.data.rst", "_autosummary/pypath.disclaimer.rst", "_autosummary/pypath.info.rst", "_autosummary/pypath.inputs.rst", "_autosummary/pypath.inputs.abs.rst", "_autosummary/pypath.inputs.abs.abs_interactions.rst", "_autosummary/pypath.inputs.acsn.rst", "_autosummary/pypath.inputs.acsn.acsn_interactions.rst", "_autosummary/pypath.inputs.acsn.acsn_interactions_sif.rst", "_autosummary/pypath.inputs.adhesome.rst", "_autosummary/pypath.inputs.adhesome.adhesome_annotations.rst", "_autosummary/pypath.inputs.adhesome.adhesome_interactions.rst", "_autosummary/pypath.inputs.almen2009.rst", "_autosummary/pypath.inputs.almen2009.almen2009_annotations.rst", "_autosummary/pypath.inputs.baccin2019.rst", "_autosummary/pypath.inputs.baccin2019.baccin2019_annotations.rst", "_autosummary/pypath.inputs.baccin2019.baccin2019_interactions.rst", "_autosummary/pypath.inputs.biogps.rst", "_autosummary/pypath.inputs.biogps.BiogpsDataset.rst", "_autosummary/pypath.inputs.biogps.biogps_annotations.rst", "_autosummary/pypath.inputs.biogps.biogps_datasets.rst", "_autosummary/pypath.inputs.biogps.biogps_download.rst", "_autosummary/pypath.inputs.biogps.biogps_download_all.rst", "_autosummary/pypath.inputs.biogrid.rst", "_autosummary/pypath.inputs.biogrid.biogrid_all_interactions.rst", "_autosummary/pypath.inputs.biogrid.biogrid_interactions.rst", "_autosummary/pypath.inputs.biomart.rst", "_autosummary/pypath.inputs.biomart.biomart_homology.rst", "_autosummary/pypath.inputs.biomart.biomart_microarray.rst", "_autosummary/pypath.inputs.biomart.biomart_microarray_types.rst", "_autosummary/pypath.inputs.biomart.biomart_microarrays.rst", "_autosummary/pypath.inputs.biomart.biomart_query.rst", "_autosummary/pypath.inputs.ca1.rst", "_autosummary/pypath.inputs.ca1.ca1_interactions.rst", "_autosummary/pypath.inputs.cancercellmap.rst", "_autosummary/pypath.inputs.cancercellmap.ccmap_interactions.rst", "_autosummary/pypath.inputs.cancerdrugsdb.rst", "_autosummary/pypath.inputs.cancerdrugsdb.cancerdrugsdb_annotations.rst", "_autosummary/pypath.inputs.cancerdrugsdb.cancerdrugsdb_download.rst", "_autosummary/pypath.inputs.cancerdrugsdb.cancerdrugsdb_interactions.rst", "_autosummary/pypath.inputs.cancersea.rst", "_autosummary/pypath.inputs.cancersea.cancersea_annotations.rst", "_autosummary/pypath.inputs.cell.rst", "_autosummary/pypath.inputs.cell.cell_supplementary.rst", "_autosummary/pypath.inputs.cellcall.rst", "_autosummary/pypath.inputs.cellcall.cellcall_annotations.rst", "_autosummary/pypath.inputs.cellcall.cellcall_download.rst", "_autosummary/pypath.inputs.cellcall.cellcall_download_all.rst", "_autosummary/pypath.inputs.cellcall.cellcall_interactions.rst", "_autosummary/pypath.inputs.cellcellinteractions.rst", "_autosummary/pypath.inputs.cellcellinteractions.cellcellinteractions_annotations.rst", "_autosummary/pypath.inputs.cellchatdb.rst", "_autosummary/pypath.inputs.cellchatdb.cellchatdb_annotations.rst", "_autosummary/pypath.inputs.cellchatdb.cellchatdb_cofactors.rst", "_autosummary/pypath.inputs.cellchatdb.cellchatdb_complexes.rst", "_autosummary/pypath.inputs.cellchatdb.cellchatdb_download.rst", "_autosummary/pypath.inputs.cellchatdb.cellchatdb_interactions.rst", "_autosummary/pypath.inputs.cellinker.rst", "_autosummary/pypath.inputs.cellinker.CellinkerInteraction.rst", "_autosummary/pypath.inputs.cellinker.cellinker_annotations.rst", "_autosummary/pypath.inputs.cellinker.cellinker_complex_annotations.rst", "_autosummary/pypath.inputs.cellinker.cellinker_complexes.rst", "_autosummary/pypath.inputs.cellinker.cellinker_complexes_raw.rst", "_autosummary/pypath.inputs.cellinker.cellinker_lr_interactions.rst", "_autosummary/pypath.inputs.cellinker.cellinker_lr_interactions_raw.rst", "_autosummary/pypath.inputs.cellinker.cellinker_protein_annotations.rst", "_autosummary/pypath.inputs.cellinker.cellinker_smol_interactions.rst", "_autosummary/pypath.inputs.cellinker.cellinker_smol_interactions_raw.rst", "_autosummary/pypath.inputs.cellinker.components_to_complex.rst", "_autosummary/pypath.inputs.cellphonedb.rst", "_autosummary/pypath.inputs.cellphonedb.CellPhoneDBAnnotation.rst", "_autosummary/pypath.inputs.cellphonedb.cellphonedb_complex_annotations.rst", "_autosummary/pypath.inputs.cellphonedb.cellphonedb_complexes.rst", "_autosummary/pypath.inputs.cellphonedb.cellphonedb_interactions.rst", "_autosummary/pypath.inputs.cellphonedb.cellphonedb_ligands_receptors.rst", "_autosummary/pypath.inputs.cellphonedb.cellphonedb_protein_annotations.rst", "_autosummary/pypath.inputs.celltalkdb.rst", "_autosummary/pypath.inputs.celltalkdb.celltalkdb_annotations.rst", "_autosummary/pypath.inputs.celltalkdb.celltalkdb_download.rst", "_autosummary/pypath.inputs.celltalkdb.celltalkdb_interactions.rst", "_autosummary/pypath.inputs.celltypist.rst", "_autosummary/pypath.inputs.celltypist.celltypist_annotations.rst", "_autosummary/pypath.inputs.chembl.rst", "_autosummary/pypath.inputs.chembl.chembl_activities.rst", "_autosummary/pypath.inputs.chembl.chembl_assays.rst", "_autosummary/pypath.inputs.chembl.chembl_molecules.rst", "_autosummary/pypath.inputs.chembl.chembl_targets.rst", "_autosummary/pypath.inputs.common.rst", "_autosummary/pypath.inputs.common.csv_sep_change.rst", "_autosummary/pypath.inputs.common.glom_fields.rst", "_autosummary/pypath.inputs.common.json_extract.rst", "_autosummary/pypath.inputs.common.json_read.rst", "_autosummary/pypath.inputs.common.read_table.rst", "_autosummary/pypath.inputs.common.read_xls.rst", "_autosummary/pypath.inputs.compleat.rst", "_autosummary/pypath.inputs.compleat.compleat_complexes.rst", "_autosummary/pypath.inputs.compleat.compleat_raw.rst", "_autosummary/pypath.inputs.complexportal.rst", "_autosummary/pypath.inputs.complexportal.complexportal_complexes.rst", "_autosummary/pypath.inputs.comppi.rst", "_autosummary/pypath.inputs.comppi.comppi_interaction_locations.rst", "_autosummary/pypath.inputs.comppi.comppi_locations.rst", "_autosummary/pypath.inputs.connectomedb.rst", "_autosummary/pypath.inputs.connectomedb.connectomedb_annotations.rst", "_autosummary/pypath.inputs.connectomedb.connectomedb_interactions.rst", "_autosummary/pypath.inputs.corum.rst", "_autosummary/pypath.inputs.corum.corum_complexes.rst", "_autosummary/pypath.inputs.cosmic.rst", "_autosummary/pypath.inputs.cosmic.cancer_gene_census_annotations.rst", "_autosummary/pypath.inputs.cpad.rst", "_autosummary/pypath.inputs.cpad.cpad_annotations.rst", "_autosummary/pypath.inputs.cpad.cpad_pathway_cancer.rst", "_autosummary/pypath.inputs.cpad.get_cpad.rst", "_autosummary/pypath.inputs.cpdb.rst", "_autosummary/pypath.inputs.cpdb.cpdb_interactions.rst", "_autosummary/pypath.inputs.cpdb.cpdb_interactions_ltp.rst", "_autosummary/pypath.inputs.credentials.rst", "_autosummary/pypath.inputs.credentials.credentials.rst", "_autosummary/pypath.inputs.csa.rst", "_autosummary/pypath.inputs.csa.get_csa.rst", "_autosummary/pypath.inputs.cspa.rst", "_autosummary/pypath.inputs.cspa.cspa_annotations.rst", "_autosummary/pypath.inputs.cspa.cspa_cell_type_annotations.rst", "_autosummary/pypath.inputs.cspa.cspa_cell_types.rst", "_autosummary/pypath.inputs.cytosig.rst", "_autosummary/pypath.inputs.cytosig.cytosig_annotations.rst", "_autosummary/pypath.inputs.cytosig.cytosig_df.rst", "_autosummary/pypath.inputs.dbptm.rst", "_autosummary/pypath.inputs.dbptm.dbptm_enzyme_substrate.rst", "_autosummary/pypath.inputs.dbptm.dbptm_enzyme_substrate_old.rst", "_autosummary/pypath.inputs.dbptm.dbptm_interactions.rst", "_autosummary/pypath.inputs.deathdomain.rst", "_autosummary/pypath.inputs.deathdomain.deathdomain_interactions.rst", "_autosummary/pypath.inputs.deathdomain.deathdomain_interactions_rescued.rst", "_autosummary/pypath.inputs.depod.rst", "_autosummary/pypath.inputs.depod.depod_enzyme_substrate.rst", "_autosummary/pypath.inputs.depod.depod_interactions.rst", "_autosummary/pypath.inputs.dgidb.rst", "_autosummary/pypath.inputs.dgidb.dgidb_annotations.rst", "_autosummary/pypath.inputs.dgidb.get_dgidb_old.rst", "_autosummary/pypath.inputs.dip.rst", "_autosummary/pypath.inputs.dip.dip_interactions.rst", "_autosummary/pypath.inputs.dip.dip_login.rst", "_autosummary/pypath.inputs.disgenet.rst", "_autosummary/pypath.inputs.disgenet.disgenet_annotations.rst", "_autosummary/pypath.inputs.domino.rst", "_autosummary/pypath.inputs.domino.domino_ddi.rst", "_autosummary/pypath.inputs.domino.domino_enzsub.rst", "_autosummary/pypath.inputs.domino.domino_interactions.rst", "_autosummary/pypath.inputs.domino.get_domino.rst", "_autosummary/pypath.inputs.dorothea.rst", "_autosummary/pypath.inputs.dorothea.DorotheaInteraction.rst", "_autosummary/pypath.inputs.dorothea.dorothea_full_raw.rst", "_autosummary/pypath.inputs.dorothea.dorothea_interactions.rst", "_autosummary/pypath.inputs.dorothea.dorothea_interactions_old.rst", "_autosummary/pypath.inputs.dorothea.dorothea_old_csv.rst", "_autosummary/pypath.inputs.dorothea.dorothea_rda_raw.rst", "_autosummary/pypath.inputs.dorothea.get_dorothea_old.rst", "_autosummary/pypath.inputs.dorothea.get_tfregulons.rst", "_autosummary/pypath.inputs.dorothea.tfregulons_interactions.rst", "_autosummary/pypath.inputs.dorothea.tfregulons_interactions_old.rst", "_autosummary/pypath.inputs.drugbank.rst", "_autosummary/pypath.inputs.drugbank.drugbank_annotations.rst", "_autosummary/pypath.inputs.drugbank.drugbank_drugs.rst", "_autosummary/pypath.inputs.drugbank.drugbank_interactions.rst", "_autosummary/pypath.inputs.drugbank.drugbank_mapping.rst", "_autosummary/pypath.inputs.drugbank.drugbank_raw_interactions.rst", "_autosummary/pypath.inputs.drugcentral.rst", "_autosummary/pypath.inputs.drugcentral.drugcentral_drugs.rst", "_autosummary/pypath.inputs.drugcentral.drugcentral_interactions.rst", "_autosummary/pypath.inputs.drugcentral.drugcentral_mapping.rst", "_autosummary/pypath.inputs.ebi.rst", "_autosummary/pypath.inputs.ebi.ebi_rest.rst", "_autosummary/pypath.inputs.elm.rst", "_autosummary/pypath.inputs.elm.elm_classes.rst", "_autosummary/pypath.inputs.elm.elm_domains.rst", "_autosummary/pypath.inputs.elm.elm_instances.rst", "_autosummary/pypath.inputs.elm.elm_interactions.rst", "_autosummary/pypath.inputs.embopress.rst", "_autosummary/pypath.inputs.embopress.embopress_supplementary.rst", "_autosummary/pypath.inputs.embrace.rst", "_autosummary/pypath.inputs.embrace.embrace_annotations.rst", "_autosummary/pypath.inputs.embrace.embrace_interactions.rst", "_autosummary/pypath.inputs.embrace.embrace_raw.rst", "_autosummary/pypath.inputs.embrace.embrace_translated.rst", "_autosummary/pypath.inputs.encode.rst", "_autosummary/pypath.inputs.encode.encode_tf_mirna_interactions.rst", "_autosummary/pypath.inputs.ensembl.rst", "_autosummary/pypath.inputs.ensembl.ensembl_organisms.rst", "_autosummary/pypath.inputs.exocarta.rst", "_autosummary/pypath.inputs.exocarta.get_exocarta.rst", "_autosummary/pypath.inputs.exocarta.get_vesiclepedia.rst", "_autosummary/pypath.inputs.genecards.rst", "_autosummary/pypath.inputs.genecards.genecards_datasheet.rst", "_autosummary/pypath.inputs.genecards.genecards_soup.rst", "_autosummary/pypath.inputs.genecards.genecards_summaries.rst", "_autosummary/pypath.inputs.get_method.rst", "_autosummary/pypath.inputs.go.rst", "_autosummary/pypath.inputs.go.get_go_desc.rst", "_autosummary/pypath.inputs.go.get_go_quick.rst", "_autosummary/pypath.inputs.go.get_goslim.rst", "_autosummary/pypath.inputs.go.go_ancestors.rst", "_autosummary/pypath.inputs.go.go_ancestors_goose.rst", "_autosummary/pypath.inputs.go.go_ancestors_quickgo.rst", "_autosummary/pypath.inputs.go.go_annotations.rst", "_autosummary/pypath.inputs.go.go_annotations_goa.rst", "_autosummary/pypath.inputs.go.go_annotations_goose.rst", "_autosummary/pypath.inputs.go.go_annotations_quickgo.rst", "_autosummary/pypath.inputs.go.go_annotations_solr.rst", "_autosummary/pypath.inputs.go.go_annotations_uniprot.rst", "_autosummary/pypath.inputs.go.go_descendants.rst", "_autosummary/pypath.inputs.go.go_descendants_goose.rst", "_autosummary/pypath.inputs.go.go_descendants_quickgo.rst", "_autosummary/pypath.inputs.go.go_descendants_to_ancestors.rst", "_autosummary/pypath.inputs.go.go_terms.rst", "_autosummary/pypath.inputs.go.go_terms_goose.rst", "_autosummary/pypath.inputs.go.go_terms_quickgo.rst", "_autosummary/pypath.inputs.go.go_terms_solr.rst", "_autosummary/pypath.inputs.gpcrdb.rst", "_autosummary/pypath.inputs.gpcrdb.gpcrdb_annotations.rst", "_autosummary/pypath.inputs.graphviz.rst", "_autosummary/pypath.inputs.graphviz.graphviz_attrs.rst", "_autosummary/pypath.inputs.guide2pharma.rst", "_autosummary/pypath.inputs.guide2pharma.guide2pharma_complexes.rst", "_autosummary/pypath.inputs.guide2pharma.guide2pharma_download.rst", "_autosummary/pypath.inputs.guide2pharma.guide2pharma_interactions.rst", "_autosummary/pypath.inputs.havugimana.rst", "_autosummary/pypath.inputs.havugimana.get_havugimana.rst", "_autosummary/pypath.inputs.havugimana.havugimana_complexes.rst", "_autosummary/pypath.inputs.hgnc.rst", "_autosummary/pypath.inputs.hgnc.hgnc_genegroups.rst", "_autosummary/pypath.inputs.hippie.rst", "_autosummary/pypath.inputs.hippie.hippie_interactions.rst", "_autosummary/pypath.inputs.homologene.rst", "_autosummary/pypath.inputs.homologene.get_homologene.rst", "_autosummary/pypath.inputs.homologene.homologene_dict.rst", "_autosummary/pypath.inputs.homologene.homologene_uniprot_dict.rst", "_autosummary/pypath.inputs.hpmr.rst", "_autosummary/pypath.inputs.hpmr.HpmrInteraction.rst", "_autosummary/pypath.inputs.hpmr.get_hpmr.rst", "_autosummary/pypath.inputs.hpmr.hpmr_annotations.rst", "_autosummary/pypath.inputs.hpmr.hpmr_complexes.rst", "_autosummary/pypath.inputs.hpmr.hpmr_interactions.rst", "_autosummary/pypath.inputs.hpo.rst", "_autosummary/pypath.inputs.hpo.hpo_annotations.rst", "_autosummary/pypath.inputs.hpo.hpo_diseases.rst", "_autosummary/pypath.inputs.hpo.hpo_ontology.rst", "_autosummary/pypath.inputs.hpo.hpo_terms.rst", "_autosummary/pypath.inputs.hprd.rst", "_autosummary/pypath.inputs.hprd.get_hprd.rst", "_autosummary/pypath.inputs.hprd.hprd_enzyme_substrate.rst", "_autosummary/pypath.inputs.hprd.hprd_interactions.rst", "_autosummary/pypath.inputs.hprd.hprd_interactions_htp.rst", "_autosummary/pypath.inputs.htri.rst", "_autosummary/pypath.inputs.htri.htri_interactions.rst", "_autosummary/pypath.inputs.humancellmap.rst", "_autosummary/pypath.inputs.humancellmap.humancellmap_annotations.rst", "_autosummary/pypath.inputs.humap.rst", "_autosummary/pypath.inputs.humap.humap2_complexes.rst", "_autosummary/pypath.inputs.humap.humap_complexes.rst", "_autosummary/pypath.inputs.huri.rst", "_autosummary/pypath.inputs.huri.hi_i_interactions.rst", "_autosummary/pypath.inputs.huri.hi_ii_interactions.rst", "_autosummary/pypath.inputs.huri.hi_iii_old.rst", "_autosummary/pypath.inputs.huri.hi_union_interactions.rst", "_autosummary/pypath.inputs.huri.huri_interactions.rst", "_autosummary/pypath.inputs.huri.lit_bm_13_interactions.rst", "_autosummary/pypath.inputs.huri.lit_bm_17_interactions.rst", "_autosummary/pypath.inputs.huri.lit_bm_interactions.rst", "_autosummary/pypath.inputs.huri.rolland_hi_ii_14.rst", "_autosummary/pypath.inputs.huri.vidal_hi_iii_old.rst", "_autosummary/pypath.inputs.huri.yang2016_interactions.rst", "_autosummary/pypath.inputs.huri.yu2011_interactions.rst", "_autosummary/pypath.inputs.i3d.rst", "_autosummary/pypath.inputs.i3d.get_i3d.rst", "_autosummary/pypath.inputs.icellnet.rst", "_autosummary/pypath.inputs.icellnet.IcellnetRecord.rst", "_autosummary/pypath.inputs.icellnet.icellnet_annotations.rst", "_autosummary/pypath.inputs.icellnet.icellnet_complexes.rst", "_autosummary/pypath.inputs.icellnet.icellnet_interactions.rst", "_autosummary/pypath.inputs.ielm.rst", "_autosummary/pypath.inputs.ielm.get_ielm.rst", "_autosummary/pypath.inputs.ielm.get_ielm_huge.rst", "_autosummary/pypath.inputs.imweb.rst", "_autosummary/pypath.inputs.imweb.get_imweb.rst", "_autosummary/pypath.inputs.imweb.get_imweb_req.rst", "_autosummary/pypath.inputs.innatedb.rst", "_autosummary/pypath.inputs.innatedb.innatedb_interactions.rst", "_autosummary/pypath.inputs.instruct.rst", "_autosummary/pypath.inputs.instruct.get_instruct.rst", "_autosummary/pypath.inputs.instruct.get_instruct_offsets.rst", "_autosummary/pypath.inputs.intact.rst", "_autosummary/pypath.inputs.intact.intact_interactions.rst", "_autosummary/pypath.inputs.integrins.rst", "_autosummary/pypath.inputs.integrins.get_integrins.rst", "_autosummary/pypath.inputs.interpro.rst", "_autosummary/pypath.inputs.interpro.interpro2go_annotations.rst", "_autosummary/pypath.inputs.interpro.interpro_annotations.rst", "_autosummary/pypath.inputs.interpro.interpro_entries.rst", "_autosummary/pypath.inputs.interpro.interpro_xrefs.rst", "_autosummary/pypath.inputs.intogen.rst", "_autosummary/pypath.inputs.intogen.intogen_annotations.rst", "_autosummary/pypath.inputs.ipi.rst", "_autosummary/pypath.inputs.ipi.ipi_uniprot.rst", "_autosummary/pypath.inputs.iptmnet.rst", "_autosummary/pypath.inputs.iptmnet.IptmnetInteraction.rst", "_autosummary/pypath.inputs.iptmnet.iptmnet_interactions.rst", "_autosummary/pypath.inputs.italk.rst", "_autosummary/pypath.inputs.italk.italk_annotations.rst", "_autosummary/pypath.inputs.italk.italk_interactions.rst", "_autosummary/pypath.inputs.italk.italk_raw.rst", "_autosummary/pypath.inputs.kea.rst", "_autosummary/pypath.inputs.kea.kea_enzyme_substrate.rst", "_autosummary/pypath.inputs.kea.kea_interactions.rst", "_autosummary/pypath.inputs.kegg.rst", "_autosummary/pypath.inputs.kegg.KeggPathway.rst", "_autosummary/pypath.inputs.kegg.kegg_dbget.rst", "_autosummary/pypath.inputs.kegg.kegg_interactions.rst", "_autosummary/pypath.inputs.kegg.kegg_medicus.rst", "_autosummary/pypath.inputs.kegg.kegg_medicus_complexes.rst", "_autosummary/pypath.inputs.kegg.kegg_medicus_interactions.rst", "_autosummary/pypath.inputs.kegg.kegg_pathway_annotations.rst", "_autosummary/pypath.inputs.kegg.kegg_pathway_annotations_pathwaycommons.rst", "_autosummary/pypath.inputs.kegg.kegg_pathways.rst", "_autosummary/pypath.inputs.kinasedotcom.rst", "_autosummary/pypath.inputs.kinasedotcom.kinasedotcom_annotations.rst", "_autosummary/pypath.inputs.kirouac2010.rst", "_autosummary/pypath.inputs.kirouac2010.kirouac2010_interactions.rst", "_autosummary/pypath.inputs.lambert2018.rst", "_autosummary/pypath.inputs.lambert2018.lambert2018_annotations.rst", "_autosummary/pypath.inputs.lambert2018.lambert2018_s1_raw.rst", "_autosummary/pypath.inputs.laudanna.rst", "_autosummary/pypath.inputs.laudanna.laudanna_directions.rst", "_autosummary/pypath.inputs.laudanna.laudanna_effects.rst", "_autosummary/pypath.inputs.li2012.rst", "_autosummary/pypath.inputs.li2012.get_li2012.rst", "_autosummary/pypath.inputs.li2012.li2012_dmi.rst", "_autosummary/pypath.inputs.li2012.li2012_enzyme_substrate.rst", "_autosummary/pypath.inputs.li2012.li2012_interactions.rst", "_autosummary/pypath.inputs.lincs.rst", "_autosummary/pypath.inputs.lincs.lincs_compounds.rst", "_autosummary/pypath.inputs.lmpid.rst", "_autosummary/pypath.inputs.lmpid.lmpid_dmi.rst", "_autosummary/pypath.inputs.lmpid.lmpid_interactions.rst", "_autosummary/pypath.inputs.lmpid.load_lmpid.rst", "_autosummary/pypath.inputs.lncdisease.rst", "_autosummary/pypath.inputs.lncdisease.lncdisease_interactions.rst", "_autosummary/pypath.inputs.lncrnadb.rst", "_autosummary/pypath.inputs.lncrnadb.lncrnadb_interactions.rst", "_autosummary/pypath.inputs.locate.rst", "_autosummary/pypath.inputs.locate.locate_localizations.rst", "_autosummary/pypath.inputs.lrdb.rst", "_autosummary/pypath.inputs.lrdb.LrdbAnnotation.rst", "_autosummary/pypath.inputs.lrdb.lrdb_annotations.rst", "_autosummary/pypath.inputs.lrdb.lrdb_interactions.rst", "_autosummary/pypath.inputs.macrophage.rst", "_autosummary/pypath.inputs.macrophage.macrophage_interactions.rst", "_autosummary/pypath.inputs.main.rst", "_autosummary/pypath.inputs.matrisome.rst", "_autosummary/pypath.inputs.matrisome.matrisome_annotations.rst", "_autosummary/pypath.inputs.matrixdb.rst", "_autosummary/pypath.inputs.matrixdb.matrixdb_annotations.rst", "_autosummary/pypath.inputs.matrixdb.matrixdb_ecm_proteins.rst", "_autosummary/pypath.inputs.matrixdb.matrixdb_interactions.rst", "_autosummary/pypath.inputs.matrixdb.matrixdb_membrane_proteins.rst", "_autosummary/pypath.inputs.matrixdb.matrixdb_secreted_proteins.rst", "_autosummary/pypath.inputs.mcam.rst", "_autosummary/pypath.inputs.mcam.mcam_cell_adhesion_molecules.rst", "_autosummary/pypath.inputs.membranome.rst", "_autosummary/pypath.inputs.membranome.membranome_annotations.rst", "_autosummary/pypath.inputs.mimp.rst", "_autosummary/pypath.inputs.mimp.get_kinase_class.rst", "_autosummary/pypath.inputs.mimp.mimp_enzyme_substrate.rst", "_autosummary/pypath.inputs.mimp.mimp_interactions.rst", "_autosummary/pypath.inputs.mir2disease.rst", "_autosummary/pypath.inputs.mir2disease.mir2disease_interactions.rst", "_autosummary/pypath.inputs.mirbase.rst", "_autosummary/pypath.inputs.mirbase.get_mirbase_aliases.rst", "_autosummary/pypath.inputs.mirbase.mirbase_ids.rst", "_autosummary/pypath.inputs.mirbase.mirbase_mature.rst", "_autosummary/pypath.inputs.mirbase.mirbase_mature_all.rst", "_autosummary/pypath.inputs.mirbase.mirbase_precursor.rst", "_autosummary/pypath.inputs.mirbase.mirbase_precursor_all.rst", "_autosummary/pypath.inputs.mirbase.mirbase_precursor_to_mature.rst", "_autosummary/pypath.inputs.mirdeathdb.rst", "_autosummary/pypath.inputs.mirdeathdb.mirdeathdb_interactions.rst", "_autosummary/pypath.inputs.mirecords.rst", "_autosummary/pypath.inputs.mirecords.mirecords_interactions.rst", "_autosummary/pypath.inputs.mirtarbase.rst", "_autosummary/pypath.inputs.mirtarbase.mirtarbase_interactions.rst", "_autosummary/pypath.inputs.mitab.rst", "_autosummary/pypath.inputs.mitab.mitab_field_list.rst", "_autosummary/pypath.inputs.mitab.mitab_field_uniprot.rst", "_autosummary/pypath.inputs.mppi.rst", "_autosummary/pypath.inputs.mppi.mppi_interactions.rst", "_autosummary/pypath.inputs.msigdb.rst", "_autosummary/pypath.inputs.msigdb.msigdb_annotations.rst", "_autosummary/pypath.inputs.msigdb.msigdb_download.rst", "_autosummary/pypath.inputs.msigdb.msigdb_download_collections.rst", "_autosummary/pypath.inputs.ncrdeathdb.rst", "_autosummary/pypath.inputs.ncrdeathdb.ncrdeathdb_interactions.rst", "_autosummary/pypath.inputs.negatome.rst", "_autosummary/pypath.inputs.negatome.negatome_interactions.rst", "_autosummary/pypath.inputs.netbiol.rst", "_autosummary/pypath.inputs.netbiol.arn_interactions.rst", "_autosummary/pypath.inputs.netbiol.nrf2ome_interactions.rst", "_autosummary/pypath.inputs.netpath.rst", "_autosummary/pypath.inputs.netpath.netpath_interactions.rst", "_autosummary/pypath.inputs.netpath.netpath_names.rst", "_autosummary/pypath.inputs.netpath.netpath_pathway_annotations.rst", "_autosummary/pypath.inputs.ontology.rst", "_autosummary/pypath.inputs.ontology.listof_ontologies.rst", "_autosummary/pypath.inputs.ontology.ontology.rst", "_autosummary/pypath.inputs.opm.rst", "_autosummary/pypath.inputs.opm.opm_annotations.rst", "_autosummary/pypath.inputs.oreganno.rst", "_autosummary/pypath.inputs.oreganno.oreganno_interactions.rst", "_autosummary/pypath.inputs.oreganno.oreganno_raw.rst", "_autosummary/pypath.inputs.panglaodb.rst", "_autosummary/pypath.inputs.panglaodb.panglaodb_annotations.rst", "_autosummary/pypath.inputs.panglaodb.panglaodb_raw.rst", "_autosummary/pypath.inputs.pathwaycommons.rst", "_autosummary/pypath.inputs.pathwaycommons.PathwayCommonsInteraction.rst", "_autosummary/pypath.inputs.pathwaycommons.PathwayCommonsResource.rst", "_autosummary/pypath.inputs.pathwaycommons.pathwaycommons_bind_interactions.rst", "_autosummary/pypath.inputs.pathwaycommons.pathwaycommons_biogrid_interactions.rst", "_autosummary/pypath.inputs.pathwaycommons.pathwaycommons_corum_interactions.rst", "_autosummary/pypath.inputs.pathwaycommons.pathwaycommons_dip_interactions.rst", "_autosummary/pypath.inputs.pathwaycommons.pathwaycommons_hprd_interactions.rst", "_autosummary/pypath.inputs.pathwaycommons.pathwaycommons_inoh_interactions.rst", "_autosummary/pypath.inputs.pathwaycommons.pathwaycommons_intact_interactions.rst", "_autosummary/pypath.inputs.pathwaycommons.pathwaycommons_interactions.rst", "_autosummary/pypath.inputs.pathwaycommons.pathwaycommons_kegg_interactions.rst", "_autosummary/pypath.inputs.pathwaycommons.pathwaycommons_netpath_interactions.rst", "_autosummary/pypath.inputs.pathwaycommons.pathwaycommons_panther_interactions.rst", "_autosummary/pypath.inputs.pathwaycommons.pathwaycommons_phosphosite_interactions.rst", "_autosummary/pypath.inputs.pathwaycommons.pathwaycommons_reactome_interactions.rst", "_autosummary/pypath.inputs.pathwaycommons.pathwaycommons_wikipathways_interactions.rst", "_autosummary/pypath.inputs.pazar.rst", "_autosummary/pypath.inputs.pazar.pazar_interactions.rst", "_autosummary/pypath.inputs.pdb.rst", "_autosummary/pypath.inputs.pdb.pdb_chains.rst", "_autosummary/pypath.inputs.pdb.pdb_complexes.rst", "_autosummary/pypath.inputs.pdb.pdb_uniprot.rst", "_autosummary/pypath.inputs.pdzbase.rst", "_autosummary/pypath.inputs.pdzbase.pdzbase_interactions.rst", "_autosummary/pypath.inputs.pepcyber.rst", "_autosummary/pypath.inputs.pepcyber.pepcyber_details.rst", "_autosummary/pypath.inputs.pepcyber.pepcyber_interactions.rst", "_autosummary/pypath.inputs.pfam.rst", "_autosummary/pypath.inputs.pfam.pfam_names.rst", "_autosummary/pypath.inputs.pfam.pfam_pdb.rst", "_autosummary/pypath.inputs.pfam.pfam_regions.rst", "_autosummary/pypath.inputs.pfam.pfam_uniprot.rst", "_autosummary/pypath.inputs.phobius.rst", "_autosummary/pypath.inputs.phobius.phobius_annotations.rst", "_autosummary/pypath.inputs.phosphatome.rst", "_autosummary/pypath.inputs.phosphatome.phosphatome_annotations.rst", "_autosummary/pypath.inputs.phosphoelm.rst", "_autosummary/pypath.inputs.phosphoelm.phosphoelm_enzyme_substrate.rst", "_autosummary/pypath.inputs.phosphoelm.phosphoelm_interactions.rst", "_autosummary/pypath.inputs.phosphoelm.phosphoelm_kinases.rst", "_autosummary/pypath.inputs.phosphonetworks.rst", "_autosummary/pypath.inputs.phosphonetworks.phosphonetworks_enzyme_substrate.rst", "_autosummary/pypath.inputs.phosphonetworks.phosphonetworks_interactions.rst", "_autosummary/pypath.inputs.phosphopoint.rst", "_autosummary/pypath.inputs.phosphopoint.phosphopoint_directions.rst", "_autosummary/pypath.inputs.phosphopoint.phosphopoint_interactions.rst", "_autosummary/pypath.inputs.phosphosite.rst", "_autosummary/pypath.inputs.phosphosite.phosphosite_directions.rst", "_autosummary/pypath.inputs.phosphosite.phosphosite_enzyme_substrate.rst", "_autosummary/pypath.inputs.phosphosite.phosphosite_interactions.rst", "_autosummary/pypath.inputs.phosphosite.phosphosite_interactions_all.rst", "_autosummary/pypath.inputs.phosphosite.phosphosite_interactions_curated.rst", "_autosummary/pypath.inputs.phosphosite.phosphosite_interactions_new.rst", "_autosummary/pypath.inputs.phosphosite.phosphosite_interactions_noref.rst", "_autosummary/pypath.inputs.phosphosite.phosphosite_ptm_orthology.rst", "_autosummary/pypath.inputs.phosphosite.phosphosite_ptms.rst", "_autosummary/pypath.inputs.phosphosite.phosphosite_regsites.rst", "_autosummary/pypath.inputs.phosphosite.phosphosite_regsites_one_organism.rst", "_autosummary/pypath.inputs.phosphosite.regsites_tab.rst", "_autosummary/pypath.inputs.pisa.rst", "_autosummary/pypath.inputs.pisa.PisaBond.rst", "_autosummary/pypath.inputs.pisa.pisa_bonds.rst", "_autosummary/pypath.inputs.pisa.pisa_interfaces.rst", "_autosummary/pypath.inputs.pro.rst", "_autosummary/pypath.inputs.pro.get_pro.rst", "_autosummary/pypath.inputs.pro.pro_mapping.rst", "_autosummary/pypath.inputs.progeny.rst", "_autosummary/pypath.inputs.progeny.progeny_annotations.rst", "_autosummary/pypath.inputs.progeny.progeny_raw.rst", "_autosummary/pypath.inputs.proteinatlas.rst", "_autosummary/pypath.inputs.proteinatlas.get_proteinatlas.rst", "_autosummary/pypath.inputs.proteinatlas.proteinatlas_annotations.rst", "_autosummary/pypath.inputs.proteinatlas.proteinatlas_secretome_annotations.rst", "_autosummary/pypath.inputs.proteinatlas.proteinatlas_subcellular_annotations.rst", "_autosummary/pypath.inputs.proteins.rst", "_autosummary/pypath.inputs.proteins.variants.rst", "_autosummary/pypath.inputs.protmapper.rst", "_autosummary/pypath.inputs.protmapper.get_protmapper.rst", "_autosummary/pypath.inputs.protmapper.protmapper_enzyme_substrate.rst", "_autosummary/pypath.inputs.protmapper.protmapper_interactions.rst", "_autosummary/pypath.inputs.pubchem.rst", "_autosummary/pypath.inputs.pubchem.pubchem_mapping.rst", "_autosummary/pypath.inputs.pubmed.rst", "_autosummary/pypath.inputs.pubmed.get_pmid.rst", "_autosummary/pypath.inputs.pubmed.get_pubmeds.rst", "_autosummary/pypath.inputs.pubmed.only_pmids.rst", "_autosummary/pypath.inputs.pubmed.open_pubmed.rst", "_autosummary/pypath.inputs.pubmed.pmids_dict.rst", "_autosummary/pypath.inputs.pubmed.pmids_list.rst", "_autosummary/pypath.inputs.ramilowski2015.rst", "_autosummary/pypath.inputs.ramilowski2015.ramilowski_interactions.rst", "_autosummary/pypath.inputs.ramilowski2015.ramilowski_locations.rst", "_autosummary/pypath.inputs.rdata.rst", "_autosummary/pypath.inputs.reaction.rst", "_autosummary/pypath.inputs.reaction.acsn_biopax.rst", "_autosummary/pypath.inputs.reaction.acsn_interactions_2.rst", "_autosummary/pypath.inputs.reaction.get_acsn_effects.rst", "_autosummary/pypath.inputs.reaction.get_controls.rst", "_autosummary/pypath.inputs.reaction.get_interactions.rst", "_autosummary/pypath.inputs.reaction.get_reactions.rst", "_autosummary/pypath.inputs.reaction.get_soup.rst", "_autosummary/pypath.inputs.reaction.panther_biopax.rst", "_autosummary/pypath.inputs.reaction.panther_interactions.rst", "_autosummary/pypath.inputs.reaction.pid_biopax.rst", "_autosummary/pypath.inputs.reaction.pid_interactions.rst", "_autosummary/pypath.inputs.reaction.process_complex.rst", "_autosummary/pypath.inputs.reaction.process_controls.rst", "_autosummary/pypath.inputs.reaction.process_reactions.rst", "_autosummary/pypath.inputs.reaction.reactions_biopax.rst", "_autosummary/pypath.inputs.reaction.reactome_biopax.rst", "_autosummary/pypath.inputs.reaction.reactome_bs.rst", "_autosummary/pypath.inputs.reaction.reactome_interactions.rst", "_autosummary/pypath.inputs.reaction.reactome_sbml.rst", "_autosummary/pypath.inputs.scconnect.rst", "_autosummary/pypath.inputs.scconnect.scconnect_annotations.rst", "_autosummary/pypath.inputs.scconnect.scconnect_complexes.rst", "_autosummary/pypath.inputs.scconnect.scconnect_interactions.rst", "_autosummary/pypath.inputs.science.rst", "_autosummary/pypath.inputs.science.science_download.rst", "_autosummary/pypath.inputs.signalink.rst", "_autosummary/pypath.inputs.signalink.signalink_annotations.rst", "_autosummary/pypath.inputs.signalink.signalink_function_annotations.rst", "_autosummary/pypath.inputs.signalink.signalink_interactions.rst", "_autosummary/pypath.inputs.signalink.signalink_pathway_annotations.rst", "_autosummary/pypath.inputs.signor.rst", "_autosummary/pypath.inputs.signor.signor_complexes.rst", "_autosummary/pypath.inputs.signor.signor_enzyme_substrate.rst", "_autosummary/pypath.inputs.signor.signor_interactions.rst", "_autosummary/pypath.inputs.signor.signor_pathway_annotations.rst", "_autosummary/pypath.inputs.signor.signor_pathways.rst", "_autosummary/pypath.inputs.signor.signor_protein_families.rst", "_autosummary/pypath.inputs.spike.rst", "_autosummary/pypath.inputs.spike.spike_complexes.rst", "_autosummary/pypath.inputs.spike.spike_interactions.rst", "_autosummary/pypath.inputs.stitch.rst", "_autosummary/pypath.inputs.stitch.stitch_actions_interactions.rst", "_autosummary/pypath.inputs.stitch.stitch_links_interactions.rst", "_autosummary/pypath.inputs.string.rst", "_autosummary/pypath.inputs.string.string_effects.rst", "_autosummary/pypath.inputs.string.string_links_interactions.rst", "_autosummary/pypath.inputs.string.string_physical_interactions.rst", "_autosummary/pypath.inputs.string.string_species.rst", "_autosummary/pypath.inputs.surfaceome.rst", "_autosummary/pypath.inputs.surfaceome.surfaceome_annotations.rst", "_autosummary/pypath.inputs.switches_elm.rst", "_autosummary/pypath.inputs.switches_elm.get_switches_elm.rst", "_autosummary/pypath.inputs.talklr.rst", "_autosummary/pypath.inputs.talklr.talklr_annotations.rst", "_autosummary/pypath.inputs.talklr.talklr_interactions.rst", "_autosummary/pypath.inputs.talklr.talklr_raw.rst", "_autosummary/pypath.inputs.tcdb.rst", "_autosummary/pypath.inputs.tcdb.tcdb_annotations.rst", "_autosummary/pypath.inputs.tcdb.tcdb_classes.rst", "_autosummary/pypath.inputs.tcdb.tcdb_families.rst", "_autosummary/pypath.inputs.tfcensus.rst", "_autosummary/pypath.inputs.tfcensus.tfcensus_annotations.rst", "_autosummary/pypath.inputs.threedcomplex.rst", "_autosummary/pypath.inputs.threedcomplex.threedcomplex_chains.rst", "_autosummary/pypath.inputs.threedcomplex.threedcomplex_complexes.rst", "_autosummary/pypath.inputs.threedcomplex.threedcomplex_contacts.rst", "_autosummary/pypath.inputs.threedcomplex.threedcomplex_ddi.rst", "_autosummary/pypath.inputs.threedcomplex.threedcomplex_nresidues.rst", "_autosummary/pypath.inputs.threedid.rst", "_autosummary/pypath.inputs.threedid.get_3did.rst", "_autosummary/pypath.inputs.threedid.get_3did_ddi.rst", "_autosummary/pypath.inputs.threedid.get_3did_dmi.rst", "_autosummary/pypath.inputs.threedid.process_3did_dmi.rst", "_autosummary/pypath.inputs.topdb.rst", "_autosummary/pypath.inputs.topdb.topdb_annotations.rst", "_autosummary/pypath.inputs.transmir.rst", "_autosummary/pypath.inputs.transmir.transmir_interactions.rst", "_autosummary/pypath.inputs.trip.rst", "_autosummary/pypath.inputs.trip.take_a_trip.rst", "_autosummary/pypath.inputs.trip.trip_find_uniprot.rst", "_autosummary/pypath.inputs.trip.trip_get_uniprot.rst", "_autosummary/pypath.inputs.trip.trip_interactions.rst", "_autosummary/pypath.inputs.trip.trip_process.rst", "_autosummary/pypath.inputs.trip.trip_process_table.rst", "_autosummary/pypath.inputs.unichem.rst", "_autosummary/pypath.inputs.unichem.info.rst", "_autosummary/pypath.inputs.unichem.unichem_info.rst", "_autosummary/pypath.inputs.unichem.unichem_mapping.rst", "_autosummary/pypath.inputs.unichem.unichem_sources.rst", "_autosummary/pypath.inputs.uniprot.rst", "_autosummary/pypath.inputs.uniprot.Taxon.rst", "_autosummary/pypath.inputs.uniprot.UniprotRecordHistory.rst", "_autosummary/pypath.inputs.uniprot.all_swissprots.rst", "_autosummary/pypath.inputs.uniprot.all_trembls.rst", "_autosummary/pypath.inputs.uniprot.all_uniprots.rst", "_autosummary/pypath.inputs.uniprot.deleted_uniprot_genesymbol.rst", "_autosummary/pypath.inputs.uniprot.get_db.rst", "_autosummary/pypath.inputs.uniprot.get_uniprot_sec.rst", "_autosummary/pypath.inputs.uniprot.init_db.rst", "_autosummary/pypath.inputs.uniprot.is_swissprot.rst", "_autosummary/pypath.inputs.uniprot.is_trembl.rst", "_autosummary/pypath.inputs.uniprot.is_uniprot.rst", "_autosummary/pypath.inputs.uniprot.protein_datasheet.rst", "_autosummary/pypath.inputs.uniprot.swissprot_deleted.rst", "_autosummary/pypath.inputs.uniprot.trembl_deleted.rst", "_autosummary/pypath.inputs.uniprot.uniprot_data.rst", "_autosummary/pypath.inputs.uniprot.uniprot_deleted.rst", "_autosummary/pypath.inputs.uniprot.uniprot_families.rst", "_autosummary/pypath.inputs.uniprot.uniprot_history.rst", "_autosummary/pypath.inputs.uniprot.uniprot_history_recent_datasheet.rst", "_autosummary/pypath.inputs.uniprot.uniprot_keywords.rst", "_autosummary/pypath.inputs.uniprot.uniprot_locations.rst", "_autosummary/pypath.inputs.uniprot.uniprot_ncbi_taxids.rst", "_autosummary/pypath.inputs.uniprot.uniprot_ncbi_taxids_2.rst", "_autosummary/pypath.inputs.uniprot.uniprot_preprocess.rst", "_autosummary/pypath.inputs.uniprot.uniprot_recent_version.rst", "_autosummary/pypath.inputs.uniprot.uniprot_taxonomy.rst", "_autosummary/pypath.inputs.uniprot.uniprot_tissues.rst", "_autosummary/pypath.inputs.uniprot.uniprot_topology.rst", "_autosummary/pypath.inputs.uniprot.valid_uniprot.rst", "_autosummary/pypath.inputs.wang.rst", "_autosummary/pypath.inputs.wang.cui_interactions.rst", "_autosummary/pypath.inputs.wang.hsn_interactions.rst", "_autosummary/pypath.inputs.wang.wang_annotations.rst", "_autosummary/pypath.inputs.wang.wang_interactions.rst", "_autosummary/pypath.inputs.wojtowicz2020.rst", "_autosummary/pypath.inputs.wojtowicz2020.wojtowicz2020_interactions.rst", "_autosummary/pypath.inputs.wojtowicz2020.wojtowicz2020_raw.rst", "_autosummary/pypath.inputs.zhong2015.rst", "_autosummary/pypath.inputs.zhong2015.zhong2015_annotations.rst", "_autosummary/pypath.internals.rst", "_autosummary/pypath.internals.annot_formats.rst", "_autosummary/pypath.internals.annot_formats.AnnotDef.rst", "_autosummary/pypath.internals.annot_formats.AnnotDefKey.rst", "_autosummary/pypath.internals.annot_formats.AnnotOp.rst", "_autosummary/pypath.internals.annot_formats.AnnotationGroup.rst", "_autosummary/pypath.internals.input_formats.rst", "_autosummary/pypath.internals.input_formats.ArrayMapping.rst", "_autosummary/pypath.internals.input_formats.BiomartMapping.rst", "_autosummary/pypath.internals.input_formats.FileMapping.rst", "_autosummary/pypath.internals.input_formats.MappingInput.rst", "_autosummary/pypath.internals.input_formats.NetworkInput.rst", "_autosummary/pypath.internals.input_formats.PickleMapping.rst", "_autosummary/pypath.internals.input_formats.ProMapping.rst", "_autosummary/pypath.internals.input_formats.ReadList.rst", "_autosummary/pypath.internals.input_formats.UnichemMapping.rst", "_autosummary/pypath.internals.input_formats.UniprotListMapping.rst", "_autosummary/pypath.internals.input_formats.UniprotMapping.rst", "_autosummary/pypath.internals.intera.rst", "_autosummary/pypath.internals.intera.Complex.rst", "_autosummary/pypath.internals.intera.Domain.rst", "_autosummary/pypath.internals.intera.DomainDomain.rst", "_autosummary/pypath.internals.intera.DomainMotif.rst", "_autosummary/pypath.internals.intera.Interface.rst", "_autosummary/pypath.internals.intera.Motif.rst", "_autosummary/pypath.internals.intera.Ptm.rst", "_autosummary/pypath.internals.intera.Regulation.rst", "_autosummary/pypath.internals.intera.Residue.rst", "_autosummary/pypath.internals.license.rst", "_autosummary/pypath.internals.license.License.rst", "_autosummary/pypath.internals.license.LicenseAttrib.rst", "_autosummary/pypath.internals.license.LicenseFeature.rst", "_autosummary/pypath.internals.license.LicensePurpose.rst", "_autosummary/pypath.internals.license.LicenseSharing.rst", "_autosummary/pypath.internals.maps.rst", "_autosummary/pypath.internals.refs.rst", "_autosummary/pypath.internals.refs.Reference.rst", "_autosummary/pypath.internals.refs.get_pubmed_data.rst", "_autosummary/pypath.internals.resource.rst", "_autosummary/pypath.internals.resource.AbstractResource.rst", "_autosummary/pypath.internals.resource.EnzymeSubstrateResource.rst", "_autosummary/pypath.internals.resource.EnzymeSubstrateResourceKey.rst", "_autosummary/pypath.internals.resource.NetworkResource.rst", "_autosummary/pypath.internals.resource.NetworkResourceKey.rst", "_autosummary/pypath.internals.resource.ResourceAttributes.rst", "_autosummary/pypath.legacy.rst", "_autosummary/pypath.legacy.db_categories.rst", "_autosummary/pypath.legacy.db_categories.get_categories.rst", "_autosummary/pypath.legacy.db_categories.get_category.rst", "_autosummary/pypath.log.rst", "_autosummary/pypath.obsolete.rst", "_autosummary/pypath.obsolete.colorgen.rst", "_autosummary/pypath.obsolete.colorgen.bias.rst", "_autosummary/pypath.obsolete.colorgen.colormix.rst", "_autosummary/pypath.obsolete.colorgen.dec2hex.rst", "_autosummary/pypath.obsolete.colorgen.embl_colors.rst", "_autosummary/pypath.obsolete.colorgen.genhsv.rst", "_autosummary/pypath.obsolete.colorgen.genrgb.rst", "_autosummary/pypath.obsolete.colorgen.getfracs.rst", "_autosummary/pypath.obsolete.colorgen.gethexrgbs.rst", "_autosummary/pypath.obsolete.colorgen.gethsvs.rst", "_autosummary/pypath.obsolete.colorgen.getrgbs.rst", "_autosummary/pypath.obsolete.colorgen.hex2dec.rst", "_autosummary/pypath.obsolete.colorgen.hex2rgb.rst", "_autosummary/pypath.obsolete.colorgen.read_palette.rst", "_autosummary/pypath.obsolete.colorgen.rgb1.rst", "_autosummary/pypath.obsolete.colorgen.rgb256.rst", "_autosummary/pypath.obsolete.colorgen.rgb2hex.rst", "_autosummary/pypath.obsolete.colorgen.zenos_dichotomy.rst", "_autosummary/pypath.obsolete.enrich.rst", "_autosummary/pypath.obsolete.enrich.Enrichment.rst", "_autosummary/pypath.obsolete.enrich.EnrichmentSet.rst", "_autosummary/pypath.obsolete.gsea.rst", "_autosummary/pypath.obsolete.gsea.GSEA.rst", "_autosummary/pypath.obsolete.gsea.GSEABinaryEnrichmentSet.rst", "_autosummary/pypath.obsolete.linkcomm.rst", "_autosummary/pypath.obsolete.linkcomm.Dc.rst", "_autosummary/pypath.obsolete.linkcomm.HLC.rst", "_autosummary/pypath.obsolete.linkcomm.read_edgelist_unweighted.rst", "_autosummary/pypath.obsolete.linkcomm.read_edgelist_weighted.rst", "_autosummary/pypath.obsolete.linkcomm.similarities_unweighted.rst", "_autosummary/pypath.obsolete.linkcomm.similarities_weighted.rst", "_autosummary/pypath.obsolete.linkcomm.swap.rst", "_autosummary/pypath.obsolete.linkcomm.write_dendro.rst", "_autosummary/pypath.obsolete.linkcomm.write_edge2cid.rst", "_autosummary/pypath.omnipath.rst", "_autosummary/pypath.omnipath.app.rst", "_autosummary/pypath.omnipath.app.DatabaseManager.rst", "_autosummary/pypath.omnipath.databases.rst", "_autosummary/pypath.omnipath.databases.build.rst", "_autosummary/pypath.omnipath.databases.class_and_param.rst", "_autosummary/pypath.omnipath.databases.define.rst", "_autosummary/pypath.omnipath.databases.define.DatabaseClass.rst", "_autosummary/pypath.omnipath.databases.define.DatabaseDefinition.rst", "_autosummary/pypath.omnipath.databases.define.DatabaseDefinitionManager.rst", "_autosummary/pypath.omnipath.databases.get_manager.rst", "_autosummary/pypath.omnipath.databases.init_manager.rst", "_autosummary/pypath.omnipath.export.rst", "_autosummary/pypath.omnipath.export.Export.rst", "_autosummary/pypath.omnipath.init.rst", "_autosummary/pypath.omnipath.param.rst", "_autosummary/pypath.omnipath.param.curated_ppi_resources.rst", "_autosummary/pypath.omnipath.param.tf_target_resources.rst", "_autosummary/pypath.omnipath.server.rst", "_autosummary/pypath.omnipath.server.build.rst", "_autosummary/pypath.omnipath.server.build.WebserviceTables.rst", "_autosummary/pypath.omnipath.server.generate_about_page.rst", "_autosummary/pypath.omnipath.server.generate_about_page.export_licenses.rst", "_autosummary/pypath.omnipath.server.generate_about_page.generate_about_html.rst", "_autosummary/pypath.omnipath.server.generate_about_page.resource_list_latex.rst", "_autosummary/pypath.omnipath.server.generate_about_page.write_html.rst", "_autosummary/pypath.resources.rst", "_autosummary/pypath.resources.controller.rst", "_autosummary/pypath.resources.controller.ResourceController.rst", "_autosummary/pypath.resources.data.rst", "_autosummary/pypath.resources.data_formats.rst", "_autosummary/pypath.resources.data_formats.ROOT.rst", "_autosummary/pypath.resources.data_formats.activity_flow.rst", "_autosummary/pypath.resources.data_formats.enzyme_substrate.rst", "_autosummary/pypath.resources.data_formats.interaction.rst", "_autosummary/pypath.resources.data_formats.interaction_htp.rst", "_autosummary/pypath.resources.data_formats.obsolate.rst", "_autosummary/pypath.resources.data_formats.pathway_bad.rst", "_autosummary/pypath.resources.data_formats.reaction_pc.rst", "_autosummary/pypath.resources.data_formats.transcription_deprecated.rst", "_autosummary/pypath.resources.data_formats.transcription_onebyone.rst", "_autosummary/pypath.resources.descriptions.rst", "_autosummary/pypath.resources.descriptions.export_licenses.rst", "_autosummary/pypath.resources.descriptions.gen_html.rst", "_autosummary/pypath.resources.descriptions.resource_list_latex.rst", "_autosummary/pypath.resources.descriptions.write_html.rst", "_autosummary/pypath.resources.get_controller.rst", "_autosummary/pypath.resources.licenses.rst", "_autosummary/pypath.resources.licenses.Licenses.rst", "_autosummary/pypath.resources.network.rst", "_autosummary/pypath.resources.network.dorothea_expand_levels.rst", "_autosummary/pypath.resources.urls.rst", "_autosummary/pypath.share.rst", "_autosummary/pypath.share.cache.rst", "_autosummary/pypath.share.cache.cache_item.rst", "_autosummary/pypath.share.cache.get_cachedir.rst", "_autosummary/pypath.share.common.rst", "_autosummary/pypath.share.common.add_to_list.rst", "_autosummary/pypath.share.common.add_to_set.rst", "_autosummary/pypath.share.common.at_least_in.rst", "_autosummary/pypath.share.common.clean_dict.rst", "_autosummary/pypath.share.common.combine_attrs.rst", "_autosummary/pypath.share.common.console.rst", "_autosummary/pypath.share.common.decode.rst", "_autosummary/pypath.share.common.del_empty.rst", "_autosummary/pypath.share.common.df_memory_usage.rst", "_autosummary/pypath.share.common.dict_collapse_keys.rst", "_autosummary/pypath.share.common.dict_counts.rst", "_autosummary/pypath.share.common.dict_diff.rst", "_autosummary/pypath.share.common.dict_expand_keys.rst", "_autosummary/pypath.share.common.dict_percent.rst", "_autosummary/pypath.share.common.dict_set_path.rst", "_autosummary/pypath.share.common.dict_set_percent.rst", "_autosummary/pypath.share.common.dict_str.rst", "_autosummary/pypath.share.common.dict_subtotals.rst", "_autosummary/pypath.share.common.dict_sym_diff.rst", "_autosummary/pypath.share.common.dict_union.rst", "_autosummary/pypath.share.common.eq.rst", "_autosummary/pypath.share.common.filtr.rst", "_autosummary/pypath.share.common.first.rst", "_autosummary/pypath.share.common.flat_list.rst", "_autosummary/pypath.share.common.float_or_nan.rst", "_autosummary/pypath.share.common.gen_session_id.rst", "_autosummary/pypath.share.common.get.rst", "_autosummary/pypath.share.common.get_args.rst", "_autosummary/pypath.share.common.is_float.rst", "_autosummary/pypath.share.common.is_int.rst", "_autosummary/pypath.share.common.is_str.rst", "_autosummary/pypath.share.common.jaccard_index.rst", "_autosummary/pypath.share.common.join_dicts.rst", "_autosummary/pypath.share.common.latex_table.rst", "_autosummary/pypath.share.common.match.rst", "_autosummary/pypath.share.common.maybe_in_dict.rst", "_autosummary/pypath.share.common.md5.rst", "_autosummary/pypath.share.common.merge_dicts.rst", "_autosummary/pypath.share.common.n_shared_elements.rst", "_autosummary/pypath.share.common.n_shared_foreach.rst", "_autosummary/pypath.share.common.n_shared_total.rst", "_autosummary/pypath.share.common.n_shared_unique_foreach.rst", "_autosummary/pypath.share.common.n_unique_elements.rst", "_autosummary/pypath.share.common.n_unique_foreach.rst", "_autosummary/pypath.share.common.n_unique_total.rst", "_autosummary/pypath.share.common.negate.rst", "_autosummary/pypath.share.common.none_or_len.rst", "_autosummary/pypath.share.common.paginate.rst", "_autosummary/pypath.share.common.prefix.rst", "_autosummary/pypath.share.common.print_table.rst", "_autosummary/pypath.share.common.re_safe_groups.rst", "_autosummary/pypath.share.common.remove_prefix.rst", "_autosummary/pypath.share.common.rotate.rst", "_autosummary/pypath.share.common.sets_to_sorted_lists.rst", "_autosummary/pypath.share.common.sfirst.rst", "_autosummary/pypath.share.common.shared_elements.rst", "_autosummary/pypath.share.common.shared_foreach.rst", "_autosummary/pypath.share.common.shared_total.rst", "_autosummary/pypath.share.common.shared_unique.rst", "_autosummary/pypath.share.common.shared_unique_foreach.rst", "_autosummary/pypath.share.common.shared_unique_total.rst", "_autosummary/pypath.share.common.silent.rst", "_autosummary/pypath.share.common.simpson_index.rst", "_autosummary/pypath.share.common.simpson_index_counts.rst", "_autosummary/pypath.share.common.something.rst", "_autosummary/pypath.share.common.sorensen_index.rst", "_autosummary/pypath.share.common.suffix.rst", "_autosummary/pypath.share.common.sum_dicts.rst", "_autosummary/pypath.share.common.swap_dict.rst", "_autosummary/pypath.share.common.swap_dict_simple.rst", "_autosummary/pypath.share.common.swap_suffix.rst", "_autosummary/pypath.share.common.table_add_row_numbers.rst", "_autosummary/pypath.share.common.table_format.rst", "_autosummary/pypath.share.common.table_textwrap.rst", "_autosummary/pypath.share.common.to_list.rst", "_autosummary/pypath.share.common.to_set.rst", "_autosummary/pypath.share.common.try_bool.rst", "_autosummary/pypath.share.common.try_float.rst", "_autosummary/pypath.share.common.tsv_table.rst", "_autosummary/pypath.share.common.uniq_list.rst", "_autosummary/pypath.share.common.uniq_list1.rst", "_autosummary/pypath.share.common.uniq_list2.rst", "_autosummary/pypath.share.common.uniq_ord_list.rst", "_autosummary/pypath.share.common.unique_elements.rst", "_autosummary/pypath.share.common.unique_foreach.rst", "_autosummary/pypath.share.common.unique_list.rst", "_autosummary/pypath.share.common.unique_total.rst", "_autosummary/pypath.share.common.upper0.rst", "_autosummary/pypath.share.common.values.rst", "_autosummary/pypath.share.common.wcl.rst", "_autosummary/pypath.share.common.wrap_truncate.rst", "_autosummary/pypath.share.constants.rst", "_autosummary/pypath.share.curl.rst", "_autosummary/pypath.share.curl.Curl.rst", "_autosummary/pypath.share.curl.FileOpener.rst", "_autosummary/pypath.share.curl.RemoteFile.rst", "_autosummary/pypath.share.curl.cache_delete_off.rst", "_autosummary/pypath.share.curl.cache_delete_on.rst", "_autosummary/pypath.share.curl.cache_off.rst", "_autosummary/pypath.share.curl.cache_on.rst", "_autosummary/pypath.share.curl.cache_print_off.rst", "_autosummary/pypath.share.curl.cache_print_on.rst", "_autosummary/pypath.share.curl.debug_off.rst", "_autosummary/pypath.share.curl.debug_on.rst", "_autosummary/pypath.share.curl.dryrun_off.rst", "_autosummary/pypath.share.curl.dryrun_on.rst", "_autosummary/pypath.share.curl.is_url.rst", "_autosummary/pypath.share.curl.preserve_off.rst", "_autosummary/pypath.share.curl.preserve_on.rst", "_autosummary/pypath.share.log.rst", "_autosummary/pypath.share.log.Logger.rst", "_autosummary/pypath.share.log.new_logger.rst", "_autosummary/pypath.share.progress.rst", "_autosummary/pypath.share.progress.Progress.rst", "_autosummary/pypath.share.session.rst", "_autosummary/pypath.share.session.Logger.rst", "_autosummary/pypath.share.session.Session.rst", "_autosummary/pypath.share.session.get_log.rst", "_autosummary/pypath.share.session.get_session.rst", "_autosummary/pypath.share.session.new_session.rst", "_autosummary/pypath.share.settings.rst", "_autosummary/pypath.share.settings.Settings.rst", "_autosummary/pypath.share.settings.context.rst", "_autosummary/pypath.share.settings.get.rst", "_autosummary/pypath.share.settings.setup.rst", "_autosummary/pypath.utils.rst", "_autosummary/pypath.utils.go.rst", "_autosummary/pypath.utils.go.GOAnnotation.rst", "_autosummary/pypath.utils.go.GOCustomAnnotation.rst", "_autosummary/pypath.utils.go.GeneOntology.rst", "_autosummary/pypath.utils.go.annotate.rst", "_autosummary/pypath.utils.go.get_db.rst", "_autosummary/pypath.utils.go.init_db.rst", "_autosummary/pypath.utils.go.load_go.rst", "_autosummary/pypath.utils.homology.rst", "_autosummary/pypath.utils.homology.HomologyManager.rst", "_autosummary/pypath.utils.homology.Ortholog.rst", "_autosummary/pypath.utils.homology.ProteinHomology.rst", "_autosummary/pypath.utils.homology.Proteomes.rst", "_autosummary/pypath.utils.homology.PtmHomology.rst", "_autosummary/pypath.utils.homology.SequenceContainer.rst", "_autosummary/pypath.utils.homology.get_df.rst", "_autosummary/pypath.utils.homology.get_dict.rst", "_autosummary/pypath.utils.homology.get_manager.rst", "_autosummary/pypath.utils.homology.init.rst", "_autosummary/pypath.utils.homology.translate.rst", "_autosummary/pypath.utils.homology.translate_df.rst", "_autosummary/pypath.utils.mapping.rst", "_autosummary/pypath.utils.mapping.MapReader.rst", "_autosummary/pypath.utils.mapping.Mapper.rst", "_autosummary/pypath.utils.mapping.MappingTable.rst", "_autosummary/pypath.utils.mapping.MappingTableKey.rst", "_autosummary/pypath.utils.mapping.UNIPROT_ID_TYPES.rst", "_autosummary/pypath.utils.mapping.get_mapper.rst", "_autosummary/pypath.utils.mapping.guess_type.rst", "_autosummary/pypath.utils.mapping.id_from_label.rst", "_autosummary/pypath.utils.mapping.id_from_label0.rst", "_autosummary/pypath.utils.mapping.init.rst", "_autosummary/pypath.utils.mapping.label.rst", "_autosummary/pypath.utils.mapping.map_name.rst", "_autosummary/pypath.utils.mapping.map_name0.rst", "_autosummary/pypath.utils.mapping.map_names.rst", "_autosummary/pypath.utils.pdb.rst", "_autosummary/pypath.utils.pdb.Residue.rst", "_autosummary/pypath.utils.pdb.ResidueMapper.rst", "_autosummary/pypath.utils.pdb.Segment.rst", "_autosummary/pypath.utils.pdb.residue_pdb.rst", "_autosummary/pypath.utils.proteomicsdb.rst", "_autosummary/pypath.utils.proteomicsdb.ProteomicsDB.rst", "_autosummary/pypath.utils.pyreact.rst", "_autosummary/pypath.utils.pyreact.AttributeHandler.rst", "_autosummary/pypath.utils.pyreact.BioPaxReader.rst", "_autosummary/pypath.utils.pyreact.Complex.rst", "_autosummary/pypath.utils.pyreact.ComplexVariations.rst", "_autosummary/pypath.utils.pyreact.Control.rst", "_autosummary/pypath.utils.pyreact.Entity.rst", "_autosummary/pypath.utils.pyreact.EntitySet.rst", "_autosummary/pypath.utils.pyreact.Intersecting.rst", "_autosummary/pypath.utils.pyreact.Protein.rst", "_autosummary/pypath.utils.pyreact.ProteinFamily.rst", "_autosummary/pypath.utils.pyreact.PyReact.rst", "_autosummary/pypath.utils.pyreact.Reaction.rst", "_autosummary/pypath.utils.pyreact.ReactionSide.rst", "_autosummary/pypath.utils.pyreact.Reference.rst", "_autosummary/pypath.utils.reflists.rst", "_autosummary/pypath.utils.reflists.ReferenceListManager.rst", "_autosummary/pypath.utils.reflists.check.rst", "_autosummary/pypath.utils.reflists.get_manager.rst", "_autosummary/pypath.utils.reflists.get_reflist.rst", "_autosummary/pypath.utils.reflists.init.rst", "_autosummary/pypath.utils.reflists.is_not.rst", "_autosummary/pypath.utils.reflists.select.rst", "_autosummary/pypath.utils.residues.rst", "_autosummary/pypath.utils.residues.ResidueMapper.rst", "_autosummary/pypath.utils.seq.rst", "_autosummary/pypath.utils.seq.Pfam.rst", "_autosummary/pypath.utils.seq.Resource.rst", "_autosummary/pypath.utils.seq.Seq.rst", "_autosummary/pypath.utils.seq.get_isoforms.rst", "_autosummary/pypath.utils.seq.read_fasta.rst", "_autosummary/pypath.utils.seq.swissprot_seq.rst", "_autosummary/pypath.utils.taxonomy.rst", "_autosummary/pypath.utils.taxonomy.ensure_common_name.rst", "_autosummary/pypath.utils.taxonomy.ensure_ensembl_name.rst", "_autosummary/pypath.utils.taxonomy.ensure_latin_name.rst", "_autosummary/pypath.utils.taxonomy.ensure_ncbi_tax_id.rst", "_autosummary/pypath.utils.taxonomy.get_db.rst", "_autosummary/pypath.utils.taxonomy.init_db.rst", "_autosummary/pypath.utils.taxonomy.short_latin_names.rst", "_autosummary/pypath.utils.taxonomy.shorten_latin_name.rst", "_autosummary/pypath.utils.taxonomy.taxid_from_common_name.rst", "_autosummary/pypath.utils.taxonomy.taxid_from_dbptm_taxon_name.rst", "_autosummary/pypath.utils.taxonomy.taxid_from_ensembl_name.rst", "_autosummary/pypath.utils.taxonomy.taxid_from_latin_name.rst", "_autosummary/pypath.utils.taxonomy.taxid_from_nonstandard.rst", "_autosummary/pypath.utils.taxonomy.uniprot_taxid.rst", "_autosummary/pypath.utils.unichem.rst", "_autosummary/pypath.utils.unichem.Unichem.rst", "_autosummary/pypath.utils.uniprot.rst", "_autosummary/pypath.utils.uniprot.UniprotProtein.rst", "_autosummary/pypath.utils.uniprot.ac.rst", "_autosummary/pypath.utils.uniprot.activity_regulation.rst", "_autosummary/pypath.utils.uniprot.activity_regulation_with_xrefs.rst", "_autosummary/pypath.utils.uniprot.alternative_products.rst", "_autosummary/pypath.utils.uniprot.alternative_products_with_xrefs.rst", "_autosummary/pypath.utils.uniprot.browse.rst", "_autosummary/pypath.utils.uniprot.catalytic_activity.rst", "_autosummary/pypath.utils.uniprot.catalytic_activity_with_xrefs.rst", "_autosummary/pypath.utils.uniprot.collect.rst", "_autosummary/pypath.utils.uniprot.databases.rst", "_autosummary/pypath.utils.uniprot.disease.rst", "_autosummary/pypath.utils.uniprot.disease_with_xrefs.rst", "_autosummary/pypath.utils.uniprot.ec.rst", "_autosummary/pypath.utils.uniprot.features_table.rst", "_autosummary/pypath.utils.uniprot.full_name.rst", "_autosummary/pypath.utils.uniprot.function.rst", "_autosummary/pypath.utils.uniprot.function_genecards.rst", "_autosummary/pypath.utils.uniprot.function_or_genecards.rst", "_autosummary/pypath.utils.uniprot.function_with_genecards.rst", "_autosummary/pypath.utils.uniprot.function_with_xrefs.rst", "_autosummary/pypath.utils.uniprot.genesymbol.rst", "_autosummary/pypath.utils.uniprot.has_tag.rst", "_autosummary/pypath.utils.uniprot.id.rst", "_autosummary/pypath.utils.uniprot.info.rst", "_autosummary/pypath.utils.uniprot.info_section.rst", "_autosummary/pypath.utils.uniprot.interaction.rst", "_autosummary/pypath.utils.uniprot.interaction_with_xrefs.rst", "_autosummary/pypath.utils.uniprot.is_reviewed.rst", "_autosummary/pypath.utils.uniprot.itertag.rst", "_autosummary/pypath.utils.uniprot.keywords.rst", "_autosummary/pypath.utils.uniprot.keywords_with_xrefs.rst", "_autosummary/pypath.utils.uniprot.length.rst", "_autosummary/pypath.utils.uniprot.lengths.rst", "_autosummary/pypath.utils.uniprot.load.rst", "_autosummary/pypath.utils.uniprot.organism.rst", "_autosummary/pypath.utils.uniprot.print_features.rst", "_autosummary/pypath.utils.uniprot.ptm.rst", "_autosummary/pypath.utils.uniprot.ptm_with_xrefs.rst", "_autosummary/pypath.utils.uniprot.query.rst", "_autosummary/pypath.utils.uniprot.reload.rst", "_autosummary/pypath.utils.uniprot.remove_xrefs.rst", "_autosummary/pypath.utils.uniprot.sequence.rst", "_autosummary/pypath.utils.uniprot.sequence_caution.rst", "_autosummary/pypath.utils.uniprot.sequence_caution_with_xrefs.rst", "_autosummary/pypath.utils.uniprot.similarity.rst", "_autosummary/pypath.utils.uniprot.similarity_with_xrefs.rst", "_autosummary/pypath.utils.uniprot.subcellular_location.rst", "_autosummary/pypath.utils.uniprot.subcellular_location_with_xrefs.rst", "_autosummary/pypath.utils.uniprot.subunit.rst", "_autosummary/pypath.utils.uniprot.subunit_with_xrefs.rst", "_autosummary/pypath.utils.uniprot.tissue_specificity.rst", "_autosummary/pypath.utils.uniprot.tissue_specificity_with_xrefs.rst", "_autosummary/pypath.utils.uniprot.update_databases.rst", "_autosummary/pypath.utils.uniprot.update_info.rst", "_autosummary/pypath.utils.uniprot.web_resource.rst", "_autosummary/pypath.utils.uniprot.web_resource_with_xrefs.rst", "_autosummary/pypath.utils.uniprot.weight.rst", "_autosummary/pypath.utils.uniprot.weights.rst", "_autosummary/pypath.visual.rst", "changelog.rst", "features.rst", "index.rst", "installation.rst", "releasehistory.rst", "webservice.rst"], "titles": ["pypath", "pypath.core", "pypath.core.annot", "pypath.core.annot.Adhesome", "pypath.core.annot.Almen2009", "pypath.core.annot.AnnotationBase", "pypath.core.annot.AnnotationTable", "pypath.core.annot.Baccin2019", "pypath.core.annot.Biogps", "pypath.core.annot.CancerGeneCensus", "pypath.core.annot.Cancerdrugsdb", "pypath.core.annot.Cancersea", "pypath.core.annot.CellPhoneDB", "pypath.core.annot.CellPhoneDBComplex", "pypath.core.annot.CellSurfaceProteinAtlas", "pypath.core.annot.CellSurfaceProteinAtlasCellType", "pypath.core.annot.Cellcall", "pypath.core.annot.Cellcellinteractions", "pypath.core.annot.Cellchatdb", "pypath.core.annot.CellchatdbComplex", "pypath.core.annot.Cellinker", "pypath.core.annot.CellinkerComplex", "pypath.core.annot.Celltalkdb", "pypath.core.annot.Celltypist", "pypath.core.annot.Comppi", "pypath.core.annot.Connectomedb", "pypath.core.annot.Corum", "pypath.core.annot.CorumFuncat", "pypath.core.annot.CorumGO", "pypath.core.annot.Cpad", "pypath.core.annot.CustomAnnotation", "pypath.core.annot.Cytosig", "pypath.core.annot.Dgidb", "pypath.core.annot.Disgenet", "pypath.core.annot.Embrace", "pypath.core.annot.Exocarta", "pypath.core.annot.GOCustomIntercell", "pypath.core.annot.GOIntercell", "pypath.core.annot.Gpcrdb", "pypath.core.annot.GuideToPharmacology", "pypath.core.annot.HPO", "pypath.core.annot.Hgnc", "pypath.core.annot.HpmrComplex", "pypath.core.annot.HumanPlasmaMembraneReceptome", "pypath.core.annot.HumanProteinAtlas", "pypath.core.annot.HumanProteinAtlasSecretome", "pypath.core.annot.HumanProteinAtlasSubcellular", "pypath.core.annot.Humancellmap", "pypath.core.annot.Icellnet", "pypath.core.annot.IcellnetComplex", "pypath.core.annot.Integrins", "pypath.core.annot.InterPro", "pypath.core.annot.Intogen", "pypath.core.annot.Italk", "pypath.core.annot.KeggPathways", "pypath.core.annot.KeggPathwaysPC", "pypath.core.annot.Kinasedotcom", "pypath.core.annot.Kirouac2010", "pypath.core.annot.Lambert2018", "pypath.core.annot.LigandReceptor", "pypath.core.annot.Locate", "pypath.core.annot.Lrdb", "pypath.core.annot.Matrisome", "pypath.core.annot.Matrixdb", "pypath.core.annot.Mcam", "pypath.core.annot.Membranome", "pypath.core.annot.Msigdb", "pypath.core.annot.NetpathPathways", "pypath.core.annot.Opm", "pypath.core.annot.Panglaodb", "pypath.core.annot.Phobius", "pypath.core.annot.Phosphatome", "pypath.core.annot.Progeny", "pypath.core.annot.Ramilowski2015", "pypath.core.annot.Ramilowski2015Location", "pypath.core.annot.Scconnect", "pypath.core.annot.ScconnectComplex", "pypath.core.annot.SignalinkFunctions", "pypath.core.annot.SignalinkPathways", "pypath.core.annot.SignorPathways", "pypath.core.annot.Surfaceome", "pypath.core.annot.Talklr", "pypath.core.annot.Tcdb", "pypath.core.annot.Tfcensus", "pypath.core.annot.Topdb", "pypath.core.annot.UniprotFamilies", "pypath.core.annot.UniprotKeywords", "pypath.core.annot.UniprotLocations", "pypath.core.annot.UniprotTissues", "pypath.core.annot.UniprotTopologies", "pypath.core.annot.Vesiclepedia", "pypath.core.annot.Wang", "pypath.core.annot.Zhong2015", "pypath.core.annot.get_db", "pypath.core.annot.init_db", "pypath.core.attrs", "pypath.core.attrs.AttributeHandler", "pypath.core.common", "pypath.core.common.filter_network_df", "pypath.core.complex", "pypath.core.complex.AbstractComplexResource", "pypath.core.complex.CellPhoneDB", "pypath.core.complex.Cellchatdb", "pypath.core.complex.Cellinker", "pypath.core.complex.Compleat", "pypath.core.complex.ComplexAggregator", "pypath.core.complex.ComplexPortal", "pypath.core.complex.Corum", "pypath.core.complex.GuideToPharmacology", "pypath.core.complex.Havugimana", "pypath.core.complex.Hpmr", "pypath.core.complex.Humap", "pypath.core.complex.Humap2", "pypath.core.complex.Icellnet", "pypath.core.complex.Kegg", "pypath.core.complex.Pdb", "pypath.core.complex.Signor", "pypath.core.complex.Spike", "pypath.core.complex.all_complexes", "pypath.core.complex.get_db", "pypath.core.complex.init_db", "pypath.core.entity", "pypath.core.entity.Entity", "pypath.core.entity.EntityKey", "pypath.core.entity.EntityList", "pypath.core.enz_sub", "pypath.core.enz_sub.EnzymeSubstrateAggregator", "pypath.core.enz_sub.EnzymeSubstrateHomologyProcessor", "pypath.core.enz_sub.EnzymeSubstrateProcessor", "pypath.core.enz_sub.get_db", "pypath.core.enz_sub.init_db", "pypath.core.evidence", "pypath.core.evidence.Evidence", "pypath.core.evidence.Evidences", "pypath.core.interaction", "pypath.core.interaction.Interaction", "pypath.core.interaction.InteractionDataFrameRecord", "pypath.core.interaction.InteractionKey", "pypath.core.intercell", "pypath.core.intercell.IntercellAnnotation", "pypath.core.intercell.get_db", "pypath.core.intercell.init_db", "pypath.core.intercell_annot", "pypath.core.intercell_annot.excludes", "pypath.core.network", "pypath.core.network.Network", "pypath.core.network.NetworkEntityCollection", "pypath.core.network.NetworkStatsRecord", "pypath.core.network.get_db", "pypath.core.network.init_db", "pypath.data", "pypath.disclaimer", "pypath.info", "pypath.inputs", "pypath.inputs.abs", "pypath.inputs.abs.abs_interactions", "pypath.inputs.acsn", "pypath.inputs.acsn.acsn_interactions", "pypath.inputs.acsn.acsn_interactions_sif", "pypath.inputs.adhesome", "pypath.inputs.adhesome.adhesome_annotations", "pypath.inputs.adhesome.adhesome_interactions", "pypath.inputs.almen2009", "pypath.inputs.almen2009.almen2009_annotations", "pypath.inputs.baccin2019", "pypath.inputs.baccin2019.baccin2019_annotations", "pypath.inputs.baccin2019.baccin2019_interactions", "pypath.inputs.biogps", "pypath.inputs.biogps.BiogpsDataset", "pypath.inputs.biogps.biogps_annotations", "pypath.inputs.biogps.biogps_datasets", "pypath.inputs.biogps.biogps_download", "pypath.inputs.biogps.biogps_download_all", "pypath.inputs.biogrid", "pypath.inputs.biogrid.biogrid_all_interactions", "pypath.inputs.biogrid.biogrid_interactions", "pypath.inputs.biomart", "pypath.inputs.biomart.biomart_homology", "pypath.inputs.biomart.biomart_microarray", "pypath.inputs.biomart.biomart_microarray_types", "pypath.inputs.biomart.biomart_microarrays", "pypath.inputs.biomart.biomart_query", "pypath.inputs.ca1", "pypath.inputs.ca1.ca1_interactions", "pypath.inputs.cancercellmap", "pypath.inputs.cancercellmap.ccmap_interactions", "pypath.inputs.cancerdrugsdb", "pypath.inputs.cancerdrugsdb.cancerdrugsdb_annotations", "pypath.inputs.cancerdrugsdb.cancerdrugsdb_download", "pypath.inputs.cancerdrugsdb.cancerdrugsdb_interactions", "pypath.inputs.cancersea", "pypath.inputs.cancersea.cancersea_annotations", "pypath.inputs.cell", "pypath.inputs.cell.cell_supplementary", "pypath.inputs.cellcall", "pypath.inputs.cellcall.cellcall_annotations", "pypath.inputs.cellcall.cellcall_download", "pypath.inputs.cellcall.cellcall_download_all", "pypath.inputs.cellcall.cellcall_interactions", "pypath.inputs.cellcellinteractions", "pypath.inputs.cellcellinteractions.cellcellinteractions_annotations", "pypath.inputs.cellchatdb", "pypath.inputs.cellchatdb.cellchatdb_annotations", "pypath.inputs.cellchatdb.cellchatdb_cofactors", "pypath.inputs.cellchatdb.cellchatdb_complexes", "pypath.inputs.cellchatdb.cellchatdb_download", "pypath.inputs.cellchatdb.cellchatdb_interactions", "pypath.inputs.cellinker", "pypath.inputs.cellinker.CellinkerInteraction", "pypath.inputs.cellinker.cellinker_annotations", "pypath.inputs.cellinker.cellinker_complex_annotations", "pypath.inputs.cellinker.cellinker_complexes", "pypath.inputs.cellinker.cellinker_complexes_raw", "pypath.inputs.cellinker.cellinker_lr_interactions", "pypath.inputs.cellinker.cellinker_lr_interactions_raw", "pypath.inputs.cellinker.cellinker_protein_annotations", "pypath.inputs.cellinker.cellinker_smol_interactions", "pypath.inputs.cellinker.cellinker_smol_interactions_raw", "pypath.inputs.cellinker.components_to_complex", "pypath.inputs.cellphonedb", "pypath.inputs.cellphonedb.CellPhoneDBAnnotation", "pypath.inputs.cellphonedb.cellphonedb_complex_annotations", "pypath.inputs.cellphonedb.cellphonedb_complexes", "pypath.inputs.cellphonedb.cellphonedb_interactions", "pypath.inputs.cellphonedb.cellphonedb_ligands_receptors", "pypath.inputs.cellphonedb.cellphonedb_protein_annotations", "pypath.inputs.celltalkdb", "pypath.inputs.celltalkdb.celltalkdb_annotations", "pypath.inputs.celltalkdb.celltalkdb_download", "pypath.inputs.celltalkdb.celltalkdb_interactions", "pypath.inputs.celltypist", "pypath.inputs.celltypist.celltypist_annotations", "pypath.inputs.chembl", "pypath.inputs.chembl.chembl_activities", "pypath.inputs.chembl.chembl_assays", "pypath.inputs.chembl.chembl_molecules", "pypath.inputs.chembl.chembl_targets", "pypath.inputs.common", "pypath.inputs.common.csv_sep_change", "pypath.inputs.common.glom_fields", "pypath.inputs.common.json_extract", "pypath.inputs.common.json_read", "pypath.inputs.common.read_table", "pypath.inputs.common.read_xls", "pypath.inputs.compleat", "pypath.inputs.compleat.compleat_complexes", "pypath.inputs.compleat.compleat_raw", "pypath.inputs.complexportal", "pypath.inputs.complexportal.complexportal_complexes", "pypath.inputs.comppi", "pypath.inputs.comppi.comppi_interaction_locations", "pypath.inputs.comppi.comppi_locations", "pypath.inputs.connectomedb", "pypath.inputs.connectomedb.connectomedb_annotations", "pypath.inputs.connectomedb.connectomedb_interactions", "pypath.inputs.corum", "pypath.inputs.corum.corum_complexes", "pypath.inputs.cosmic", "pypath.inputs.cosmic.cancer_gene_census_annotations", "pypath.inputs.cpad", "pypath.inputs.cpad.cpad_annotations", "pypath.inputs.cpad.cpad_pathway_cancer", "pypath.inputs.cpad.get_cpad", "pypath.inputs.cpdb", "pypath.inputs.cpdb.cpdb_interactions", "pypath.inputs.cpdb.cpdb_interactions_ltp", "pypath.inputs.credentials", "pypath.inputs.credentials.credentials", "pypath.inputs.csa", "pypath.inputs.csa.get_csa", "pypath.inputs.cspa", "pypath.inputs.cspa.cspa_annotations", "pypath.inputs.cspa.cspa_cell_type_annotations", "pypath.inputs.cspa.cspa_cell_types", "pypath.inputs.cytosig", "pypath.inputs.cytosig.cytosig_annotations", "pypath.inputs.cytosig.cytosig_df", "pypath.inputs.dbptm", "pypath.inputs.dbptm.dbptm_enzyme_substrate", "pypath.inputs.dbptm.dbptm_enzyme_substrate_old", "pypath.inputs.dbptm.dbptm_interactions", "pypath.inputs.deathdomain", "pypath.inputs.deathdomain.deathdomain_interactions", "pypath.inputs.deathdomain.deathdomain_interactions_rescued", "pypath.inputs.depod", "pypath.inputs.depod.depod_enzyme_substrate", "pypath.inputs.depod.depod_interactions", "pypath.inputs.dgidb", "pypath.inputs.dgidb.dgidb_annotations", "pypath.inputs.dgidb.get_dgidb_old", "pypath.inputs.dip", "pypath.inputs.dip.dip_interactions", "pypath.inputs.dip.dip_login", "pypath.inputs.disgenet", "pypath.inputs.disgenet.disgenet_annotations", "pypath.inputs.domino", "pypath.inputs.domino.domino_ddi", "pypath.inputs.domino.domino_enzsub", "pypath.inputs.domino.domino_interactions", "pypath.inputs.domino.get_domino", "pypath.inputs.dorothea", "pypath.inputs.dorothea.DorotheaInteraction", "pypath.inputs.dorothea.dorothea_full_raw", "pypath.inputs.dorothea.dorothea_interactions", "pypath.inputs.dorothea.dorothea_interactions_old", "pypath.inputs.dorothea.dorothea_old_csv", "pypath.inputs.dorothea.dorothea_rda_raw", "pypath.inputs.dorothea.get_dorothea_old", "pypath.inputs.dorothea.get_tfregulons", "pypath.inputs.dorothea.tfregulons_interactions", "pypath.inputs.dorothea.tfregulons_interactions_old", "pypath.inputs.drugbank", "pypath.inputs.drugbank.drugbank_annotations", "pypath.inputs.drugbank.drugbank_drugs", "pypath.inputs.drugbank.drugbank_interactions", "pypath.inputs.drugbank.drugbank_mapping", "pypath.inputs.drugbank.drugbank_raw_interactions", "pypath.inputs.drugcentral", "pypath.inputs.drugcentral.drugcentral_drugs", "pypath.inputs.drugcentral.drugcentral_interactions", "pypath.inputs.drugcentral.drugcentral_mapping", "pypath.inputs.ebi", "pypath.inputs.ebi.ebi_rest", "pypath.inputs.elm", "pypath.inputs.elm.elm_classes", "pypath.inputs.elm.elm_domains", "pypath.inputs.elm.elm_instances", "pypath.inputs.elm.elm_interactions", "pypath.inputs.embopress", "pypath.inputs.embopress.embopress_supplementary", "pypath.inputs.embrace", "pypath.inputs.embrace.embrace_annotations", "pypath.inputs.embrace.embrace_interactions", "pypath.inputs.embrace.embrace_raw", "pypath.inputs.embrace.embrace_translated", "pypath.inputs.encode", "pypath.inputs.encode.encode_tf_mirna_interactions", "pypath.inputs.ensembl", "pypath.inputs.ensembl.ensembl_organisms", "pypath.inputs.exocarta", "pypath.inputs.exocarta.get_exocarta", "pypath.inputs.exocarta.get_vesiclepedia", "pypath.inputs.genecards", "pypath.inputs.genecards.genecards_datasheet", "pypath.inputs.genecards.genecards_soup", "pypath.inputs.genecards.genecards_summaries", "pypath.inputs.get_method", "pypath.inputs.go", "pypath.inputs.go.get_go_desc", "pypath.inputs.go.get_go_quick", "pypath.inputs.go.get_goslim", "pypath.inputs.go.go_ancestors", "pypath.inputs.go.go_ancestors_goose", "pypath.inputs.go.go_ancestors_quickgo", "pypath.inputs.go.go_annotations", "pypath.inputs.go.go_annotations_goa", "pypath.inputs.go.go_annotations_goose", "pypath.inputs.go.go_annotations_quickgo", "pypath.inputs.go.go_annotations_solr", "pypath.inputs.go.go_annotations_uniprot", "pypath.inputs.go.go_descendants", "pypath.inputs.go.go_descendants_goose", "pypath.inputs.go.go_descendants_quickgo", "pypath.inputs.go.go_descendants_to_ancestors", "pypath.inputs.go.go_terms", "pypath.inputs.go.go_terms_goose", "pypath.inputs.go.go_terms_quickgo", "pypath.inputs.go.go_terms_solr", "pypath.inputs.gpcrdb", "pypath.inputs.gpcrdb.gpcrdb_annotations", "pypath.inputs.graphviz", "pypath.inputs.graphviz.graphviz_attrs", "pypath.inputs.guide2pharma", "pypath.inputs.guide2pharma.guide2pharma_complexes", "pypath.inputs.guide2pharma.guide2pharma_download", "pypath.inputs.guide2pharma.guide2pharma_interactions", "pypath.inputs.havugimana", "pypath.inputs.havugimana.get_havugimana", "pypath.inputs.havugimana.havugimana_complexes", "pypath.inputs.hgnc", "pypath.inputs.hgnc.hgnc_genegroups", "pypath.inputs.hippie", "pypath.inputs.hippie.hippie_interactions", "pypath.inputs.homologene", "pypath.inputs.homologene.get_homologene", "pypath.inputs.homologene.homologene_dict", "pypath.inputs.homologene.homologene_uniprot_dict", "pypath.inputs.hpmr", "pypath.inputs.hpmr.HpmrInteraction", "pypath.inputs.hpmr.get_hpmr", "pypath.inputs.hpmr.hpmr_annotations", "pypath.inputs.hpmr.hpmr_complexes", "pypath.inputs.hpmr.hpmr_interactions", "pypath.inputs.hpo", "pypath.inputs.hpo.hpo_annotations", "pypath.inputs.hpo.hpo_diseases", "pypath.inputs.hpo.hpo_ontology", "pypath.inputs.hpo.hpo_terms", "pypath.inputs.hprd", "pypath.inputs.hprd.get_hprd", "pypath.inputs.hprd.hprd_enzyme_substrate", "pypath.inputs.hprd.hprd_interactions", "pypath.inputs.hprd.hprd_interactions_htp", "pypath.inputs.htri", "pypath.inputs.htri.htri_interactions", "pypath.inputs.humancellmap", "pypath.inputs.humancellmap.humancellmap_annotations", "pypath.inputs.humap", "pypath.inputs.humap.humap2_complexes", "pypath.inputs.humap.humap_complexes", "pypath.inputs.huri", "pypath.inputs.huri.hi_i_interactions", "pypath.inputs.huri.hi_ii_interactions", "pypath.inputs.huri.hi_iii_old", "pypath.inputs.huri.hi_union_interactions", "pypath.inputs.huri.huri_interactions", "pypath.inputs.huri.lit_bm_13_interactions", "pypath.inputs.huri.lit_bm_17_interactions", "pypath.inputs.huri.lit_bm_interactions", "pypath.inputs.huri.rolland_hi_ii_14", "pypath.inputs.huri.vidal_hi_iii_old", "pypath.inputs.huri.yang2016_interactions", "pypath.inputs.huri.yu2011_interactions", "pypath.inputs.i3d", "pypath.inputs.i3d.get_i3d", "pypath.inputs.icellnet", "pypath.inputs.icellnet.IcellnetRecord", "pypath.inputs.icellnet.icellnet_annotations", "pypath.inputs.icellnet.icellnet_complexes", "pypath.inputs.icellnet.icellnet_interactions", "pypath.inputs.ielm", "pypath.inputs.ielm.get_ielm", "pypath.inputs.ielm.get_ielm_huge", "pypath.inputs.imweb", "pypath.inputs.imweb.get_imweb", "pypath.inputs.imweb.get_imweb_req", "pypath.inputs.innatedb", "pypath.inputs.innatedb.innatedb_interactions", "pypath.inputs.instruct", "pypath.inputs.instruct.get_instruct", "pypath.inputs.instruct.get_instruct_offsets", "pypath.inputs.intact", "pypath.inputs.intact.intact_interactions", "pypath.inputs.integrins", "pypath.inputs.integrins.get_integrins", "pypath.inputs.interpro", "pypath.inputs.interpro.interpro2go_annotations", "pypath.inputs.interpro.interpro_annotations", "pypath.inputs.interpro.interpro_entries", "pypath.inputs.interpro.interpro_xrefs", "pypath.inputs.intogen", "pypath.inputs.intogen.intogen_annotations", "pypath.inputs.ipi", "pypath.inputs.ipi.ipi_uniprot", "pypath.inputs.iptmnet", "pypath.inputs.iptmnet.IptmnetInteraction", "pypath.inputs.iptmnet.iptmnet_interactions", "pypath.inputs.italk", "pypath.inputs.italk.italk_annotations", "pypath.inputs.italk.italk_interactions", "pypath.inputs.italk.italk_raw", "pypath.inputs.kea", "pypath.inputs.kea.kea_enzyme_substrate", "pypath.inputs.kea.kea_interactions", "pypath.inputs.kegg", "pypath.inputs.kegg.KeggPathway", "pypath.inputs.kegg.kegg_dbget", "pypath.inputs.kegg.kegg_interactions", "pypath.inputs.kegg.kegg_medicus", "pypath.inputs.kegg.kegg_medicus_complexes", "pypath.inputs.kegg.kegg_medicus_interactions", "pypath.inputs.kegg.kegg_pathway_annotations", "pypath.inputs.kegg.kegg_pathway_annotations_pathwaycommons", "pypath.inputs.kegg.kegg_pathways", "pypath.inputs.kinasedotcom", "pypath.inputs.kinasedotcom.kinasedotcom_annotations", "pypath.inputs.kirouac2010", "pypath.inputs.kirouac2010.kirouac2010_interactions", "pypath.inputs.lambert2018", "pypath.inputs.lambert2018.lambert2018_annotations", "pypath.inputs.lambert2018.lambert2018_s1_raw", "pypath.inputs.laudanna", "pypath.inputs.laudanna.laudanna_directions", "pypath.inputs.laudanna.laudanna_effects", "pypath.inputs.li2012", "pypath.inputs.li2012.get_li2012", "pypath.inputs.li2012.li2012_dmi", "pypath.inputs.li2012.li2012_enzyme_substrate", "pypath.inputs.li2012.li2012_interactions", "pypath.inputs.lincs", "pypath.inputs.lincs.lincs_compounds", "pypath.inputs.lmpid", "pypath.inputs.lmpid.lmpid_dmi", "pypath.inputs.lmpid.lmpid_interactions", "pypath.inputs.lmpid.load_lmpid", "pypath.inputs.lncdisease", "pypath.inputs.lncdisease.lncdisease_interactions", "pypath.inputs.lncrnadb", "pypath.inputs.lncrnadb.lncrnadb_interactions", "pypath.inputs.locate", "pypath.inputs.locate.locate_localizations", "pypath.inputs.lrdb", "pypath.inputs.lrdb.LrdbAnnotation", "pypath.inputs.lrdb.lrdb_annotations", "pypath.inputs.lrdb.lrdb_interactions", "pypath.inputs.macrophage", "pypath.inputs.macrophage.macrophage_interactions", "pypath.inputs.main", "pypath.inputs.matrisome", "pypath.inputs.matrisome.matrisome_annotations", "pypath.inputs.matrixdb", "pypath.inputs.matrixdb.matrixdb_annotations", "pypath.inputs.matrixdb.matrixdb_ecm_proteins", "pypath.inputs.matrixdb.matrixdb_interactions", "pypath.inputs.matrixdb.matrixdb_membrane_proteins", "pypath.inputs.matrixdb.matrixdb_secreted_proteins", "pypath.inputs.mcam", "pypath.inputs.mcam.mcam_cell_adhesion_molecules", "pypath.inputs.membranome", "pypath.inputs.membranome.membranome_annotations", "pypath.inputs.mimp", "pypath.inputs.mimp.get_kinase_class", "pypath.inputs.mimp.mimp_enzyme_substrate", "pypath.inputs.mimp.mimp_interactions", "pypath.inputs.mir2disease", "pypath.inputs.mir2disease.mir2disease_interactions", "pypath.inputs.mirbase", "pypath.inputs.mirbase.get_mirbase_aliases", "pypath.inputs.mirbase.mirbase_ids", "pypath.inputs.mirbase.mirbase_mature", "pypath.inputs.mirbase.mirbase_mature_all", "pypath.inputs.mirbase.mirbase_precursor", "pypath.inputs.mirbase.mirbase_precursor_all", "pypath.inputs.mirbase.mirbase_precursor_to_mature", "pypath.inputs.mirdeathdb", "pypath.inputs.mirdeathdb.mirdeathdb_interactions", "pypath.inputs.mirecords", "pypath.inputs.mirecords.mirecords_interactions", "pypath.inputs.mirtarbase", "pypath.inputs.mirtarbase.mirtarbase_interactions", "pypath.inputs.mitab", "pypath.inputs.mitab.mitab_field_list", "pypath.inputs.mitab.mitab_field_uniprot", "pypath.inputs.mppi", "pypath.inputs.mppi.mppi_interactions", "pypath.inputs.msigdb", "pypath.inputs.msigdb.msigdb_annotations", "pypath.inputs.msigdb.msigdb_download", "pypath.inputs.msigdb.msigdb_download_collections", "pypath.inputs.ncrdeathdb", "pypath.inputs.ncrdeathdb.ncrdeathdb_interactions", "pypath.inputs.negatome", "pypath.inputs.negatome.negatome_interactions", "pypath.inputs.netbiol", "pypath.inputs.netbiol.arn_interactions", "pypath.inputs.netbiol.nrf2ome_interactions", "pypath.inputs.netpath", "pypath.inputs.netpath.netpath_interactions", "pypath.inputs.netpath.netpath_names", "pypath.inputs.netpath.netpath_pathway_annotations", "pypath.inputs.ontology", "pypath.inputs.ontology.listof_ontologies", "pypath.inputs.ontology.ontology", "pypath.inputs.opm", "pypath.inputs.opm.opm_annotations", "pypath.inputs.oreganno", "pypath.inputs.oreganno.oreganno_interactions", "pypath.inputs.oreganno.oreganno_raw", "pypath.inputs.panglaodb", "pypath.inputs.panglaodb.panglaodb_annotations", "pypath.inputs.panglaodb.panglaodb_raw", "pypath.inputs.pathwaycommons", "pypath.inputs.pathwaycommons.PathwayCommonsInteraction", "pypath.inputs.pathwaycommons.PathwayCommonsResource", "pypath.inputs.pathwaycommons.pathwaycommons_bind_interactions", "pypath.inputs.pathwaycommons.pathwaycommons_biogrid_interactions", "pypath.inputs.pathwaycommons.pathwaycommons_corum_interactions", "pypath.inputs.pathwaycommons.pathwaycommons_dip_interactions", "pypath.inputs.pathwaycommons.pathwaycommons_hprd_interactions", "pypath.inputs.pathwaycommons.pathwaycommons_inoh_interactions", "pypath.inputs.pathwaycommons.pathwaycommons_intact_interactions", "pypath.inputs.pathwaycommons.pathwaycommons_interactions", "pypath.inputs.pathwaycommons.pathwaycommons_kegg_interactions", "pypath.inputs.pathwaycommons.pathwaycommons_netpath_interactions", "pypath.inputs.pathwaycommons.pathwaycommons_panther_interactions", "pypath.inputs.pathwaycommons.pathwaycommons_phosphosite_interactions", "pypath.inputs.pathwaycommons.pathwaycommons_reactome_interactions", "pypath.inputs.pathwaycommons.pathwaycommons_wikipathways_interactions", "pypath.inputs.pazar", "pypath.inputs.pazar.pazar_interactions", "pypath.inputs.pdb", "pypath.inputs.pdb.pdb_chains", "pypath.inputs.pdb.pdb_complexes", "pypath.inputs.pdb.pdb_uniprot", "pypath.inputs.pdzbase", "pypath.inputs.pdzbase.pdzbase_interactions", "pypath.inputs.pepcyber", "pypath.inputs.pepcyber.pepcyber_details", "pypath.inputs.pepcyber.pepcyber_interactions", "pypath.inputs.pfam", "pypath.inputs.pfam.pfam_names", "pypath.inputs.pfam.pfam_pdb", "pypath.inputs.pfam.pfam_regions", "pypath.inputs.pfam.pfam_uniprot", "pypath.inputs.phobius", "pypath.inputs.phobius.phobius_annotations", "pypath.inputs.phosphatome", "pypath.inputs.phosphatome.phosphatome_annotations", "pypath.inputs.phosphoelm", "pypath.inputs.phosphoelm.phosphoelm_enzyme_substrate", "pypath.inputs.phosphoelm.phosphoelm_interactions", "pypath.inputs.phosphoelm.phosphoelm_kinases", "pypath.inputs.phosphonetworks", "pypath.inputs.phosphonetworks.phosphonetworks_enzyme_substrate", "pypath.inputs.phosphonetworks.phosphonetworks_interactions", "pypath.inputs.phosphopoint", "pypath.inputs.phosphopoint.phosphopoint_directions", "pypath.inputs.phosphopoint.phosphopoint_interactions", "pypath.inputs.phosphosite", "pypath.inputs.phosphosite.phosphosite_directions", "pypath.inputs.phosphosite.phosphosite_enzyme_substrate", "pypath.inputs.phosphosite.phosphosite_interactions", "pypath.inputs.phosphosite.phosphosite_interactions_all", "pypath.inputs.phosphosite.phosphosite_interactions_curated", "pypath.inputs.phosphosite.phosphosite_interactions_new", "pypath.inputs.phosphosite.phosphosite_interactions_noref", "pypath.inputs.phosphosite.phosphosite_ptm_orthology", "pypath.inputs.phosphosite.phosphosite_ptms", "pypath.inputs.phosphosite.phosphosite_regsites", "pypath.inputs.phosphosite.phosphosite_regsites_one_organism", "pypath.inputs.phosphosite.regsites_tab", "pypath.inputs.pisa", "pypath.inputs.pisa.PisaBond", "pypath.inputs.pisa.pisa_bonds", "pypath.inputs.pisa.pisa_interfaces", "pypath.inputs.pro", "pypath.inputs.pro.get_pro", "pypath.inputs.pro.pro_mapping", "pypath.inputs.progeny", "pypath.inputs.progeny.progeny_annotations", "pypath.inputs.progeny.progeny_raw", "pypath.inputs.proteinatlas", "pypath.inputs.proteinatlas.get_proteinatlas", "pypath.inputs.proteinatlas.proteinatlas_annotations", "pypath.inputs.proteinatlas.proteinatlas_secretome_annotations", "pypath.inputs.proteinatlas.proteinatlas_subcellular_annotations", "pypath.inputs.proteins", "pypath.inputs.proteins.variants", "pypath.inputs.protmapper", "pypath.inputs.protmapper.get_protmapper", "pypath.inputs.protmapper.protmapper_enzyme_substrate", "pypath.inputs.protmapper.protmapper_interactions", "pypath.inputs.pubchem", "pypath.inputs.pubchem.pubchem_mapping", "pypath.inputs.pubmed", "pypath.inputs.pubmed.get_pmid", "pypath.inputs.pubmed.get_pubmeds", "pypath.inputs.pubmed.only_pmids", "pypath.inputs.pubmed.open_pubmed", "pypath.inputs.pubmed.pmids_dict", "pypath.inputs.pubmed.pmids_list", "pypath.inputs.ramilowski2015", "pypath.inputs.ramilowski2015.ramilowski_interactions", "pypath.inputs.ramilowski2015.ramilowski_locations", "pypath.inputs.rdata", "pypath.inputs.reaction", "pypath.inputs.reaction.acsn_biopax", "pypath.inputs.reaction.acsn_interactions_2", "pypath.inputs.reaction.get_acsn_effects", "pypath.inputs.reaction.get_controls", "pypath.inputs.reaction.get_interactions", "pypath.inputs.reaction.get_reactions", "pypath.inputs.reaction.get_soup", "pypath.inputs.reaction.panther_biopax", "pypath.inputs.reaction.panther_interactions", "pypath.inputs.reaction.pid_biopax", "pypath.inputs.reaction.pid_interactions", "pypath.inputs.reaction.process_complex", "pypath.inputs.reaction.process_controls", "pypath.inputs.reaction.process_reactions", "pypath.inputs.reaction.reactions_biopax", "pypath.inputs.reaction.reactome_biopax", "pypath.inputs.reaction.reactome_bs", "pypath.inputs.reaction.reactome_interactions", "pypath.inputs.reaction.reactome_sbml", "pypath.inputs.scconnect", "pypath.inputs.scconnect.scconnect_annotations", "pypath.inputs.scconnect.scconnect_complexes", "pypath.inputs.scconnect.scconnect_interactions", "pypath.inputs.science", "pypath.inputs.science.science_download", "pypath.inputs.signalink", "pypath.inputs.signalink.signalink_annotations", "pypath.inputs.signalink.signalink_function_annotations", "pypath.inputs.signalink.signalink_interactions", "pypath.inputs.signalink.signalink_pathway_annotations", "pypath.inputs.signor", "pypath.inputs.signor.signor_complexes", "pypath.inputs.signor.signor_enzyme_substrate", "pypath.inputs.signor.signor_interactions", "pypath.inputs.signor.signor_pathway_annotations", "pypath.inputs.signor.signor_pathways", "pypath.inputs.signor.signor_protein_families", "pypath.inputs.spike", "pypath.inputs.spike.spike_complexes", "pypath.inputs.spike.spike_interactions", "pypath.inputs.stitch", "pypath.inputs.stitch.stitch_actions_interactions", "pypath.inputs.stitch.stitch_links_interactions", "pypath.inputs.string", "pypath.inputs.string.string_effects", "pypath.inputs.string.string_links_interactions", "pypath.inputs.string.string_physical_interactions", "pypath.inputs.string.string_species", "pypath.inputs.surfaceome", "pypath.inputs.surfaceome.surfaceome_annotations", "pypath.inputs.switches_elm", "pypath.inputs.switches_elm.get_switches_elm", "pypath.inputs.talklr", "pypath.inputs.talklr.talklr_annotations", "pypath.inputs.talklr.talklr_interactions", "pypath.inputs.talklr.talklr_raw", "pypath.inputs.tcdb", "pypath.inputs.tcdb.tcdb_annotations", "pypath.inputs.tcdb.tcdb_classes", "pypath.inputs.tcdb.tcdb_families", "pypath.inputs.tfcensus", "pypath.inputs.tfcensus.tfcensus_annotations", "pypath.inputs.threedcomplex", "pypath.inputs.threedcomplex.threedcomplex_chains", "pypath.inputs.threedcomplex.threedcomplex_complexes", "pypath.inputs.threedcomplex.threedcomplex_contacts", "pypath.inputs.threedcomplex.threedcomplex_ddi", "pypath.inputs.threedcomplex.threedcomplex_nresidues", "pypath.inputs.threedid", "pypath.inputs.threedid.get_3did", "pypath.inputs.threedid.get_3did_ddi", "pypath.inputs.threedid.get_3did_dmi", "pypath.inputs.threedid.process_3did_dmi", "pypath.inputs.topdb", "pypath.inputs.topdb.topdb_annotations", "pypath.inputs.transmir", "pypath.inputs.transmir.transmir_interactions", "pypath.inputs.trip", "pypath.inputs.trip.take_a_trip", "pypath.inputs.trip.trip_find_uniprot", "pypath.inputs.trip.trip_get_uniprot", "pypath.inputs.trip.trip_interactions", "pypath.inputs.trip.trip_process", "pypath.inputs.trip.trip_process_table", "pypath.inputs.unichem", "pypath.inputs.unichem.info", "pypath.inputs.unichem.unichem_info", "pypath.inputs.unichem.unichem_mapping", "pypath.inputs.unichem.unichem_sources", "pypath.inputs.uniprot", "pypath.inputs.uniprot.Taxon", "pypath.inputs.uniprot.UniprotRecordHistory", "pypath.inputs.uniprot.all_swissprots", "pypath.inputs.uniprot.all_trembls", "pypath.inputs.uniprot.all_uniprots", "pypath.inputs.uniprot.deleted_uniprot_genesymbol", "pypath.inputs.uniprot.get_db", "pypath.inputs.uniprot.get_uniprot_sec", "pypath.inputs.uniprot.init_db", "pypath.inputs.uniprot.is_swissprot", "pypath.inputs.uniprot.is_trembl", "pypath.inputs.uniprot.is_uniprot", "pypath.inputs.uniprot.protein_datasheet", "pypath.inputs.uniprot.swissprot_deleted", "pypath.inputs.uniprot.trembl_deleted", "pypath.inputs.uniprot.uniprot_data", "pypath.inputs.uniprot.uniprot_deleted", "pypath.inputs.uniprot.uniprot_families", "pypath.inputs.uniprot.uniprot_history", "pypath.inputs.uniprot.uniprot_history_recent_datasheet", "pypath.inputs.uniprot.uniprot_keywords", "pypath.inputs.uniprot.uniprot_locations", "pypath.inputs.uniprot.uniprot_ncbi_taxids", "pypath.inputs.uniprot.uniprot_ncbi_taxids_2", "pypath.inputs.uniprot.uniprot_preprocess", "pypath.inputs.uniprot.uniprot_recent_version", "pypath.inputs.uniprot.uniprot_taxonomy", "pypath.inputs.uniprot.uniprot_tissues", "pypath.inputs.uniprot.uniprot_topology", "pypath.inputs.uniprot.valid_uniprot", "pypath.inputs.wang", "pypath.inputs.wang.cui_interactions", "pypath.inputs.wang.hsn_interactions", "pypath.inputs.wang.wang_annotations", "pypath.inputs.wang.wang_interactions", "pypath.inputs.wojtowicz2020", "pypath.inputs.wojtowicz2020.wojtowicz2020_interactions", "pypath.inputs.wojtowicz2020.wojtowicz2020_raw", "pypath.inputs.zhong2015", "pypath.inputs.zhong2015.zhong2015_annotations", "pypath.internals", "pypath.internals.annot_formats", "pypath.internals.annot_formats.AnnotDef", "pypath.internals.annot_formats.AnnotDefKey", "pypath.internals.annot_formats.AnnotOp", "pypath.internals.annot_formats.AnnotationGroup", "pypath.internals.input_formats", "pypath.internals.input_formats.ArrayMapping", "pypath.internals.input_formats.BiomartMapping", "pypath.internals.input_formats.FileMapping", "pypath.internals.input_formats.MappingInput", "pypath.internals.input_formats.NetworkInput", "pypath.internals.input_formats.PickleMapping", "pypath.internals.input_formats.ProMapping", "pypath.internals.input_formats.ReadList", "pypath.internals.input_formats.UnichemMapping", "pypath.internals.input_formats.UniprotListMapping", "pypath.internals.input_formats.UniprotMapping", "pypath.internals.intera", "pypath.internals.intera.Complex", "pypath.internals.intera.Domain", "pypath.internals.intera.DomainDomain", "pypath.internals.intera.DomainMotif", "pypath.internals.intera.Interface", "pypath.internals.intera.Motif", "pypath.internals.intera.Ptm", "pypath.internals.intera.Regulation", "pypath.internals.intera.Residue", "pypath.internals.license", "pypath.internals.license.License", "pypath.internals.license.LicenseAttrib", "pypath.internals.license.LicenseFeature", "pypath.internals.license.LicensePurpose", "pypath.internals.license.LicenseSharing", "pypath.internals.maps", "pypath.internals.refs", "pypath.internals.refs.Reference", "pypath.internals.refs.get_pubmed_data", "pypath.internals.resource", "pypath.internals.resource.AbstractResource", "pypath.internals.resource.EnzymeSubstrateResource", "pypath.internals.resource.EnzymeSubstrateResourceKey", "pypath.internals.resource.NetworkResource", "pypath.internals.resource.NetworkResourceKey", "pypath.internals.resource.ResourceAttributes", "pypath.legacy", "pypath.legacy.db_categories", "pypath.legacy.db_categories.get_categories", "pypath.legacy.db_categories.get_category", "pypath.log", "pypath.obsolete", "pypath.obsolete.colorgen", "pypath.obsolete.colorgen.bias", "pypath.obsolete.colorgen.colormix", "pypath.obsolete.colorgen.dec2hex", "pypath.obsolete.colorgen.embl_colors", "pypath.obsolete.colorgen.genhsv", "pypath.obsolete.colorgen.genrgb", "pypath.obsolete.colorgen.getfracs", "pypath.obsolete.colorgen.gethexrgbs", "pypath.obsolete.colorgen.gethsvs", "pypath.obsolete.colorgen.getrgbs", "pypath.obsolete.colorgen.hex2dec", "pypath.obsolete.colorgen.hex2rgb", "pypath.obsolete.colorgen.read_palette", "pypath.obsolete.colorgen.rgb1", "pypath.obsolete.colorgen.rgb256", "pypath.obsolete.colorgen.rgb2hex", "pypath.obsolete.colorgen.zenos_dichotomy", "pypath.obsolete.enrich", "pypath.obsolete.enrich.Enrichment", "pypath.obsolete.enrich.EnrichmentSet", "pypath.obsolete.gsea", "pypath.obsolete.gsea.GSEA", "pypath.obsolete.gsea.GSEABinaryEnrichmentSet", "pypath.obsolete.linkcomm", "pypath.obsolete.linkcomm.Dc", "pypath.obsolete.linkcomm.HLC", "pypath.obsolete.linkcomm.read_edgelist_unweighted", "pypath.obsolete.linkcomm.read_edgelist_weighted", "pypath.obsolete.linkcomm.similarities_unweighted", "pypath.obsolete.linkcomm.similarities_weighted", "pypath.obsolete.linkcomm.swap", "pypath.obsolete.linkcomm.write_dendro", "pypath.obsolete.linkcomm.write_edge2cid", "pypath.omnipath", "pypath.omnipath.app", "pypath.omnipath.app.DatabaseManager", "pypath.omnipath.databases", "pypath.omnipath.databases.build", "pypath.omnipath.databases.class_and_param", "pypath.omnipath.databases.define", "pypath.omnipath.databases.define.DatabaseClass", "pypath.omnipath.databases.define.DatabaseDefinition", "pypath.omnipath.databases.define.DatabaseDefinitionManager", "pypath.omnipath.databases.get_manager", "pypath.omnipath.databases.init_manager", "pypath.omnipath.export", "pypath.omnipath.export.Export", "pypath.omnipath.init", "pypath.omnipath.param", "pypath.omnipath.param.curated_ppi_resources", "pypath.omnipath.param.tf_target_resources", "pypath.omnipath.server", "pypath.omnipath.server.build", "pypath.omnipath.server.build.WebserviceTables", "pypath.omnipath.server.generate_about_page", "pypath.omnipath.server.generate_about_page.export_licenses", "pypath.omnipath.server.generate_about_page.generate_about_html", "pypath.omnipath.server.generate_about_page.resource_list_latex", "pypath.omnipath.server.generate_about_page.write_html", "pypath.resources", "pypath.resources.controller", "pypath.resources.controller.ResourceController", "pypath.resources.data", "pypath.resources.data_formats", "pypath.resources.data_formats.ROOT", "pypath.resources.data_formats.activity_flow", "pypath.resources.data_formats.enzyme_substrate", "pypath.resources.data_formats.interaction", "pypath.resources.data_formats.interaction_htp", "pypath.resources.data_formats.obsolate", "pypath.resources.data_formats.pathway_bad", "pypath.resources.data_formats.reaction_pc", "pypath.resources.data_formats.transcription_deprecated", "pypath.resources.data_formats.transcription_onebyone", "pypath.resources.descriptions", "pypath.resources.descriptions.export_licenses", "pypath.resources.descriptions.gen_html", "pypath.resources.descriptions.resource_list_latex", "pypath.resources.descriptions.write_html", "pypath.resources.get_controller", "pypath.resources.licenses", "pypath.resources.licenses.Licenses", "pypath.resources.network", "pypath.resources.network.dorothea_expand_levels", "pypath.resources.urls", "pypath.share", "pypath.share.cache", "pypath.share.cache.cache_item", "pypath.share.cache.get_cachedir", "pypath.share.common", "pypath.share.common.add_to_list", "pypath.share.common.add_to_set", "pypath.share.common.at_least_in", "pypath.share.common.clean_dict", "pypath.share.common.combine_attrs", "pypath.share.common.console", "pypath.share.common.decode", "pypath.share.common.del_empty", "pypath.share.common.df_memory_usage", "pypath.share.common.dict_collapse_keys", "pypath.share.common.dict_counts", "pypath.share.common.dict_diff", "pypath.share.common.dict_expand_keys", "pypath.share.common.dict_percent", "pypath.share.common.dict_set_path", "pypath.share.common.dict_set_percent", "pypath.share.common.dict_str", "pypath.share.common.dict_subtotals", "pypath.share.common.dict_sym_diff", "pypath.share.common.dict_union", "pypath.share.common.eq", "pypath.share.common.filtr", "pypath.share.common.first", "pypath.share.common.flat_list", "pypath.share.common.float_or_nan", "pypath.share.common.gen_session_id", "pypath.share.common.get", "pypath.share.common.get_args", "pypath.share.common.is_float", "pypath.share.common.is_int", "pypath.share.common.is_str", "pypath.share.common.jaccard_index", "pypath.share.common.join_dicts", "pypath.share.common.latex_table", "pypath.share.common.match", "pypath.share.common.maybe_in_dict", "pypath.share.common.md5", "pypath.share.common.merge_dicts", "pypath.share.common.n_shared_elements", "pypath.share.common.n_shared_foreach", "pypath.share.common.n_shared_total", "pypath.share.common.n_shared_unique_foreach", "pypath.share.common.n_unique_elements", "pypath.share.common.n_unique_foreach", "pypath.share.common.n_unique_total", "pypath.share.common.negate", "pypath.share.common.none_or_len", "pypath.share.common.paginate", "pypath.share.common.prefix", "pypath.share.common.print_table", "pypath.share.common.re_safe_groups", "pypath.share.common.remove_prefix", "pypath.share.common.rotate", "pypath.share.common.sets_to_sorted_lists", "pypath.share.common.sfirst", "pypath.share.common.shared_elements", "pypath.share.common.shared_foreach", "pypath.share.common.shared_total", "pypath.share.common.shared_unique", "pypath.share.common.shared_unique_foreach", "pypath.share.common.shared_unique_total", "pypath.share.common.silent", "pypath.share.common.simpson_index", "pypath.share.common.simpson_index_counts", "pypath.share.common.something", "pypath.share.common.sorensen_index", "pypath.share.common.suffix", "pypath.share.common.sum_dicts", "pypath.share.common.swap_dict", "pypath.share.common.swap_dict_simple", "pypath.share.common.swap_suffix", "pypath.share.common.table_add_row_numbers", "pypath.share.common.table_format", "pypath.share.common.table_textwrap", "pypath.share.common.to_list", "pypath.share.common.to_set", "pypath.share.common.try_bool", "pypath.share.common.try_float", "pypath.share.common.tsv_table", "pypath.share.common.uniq_list", "pypath.share.common.uniq_list1", "pypath.share.common.uniq_list2", "pypath.share.common.uniq_ord_list", "pypath.share.common.unique_elements", "pypath.share.common.unique_foreach", "pypath.share.common.unique_list", "pypath.share.common.unique_total", "pypath.share.common.upper0", "pypath.share.common.values", "pypath.share.common.wcl", "pypath.share.common.wrap_truncate", "pypath.share.constants", "pypath.share.curl", "pypath.share.curl.Curl", "pypath.share.curl.FileOpener", "pypath.share.curl.RemoteFile", "pypath.share.curl.cache_delete_off", "pypath.share.curl.cache_delete_on", "pypath.share.curl.cache_off", "pypath.share.curl.cache_on", "pypath.share.curl.cache_print_off", "pypath.share.curl.cache_print_on", "pypath.share.curl.debug_off", "pypath.share.curl.debug_on", "pypath.share.curl.dryrun_off", "pypath.share.curl.dryrun_on", "pypath.share.curl.is_url", "pypath.share.curl.preserve_off", "pypath.share.curl.preserve_on", "pypath.share.log", "pypath.share.log.Logger", "pypath.share.log.new_logger", "pypath.share.progress", "pypath.share.progress.Progress", "pypath.share.session", "pypath.share.session.Logger", "pypath.share.session.Session", "pypath.share.session.get_log", "pypath.share.session.get_session", "pypath.share.session.new_session", "pypath.share.settings", "pypath.share.settings.Settings", "pypath.share.settings.context", "pypath.share.settings.get", "pypath.share.settings.setup", "pypath.utils", "pypath.utils.go", "pypath.utils.go.GOAnnotation", "pypath.utils.go.GOCustomAnnotation", "pypath.utils.go.GeneOntology", "pypath.utils.go.annotate", "pypath.utils.go.get_db", "pypath.utils.go.init_db", "pypath.utils.go.load_go", "pypath.utils.homology", "pypath.utils.homology.HomologyManager", "pypath.utils.homology.Ortholog", "pypath.utils.homology.ProteinHomology", "pypath.utils.homology.Proteomes", "pypath.utils.homology.PtmHomology", "pypath.utils.homology.SequenceContainer", "pypath.utils.homology.get_df", "pypath.utils.homology.get_dict", "pypath.utils.homology.get_manager", "pypath.utils.homology.init", "pypath.utils.homology.translate", "pypath.utils.homology.translate_df", "pypath.utils.mapping", "pypath.utils.mapping.MapReader", "pypath.utils.mapping.Mapper", "pypath.utils.mapping.MappingTable", "pypath.utils.mapping.MappingTableKey", "pypath.utils.mapping.UNIPROT_ID_TYPES", "pypath.utils.mapping.get_mapper", "pypath.utils.mapping.guess_type", "pypath.utils.mapping.id_from_label", "pypath.utils.mapping.id_from_label0", "pypath.utils.mapping.init", "pypath.utils.mapping.label", "pypath.utils.mapping.map_name", "pypath.utils.mapping.map_name0", "pypath.utils.mapping.map_names", "pypath.utils.pdb", "pypath.utils.pdb.Residue", "pypath.utils.pdb.ResidueMapper", "pypath.utils.pdb.Segment", "pypath.utils.pdb.residue_pdb", "pypath.utils.proteomicsdb", "pypath.utils.proteomicsdb.ProteomicsDB", "pypath.utils.pyreact", "pypath.utils.pyreact.AttributeHandler", "pypath.utils.pyreact.BioPaxReader", "pypath.utils.pyreact.Complex", "pypath.utils.pyreact.ComplexVariations", "pypath.utils.pyreact.Control", "pypath.utils.pyreact.Entity", "pypath.utils.pyreact.EntitySet", "pypath.utils.pyreact.Intersecting", "pypath.utils.pyreact.Protein", "pypath.utils.pyreact.ProteinFamily", "pypath.utils.pyreact.PyReact", "pypath.utils.pyreact.Reaction", "pypath.utils.pyreact.ReactionSide", "pypath.utils.pyreact.Reference", "pypath.utils.reflists", "pypath.utils.reflists.ReferenceListManager", "pypath.utils.reflists.check", "pypath.utils.reflists.get_manager", "pypath.utils.reflists.get_reflist", "pypath.utils.reflists.init", "pypath.utils.reflists.is_not", "pypath.utils.reflists.select", "pypath.utils.residues", "pypath.utils.residues.ResidueMapper", "pypath.utils.seq", "pypath.utils.seq.Pfam", "pypath.utils.seq.Resource", "pypath.utils.seq.Seq", "pypath.utils.seq.get_isoforms", "pypath.utils.seq.read_fasta", "pypath.utils.seq.swissprot_seq", "pypath.utils.taxonomy", "pypath.utils.taxonomy.ensure_common_name", "pypath.utils.taxonomy.ensure_ensembl_name", "pypath.utils.taxonomy.ensure_latin_name", "pypath.utils.taxonomy.ensure_ncbi_tax_id", "pypath.utils.taxonomy.get_db", "pypath.utils.taxonomy.init_db", "pypath.utils.taxonomy.short_latin_names", "pypath.utils.taxonomy.shorten_latin_name", "pypath.utils.taxonomy.taxid_from_common_name", "pypath.utils.taxonomy.taxid_from_dbptm_taxon_name", "pypath.utils.taxonomy.taxid_from_ensembl_name", "pypath.utils.taxonomy.taxid_from_latin_name", "pypath.utils.taxonomy.taxid_from_nonstandard", "pypath.utils.taxonomy.uniprot_taxid", "pypath.utils.unichem", "pypath.utils.unichem.Unichem", "pypath.utils.uniprot", "pypath.utils.uniprot.UniprotProtein", "pypath.utils.uniprot.ac", "pypath.utils.uniprot.activity_regulation", "pypath.utils.uniprot.activity_regulation_with_xrefs", "pypath.utils.uniprot.alternative_products", "pypath.utils.uniprot.alternative_products_with_xrefs", "pypath.utils.uniprot.browse", "pypath.utils.uniprot.catalytic_activity", "pypath.utils.uniprot.catalytic_activity_with_xrefs", "pypath.utils.uniprot.collect", "pypath.utils.uniprot.databases", "pypath.utils.uniprot.disease", "pypath.utils.uniprot.disease_with_xrefs", "pypath.utils.uniprot.ec", "pypath.utils.uniprot.features_table", "pypath.utils.uniprot.full_name", "pypath.utils.uniprot.function", "pypath.utils.uniprot.function_genecards", "pypath.utils.uniprot.function_or_genecards", "pypath.utils.uniprot.function_with_genecards", "pypath.utils.uniprot.function_with_xrefs", "pypath.utils.uniprot.genesymbol", "pypath.utils.uniprot.has_tag", "pypath.utils.uniprot.id", "pypath.utils.uniprot.info", "pypath.utils.uniprot.info_section", "pypath.utils.uniprot.interaction", "pypath.utils.uniprot.interaction_with_xrefs", "pypath.utils.uniprot.is_reviewed", "pypath.utils.uniprot.itertag", "pypath.utils.uniprot.keywords", "pypath.utils.uniprot.keywords_with_xrefs", "pypath.utils.uniprot.length", "pypath.utils.uniprot.lengths", "pypath.utils.uniprot.load", "pypath.utils.uniprot.organism", "pypath.utils.uniprot.print_features", "pypath.utils.uniprot.ptm", "pypath.utils.uniprot.ptm_with_xrefs", "pypath.utils.uniprot.query", "pypath.utils.uniprot.reload", "pypath.utils.uniprot.remove_xrefs", "pypath.utils.uniprot.sequence", "pypath.utils.uniprot.sequence_caution", "pypath.utils.uniprot.sequence_caution_with_xrefs", "pypath.utils.uniprot.similarity", "pypath.utils.uniprot.similarity_with_xrefs", "pypath.utils.uniprot.subcellular_location", "pypath.utils.uniprot.subcellular_location_with_xrefs", "pypath.utils.uniprot.subunit", "pypath.utils.uniprot.subunit_with_xrefs", "pypath.utils.uniprot.tissue_specificity", "pypath.utils.uniprot.tissue_specificity_with_xrefs", "pypath.utils.uniprot.update_databases", "pypath.utils.uniprot.update_info", "pypath.utils.uniprot.web_resource", "pypath.utils.uniprot.web_resource_with_xrefs", "pypath.utils.uniprot.weight", "pypath.utils.uniprot.weights", "pypath.visual", "Release history", "Features", "<em>pypath:</em> A Python module for molecular signaling prior knowledge processing", "Installation", "Release History", "Webservice"], "terms": {"i": [0, 3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 121, 122, 123, 126, 127, 132, 133, 135, 136, 137, 139, 145, 147, 168, 169, 188, 196, 197, 208, 214, 217, 220, 233, 267, 275, 276, 301, 302, 303, 304, 305, 307, 309, 310, 313, 327, 356, 357, 358, 361, 388, 391, 413, 420, 426, 432, 449, 455, 465, 468, 494, 502, 546, 547, 548, 572, 573, 591, 602, 632, 634, 653, 699, 708, 711, 717, 727, 756, 757, 765, 766, 767, 788, 798, 799, 800, 801, 803, 809, 812, 813, 814, 815, 818, 819, 826, 827, 828, 829, 837, 839, 867, 875, 876, 877, 883, 885, 894, 897, 900, 904, 909, 921, 924, 927, 931, 938, 939, 940, 942, 944, 945, 947, 948, 949, 952, 958, 959, 960, 966, 967, 968, 971, 973, 989, 990, 992, 1002, 1008, 1011, 1012, 1013, 1017, 1020, 1023, 1025, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1048, 1049, 1051, 1058, 1059, 1061, 1065, 1067, 1073, 1074, 1075, 1077, 1078, 1079, 1080, 1083, 1084, 1086, 1087, 1088, 1089, 1097, 1098, 1099, 1101, 1103, 1106, 1109, 1111, 1113, 1116, 1120, 1121, 1123, 1124, 1135, 1147, 1155, 1157, 1171, 1182, 1193, 1217, 1218, 1219, 1220, 1221], "modul": [0, 1, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 97, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 120, 128, 132, 133, 135, 139, 142, 145, 153, 169, 267, 346, 466, 494, 653, 744, 771, 796, 801, 803, 809, 812, 814, 835, 841, 846, 881, 883, 884, 885, 888, 899, 900, 907, 911, 927, 933, 988, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1054, 1058, 1059, 1063, 1065, 1066, 1067, 1070, 1081, 1082, 1085, 1087, 1091, 1095, 1106, 1171, 1193, 1216, 1217, 1218, 1220, 1221, 1222], "primarili": [0, 1220], "build": [0, 30, 126, 127, 134, 139, 145, 801, 883, 890, 896, 898, 947, 950, 1075, 1077, 1086, 1218, 1219, 1221], "molecular": [0, 30, 100, 121, 122, 132, 133, 134, 135, 139, 145, 468, 469, 470, 547, 548, 717, 801, 815, 1157, 1214, 1215, 1217, 1221], "interact": [0, 30, 32, 126, 127, 128, 132, 133, 139, 145, 155, 157, 158, 174, 175, 183, 185, 188, 189, 195, 197, 198, 206, 213, 214, 216, 217, 223, 229, 250, 254, 264, 265, 278, 279, 282, 283, 297, 302, 303, 304, 305, 306, 307, 308, 309, 310, 314, 319, 327, 332, 374, 389, 400, 401, 411, 412, 416, 417, 418, 419, 420, 432, 439, 442, 467, 468, 470, 487, 488, 492, 493, 494, 525, 535, 537, 539, 552, 554, 555, 566, 595, 597, 598, 609, 621, 623, 624, 625, 628, 650, 662, 680, 683, 688, 694, 708, 711, 712, 732, 747, 748, 749, 787, 790, 807, 814, 815, 833, 883, 894, 916, 917, 918, 919, 1109, 1217, 1218, 1219, 1221], "network": [0, 30, 98, 126, 134, 139, 183, 466, 711, 883, 894, 898, 1217, 1218, 1219, 1220, 1221], "also": [0, 30, 127, 135, 139, 145, 151, 195, 197, 198, 432, 634, 815, 894, 961, 965, 990, 1048, 1073, 1075, 1077, 1079, 1080, 1083, 1084, 1087, 1118, 1218, 1220, 1222], "sever": [0, 1218, 1222], "submodul": [0, 3, 4, 5, 7, 8, 9, 11, 12, 13, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 33, 34, 35, 39, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53, 57, 59, 60, 61, 62, 65, 66, 68, 70, 73, 74, 75, 76, 80, 81, 84, 90, 92, 346, 1218, 1219, 1221], "access": [0, 97, 267, 351, 352, 353, 356, 357, 358, 360, 361, 362, 364, 365, 366, 367, 397, 420, 600, 785, 813, 927, 1046, 1065, 1067, 1087, 1097, 1099, 1109, 1218, 1219, 1221], "preprocess": [0, 213, 216, 250, 269, 399, 468, 470, 547, 620, 621, 623, 624, 625, 628, 636, 732, 733, 744, 1133, 1134, 1219], "serv": [0, 118, 134, 749, 835, 883, 901, 1054, 1090, 1102, 1120, 1131, 1218, 1222], "data": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 127, 128, 135, 139, 145, 151, 157, 169, 171, 172, 177, 180, 197, 204, 205, 206, 212, 233, 234, 235, 236, 240, 241, 242, 246, 250, 269, 276, 283, 302, 303, 304, 305, 307, 309, 310, 322, 356, 357, 361, 374, 377, 385, 386, 389, 391, 396, 399, 400, 401, 413, 420, 432, 485, 494, 567, 592, 595, 598, 619, 620, 621, 623, 624, 625, 628, 629, 639, 640, 653, 668, 711, 712, 732, 733, 744, 748, 749, 753, 812, 813, 818, 835, 836, 839, 866, 867, 883, 888, 894, 901, 909, 935, 938, 939, 1002, 1031, 1032, 1035, 1036, 1058, 1059, 1067, 1073, 1075, 1077, 1079, 1080, 1081, 1083, 1084, 1086, 1087, 1088, 1090, 1106, 1109, 1133, 1134, 1166, 1217, 1218, 1219, 1220, 1221, 1222], "from": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 97, 105, 122, 126, 127, 128, 132, 133, 135, 139, 145, 155, 157, 158, 169, 170, 172, 174, 175, 177, 187, 188, 189, 191, 193, 195, 196, 197, 198, 204, 205, 206, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 223, 224, 227, 228, 229, 231, 233, 234, 235, 236, 239, 240, 241, 245, 246, 248, 250, 253, 254, 258, 264, 265, 267, 275, 278, 279, 282, 283, 288, 294, 302, 303, 304, 305, 307, 309, 310, 312, 313, 314, 315, 316, 318, 319, 320, 322, 327, 331, 332, 333, 334, 343, 344, 345, 346, 349, 354, 355, 356, 360, 361, 362, 371, 377, 378, 385, 386, 389, 395, 396, 411, 412, 416, 417, 418, 419, 420, 424, 440, 444, 469, 470, 475, 477, 482, 483, 485, 494, 512, 514, 515, 525, 527, 535, 537, 539, 546, 547, 548, 552, 554, 555, 561, 562, 566, 567, 569, 570, 592, 595, 597, 598, 600, 601, 603, 607, 609, 619, 620, 621, 623, 624, 625, 626, 627, 628, 639, 640, 649, 653, 662, 663, 686, 687, 688, 690, 694, 699, 701, 705, 727, 731, 732, 733, 742, 744, 745, 746, 749, 753, 761, 771, 774, 787, 788, 793, 795, 801, 807, 809, 812, 813, 835, 836, 839, 883, 894, 896, 901, 904, 909, 924, 938, 939, 941, 945, 946, 947, 950, 962, 964, 971, 973, 974, 975, 985, 986, 990, 1004, 1005, 1015, 1016, 1018, 1019, 1020, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1048, 1049, 1058, 1059, 1065, 1066, 1067, 1073, 1075, 1077, 1079, 1080, 1083, 1084, 1086, 1087, 1090, 1092, 1097, 1099, 1106, 1109, 1118, 1123, 1128, 1133, 1134, 1157, 1182, 1217, 1218, 1219, 1221, 1222], "variou": [0, 128, 145, 250, 313, 338, 782, 883, 1059, 1062, 1143, 1171, 1193, 1218], "resourc": [0, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 132, 133, 135, 139, 145, 208, 264, 265, 267, 303, 304, 305, 307, 309, 310, 345, 391, 426, 572, 581, 662, 717, 727, 752, 753, 798, 799, 801, 807, 883, 894, 897, 898, 905, 906, 976, 980, 993, 996, 1021, 1031, 1074, 1087, 1097, 1099, 1133, 1217, 1218, 1219, 1221, 1222], "member": [0, 1, 2, 95, 97, 99, 121, 125, 131, 134, 138, 142, 144, 150, 153, 154, 156, 159, 162, 164, 167, 173, 176, 182, 184, 186, 190, 192, 194, 199, 201, 207, 219, 225, 226, 230, 232, 237, 244, 247, 249, 252, 255, 257, 259, 263, 266, 268, 270, 274, 277, 281, 284, 287, 290, 293, 295, 300, 311, 317, 321, 323, 328, 330, 335, 337, 339, 342, 347, 368, 370, 372, 376, 379, 381, 383, 387, 393, 398, 403, 405, 407, 410, 423, 425, 430, 433, 436, 438, 441, 443, 445, 450, 452, 454, 457, 461, 464, 468, 474, 476, 478, 481, 484, 489, 491, 495, 497, 499, 501, 505, 507, 508, 510, 516, 518, 520, 524, 526, 534, 536, 538, 540, 543, 545, 549, 551, 553, 556, 560, 563, 565, 568, 571, 588, 590, 594, 596, 599, 604, 606, 608, 612, 615, 618, 631, 635, 638, 641, 646, 648, 652, 654, 661, 664, 665, 685, 689, 691, 696, 703, 706, 709, 714, 716, 718, 722, 726, 728, 734, 739, 741, 743, 750, 755, 786, 791, 794, 796, 797, 801, 802, 814, 815, 824, 830, 831, 834, 841, 842, 846, 847, 865, 868, 871, 881, 882, 884, 887, 893, 896, 899, 900, 902, 907, 908, 910, 911, 922, 928, 930, 932, 933, 934, 937, 1029, 1030, 1047, 1050, 1052, 1058, 1063, 1064, 1072, 1085, 1100, 1105, 1107, 1110, 1111, 1114, 1117, 1118, 1120, 1122, 1130, 1132, 1139, 1154, 1156, 1216], "function": [0, 2, 77, 96, 97, 99, 122, 125, 127, 132, 135, 138, 139, 144, 153, 154, 156, 159, 162, 164, 167, 169, 173, 176, 182, 184, 186, 188, 190, 192, 194, 196, 199, 201, 207, 219, 226, 230, 232, 237, 242, 243, 244, 247, 249, 252, 255, 257, 259, 263, 266, 268, 270, 274, 277, 281, 284, 287, 290, 293, 295, 300, 311, 317, 321, 323, 328, 330, 335, 337, 339, 342, 347, 368, 370, 372, 376, 379, 381, 383, 387, 391, 393, 398, 403, 405, 407, 410, 423, 425, 430, 433, 436, 438, 441, 443, 445, 450, 452, 454, 457, 461, 464, 474, 476, 478, 481, 484, 489, 491, 495, 497, 499, 501, 505, 508, 510, 516, 518, 520, 524, 526, 534, 536, 538, 540, 543, 545, 549, 551, 553, 556, 560, 563, 565, 568, 571, 588, 590, 594, 596, 599, 604, 606, 608, 612, 615, 618, 631, 633, 634, 635, 638, 641, 646, 648, 652, 654, 661, 665, 685, 689, 691, 696, 703, 706, 709, 711, 714, 716, 717, 718, 722, 726, 728, 734, 739, 741, 743, 750, 755, 786, 788, 791, 794, 798, 801, 831, 842, 847, 871, 881, 884, 896, 902, 907, 922, 930, 934, 935, 937, 938, 939, 942, 948, 949, 959, 972, 988, 1020, 1030, 1031, 1047, 1048, 1052, 1058, 1064, 1072, 1073, 1075, 1077, 1084, 1085, 1086, 1087, 1090, 1091, 1097, 1099, 1100, 1106, 1122, 1132, 1139, 1156, 1166, 1217, 1219, 1221], "class": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 95, 96, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 121, 122, 123, 124, 125, 126, 127, 128, 131, 132, 133, 134, 135, 136, 137, 138, 139, 143, 144, 145, 146, 147, 167, 168, 207, 208, 219, 220, 300, 301, 322, 387, 388, 425, 426, 454, 455, 464, 465, 501, 502, 509, 571, 572, 573, 631, 632, 715, 755, 756, 757, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 831, 832, 834, 835, 836, 837, 838, 839, 840, 865, 866, 867, 868, 869, 870, 871, 873, 874, 875, 882, 883, 887, 888, 889, 890, 893, 894, 900, 901, 908, 909, 928, 929, 937, 965, 999, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1058, 1059, 1064, 1065, 1066, 1067, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1085, 1086, 1087, 1088, 1089, 1090, 1100, 1101, 1102, 1103, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1130, 1131, 1132, 1133, 1134, 1135, 1154, 1155, 1156, 1157, 1166, 1217, 1218, 1219, 1220, 1221, 1222], "kwarg": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 98, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 120, 122, 127, 128, 129, 130, 132, 135, 139, 140, 141, 145, 148, 149, 267, 373, 375, 574, 575, 576, 577, 578, 579, 580, 582, 583, 584, 585, 586, 587, 651, 667, 674, 676, 683, 701, 825, 835, 836, 838, 839, 840, 883, 889, 894, 895, 944, 959, 965, 971, 987, 1009, 1010, 1016, 1049, 1059, 1060, 1062, 1073, 1075, 1077, 1084, 1087, 1091, 1095, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215], "sourc": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 96, 98, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 124, 126, 127, 128, 129, 130, 132, 133, 135, 136, 139, 140, 141, 145, 146, 148, 149, 151, 152, 155, 157, 158, 160, 161, 163, 165, 166, 169, 170, 171, 172, 174, 175, 177, 178, 179, 180, 181, 183, 185, 187, 188, 189, 191, 193, 195, 196, 197, 198, 200, 202, 203, 204, 205, 206, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 221, 222, 223, 224, 225, 227, 228, 229, 231, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 245, 246, 248, 250, 251, 253, 254, 256, 258, 260, 261, 262, 264, 265, 267, 269, 271, 272, 273, 275, 276, 278, 279, 280, 282, 283, 285, 286, 288, 289, 291, 292, 294, 296, 297, 298, 299, 302, 303, 305, 306, 307, 312, 313, 314, 315, 316, 318, 319, 320, 322, 324, 325, 326, 327, 329, 331, 332, 333, 334, 336, 338, 340, 341, 343, 344, 345, 346, 348, 349, 350, 352, 353, 355, 356, 357, 358, 359, 361, 362, 363, 365, 366, 367, 369, 371, 373, 374, 375, 377, 378, 380, 382, 384, 385, 386, 389, 390, 391, 392, 394, 395, 396, 397, 399, 400, 401, 402, 404, 406, 408, 409, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 424, 427, 428, 429, 431, 432, 434, 435, 437, 439, 440, 442, 444, 446, 447, 448, 449, 451, 453, 456, 458, 459, 460, 462, 463, 466, 467, 468, 469, 470, 471, 472, 473, 475, 477, 479, 480, 482, 483, 485, 486, 487, 488, 490, 492, 493, 494, 496, 498, 500, 502, 503, 504, 506, 509, 511, 512, 513, 514, 515, 517, 519, 521, 522, 523, 525, 527, 528, 529, 530, 531, 532, 533, 535, 537, 539, 541, 542, 544, 546, 547, 548, 550, 552, 554, 555, 557, 558, 559, 561, 562, 564, 566, 567, 569, 570, 581, 589, 591, 592, 593, 595, 597, 598, 600, 601, 602, 603, 605, 607, 609, 610, 611, 613, 614, 616, 617, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 633, 634, 636, 637, 639, 640, 642, 643, 644, 645, 647, 649, 650, 651, 653, 655, 656, 657, 658, 659, 660, 662, 663, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 686, 687, 688, 690, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 704, 705, 707, 708, 710, 711, 712, 713, 715, 717, 719, 720, 721, 723, 724, 725, 727, 729, 730, 731, 732, 733, 735, 736, 737, 738, 740, 742, 744, 745, 746, 747, 748, 749, 751, 752, 753, 754, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 787, 788, 789, 790, 792, 793, 795, 798, 800, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 832, 833, 835, 836, 838, 839, 840, 843, 844, 845, 849, 850, 851, 852, 854, 858, 859, 860, 861, 862, 863, 864, 866, 867, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 883, 885, 886, 888, 889, 890, 891, 892, 894, 895, 897, 898, 901, 903, 904, 905, 906, 909, 923, 924, 925, 926, 927, 929, 931, 935, 936, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1048, 1049, 1051, 1053, 1054, 1055, 1056, 1057, 1059, 1060, 1061, 1062, 1065, 1066, 1067, 1068, 1069, 1070, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1086, 1087, 1088, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1102, 1104, 1106, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1131, 1133, 1134, 1135, 1136, 1137, 1138, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1155, 1157, 1163, 1166, 1171, 1181, 1193, 1196, 1217, 1218, 1219, 1221, 1222], "base": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 122, 123, 124, 126, 127, 128, 132, 133, 135, 136, 137, 139, 145, 146, 147, 168, 208, 220, 301, 303, 304, 305, 307, 309, 310, 388, 426, 455, 465, 502, 572, 573, 626, 632, 639, 640, 649, 731, 732, 756, 757, 798, 799, 800, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 832, 835, 836, 837, 838, 839, 840, 866, 867, 869, 870, 873, 883, 888, 889, 890, 894, 901, 909, 929, 975, 999, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1048, 1051, 1053, 1054, 1059, 1065, 1066, 1067, 1073, 1074, 1075, 1076, 1077, 1078, 1086, 1087, 1088, 1089, 1101, 1102, 1103, 1106, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1123, 1131, 1133, 1134, 1135, 1155, 1157, 1217, 1218, 1219, 1221], "annotationbas": [3, 4, 7, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 29, 31, 32, 33, 34, 35, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92], "__init__": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 122, 123, 124, 126, 127, 128, 132, 133, 135, 136, 137, 139, 145, 146, 147, 168, 208, 220, 292, 301, 388, 426, 455, 465, 502, 572, 573, 632, 756, 757, 798, 799, 800, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 832, 835, 836, 837, 838, 839, 840, 866, 867, 869, 870, 873, 883, 888, 889, 890, 894, 901, 909, 929, 999, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1048, 1051, 1053, 1054, 1059, 1065, 1066, 1067, 1073, 1074, 1075, 1076, 1077, 1078, 1086, 1087, 1088, 1089, 1101, 1102, 1103, 1106, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1123, 1131, 1133, 1134, 1135, 1155, 1157], "repres": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 118, 121, 122, 127, 131, 132, 134, 135, 139, 145, 171, 172, 213, 214, 216, 217, 223, 318, 319, 448, 561, 626, 688, 752, 801, 814, 815, 962, 966, 967, 971, 1015, 1016, 1077, 1087, 1118, 1134, 1218], "set": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 122, 126, 127, 128, 132, 133, 135, 139, 145, 169, 172, 178, 180, 187, 188, 195, 198, 209, 210, 213, 215, 216, 218, 224, 261, 264, 265, 267, 275, 303, 304, 305, 307, 309, 310, 312, 315, 320, 327, 331, 340, 341, 351, 352, 353, 356, 357, 358, 360, 361, 362, 385, 386, 394, 395, 396, 432, 439, 444, 446, 447, 468, 470, 512, 514, 515, 546, 547, 548, 593, 601, 602, 603, 634, 639, 650, 653, 732, 744, 753, 782, 798, 800, 801, 803, 807, 809, 812, 813, 815, 826, 827, 828, 829, 835, 836, 874, 876, 877, 883, 897, 898, 915, 939, 940, 942, 948, 949, 952, 955, 957, 958, 959, 965, 969, 972, 976, 979, 980, 993, 996, 997, 1000, 1003, 1006, 1013, 1021, 1026, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1049, 1051, 1065, 1066, 1067, 1073, 1075, 1077, 1079, 1080, 1083, 1084, 1086, 1087, 1088, 1097, 1099, 1109, 1118, 1155, 1218, 1220, 1221, 1222], "protein": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 122, 126, 127, 135, 139, 145, 204, 209, 211, 212, 213, 216, 217, 225, 227, 245, 246, 250, 269, 288, 289, 294, 297, 314, 316, 331, 340, 341, 343, 344, 349, 356, 357, 391, 394, 432, 439, 442, 447, 468, 469, 470, 509, 512, 514, 515, 552, 554, 592, 597, 598, 628, 629, 636, 687, 688, 699, 708, 711, 712, 749, 771, 801, 805, 807, 809, 810, 814, 815, 816, 818, 819, 820, 821, 823, 883, 1073, 1075, 1077, 1083, 1085, 1086, 1087, 1090, 1096, 1097, 1099, 1106, 1109, 1118, 1120, 1133, 1134, 1135, 1156, 1163, 1217, 1218, 1219, 1221, 1222], "load": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 127, 128, 145, 283, 349, 413, 419, 420, 432, 442, 623, 625, 698, 744, 835, 883, 921, 935, 1065, 1067, 1081, 1086, 1087, 1088, 1097, 1102, 1133, 1134, 1136, 1138, 1218, 1220, 1221, 1222], "origin": [3, 4, 5, 7, 8, 9, 11, 12, 13, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 33, 34, 35, 39, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53, 57, 59, 60, 61, 62, 65, 66, 68, 70, 73, 74, 75, 76, 80, 81, 84, 90, 92, 127, 135, 139, 276, 302, 468, 788, 836, 938, 939, 948, 989, 1006, 1007, 1059, 1086, 1087, 1097, 1099, 1109, 1217, 1219, 1221, 1222], "provid": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 121, 122, 127, 128, 131, 132, 133, 134, 135, 139, 145, 188, 196, 197, 214, 217, 250, 267, 302, 319, 356, 358, 361, 432, 494, 547, 602, 628, 629, 732, 803, 809, 812, 814, 835, 883, 894, 896, 904, 909, 924, 927, 971, 1016, 1058, 1059, 1062, 1066, 1067, 1073, 1075, 1077, 1081, 1084, 1087, 1123, 1124, 1128, 1129, 1133, 1163, 1217, 1218, 1219, 1220, 1221, 1222], "method": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 97, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 122, 123, 124, 126, 127, 128, 132, 133, 134, 135, 136, 137, 139, 145, 146, 147, 149, 168, 208, 220, 301, 304, 305, 310, 346, 356, 357, 358, 360, 361, 362, 382, 388, 426, 432, 455, 465, 502, 572, 573, 593, 629, 632, 748, 756, 757, 798, 799, 800, 801, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 826, 827, 828, 829, 832, 835, 836, 837, 838, 839, 840, 866, 867, 869, 870, 873, 883, 885, 888, 889, 890, 894, 901, 909, 929, 940, 942, 947, 976, 980, 988, 993, 996, 999, 1021, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1048, 1051, 1053, 1054, 1059, 1065, 1066, 1067, 1073, 1074, 1075, 1076, 1077, 1078, 1086, 1087, 1088, 1089, 1101, 1102, 1103, 1106, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1123, 1131, 1133, 1134, 1135, 1155, 1157, 1166, 1218, 1219, 1220, 1221], "queri": [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 33, 34, 35, 39, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53, 57, 59, 60, 61, 62, 65, 66, 68, 70, 73, 74, 75, 76, 80, 81, 84, 90, 92, 133, 134, 135, 139, 145, 181, 322, 351, 352, 353, 356, 357, 358, 360, 361, 362, 364, 365, 366, 367, 431, 432, 562, 602, 603, 634, 744, 771, 813, 1081, 1086, 1106, 1155, 1166, 1218, 1219, 1221], "paramet": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 105, 122, 127, 128, 132, 133, 135, 139, 145, 197, 204, 205, 206, 225, 227, 228, 229, 292, 303, 304, 305, 306, 307, 308, 309, 310, 322, 340, 341, 343, 344, 345, 351, 352, 353, 356, 357, 358, 360, 361, 362, 364, 365, 366, 367, 369, 431, 432, 546, 547, 548, 609, 626, 629, 650, 744, 763, 798, 801, 803, 807, 809, 812, 813, 833, 883, 889, 909, 938, 939, 941, 942, 943, 945, 947, 949, 950, 952, 961, 963, 965, 969, 970, 974, 975, 990, 996, 1000, 1001, 1002, 1003, 1007, 1017, 1020, 1023, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1048, 1049, 1051, 1057, 1059, 1061, 1062, 1065, 1066, 1067, 1068, 1071, 1073, 1075, 1077, 1079, 1080, 1083, 1084, 1086, 1106, 1109, 1155, 1163, 1166, 1171, 1193, 1218, 1219, 1220, 1221], "name": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 127, 128, 135, 139, 145, 169, 170, 177, 178, 179, 180, 181, 189, 198, 206, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 223, 228, 229, 233, 234, 235, 236, 264, 265, 267, 294, 302, 303, 306, 308, 309, 313, 315, 318, 319, 322, 338, 345, 346, 349, 356, 357, 358, 364, 365, 366, 367, 374, 396, 448, 449, 490, 546, 547, 548, 561, 566, 573, 595, 600, 602, 639, 640, 653, 686, 687, 688, 699, 713, 745, 748, 752, 765, 766, 767, 771, 782, 785, 798, 799, 800, 801, 803, 807, 809, 810, 812, 815, 823, 825, 835, 836, 837, 838, 839, 840, 843, 883, 894, 918, 935, 959, 964, 1008, 1020, 1026, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1048, 1049, 1051, 1053, 1057, 1059, 1061, 1062, 1065, 1066, 1067, 1068, 1071, 1073, 1075, 1077, 1084, 1086, 1087, 1092, 1096, 1097, 1098, 1099, 1109, 1123, 1124, 1128, 1129, 1134, 1143, 1146, 1147, 1157, 1166, 1167, 1218, 1220, 1222], "str": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 122, 127, 128, 132, 133, 135, 139, 145, 169, 171, 172, 178, 179, 180, 181, 193, 195, 198, 204, 205, 206, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 227, 228, 229, 239, 240, 241, 242, 267, 294, 302, 303, 306, 308, 309, 312, 313, 314, 315, 316, 319, 320, 322, 329, 343, 344, 345, 369, 374, 385, 394, 395, 396, 397, 432, 446, 447, 449, 546, 547, 548, 561, 562, 602, 639, 640, 647, 650, 653, 657, 658, 686, 687, 690, 699, 704, 710, 713, 744, 746, 748, 749, 751, 753, 771, 801, 803, 807, 809, 812, 813, 815, 835, 839, 874, 875, 883, 889, 894, 909, 935, 943, 944, 945, 959, 963, 964, 970, 974, 996, 1026, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1048, 1049, 1057, 1059, 1061, 1065, 1066, 1067, 1073, 1075, 1077, 1083, 1084, 1086, 1087, 1088, 1097, 1099, 1102, 1106, 1109, 1146, 1147, 1155, 1166], "A": [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 33, 34, 35, 36, 39, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53, 57, 59, 60, 61, 62, 65, 66, 68, 70, 73, 74, 75, 76, 80, 81, 84, 90, 92, 100, 121, 122, 127, 128, 131, 133, 135, 139, 145, 171, 178, 180, 188, 196, 197, 209, 210, 211, 213, 214, 215, 216, 217, 218, 264, 265, 267, 297, 299, 302, 303, 304, 305, 307, 309, 310, 322, 343, 344, 345, 395, 447, 448, 449, 597, 600, 601, 603, 634, 640, 653, 699, 731, 732, 752, 753, 754, 771, 815, 839, 883, 894, 921, 935, 944, 947, 950, 972, 1008, 1048, 1057, 1059, 1062, 1065, 1066, 1073, 1075, 1077, 1079, 1080, 1084, 1086, 1087, 1091, 1102, 1106, 1118, 1155, 1166, 1218, 1222], "custom": [3, 4, 5, 6, 7, 8, 9, 11, 12, 13, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 33, 34, 35, 39, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53, 57, 59, 60, 61, 62, 65, 66, 68, 70, 73, 74, 75, 76, 80, 81, 84, 90, 92, 96, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 135, 139, 145, 267, 708, 711, 712, 801, 803, 809, 812, 815, 835, 896, 906, 926, 1049, 1051, 1057, 1066, 1086, 1090, 1218], "ncbi_tax_id": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 100, 126, 127, 128, 145, 165, 166, 331, 621, 623, 625, 708, 710, 711, 712, 740, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813, 815, 816, 820, 821, 823, 835, 883, 1066, 1086, 1087, 1088, 1089, 1093, 1094, 1096, 1097, 1098, 1099, 1118, 1123, 1124, 1126, 1128, 1129, 1133, 1134, 1222], "int": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 122, 127, 128, 135, 139, 145, 169, 172, 174, 175, 178, 179, 180, 185, 195, 198, 204, 205, 206, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 227, 228, 229, 242, 302, 303, 306, 308, 309, 319, 322, 329, 356, 357, 358, 369, 385, 386, 432, 442, 447, 468, 469, 470, 602, 603, 609, 626, 629, 639, 640, 647, 658, 686, 687, 699, 704, 705, 708, 710, 711, 712, 713, 751, 753, 763, 771, 813, 815, 883, 947, 950, 963, 964, 967, 1026, 1048, 1049, 1051, 1057, 1073, 1075, 1077, 1083, 1084, 1086, 1087, 1088, 1097, 1099, 1102, 1106, 1109, 1146, 1155], "ncbi": [3, 4, 5, 7, 8, 9, 11, 12, 13, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 33, 34, 35, 39, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53, 57, 59, 60, 61, 62, 65, 66, 68, 70, 73, 74, 75, 76, 80, 81, 84, 90, 92, 122, 127, 128, 135, 145, 174, 175, 185, 302, 303, 306, 308, 309, 319, 356, 357, 358, 384, 385, 386, 411, 412, 602, 603, 609, 626, 629, 639, 640, 657, 699, 761, 763, 813, 815, 833, 883, 1073, 1075, 1077, 1079, 1080, 1083, 1084, 1086, 1087, 1088, 1097, 1099, 1143, 1153, 1217, 1222], "taxonomi": [3, 4, 5, 7, 8, 9, 11, 12, 13, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 33, 34, 35, 39, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53, 57, 59, 60, 61, 62, 65, 66, 68, 70, 73, 74, 75, 76, 80, 81, 84, 90, 92, 122, 127, 128, 135, 145, 174, 175, 185, 302, 303, 306, 308, 309, 319, 356, 357, 358, 385, 386, 602, 603, 609, 626, 629, 639, 640, 699, 761, 763, 813, 815, 883, 1075, 1077, 1086, 1087, 1088, 1097, 1099], "identifi": [3, 4, 5, 7, 8, 9, 11, 12, 13, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 30, 33, 34, 35, 39, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53, 57, 59, 60, 61, 62, 65, 66, 68, 70, 73, 74, 75, 76, 80, 81, 84, 90, 92, 121, 122, 123, 127, 135, 139, 145, 178, 180, 189, 196, 197, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 242, 313, 315, 316, 320, 442, 468, 547, 548, 591, 592, 593, 653, 686, 687, 753, 761, 768, 771, 774, 775, 781, 801, 815, 1020, 1054, 1067, 1073, 1075, 1077, 1079, 1080, 1083, 1084, 1086, 1087, 1088, 1109, 1113, 1123, 1124, 1128, 1129, 1155, 1157, 1167, 1218, 1219], "input_method": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 127, 128, 835, 836], "callabl": [3, 4, 5, 7, 8, 9, 11, 12, 13, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 33, 34, 35, 39, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53, 57, 59, 60, 61, 62, 65, 66, 68, 70, 73, 74, 75, 76, 80, 81, 84, 90, 92, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 128, 239, 322, 647, 798, 835, 894, 959, 972], "either": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 128, 132, 135, 139, 171, 205, 209, 276, 468, 602, 653, 753, 801, 815, 944, 979, 996, 997, 1031, 1048, 1067, 1087, 1096, 1106, 1109, 1155, 1222], "ani": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 122, 132, 135, 145, 241, 242, 267, 356, 361, 546, 548, 602, 788, 938, 939, 958, 961, 965, 969, 974, 976, 980, 993, 996, 1000, 1002, 1003, 1006, 1017, 1020, 1021, 1023, 1065, 1068, 1071, 1086, 1087, 1096, 1118, 1217, 1218, 1219, 1220, 1221, 1222], "input": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 127, 128, 145, 807, 810, 813, 835, 871, 875, 876, 912, 939, 1014, 1015, 1073, 1075, 1077, 1084, 1087, 1097, 1218, 1219, 1221], "should": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 127, 132, 133, 139, 145, 169, 172, 233, 348, 349, 357, 359, 440, 730, 749, 798, 801, 815, 885, 894, 912, 959, 1006, 1059, 1066, 1086, 1087, 1097, 1109, 1220, 1222], "return": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 118, 122, 123, 127, 128, 132, 133, 135, 136, 137, 139, 145, 147, 157, 168, 169, 170, 171, 172, 174, 175, 177, 178, 180, 181, 183, 185, 187, 188, 189, 193, 195, 196, 197, 198, 204, 205, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 220, 224, 227, 228, 229, 233, 234, 235, 236, 242, 243, 258, 261, 267, 275, 276, 278, 279, 289, 294, 297, 299, 301, 302, 306, 308, 312, 313, 314, 315, 316, 318, 319, 320, 322, 331, 332, 333, 334, 338, 343, 344, 345, 346, 349, 351, 352, 353, 356, 357, 358, 360, 361, 362, 364, 365, 366, 367, 371, 374, 384, 385, 386, 388, 389, 391, 394, 395, 396, 400, 401, 416, 417, 419, 420, 426, 444, 446, 447, 448, 449, 451, 455, 460, 465, 467, 468, 470, 482, 483, 485, 490, 494, 502, 509, 512, 514, 515, 547, 548, 561, 572, 573, 591, 592, 593, 595, 597, 598, 600, 601, 602, 603, 609, 621, 623, 624, 625, 626, 629, 632, 634, 639, 640, 649, 653, 657, 662, 668, 681, 684, 688, 690, 694, 698, 699, 713, 727, 729, 730, 731, 732, 733, 745, 747, 748, 752, 753, 754, 756, 757, 761, 765, 766, 771, 774, 782, 788, 790, 793, 798, 799, 800, 801, 813, 818, 819, 826, 827, 828, 829, 836, 837, 839, 874, 883, 885, 890, 894, 897, 898, 927, 931, 935, 936, 938, 939, 940, 941, 942, 944, 945, 946, 947, 948, 949, 950, 952, 955, 957, 958, 959, 960, 961, 962, 963, 964, 965, 969, 970, 971, 972, 973, 974, 975, 976, 979, 980, 983, 989, 990, 992, 993, 996, 997, 1000, 1001, 1002, 1003, 1005, 1006, 1007, 1012, 1013, 1014, 1015, 1016, 1017, 1020, 1021, 1023, 1026, 1031, 1032, 1048, 1049, 1051, 1054, 1055, 1056, 1059, 1061, 1062, 1065, 1066, 1067, 1073, 1074, 1075, 1077, 1079, 1080, 1081, 1083, 1084, 1086, 1087, 1089, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1101, 1102, 1103, 1106, 1123, 1128, 1137, 1143, 1146, 1147, 1153, 1155, 1157, 1166, 1167, 1171, 1182, 1187, 1188, 1189, 1190, 1193, 1196, 1199, 1214, 1215, 1222], "dict": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 122, 126, 127, 128, 133, 135, 139, 145, 169, 172, 187, 188, 195, 196, 197, 209, 210, 211, 214, 215, 217, 239, 240, 241, 242, 258, 261, 267, 275, 278, 279, 294, 297, 312, 315, 320, 322, 331, 345, 349, 351, 352, 353, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 371, 374, 385, 386, 389, 391, 394, 395, 396, 397, 446, 447, 449, 469, 487, 490, 509, 547, 548, 561, 562, 591, 592, 597, 601, 602, 603, 609, 626, 634, 639, 647, 653, 684, 698, 699, 704, 713, 715, 727, 731, 733, 748, 749, 753, 754, 771, 815, 867, 875, 876, 877, 883, 889, 894, 931, 941, 947, 948, 949, 950, 951, 952, 955, 957, 959, 964, 965, 970, 973, 975, 976, 979, 980, 993, 996, 997, 1005, 1006, 1007, 1008, 1021, 1026, 1059, 1062, 1066, 1073, 1075, 1077, 1080, 1084, 1087, 1088, 1106, 1109, 1118, 1137, 1146, 1157, 1167, 1221], "uniprot": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 118, 122, 127, 128, 135, 139, 145, 169, 189, 195, 209, 213, 215, 216, 227, 228, 269, 331, 332, 334, 343, 344, 345, 346, 349, 354, 355, 356, 357, 358, 386, 424, 439, 440, 444, 447, 453, 486, 509, 512, 514, 515, 591, 593, 597, 602, 603, 626, 629, 630, 634, 639, 647, 680, 688, 715, 727, 731, 733, 745, 746, 749, 807, 810, 812, 813, 816, 819, 820, 821, 823, 836, 894, 1065, 1066, 1068, 1071, 1073, 1074, 1075, 1077, 1079, 1080, 1083, 1084, 1086, 1087, 1090, 1093, 1094, 1097, 1099, 1101, 1102, 1103, 1116, 1131, 1133, 1134, 1136, 1153, 1217, 1218, 1221, 1222], "id": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 122, 127, 128, 132, 135, 139, 145, 169, 174, 175, 178, 179, 180, 181, 185, 187, 195, 209, 212, 213, 215, 216, 227, 302, 303, 306, 308, 309, 315, 319, 320, 331, 332, 334, 338, 343, 344, 345, 349, 356, 357, 358, 385, 386, 432, 444, 447, 449, 486, 490, 509, 512, 514, 515, 547, 562, 591, 593, 597, 601, 602, 603, 609, 626, 629, 630, 634, 639, 640, 653, 655, 657, 658, 682, 688, 699, 713, 715, 727, 733, 746, 749, 751, 752, 753, 754, 761, 763, 765, 766, 767, 782, 803, 809, 812, 813, 815, 833, 871, 883, 894, 1065, 1066, 1068, 1071, 1073, 1075, 1077, 1079, 1080, 1083, 1084, 1085, 1086, 1087, 1088, 1090, 1091, 1092, 1093, 1094, 1097, 1098, 1099, 1102, 1109, 1118, 1143, 1153, 1155, 1166, 1171, 1181, 1193, 1196, 1222], "kei": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 122, 127, 132, 133, 135, 139, 145, 169, 172, 178, 180, 187, 195, 209, 210, 211, 215, 227, 242, 267, 315, 320, 322, 331, 345, 351, 352, 353, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 385, 386, 394, 396, 446, 447, 449, 490, 509, 547, 548, 561, 562, 591, 592, 593, 597, 602, 634, 639, 653, 713, 715, 727, 733, 753, 754, 782, 798, 801, 815, 818, 826, 827, 828, 829, 867, 883, 894, 909, 935, 947, 949, 950, 952, 955, 959, 964, 965, 970, 971, 973, 975, 976, 980, 993, 996, 1005, 1006, 1007, 1011, 1016, 1017, 1021, 1023, 1026, 1031, 1059, 1061, 1062, 1066, 1073, 1075, 1077, 1079, 1080, 1084, 1087, 1088, 1109, 1118, 1137, 1144, 1145, 1155, 1166, 1222], "an": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 122, 127, 132, 133, 135, 139, 145, 178, 179, 180, 181, 214, 217, 304, 305, 310, 315, 320, 322, 391, 413, 424, 453, 466, 546, 547, 548, 561, 562, 591, 597, 598, 603, 626, 753, 798, 800, 813, 826, 827, 828, 829, 839, 877, 883, 890, 894, 897, 921, 940, 947, 959, 964, 967, 971, 972, 992, 1011, 1016, 1026, 1065, 1067, 1073, 1075, 1077, 1078, 1081, 1082, 1084, 1086, 1087, 1091, 1097, 1106, 1109, 1138, 1155, 1163, 1218, 1219, 1220, 1222], "object": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 97, 105, 122, 124, 127, 132, 133, 134, 135, 139, 145, 146, 171, 205, 209, 210, 211, 213, 216, 218, 240, 242, 344, 486, 492, 592, 634, 681, 682, 684, 730, 732, 798, 800, 801, 806, 807, 810, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 827, 832, 833, 840, 866, 867, 869, 870, 873, 883, 888, 889, 894, 913, 914, 915, 916, 917, 918, 919, 920, 921, 931, 958, 959, 972, 989, 999, 1013, 1031, 1033, 1048, 1051, 1053, 1054, 1059, 1065, 1066, 1067, 1068, 1071, 1076, 1078, 1081, 1087, 1091, 1097, 1099, 1106, 1108, 1109, 1113, 1115, 1116, 1118, 1120, 1121, 1131, 1134, 1135, 1155, 1157, 1166, 1196, 1218], "suitabl": [3, 4, 5, 7, 8, 9, 11, 12, 13, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 33, 34, 35, 39, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53, 57, 59, 60, 61, 62, 65, 66, 68, 70, 73, 74, 75, 76, 80, 81, 84, 90, 92, 1087, 1120], "process_method": [3, 4, 5, 7, 8, 9, 11, 12, 13, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 33, 34, 35, 39, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53, 57, 59, 60, 61, 62, 65, 66, 68, 70, 73, 74, 75, 76, 80, 81, 84, 90, 92, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117], "input_arg": [3, 4, 5, 7, 8, 9, 11, 12, 13, 16, 17, 18, 19, 20, 21, 22, 24, 25, 26, 27, 28, 29, 33, 34, 35, 39, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53, 57, 59, 60, 61, 62, 65, 66, 68, 70, 73, 74, 75, 76, 80, 81, 84, 90, 92, 100, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 807, 835, 921], "argument": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 122, 127, 128, 132, 135, 139, 145, 196, 747, 803, 809, 812, 883, 890, 894, 896, 940, 944, 959, 965, 1002, 1017, 1023, 1059, 1062, 1073, 1075, 1077, 1084, 1218], "attribut": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 96, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 120, 122, 123, 124, 126, 127, 132, 133, 135, 136, 137, 139, 142, 145, 146, 147, 168, 181, 208, 220, 233, 301, 371, 388, 426, 455, 465, 468, 482, 483, 502, 572, 573, 632, 756, 757, 771, 798, 799, 800, 801, 807, 813, 815, 825, 826, 827, 828, 829, 832, 836, 837, 838, 839, 883, 894, 911, 942, 959, 1059, 1065, 1067, 1068, 1070, 1071, 1073, 1074, 1075, 1077, 1079, 1080, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1091, 1095, 1101, 1103, 1118, 1155, 1157], "add_complexes_by_infer": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "complex": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 132, 133, 135, 139, 145, 157, 204, 209, 210, 211, 212, 213, 216, 218, 225, 245, 246, 248, 378, 391, 427, 468, 469, 470, 592, 677, 687, 688, 704, 711, 712, 729, 730, 731, 883, 1066, 1087, 1096, 1097, 1099, 1118, 1120, 1218, 1219, 1221], "none": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 98, 100, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 122, 126, 127, 128, 132, 133, 135, 139, 145, 146, 149, 169, 172, 180, 181, 187, 188, 189, 209, 218, 233, 239, 242, 258, 264, 267, 269, 291, 299, 306, 308, 312, 313, 314, 315, 316, 319, 322, 329, 331, 340, 341, 346, 350, 356, 357, 360, 362, 382, 389, 390, 391, 392, 427, 431, 432, 546, 547, 548, 561, 562, 581, 591, 592, 602, 603, 630, 647, 650, 669, 671, 683, 707, 727, 731, 732, 735, 736, 737, 744, 760, 762, 764, 767, 771, 798, 801, 804, 805, 806, 807, 808, 809, 810, 812, 813, 815, 816, 817, 818, 819, 820, 821, 822, 823, 825, 833, 835, 836, 838, 840, 869, 870, 874, 875, 883, 888, 889, 890, 894, 901, 909, 929, 931, 936, 938, 941, 942, 960, 971, 987, 992, 1002, 1008, 1010, 1011, 1012, 1013, 1016, 1020, 1028, 1031, 1032, 1036, 1037, 1048, 1049, 1051, 1053, 1054, 1057, 1059, 1060, 1061, 1062, 1065, 1066, 1067, 1069, 1070, 1073, 1074, 1075, 1077, 1079, 1080, 1083, 1084, 1086, 1087, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1102, 1106, 1109, 1110, 1111, 1112, 1113, 1114, 1116, 1117, 1118, 1119, 1120, 1123, 1124, 1126, 1128, 1129, 1133, 1134, 1155, 1157, 1163, 1171, 1181, 1182, 1193, 1220], "creat": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 127, 128, 132, 133, 135, 139, 145, 731, 807, 883, 890, 894, 901, 931, 951, 952, 1012, 1013, 1048, 1051, 1054, 1056, 1057, 1065, 1073, 1075, 1077, 1079, 1080, 1081, 1082, 1086, 1087, 1088, 1091, 1095, 1099, 1109, 1118, 1217, 1219], "silico": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 715, 1217], "infer": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 135, 196, 197, 747, 748], "add": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 135, 145, 424, 815, 819, 883, 894, 938, 939, 1048, 1068, 1071, 1087, 1097, 1099, 1118, 1220, 1221, 1222], "them": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 127, 135, 139, 145, 546, 699, 883, 940, 942, 958, 959, 1006, 1075, 1077, 1087, 1098, 1106, 1219, 1220, 1222], "thi": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 105, 120, 126, 127, 133, 135, 139, 145, 169, 172, 174, 175, 188, 196, 250, 267, 269, 276, 292, 304, 305, 310, 327, 346, 356, 358, 361, 363, 391, 413, 432, 468, 469, 470, 546, 547, 548, 602, 628, 629, 633, 634, 653, 699, 727, 744, 749, 771, 788, 801, 803, 807, 809, 812, 814, 815, 819, 826, 827, 828, 829, 836, 867, 871, 883, 885, 900, 904, 924, 938, 939, 942, 947, 948, 950, 976, 980, 993, 996, 1021, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1048, 1049, 1054, 1058, 1059, 1061, 1066, 1070, 1073, 1075, 1077, 1078, 1079, 1080, 1083, 1084, 1086, 1087, 1088, 1091, 1095, 1096, 1097, 1099, 1102, 1106, 1109, 1111, 1113, 1116, 1118, 1121, 1131, 1135, 1155, 1217, 1218, 1219, 1220, 1221, 1222], "all_complex": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "all": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 118, 126, 127, 133, 135, 139, 145, 172, 174, 180, 197, 289, 294, 302, 319, 322, 356, 357, 447, 468, 539, 546, 547, 548, 602, 626, 630, 634, 653, 727, 747, 771, 801, 815, 819, 833, 871, 876, 883, 894, 940, 941, 959, 976, 979, 980, 993, 996, 997, 1005, 1006, 1021, 1026, 1031, 1043, 1048, 1054, 1065, 1066, 1067, 1073, 1075, 1077, 1083, 1087, 1088, 1097, 1106, 1109, 1118, 1120, 1133, 1134, 1136, 1138, 1146, 1157, 1190, 1215, 1217, 1218, 1220, 1221, 1222], "all_ent": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "entity_typ": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 98, 122, 123, 135, 139, 209, 801, 805, 810, 1086, 1087, 1092, 1096], "entiti": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 98, 135, 139, 145, 468, 469, 470, 801, 976, 980, 993, 996, 1021, 1086, 1087, 1092, 1096, 1109, 1116, 1121, 1221, 1222], "all_mirna": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "mirna": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 122, 135, 139, 145, 525, 535, 537, 539, 742, 883, 920, 1025, 1085, 1086, 1087, 1096, 1217, 1221, 1222], "all_protein": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "all_ref": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "some": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 135, 139, 145, 468, 546, 548, 813, 1041, 1046, 1067, 1083, 1087, 1097, 1099, 1106, 1218, 1220, 1222], "contain": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 126, 135, 139, 145, 297, 322, 391, 424, 439, 547, 601, 657, 711, 717, 749, 788, 801, 839, 871, 883, 889, 894, 896, 938, 939, 952, 958, 965, 989, 990, 1025, 1048, 1106, 1109, 1218, 1219, 1222], "refer": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 118, 122, 126, 131, 132, 135, 136, 145, 174, 175, 196, 197, 299, 313, 358, 382, 388, 396, 426, 432, 449, 455, 502, 546, 547, 548, 552, 566, 597, 662, 771, 807, 815, 818, 833, 883, 894, 913, 914, 917, 918, 919, 1045, 1046, 1048, 1123, 1124, 1129, 1157, 1167, 1188, 1222], "The": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 96, 120, 122, 127, 128, 131, 132, 133, 134, 135, 139, 145, 178, 193, 195, 196, 197, 198, 209, 210, 213, 215, 216, 228, 276, 297, 302, 312, 315, 320, 322, 356, 361, 396, 420, 432, 490, 494, 547, 562, 591, 592, 602, 603, 634, 653, 683, 690, 699, 708, 711, 712, 745, 746, 751, 788, 801, 813, 833, 839, 883, 905, 925, 927, 938, 940, 943, 949, 952, 959, 964, 969, 972, 983, 985, 990, 1000, 1003, 1006, 1007, 1011, 1020, 1026, 1031, 1048, 1051, 1059, 1061, 1066, 1067, 1070, 1073, 1075, 1077, 1079, 1080, 1083, 1084, 1086, 1087, 1088, 1091, 1097, 1099, 1102, 1109, 1118, 1155, 1171, 1193, 1218, 1219, 1220, 1221, 1222], "field": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 123, 135, 136, 137, 147, 168, 177, 208, 220, 239, 240, 242, 267, 299, 301, 303, 309, 313, 322, 388, 426, 455, 465, 502, 541, 542, 561, 562, 572, 573, 632, 647, 699, 756, 757, 771, 780, 798, 799, 800, 837, 839, 894, 959, 964, 1026, 1031, 1074, 1089, 1101, 1103, 1222], "alwai": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 303, 309, 391, 396, 931, 1087, 1099, 1118, 1218], "pmid": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 208, 655, 656, 657, 658, 795, 832], "pubm": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 132, 301, 358, 411, 412, 597, 833, 1121], "collect": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 121, 131, 133, 135, 145, 146, 261, 315, 320, 322, 418, 546, 547, 548, 1222], "across": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 135, 145, 894, 976, 979, 980, 993, 996, 997, 1021], "record": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 135, 139, 145, 181, 188, 196, 197, 214, 217, 228, 233, 234, 235, 236, 261, 299, 322, 395, 442, 468, 567, 639, 649, 658, 699, 774, 1083, 1118, 1222], "list": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 105, 122, 126, 127, 128, 132, 133, 135, 139, 145, 157, 170, 171, 174, 175, 177, 178, 179, 181, 183, 185, 188, 189, 196, 197, 198, 206, 212, 214, 217, 229, 233, 234, 235, 236, 239, 240, 241, 242, 243, 258, 278, 279, 289, 294, 299, 312, 313, 314, 316, 318, 319, 322, 329, 333, 338, 356, 357, 371, 374, 400, 401, 416, 417, 419, 420, 432, 442, 448, 449, 451, 467, 470, 477, 482, 483, 485, 486, 487, 488, 492, 493, 494, 561, 562, 591, 595, 597, 598, 607, 609, 619, 621, 623, 624, 625, 634, 647, 655, 657, 662, 668, 688, 694, 699, 705, 707, 708, 710, 711, 712, 713, 727, 732, 733, 747, 748, 752, 753, 787, 788, 790, 793, 800, 801, 812, 813, 815, 818, 867, 874, 876, 894, 905, 925, 938, 939, 942, 945, 952, 958, 959, 961, 964, 965, 971, 985, 990, 1006, 1011, 1012, 1013, 1016, 1017, 1020, 1023, 1026, 1031, 1065, 1066, 1067, 1073, 1075, 1077, 1079, 1080, 1083, 1084, 1086, 1087, 1102, 1106, 1109, 1118, 1123, 1124, 1129, 1155, 1157, 1166, 1171, 1181, 1187, 1188, 1190, 1193, 1196, 1215, 1217, 1221, 1222], "annotate_complex": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "cplex": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 677], "singl": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 127, 135, 139, 145, 188, 196, 468, 469, 470, 657, 815, 894, 961, 1012, 1013, 1065, 1066, 1067, 1073, 1075, 1077, 1084, 1087, 1094, 1196], "brows": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 139, 845, 1048], "start": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 123, 136, 137, 139, 145, 147, 168, 208, 220, 301, 388, 426, 455, 465, 502, 546, 548, 572, 573, 591, 601, 632, 756, 757, 798, 799, 800, 816, 820, 837, 839, 947, 1074, 1089, 1101, 1103, 1106, 1163, 1218, 1221], "0": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 122, 123, 135, 136, 137, 139, 147, 168, 208, 220, 243, 251, 301, 382, 388, 408, 426, 434, 442, 455, 465, 502, 509, 572, 573, 632, 699, 710, 756, 757, 798, 799, 800, 805, 807, 810, 837, 839, 854, 867, 870, 938, 939, 947, 950, 961, 990, 1017, 1020, 1023, 1048, 1049, 1051, 1054, 1057, 1074, 1089, 1101, 1103, 1106, 1155, 1163, 1218, 1219], "present": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 123, 135, 136, 137, 139, 145, 147, 168, 208, 220, 301, 388, 426, 455, 465, 502, 572, 573, 632, 756, 757, 798, 799, 800, 819, 837, 839, 871, 940, 1048, 1074, 1089, 1101, 1103, 1220], "inform": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 100, 131, 135, 139, 145, 151, 152, 211, 448, 597, 628, 649, 751, 752, 754, 801, 819, 883, 894, 909, 1040, 1041, 1051, 1075, 1077, 1087, 1098, 1109, 1155, 1163, 1218, 1220, 1222], "about": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 100, 128, 131, 135, 139, 145, 151, 152, 302, 322, 338, 448, 597, 628, 751, 752, 1038, 1039, 1051, 1067, 1087, 1088, 1097, 1106, 1155, 1166, 1218, 1220, 1222], "categori": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 139, 597, 717, 798, 801, 1066, 1221, 1222], "ascii": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 139, 242, 974, 1171, 1193], "tabl": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 127, 139, 145, 242, 282, 315, 320, 331, 332, 333, 334, 377, 378, 385, 386, 424, 444, 485, 486, 487, 488, 527, 595, 607, 626, 650, 662, 699, 715, 745, 746, 749, 787, 793, 801, 803, 809, 812, 813, 883, 894, 900, 905, 925, 971, 1011, 1016, 1075, 1077, 1081, 1086, 1087, 1088, 1163, 1171, 1181, 1193, 1217, 1218, 1221], "print": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 139, 151, 152, 751, 943, 1036, 1037, 1038, 1039, 1040, 1041, 1048, 1109, 1155, 1163, 1181, 1193], "termin": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 139, 943, 1051, 1220], "If": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 127, 128, 132, 133, 135, 139, 145, 196, 209, 242, 267, 306, 308, 319, 356, 357, 360, 362, 449, 546, 547, 548, 561, 602, 633, 634, 699, 731, 732, 744, 767, 798, 801, 813, 815, 819, 894, 938, 940, 942, 947, 950, 958, 971, 975, 983, 1006, 1012, 1013, 1016, 1017, 1020, 1023, 1059, 1061, 1065, 1066, 1067, 1073, 1075, 1077, 1079, 1080, 1086, 1087, 1088, 1097, 1106, 1109, 1157, 1182, 1218, 1220, 1222], "one": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 127, 132, 133, 134, 135, 139, 145, 169, 171, 180, 243, 267, 269, 322, 356, 357, 358, 364, 365, 366, 367, 396, 431, 432, 448, 468, 469, 470, 547, 626, 629, 657, 699, 746, 749, 751, 752, 771, 788, 803, 809, 812, 813, 815, 819, 833, 883, 894, 938, 942, 947, 958, 959, 1006, 1056, 1057, 1059, 1065, 1067, 1073, 1075, 1077, 1078, 1079, 1080, 1083, 1086, 1087, 1088, 1097, 1098, 1099, 1102, 1106, 1109, 1118, 1133, 1134, 1155, 1157, 1166, 1196, 1199, 1220, 1222], "multipl": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 105, 127, 132, 135, 139, 180, 196, 303, 304, 305, 307, 309, 310, 432, 942, 1059, 1066, 1075, 1077, 1078, 1087, 1099, 1109, 1218, 1222], "each": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 126, 132, 133, 135, 139, 145, 181, 188, 189, 196, 197, 198, 212, 213, 214, 216, 217, 225, 239, 242, 313, 318, 395, 432, 448, 449, 468, 561, 591, 593, 597, 601, 629, 639, 640, 688, 752, 771, 871, 883, 894, 931, 948, 955, 959, 1006, 1020, 1059, 1066, 1087, 1088, 1106, 1109, 1118, 1163, 1166, 1218, 1219, 1222], "proceed": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 139], "next": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 139, 420, 744, 935, 1086, 1087, 1088], "onc": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 135, 139, 169, 927, 1031, 1087, 1099, 1106], "you": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 127, 135, 139, 145, 197, 420, 468, 469, 470, 547, 633, 634, 801, 813, 883, 1031, 1032, 1035, 1041, 1046, 1067, 1073, 1075, 1077, 1079, 1080, 1083, 1084, 1087, 1097, 1106, 1109, 1218, 1220, 1222], "hit": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 139], "goe": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 139, 1220], "through": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 139, 241, 833, 1163, 1219], "level": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 105, 132, 133, 135, 139, 143, 145, 301, 303, 304, 305, 307, 309, 310, 364, 365, 366, 367, 548, 591, 634, 705, 717, 733, 801, 819, 826, 827, 828, 829, 883, 921, 931, 943, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1048, 1049, 1057, 1059, 1065, 1066, 1067, 1087, 1102, 1131, 1218, 1219, 1222], "primari": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 132, 133, 135, 763, 839, 1087, 1097, 1218], "nonetyp": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 122, 132, 135, 145, 546, 547, 548, 650, 909, 1059], "select": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 127, 128, 135, 139, 145, 197, 801, 959, 1032, 1065, 1078, 1123, 1222], "doesn": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 145, 952, 1087, 1097], "t": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 145, 242, 468, 469, 470, 547, 715, 880, 952, 980, 983, 1021, 1033, 1034, 1037, 1038, 1049, 1086, 1087, 1097, 1219, 1220, 1222], "have": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 127, 135, 139, 145, 177, 358, 546, 548, 708, 711, 801, 813, 867, 883, 894, 917, 918, 947, 1006, 1035, 1041, 1046, 1065, 1083, 1086, 1087, 1106, 1109, 1118, 1217, 1218, 1220, 1221, 1222], "string": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 122, 127, 132, 133, 135, 139, 145, 211, 240, 241, 242, 267, 322, 343, 546, 548, 592, 653, 682, 751, 753, 798, 815, 871, 894, 941, 944, 946, 962, 963, 966, 967, 968, 971, 974, 986, 988, 989, 992, 1004, 1008, 1015, 1016, 1025, 1031, 1048, 1051, 1065, 1077, 1086, 1087, 1092, 1106, 1109, 1113, 1116, 1121, 1155, 1157, 1171, 1199], "consid": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 132, 133, 135, 139, 145, 391, 767, 833, 883, 905, 925, 1065], "tupl": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 122, 123, 127, 133, 135, 136, 137, 139, 145, 147, 168, 169, 170, 174, 175, 177, 180, 181, 189, 198, 206, 208, 209, 210, 212, 213, 215, 216, 218, 220, 223, 224, 228, 229, 233, 234, 235, 236, 239, 267, 301, 312, 313, 314, 316, 318, 319, 322, 331, 333, 338, 351, 352, 353, 356, 357, 358, 360, 361, 362, 364, 365, 366, 367, 388, 394, 395, 426, 442, 446, 448, 455, 465, 477, 490, 502, 509, 546, 548, 561, 562, 566, 567, 572, 573, 593, 595, 598, 602, 626, 632, 634, 647, 682, 688, 699, 705, 707, 708, 710, 711, 712, 715, 733, 752, 756, 757, 787, 788, 790, 793, 799, 801, 815, 818, 819, 837, 867, 875, 877, 894, 947, 950, 952, 958, 959, 964, 990, 1026, 1031, 1048, 1065, 1067, 1073, 1075, 1077, 1079, 1080, 1084, 1087, 1088, 1089, 1092, 1101, 1102, 1103, 1106, 1120, 1135], "valu": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 123, 127, 133, 135, 136, 137, 139, 145, 147, 168, 169, 171, 172, 178, 180, 187, 195, 204, 205, 206, 208, 211, 220, 227, 228, 229, 233, 241, 242, 267, 301, 315, 320, 331, 340, 341, 345, 351, 352, 353, 356, 357, 358, 360, 361, 362, 363, 364, 365, 366, 367, 385, 386, 388, 394, 426, 446, 447, 449, 455, 465, 490, 502, 509, 547, 548, 561, 572, 573, 591, 592, 593, 597, 601, 602, 629, 632, 634, 639, 640, 653, 708, 711, 712, 713, 715, 727, 733, 753, 754, 756, 757, 782, 798, 799, 800, 801, 813, 815, 826, 827, 828, 829, 837, 839, 867, 883, 894, 941, 942, 947, 948, 949, 952, 955, 957, 959, 960, 964, 970, 972, 974, 975, 983, 984, 992, 1006, 1007, 1014, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1051, 1059, 1061, 1062, 1066, 1067, 1073, 1074, 1075, 1077, 1079, 1080, 1083, 1084, 1087, 1088, 1089, 1097, 1099, 1101, 1103, 1106, 1137, 1166, 1218, 1222], "In": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 127, 135, 145, 292, 356, 357, 358, 468, 469, 470, 626, 629, 634, 715, 894, 931, 972, 1031, 1057, 1075, 1077, 1087, 1097, 1099, 1106, 1109, 1147, 1218, 1219, 1220], "former": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 798, 813, 883, 1220], "case": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 127, 135, 227, 228, 229, 432, 634, 798, 801, 883, 919, 949, 972, 1032, 1057, 1066, 1073, 1075, 1077, 1084, 1086, 1087, 1097, 1098, 1099, 1106, 1109, 1218, 1220, 1222], "combin": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 105, 131, 139, 303, 304, 305, 307, 309, 310, 468, 708, 711, 942, 1118, 1120, 1218, 1219, 1222], "latter": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 135, 297, 592, 813, 883, 972, 1087, 1220], "limit": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 135, 139, 180, 413, 432, 468, 469, 470, 546, 548, 708, 711, 712, 798, 801], "ar": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 122, 126, 127, 131, 132, 133, 135, 139, 145, 169, 171, 172, 180, 187, 195, 197, 198, 204, 205, 206, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 233, 242, 269, 276, 292, 306, 308, 312, 349, 351, 352, 353, 356, 357, 358, 360, 361, 362, 364, 365, 366, 367, 369, 385, 386, 396, 431, 439, 447, 449, 468, 469, 470, 509, 548, 561, 591, 592, 593, 629, 633, 634, 639, 640, 653, 657, 683, 686, 687, 688, 699, 712, 733, 747, 753, 788, 798, 801, 803, 809, 812, 819, 888, 890, 894, 914, 917, 918, 919, 935, 945, 947, 949, 950, 958, 959, 1006, 1007, 1020, 1031, 1058, 1059, 1062, 1065, 1067, 1073, 1075, 1077, 1079, 1080, 1083, 1084, 1087, 1088, 1097, 1099, 1106, 1109, 1118, 1123, 1128, 1129, 1155, 1217, 1218, 1219, 1220, 1221, 1222], "suppos": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 1051], "us": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 97, 122, 127, 128, 132, 135, 139, 145, 169, 181, 195, 197, 198, 303, 304, 305, 307, 309, 310, 315, 320, 385, 386, 389, 413, 432, 546, 547, 548, 562, 633, 634, 649, 653, 657, 708, 711, 712, 748, 798, 801, 803, 809, 812, 813, 825, 877, 894, 896, 901, 909, 912, 914, 917, 935, 938, 972, 976, 980, 993, 996, 1021, 1031, 1037, 1041, 1046, 1048, 1059, 1061, 1065, 1066, 1073, 1075, 1077, 1079, 1080, 1083, 1084, 1086, 1087, 1088, 1090, 1097, 1098, 1099, 1102, 1109, 1131, 1155, 1217, 1218, 1219, 1220], "e": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 122, 127, 128, 135, 139, 145, 242, 312, 313, 314, 315, 316, 346, 374, 466, 468, 546, 547, 548, 650, 657, 748, 771, 801, 814, 819, 833, 867, 883, 894, 943, 945, 947, 959, 961, 965, 966, 967, 1065, 1067, 1077, 1086, 1087, 1093, 1094, 1106, 1109, 1118, 1134, 1166, 1217, 1218, 1219, 1220, 1221, 1222], "g": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 122, 127, 128, 135, 139, 145, 242, 346, 374, 466, 468, 546, 547, 548, 650, 748, 771, 801, 819, 867, 883, 943, 945, 959, 965, 1020, 1065, 1077, 1086, 1093, 1094, 1109, 1134, 1166, 1217, 1218, 1219, 1220, 1221, 1222], "500": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 322, 360, 362, 431, 432], "250": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "skip": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "everyth": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 432, 1087, 1097, 1220], "befor": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 358, 909, 1051, 1109, 1220], "250th": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "pass": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 135, 139, 145, 241, 747, 798, 813, 944, 959, 972, 1057, 1086, 1087, 1106, 1163, 1171, 1193], "util": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 127, 139, 657, 833, 1218, 1219, 1221], "info": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 139, 904, 909, 924, 946, 1155, 1163, 1222], "complex_infer": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "default": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 122, 127, 135, 139, 145, 197, 267, 276, 356, 357, 358, 432, 546, 547, 548, 561, 562, 744, 771, 801, 883, 894, 909, 921, 927, 942, 960, 963, 965, 970, 990, 992, 1008, 1020, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1049, 1059, 1061, 1065, 1073, 1075, 1077, 1079, 1080, 1083, 1084, 1087, 1097, 1099, 1106, 1109, 1135, 1138, 1218, 1222], "databas": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 118, 119, 120, 122, 127, 128, 131, 132, 133, 135, 139, 145, 151, 155, 186, 188, 189, 191, 195, 196, 197, 198, 209, 210, 211, 212, 213, 214, 215, 216, 217, 245, 246, 250, 258, 302, 303, 304, 305, 307, 309, 310, 313, 338, 384, 389, 396, 449, 451, 460, 468, 469, 470, 509, 525, 552, 566, 567, 597, 598, 649, 729, 731, 732, 733, 744, 757, 801, 815, 843, 844, 883, 894, 896, 915, 917, 918, 919, 1031, 1069, 1070, 1143, 1157, 1217, 1218, 1219, 1221, 1222], "exist": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 119, 127, 135, 139, 145, 267, 552, 744, 883, 935, 936, 952, 964, 975, 1031, 1032, 1036, 1048, 1057, 1069, 1073, 1075, 1077, 1081, 1084, 1087, 1091, 1118], "gener": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 122, 128, 132, 135, 139, 228, 239, 242, 243, 304, 305, 310, 619, 774, 801, 819, 835, 904, 905, 909, 924, 925, 963, 971, 1016, 1106, 1217, 1221], "demand": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 127, 883, 927, 1073, 1075, 1077, 1084], "accord": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 135, 139, 145, 451, 717, 825, 883, 890, 894, 952, 990, 1020, 1048, 1106], "": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 122, 135, 139, 145, 267, 561, 715, 801, 813, 815, 819, 839, 883, 938, 939, 948, 957, 976, 979, 980, 992, 993, 996, 997, 1000, 1021, 1041, 1048, 1086, 1087, 1220, 1221], "current": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 119, 135, 145, 152, 322, 358, 826, 827, 828, 829, 845, 883, 1048, 1051, 1059, 1061, 1069, 1086, 1109, 1220, 1222], "valid": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 135, 145, 175, 424, 539, 650, 826, 827, 828, 829, 1061, 1087], "won": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 145, 468, 469, 470, 547, 983, 1034, 1037, 1038, 1049, 1087, 1220], "iter": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 122, 127, 128, 133, 145, 710, 771, 774, 819, 945, 959, 960, 961, 964, 969, 992, 1000, 1003, 1006, 1017, 1020, 1023, 1026, 1051, 1067, 1073, 1075, 1077, 1084, 1087, 1109, 1111, 1113, 1116, 1120, 1121, 1133, 1134], "yield": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 122, 135, 181, 223, 228, 357, 468, 469, 470, 566, 567, 682, 683, 763, 959, 985, 1113, 1116, 1120, 1121, 1135], "coverag": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 921, 1222], "other": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 122, 127, 128, 132, 135, 139, 145, 241, 358, 361, 396, 601, 602, 603, 629, 801, 803, 809, 812, 815, 894, 914, 938, 941, 948, 958, 959, 961, 965, 974, 976, 980, 993, 996, 1020, 1021, 1048, 1059, 1067, 1087, 1106, 1109, 1118, 1135, 1143, 1217, 1218, 1219, 1222], "calcul": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 439, 1218], "proport": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "least": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 135, 139, 940], "arbitrari": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 240, 883, 940, 1222], "curation_effort": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 145, 818], "count": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 122, 123, 135, 136, 137, 139, 145, 147, 168, 208, 220, 301, 388, 426, 455, 465, 502, 572, 573, 632, 756, 757, 798, 799, 800, 837, 839, 951, 976, 979, 980, 997, 1074, 1089, 1101, 1103, 1218], "pair": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 126, 127, 135, 139, 145, 267, 442, 468, 477, 552, 600, 601, 603, 733, 763, 819, 876, 894, 970, 990, 1031, 1059, 1073, 1075, 1077, 1079, 1222], "get_nam": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 1065, 1067], "consist": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 132, 145, 800, 1051, 1219], "uniform": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 139, 964], "might": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 97, 126, 135, 139, 468, 469, 470, 801, 894, 985, 1087, 1109, 1118, 1220, 1222], "more": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 122, 126, 127, 132, 135, 139, 145, 169, 172, 174, 175, 180, 181, 248, 267, 322, 356, 361, 752, 754, 771, 788, 897, 942, 959, 1065, 1073, 1075, 1077, 1083, 1084, 1087, 1097, 1098, 1099, 1102, 1106, 1109, 1118, 1155, 1166, 1196, 1217, 1218, 1219, 1220, 1221, 1222], "exampl": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 127, 131, 145, 361, 825, 921, 938, 939, 945, 949, 952, 961, 1002, 1006, 1017, 1020, 1023, 1025, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1065, 1109, 1118, 1155, 1218, 1219, 1220], "cell_typ": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 502], "expression_level": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "score": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 139, 250, 455, 708, 711, 712, 715], "static": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 139, 813, 894, 1054, 1087, 1155], "get_reference_set": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "use_complex": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94], "fals": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 98, 126, 127, 128, 132, 133, 135, 139, 145, 149, 178, 180, 181, 195, 196, 198, 225, 233, 243, 248, 260, 276, 299, 303, 304, 305, 307, 309, 310, 314, 316, 319, 322, 349, 354, 355, 358, 382, 431, 442, 470, 500, 539, 547, 561, 581, 598, 634, 637, 650, 662, 663, 699, 736, 747, 748, 765, 766, 771, 798, 804, 807, 810, 818, 823, 836, 843, 883, 894, 901, 909, 927, 947, 971, 983, 997, 1002, 1006, 1014, 1031, 1034, 1035, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1051, 1065, 1067, 1077, 1086, 1087, 1097, 1098, 1099, 1106, 1109, 1118, 1138], "9606": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 100, 122, 126, 135, 145, 165, 166, 169, 174, 175, 177, 178, 179, 180, 185, 195, 198, 202, 203, 204, 205, 206, 209, 210, 211, 212, 213, 214, 215, 216, 217, 227, 228, 229, 248, 250, 251, 256, 271, 272, 273, 278, 279, 285, 286, 291, 302, 303, 306, 308, 309, 331, 332, 334, 340, 341, 348, 349, 356, 357, 358, 359, 369, 437, 442, 447, 456, 492, 493, 494, 500, 509, 511, 512, 513, 514, 515, 527, 528, 529, 530, 531, 532, 533, 544, 564, 566, 602, 603, 609, 621, 623, 625, 629, 639, 640, 647, 680, 681, 686, 687, 692, 693, 694, 695, 697, 698, 699, 702, 708, 710, 711, 712, 723, 735, 736, 740, 758, 759, 760, 762, 763, 764, 765, 766, 767, 771, 773, 776, 777, 780, 783, 784, 803, 804, 807, 812, 813, 815, 816, 820, 821, 823, 835, 883, 1065, 1066, 1068, 1069, 1070, 1071, 1073, 1079, 1080, 1083, 1084, 1096, 1118, 1133, 1134, 1136, 1138], "swissprot_onli": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 1076, 1106], "true": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 98, 126, 127, 133, 135, 139, 145, 157, 174, 175, 178, 180, 196, 197, 206, 245, 276, 291, 303, 309, 322, 374, 382, 386, 399, 400, 401, 431, 432, 447, 500, 539, 598, 602, 609, 620, 621, 624, 642, 643, 657, 670, 678, 680, 681, 683, 694, 699, 708, 711, 719, 720, 721, 735, 770, 771, 772, 773, 776, 777, 780, 783, 784, 798, 801, 807, 843, 883, 894, 905, 925, 946, 947, 950, 958, 959, 971, 983, 987, 1002, 1010, 1014, 1031, 1032, 1033, 1035, 1037, 1039, 1041, 1043, 1046, 1048, 1051, 1065, 1067, 1069, 1070, 1073, 1075, 1076, 1077, 1078, 1079, 1080, 1083, 1084, 1086, 1087, 1097, 1098, 1099, 1106, 1109, 1118, 1147], "retriev": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 119, 135, 139, 145, 158, 171, 177, 179, 180, 191, 196, 204, 205, 206, 224, 227, 229, 233, 234, 235, 236, 245, 253, 254, 258, 303, 304, 305, 307, 309, 310, 313, 316, 319, 322, 340, 341, 343, 344, 345, 346, 358, 378, 453, 466, 468, 470, 512, 514, 515, 525, 535, 537, 539, 597, 761, 771, 774, 813, 883, 886, 973, 1059, 1065, 1069, 1087, 1106, 1157, 1182], "which": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 97, 100, 118, 126, 127, 128, 134, 135, 139, 145, 233, 269, 356, 361, 468, 547, 591, 628, 657, 708, 711, 788, 818, 888, 890, 894, 897, 901, 909, 914, 938, 939, 940, 942, 945, 952, 959, 974, 976, 980, 990, 993, 996, 1020, 1021, 1034, 1035, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1054, 1065, 1067, 1081, 1087, 1088, 1091, 1106, 1109, 1118, 1123, 1128, 1129, 1217, 1218, 1219, 1220, 1221, 1222], "potenti": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 909, 1087], "typic": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 883, 935, 1087, 1097, 1099], "proteom": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 118, 128, 1075, 1087], "organ": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 127, 128, 131, 145, 168, 169, 170, 172, 174, 175, 177, 178, 179, 180, 185, 195, 197, 198, 202, 203, 204, 205, 206, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 227, 228, 229, 248, 250, 251, 256, 271, 272, 273, 278, 279, 285, 286, 291, 302, 303, 306, 308, 309, 319, 331, 332, 334, 338, 340, 341, 348, 349, 354, 355, 356, 357, 358, 359, 369, 374, 382, 385, 386, 437, 442, 456, 492, 493, 494, 500, 509, 511, 512, 513, 514, 515, 527, 528, 529, 530, 531, 532, 533, 544, 546, 547, 548, 564, 566, 592, 602, 603, 609, 610, 619, 620, 627, 629, 639, 640, 647, 680, 681, 686, 687, 692, 693, 694, 695, 697, 698, 699, 702, 713, 723, 735, 736, 748, 758, 759, 760, 762, 763, 764, 765, 766, 767, 771, 773, 776, 777, 780, 783, 784, 813, 815, 836, 883, 1065, 1068, 1069, 1070, 1071, 1073, 1075, 1077, 1078, 1079, 1080, 1083, 1084, 1086, 1087, 1088, 1097, 1099, 1123, 1124, 1128, 1129, 1133, 1134, 1136, 1138, 1221, 1222], "option": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 127, 132, 135, 139, 145, 174, 175, 180, 218, 239, 267, 312, 313, 314, 315, 316, 319, 322, 329, 356, 357, 468, 469, 470, 561, 562, 647, 707, 883, 942, 963, 965, 970, 983, 990, 1020, 1059, 1062, 1073, 1075, 1077, 1084, 1086, 1087, 1092, 1097, 1099, 1102, 1106, 1109, 1135, 1138, 1171, 1193, 1218, 1220, 1222], "get_subset": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 798], "subset": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 918], "filter": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 98, 122, 131, 139, 145, 177, 181, 959], "element": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 122, 126, 127, 134, 135, 139, 145, 242, 297, 389, 626, 634, 657, 662, 749, 801, 818, 867, 938, 939, 940, 945, 947, 949, 952, 958, 959, 960, 961, 964, 965, 976, 979, 980, 992, 993, 996, 997, 1006, 1012, 1013, 1017, 1020, 1021, 1023, 1065, 1073, 1075, 1077, 1079, 1080, 1087, 1109], "get_subset_bool_arrai": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "reference_set": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "boolean": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 135, 807], "vector": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "presenc": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 135, 894], "absenc": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 135, 894], "simplest": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "kind": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 135, 139, 1087, 1088, 1096, 1218, 1222], "match": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 127, 135, 139, 145, 185, 447, 1073, 1075, 1077, 1084, 1087, 1097, 1099, 1135, 1222], "possibl": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 127, 133, 135, 145, 180, 228, 340, 341, 385, 629, 653, 1026, 1067, 1073, 1075, 1077, 1079, 1080, 1083, 1084, 1086, 1087, 1097, 1099, 1106, 1113, 1116, 1121, 1143, 1218, 1219, 1220], "get_valu": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "exclude_non": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "call": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 122, 132, 135, 145, 265, 360, 362, 562, 747, 748, 798, 800, 825, 835, 883, 890, 894, 942, 949, 965, 1031, 1032, 1086, 1087, 1097, 1099, 1109, 1118, 1218, 1220], "can": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 96, 122, 127, 131, 132, 133, 135, 139, 145, 180, 197, 218, 424, 468, 469, 470, 562, 629, 708, 711, 712, 800, 801, 813, 815, 819, 888, 894, 896, 904, 917, 924, 959, 961, 965, 966, 967, 976, 980, 983, 990, 993, 996, 1017, 1021, 1023, 1031, 1049, 1059, 1065, 1067, 1073, 1075, 1077, 1079, 1080, 1083, 1084, 1086, 1087, 1097, 1098, 1099, 1102, 1109, 1163, 1217, 1218, 1219, 1220, 1221], "tell": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 269, 765, 766, 767, 883, 966, 967, 1065, 1067, 1086, 1087, 1222], "macrophag": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 913], "epithelial_cel": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "label": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 133, 135, 139, 145, 146, 147, 168, 169, 170, 171, 172, 753, 754, 803, 809, 813, 826, 827, 828, 829, 839, 867, 885, 886, 888, 889, 890, 935, 1048, 1054, 1057, 1066, 1086, 1087, 1093, 1094, 1155], "same": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 122, 127, 132, 135, 139, 145, 356, 361, 431, 591, 749, 753, 788, 801, 803, 807, 809, 812, 815, 836, 871, 875, 877, 940, 1073, 1075, 1077, 1084, 1086, 1087, 1097, 1099, 1109, 1118, 1220], "human": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 122, 127, 128, 135, 139, 172, 180, 195, 196, 197, 198, 204, 205, 206, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 227, 228, 229, 289, 294, 302, 303, 306, 308, 309, 354, 355, 356, 357, 358, 369, 374, 389, 394, 395, 397, 413, 444, 470, 546, 547, 548, 600, 619, 620, 627, 629, 639, 640, 681, 684, 686, 687, 699, 715, 727, 747, 748, 771, 1083, 1087, 1096, 1218, 1222], "readabl": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 139, 600, 1087, 1096], "py": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 126, 135, 139, 145, 883, 909, 1220], "attr": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 122, 132, 135, 139, 145, 181, 815, 883, 909, 942, 1113, 1116, 1120], "infer_complex": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "load_data": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 127, 128, 835], "load_protein": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "entir": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 1218], "make_df": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 139, 145, 894], "rebuild": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 883], "compil": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 126, 169, 883, 971, 1220], "panda": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 139, 145, 171, 172, 276, 302, 460, 598, 640, 946, 1106, 1217, 1218, 1221, 1222], "datafram": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 127, 139, 145, 171, 276, 302, 460, 598, 640, 946, 1075, 1077, 1217, 1218], "frame": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 98, 127, 139, 145, 171, 172, 276, 302, 598, 640, 818, 883, 894, 901, 1073, 1075, 1077, 1079, 1084, 1221], "assign": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 120, 126, 135, 139, 145, 894, 993, 996, 1021, 1070, 1222], "df": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 98, 127, 139, 946, 1073, 1075, 1077, 1084], "numof_ent": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "number": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 123, 127, 131, 135, 136, 137, 139, 145, 147, 168, 174, 175, 180, 208, 220, 242, 301, 322, 388, 424, 426, 432, 439, 442, 447, 455, 465, 468, 469, 470, 502, 572, 573, 626, 629, 632, 707, 708, 733, 756, 757, 785, 798, 799, 800, 813, 819, 823, 833, 837, 839, 871, 894, 940, 942, 948, 966, 976, 979, 980, 1005, 1048, 1051, 1065, 1067, 1074, 1077, 1087, 1089, 1097, 1099, 1101, 1102, 1103, 1109, 1131, 1155, 1157, 1189, 1218, 1219], "numof_record": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "total": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 147, 197, 322, 951, 1051, 1109], "numof_refer": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "process": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 128, 131, 139, 145, 157, 169, 174, 175, 183, 185, 204, 206, 245, 289, 294, 304, 305, 310, 374, 389, 400, 401, 416, 417, 467, 475, 482, 483, 494, 527, 546, 621, 624, 662, 668, 680, 683, 694, 698, 699, 727, 747, 749, 763, 788, 790, 798, 801, 835, 917, 935, 1017, 1023, 1031, 1065, 1086, 1087, 1106, 1109, 1118, 1217, 1221], "_process_method": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 835], "reload": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 94, 105, 120, 132, 133, 135, 139, 145, 883, 927, 1065, 1066, 1067, 1070, 1087], "set_method": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 127, 128, 835], "look": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 127, 139, 145, 745, 746, 749, 798, 800, 813, 835, 952, 1087, 1097, 1106, 1135, 1218], "up": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 139, 145, 304, 305, 310, 357, 361, 468, 469, 470, 699, 745, 746, 749, 798, 800, 835, 947, 950, 952, 1061, 1086, 1087, 1097, 1102, 1109, 1131, 1133, 1134, 1135, 1155, 1218, 1220], "necessari": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 292, 629, 835, 883, 890, 1081, 1086, 1109, 1218, 1220], "set_reference_set": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "show": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 133, 135, 139, 145, 894, 1031, 1086, 1218, 1222], "table_param": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "consol": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 139, 432, 1031, 1035, 1048], "basic": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 139, 152, 771, 1220], "datasheet": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 139, 343, 344, 345, 761, 1087, 1156, 1196], "subset_intersect": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "univers": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "occur": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 145, 976, 980, 993, 996, 1021, 1220], "to_arrai": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "use_field": [3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "v": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 145, 276, 1220], "featur": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 356, 361, 826, 827, 828, 829, 1133, 1134, 1166, 1171, 1181, 1193], "arrai": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 180, 904, 924], "huge": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 139, 807, 1087, 1106], "to_bool_arrai": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92], "to_set": [3, 4, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 31, 32, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 798], "dump": [5, 100, 744, 835, 883, 935, 1086, 1218], "primary_field": 5, "check_id": 5, "abstractresourc": [5, 100], "protein_sourc": 6, "complex_sourc": 6, "keep_annot": [6, 93, 94], "create_datafram": [6, 93, 94], "pickle_fil": [6, 30, 105, 126, 145, 1065, 1069, 1070], "logger": [6, 30, 122, 126, 127, 145, 835, 883, 890, 894, 901, 909, 929, 1032, 1049, 1054, 1055, 1057, 1065, 1066, 1067, 1073, 1078, 1086, 1087, 1088, 1102, 1109, 1118, 1123], "manag": [6, 885, 1081, 1082, 1091, 1218, 1219, 1220], "accept": [6, 145, 420, 894, 940, 944, 959, 1065, 1088, 1218, 1222], "convert": [6, 30, 145, 218, 243, 276, 486, 487, 488, 492, 493, 749, 894, 938, 939, 958, 962, 966, 967, 969, 974, 1000, 1003, 1013, 1014, 1015, 1048, 1067, 1087, 1097, 1099, 1102, 1106, 1131], "protein_sources_default": 6, "complex_sources_default": 6, "onli": [6, 30, 122, 127, 132, 133, 135, 139, 145, 169, 172, 174, 175, 195, 198, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 233, 261, 267, 302, 303, 304, 305, 307, 309, 310, 314, 316, 322, 369, 374, 386, 439, 442, 447, 546, 548, 609, 650, 657, 727, 771, 801, 803, 809, 812, 871, 883, 900, 917, 918, 921, 927, 938, 942, 949, 959, 986, 1004, 1006, 1031, 1032, 1040, 1045, 1048, 1067, 1073, 1075, 1077, 1079, 1080, 1083, 1084, 1086, 1087, 1088, 1097, 1098, 1099, 1106, 1118, 1120, 1138, 1147, 1217, 1220, 1221, 1222], "construct": [6, 1031, 1086], "default_field": 6, "bool": [6, 30, 127, 128, 135, 139, 145, 157, 174, 175, 178, 180, 181, 195, 196, 197, 198, 206, 225, 233, 276, 303, 304, 305, 307, 309, 310, 314, 316, 319, 322, 358, 374, 386, 389, 432, 442, 447, 470, 547, 561, 598, 602, 609, 634, 657, 699, 708, 711, 748, 771, 798, 801, 812, 813, 894, 909, 947, 950, 959, 972, 983, 1002, 1006, 1065, 1067, 1073, 1075, 1077, 1083, 1084, 1086, 1087, 1097, 1099, 1106, 1109, 1147], "whether": [6, 132, 135, 145, 157, 233, 374, 432, 657, 748, 801, 959, 983, 1109], "includ": [6, 30, 135, 139, 145, 157, 178, 180, 181, 195, 197, 198, 206, 209, 233, 297, 306, 308, 319, 374, 561, 562, 602, 609, 711, 712, 748, 803, 809, 812, 875, 894, 915, 917, 918, 919, 952, 1059, 1065, 1067, 1109, 1217, 1218, 1220, 1221, 1222], "apart": [6, 145, 267, 561, 562], "upon": [6, 30, 139, 1014, 1035, 1086], "initi": [6, 36, 93, 94, 119, 120, 145, 909, 1051, 1069, 1070, 1086, 1109, 1120, 1147, 1217, 1221], "chanc": 6, "later": [6, 30, 126, 133, 135, 139, 730, 1086, 1109], "all_annot": [6, 30], "all_annotations_str": 6, "serial": [6, 96, 122, 132, 133, 135], "search": [6, 30, 139, 145, 988, 1086, 1106, 1155, 1218, 1220], "dictionari": [6, 30, 96, 122, 127, 132, 133, 135, 139, 145, 178, 180, 204, 227, 242, 267, 396, 447, 449, 453, 546, 591, 593, 597, 600, 730, 749, 753, 771, 782, 798, 874, 889, 931, 941, 942, 949, 952, 965, 970, 975, 1006, 1007, 1017, 1023, 1073, 1075, 1077, 1080, 1086, 1087, 1088, 1097], "approv": 10, "cancer": [10, 188, 189, 191, 258, 261, 451, 642, 643], "drug": [10, 32, 122, 145, 187, 188, 189, 236, 312, 313, 314, 316, 318, 319, 320, 1087, 1155, 1217, 1221], "http": [10, 38, 72, 181, 188, 189, 195, 196, 197, 198, 209, 210, 211, 212, 213, 214, 215, 216, 217, 227, 229, 231, 248, 253, 254, 303, 304, 305, 307, 309, 310, 322, 411, 412, 413, 420, 432, 477, 525, 535, 546, 547, 548, 554, 555, 569, 570, 598, 639, 640, 649, 686, 687, 688, 699, 732, 733, 752, 771, 787, 864, 985, 1018, 1019, 1031, 1086, 1087, 1106, 1155, 1171, 1193, 1218, 1219, 1220, 1222], "www": [10, 181, 188, 189, 209, 210, 211, 212, 213, 214, 215, 216, 217, 248, 477, 525, 535, 598, 649, 752, 787, 1018, 1019, 1086, 1087, 1106, 1155], "anticancerfund": [10, 188, 189], "org": [10, 38, 181, 188, 189, 209, 210, 211, 212, 213, 214, 215, 216, 217, 248, 371, 413, 477, 525, 546, 547, 548, 554, 555, 598, 649, 771, 787, 813, 864, 1086, 1087, 1106, 1219, 1222], "en": [10, 188, 189, 322, 864], "cancerdrug": [10, 188, 189], "db": [10, 94, 120, 188, 189, 798, 883, 1070], "cellphonedb": [13, 913, 1222], "abbrevi": [14, 15, 43, 561, 1048, 1109], "cspa": [14, 15], "cell": [23, 58, 64, 69, 171, 172, 231, 377, 378, 569, 570, 793, 801, 1011, 1065], "type": [23, 58, 69, 121, 122, 127, 128, 135, 136, 145, 171, 172, 179, 180, 189, 208, 209, 210, 215, 231, 312, 315, 320, 340, 341, 385, 432, 449, 546, 569, 570, 581, 597, 626, 650, 653, 671, 752, 753, 754, 801, 803, 809, 812, 813, 818, 819, 883, 894, 938, 939, 958, 969, 974, 1000, 1002, 1003, 1006, 1017, 1020, 1023, 1031, 1032, 1049, 1067, 1073, 1075, 1077, 1079, 1080, 1083, 1084, 1086, 1087, 1088, 1092, 1097, 1098, 1099, 1155, 1218, 1219], "marker": [23, 58, 69, 231, 569, 570], "annot_attr": 26, "corum": [27, 28, 1222], "class_definit": [30, 139, 798, 800], "exclud": [30, 126, 139, 145, 169, 172, 174, 175, 197, 264, 265, 546, 548, 710, 798], "excludes_extra": [30, 139], "annotdb_pickle_fil": 30, "composite_resource_nam": [30, 139], "seri": [30, 135, 139, 276, 1087, 1096, 1163], "definit": [30, 139, 145, 396, 747, 800, 801, 883, 886, 889, 890, 909, 912, 931, 1086, 1087, 1217, 1221], "instanc": [30, 93, 100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 126, 127, 128, 133, 135, 139, 145, 356, 361, 745, 815, 820, 885, 890, 927, 1020, 1046, 1049, 1051, 1055, 1069, 1075, 1077, 1081, 1082, 1086, 1087, 1091, 1095, 1097, 1123, 1128, 1218, 1222], "intern": [30, 133, 139, 211, 218, 486, 592, 634, 730, 913, 914, 915, 916, 917, 918, 919, 920, 921, 1086, 1087, 1097, 1099, 1221], "annot_format": [30, 139], "annotdef": [30, 139], "These": [30, 139, 440, 552, 592, 788, 803, 809, 812, 813, 883, 894, 915, 917, 918, 919, 935, 1087, 1099, 1109, 1118, 1218, 1219, 1220, 1222], "carri": [30, 96, 139, 592], "instruct": [30, 139, 424], "popul": [30, 133, 139, 801], "parent": [30, 139, 396, 653, 798, 799, 801, 1067, 1110, 1111, 1112, 1114, 1117, 1119, 1120], "respect": [30, 135, 139, 145, 351, 352, 353, 356, 357, 358, 360, 361, 362, 364, 365, 366, 367, 990], "while": [30, 135, 139, 145, 213, 216, 297, 396, 548, 602, 629, 634, 894, 1051, 1218, 1220], "p00533": [30, 139, 143, 145, 1222], "egfr": [30, 135, 139, 145, 1109, 1222], "under": [30, 96, 139, 825, 904, 924, 1091, 1095], "adhes": [30, 64, 139, 143], "direct": [30, 128, 135, 136, 139, 145, 482, 602, 619, 801, 807, 894, 915, 919, 942, 1065, 1067, 1087], "children": [30, 139], "ad": [30, 139, 145, 871, 894, 938, 939, 947, 959, 1109, 1118, 1217, 1219, 1221], "built": [30, 139, 145, 813, 883, 885, 886, 896, 909, 942, 988, 1065, 1066, 1218, 1220], "extra": [30, 133, 139, 145, 561, 894, 1087], "merg": [30, 96, 122, 126, 127, 132, 135, 139, 145, 815, 942, 952, 970, 975, 1109, 1118, 1219], "want": [30, 127, 135, 139, 145, 1041, 1046, 1220, 1222], "overwrit": [30, 135, 139, 909, 1007], "modifi": [30, 135, 139, 946, 1038, 1220], "your": [30, 139, 883, 1048, 1106, 1218, 1220, 1222], "execut": [30, 139, 1109], "instanti": [30, 139, 801, 927], "empti": [30, 133, 135, 139, 145, 303, 309, 391, 634, 945, 960, 992, 1002, 1012, 1013, 1087], "class_to_class_connect": [30, 139], "filter_interclass_network": [30, 139], "classes_by_ent": [30, 139], "One": [30, 122, 127, 135, 139, 145, 169, 172, 180, 181, 749, 771, 894, 1073, 1075, 1077, 1084, 1087, 1102, 1155, 1166, 1218], "instead": [30, 135, 139, 145, 470, 598, 940, 1035, 1059, 1061, 1220, 1222], "iter_class": [30, 139], "counts_by_class": [30, 139], "create_class": [30, 139], "classdef": [30, 139], "overrid": [30, 139, 803, 809, 812, 813, 883, 1059, 1061], "degree_inter_class_network": [30, 139], "annot_args_sourc": [30, 139], "annot_args_target": [30, 139], "degrees_of": [30, 139], "target": [30, 127, 128, 135, 139, 145, 155, 177, 188, 236, 276, 301, 302, 303, 304, 305, 307, 309, 310, 319, 385, 386, 525, 535, 537, 539, 566, 567, 626, 629, 653, 790, 807, 822, 883, 898, 920, 1067, 1073, 1075, 1077, 1079, 1080, 1083, 1084, 1086, 1087, 1088, 1097, 1155, 1218, 1221, 1222], "degre": [30, 135, 139, 990], "filter_class": [30, 139], "annot_df": [30, 139], "combined_df": [30, 139], "network_arg": [30, 139], "annot_arg": [30, 139], "entities_sourc": [30, 139], "entities_target": [30, 139], "only_direct": [30, 98, 139, 145], "only_undirect": [30, 98, 139], "only_sign": [30, 98, 135, 139], "only_effect": [30, 139], "only_protein": [30, 98, 139, 442], "swap_undirect": [30, 98, 139], "undirected_orient": [30, 139], "entities_or": [30, 98, 139], "where": [30, 127, 135, 139, 145, 188, 351, 352, 353, 360, 361, 362, 364, 365, 366, 367, 449, 468, 509, 548, 629, 733, 819, 839, 883, 975, 1031, 1073, 1075, 1077, 1084, 1109, 1218, 1220, 1222], "between": [30, 139, 145, 206, 223, 554, 591, 593, 600, 601, 603, 629, 634, 708, 711, 763, 815, 958, 969, 1000, 1003, 1075, 1077, 1085, 1086, 1087, 1097, 1098, 1218, 1221, 1222], "enit": [30, 139], "alreadi": [30, 135, 139, 145, 749, 909, 921, 1025, 1056, 1057, 1067, 1086, 1118, 1219], "side": [30, 139, 894, 1086], "connect": [30, 135, 139, 1118, 1218, 1221, 1222], "note": [30, 135, 139, 180, 304, 305, 310, 509, 938, 949, 1017, 1023, 1087, 1222], "howev": [30, 135, 139, 547, 883, 1219, 1222], "result": [30, 127, 135, 139, 145, 181, 225, 242, 319, 322, 356, 357, 360, 362, 447, 602, 626, 749, 801, 894, 974, 975, 1035, 1041, 1042, 1043, 1046, 1067, 1077, 1086, 1087, 1098, 1106, 1109, 1155, 1218], "consequ": [30, 139], "memori": [30, 139, 442, 683, 883, 946, 1087, 1088, 1102, 1109, 1131, 1133, 1134, 1221], "issu": [30, 139, 1041, 1046, 1218, 1219], "criteria": [30, 135, 145, 683, 1087], "defin": [30, 36, 121, 127, 128, 134, 135, 139, 145, 591, 601, 708, 711, 712, 798, 801, 813, 815, 885, 894, 896, 959, 972, 1059, 1087, 1088, 1218, 1222], "here": [30, 96, 122, 132, 134, 135, 139, 145, 197, 276, 322, 420, 591, 888, 896, 959, 972, 1051, 1086, 1087, 1106, 1118, 1218, 1220, 1222], "appli": [30, 683, 883, 1042], "undirect": [30, 135, 139, 894, 918], "specif": [30, 122, 128, 135, 139, 145, 228, 240, 322, 490, 798, 801, 883, 1048, 1143, 1218, 1219, 1220], "without": [30, 96, 97, 122, 132, 135, 139, 145, 233, 798, 913, 941, 945, 965, 1020, 1220, 1222], "effect": [30, 98, 135, 136, 139, 145, 301, 483, 668, 790, 822, 1218], "1": [30, 123, 127, 135, 136, 137, 139, 145, 147, 168, 174, 175, 208, 220, 301, 377, 378, 388, 426, 444, 455, 502, 572, 573, 632, 705, 756, 757, 798, 799, 800, 807, 809, 811, 816, 819, 820, 821, 823, 837, 839, 854, 864, 876, 938, 939, 940, 947, 949, 950, 952, 961, 1006, 1017, 1020, 1023, 1051, 1074, 1077, 1087, 1089, 1097, 1099, 1101, 1103, 1106, 1135, 1155, 1219, 1222], "partner": [30, 135, 139, 145, 388, 468, 894, 1222], "small": [30, 122, 139, 216, 217, 688, 883, 1109, 1217, 1221], "molecul": [30, 64, 122, 135, 139, 145, 216, 217, 235, 312, 340, 341, 688, 883, 894, 1109, 1222], "mutual": [30, 135], "ignor": [30, 132, 133, 135, 139, 145, 267, 839, 1026, 1087, 1098], "make": [30, 126, 139, 883, 938, 1012, 1013, 1039, 1045, 1046, 1087, 1097, 1099, 1218, 1219, 1222], "sure": [30, 139, 883, 1012, 1013], "orient": [30, 139], "partenr": [30, 139], "get_class": [30, 139], "its": [30, 121, 135, 139, 145, 212, 267, 313, 346, 357, 413, 601, 634, 788, 890, 935, 936, 992, 1017, 1020, 1023, 1038, 1039, 1065, 1067, 1068, 1071, 1087, 1091, 1097, 1099, 1109, 1147, 1153, 1217, 1221], "content": [30, 96, 122, 132, 135, 139, 248, 338, 460, 547, 649, 699, 801, 883, 909, 917, 971, 1011, 1016, 1031, 1059, 1109, 1218], "annotop": [30, 139], "oper": [30, 131, 139, 800, 801, 940, 979, 996, 997, 1065], "over": [30, 128, 139, 774, 1120, 1133, 1134, 1218, 1221], "get_df": [30, 139, 1073], "doe": [30, 93, 119, 135, 139, 145, 292, 391, 432, 744, 788, 815, 935, 938, 964, 996, 1017, 1023, 1035, 1040, 1045, 1048, 1067, 1069, 1081, 1087, 1088, 1091, 1097, 1109, 1220, 1222], "yet": [30, 93, 119, 126, 139, 145, 883, 952, 1069, 1081, 1087, 1222], "get_interclass_network_df": [30, 139], "interclass": [30, 139], "otherwis": [30, 122, 132, 133, 135, 139, 145, 357, 447, 449, 561, 591, 798, 944, 947, 950, 959, 962, 971, 972, 973, 989, 1007, 1012, 1013, 1015, 1016, 1087], "network_df": [30, 139, 883], "get_par": [30, 139], "As": [30, 139, 303, 309, 1037, 1038, 1118, 1222], "uniqu": [30, 126, 135, 139, 145, 147, 818, 867, 894, 938, 942, 949, 979, 980, 996, 997, 1006, 1007, 1017, 1020, 1021, 1023, 1026, 1109, 1222], "determin": [30, 135, 139, 883, 990, 1020, 1087], "get_resourc": [30, 135, 139, 145], "For": [30, 36, 127, 128, 135, 139, 145, 171, 178, 180, 242, 303, 304, 305, 307, 309, 310, 546, 547, 548, 562, 655, 753, 754, 765, 766, 771, 801, 813, 825, 833, 890, 935, 948, 951, 955, 957, 976, 979, 980, 993, 996, 997, 1005, 1021, 1065, 1066, 1067, 1073, 1075, 1077, 1079, 1080, 1083, 1087, 1093, 1094, 1096, 1102, 1106, 1109, 1118, 1143, 1146, 1147, 1153, 1155, 1218, 1220, 1222], "belong": [30, 135, 139, 145, 815, 976, 980, 993, 996, 1021, 1055, 1067, 1081], "composit": [30, 139, 801], "first": [30, 123, 127, 135, 136, 137, 139, 145, 147, 168, 208, 220, 267, 301, 388, 426, 455, 465, 502, 572, 573, 591, 600, 601, 603, 632, 634, 756, 757, 798, 799, 800, 812, 837, 839, 867, 871, 927, 943, 947, 949, 952, 959, 986, 992, 1020, 1025, 1073, 1074, 1075, 1077, 1079, 1080, 1086, 1087, 1089, 1097, 1099, 1101, 1103, 1106, 1109, 1138, 1157, 1199, 1217, 1220, 1221], "alphabet": [30, 135, 139, 1118], "order": [30, 126, 135, 139, 145, 876, 894, 938, 1017, 1018, 1019, 1020, 1023, 1025, 1109, 1118, 1133, 1134, 1219, 1222], "given": [30, 135, 139, 145, 424, 439, 602, 629, 819, 942, 949, 952, 965, 974, 990, 1000, 1020, 1065, 1087, 1098, 1106, 1123, 1128, 1133, 1134, 1218], "full_nam": [30, 825], "populate_class": [30, 139], "updat": [30, 96, 122, 132, 135, 139, 145, 292, 356, 361, 909, 1051, 1059, 1218, 1219, 1222], "classif": [30, 38, 139, 426], "populate_scor": [30, 139], "consensu": [30, 135, 139, 1085], "process_annot": [30, 139], "quality_check_t": [30, 139], "path": [30, 139, 145, 193, 267, 315, 690, 744, 883, 889, 909, 935, 936, 952, 971, 1016, 1048, 1049, 1086, 1109, 1220], "fmt": [30, 139], "tsv": [30, 139, 901, 903, 923, 1016], "only_swissprot": [30, 139, 386, 1073, 1075, 1077, 1079, 1080, 1083], "top": [30, 139, 733, 843, 1218], "export": [30, 139, 630, 883, 1086, 1171, 1193, 1217, 1219, 1220, 1221], "format": [30, 128, 139, 145, 158, 169, 205, 276, 547, 621, 624, 657, 681, 682, 684, 785, 904, 941, 943, 1048, 1051, 1087, 1143, 1171, 1193, 1217, 1218, 1221, 1222], "qualiti": [30, 139, 1218, 1222], "check": [30, 135, 139, 181, 413, 785, 825, 826, 827, 828, 829, 883, 959, 968, 1002, 1087, 1123, 1171, 1193, 1220, 1222], "purpos": [30, 139, 825, 900], "row": [30, 127, 139, 171, 172, 276, 818, 883, 894, 1073, 1075, 1077, 1084, 1222], "file": [30, 139, 145, 157, 185, 193, 228, 240, 241, 242, 243, 267, 304, 305, 310, 315, 357, 384, 389, 485, 494, 598, 602, 621, 623, 624, 625, 630, 653, 680, 681, 684, 690, 694, 744, 788, 871, 875, 880, 883, 889, 894, 906, 909, 926, 935, 971, 1016, 1020, 1031, 1032, 1034, 1035, 1048, 1049, 1058, 1059, 1086, 1087, 1090, 1106, 1109, 1118, 1137, 1217, 1218, 1220, 1221], "latex": [30, 139, 971, 1171, 1193], "register_network": [30, 139], "dataset": [30, 139, 169, 170, 171, 172, 181, 188, 196, 197, 205, 228, 248, 294, 416, 417, 627, 628, 699, 788, 883, 898, 914, 921, 1219], "afterward": [30, 139, 1220], "discard": [30, 139, 145, 748, 1087], "futur": [30, 139, 633, 634, 815, 1222], "address": [30, 139, 312, 313, 314, 315, 316, 546, 547, 548, 1106], "regist": [30, 139, 312, 313, 314, 315, 316, 420, 546, 547, 548, 1106], "resources_in_categori": [30, 139], "contribut": [30, 139], "set_interclass_network_df": [30, 139], "whole": [30, 139], "inter": [30, 139, 883, 1219], "keep": [30, 122, 128, 139, 174, 175, 442, 561, 602, 650, 657, 959, 1020, 1087, 1088, 1106, 1157, 1188, 1219], "subsequ": [30, 127, 139, 952], "faster": [30, 139, 1086], "update_par": [30, 139], "cytokin": [31, 91, 275, 276], "perturb": [31, 91, 275], "signatur": [31, 51, 72, 91, 275, 276, 639, 640], "druggabl": [32, 288, 289], "gene": [32, 36, 37, 40, 72, 135, 145, 177, 178, 180, 181, 188, 189, 191, 231, 258, 276, 343, 344, 345, 451, 525, 535, 537, 539, 546, 547, 548, 569, 570, 597, 629, 639, 640, 662, 742, 761, 894, 1065, 1066, 1067, 1068, 1071, 1083, 1085, 1086, 1087, 1093, 1094, 1096, 1097, 1099, 1218, 1219, 1221, 1222], "go_annot": [36, 37, 1066], "gocustomannot": 36, "go": [36, 446, 449, 947, 1041, 1218, 1220, 1221], "intercell_annot": [36, 139, 801], "intercell_categori": 36, "get_annot": [36, 1065, 1066], "correspond": [36, 135, 145, 178, 313, 655, 729, 731, 826, 827, 828, 829, 894, 897, 1059, 1062, 1066, 1083, 1087, 1093, 1102, 1131], "ontologi": [36, 37, 361, 394, 395, 396, 397, 546, 548, 636, 809, 1065, 1066, 1067, 1068, 1071, 1090, 1218, 1219, 1221], "term": [36, 349, 351, 352, 353, 356, 357, 358, 360, 361, 362, 364, 365, 366, 367, 395, 396, 397, 413, 420, 446, 449, 562, 1065, 1066, 1067], "express": [36, 86, 88, 169, 170, 171, 172, 275, 303, 304, 305, 307, 309, 310, 710, 801, 1065, 1066, 1106, 1217, 1219, 1222], "process_categori": [36, 1066], "translat": [36, 127, 135, 315, 320, 331, 332, 334, 385, 386, 486, 626, 629, 630, 653, 657, 688, 753, 813, 814, 1066, 1073, 1075, 1077, 1079, 1080, 1084, 1086, 1087, 1088, 1091, 1097, 1098, 1099, 1134, 1155, 1217, 1218, 1219, 1221, 1222], "ac": [36, 248, 601, 603, 732, 733, 752, 1066, 1087, 1097, 1155, 1166], "role": [37, 139, 143, 209, 210, 212, 215, 227, 502, 801, 883, 1219], "intercellular": [37, 139, 143, 801, 1221], "commun": [37, 139, 143, 801, 871, 883, 909, 1219, 1221], "gpcr": 38, "load_sourc": [39, 57, 73], "ligandreceptor": [39, 57, 73], "hpmr": [43, 913, 1222], "famili": [47, 85, 389, 426, 468, 469, 470, 699, 1118], "pathwai": [54, 55, 67, 72, 78, 79, 145, 196, 197, 261, 465, 467, 555, 639, 640, 682, 701, 913, 919, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1219, 1222], "kegg": [54, 55, 196, 197, 303, 309, 921], "via": [55, 132, 133, 135, 145, 836, 837, 838, 839], "pathwaycommon": [55, 1217, 1221], "kinas": [56, 400, 475, 487, 609, 1222], "com": [56, 72, 195, 196, 197, 198, 231, 303, 304, 305, 307, 309, 310, 475, 535, 537, 639, 640, 686, 687, 688, 985, 1018, 1019, 1031, 1106, 1171, 1193, 1219, 1220, 1222], "panglaodb": 58, "ligand_col": 59, "receptor_col": 59, "ligand_id_typ": 59, "receptor_id_typ": 59, "record_processor_method": 59, "record_extra_field": 59, "record_default": 59, "extra_fields_method": 59, "literatur": [60, 131, 132, 135, 145, 294, 303, 304, 305, 307, 309, 310, 416, 417, 418, 500, 525, 535, 537, 552, 554, 555, 566, 623, 894, 897, 913, 918, 919, 1217, 1218, 1222], "extern": [60, 449, 500, 1220], "predict": [60, 245, 301, 303, 304, 305, 307, 309, 310, 432, 500, 715, 747, 748, 1217], "cam": 64, "10": [64, 147, 248, 301, 331, 332, 333, 334, 444, 468, 469, 470, 477, 649, 787, 793, 795, 798, 985, 1073, 1087, 1106, 1123, 1219, 1220], "4137": 64, "cin": 64, "s341": 64, "netpath": [67, 915], "phosphatas": [71, 607], "chen": [71, 607], "et": [71, 83, 331, 332, 333, 334, 444, 477, 607, 649, 787, 793, 801, 1106], "al": [71, 83, 331, 332, 333, 334, 444, 477, 607, 649, 787, 793, 801, 1106], "scienc": [71, 607], "signal": [71, 139, 183, 607, 801, 1222], "2017": [71, 417, 607], "s1": [71, 607], "respons": [72, 562, 639, 640], "transcriptom": [72, 639, 640], "github": [72, 195, 196, 197, 198, 231, 253, 254, 303, 304, 305, 307, 309, 310, 639, 640, 686, 687, 688, 1171, 1193, 1219, 1220, 1222], "saezlab": [72, 303, 304, 305, 307, 309, 310, 639, 640, 1219, 1220, 1222], "signalink": [77, 78, 1222], "signor": [79, 913, 921, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1222], "topolog": [82, 89], "domain": [82, 89, 127, 297, 432, 439, 492, 493, 494, 601, 717, 731, 732, 749, 788, 814, 818, 1077, 1133, 1134, 1218, 1222], "transmembran": [82, 89, 220], "segment": [82, 89, 1106, 1218], "transcript": [83, 135, 145, 155, 171, 172, 178, 180, 181, 470, 727, 804, 916, 921, 1087, 1097, 1099, 1217, 1222], "factor": [83, 145, 727, 1222], "tf": [83, 155, 196, 197, 301, 302, 303, 304, 305, 307, 309, 310, 566, 567, 727, 742, 883, 898, 1217, 1221, 1222], "censu": [83, 258, 727], "vaqueriza": [83, 727], "2009": [83, 727], "tissu": [86, 88, 171, 172, 1106, 1222], "subcellular": [87, 663], "local": [87, 157, 209, 210, 212, 215, 485, 494, 694, 788, 904, 906, 924, 926, 965, 1048, 1086, 1217, 1218, 1219, 1220, 1221], "exocarta": 90, "cytosig": 91, "dedic": [96, 1222], "json": [96, 122, 132, 133, 135, 240, 241, 322, 889, 909, 1106], "full": [96, 122, 126, 132, 135, 178, 248, 561, 562, 699, 753, 787, 883, 1048, 1106, 1217, 1221], "whitespac": [96, 122, 132, 135], "line": [96, 122, 132, 135, 171, 172, 242, 303, 304, 305, 307, 309, 310, 871, 894, 943], "break": [96, 122, 132, 135, 432], "update_attr": [96, 122, 132, 135], "store": [96, 122, 132, 135, 815, 819, 909, 927, 1049, 1078, 1082, 1102, 1106, 1109, 1131, 1155, 1218], "ident": [96, 122, 132, 135, 357, 788, 909], "share": [96, 122, 132, 135, 145, 147, 801, 825, 1220, 1221], "common": [96, 122, 132, 135, 1143, 1163], "combine_attr": [96, 122, 132, 135], "new": [96, 122, 128, 132, 135, 145, 238, 883, 909, 921, 952, 1049, 1056, 1057, 1087, 1095, 1118, 1217, 1219, 1220, 1221, 1222], "three": [96, 122, 132, 135, 593, 871, 875, 883, 1218], "wai": [96, 122, 132, 133, 135, 145, 267, 361, 363, 601, 602, 603, 753, 803, 809, 812, 883, 894, 942, 964, 1059, 1062, 1086, 1109, 1118, 1217, 1218, 1220], "keyword": [96, 122, 132, 135, 940, 959, 965, 1157, 1188], "work": [97, 292, 322, 629, 909, 912, 942, 948, 1087, 1097, 1218, 1220, 1222], "import": [97, 145, 356, 357, 361, 699, 883, 921, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1181, 1219, 1220], "main": [97, 126, 132, 135, 145, 942, 1059, 1217, 1220, 1221, 1222], "data_model": [98, 135, 145, 807, 838, 839], "interaction_typ": [98, 132, 133, 135, 145, 572, 807, 838, 839], "source_ent": 98, "target_ent": 98, "remove_loop": [98, 145], "intera": [100, 101, 102, 103, 104, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 127, 211, 218, 486, 492, 592, 634, 730, 1077, 1218], "abstractcomplexresourc": [101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117], "mani": [118, 396, 468, 469, 470, 1087, 1097, 1099, 1217, 1218, 1220, 1221, 1222], "just": [118, 145, 803, 809, 812, 931, 1113, 1116, 1121, 1220], "like": [118, 135, 145, 240, 242, 801, 813, 931, 1111, 1113, 1116, 1121, 1220, 1222], "all_uniprot": [118, 346, 1065], "taxon": [121, 122, 123, 135, 145, 338, 626, 782, 1073, 1075, 1087, 1143], "id_typ": [122, 123, 127, 135, 315, 320, 385, 431, 432, 547, 548, 753, 810, 813, 816, 819, 820, 821, 823, 1073, 1075, 1077, 1079, 1080, 1083, 1086, 1087, 1088, 1089, 1096, 1097, 1098, 1099, 1113, 1116, 1121, 1123, 1124, 1126, 1128, 1129, 1155], "attributehandl": [122, 132, 135, 1112, 1113, 1114, 1119, 1120], "lncrna": [122, 145, 883, 1087], "non": [122, 128, 145, 552, 896, 940, 1067, 1087, 1097, 1099, 1220], "metabolit": [122, 145, 1217, 1221], "compound": [122, 145, 466, 490, 1085, 1155, 1217, 1221], "addit": [122, 127, 145, 292, 306, 308, 432, 561, 562, 894, 1031, 1065, 1077, 1222], "classmethod": [122, 145, 801, 826, 827, 828, 829, 889, 894, 1048, 1087], "count_entity_typ": 122, "filter_entity_typ": [122, 801], "ones": [122, 135, 145, 561, 562, 591, 947, 1067, 1102, 1131], "occurr": [123, 136, 137, 147, 168, 208, 220, 250, 301, 388, 426, 455, 465, 502, 572, 573, 632, 756, 757, 798, 799, 800, 837, 839, 1074, 1089, 1101, 1103], "alia": [123, 136, 137, 147, 168, 208, 220, 301, 388, 426, 455, 465, 502, 572, 573, 632, 756, 757, 798, 799, 800, 837, 839, 1074, 1089, 1101, 1103], "2": [123, 136, 145, 147, 168, 208, 220, 242, 301, 349, 388, 426, 455, 468, 502, 509, 572, 573, 597, 632, 662, 704, 705, 756, 757, 798, 799, 837, 839, 854, 894, 938, 939, 940, 942, 947, 949, 950, 961, 1006, 1017, 1020, 1023, 1074, 1089, 1101, 1103, 1106, 1218, 1219, 1220], "index": [123, 136, 137, 147, 168, 208, 220, 227, 229, 276, 301, 388, 426, 455, 465, 502, 539, 569, 570, 572, 573, 632, 756, 757, 798, 799, 800, 837, 839, 959, 964, 969, 1000, 1003, 1026, 1074, 1089, 1101, 1103], "stop": [123, 136, 137, 147, 168, 208, 220, 301, 388, 426, 455, 465, 502, 572, 573, 632, 756, 757, 798, 799, 800, 837, 839, 1034, 1038, 1074, 1089, 1101, 1103], "9223372036854775807": [123, 136, 137, 147, 168, 208, 220, 301, 388, 426, 455, 465, 502, 572, 573, 632, 756, 757, 798, 799, 800, 837, 839, 1074, 1089, 1101, 1103], "rais": [123, 136, 137, 147, 168, 208, 220, 267, 301, 388, 426, 455, 465, 502, 572, 573, 632, 756, 757, 798, 799, 800, 837, 839, 1007, 1074, 1089, 1101, 1103], "valueerror": [123, 136, 137, 147, 168, 208, 220, 301, 388, 426, 455, 465, 502, 572, 573, 632, 756, 757, 798, 799, 800, 837, 839, 1074, 1089, 1101, 1103], "3": [123, 136, 145, 147, 208, 220, 242, 299, 301, 371, 388, 426, 455, 468, 502, 572, 632, 756, 757, 798, 839, 854, 867, 905, 925, 939, 949, 959, 1006, 1074, 1101, 1103, 1219, 1220], "input_param": [126, 127, 128], "map_by_homology_from": [126, 127], "trace": [126, 127, 128, 1109], "homology_only_swissprot": [126, 127], "ptm_homology_strict": [126, 127], "nonhuman_direct_lookup": [126, 128], "inputarg": [126, 127, 128], "doc": [126, 135, 145, 1171, 1193, 1221], "written": [126, 1048, 1049, 1106], "assign_to_network": 126, "pa": [126, 145, 894, 921, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046], "enzym": [126, 127, 128, 132, 133, 278, 279, 455, 818, 883, 897, 909, 1217, 1218, 1219, 1221], "substrat": [126, 127, 128, 278, 279, 400, 455, 487, 609, 818, 883, 897, 909, 1217, 1219, 1221], "edg": [126, 135, 145, 482, 483, 873, 874, 875, 876, 877, 894], "legaci": [126, 145, 771, 1219, 1220, 1221], "build_list": 126, "request": [126, 135, 181, 322, 331, 332, 334, 432, 561, 1031, 1032, 1061, 1086, 1171, 1181, 1193, 1222], "redund": [126, 135, 1067], "organis": 126, "effici": [126, 1109], "thei": [126, 131, 135, 139, 447, 699, 800, 883, 894, 896, 958, 959, 1087, 1118, 1219, 1221], "agre": 126, "except": [126, 127, 135, 145, 875, 1025, 1073, 1075, 1077, 1084, 1220, 1222], "isoform": [126, 127, 626, 816, 818, 820, 821, 823, 1077, 1078, 1135, 1136, 1138, 1157, 1190, 1214, 1215, 1218, 1222], "id_type_enzym": [127, 128, 836], "id_type_substr": [127, 128, 836], "ptmhomologi": 127, "enzymesubstrateprocessor": 127, "unifi": 127, "homologi": [127, 177, 196, 197, 1217, 1222], "enzymesubstratehomologi": 127, "differ": [127, 135, 800, 813, 815, 888, 931, 938, 939, 1085, 1086, 1087, 1097, 1109, 1218, 1219, 1220, 1221, 1222], "chosen": 127, "mous": [127, 172, 195, 196, 197, 198, 204, 205, 206, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 227, 228, 229, 306, 308, 369, 629, 639, 640, 686, 687, 699, 1219], "rat": [127, 172, 629, 699, 1219], "To": [127, 633, 634, 730, 813, 1106, 1218, 1220, 1222], "get": [127, 356, 358, 361, 424, 813, 876, 885, 1031, 1059, 1067, 1106, 1109, 1218, 1222], "themselv": 127, "both": [127, 135, 145, 209, 356, 357, 358, 602, 711, 767, 771, 788, 871, 885, 958, 975, 1031, 1086, 1222], "whatmor": 127, "enzymesubstrateaggreg": 127, "swissprot": [127, 359, 386, 602, 760, 762, 764, 765, 766, 767, 771, 782, 812, 813, 1075, 1077, 1083, 1086, 1087, 1090, 1097, 1218], "trembl": [127, 765, 766, 767, 771, 813, 1086, 1087, 1090, 1097, 1218], "those": [127, 657, 952, 959, 1065, 1075, 1077, 1087, 1118, 1196, 1220], "homolog": [127, 1073, 1075, 1077, 1083, 1217, 1222], "ptm": [127, 128, 132, 133, 297, 400, 626, 628, 698, 818, 822, 914, 915, 1077, 1217, 1218, 1221, 1222], "phosphosit": [127, 128, 649, 1077, 1221, 1222], "do": [127, 145, 552, 749, 952, 1040, 1043, 1045, 1087, 1220, 1222], "residu": [127, 269, 424, 439, 626, 629, 634, 736, 814, 818, 819, 821, 1077, 1102, 1104, 1135, 1157, 1189, 1199, 1218], "offset": [127, 322, 424, 439, 440, 591, 1048, 1077, 1101, 1102, 1135], "sequenc": [127, 128, 145, 424, 439, 591, 629, 634, 819, 938, 1017, 1020, 1023, 1078, 1102, 1133, 1134, 1135, 1136, 1137, 1138, 1157, 1189, 1217], "see": [127, 135, 145, 171, 178, 196, 248, 303, 304, 305, 307, 309, 310, 650, 747, 752, 753, 754, 771, 801, 949, 959, 1006, 1020, 1041, 1048, 1065, 1073, 1075, 1077, 1079, 1080, 1086, 1087, 1097, 1098, 1099, 1155, 1218, 1220, 1222], "further": [127, 151, 267, 439, 468, 748, 798, 883, 894, 1102, 1106, 1109, 1131, 1222], "asdict": [127, 1075, 1077], "union": [127, 239, 240, 241, 276, 319, 322, 329, 396, 449, 561, 562, 647, 708, 710, 711, 712, 771, 800, 897, 938, 939, 940, 942, 955, 957, 1073, 1075, 1077, 1084, 1087], "homologen": [127, 1073, 1075, 1077, 1079, 1080, 1083, 1084, 1217, 1221, 1222], "ensembl": [127, 177, 178, 180, 181, 1073, 1075, 1077, 1079, 1080, 1083, 1084, 1087, 1090, 1097, 1099], "ensembl_hc": [127, 1073, 1074, 1075, 1077, 1079, 1080, 1083, 1084], "ensembl_typ": [127, 1073, 1074, 1075, 1077, 1079, 1080, 1083, 1084], "liter": [127, 233, 449, 708, 711, 712, 788, 883, 1073, 1075, 1077, 1084, 1087], "one2on": [127, 1073, 1075, 1077, 1079, 1080, 1083, 1084], "one2mani": [127, 1073, 1075, 1077, 1079, 1080, 1083, 1084], "many2mani": [127, 1073, 1075, 1077, 1079, 1080, 1083, 1084], "arg": [127, 128, 135, 145, 169, 171, 172, 174, 175, 178, 179, 180, 181, 187, 188, 189, 193, 195, 196, 197, 198, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 233, 240, 264, 265, 267, 276, 302, 312, 313, 314, 315, 316, 319, 320, 322, 385, 386, 389, 447, 449, 561, 562, 598, 602, 603, 634, 639, 640, 653, 686, 687, 690, 699, 705, 708, 711, 712, 731, 732, 751, 753, 771, 788, 798, 801, 839, 883, 935, 944, 959, 964, 972, 983, 1005, 1006, 1026, 1059, 1061, 1062, 1067, 1073, 1075, 1077, 1079, 1080, 1083, 1084, 1086, 1087, 1088, 1097, 1099, 1102, 1155, 1158, 1159, 1160, 1161, 1162, 1164, 1165, 1167, 1168, 1169, 1170, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1194, 1195, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215], "ortholog": [127, 629, 1073, 1075, 1077, 1079, 1080, 1083, 1084], "lookup": [127, 128, 561, 562, 1073, 1075, 1077, 1079, 1080, 1081, 1083, 1084, 1218], "high": [127, 145, 197, 416, 417, 801, 833, 1073, 1075, 1077, 1079, 1080, 1083, 1084, 1218], "confid": [127, 135, 145, 197, 303, 304, 305, 307, 309, 310, 416, 417, 705, 708, 711, 712, 921, 931, 1073, 1075, 1077, 1079, 1080, 1083, 1084, 1222], "orthologi": [127, 385, 386, 626, 629, 1073, 1075, 1077, 1079, 1080, 1083, 1084, 1221], "relat": [127, 177, 233, 294, 316, 338, 357, 360, 362, 449, 1067, 1073, 1075, 1077, 1079, 1080, 1083, 1084, 1109, 1218, 1220, 1222], "By": [127, 135, 145, 197, 468, 469, 470, 546, 548, 744, 894, 909, 1040, 1045, 1065, 1067, 1073, 1075, 1077, 1079, 1080, 1083, 1084, 1106, 1219, 1222], "relationship": [127, 131, 132, 133, 261, 319, 361, 363, 395, 818, 1073, 1075, 1077, 1079, 1080, 1083, 1084, 1218, 1219], "second": [127, 135, 145, 432, 591, 600, 601, 603, 634, 733, 949, 959, 1048, 1073, 1075, 1077, 1079, 1080, 1086, 1087, 1088, 1109, 1218], "assum": [127, 242, 267, 815, 945, 1007, 1073, 1075, 1077, 1079, 1080, 1084], "complet": [127, 302, 1073, 1075, 1077, 1079, 1080, 1086, 1147, 1220], "map": [127, 128, 133, 178, 180, 396, 397, 424, 453, 527, 591, 593, 600, 601, 602, 603, 634, 729, 731, 732, 763, 803, 809, 812, 813, 874, 875, 876, 877, 1008, 1073, 1075, 1077, 1079, 1080, 1102, 1131, 1218, 1221], "get_mapp": [127, 1073, 1075, 1077, 1079, 1080], "mapping_t": [127, 1073, 1075, 1077, 1079, 1080, 1087], "two": [127, 132, 135, 145, 267, 297, 389, 591, 593, 788, 801, 874, 894, 944, 949, 969, 990, 1000, 1003, 1073, 1075, 1077, 1079, 1087, 1099, 1218, 1220], "column": [127, 145, 171, 172, 185, 242, 276, 650, 715, 874, 875, 894, 971, 1011, 1016, 1073, 1075, 1077, 1079, 1084, 1222], "load_homologen": [127, 1075, 1077], "obtain": [127, 128, 135, 294, 385, 386, 424, 701, 731, 732, 747, 813, 833, 1075, 1077], "refseq": [127, 385, 386, 597, 1075, 1077, 1087, 1097, 1099], "entrez": [127, 135, 385, 386, 547, 1075, 1077, 1086, 1087, 1097, 1099], "ptm_orthologi": [127, 1077], "phosphoryl": [127, 620, 626, 627, 1077], "site": [127, 269, 620, 626, 627, 628, 629, 630, 788, 1077, 1134, 1217, 1220, 1221], "phosphositeplu": [127, 620, 626, 627, 628, 629, 1077, 1217], "follow": [127, 135, 299, 626, 974, 985, 1031, 1077], "6": [127, 136, 147, 208, 220, 301, 426, 442, 455, 468, 626, 632, 757, 788, 798, 1077, 1217, 1219], "letter": [127, 135, 356, 357, 358, 364, 365, 366, 367, 626, 1025, 1077, 1109, 1157, 1199], "code": [127, 178, 356, 357, 358, 364, 365, 366, 367, 626, 754, 883, 896, 1048, 1077, 1087, 1097, 1099, 1221], "modif": [127, 626, 814, 818, 1077, 1118, 1134], "set_inputarg": [127, 128], "x": [127, 145, 848, 853, 855, 856, 857, 1020, 1077, 1219], "return_str": [127, 1077], "anyth": [127, 867, 983, 1002, 1034, 1037, 1067, 1077, 1087], "amino": [127, 591, 733, 1077], "acid": [127, 591, 733, 1077, 1109], "offest": [127, 1077], "p00533_s231": [127, 1077], "domainmotif": [127, 486, 492, 1077, 1218], "typ": [127, 819, 821, 1077], "translate_df": [127, 1073, 1075, 1077], "col": [127, 242, 1073, 1075, 1077, 1084], "It": [127, 133, 135, 145, 815, 883, 897, 935, 945, 1031, 1032, 1058, 1059, 1073, 1075, 1077, 1084, 1086, 1087, 1088, 1097, 1098, 1218, 1219, 1222], "last": [127, 145, 839, 952, 985, 1004, 1073, 1075, 1077, 1084, 1087, 1097, 1109, 1220], "bewar": [127, 1073, 1075, 1077, 1084], "layout": [127, 1073, 1075, 1077, 1084], "could": [127, 634, 1073, 1075, 1077, 1084, 1087, 1099, 1220], "omit": [127, 145, 1073, 1075, 1077, 1084, 1109, 1220], "translate_sit": [127, 1077], "re": [127, 145, 735, 988, 1077], "source_taxon": [127, 1077], "allow_mixed_organ": 128, "organisms_support": [128, 836], "sequencecontain": [128, 1077], "than": [128, 145, 174, 175, 894, 942, 985, 1086, 1087, 1088, 1218, 1219, 1220, 1222], "ambigu": [128, 135, 1087, 1098], "mismatch": 128, "mapper": [128, 869, 870, 1091, 1095, 1099], "speci": [128, 385, 386, 629, 747, 748, 1217, 1221], "forward": [128, 894], "support": [131, 132, 133, 135, 145, 195, 198, 227, 228, 229, 306, 308, 356, 361, 369, 439, 639, 640, 815, 1217, 1220, 1221], "hold": [131, 597, 1106], "avail": [131, 170, 171, 172, 178, 179, 188, 204, 205, 206, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 267, 302, 303, 309, 315, 320, 546, 547, 548, 561, 562, 598, 621, 623, 624, 625, 686, 687, 699, 771, 788, 798, 813, 883, 942, 1048, 1059, 1087, 1097, 1099, 1106, 1155, 1218, 1219, 1220, 1222], "annot": [132, 133, 135, 139, 169, 187, 191, 195, 209, 210, 215, 225, 227, 253, 258, 275, 288, 312, 313, 331, 349, 354, 355, 356, 357, 358, 361, 394, 446, 447, 451, 475, 546, 548, 663, 686, 701, 727, 798, 800, 801, 815, 883, 1065, 1066, 1070, 1071, 1106, 1219, 1221], "etc": [132, 133, 145, 1218, 1219, 1222], "part": [132, 188, 197, 233, 303, 309, 431, 712, 909, 917, 986, 1004, 1058, 1087, 1220, 1222], "resourceattribut": [132, 836, 838], "deriv": 132, "prefer": [132, 135, 356, 357, 358, 361, 653, 885, 1087, 1096, 1097], "has_interaction_typ": [132, 133], "depend": [132, 135, 180, 883, 979, 996, 997, 1220, 1221], "comprehens": [133, 145, 303, 304, 305, 307, 309, 310, 1106, 1217, 1218, 1221, 1222], "certain": [133, 135, 145, 1032, 1059, 1106, 1220], "ha": [133, 135, 145, 196, 197, 292, 356, 361, 490, 591, 815, 875, 883, 909, 921, 990, 1031, 1067, 1086, 1087, 1088, 1091, 1106, 1109, 1218, 1220, 1221, 1222], "item": [133, 145, 322, 935, 959, 1006, 1051], "dict_item": 133, "networkresourcekei": 133, "dict_kei": 133, "serialize_attr": 133, "top_key_prefix": 133, "properti": [133, 145, 815, 839, 1086, 1088, 1157, 1166], "simple_dict": 133, "we": [134, 135, 424, 708, 711, 894, 1075, 1077, 1087, 1118, 1219, 1220, 1222], "rich": 134, "api": [134, 351, 353, 357, 360, 362, 364, 366, 771, 813, 1106, 1219, 1221, 1222], "larg": [134, 139, 419, 420, 468, 469, 470, 683, 915, 1031, 1032, 1106, 1109, 1221, 1222], "reli": [134, 1220], "b": [135, 145, 303, 304, 305, 307, 309, 310, 715, 878, 894, 904, 921, 945, 949, 952, 961, 969, 1000, 1001, 1003, 1006, 1008, 1017, 1020, 1023, 1048, 1086, 1118], "id_type_a": [135, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813], "id_type_b": [135, 803, 804, 805, 806, 807, 808, 809, 811, 812, 813], "entity_type_a": [135, 807], "entity_type_b": [135, 807], "taxon_a": [135, 299, 807], "taxon_b": [135, 299, 807], "regul": [135, 145, 155, 717, 1217, 1222], "post": [135, 145, 814, 1031, 1134], "evid": [135, 145, 303, 304, 305, 307, 309, 310, 597, 650, 708, 711, 818, 820, 821, 1221], "detail": [135, 145, 302, 306, 308, 322, 448, 597, 708, 752, 771, 788, 801, 814, 959, 1087, 1097, 1098], "henc": [135, 391, 883, 1086, 1221, 1222], "becom": 135, "add_evid": 135, "direction": [135, 145, 894], "self": [135, 965, 1002, 1106], "dir": [135, 1220], "networkresourc": [135, 145, 931], "separ": [135, 242, 468, 805, 807, 810, 839, 894, 931, 986, 989, 1004, 1016, 1087, 1099, 1118, 1220], "Or": [135, 145, 952, 969, 974, 990, 1000, 1003, 1020, 1222], "causal": 135, "stimul": [135, 710], "stimulatori": 135, "inhibit": [135, 710], "inhibitori": 135, "unknown": [135, 292, 807, 810, 821, 894], "neutral": 135, "been": [135, 145, 292, 356, 358, 361, 815, 909, 1035, 1086, 1087, 1088, 1109, 1217, 1220, 1221, 1222], "add_sign": 135, "sign": [135, 139, 145, 807, 894, 919], "resource_nam": [135, 145, 798], "ppi": [135, 205, 431, 432, 838, 883], "posit": [135, 145, 601, 1051, 1102], "positive_sourc": 135, "neg": [135, 145, 299, 552, 983], "negative_sourc": 135, "accordingli": 135, "node": [135, 145, 185, 874, 876, 877, 894, 1065, 1067, 1068, 1071], "specifi": [135, 145, 748, 952, 963, 965, 990], "wa": [135, 494, 788, 931, 945, 1218, 1220], "complex_identifiers_by_data_model": [135, 145], "involv": [135, 269], "mai": [135, 145, 1048, 1109, 1220], "sound": 135, "so": [135, 145, 424, 468, 469, 470, 749, 894, 947, 950, 1034, 1040, 1042, 1045, 1087, 1109, 1120, 1220, 1222], "small_molecul": [135, 145, 1087], "return_typ": 135, "altern": [135, 145, 432, 468, 959, 1059, 1062, 1066, 1087, 1097, 1099, 1218, 1222], "complex_identifiers_by_interaction_typ": [135, 145], "complex_identifiers_by_interaction_type_and_data_model": [135, 145], "complex_identifiers_by_interaction_type_and_data_model_and_resourc": [135, 145], "complex_identifiers_by_refer": [135, 145], "complex_identifiers_by_resourc": [135, 145], "complex_labels_by_data_model": [135, 145], "complex_labels_by_interaction_typ": [135, 145], "complex_labels_by_interaction_type_and_data_model": [135, 145], "complex_labels_by_interaction_type_and_data_model_and_resourc": [135, 145], "complex_labels_by_refer": [135, 145], "complex_labels_by_resourc": [135, 145], "complexes_by_data_model": [135, 145], "complexes_by_interaction_typ": [135, 145], "complexes_by_interaction_type_and_data_model": [135, 145], "complexes_by_interaction_type_and_data_model_and_resourc": [135, 145], "complexes_by_refer": [135, 145], "complexes_by_resourc": [135, 145], "only_interaction_typ": 135, "only_primari": 135, "by_refer": 135, "by_reference_resource_pair": 135, "along": [135, 917, 1220], "major": [135, 629, 1219], "structur": [135, 318, 439, 449, 591, 593, 634, 731, 732, 814, 1059, 1102, 1109, 1155, 1219, 1221], "un": 135, "consensus_edg": 135, "count_complex_identifi": [135, 145], "count_complex_label": [135, 145], "count_complex": [135, 145], "count_data_model": [135, 145], "model": [135, 145, 178, 180, 1083], "count_degrees_direct": [135, 145], "concern": 135, "incom": [135, 145], "activ": [135, 145, 233, 269, 314, 316, 710, 897, 913, 1118, 1218, 1222], "around": [135, 145, 601, 602, 603, 990, 1031, 1051, 1088, 1219], "mode": [135, 145, 819, 1217], "IN": [135, 145], "out": [135, 145, 942, 971, 1012, 1013, 1016, 1106, 1220], "outgo": [135, 145], "count_degrees_directed_in": [135, 145], "count_degrees_directed_out": [135, 145], "count_degrees_neg": [135, 145], "count_degrees_negative_in": [135, 145], "count_degrees_negative_out": [135, 145], "count_degrees_non_direct": [135, 145], "count_degrees_posit": [135, 145], "count_degrees_positive_in": [135, 145], "count_degrees_positive_out": [135, 145], "count_degrees_sign": [135, 145], "count_degrees_signed_in": [135, 145], "count_degrees_signed_out": [135, 145], "count_degrees_undirect": [135, 145], "count_ent": [135, 145], "count_identifi": [135, 145], "count_interaction_typ": [135, 145], "count_interact": [135, 145], "nonttyp": [135, 145], "unless": [135, 145, 885], "count_interactions_undirect": [135, 145], "activity_flow": 135, "secondari": [135, 763, 788, 839, 1087, 1218], "source_entity_typ": 135, "target_entity_typ": 135, "count_interactions_0": [135, 145], "being": [135, 145, 705, 952, 1218], "awar": [135, 1218, 1220], "count_interactions_direct": [135, 145], "get_interact": [135, 145], "count_interactions_mutu": [135, 145], "explicit": [135, 267, 1087, 1099], "count_interactions_neg": [135, 145], "count_interactions_non_direct": [135, 145], "count_interactions_posit": [135, 145], "count_interactions_sign": [135, 145], "count_label": [135, 145], "count_lncrna_identifi": [135, 145], "count_lncrna_label": [135, 145], "count_lncrna": [135, 145], "count_mirna_identifi": [135, 145], "count_mirna_label": [135, 145], "count_mirna": [135, 145], "count_protein_identifi": [135, 145], "count_protein_label": [135, 145], "count_protein": [135, 145], "count_refer": [135, 145], "count_resource_nam": [135, 145], "count_resource_names_via": [135, 145], "count_resourc": [135, 145], "count_resources_via": [135, 145], "count_small_molecule_identifi": [135, 145], "count_small_molecule_label": [135, 145], "count_small_molecul": [135, 145], "data_models_by_data_model": [135, 145], "data_models_by_interaction_typ": [135, 145], "data_models_by_interaction_type_and_data_model": [135, 145], "data_models_by_interaction_type_and_data_model_and_resourc": [135, 145], "data_models_by_refer": [135, 145], "data_models_by_resourc": [135, 145], "degrees_directed_by_data_model": [135, 145], "degrees_directed_by_interaction_typ": [135, 145], "degrees_directed_by_interaction_type_and_data_model": [135, 145], "degrees_directed_by_interaction_type_and_data_model_and_resourc": [135, 145], "degrees_directed_by_refer": [135, 145], "degrees_directed_by_resourc": [135, 145], "degrees_directed_in_by_data_model": [135, 145], "degrees_directed_in_by_interaction_typ": [135, 145], "degrees_directed_in_by_interaction_type_and_data_model": [135, 145], "degrees_directed_in_by_interaction_type_and_data_model_and_resourc": [135, 145], "degrees_directed_in_by_refer": [135, 145], "degrees_directed_in_by_resourc": [135, 145], "degrees_directed_out_by_data_model": [135, 145], "degrees_directed_out_by_interaction_typ": [135, 145], "degrees_directed_out_by_interaction_type_and_data_model": [135, 145], "degrees_directed_out_by_interaction_type_and_data_model_and_resourc": [135, 145], "degrees_directed_out_by_refer": [135, 145], "degrees_directed_out_by_resourc": [135, 145], "degrees_negative_by_data_model": [135, 145], "degrees_negative_by_interaction_typ": [135, 145], "degrees_negative_by_interaction_type_and_data_model": [135, 145], "degrees_negative_by_interaction_type_and_data_model_and_resourc": [135, 145], "degrees_negative_by_refer": [135, 145], "degrees_negative_by_resourc": [135, 145], "degrees_negative_in_by_data_model": [135, 145], "degrees_negative_in_by_interaction_typ": [135, 145], "degrees_negative_in_by_interaction_type_and_data_model": [135, 145], "degrees_negative_in_by_interaction_type_and_data_model_and_resourc": [135, 145], "degrees_negative_in_by_refer": [135, 145], "degrees_negative_in_by_resourc": [135, 145], "degrees_negative_out_by_data_model": [135, 145], "degrees_negative_out_by_interaction_typ": [135, 145], "degrees_negative_out_by_interaction_type_and_data_model": [135, 145], "degrees_negative_out_by_interaction_type_and_data_model_and_resourc": [135, 145], "degrees_negative_out_by_refer": [135, 145], "degrees_negative_out_by_resourc": [135, 145], "degrees_non_directed_by_data_model": [135, 145], "degrees_non_directed_by_interaction_typ": [135, 145], "degrees_non_directed_by_interaction_type_and_data_model": [135, 145], "degrees_non_directed_by_interaction_type_and_data_model_and_resourc": [135, 145], "degrees_non_directed_by_refer": [135, 145], "degrees_non_directed_by_resourc": [135, 145], "degrees_positive_by_data_model": [135, 145], "degrees_positive_by_interaction_typ": [135, 145], "degrees_positive_by_interaction_type_and_data_model": [135, 145], "degrees_positive_by_interaction_type_and_data_model_and_resourc": [135, 145], "degrees_positive_by_refer": [135, 145], "degrees_positive_by_resourc": [135, 145], "degrees_positive_in_by_data_model": [135, 145], "degrees_positive_in_by_interaction_typ": [135, 145], "degrees_positive_in_by_interaction_type_and_data_model": [135, 145], "degrees_positive_in_by_interaction_type_and_data_model_and_resourc": [135, 145], "degrees_positive_in_by_refer": [135, 145], "degrees_positive_in_by_resourc": [135, 145], "degrees_positive_out_by_data_model": [135, 145], "degrees_positive_out_by_interaction_typ": [135, 145], "degrees_positive_out_by_interaction_type_and_data_model": [135, 145], "degrees_positive_out_by_interaction_type_and_data_model_and_resourc": [135, 145], "degrees_positive_out_by_refer": [135, 145], "degrees_positive_out_by_resourc": [135, 145], "degrees_signed_by_data_model": [135, 145], "degrees_signed_by_interaction_typ": [135, 145], "degrees_signed_by_interaction_type_and_data_model": [135, 145], "degrees_signed_by_interaction_type_and_data_model_and_resourc": [135, 145], "degrees_signed_by_refer": [135, 145], "degrees_signed_by_resourc": [135, 145], "degrees_signed_in_by_data_model": [135, 145], "degrees_signed_in_by_interaction_typ": [135, 145], "degrees_signed_in_by_interaction_type_and_data_model": [135, 145], "degrees_signed_in_by_interaction_type_and_data_model_and_resourc": [135, 145], "degrees_signed_in_by_refer": [135, 145], "degrees_signed_in_by_resourc": [135, 145], "degrees_signed_out_by_data_model": [135, 145], "degrees_signed_out_by_interaction_typ": [135, 145], "degrees_signed_out_by_interaction_type_and_data_model": [135, 145], "degrees_signed_out_by_interaction_type_and_data_model_and_resourc": [135, 145], "degrees_signed_out_by_refer": [135, 145], "degrees_signed_out_by_resourc": [135, 145], "degrees_undirected_by_data_model": [135, 145], "degrees_undirected_by_interaction_typ": [135, 145], "degrees_undirected_by_interaction_type_and_data_model": [135, 145], "degrees_undirected_by_interaction_type_and_data_model_and_resourc": [135, 145], "degrees_undirected_by_refer": [135, 145], "degrees_undirected_by_resourc": [135, 145], "direction_kei": 135, "dorothea_level": [135, 145], "dorothea": [135, 145, 931, 1221, 1222], "due": [135, 1087], "natur": [135, 535, 1106], "symbol": [135, 145, 343, 344, 345, 547, 548, 597, 629, 662, 761, 803, 809, 812, 894, 1087, 1093, 1094, 1096, 1097, 1099, 1157, 1199, 1218, 1222], "take": [135, 180, 894, 986, 1004, 1017, 1023, 1086, 1087, 1097, 1106, 1218], "highest": [135, 356, 361, 705, 1067, 1222], "drop": [135, 1048], "rest": [135, 267, 322, 351, 353, 357, 360, 362, 364, 366, 1218, 1222], "five": [135, 396, 1087, 1097, 1099], "entities_by_data_model": [135, 145], "entities_by_interaction_typ": [135, 145], "entities_by_interaction_type_and_data_model": [135, 145], "entities_by_interaction_type_and_data_model_and_resourc": [135, 145], "entities_by_refer": [135, 145], "entities_by_resourc": [135, 145], "evaluate_evid": 135, "this_direct": 135, "evalu": [135, 1065], "generate_df_record": 135, "by_sourc": [135, 145, 883, 1118], "with_refer": [135, 145], "becaus": [135, 218, 225, 914, 917, 1118, 1120, 1220, 1222], "need": [135, 233, 420, 424, 439, 547, 749, 1032, 1087, 1097, 1106, 1109, 1218, 1220, 1222], "group": [135, 145, 261, 315, 801, 976, 980, 993, 996, 1021, 1106, 1163, 1221], "most": [135, 188, 356, 361, 699, 774, 894, 919, 1037, 1088, 1181, 1218, 1219, 1220], "applic": [135, 1219], "refrenc": 135, "still": [135, 1087, 1097, 1099, 1219, 1220], "rare": [135, 1087, 1097, 1099], "increas": [135, 139], "size": [135, 139, 322, 432, 699, 985, 1032, 1106, 1109], "significantli": 135, "get_attr": 135, "extract": [135, 205, 240, 282, 322, 400, 401, 469, 592, 680, 683, 964, 986, 1004, 1031, 1032, 1106, 1109], "get_complex_identifi": [135, 145], "get_complex_label": [135, 145], "get_complex": [135, 145], "get_data_model": [135, 145], "get_degre": 135, "get_degrees_direct": [135, 145], "get_degrees_directed_in": [135, 145], "get_degrees_directed_out": [135, 145], "get_degrees_neg": [135, 145], "get_degrees_negative_in": [135, 145], "get_degrees_negative_out": [135, 145], "get_degrees_non_direct": [135, 145], "get_degrees_posit": [135, 145], "get_degrees_positive_in": [135, 145], "get_degrees_positive_out": [135, 145], "get_degrees_sign": [135, 145], "get_degrees_signed_in": [135, 145], "get_degrees_signed_out": [135, 145], "get_degrees_undirect": [135, 145], "get_direct": 135, "state": [135, 145, 191, 1109], "src": 135, "tgt": 135, "get_ent": [135, 145], "get_identifi": [135, 145], "get_interaction_typ": [135, 145], "get_interactions_0": [135, 145], "get_interactions_direct": [135, 145], "get_interactions_mutu": [135, 145], "get_interactions_neg": [135, 145], "get_interactions_non_direct": [135, 145], "get_interactions_non_directed_0": [135, 145], "sort": 135, "insid": [135, 1087], "get_interactions_posit": [135, 145], "get_interactions_sign": [135, 145], "get_interactions_undirect": [135, 145], "matter": [135, 145, 931, 1087], "get_interactions_undirected_0": [135, 145], "get_label": [135, 145], "get_lncrna_identifi": [135, 145], "get_lncrna_label": [135, 145], "get_lncrna": [135, 145], "get_mirna_identifi": [135, 145], "get_mirna_label": [135, 145], "get_mirna": [135, 145], "get_protein_identifi": [135, 145], "get_protein_label": [135, 145], "get_protein": [135, 145, 1106], "get_refer": [135, 145], "get_resource_nam": [135, 145], "get_resource_names_via": [135, 145], "get_resources_via": [135, 145], "get_sign": 135, "diret": 135, "th": 135, "denot": 135, "get_small_molecule_identifi": [135, 145], "get_small_molecule_label": [135, 145], "get_small_molecul": [135, 145], "has_sign": 135, "identifiers_by_data_model": [135, 145], "identifiers_by_interaction_typ": [135, 145], "identifiers_by_interaction_type_and_data_model": [135, 145], "identifiers_by_interaction_type_and_data_model_and_resourc": [135, 145], "identifiers_by_refer": [135, 145], "identifiers_by_resourc": [135, 145], "interaction_types_by_data_model": [135, 145], "interaction_types_by_interaction_typ": [135, 145], "interaction_types_by_interaction_type_and_data_model": [135, 145], "interaction_types_by_interaction_type_and_data_model_and_resourc": [135, 145], "interaction_types_by_refer": [135, 145], "interaction_types_by_resourc": [135, 145], "interactions_0_by_data_model": [135, 145], "interactions_0_by_interaction_typ": [135, 145], "interactions_0_by_interaction_type_and_data_model": [135, 145], "interactions_0_by_interaction_type_and_data_model_and_resourc": [135, 145], "interactions_0_by_refer": [135, 145], "interactions_0_by_resourc": [135, 145], "interactions_by_data_model": [135, 145], "interactions_by_interaction_typ": [135, 145], "interactions_by_interaction_type_and_data_model": [135, 145], "interactions_by_interaction_type_and_data_model_and_resourc": [135, 145], "interactions_by_refer": [135, 145], "interactions_by_resourc": [135, 145], "interactions_directed_by_data_model": [135, 145], "interactions_directed_by_interaction_typ": [135, 145], "interactions_directed_by_interaction_type_and_data_model": [135, 145], "interactions_directed_by_interaction_type_and_data_model_and_resourc": [135, 145], "interactions_directed_by_refer": [135, 145], "interactions_directed_by_resourc": [135, 145], "interactions_mutual_by_data_model": [135, 145], "interactions_mutual_by_interaction_typ": [135, 145], "interactions_mutual_by_interaction_type_and_data_model": [135, 145], "interactions_mutual_by_interaction_type_and_data_model_and_resourc": [135, 145], "interactions_mutual_by_refer": [135, 145], "interactions_mutual_by_resourc": [135, 145], "interactions_negative_by_data_model": [135, 145], "interactions_negative_by_interaction_typ": [135, 145], "interactions_negative_by_interaction_type_and_data_model": [135, 145], "interactions_negative_by_interaction_type_and_data_model_and_resourc": [135, 145], "interactions_negative_by_refer": [135, 145], "interactions_negative_by_resourc": [135, 145], "interactions_non_directed_0_by_data_model": [135, 145], "interactions_non_directed_0_by_interaction_typ": [135, 145], "interactions_non_directed_0_by_interaction_type_and_data_model": [135, 145], "interactions_non_directed_0_by_interaction_type_and_data_model_and_resourc": [135, 145], "interactions_non_directed_0_by_refer": [135, 145], "interactions_non_directed_0_by_resourc": [135, 145], "interactions_non_directed_by_data_model": [135, 145], "interactions_non_directed_by_interaction_typ": [135, 145], "interactions_non_directed_by_interaction_type_and_data_model": [135, 145], "interactions_non_directed_by_interaction_type_and_data_model_and_resourc": [135, 145], "interactions_non_directed_by_refer": [135, 145], "interactions_non_directed_by_resourc": [135, 145], "interactions_positive_by_data_model": [135, 145], "interactions_positive_by_interaction_typ": [135, 145], "interactions_positive_by_interaction_type_and_data_model": [135, 145], "interactions_positive_by_interaction_type_and_data_model_and_resourc": [135, 145], "interactions_positive_by_refer": [135, 145], "interactions_positive_by_resourc": [135, 145], "interactions_signed_by_data_model": [135, 145], "interactions_signed_by_interaction_typ": [135, 145], "interactions_signed_by_interaction_type_and_data_model": [135, 145], "interactions_signed_by_interaction_type_and_data_model_and_resourc": [135, 145], "interactions_signed_by_refer": [135, 145], "interactions_signed_by_resourc": [135, 145], "interactions_undirected_0_by_data_model": [135, 145], "interactions_undirected_0_by_interaction_typ": [135, 145], "interactions_undirected_0_by_interaction_type_and_data_model": [135, 145], "interactions_undirected_0_by_interaction_type_and_data_model_and_resourc": [135, 145], "interactions_undirected_0_by_refer": [135, 145], "interactions_undirected_0_by_resourc": [135, 145], "interactions_undirected_by_data_model": [135, 145], "interactions_undirected_by_interaction_typ": [135, 145], "interactions_undirected_by_interaction_type_and_data_model": [135, 145], "interactions_undirected_by_interaction_type_and_data_model_and_resourc": [135, 145], "interactions_undirected_by_refer": [135, 145], "interactions_undirected_by_resourc": [135, 145], "is_direct": [135, 807], "is_directed_by_resourc": 135, "is_inhibit": 135, "is_loop": 135, "loop": [135, 145], "endpoint": [135, 145], "is_mutu": 135, "is_mutual_by_resourc": 135, "is_stimul": 135, "activatori": 135, "iter_evid": 135, "iter_match_evid": 135, "labels_by_data_model": [135, 145], "labels_by_interaction_typ": [135, 145], "labels_by_interaction_type_and_data_model": [135, 145], "labels_by_interaction_type_and_data_model_and_resourc": [135, 145], "labels_by_refer": [135, 145], "labels_by_resourc": [135, 145], "lncrna_identifiers_by_data_model": [135, 145], "lncrna_identifiers_by_interaction_typ": [135, 145], "lncrna_identifiers_by_interaction_type_and_data_model": [135, 145], "lncrna_identifiers_by_interaction_type_and_data_model_and_resourc": [135, 145], "lncrna_identifiers_by_refer": [135, 145], "lncrna_identifiers_by_resourc": [135, 145], "lncrna_labels_by_data_model": [135, 145], "lncrna_labels_by_interaction_typ": [135, 145], "lncrna_labels_by_interaction_type_and_data_model": [135, 145], "lncrna_labels_by_interaction_type_and_data_model_and_resourc": [135, 145], "lncrna_labels_by_refer": [135, 145], "lncrna_labels_by_resourc": [135, 145], "lncrnas_by_data_model": [135, 145], "lncrnas_by_interaction_typ": [135, 145], "lncrnas_by_interaction_type_and_data_model": [135, 145], "lncrnas_by_interaction_type_and_data_model_and_resourc": [135, 145], "lncrnas_by_refer": [135, 145], "lncrnas_by_resourc": [135, 145], "majority_dir": 135, "equal": [135, 958, 959, 1218], "majority_sign": 135, "straight": 135, "revers": [135, 1087], "mean": [135, 145, 180, 439, 468, 699, 819, 836, 935, 1087, 1088, 1096, 1098, 1106], "anoth": [135, 1065, 1083, 1155, 1222], "mirna_identifiers_by_data_model": [135, 145], "mirna_identifiers_by_interaction_typ": [135, 145], "mirna_identifiers_by_interaction_type_and_data_model": [135, 145], "mirna_identifiers_by_interaction_type_and_data_model_and_resourc": [135, 145], "mirna_identifiers_by_refer": [135, 145], "mirna_identifiers_by_resourc": [135, 145], "mirna_labels_by_data_model": [135, 145], "mirna_labels_by_interaction_typ": [135, 145], "mirna_labels_by_interaction_type_and_data_model": [135, 145], "mirna_labels_by_interaction_type_and_data_model_and_resourc": [135, 145], "mirna_labels_by_refer": [135, 145], "mirna_labels_by_resourc": [135, 145], "mirnas_by_data_model": [135, 145], "mirnas_by_interaction_typ": [135, 145], "mirnas_by_interaction_type_and_data_model": [135, 145], "mirnas_by_interaction_type_and_data_model_and_resourc": [135, 145], "mirnas_by_refer": [135, 145], "mirnas_by_resourc": [135, 145], "negative_a_b": 135, "a_b": 135, "negative_b_a": 135, "b_a": 135, "negative_resources_a_b": 135, "negative_resources_b_a": 135, "negative_revers": 135, "negative_straight": 135, "positive_a_b": 135, "positive_b_a": 135, "positive_resources_a_b": 135, "positive_resources_b_a": 135, "positive_revers": 135, "positive_straight": 135, "protein_identifiers_by_data_model": [135, 145], "protein_identifiers_by_interaction_typ": [135, 145], "protein_identifiers_by_interaction_type_and_data_model": [135, 145], "protein_identifiers_by_interaction_type_and_data_model_and_resourc": [135, 145], "protein_identifiers_by_refer": [135, 145], "protein_identifiers_by_resourc": [135, 145], "protein_labels_by_data_model": [135, 145], "protein_labels_by_interaction_typ": [135, 145], "protein_labels_by_interaction_type_and_data_model": [135, 145], "protein_labels_by_interaction_type_and_data_model_and_resourc": [135, 145], "protein_labels_by_refer": [135, 145], "protein_labels_by_resourc": [135, 145], "proteins_by_data_model": [135, 145], "proteins_by_interaction_typ": [135, 145], "proteins_by_interaction_type_and_data_model": [135, 145], "proteins_by_interaction_type_and_data_model_and_resourc": [135, 145], "proteins_by_refer": [135, 145], "proteins_by_resourc": [135, 145], "references_by_data_model": [135, 145], "references_by_interaction_typ": [135, 145], "references_by_interaction_type_and_data_model": [135, 145], "references_by_interaction_type_and_data_model_and_resourc": [135, 145], "references_by_refer": [135, 145], "references_by_resourc": [135, 145], "resource_names_by_data_model": [135, 145], "resource_names_by_interaction_typ": [135, 145], "resource_names_by_interaction_type_and_data_model": [135, 145], "resource_names_by_interaction_type_and_data_model_and_resourc": [135, 145], "resource_names_by_refer": [135, 145], "resource_names_by_resourc": [135, 145], "resource_names_via_by_data_model": [135, 145], "resource_names_via_by_interaction_typ": [135, 145], "resource_names_via_by_interaction_type_and_data_model": [135, 145], "resource_names_via_by_interaction_type_and_data_model_and_resourc": [135, 145], "resource_names_via_by_refer": [135, 145], "resource_names_via_by_resourc": [135, 145], "resources_a_b": 135, "resources_b_a": 135, "resources_by_data_model": [135, 145], "resources_by_interaction_typ": [135, 145], "resources_by_interaction_type_and_data_model": [135, 145], "resources_by_interaction_type_and_data_model_and_resourc": [135, 145], "resources_by_refer": [135, 145], "resources_by_resourc": [135, 145], "resources_undirect": 135, "resources_via_by_data_model": [135, 145], "resources_via_by_interaction_typ": [135, 145], "resources_via_by_interaction_type_and_data_model": [135, 145], "resources_via_by_interaction_type_and_data_model_and_resourc": [135, 145], "resources_via_by_refer": [135, 145], "resources_via_by_resourc": [135, 145], "small_molecule_identifiers_by_data_model": [135, 145], "small_molecule_identifiers_by_interaction_typ": [135, 145], "small_molecule_identifiers_by_interaction_type_and_data_model": [135, 145], "small_molecule_identifiers_by_interaction_type_and_data_model_and_resourc": [135, 145], "small_molecule_identifiers_by_refer": [135, 145], "small_molecule_identifiers_by_resourc": [135, 145], "small_molecule_labels_by_data_model": [135, 145], "small_molecule_labels_by_interaction_typ": [135, 145], "small_molecule_labels_by_interaction_type_and_data_model": [135, 145], "small_molecule_labels_by_interaction_type_and_data_model_and_resourc": [135, 145], "small_molecule_labels_by_refer": [135, 145], "small_molecule_labels_by_resourc": [135, 145], "small_molecules_by_data_model": [135, 145], "small_molecules_by_interaction_typ": [135, 145], "small_molecules_by_interaction_type_and_data_model": [135, 145], "small_molecules_by_interaction_type_and_data_model_and_resourc": [135, 145], "small_molecules_by_refer": [135, 145], "small_molecules_by_resourc": [135, 145], "bidirect": 135, "sources_revers": 135, "sources_straight": 135, "sources_undirect": 135, "src_by_resourc": 135, "found": [135, 139, 145, 1087, 1097, 1099, 1102, 1220], "invalid": 135, "tgt_by_resourc": 135, "new_attr": 135, "abl": [135, 145, 169, 547, 1031, 1218, 1220], "chang": [135, 292, 801, 871, 1008, 1025, 1034, 1037, 1051, 1087, 1218, 1219, 1222], "1956": 135, "copi": [135, 225, 801, 836, 941, 945, 952, 965, 1020], "unset_dir": 135, "remov": [135, 139, 145, 242, 289, 348, 349, 359, 801, 883, 909, 941, 945, 965, 989, 1020, 1067, 1086, 1087, 1088, 1102, 1109, 1131, 1133, 1134, 1217, 1221], "unset_direct": 135, "unset_interaction_typ": 135, "unset_sign": 135, "positive_attribut": 135, "must": [135, 145, 233, 883, 974, 1166, 1220, 1222], "which_direct": 135, "which_dir": 135, "which_sign": 135, "id_a": [136, 145, 572, 819], "id_b": [136, 145, 572, 819], "type_a": 136, "type_b": 136, "dmodel": 136, "4": [136, 145, 147, 197, 208, 220, 301, 388, 426, 455, 632, 705, 757, 798, 839, 854, 938, 939, 1103, 1219, 1220, 1222], "7": [136, 147, 185, 251, 299, 301, 455, 632, 757, 798, 854, 1218, 1219, 1220, 1222], "5": [136, 147, 208, 220, 301, 377, 378, 426, 444, 455, 632, 757, 798, 854, 939, 963, 1020, 1054, 1087, 1097, 1109, 1218, 1219, 1220], "9": [136, 147, 152, 301, 787, 798, 1219], "8": [136, 147, 301, 444, 455, 798, 854, 905, 925, 1031, 1032, 1218, 1219], "entity_a": [137, 145], "entity_b": [137, 145], "cellphonedb_categori": 139, "baccin_categori": 139, "hpmr_categori": 139, "surfaceome_categori": 139, "gpcrdb_categori": 139, "icellnet_categori": 139, "customannot": [139, 798, 800, 801], "transmitter_receiv": 139, "only_gener": 139, "only_composit": 139, "only_funct": 139, "exclude_intracellular": 139, "On": [139, 1220], "transmitt": [139, 798, 801], "receiv": [139, 798, 801], "allow": [139, 145, 233, 947], "resource_specif": [139, 798, 801], "locat": [139, 267, 663, 801, 1088, 1221], "often": [139, 468, 469, 470, 894, 1088, 1218], "relev": [139, 145], "intracellular": 139, "o14976": 143, "o15231": 143, "o43294": 143, "o60711": 143, "o60759": 143, "p07332": 143, "p29965": 143, "p35221": 143, "p35222": 143, "p50552": 143, "p56945": 143, "q02297": 143, "q03001": 143, "q13153": 143, "q13895": 143, "q14451": 143, "q14511": 143, "q14943": 143, "q14952": 143, "q14953": 143, "q155q3": 143, "q15654": 143, "q5jra6": 143, "q5t4b2": 143, "q7l5y9": 143, "q7z4i7": 143, "q86tp1": 143, "q8ivt2": 143, "q8izw8": 143, "q8n264": 143, "q8n743": 143, "q8nhk3": 143, "q8wx93": 143, "q92502": 143, "q96ac1": 143, "q96if1": 143, "q96qb1": 143, "q99689": 143, "q9h792": 143, "q9hbi0": 143, "q9hbi1": 143, "q9nq75": 143, "q9ubt7": 143, "q9ugi8": 143, "q9ugp4": 143, "q9ui47": 143, "q9uqb3": 143, "cell_surface_enzym": 143, "o00391": 143, "p04843": 143, "p08842": 143, "p09958": 143, "p11117": 143, "p19021": 143, "p40126": 143, "p52961": 143, "q13444": 143, "q15125": 143, "q8tcj2": 143, "q8wud6": 143, "q96jj7": 143, "q9nph5": 143, "q9uk23": 143, "q9ukf2": 143, "cell_surface_ligand": 143, "p0dpd6": 143, "ligand": [143, 195, 196, 197, 198, 206, 208, 209, 210, 212, 213, 214, 215, 216, 217, 223, 224, 227, 229, 253, 254, 332, 374, 389, 426, 477, 662, 686, 688, 1222], "o00220": 143, "o00300": 143, "o00468": 143, "o00587": 143, "o00592": 143, "o14594": 143, "o14649": 143, "o14672": 143, "o15031": 143, "o15197": 143, "o15496": 143, "o43157": 143, "o43184": 143, "o43278": 143, "o43852": 143, "o43914": 143, "o60462": 143, "o60469": 143, "o60486": 143, "o60494": 143, "o75051": 143, "o75077": 143, "o75330": 143, "o75508": 143, "o75509": 143, "o75534": 143, "o75596": 143, "o94887": 143, "o95084": 143, "o95236": 143, "o95274": 143, "o95428": 143, "o95467": 143, "o95711": 143, "o95754": 143, "p00451": 143, "p00488": 143, "p00734": 143, "p00740": 143, "p00742": 143, "p00748": 143, "p00749": 143, "p00750": 143, "p00797": 143, "p00813": 143, "p00995": 143, "p01008": 143, "p01009": 143, "p01023": 143, "p01024": 143, "p01031": 143, "p01033": 143, "p01112": 143, "p01589": 143, "p02452": 143, "p02458": 143, "p02461": 143, "p02462": 143, "p02654": 143, "p02671": 143, "p02675": 143, "p02679": 143, "p02741": 143, "p02745": 143, "p02746": 143, "p02751": 143, "p02753": 143, "p02765": 143, "p02768": 143, "p02788": 143, "p03951": 143, "p03956": 143, "p03973": 143, "p04003": 143, "p04070": 143, "p04196": 143, "p04278": 143, "p04626": 143, "p04899": 143, "p05067": 143, "p05106": 143, "p05107": 143, "p05121": 143, "p05155": 143, "p05543": 143, "p05556": 143, "p05997": 143, "p06454": 143, "p06734": 143, "p06756": 143, "p06858": 143, "p07093": 143, "p07225": 143, "p07237": 143, "p07288": 143, "p07602": 143, "p07900": 143, "p08034": 143, "p08069": 143, "p08123": 143, "p08174": 143, "p08236": 143, "p08253": 143, "p08514": 143, "p08571": 143, "p08572": 143, "p08575": 143, "p08582": 143, "p08603": 143, "p08670": 143, "p08709": 143, "p08861": 143, "p08865": 143, "p09211": 143, "p09237": 143, "p09417": 143, "p09429": 143, "p0c0l4": 143, "p0c7t3": 143, "p0cg37": 143, "p0dmv8": 143, "p0dp23": 143, "p0dp24": 143, "p0dp25": 143, "p10144": 143, "p10153": 143, "p10586": 143, "p10646": 143, "p11150": 143, "p11226": 143, "p11229": 143, "p11362": 143, "p11912": 143, "p12107": 143, "p12109": 143, "p12110": 143, "p12821": 143, "p12830": 143, "p13385": 143, "p13591": 143, "p13612": 143, "p13637": 143, "p13688": 143, "p14416": 143, "p14618": 143, "p14625": 143, "p14778": 143, "p14780": 143, "p15151": 143, "p15531": 143, "p15907": 143, "p16035": 143, "p16070": 143, "p16109": 143, "p16473": 143, "p16520": 143, "p16671": 143, "p17302": 143, "p17752": 143, "p17948": 143, "p18564": 143, "p19113": 143, "p19823": 143, "p19835": 143, "p20062": 143, "p20273": 143, "p20292": 143, "p20309": 143, "p20849": 143, "p20908": 143, "p20916": 143, "p21462": 143, "p21709": 143, "p21802": 143, "p21810": 143, "p21815": 143, "p21860": 143, "p21917": 143, "p21941": 143, "p21980": 143, "p22392": 143, "p22692": 143, "p22897": 143, "p23471": 143, "p23515": 143, "p25063": 143, "p25090": 143, "p25940": 143, "p25942": 143, "p26012": 143, "p26441": 143, "p26842": 143, "p27658": 143, "p28335": 143, "p28907": 143, "p28908": 143, "p29317": 143, "p29322": 143, "p29323": 143, "p29400": 143, "p30530": 143, "p30533": 143, "p30542": 143, "p30874": 143, "p31025": 143, "p31785": 143, "p35212": 143, "p35354": 143, "p35475": 143, "p35555": 143, "p35613": 143, "p35625": 143, "p36383": 143, "p36897": 143, "p36941": 143, "p39019": 143, "p39060": 143, "p39900": 143, "p41143": 143, "p41594": 143, "p42081": 143, "p42127": 143, "p43121": 143, "p43405": 143, "p43489": 143, "p43490": 143, "p45452": 143, "p48039": 143, "p48651": 143, "p49768": 143, "p49913": 143, "p50052": 143, "p51654": 143, "p52945": 143, "p53420": 143, "p54577": 143, "p54753": 143, "p54756": 143, "p54760": 143, "p54762": 143, "p54764": 143, "p55058": 143, "p55789": 143, "p56159": 143, "p61626": 143, "p61769": 143, "p62987": 143, "p63092": 143, "p78310": 143, "p78324": 143, "p78536": 143, "p80188": 143, "p80303": 143, "p84077": 143, "p84996": 143, "p98160": 143, "p98164": 143, "q01469": 143, "q01955": 143, "q02094": 143, "q02388": 143, "q02817": 143, "q04721": 143, "q05707": 143, "q07326": 143, "q07954": 143, "q08334": 143, "q08722": 143, "q08828": 143, "q10588": 143, "q12913": 143, "q12918": 143, "q12933": 143, "q13158": 143, "q13241": 143, "q13255": 143, "q13352": 143, "q13361": 143, "q13442": 143, "q13443": 143, "q13477": 143, "q13936": 143, "q14031": 143, "q14050": 143, "q14055": 143, "q14118": 143, "q14242": 143, "q14766": 143, "q15165": 143, "q15223": 143, "q15262": 143, "q15303": 143, "q15375": 143, "q15762": 143, "q16613": 143, "q2mv58": 143, "q2vpa4": 143, "q4vx76": 143, "q5jwf2": 143, "q5sr53": 143, "q5t442": 143, "q5t5a4": 143, "q6nw40": 143, "q6uww8": 143, "q6uwx4": 143, "q6v0i7": 143, "q7z6a9": 143, "q86ur5": 143, "q8iwl1": 143, "q8izj3": 143, "q8izl2": 143, "q8n2x6": 143, "q8n474": 143, "q8nfk1": 143, "q8nft8": 143, "q8ngh5": 143, "q8ngh8": 143, "q8nhj6": 143, "q8nhp8": 143, "q8tax7": 143, "q8wtv0": 143, "q8wwy8": 143, "q8wz79": 143, "q92819": 143, "q92854": 143, "q92896": 143, "q92956": 143, "q96a49": 143, "q96cg8": 143, "q96da0": 143, "q96fe5": 143, "q99259": 143, "q99466": 143, "q99965": 143, "q9bq66": 143, "q9bs26": 143, "q9bx66": 143, "q9bzr6": 143, "q9bzw8": 143, "q9bzz2": 143, "q9c0c4": 143, "q9h2a7": 143, "q9h2e6": 143, "q9h3s1": 143, "q9h9h4": 143, "q9hcm2": 143, "q9nqc3": 143, "q9nr96": 143, "q9nrv9": 143, "q9nsg2": 143, "q9ntn9": 143, "q9nup9": 143, "q9nv23": 143, "q9nwz3": 143, "q9nx52": 143, "q9nzc2": 143, "q9nzr2": 143, "q9uby5": 143, "q9uhg3": 143, "q9uiw2": 143, "q9uju6": 143, "q9ukq2": 143, "q9ulp9": 143, "q9um47": 143, "q9uq26": 143, "q9xrx5": 143, "q9y215": 143, "q9y2i2": 143, "q9y4d7": 143, "q9y566": 143, "q9y5u5": 143, "q9y624": 143, "q9y625": 143, "q9y6n7": 143, "receptor": [143, 145, 195, 196, 197, 198, 206, 208, 209, 210, 212, 213, 214, 215, 216, 217, 220, 223, 224, 227, 229, 253, 254, 332, 388, 389, 426, 477, 662, 686, 688, 1222], "a6nfa1": 143, "b2ruy7": 143, "b4ds77": 143, "o00170": 143, "o00548": 143, "o00555": 143, "o14493": 143, "o14638": 143, "o14788": 143, "o14795": 143, "o15162": 143, "o15374": 143, "o15551": 143, "o15554": 143, "o43525": 143, "o43813": 143, "o43866": 143, "o43921": 143, "o60291": 143, "o60359": 143, "o75078": 143, "o75106": 143, "o75144": 143, "o75575": 143, "o75923": 143, "o94772": 143, "o94779": 143, "o94856": 143, "o95196": 143, "o95259": 143, "o95477": 143, "o95727": 143, "o95897": 143, "o95967": 143, "o95994": 143, "o95998": 143, "p00747": 143, "p01133": 143, "p01303": 143, "p01889": 143, "p01903": 143, "p01906": 143, "p01909": 143, "p01911": 143, "p01920": 143, "p02649": 143, "p04004": 143, "p04439": 143, "p05026": 143, "p05156": 143, "p05187": 143, "p05231": 143, "p05362": 143, "p05538": 143, "p07942": 143, "p09326": 143, "p09917": 143, "p09923": 143, "p10321": 143, "p10589": 143, "p11168": 143, "p13056": 143, "p13569": 143, "p13598": 143, "p13765": 143, "p15514": 143, "p15813": 143, "p16422": 143, "p16581": 143, "p17693": 143, "p17813": 143, "p18433": 143, "p19256": 143, "p19801": 143, "p20827": 143, "p21246": 143, "p21589": 143, "p21926": 143, "p22001": 143, "p22460": 143, "p22736": 143, "p23276": 143, "p23510": 143, "p24043": 143, "p25098": 143, "p25189": 143, "p26038": 143, "p27701": 143, "p27824": 143, "p28906": 143, "p29016": 143, "p29033": 143, "p29460": 143, "p29972": 143, "p30301": 143, "p30511": 143, "p31431": 143, "p31749": 143, "p31997": 143, "p32004": 143, "p32942": 143, "p32970": 143, "p32971": 143, "p35499": 143, "p36021": 143, "p36269": 143, "p41235": 143, "p48050": 143, "p48509": 143, "p48552": 143, "p50591": 143, "p51787": 143, "p51828": 143, "p52797": 143, "p52798": 143, "p52799": 143, "p52803": 143, "p54709": 143, "p54750": 143, "p54851": 143, "p55157": 143, "p55160": 143, "p55268": 143, "p56705": 143, "p57057": 143, "p57087": 143, "p57739": 143, "p58401": 143, "p61160": 143, "p62079": 143, "p62955": 143, "p78504": 143, "p78509": 143, "p78562": 143, "p79483": 143, "p84022": 143, "p84157": 143, "p98172": 143, "q00994": 143, "q01064": 143, "q02108": 143, "q02153": 143, "q02246": 143, "q02413": 143, "q02641": 143, "q02846": 143, "q03135": 143, "q04724": 143, "q05940": 143, "q06643": 143, "q07075": 143, "q08380": 143, "q08am6": 143, "q12809": 143, "q12884": 143, "q13061": 143, "q13114": 143, "q13275": 143, "q13445": 143, "q13520": 143, "q13740": 143, "q13822": 143, "q14123": 143, "q14126": 143, "q14213": 143, "q14524": 143, "q14541": 143, "q14563": 143, "q14773": 143, "q14956": 143, "q14982": 143, "q14994": 143, "q14995": 143, "q15628": 143, "q15758": 143, "q15768": 143, "q15842": 143, "q15848": 143, "q16342": 143, "q16363": 143, "q16572": 143, "q16625": 143, "q16853": 143, "q19t08": 143, "q29983": 143, "q2tal6": 143, "q30201": 143, "q401n2": 143, "q496h8": 143, "q4vcs5": 143, "q4w5p6": 143, "q5dx21": 143, "q5tat6": 143, "q5vu97": 143, "q5vy80": 143, "q5zpr3": 143, "q6nyc1": 143, "q6piz9": 143, "q6q4g3": 143, "q6rw13": 143, "q6uw88": 143, "q6uwv6": 143, "q6uxb3": 143, "q6uxi9": 143, "q7l0j3": 143, "q7z7d3": 143, "q86uf1": 143, "q86uk0": 143, "q8iu54": 143, "q8iu80": 143, "q8iuk5": 143, "q8iwv2": 143, "q8izv2": 143, "q8izy2": 143, "q8n126": 143, "q8n2g4": 143, "q8ncm2": 143, "q8ncs7": 143, "q8nec5": 143, "q8nfp4": 143, "q8nfy4": 143, "q8nfz3": 143, "q8ng11": 143, "q8taz6": 143, "q8tcy5": 143, "q8td07": 143, "q8tdm5": 143, "q8wum9": 143, "q8wwa0": 143, "q8wwx8": 143, "q8wxs5": 143, "q92570": 143, "q92673": 143, "q92753": 143, "q92913": 143, "q92954": 143, "q96ap7": 143, "q96b86": 143, "q96dz9": 143, "q96jb6": 143, "q96jk4": 143, "q96jq0": 143, "q96l42": 143, "q96pb7": 143, "q96qt4": 143, "q96s97": 143, "q96sn7": 143, "q99075": 143, "q99523": 143, "q99712": 143, "q99784": 143, "q9bqq7": 143, "q9brk0": 143, "q9buf7": 143, "q9bx67": 143, "q9bxj0": 143, "q9by67": 143, "q9bye2": 143, "q9bzm4": 143, "q9gzm7": 143, "q9h0r3": 143, "q9h221": 143, "q9h222": 143, "q9h4b8": 143, "q9h7v2": 143, "q9np59": 143, "q9nqs3": 143, "q9nr61": 143, "q9nr82": 143, "q9nrq2": 143, "q9nsa2": 143, "q9ny72": 143, "q9ny84": 143, "q9nyj7": 143, "q9nyz4": 143, "q9nz08": 143, "q9nz53": 143, "q9nzq7": 143, "q9nzv8": 143, "q9p0k1": 143, "q9p0l9": 143, "q9p232": 143, "q9p2k9": 143, "q9p2u7": 143, "q9ubh0": 143, "q9ubn1": 143, "q9ubx5": 143, "q9uef7": 143, "q9uf02": 143, "q9ugm3": 143, "q9uhc9": 143, "q9uir0": 143, "q9ujz1": 143, "q9ukr5": 143, "q9ukv5": 143, "q9uky0": 143, "q9ul54": 143, "q9ulb1": 143, "q9uld8": 143, "q9ulh0": 143, "q9ult6": 143, "q9umd9": 143, "q9umf0": 143, "q9ung2": 143, "q9upu3": 143, "q9uq05": 143, "q9uqd0": 143, "q9y219": 143, "q9y286": 143, "q9y2j0": 143, "q9y3r0": 143, "q9y466": 143, "q9y4c0": 143, "q9y5r2": 143, "q9y5y6": 143, "q9y5y9": 143, "q9y698": 143, "q9y6y9": 143, "higher": [143, 145, 1111, 1219], "df_by_sourc": 145, "df_with_refer": 145, "df_column": 145, "df_dtype": 145, "allow_loop": [145, 807], "compon": [145, 212, 218, 653, 815, 1087, 1097, 1099, 1222], "when": [145, 896, 917, 949, 1048, 1086, 1087, 1097, 1099, 1220], "restrict": [145, 169, 172, 267, 312, 771], "activated_bi": 145, "entitylist": 145, "add_interact": 145, "readi": 145, "stand": [145, 1218, 1219], "usual": [145, 1220], "add_nod": 145, "nodes_by_label": 145, "noth": [145, 815, 867, 1035, 1220], "collect_complex_identifi": 145, "complex_identifi": 145, "collect_complex_label": 145, "complex_label": 145, "collect_complex": 145, "collect_curation_effort": 145, "collect_data_model": 145, "collect_degrees_direct": 145, "degrees_direct": 145, "collect_degrees_directed_in": 145, "degrees_directed_in": 145, "collect_degrees_directed_out": 145, "degrees_directed_out": 145, "collect_degrees_neg": 145, "degrees_neg": 145, "collect_degrees_negative_in": 145, "degrees_negative_in": 145, "collect_degrees_negative_out": 145, "degrees_negative_out": 145, "collect_degrees_non_direct": 145, "degrees_non_direct": 145, "collect_degrees_posit": 145, "degrees_posit": 145, "collect_degrees_positive_in": 145, "degrees_positive_in": 145, "collect_degrees_positive_out": 145, "degrees_positive_out": 145, "collect_degrees_sign": 145, "degrees_sign": 145, "collect_degrees_signed_in": 145, "degrees_signed_in": 145, "collect_degrees_signed_out": 145, "degrees_signed_out": 145, "collect_degrees_undirect": 145, "degrees_undirect": 145, "collect_ent": 145, "collect_evid": 145, "collect_identifi": 145, "collect_interaction_typ": 145, "collect_interact": 145, "collect_interactions_0": 145, "interactions_0": 145, "collect_interactions_direct": 145, "interactions_direct": 145, "collect_interactions_mutu": 145, "interactions_mutu": 145, "collect_interactions_neg": 145, "interactions_neg": 145, "collect_interactions_non_direct": 145, "interactions_non_direct": 145, "collect_interactions_non_directed_0": 145, "interactions_non_directed_0": 145, "collect_interactions_posit": 145, "interactions_posit": 145, "collect_interactions_sign": 145, "interactions_sign": 145, "collect_interactions_undirect": 145, "interactions_undirect": 145, "collect_interactions_undirected_0": 145, "interactions_undirected_0": 145, "collect_label": 145, "collect_lncrna_identifi": 145, "lncrna_identifi": 145, "collect_lncrna_label": 145, "lncrna_label": 145, "collect_lncrna": 145, "collect_mirna_identifi": 145, "mirna_identifi": 145, "collect_mirna_label": 145, "mirna_label": 145, "collect_mirna": 145, "collect_protein_identifi": 145, "protein_identifi": 145, "collect_protein_label": 145, "protein_label": 145, "collect_protein": 145, "collect_refer": 145, "collect_resource_nam": 145, "collect_resource_names_via": 145, "resource_names_via": 145, "collect_resourc": 145, "collect_resources_via": 145, "resources_via": 145, "collect_small_molecule_identifi": 145, "small_molecule_identifi": 145, "collect_small_molecule_label": 145, "small_molecule_label": 145, "collect_small_molecul": 145, "immut": 145, "constructor": 145, "count_activated_bi": 145, "pleas": [145, 304, 305, 310, 413, 432, 633, 634, 1065, 1219, 1220], "count_activ": 145, "bytes_or_buff": 145, "encod": [145, 242, 944, 974, 1031, 1032, 1218, 1220, 1222], "error": [145, 944, 1007, 1220, 1222], "expos": [145, 1109], "buffer": [145, 242], "decod": 145, "handler": [145, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046], "__str__": 145, "repr": 145, "sy": 145, "getdefaultencod": 145, "strict": [145, 620, 657, 747, 748, 917, 1077, 1087, 1097, 1098, 1099], "count_complex_identifiers_by_data_model": 145, "count_complex_identifiers_by_interaction_typ": 145, "count_complex_identifiers_by_interaction_type_and_data_model": 145, "count_complex_identifiers_by_interaction_type_and_data_model_and_resourc": 145, "count_complex_identifiers_by_refer": 145, "count_complex_identifiers_by_resourc": 145, "count_complex_labels_by_data_model": 145, "count_complex_labels_by_interaction_typ": 145, "count_complex_labels_by_interaction_type_and_data_model": 145, "count_complex_labels_by_interaction_type_and_data_model_and_resourc": 145, "count_complex_labels_by_refer": 145, "count_complex_labels_by_resourc": 145, "count_complexes_by_data_model": 145, "count_complexes_by_interaction_typ": 145, "count_complexes_by_interaction_type_and_data_model": 145, "count_complexes_by_interaction_type_and_data_model_and_resourc": 145, "count_complexes_by_refer": 145, "count_complexes_by_resourc": 145, "count_curation_effort": 145, "count_curation_effort_by_data_model": 145, "count_curation_effort_by_interaction_typ": 145, "count_curation_effort_by_interaction_type_and_data_model": 145, "count_curation_effort_by_interaction_type_and_data_model_and_resourc": 145, "count_curation_effort_by_refer": 145, "count_curation_effort_by_resourc": 145, "count_data_models_by_data_model": 145, "count_data_models_by_interaction_typ": 145, "count_data_models_by_interaction_type_and_data_model": 145, "count_data_models_by_interaction_type_and_data_model_and_resourc": 145, "count_data_models_by_refer": 145, "count_data_models_by_resourc": 145, "count_degrees_directed_by_data_model": 145, "count_degrees_directed_by_interaction_typ": 145, "count_degrees_directed_by_interaction_type_and_data_model": 145, "count_degrees_directed_by_interaction_type_and_data_model_and_resourc": 145, "count_degrees_directed_by_refer": 145, "count_degrees_directed_by_resourc": 145, "count_degrees_directed_in_by_data_model": 145, "count_degrees_directed_in_by_interaction_typ": 145, "count_degrees_directed_in_by_interaction_type_and_data_model": 145, "count_degrees_directed_in_by_interaction_type_and_data_model_and_resourc": 145, "count_degrees_directed_in_by_refer": 145, "count_degrees_directed_in_by_resourc": 145, "count_degrees_directed_out_by_data_model": 145, "count_degrees_directed_out_by_interaction_typ": 145, "count_degrees_directed_out_by_interaction_type_and_data_model": 145, "count_degrees_directed_out_by_interaction_type_and_data_model_and_resourc": 145, "count_degrees_directed_out_by_refer": 145, "count_degrees_directed_out_by_resourc": 145, "count_degrees_negative_by_data_model": 145, "count_degrees_negative_by_interaction_typ": 145, "count_degrees_negative_by_interaction_type_and_data_model": 145, "count_degrees_negative_by_interaction_type_and_data_model_and_resourc": 145, "count_degrees_negative_by_refer": 145, "count_degrees_negative_by_resourc": 145, "count_degrees_negative_in_by_data_model": 145, "count_degrees_negative_in_by_interaction_typ": 145, "count_degrees_negative_in_by_interaction_type_and_data_model": 145, "count_degrees_negative_in_by_interaction_type_and_data_model_and_resourc": 145, "count_degrees_negative_in_by_refer": 145, "count_degrees_negative_in_by_resourc": 145, "count_degrees_negative_out_by_data_model": 145, "count_degrees_negative_out_by_interaction_typ": 145, "count_degrees_negative_out_by_interaction_type_and_data_model": 145, "count_degrees_negative_out_by_interaction_type_and_data_model_and_resourc": 145, "count_degrees_negative_out_by_refer": 145, "count_degrees_negative_out_by_resourc": 145, "count_degrees_non_directed_by_data_model": 145, "count_degrees_non_directed_by_interaction_typ": 145, "count_degrees_non_directed_by_interaction_type_and_data_model": 145, "count_degrees_non_directed_by_interaction_type_and_data_model_and_resourc": 145, "count_degrees_non_directed_by_refer": 145, "count_degrees_non_directed_by_resourc": 145, "count_degrees_positive_by_data_model": 145, "count_degrees_positive_by_interaction_typ": 145, "count_degrees_positive_by_interaction_type_and_data_model": 145, "count_degrees_positive_by_interaction_type_and_data_model_and_resourc": 145, "count_degrees_positive_by_refer": 145, "count_degrees_positive_by_resourc": 145, "count_degrees_positive_in_by_data_model": 145, "count_degrees_positive_in_by_interaction_typ": 145, "count_degrees_positive_in_by_interaction_type_and_data_model": 145, "count_degrees_positive_in_by_interaction_type_and_data_model_and_resourc": 145, "count_degrees_positive_in_by_refer": 145, "count_degrees_positive_in_by_resourc": 145, "count_degrees_positive_out_by_data_model": 145, "count_degrees_positive_out_by_interaction_typ": 145, "count_degrees_positive_out_by_interaction_type_and_data_model": 145, "count_degrees_positive_out_by_interaction_type_and_data_model_and_resourc": 145, "count_degrees_positive_out_by_refer": 145, "count_degrees_positive_out_by_resourc": 145, "count_degrees_signed_by_data_model": 145, "count_degrees_signed_by_interaction_typ": 145, "count_degrees_signed_by_interaction_type_and_data_model": 145, "count_degrees_signed_by_interaction_type_and_data_model_and_resourc": 145, "count_degrees_signed_by_refer": 145, "count_degrees_signed_by_resourc": 145, "count_degrees_signed_in_by_data_model": 145, "count_degrees_signed_in_by_interaction_typ": 145, "count_degrees_signed_in_by_interaction_type_and_data_model": 145, "count_degrees_signed_in_by_interaction_type_and_data_model_and_resourc": 145, "count_degrees_signed_in_by_refer": 145, "count_degrees_signed_in_by_resourc": 145, "count_degrees_signed_out_by_data_model": 145, "count_degrees_signed_out_by_interaction_typ": 145, "count_degrees_signed_out_by_interaction_type_and_data_model": 145, "count_degrees_signed_out_by_interaction_type_and_data_model_and_resourc": 145, "count_degrees_signed_out_by_refer": 145, "count_degrees_signed_out_by_resourc": 145, "count_degrees_undirected_by_data_model": 145, "count_degrees_undirected_by_interaction_typ": 145, "count_degrees_undirected_by_interaction_type_and_data_model": 145, "count_degrees_undirected_by_interaction_type_and_data_model_and_resourc": 145, "count_degrees_undirected_by_refer": 145, "count_degrees_undirected_by_resourc": 145, "count_entities_by_data_model": 145, "count_entities_by_interaction_typ": 145, "count_entities_by_interaction_type_and_data_model": 145, "count_entities_by_interaction_type_and_data_model_and_resourc": 145, "count_entities_by_refer": 145, "count_entities_by_resourc": 145, "count_evid": 145, "count_evidences_by_data_model": 145, "count_evidences_by_interaction_typ": 145, "count_evidences_by_interaction_type_and_data_model": 145, "count_evidences_by_interaction_type_and_data_model_and_resourc": 145, "count_evidences_by_refer": 145, "count_evidences_by_resourc": 145, "count_identifiers_by_data_model": 145, "count_identifiers_by_interaction_typ": 145, "count_identifiers_by_interaction_type_and_data_model": 145, "count_identifiers_by_interaction_type_and_data_model_and_resourc": 145, "count_identifiers_by_refer": 145, "count_identifiers_by_resourc": 145, "count_interaction_types_by_data_model": 145, "count_interaction_types_by_interaction_typ": 145, "count_interaction_types_by_interaction_type_and_data_model": 145, "count_interaction_types_by_interaction_type_and_data_model_and_resourc": 145, "count_interaction_types_by_refer": 145, "count_interaction_types_by_resourc": 145, "count_interactions_0_by_data_model": 145, "count_interactions_0_by_interaction_typ": 145, "count_interactions_0_by_interaction_type_and_data_model": 145, "count_interactions_0_by_interaction_type_and_data_model_and_resourc": 145, "count_interactions_0_by_refer": 145, "count_interactions_0_by_resourc": 145, "count_interactions_by_data_model": 145, "count_interactions_by_interaction_typ": 145, "count_interactions_by_interaction_type_and_data_model": 145, "count_interactions_by_interaction_type_and_data_model_and_resourc": 145, "count_interactions_by_refer": 145, "count_interactions_by_resourc": 145, "count_interactions_directed_by_data_model": 145, "count_interactions_directed_by_interaction_typ": 145, "count_interactions_directed_by_interaction_type_and_data_model": 145, "count_interactions_directed_by_interaction_type_and_data_model_and_resourc": 145, "count_interactions_directed_by_refer": 145, "count_interactions_directed_by_resourc": 145, "count_interactions_mutual_by_data_model": 145, "count_interactions_mutual_by_interaction_typ": 145, "count_interactions_mutual_by_interaction_type_and_data_model": 145, "count_interactions_mutual_by_interaction_type_and_data_model_and_resourc": 145, "count_interactions_mutual_by_refer": 145, "count_interactions_mutual_by_resourc": 145, "count_interactions_negative_by_data_model": 145, "count_interactions_negative_by_interaction_typ": 145, "count_interactions_negative_by_interaction_type_and_data_model": 145, "count_interactions_negative_by_interaction_type_and_data_model_and_resourc": 145, "count_interactions_negative_by_refer": 145, "count_interactions_negative_by_resourc": 145, "count_interactions_non_directed_0": 145, "count_interactions_non_directed_0_by_data_model": 145, "count_interactions_non_directed_0_by_interaction_typ": 145, "count_interactions_non_directed_0_by_interaction_type_and_data_model": 145, "count_interactions_non_directed_0_by_interaction_type_and_data_model_and_resourc": 145, "count_interactions_non_directed_0_by_refer": 145, "count_interactions_non_directed_0_by_resourc": 145, "count_interactions_non_directed_by_data_model": 145, "count_interactions_non_directed_by_interaction_typ": 145, "count_interactions_non_directed_by_interaction_type_and_data_model": 145, "count_interactions_non_directed_by_interaction_type_and_data_model_and_resourc": 145, "count_interactions_non_directed_by_refer": 145, "count_interactions_non_directed_by_resourc": 145, "count_interactions_positive_by_data_model": 145, "count_interactions_positive_by_interaction_typ": 145, "count_interactions_positive_by_interaction_type_and_data_model": 145, "count_interactions_positive_by_interaction_type_and_data_model_and_resourc": 145, "count_interactions_positive_by_refer": 145, "count_interactions_positive_by_resourc": 145, "count_interactions_signed_by_data_model": 145, "count_interactions_signed_by_interaction_typ": 145, "count_interactions_signed_by_interaction_type_and_data_model": 145, "count_interactions_signed_by_interaction_type_and_data_model_and_resourc": 145, "count_interactions_signed_by_refer": 145, "count_interactions_signed_by_resourc": 145, "count_interactions_undirected_0": 145, "count_interactions_undirected_0_by_data_model": 145, "count_interactions_undirected_0_by_interaction_typ": 145, "count_interactions_undirected_0_by_interaction_type_and_data_model": 145, "count_interactions_undirected_0_by_interaction_type_and_data_model_and_resourc": 145, "count_interactions_undirected_0_by_refer": 145, "count_interactions_undirected_0_by_resourc": 145, "count_interactions_undirected_by_data_model": 145, "count_interactions_undirected_by_interaction_typ": 145, "count_interactions_undirected_by_interaction_type_and_data_model": 145, "count_interactions_undirected_by_interaction_type_and_data_model_and_resourc": 145, "count_interactions_undirected_by_refer": 145, "count_interactions_undirected_by_resourc": 145, "count_labels_by_data_model": 145, "count_labels_by_interaction_typ": 145, "count_labels_by_interaction_type_and_data_model": 145, "count_labels_by_interaction_type_and_data_model_and_resourc": 145, "count_labels_by_refer": 145, "count_labels_by_resourc": 145, "count_lncrna_identifiers_by_data_model": 145, "count_lncrna_identifiers_by_interaction_typ": 145, "count_lncrna_identifiers_by_interaction_type_and_data_model": 145, "count_lncrna_identifiers_by_interaction_type_and_data_model_and_resourc": 145, "count_lncrna_identifiers_by_refer": 145, "count_lncrna_identifiers_by_resourc": 145, "count_lncrna_labels_by_data_model": 145, "count_lncrna_labels_by_interaction_typ": 145, "count_lncrna_labels_by_interaction_type_and_data_model": 145, "count_lncrna_labels_by_interaction_type_and_data_model_and_resourc": 145, "count_lncrna_labels_by_refer": 145, "count_lncrna_labels_by_resourc": 145, "count_lncrnas_by_data_model": 145, "count_lncrnas_by_interaction_typ": 145, "count_lncrnas_by_interaction_type_and_data_model": 145, "count_lncrnas_by_interaction_type_and_data_model_and_resourc": 145, "count_lncrnas_by_refer": 145, "count_lncrnas_by_resourc": 145, "count_mirna_identifiers_by_data_model": 145, "count_mirna_identifiers_by_interaction_typ": 145, "count_mirna_identifiers_by_interaction_type_and_data_model": 145, "count_mirna_identifiers_by_interaction_type_and_data_model_and_resourc": 145, "count_mirna_identifiers_by_refer": 145, "count_mirna_identifiers_by_resourc": 145, "count_mirna_labels_by_data_model": 145, "count_mirna_labels_by_interaction_typ": 145, "count_mirna_labels_by_interaction_type_and_data_model": 145, "count_mirna_labels_by_interaction_type_and_data_model_and_resourc": 145, "count_mirna_labels_by_refer": 145, "count_mirna_labels_by_resourc": 145, "count_mirnas_by_data_model": 145, "count_mirnas_by_interaction_typ": 145, "count_mirnas_by_interaction_type_and_data_model": 145, "count_mirnas_by_interaction_type_and_data_model_and_resourc": 145, "count_mirnas_by_refer": 145, "count_mirnas_by_resourc": 145, "count_partn": 145, "count_post_transcriptionally_activated_bi": 145, "count_post_transcriptionally_activ": 145, "count_post_transcriptionally_regulated_bi": 145, "count_post_transcriptionally_regul": 145, "count_post_transcriptionally_suppressed_bi": 145, "count_post_transcriptionally_suppress": 145, "count_post_translationally_activated_bi": 145, "count_post_translationally_activ": 145, "count_post_translationally_regulated_bi": 145, "count_post_translationally_regul": 145, "count_post_translationally_suppressed_bi": 145, "count_post_translationally_suppress": 145, "count_protein_identifiers_by_data_model": 145, "count_protein_identifiers_by_interaction_typ": 145, "count_protein_identifiers_by_interaction_type_and_data_model": 145, "count_protein_identifiers_by_interaction_type_and_data_model_and_resourc": 145, "count_protein_identifiers_by_refer": 145, "count_protein_identifiers_by_resourc": 145, "count_protein_labels_by_data_model": 145, "count_protein_labels_by_interaction_typ": 145, "count_protein_labels_by_interaction_type_and_data_model": 145, "count_protein_labels_by_interaction_type_and_data_model_and_resourc": 145, "count_protein_labels_by_refer": 145, "count_protein_labels_by_resourc": 145, "count_proteins_by_data_model": 145, "count_proteins_by_interaction_typ": 145, "count_proteins_by_interaction_type_and_data_model": 145, "count_proteins_by_interaction_type_and_data_model_and_resourc": 145, "count_proteins_by_refer": 145, "count_proteins_by_resourc": 145, "count_references_by_data_model": 145, "count_references_by_interaction_typ": 145, "count_references_by_interaction_type_and_data_model": 145, "count_references_by_interaction_type_and_data_model_and_resourc": 145, "count_references_by_refer": 145, "count_references_by_resourc": 145, "count_regulated_bi": 145, "count_regul": 145, "count_resource_names_by_data_model": 145, "count_resource_names_by_interaction_typ": 145, "count_resource_names_by_interaction_type_and_data_model": 145, "count_resource_names_by_interaction_type_and_data_model_and_resourc": 145, "count_resource_names_by_refer": 145, "count_resource_names_by_resourc": 145, "count_resource_names_via_by_data_model": 145, "count_resource_names_via_by_interaction_typ": 145, "count_resource_names_via_by_interaction_type_and_data_model": 145, "count_resource_names_via_by_interaction_type_and_data_model_and_resourc": 145, "count_resource_names_via_by_refer": 145, "count_resource_names_via_by_resourc": 145, "count_resources_by_data_model": 145, "count_resources_by_interaction_typ": 145, "count_resources_by_interaction_type_and_data_model": 145, "count_resources_by_interaction_type_and_data_model_and_resourc": 145, "count_resources_by_refer": 145, "count_resources_by_resourc": 145, "count_resources_via_by_data_model": 145, "count_resources_via_by_interaction_typ": 145, "count_resources_via_by_interaction_type_and_data_model": 145, "count_resources_via_by_interaction_type_and_data_model_and_resourc": 145, "count_resources_via_by_refer": 145, "count_resources_via_by_resourc": 145, "count_small_molecule_identifiers_by_data_model": 145, "count_small_molecule_identifiers_by_interaction_typ": 145, "count_small_molecule_identifiers_by_interaction_type_and_data_model": 145, "count_small_molecule_identifiers_by_interaction_type_and_data_model_and_resourc": 145, "count_small_molecule_identifiers_by_refer": 145, "count_small_molecule_identifiers_by_resourc": 145, "count_small_molecule_labels_by_data_model": 145, "count_small_molecule_labels_by_interaction_typ": 145, "count_small_molecule_labels_by_interaction_type_and_data_model": 145, "count_small_molecule_labels_by_interaction_type_and_data_model_and_resourc": 145, "count_small_molecule_labels_by_refer": 145, "count_small_molecule_labels_by_resourc": 145, "count_small_molecules_by_data_model": 145, "count_small_molecules_by_interaction_typ": 145, "count_small_molecules_by_interaction_type_and_data_model": 145, "count_small_molecules_by_interaction_type_and_data_model_and_resourc": 145, "count_small_molecules_by_refer": 145, "count_small_molecules_by_resourc": 145, "count_suppressed_bi": 145, "count_suppress": 145, "count_transcriptionally_activated_bi": 145, "count_transcriptionally_activ": 145, "count_transcriptionally_regulated_bi": 145, "count_transcriptionally_regul": 145, "count_transcriptionally_suppressed_bi": 145, "count_transcriptionally_suppress": 145, "curation_effort_by_data_model": 145, "curation_effort_by_interaction_typ": 145, "curation_effort_by_interaction_type_and_data_model": 145, "curation_effort_by_interaction_type_and_data_model_and_resourc": 145, "curation_effort_by_refer": 145, "curation_effort_by_resourc": 145, "direction_consist": 145, "statist": [145, 1218], "total_direct": 145, "shared_direct": 145, "overlap": 145, "consistent_edg": 145, "inconsistent_edg": 145, "inconsist": 145, "total_consist": 145, "sum": [145, 974, 1005], "total_inconsist": 145, "entity_by_id": 145, "entity_by_label": 145, "evidences_by_data_model": 145, "evidences_by_interaction_typ": 145, "evidences_by_interaction_type_and_data_model": 145, "evidences_by_interaction_type_and_data_model_and_resourc": 145, "evidences_by_refer": 145, "evidences_by_resourc": 145, "extra_direct": 145, "use_laudanna": 145, "use_str": 145, "curat": [145, 188, 294, 301, 303, 304, 305, 307, 309, 310, 327, 416, 417, 525, 535, 537, 539, 552, 554, 555, 619, 621, 623, 624, 883, 897, 918, 919, 1217, 1218, 1222], "give": [145, 803, 809, 812, 819, 1051, 1106, 1109, 1118, 1218], "suffici": [145, 921], "find_path": 145, "end": [145, 322, 468, 469, 470, 591, 601, 816, 820, 950, 1087, 1097, 1099, 1219], "maxlen": [145, 971, 987, 1010, 1011, 1016, 1028, 1171, 1193], "minlen": 145, "silent": [145, 1031, 1106, 1109, 1118, 1217], "find": [145, 552, 942, 993, 996, 1021, 1075, 1077, 1083, 1087, 1097, 1106, 1217, 1218, 1220, 1222], "length": [145, 591, 597, 945, 948, 963, 985, 1054, 1157], "motif": [145, 297, 432, 492, 493, 494, 717, 814, 821, 1134, 1218], "subnetwork": [145, 712], "opposit": [145, 1087], "maximum": 145, "step": [145, 909, 1043, 1051, 1087, 1220], "longest": 145, "minimum": [145, 708, 711, 712], "indic": [145, 712, 1031, 1065, 1220], "progress": [145, 1031, 1109, 1217, 1220], "bar": [145, 1051, 1109, 1217], "shorter": [145, 985], "longer": [145, 303, 309, 1086, 1087, 1088], "remain": [145, 883, 1087], "motiv": 145, "let": [145, 1035], "sai": 145, "estrogen": 145, "esr1": 145, "transcription": 145, "translation": 145, "n": [145, 715, 872, 940], "post_transl": [145, 807], "interest": [145, 633, 634, 813], "feedback": [145, 432, 1220], "from_igraph": 145, "igraph": [145, 894, 1068, 1071, 1218, 1219, 1221], "graph": [145, 361, 1067, 1068, 1071, 1218], "from_pickl": 145, "pickl": [145, 389, 735, 744, 883, 1086, 1090], "get_curation_effort": 145, "get_evid": 145, "get_organ": 145, "htp_interact": 145, "threshold": [145, 707], "50": 145, "ignore_direct": 145, "throughput": [145, 174, 175, 265, 609, 833, 918], "studi": [145, 833], "htp_refer": 145, "cite": [145, 174, 175], "init_network": [145, 921], "reread": 145, "redownload": 145, "keep_raw": 145, "top_cal": 145, "cache_fil": 145, "first_n": 145, "among": [145, 798, 976, 980, 993, 996, 1021, 1087, 1097, 1118, 1222], "recurs": [145, 942, 948, 949, 975], "after": [145, 1088, 1109, 1118, 1220, 1222], "few": [145, 683, 1219], "interaction_by_id": 145, "similarli": [145, 938], "interaction_by_label": 145, "label_a": 145, "label_b": 145, "load_from_pickl": 145, "load_resourc": [145, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046], "clean": [145, 680, 941, 1102, 1131], "attach": [145, 1031], "input_format": [145, 913, 914, 915, 916, 917, 918, 919, 920, 921, 1086, 1087, 1097, 1099, 1218], "networkinput": [145, 913, 914, 915, 916, 917, 918, 919, 920, 921], "download": [145, 169, 172, 174, 175, 180, 183, 185, 188, 193, 196, 197, 212, 228, 250, 269, 278, 279, 282, 288, 289, 294, 322, 354, 355, 371, 374, 377, 384, 389, 399, 416, 417, 432, 446, 447, 448, 449, 467, 475, 482, 483, 509, 527, 546, 547, 548, 562, 566, 567, 595, 598, 602, 607, 609, 620, 621, 624, 627, 628, 636, 662, 681, 683, 684, 690, 699, 708, 711, 712, 713, 715, 727, 732, 733, 744, 745, 746, 748, 749, 763, 788, 790, 812, 835, 1031, 1035, 1036, 1042, 1043, 1086, 1087, 1102, 1106, 1131, 1217, 1218, 1220, 1221, 1222], "moment": 145, "clean_graph": 145, "cach": [145, 389, 431, 432, 547, 598, 602, 621, 623, 624, 625, 681, 749, 1031, 1034, 1035, 1036, 1037, 1038, 1039, 1042, 1043, 1086, 1102, 1131, 1218], "bypass": [145, 1218], "similar": [145, 591, 876, 940, 958, 1000, 1155, 1222], "dtype": 145, "mirna_target": 145, "mrna": [145, 340, 341, 883, 1217, 1221, 1222], "numof_interactions_per_refer": 145, "counter": [145, 990], "organisms_check": 145, "remove_mismatch": 145, "remove_nonspecif": 145, "scan": 145, "too": 145, "discrep": 145, "zero": [145, 699, 945], "return_interact": 145, "post_transcriptionally_activated_bi": 145, "post_transcriptionally_activ": 145, "post_transcriptionally_regulated_bi": 145, "post_transcriptionally_regul": 145, "post_transcriptionally_suppressed_bi": 145, "post_transcriptionally_suppress": 145, "post_translationally_activated_bi": 145, "post_translationally_activ": 145, "post_translationally_regulated_bi": 145, "post_translationally_regul": 145, "post_translationally_suppressed_bi": 145, "post_translationally_suppress": 145, "random_interact": 145, "pick": [145, 1087, 1098], "random": [145, 963, 1054, 1087, 1098, 1109, 1218], "regulated_bi": 145, "remove_interact": 145, "remove_nod": 145, "leav": 145, "remove_zero_degre": 145, "reset": [145, 883, 1059, 1087, 1088], "save_to_pickl": 145, "save": [145, 744, 883, 904, 906, 924, 926, 1086], "summaries_tab": 145, "outfil": [145, 299, 630, 894, 903, 923], "return_t": 145, "label_typ": 145, "write": [145, 880, 894, 971, 1016, 1048, 1086, 1106], "suppressed_bi": 145, "suppress": [145, 1217], "to_igraph": 145, "original_resourc": 145, "transcriptionally_activated_bi": 145, "transcriptionally_activ": 145, "transcriptionally_regulated_bi": 145, "transcriptionally_regul": 145, "transcriptionally_suppressed_bi": 145, "transcriptionally_suppress": 145, "by_resourc": 147, "by_categori": 147, "percent": [147, 1051], "shared_res_cat": 147, "unique_res_cat": 147, "percent_res_cat": 147, "shared_cat": 147, "unique_cat": 147, "percent_cat": 147, "resource_cat": 147, "cat_resourc": 147, "13": [147, 248, 301, 416, 417, 798], "15": [147, 299, 1020], "14": [147, 301, 419, 909, 1222], "11": [147, 299, 301, 798, 1220], "12": [147, 301, 581, 798, 1020, 1048], "use_omnipath": 149, "copyright": 151, "point": [151, 552, 591, 909, 966, 990, 1220], "licens": [151, 188, 413, 420, 903, 923], "loglevel": [152, 1048], "session": [152, 894, 909, 1218], "keep_in_complex_interact": 157, "expans": [157, 699], "sif": [158, 1217, 1221], "distribut": [158, 1219], "offici": 158, "websit": [158, 547, 771], "url": [168, 170, 193, 291, 322, 329, 350, 690, 825, 1031, 1044, 1222], "commonli": [169, 1048], "shown": [169, 172, 178, 746], "biogps_dataset": [169, 171, 172], "profil": [170, 171], "biogpsdataset": 171, "microarrai": [171, 172, 178, 179, 180, 803, 1086], "probe": [171, 172, 178, 180, 803, 1086], "htp_limit": [174, 175], "ltp": [174, 175], "low": [174, 175, 265, 609, 918], "physic": [175, 708, 711, 712], "multi": [175, 276, 815, 1217, 1221], "source_organ": 177, "target_organ": 177, "10090": [177, 369, 699, 1222], "orthologu": [177, 1075, 1077], "array_typ": 178, "peptid": [178, 180, 181], "webpag": [178, 193, 282, 546, 548, 690, 744, 745, 746, 749, 788, 1106, 1222], "biomart_microarray_typ": 178, "vendor": 180, "minut": [180, 1048], "affi": 180, "illumina": 180, "agil": 180, "codelink": 180, "phalanx": 180, "hsapiens_gene_ensembl": 181, "web": [181, 186, 322, 658, 813, 901, 1086, 1155, 1218, 1219, 1221], "servic": [181, 322, 361, 561, 562, 653, 813, 901, 1086, 1155, 1218, 1219, 1221], "martview": 181, "ma": 183, "ayan": 183, "2005": [183, 411], "scraper": 186, "cancerdrugs_db": [186, 187], "pubchem": [187, 189, 216, 490, 1217], "world": [188, 1002], "describ": [189, 198, 212, 561, 883, 888, 1155], "funciton": 191, "supp_url": 193, "article_url": 193, "supplementari": [193, 331, 332, 333, 334, 485, 649, 650, 662, 690, 787, 793, 801, 905, 925], "materi": [193, 649, 690], "journal": [193, 690, 1106], "articl": [193, 535, 905, 925], "page": [193, 322, 904, 909, 924, 1222], "extend": [195, 196, 197, 198, 1118, 1222], "shellycod": [195, 196, 197, 198], "core": [195, 196, 197, 198, 276, 801, 1219, 1221], "cellcall_download_al": 196, "incomprehens": [204, 205, 206, 227, 228, 229], "fall": [204, 205, 206, 227, 228, 229], "back": [204, 205, 206, 227, 228, 229, 1087], "fhe": 205, "r": [205, 302, 1020, 1031, 1032, 1219], "rda": 205, "raw": [205, 246, 468, 567, 620, 649, 699, 1106, 1133, 1134], "ligand_receptor": [206, 1221], "cofactor": 206, "agonist": 206, "antagonist": 206, "coreceptor": 206, "ligand_loc": 208, "receptor_loc": 208, "rna": [209, 210, 211, 212, 213, 214, 215, 216, 217, 1217, 1221], "societi": [209, 210, 211, 212, 213, 214, 215, 216, 217], "represent": [211, 1048], "cid": [216, 653, 871], "cellinker_complexes_raw": 218, "guess": [218, 1087, 1092], "receptor_class": 220, "peripher": 220, "secret": [220, 267, 515, 1031], "secreted_class": 220, "integrin": 220, "add_complex_annot": 225, "deprec": [225, 289, 348, 349, 359], "wrong": [225, 1220], "tcm": [227, 229], "zju": [227, 229], "edu": [227, 229, 420, 539], "cn": [227, 229, 539], "php": [227, 229, 420, 539, 1031], "filenam": [228, 874, 875, 879, 880, 905, 906, 925, 926, 1031, 1033, 1109], "lr_pair": 228, "gene_info": 228, "gene2ensembl": 228, "immun": 231, "teichlab": 231, "celltypist_wiki": 231, "standard_rel": 233, "pchembl_value_non": 233, "todo": 233, "pchembl": 233, "standard": [233, 327, 943, 1087, 1097, 1099, 1155, 1157, 1199], "standard_flag": 233, "standard_unit": 233, "why": 233, "data_validity_com": 233, "assai": [234, 1218], "csv": [238, 243, 304, 305, 310, 649, 650], "old": [238, 304, 305, 310, 788, 909, 912, 1051, 1087, 1097, 1099, 1219, 1220], "glom": [239, 240, 322, 562], "spec": [239, 240, 322, 562], "protect": 239, "coalesc": 239, "io": [240, 241, 253, 254, 322, 1219], "depth": [240, 677, 947, 950], "read": [241, 242, 243, 322, 485, 486, 487, 488, 494, 598, 649, 694, 874, 909, 1032, 1035, 1042, 1043, 1086, 1090, 1106, 1155, 1217, 1221], "fileobject": 242, "sep": [242, 986, 989, 1004, 1008, 1033, 1114], "sep2": 242, "rem": 242, "hdr": 242, "open": [242, 658, 1031, 1032, 1048, 1106, 1109, 1218, 1219], "stringio": 242, "subfield": 242, "prefix": [242, 989, 1051, 1109], "header": [242, 299, 431, 432, 805, 807, 810, 894, 1031, 1033, 1137, 1181, 1220], "replac": [242, 356, 361, 757], "xls_file": 243, "sheet": [243, 329], "use_openpyxl": 243, "m": [243, 872, 1048], "excel": 243, "xl": 243, "return_detail": 248, "intact": [248, 265, 688, 915, 916, 1087], "ebi": [248, 561, 562, 752, 1155], "uk": [248, 752, 1155], "nar": 248, "oxfordjourn": 248, "earli": 248, "2014": [248, 412, 419, 788, 1106], "gku975": 248, "pdf": [248, 1020], "cellular": [250, 883, 1219], "compart": 250, "associ": [250, 639, 640, 711], "score_threshold": [251, 382, 708, 710, 711, 712], "connectomedb2020": [253, 254], "asrhou": [253, 254], "natmi": [253, 254], "user": [258, 267, 292, 312, 313, 314, 315, 316, 708, 711, 712, 869, 870, 885, 896, 1033, 1058, 1106, 1218, 1220], "passwd": [258, 292, 312, 313, 314, 315, 316, 1033], "credentials_fnam": [258, 312, 313, 314, 315, 316], "cosmic_credenti": 258, "driver": [258, 451], "sanger": 258, "catalogu": 258, "somat": 258, "mutat": [258, 823, 1218], "include_unknown_typ": 260, "consensuspathdb": [264, 265], "cpdb_interact": 265, "hprd": [265, 916], "biogrid": [265, 915, 916], "phosphopoint": 265, "mint": 265, "bind": [265, 598, 708, 711, 814, 1065, 1218], "from_fil": 267, "requir": [267, 683, 708, 711, 712, 785, 940, 1087, 1109, 1220], "password": [267, 312, 313, 314, 315, 316, 1106], "_credenti": 267, "directori": [267, 602, 883, 936, 1048, 1059, 1218, 1220], "unchang": [267, 657, 699, 944, 947, 950, 1014, 1015, 1067], "runtimeerror": 267, "catalyt": 269, "compendium": 275, "experi": [275, 552, 1218, 1220], "long": [276, 1087, 1146], "matrix": [276, 509, 512, 1106, 1222], "wide": 276, "html": [282, 322, 343, 569, 570, 595, 749, 904, 906, 924, 926, 1106, 1171, 1193, 1222], "rescu": [283, 788], "Will": 289, "soon": [289, 348, 349, 359, 1218, 1220], "genesymbol": [289, 385, 486, 1087, 1093, 1094, 1097, 1099, 1166, 1222], "core_onli": 291, "direct_onli": 291, "small_scale_onli": 291, "reason": [292, 432, 885], "binary_data": [292, 1031], "curl": [292, 1106, 1218, 1222], "below": [292, 949, 959, 1006, 1020, 1048, 1218, 1220, 1222], "diseas": [294, 395, 647], "befre": 294, "ddi": 297, "dmi": 297, "none_valu": 299, "uniprot_a": 299, "uniprot_b": 299, "isoform_a": [299, 819], "isoform_b": [299, 819], "exp_method": 299, "role_a": 299, "role_b": 299, "binding_site_range_a": 299, "binding_site_range_b": 299, "domains_a": 299, "domains_b": 299, "ptm_residue_a": 299, "ptm_residue_b": 299, "ptm_type_mi_a": 299, "ptm_type_mi_b": 299, "ptm_type_a": 299, "ptm_type_b": 299, "19": 299, "ptm_res_name_a": 299, "ptm_res_name_b": 299, "mutations_a": 299, "mutations_b": 299, "23": [299, 1048], "mutation_effects_a": 299, "mutation_effects_b": 299, "domains_interpro_a": 299, "26": 299, "domains_interpro_b": 299, "28": 299, "chipseq": 301, "coexp": 301, "curated_sourc": 301, "chipseq_sourc": 301, "predicted_sourc": 301, "coexp_sourc": 301, "all_sourc": 301, "kegg_pathwai": [301, 303, 309], "packag": [302, 1219, 1220, 1222], "c": [303, 309, 349, 351, 352, 353, 356, 357, 358, 360, 361, 362, 364, 365, 366, 367, 686, 687, 921, 945, 949, 961, 1001, 1006, 1020, 1048, 1068, 1071, 1118, 1219], "d": [303, 309, 850, 921, 952, 961, 1006, 1007, 1020, 1048, 1118], "only_cur": [303, 304, 305, 307, 309, 310], "confidence_pairwis": [303, 309], "regulon": [303, 309, 1217, 1222], "chip": [303, 304, 305, 307, 309, 310, 1217], "seq": [303, 304, 305, 307, 309, 310, 820, 821, 823, 1017, 1018, 1019, 1020, 1023, 1118, 1217, 1218], "pwm": [303, 304, 305, 307, 309, 310], "hocomoco": [303, 304, 305, 307, 309, 310], "jaspar": [303, 304, 305, 307, 309, 310], "matric": [303, 304, 305, 307, 309, 310], "gtex": [303, 304, 305, 307, 309, 310], "aracn": [303, 304, 305, 307, 309, 310], "public": [303, 309, 679, 788], "version": [303, 304, 305, 309, 310, 413, 416, 417, 546, 547, 548, 573, 581, 788, 871, 1147, 1217, 1218, 1219, 1220, 1221], "2018": [304, 305, 310, 1222], "date": [304, 305, 310, 357, 361, 757, 1048, 1155, 1220], "dorothea_interact": [304, 305, 310], "statu": [312, 1031, 1051, 1109], "mail": [312, 313, 314, 315, 316, 1106], "account": [312, 313, 314, 315, 316], "cross": [313, 396, 449, 1157, 1167, 1188], "pharma_act": [314, 316], "pharmacolog": [314, 316], "target_id_typ": [315, 320, 637, 753, 813, 1086, 1087, 1088, 1089, 1097, 1098, 1099], "ca": [315, 320], "inchikei": [315, 320], "inchi": [315, 320, 490, 653, 1155], "smile": [315, 320, 490, 653, 1155, 1218], "formula": 315, "kegg_compound": 315, "kegg_drug": 315, "pubchem_compound": 315, "pubchem_subst": 315, "chebi": [315, 490], "chembl": [315, 490, 1155, 1217, 1218, 1221], "pharmgkb": 315, "het": 315, "login": 315, "credenti": 315, "central": [318, 319, 320, 909], "comment": 319, "retain": 319, "inn": 320, "q": [322, 647], "pagin": 322, "page_length": 322, "size_param": 322, "page_param": 322, "by_pag": 322, "page_field": 322, "total_field": 322, "totalpag": 322, "record_nam": 322, "append": [322, 894, 938, 939, 1220], "until": [322, 947, 1220], "per": [322, 711, 712, 943, 1106], "readthedoc": 322, "latest": [322, 384], "tutori": 322, "downlod": 327, "manual": [327, 918, 919, 1048], "gold": 327, "init_url": [329, 1031], "s11": [331, 332, 333, 334], "1016": [331, 332, 333, 334, 793], "j": [331, 332, 333, 334, 793, 875], "isci": [331, 332, 333, 334], "2019": [331, 332, 333, 334, 649], "026": [331, 332, 333, 334], "sheikh": [331, 332, 333, 334], "metadata": [338, 833], "bs4": [344, 682, 745, 749], "beautifulsoup": [344, 682, 745], "summari": [345, 883], "text": [345, 649, 1011, 1028, 1048, 1218], "module_nam": 346, "method_nam": 346, "go_id": 348, "slim": 349, "names_onli": 349, "aspect": [349, 351, 352, 353, 356, 357, 358, 360, 361, 362, 364, 365, 366, 367, 798, 801, 1065, 1067, 1068, 1071], "f": [349, 351, 352, 353, 356, 357, 358, 360, 361, 362, 364, 365, 366, 367, 961, 1020, 1027, 1068, 1071], "p": [349, 351, 352, 353, 356, 357, 358, 360, 361, 362, 364, 365, 366, 367, 639, 640, 1048, 1068, 1071], "quickgo": [349, 351, 353, 357, 360, 361, 362, 364, 366], "ancestor": [351, 352, 353, 363, 1065, 1067], "cellular_compon": [351, 352, 353, 356, 357, 358, 360, 361, 362, 364, 365, 366, 367], "molecular_funct": [351, 352, 353, 356, 357, 358, 360, 361, 362, 364, 365, 366, 367], "biological_process": [351, 352, 353, 356, 357, 358, 360, 361, 362, 364, 365, 366, 367], "amigo": [352, 356, 358, 361, 365, 367], "goos": [352, 356, 361, 365], "evidence_cod": [354, 355], "goa": [354, 355, 357], "recent": [356, 357, 361, 774, 1087, 1220], "go_annotations_solr": 356, "mysql": [356, 361, 1218, 1221], "sinc": [356, 361, 938, 1219], "dec": [356, 361], "2016": [356, 361], "unfortun": [356, 361], "ceas": [356, 361], "flexibl": [356, 361, 1217, 1218, 1221], "perform": [356, 361, 431, 432, 949, 1031, 1042, 1043, 1085, 1218], "solr": [356, 358, 361, 367], "far": [356, 361, 1220], "is_a": 357, "part_of": 357, "go_annotations_goa": 357, "contrari": 357, "super": 357, "slow": [357, 1031], "now": [358, 494, 871, 875, 1051, 1106], "implement": [358, 730, 815, 871, 888, 1051, 1087, 1099, 1106, 1217, 1221, 1222], "ye": [359, 813], "quickgo_download_s": [360, 362], "descend": [360, 361, 362, 363, 1065, 1067], "go_terms_solr": [360, 362], "go_descendants_quickgo": 361, "unabl": 361, "nice": [361, 1220], "desc": 363, "turn": [363, 1035, 1036, 1037], "swap": [363, 1006, 1007, 1008, 1087], "upper": [364, 365, 366, 367, 548, 634], "lower": [364, 365, 366, 367, 548, 634, 1109], "graph_attr": 371, "vertex_attr": 371, "edge_attr": 371, "endogen": 374, "process_interact": 374, "process_complex": 374, "guid": [374, 1219], "pharmacologi": 374, "supplement": [377, 378], "s3": [377, 378, 715], "2012": [377, 378, 485], "150": [377, 378], "1068": [377, 378], "1081": [377, 378], "75": [382, 854], "only_human": [382, 901], "only_sourc": [382, 894], "only_method": 382, "releas": [384, 1219], "pointer": [384, 1031, 1032], "gi": [385, 1087, 1097, 1099], "partner_rol": 388, "unambigu": [388, 391, 1118], "use_cach": [389, 390, 391, 392], "plasma": 389, "membran": [389, 514], "receptom": 389, "intermedi": [389, 598, 1087], "unmaintain": [391, 1087, 1097, 1099], "probabl": [391, 1037], "never": 391, "phenotyp": [394, 395, 397], "tree": 396, "synonym": [396, 653, 746, 815, 1143], "def": [396, 961, 1020], "xref": 396, "in_vivo": [399, 400, 401], "min_confid": [408, 704, 705], "rual": 411, "nlm": [411, 412], "nih": [411, 412, 657], "gov": [411, 412], "16189514": 411, "rolland": [412, 419], "25416956": 412, "unbias": [413, 419, 420], "interactom": [413, 419, 420], "iii": [413, 420], "hi": [413, 419, 420], "unpublish": 413, "condit": [413, 917, 959, 972], "carefulli": 413, "baderlab": 413, "lit": [416, 417], "bm": [416, 417], "2013": 416, "ccsb": [416, 417], "luck": 418, "2020": [418, 793, 801, 909], "ii": 419, "scale": [419, 420, 826, 827, 828, 829], "screen": [419, 420], "fname": [420, 808, 1048], "preliminari": 420, "vidal": 420, "lab": [420, 482, 483, 788, 790, 1219], "dfci": 420, "harvard": 420, "h_sapien": 420, "dload_trk": 420, "interaction3d": 424, "chain": [424, 439, 591, 601, 633, 729, 731, 816, 1101, 1102, 1104], "pdb": [424, 439, 440, 601, 634, 731, 733, 817, 818, 819, 1131, 1222], "stuctur": 424, "pfam": [424, 816], "subfamili": 426, "uniprotkb_ac": [431, 432], "mydomain": [431, 432], "hmm": [431, 432], "maxwait": [431, 432], "180": [431, 432], "part_siz": [431, 432], "get_ielm_hug": 431, "chunk": 432, "retri": [432, 1031], "failur": [432, 1014], "reduc": [432, 1017, 1020, 1023], "suppli": [432, 492, 493, 915, 1109], "what": [432, 1041, 1087, 1088, 1222], "understand": 432, "detect": [432, 748, 1220], "wait": 432, "time": [432, 447, 744, 1048, 1086, 1087, 1088, 1220], "again": [432, 909, 1035, 1118, 1219, 1220], "send": [432, 1220], "verbos": [434, 1038, 1039, 1048, 1049, 1057, 1221], "understood": 440, "miscor": 442, "complex_expans": 442, "only_id": 442, "smaller": [442, 1222], "footprint": 442, "takada": 444, "2007": [444, 787], "1186": 444, "gb": [444, 1218], "215": 444, "entri": [446, 447, 448, 449, 466, 871, 941, 945, 1020], "page_s": 447, "200": [447, 1048], "review": [447, 771, 773, 776, 777, 780, 783, 784, 813, 1083, 1087], "tax_id": 447, "uniprotkb": [447, 637], "db_type": 449, "enzyme_isoform": 455, "substrate_isoform": 455, "ptm_type": 455, "resaa": 455, "resnum": [455, 1101, 1102], "dbget": 466, "interfac": [466, 634, 813, 814, 1081, 1156, 1217, 1218, 1219, 1220], "jp": 466, "bin": 466, "www_bget": 466, "max_entity_vari": [468, 469, 470], "medicu": [468, 469, 470, 921], "nest": [468, 469, 470, 1059], "flatten": [468, 961, 1067], "Then": [468, 1035, 1087, 1097, 1109], "variant": [468, 469, 470], "largest": [468, 469, 470, 1106], "hundr": [468, 469, 470, 1106], "combinatiori": [468, 469, 470], "regulatori": [470, 628, 629, 630, 916, 1221], "kirouac": 477, "2010": [477, 871], "embopress": [477, 787], "doi": [477, 655, 657, 787], "1038": [477, 787], "msb": 477, "71": 477, "signalingflow": 482, "signalingdirect": 483, "li": 485, "get_li2012": [486, 487, 488], "brand": 490, "compani": 490, "load_lmpid": [492, 493], "lmpid_data_pubmed_ref": 494, "xml": [494, 1106, 1109], "author": [494, 633, 634], "redistribut": [494, 825, 1217, 1218, 1221], "matrisomedb": 509, "extracellular": [509, 512, 801, 1222], "subclass": [509, 715, 1222], "ecm": [512, 1222], "cdd201287": 535, "c1": 537, "accurasci": 537, "strong": [539, 885], "experiment": 539, "cuhk": 539, "mirtarbase_2019": 539, "registered_email": [546, 547, 548], "only_collect": [546, 548], "c5": [546, 548], "m5": [546, 548], "email": [546, 547, 548], "msigdb_email": [546, 547, 548], "h": [546, 547, 548, 852, 858, 1048, 1155, 1220], "c2cgp": [546, 548], "softwar": [546, 547, 548], "broadinstitut": [546, 547, 548], "gsea": [546, 547, 548, 1218], "jsp": [546, 547, 548], "force_download": 547, "gmt": 547, "c2": [547, 864], "cpg": 547, "geneset": [547, 548], "distinguish": [547, 1109, 1219], "come": [547, 836, 1087, 1099, 1218, 1220, 1222], "even": [547, 909, 1006, 1036, 1118, 1221, 1222], "best": [552, 942], "our": [552, 1220, 1222], "knowledg": [552, 649], "paper": [552, 1222], "test": [552, 972, 1031, 1217, 1218, 1219, 1220, 1221], "outcom": [552, 972], "autophagi": 554, "autophagyregul": 554, "nrf2": [555, 913], "nrf2ome": 555, "full_config": 561, "config": 561, "ol": 562, "listof_ontologi": 562, "simpli": [562, 1086, 1220], "section": [562, 985, 1106, 1157, 1182, 1218], "se": [569, 570], "pc_label": 573, "by_interact": 581, "integ": [591, 753, 826, 827, 828, 829, 967], "previou": 591, "constitut": [592, 1118], "stoichiometri": [592, 677, 815], "analysi": [593, 1217, 1218, 1221], "resolut": [593, 717], "pars": [595, 1109, 1137], "num": [597, 962, 966, 967, 1015], "special": [597, 942, 1220, 1221], "_ref": 597, "phosphoprotein": 598, "inner": [601, 947, 952, 955], "keepfil": 602, "neither": [602, 657], "ltp_onli": 609, "homo": [610, 771], "sapien": [610, 771], "htp": [619, 621, 624, 625], "biopax": [621, 624, 680, 683, 1109, 1118, 1217, 1219, 1221], "disrupt": 628, "induc": 628, "vast": [629, 1031], "close": [629, 1031, 1048, 1106, 1109], "enough": 629, "safe": [629, 1109], "align": 629, "regsit": 630, "tabular": [630, 971, 1217, 1222], "uniprot_1": 632, "chain_1": 632, "residue_1": 632, "seqnum_1": 632, "uniprot_2": 632, "chain_2": 632, "residue_2": 632, "seqnum_2": 632, "bond": [633, 819], "refactor": [633, 634], "contact": [633, 634, 731, 732, 733, 1219, 1220], "return_unmap": 634, "unmap": 634, "normal": [634, 642, 643, 649, 801, 1081, 1106], "uniprot_isoform": 637, "weight": [639, 640, 871, 877, 1157], "pathologi": [642, 643], "sourcetyp": 647, "mix": [647, 1222], "consequencetyp": 647, "feature_field": 647, "dictread": 649, "bachman": 649, "assembl": 649, "phosphoproteom": 649, "mine": 649, "biorxiv": 649, "1101": 649, "822668v3": 649, "only_evid": 650, "only_literatur": 650, "descript": [650, 820, 883, 903, 904, 905, 906, 1051, 1157, 1182, 1217, 1218, 1220, 1221], "ftp": [653, 1031, 1218], "simpler": 653, "lowercas": 653, "iupac": 653, "sid": 653, "idlist": [655, 657, 659, 660], "pmc": [655, 657], "fetch": [655, 813], "compli": 657, "attempt": [657, 746, 927, 942, 1014, 1087, 1097, 1102, 1131], "manuscript": [657, 1217, 1221], "browser": [658, 1222], "put": [662, 719, 720, 721], "ramilowski": [662, 663, 1222], "2015": [662, 663, 1222], "long_not": 663, "acsn": [668, 919], "protein_name_typ": [669, 680], "mandatory_ref": [670, 678], "elem": 672, "cref": 677, "entity_uniprot": [677, 679], "complexvari": [677, 1118, 1120], "control": [678, 927, 1111, 1221], "biopax_fil": 680, "binari": [680, 683, 894, 917, 1031], "reactom": [681, 682, 683, 684, 1109], "sbml": [681, 682, 684], "representationa": 682, "pathwaya": 682, "cachefil": [683, 744, 833], "ask": [683, 1219], "veri": [683, 1218, 1219, 1220, 1222], "stringent": 683, "free": [683, 1102, 1106, 1109, 1131, 1133, 1134, 1221], "approx": 683, "2g": 683, "jonetjakobsson": [686, 687, 688], "fruitfli": [686, 687], "zebrafish": [686, 687], "chicken": [686, 687], "elegan": [686, 687], "xenopu": [686, 687], "tropicali": [686, 687], "yeast": [686, 687], "anoli": [686, 687], "carolinensi": [686, 687], "left": [688, 1087, 1119], "exclude_secondari": 694, "signalink3": [694, 913, 1222], "raw_record": 699, "expand_famili": 699, "uniroma2": 699, "split": [699, 986, 1004, 1020], "10116": [699, 1222], "expand": [699, 871, 950, 1111, 1113, 1116, 1118, 1120, 1121], "integr": [705, 921, 1217, 1218, 1221], "span": 705, "highest_confid": [708, 711, 712], "high_confid": [708, 711, 712], "medium_confid": [708, 711, 712], "low_confid": [708, 711, 712], "physical_interaction_scor": [708, 711], "chemic": [708, 1085, 1155], "link": [708, 1220], "subscor": [708, 711, 712], "interactor": [708, 749], "pre": [708, 711, 712], "channel": [711, 712, 1220], "output": [711, 871, 875, 876, 894, 943, 1155], "form": [711, 1031], "tax": [713, 813], "scientif": [713, 1143], "surfac": [715, 1065], "switch": [717, 871], "elm": [717, 820, 914], "classifi": 717, "mechan": [717, 1218], "only_class": 727, "known": [727, 813, 1219, 1222], "3d": [729, 731, 732], "pdb_uniprot": 731, "threedcomplex_chain": 731, "automat": [731, 732, 803, 809, 812, 1081, 1217, 1218, 1221], "pdb_chain": 731, "3dcomplex": [732, 733], "shmoo": [732, 733], "weizmann": [732, 733], "il": [732, 733], "elevi": [732, 733], "3dcomplexv6": [732, 733], "home": [732, 733, 909, 912], "cgi": [732, 733], "threedcomplex_contact": 732, "ddi_flat": [735, 736], "dmi_flat": 737, "intract": 742, "soup": 745, "trip_get_uniprot": 745, "syn": 746, "exclude_method": [747, 748], "specul": [747, 748], "trip_process": 747, "dadio": 748, "take_a_trip": 748, "provcess": 748, "bait": 748, "tab": [749, 894, 1016], "intr": 749, "trp_uniprot": 749, "tag": [749, 1109], "fill": [749, 888], "twice": 749, "trp": 749, "numer": [751, 754, 942, 1155, 1218], "ucqueri": [752, 1155], "listsourc": [752, 1155], "unichem_sourc": 753, "unichem_info": 754, "ncbi_id": 756, "latin": [756, 1146, 1147], "english": [756, 1143], "latin_synonym": 756, "entry_vers": 757, "sequence_vers": 757, "entry_nam": 757, "replaced_bi": 757, "archiv": [761, 1031, 1032, 1087, 1109], "delet": [761, 883, 1034, 1035, 1057, 1087, 1109, 1218, 1221], "confirm": [770, 772], "client": [771, 1155, 1218], "plain": [771, 1218], "_uniprot_field": 771, "help": [771, 871, 1086, 1087], "uniprotkb_column_nam": 771, "cover": [771, 894], "ke": 771, "histori": [774, 1219], "oldest": 774, "fit": [785, 1087], "cui": 787, "msb4100200": 787, "researchg": 788, "humansignalingnetwork": [788, 790], "publish": 788, "jan": 788, "edwin": 788, "omnipath": [788, 801, 915, 917, 918, 919, 1219, 1221], "repositori": 788, "research": 788, "gate": 788, "wang_interact": 788, "s4": 793, "07": 793, "025": 793, "wojtowicz": 793, "1111": 795, "nya": 795, "12776": 795, "25988664": 795, "scope": [798, 801, 965], "avoid": [798, 801, 1025, 1040, 1045], "enabl": [798, 801, 825, 1106], "annotdefbas": 798, "op": [800, 979, 996, 997, 998], "annotopbas": 800, "intersect": [800, 801, 940, 1111, 1117], "behav": 801, "s10": 801, "turei": 801, "prep": 801, "actual": [801, 935], "annot_composite_database_nam": 801, "entit": 801, "cell_surfac": 801, "itself": [801, 973, 1045, 1046], "isdisjoint": 801, "null": 801, "mappinginput": [803, 804, 805, 808, 809, 811, 812, 813, 1086], "pro_id_type_a": [803, 809], "pro": [803, 809, 1090], "pro_id_type_b": [803, 809], "abov": [803, 809, 812, 833, 883, 1049, 1220, 1222], "biomart_id_type_a": 804, "biomart_id_type_b": 804, "input_": 805, "col_a": 805, "col_b": 805, "type_": 806, "resource_id_type_a": 806, "resource_id_type_b": 806, "id_col_a": 807, "id_col_b": 807, "extra_edge_attr": [807, 894], "extra_node_attrs_a": 807, "extra_node_attrs_b": 807, "positive_filt": 807, "negative_filt": 807, "mark_sourc": 807, "mark_target": 807, "curl_arg": 807, "must_have_refer": 807, "unique_field": 807, "expand_complex": [807, 1087, 1097, 1098, 1099], "only_default_organ": 807, "vertex": [807, 894, 1068, 1071], "particular": [807, 825, 883, 976, 980, 993, 996, 1021, 1218], "vertic": 807, "consortium": 809, "id_col": 810, "extra_attr": [810, 836], "uniprot_id_type_a": 812, "uniprot_id_type_b": 812, "upload": [812, 1086], "webservic": [812, 900, 904, 924, 1217, 1218, 1219], "convers": [813, 1086, 1217, 1220, 1221], "would": [813, 1220], "directli": [813, 839, 883, 1086, 1087, 1088, 1109, 1218, 1219, 1222], "togeth": 813, "programmat": 813, "batch": 813, "slightli": [813, 1222], "capabl": [813, 938, 939], "resource_id_typ": 813, "handl": [814, 894, 938, 939, 1031, 1087, 1088, 1143], "short": [814, 1147, 1218, 1222], "stoichiometr": 815, "coeffici": [815, 877, 1003], "repetit": 815, "impli": 815, "kept": [815, 1020, 1087], "compat": [815, 825, 1219, 1221], "add_attr": 815, "domain_id_typ": 816, "domain_a": 817, "domain_b": 817, "ref": [817, 822], "contact_residu": 817, "get_lin": 818, "resources_only_primari": 818, "intend": 818, "enzyme_genesymbol": 818, "substrate_genesymbol": 818, "residue_typ": 818, "residue_offset": 818, "css": 819, "stab_en": 819, "solv_en": 819, "area": 819, "add_residu": 819, "res_a": 819, "res_b": 819, "undefin": 819, "124": 819, "serin": 819, "hbond": 819, "sbridg": 819, "ssbond": 819, "covbond": 819, "bond_typ": 819, "get_bond": 819, "throught": 819, "numof_residu": 819, "bound": 819, "regex": 820, "motif_nam": 820, "prob": 820, "attrib": 825, "academ": 825, "alik": 825, "licensefeatur": [826, 828, 829], "check_level": [826, 827, 828, 829], "int_to_level": [826, 827, 828, 829], "nearest": [826, 827, 828, 829], "ordin": [826, 827, 828, 829], "level_to_int": [826, 827, 828, 829], "to_int": [826, 827, 828, 829], "pp": 833, "htp_threshold": 833, "20": 833, "data_attr_nam": 835, "evidence_typ": [836, 838, 840], "resource_attr": 836, "get_via": 836, "data_typ": [837, 839, 840], "networkresourcekeybas": 839, "underscor": 839, "came": 839, "logfil": [845, 1048], "cola": 849, "colb": 849, "fraction": 854, "16": 854, "25": [854, 1218], "125": 854, "375": 854, "625": 854, "875": 854, "0625": 854, "1875": 854, "rgbhex": 859, "infil": 860, "rgb256": 861, "rgb1": 862, "rgb": 863, "wikipedia": 864, "wiki": 864, "2_": 864, "2b_1": 864, "4_": 864, "8_": 864, "16_": 864, "2b_": 864, "b7_": 864, "b7": 864, "set_count": [866, 867], "pop_count": [866, 867], "set_siz": [866, 867], "pop_siz": [866, 867], "correction_method": [867, 870], "hommel": [867, 870], "alpha": [867, 870], "05": [867, 870], "behind": [867, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1218], "microtubul": 867, "assembli": 867, "45": 867, "89": 867, "367": 867, "basic_set": 870, "geneset_id": 870, "08": 871, "27": 871, "comm2nod": [871, 880], "comm2edg": [871, 880], "previous": [871, 1086, 1106], "did": [871, 1220], "w": 871, "explain": 871, "partit": 872, "densiti": 872, "adj": [873, 876, 877], "delimit": [874, 875, 880, 1106], "nodetyp": [874, 875], "edgelist": 874, "neighbor": [874, 876, 877], "weighttyp": 875, "float": [875, 962, 966, 969, 990, 1000, 1001, 1003, 1015], "read_edgelist_unweight": 875, "node_i": 875, "node_j": 875, "weight_ij": 875, "newlin": 875, "ij2wij": [875, 877], "w_ij": 875, "decor": 876, "sim": 876, "eij": 876, "eik": 876, "similarities_unweight": 877, "tanimoto": 877, "ni": 877, "nj": 877, "wij": 877, "orig_cid2edg": 879, "linkag": 879, "e2c": 880, "edge2comm": 880, "build_dataset": 883, "compile_t": 883, "quantit": 883, "dataset_depend": 883, "define_dataset": 883, "enz_sub": [883, 1222], "intercel": [883, 1221, 1222], "param": [883, 894, 1031, 1059, 1061, 1086, 1106], "builder": 883, "get_db": 883, "_": [883, 1008], "ensure_dataset": 883, "force_reload": 883, "force_rebuild": 883, "availab": 883, "ensure_dir": 883, "figur": [883, 1217, 1221], "ensure_modul": 883, "foreach_dataset": 883, "get_args_cur": 883, "get_args_lncrna_mrna": 883, "get_args_mirna_mrna": 883, "get_args_small_molecul": 883, "get_args_tf_mirna": 883, "get_args_tf_target": 883, "get_build_arg": 883, "get_param": 883, "load_dataset": 883, "aggreg": 883, "network_df_by_sourc": 883, "pickle_exist": 883, "pickle_path": 883, "reload_modul": 883, "remove_al": 883, "elsewher": 883, "remove_db": 883, "set_network": 883, "table_path": 883, "app": [885, 1219], "from_dict": 889, "dct": [889, 941, 947, 950, 954, 955, 973], "from_json": 889, "class_and_param": 890, "extra_node_attr": 894, "default_vertex_attr_processor": 894, "default_edge_attr_processor": 894, "add_extra_field": 894, "dr": 894, "generic_attr_processor": 894, "proc": 894, "obj": [894, 959, 964, 968, 972, 991, 1026], "wrap": [894, 987, 1010, 1011, 1048], "processor": [894, 1133, 1134, 1219], "Not": [894, 1018, 1019, 1106, 1220], "know": [894, 1035, 1220], "expect": 894, "better": [894, 1109, 1217, 1220, 1221, 1222], "try": [894, 1087, 1097, 1099, 1220], "fail": [894, 1087, 1218, 1220], "typeerror": 894, "get_head": 894, "unique_pair": 894, "_a": 894, "_b": 894, "suffix": [894, 1008], "netrowk": 894, "sources_t": 894, "write_tab": 894, "auxiliari": 896, "prepar": 896, "own": [896, 1218], "less": [897, 1087, 1097, 1099], "flow": [897, 913, 1222], "standalon": [900, 1218], "build_dir": 901, "outfile_interact": 901, "omnipath_webservice_interact": 901, "outfile_enz_sub": 901, "omnipath_webservice_enz_sub": 901, "outfile_complex": 901, "omnipath_webservice_complex": 901, "outfile_annot": 901, "omnipath_webservice_annot": 901, "outfile_intercel": 901, "omnipath_webservice_intercel": 901, "network_dataset": 901, "write_html": [904, 924], "tex": [905, 925], "latex_hdr": [905, 925], "fontsiz": [905, 925], "font": [905, 925], "helveticaneueltstd": [905, 925], "ltcn": [905, 925], "52": [905, 925], "resource_info_path": 909, "runner": [909, 912], "use_package_path": 909, "aim": [909, 1218], "01": [909, 1048], "develop": [909, 1219, 1220], "server": [909, 1218, 1219, 1221, 1222], "02": 909, "inherit": 909, "forc": [909, 1051], "remove_old": 909, "adhesom": 913, "arn": 913, "baccin2019": 913, "ca1": 913, "cellchatdb": 913, "cellink": 913, "celltalkdb": 913, "connectomedb": 913, "death": 913, "guide2pharma": 913, "icellnet": 913, "lrdb": 913, "pdz": 913, "ramilowski2015": 913, "scconnect": 913, "spike": [913, 1222], "talklr": 913, "trip": 913, "dbptm": 914, "depod": 914, "domino": 914, "hprd_p": 914, "iptmnet": 914, "kea": 914, "lmpid": 914, "phelm": 914, "psite": 914, "lack": 914, "alz": 915, "ccmap": [915, 916], "dip": [915, 916], "innatedb": [915, 916], "lit17": 915, "matrixdb": [915, 916], "mppi": [915, 916], "nci_pid": 917, "signalink2": 917, "reaction": [917, 1120, 1222], "minor": [917, 1109], "laudanna_direct": 918, "laudanna_effect": 918, "oreganno_old": 920, "ab": [921, 938], "encode_dist": 921, "encode_prox": 921, "htri": 921, "oreganno": 921, "pazar": 921, "tfregulon": [921, 1222], "license_dir": 929, "No": [931, 1220], "quicker": 935, "cachedir": 936, "ensur": [936, 1025], "lst": [938, 945, 961, 985, 1155], "toadd": [938, 939], "ommit": 938, "necessarili": 938, "preserv": [938, 1017, 1018, 1019, 1020, 1023, 1045, 1046], "uniq_list": [938, 1023], "cd": [938, 1087, 1097, 1099], "ef": 938, "st": 939, "equival": [940, 1048], "cast": [941, 959, 983], "num_method": 942, "max": 942, "concaten": [942, 947], "greater": 942, "merge_dict": 942, "messag": [943, 1035, 1038, 1039, 1048, 1049, 1109, 1217, 1218, 1222], "80": 943, "charact": [943, 1054, 1087, 1097, 1099, 1218], "plu": [943, 965], "indent": 943, "byte": [944, 1031, 1106], "elemenst": 945, "whose": [945, 949], "deep": 946, "usag": [946, 1088, 1109, 1155, 1218], "front": [947, 950, 1048], "expand_tuple_kei": 947, "collaps": 947, "outermost": 947, "toward": [947, 1219], "innermost": 947, "outer": [947, 955], "dict_of_set": [948, 953, 957], "__len__": 948, "d1": [949, 956, 970, 975], "d2": [949, 956, 970, 975], "compar": 949, "comparison": 949, "chop": 950, "dict_of_count": 951, "percentag": 951, "subdict": 952, "leaf": [952, 1067], "simpl": [952, 959, 972, 1118, 1218, 1222], "heurist": 952, "and_or": 959, "AND": [959, 1065, 1106, 1222], "met": 959, "OR": [959, 1065], "meet": 959, "eq": [959, 972], "negat": 959, "foobar": 959, "coerc": 961, "lsit": 961, "Its": 961, "abc": 961, "numpi": [962, 1220], "nan": 962, "alphanumer": [963, 1054], "pypath_no_valu": 964, "loc_dict": 965, "variabl": [965, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1220], "comput": [969, 974, 1000, 1003, 1220], "jaccard": 969, "_from": 970, "join": 970, "tbl": [971, 987, 1009, 1010, 1011, 1016], "colformat": 971, "lineno": [971, 987, 1010], "doc_templ": 971, "booktab": 971, "latex_compil": 971, "latex_execut": 971, "xelatex": 971, "latex_engin": 971, "ordereddict": [971, 1011, 1016, 1166], "titl": [971, 1011, 1016, 1157], "document": [971, 1048, 1219], "against": [972, 1222], "hash": [974, 1086], "by_group": [976, 977, 978, 979, 980, 981, 982, 993, 994, 995, 996, 997, 998, 1021, 1022, 1024], "thing": [976, 980, 993, 996, 1021, 1087, 1218], "don": [980, 1021, 1087, 1097, 1219, 1220, 1222], "stackoverflow": [985, 1031], "3744502": 985, "854988": [985, 1031], "width": [987, 1010, 1011, 1028, 1171, 1193], "tablefmt": [987, 1010, 1171, 1193], "fancy_grid": [987, 1010, 1171, 1193], "pattern": [988, 1217], "miss": [988, 1220], "conveni": [988, 1111, 1219], "angl": 990, "center": 990, "dimension": 990, "space": [990, 1086], "clockwis": 990, "coordin": 990, "rel": 990, "simpson": 1000, "explanatori": 1002, "anyht": 1002, "123": 1002, "hello": 1002, "sorensen": 1003, "dice": 1003, "force_set": 1006, "interchang": [1006, 1007], "hashabl": 1007, "duplic": 1007, "truncat": 1011, "var": [1012, 1013], "val": 1014, "aba": [1017, 1023], "peterb": [1018, 1019], "plog": [1018, 1019], "uniqifi": [1018, 1019], "benchmark": [1018, 1019], "idfun": 1020, "repeat": 1020, "behavior": 1020, "abracadabra": 1020, "els": [1020, 1087], "32": [1020, 1219], "42": 1020, "extens": [1020, 1106], "png": 1020, "txt": 1020, "uppercas": 1025, "word": 1025, "unhash": 1026, "req_head": 1031, "debug": [1031, 1040, 1041, 1046, 1218], "outf": 1031, "compr": [1031, 1032], "files_need": [1031, 1032], "connect_timeout": 1031, "timeout": 1031, "ignore_content_length": 1031, "init_fun": 1031, "get_jsessionid": 1031, "init_use_cach": 1031, "default_mod": [1031, 1032], "override_post": 1031, "init_head": 1031, "return_head": 1031, "compress": [1031, 1032, 1109], "write_cach": [1031, 1086], "force_quot": 1031, "sftp_user": 1031, "sftp_passwd": 1031, "sftp_passwd_fil": 1031, "sftp_port": 1031, "22": [1031, 1033, 1222], "sftp_host": 1031, "sftp_ask": 1031, "setup": [1031, 1043, 1059, 1218, 1220], "cache_dir": 1031, "bypass_url_encod": 1031, "empty_attempt_again": 1031, "keep_fail": 1031, "alpn": 1031, "http2": 1031, "fileopen": [1031, 1109, 1218], "wrapper": [1031, 1051, 1061, 1088, 1106], "pycurl": [1031, 1218, 1220], "amount": 1031, "cooki": 1031, "multipart": 1031, "quot": 1031, "redirect": [1031, 1218], "gzip": [1031, 1032], "tar": [1031, 1032, 1109, 1220], "gz": [1031, 1032, 1109, 1220], "zip": [1031, 1032, 1109], "construct_binary_data": 1031, "is_quot": 1031, "question": [1031, 1219], "1637762": 1031, "open_tgz": [1031, 1032], "set_binary_data": 1031, "transmit": 1031, "url_fix": 1031, "charset": 1031, "utf": [1031, 1032], "121017": 1031, "file_param": 1032, "_open": 1032, "set_fileobj": 1032, "bz2": 1032, "multifil": 1032, "examin": 1032, "host": [1033, 1217, 1221], "port": [1033, 1218], "rownam": 1033, "_global_context_off": [1034, 1036, 1038, 1040, 1042, 1045], "context": [1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1059, 1218], "behaviour": [1034, 1037, 1038, 1042, 1087, 1097, 1099], "scene": [1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046], "cachedel": [1034, 1035], "data_format": [1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1218, 1221], "_global_context_on": [1035, 1037, 1039, 1041, 1043, 1046], "dryrun": [1035, 1042, 1043], "off": [1036, 1051], "cache_on": 1036, "cacheprint": [1038, 1039], "restor": [1040, 1042, 1045, 1059], "cache_debug_off": 1040, "cache_debug_on": 1041, "cache_dryrun_off": 1042, "cache_dryrun_on": 1043, "lastcurl": [1045, 1046], "cache_preserve_off": 1045, "cache_preserve_on": 1046, "console_level": 1048, "logdir": [1048, 1049], "max_width": 1048, "close_logfil": 1048, "msg": [1048, 1051], "flush": [1048, 1218], "get_logdir": 1048, "dirnam": 1048, "label_messag": 1048, "decid": 1048, "open_logfil": 1048, "strftime": 1048, "librari": [1048, 1219], "localtim": 1048, "y": [1048, 1220], "year": 1048, "centuri": 1048, "decim": 1048, "month": 1048, "dai": [1048, 1106], "31": [1048, 1219], "hour": 1048, "24": 1048, "clock": 1048, "00": 1048, "59": 1048, "61": 1048, "z": [1048, 1220], "zone": 1048, "utc": 1048, "weekdai": 1048, "appropri": [1048, 1078, 1109], "am": 1048, "pm": 1048, "platform": [1048, 1219, 1220], "timestamp": 1048, "timestamp_messag": 1048, "directoti": 1049, "lowest": [1049, 1065, 1067], "interv": 1051, "done": [1051, 1220], "init": 1051, "unit": 1051, "had": 1051, "my": 1051, "progressbar": 1051, "great": 1051, "tqdm": 1051, "move": 1051, "oldprogress": 1051, "get_desc": 1051, "someth": 1051, "constant": 1051, "within": [1051, 1059, 1218, 1219, 1220, 1222], "life": 1051, "stage": 1051, "task": 1051, "init_tqdm": 1051, "set_don": 1051, "set_statu": 1051, "set_tot": 1051, "busi": 1051, "desir": 1051, "finish": 1051, "destroi": 1051, "log_verbos": [1054, 1057], "gen_session_id": 1054, "start_logg": 1054, "log": [1055, 1218, 1221], "python": [1058, 1106, 1171, 1193, 1217, 1218, 1221, 1222], "remaind": 1058, "gather": 1058, "yaml": [1058, 1059], "_dict": [1059, 1060, 1062], "temporarili": 1059, "alter": 1059, "At": 1059, "exit": 1059, "get_default": 1059, "reset_al": 1059, "use_pickle_cach": [1065, 1069, 1070], "geneontologi": 1065, "expr_names_to_term": 1065, "expr": 1065, "parenthes": 1065, "logic": 1065, "get_annot_ancestor": 1065, "get_annots_ancestor": 1065, "get_term": [1065, 1067], "has_any_term": 1065, "has_term": 1065, "i_select_by_term": 1065, "return_uniprot": 1065, "select_by_expr": 1065, "select_by_al": 1065, "preced": 1065, "0005576": 1065, "0070062": 1065, "0005887": 1065, "hormon": 1065, "0009897": 1065, "select_by_expr_term": 1065, "select_by_nam": 1065, "select_by_term": 1065, "goannot": 1066, "all_from_aspect": 1067, "aspect_from_nam": 1067, "get_all_ancestor": 1067, "include_se": 1067, "get_all_descend": 1067, "get_aspect": 1067, "is_leaf": 1067, "is_nam": 1067, "is_root": 1067, "root": 1067, "is_term": 1067, "names_to_term": 1067, "names_to_terms_aspect": 1067, "namess": 1067, "set_of": 1067, "terms_nam": 1067, "to_term": 1067, "set_of_nam": 1067, "set_of_term": 1067, "subgraph_nod": 1067, "subgraph": 1067, "terms_to_nam": 1067, "terms_to_names_aspect": 1067, "cleanup_period": [1073, 1087, 1109, 1123], "lifetim": [1073, 1086, 1087, 1088, 1123], "300": [1073, 1086, 1087, 1088, 1123], "get_dict": 1073, "tha": [1073, 1080], "source_id": [1073, 1083], "orthologbas": 1074, "homologu": [1075, 1077], "preload_prot": 1076, "proteinhomologi": 1077, "preload_seq": 1078, "unload": [1081, 1088, 1133, 1134], "namespac": 1082, "popular": 1083, "advis": 1083, "almost": [1083, 1217, 1220, 1221], "product": [1083, 1218], "system": [1085, 1220], "load_a_to_b": 1086, "load_b_to_a": 1086, "mappingt": [1086, 1087], "coupl": [1086, 1106], "much": [1086, 1217, 1221, 1222], "child": 1086, "mandatori": [1086, 1220, 1221, 1222], "identif": 1086, "entrez_protein": 1086, "entrez_mirna": 1086, "preiod": [1086, 1087, 1088], "cleanup": [1086, 1087, 1088], "id_type_sid": 1086, "success": [1086, 1087], "mapping_table_a_to_b": 1086, "mapping_table_b_to_a": 1086, "read_cach": 1086, "read_mapping_arrai": 1086, "read_mapping_biomart": 1086, "biomart": [1086, 1090], "read_mapping_fil": 1086, "read_mapping_unichem": 1086, "unichem": [1086, 1218, 1221], "read_mapping_uniprot": 1086, "programmatic_access": 1086, "read_mapping_uniprot_list": 1086, "set_uniprot_spac": 1086, "setup_cach": 1086, "md5": 1086, "tables_load": 1086, "translate_deleted_uniprot": 1087, "keep_invalid_uniprot": 1087, "trembl_swissprot_by_genesymbol": 1087, "period": 1087, "unus": 1087, "forev": 1087, "obsolet": 1087, "chain_map": 1087, "by_id_typ": 1087, "via_id_typ": 1087, "map_nam": [1087, 1098], "create_revers": 1087, "get_table_kei": 1087, "unambig": [1087, 1088, 1098], "guess_typ": 1087, "tri": [1087, 1092], "has_mapping_t": 1087, "expiri": [1087, 1088], "timer": 1087, "load_genesymbol5": 1087, "load_map": [1087, 1102], "mapread": 1087, "load_uniprot_stat": 1087, "uniprot_cleanup": [1087, 1097, 1098, 1099], "individu": [1087, 1097, 1106], "care": [1087, 1088, 1097, 1218], "ideal": [1087, 1097], "think": [1087, 1097], "how": [1087, 1097, 1220, 1222], "predefin": [1087, 1097, 1218], "couldn": [1087, 1097], "refseqp": [1087, 1097, 1099], "np_": [1087, 1097, 1099], "xp_": [1087, 1097, 1099], "ensp": [1087, 1097, 1099], "enst": [1087, 1097, 1099], "ensg": [1087, 1097, 1099], "genom": [1087, 1097, 1099], "dna": [1087, 1097, 1099], "hgnc": [1087, 1097, 1099], "embl": [1087, 1097, 1099], "ddbj": [1087, 1097, 1099], "genebank": [1087, 1097, 1099], "embl_id": [1087, 1097, 1099], "And": [1087, 1097, 1099, 1220, 1222], "encount": [1087, 1097, 1099, 1220], "map_name0": 1087, "recommend": [1087, 1098, 1219, 1220], "mostli": [1087, 1098], "loss": [1087, 1098], "seamlessli": [1087, 1099], "loader": [1087, 1134], "only_uniprot_ac": 1087, "accession_numb": 1087, "other_organism_uniprot": 1087, "primary_uniprot": 1087, "remove_expir": 1087, "ago": 1087, "remove_kei": 1087, "remove_t": 1087, "reverse_kei": 1087, "reverse_map": 1087, "whenev": [1087, 1222], "translate_deleted_uniprot_by_genesymbol": 1087, "trembl_swissprot": 1087, "callback": 1087, "correct": 1087, "counterpart": [1087, 1222], "valid_uniprot": 1087, "which_tabl": 1087, "get_kei": 1088, "pri": 1090, "sec": 1090, "uploadlist": 1090, "mirbas": 1090, "label_id_typ": [1093, 1094], "get_residu": 1102, "pdb_start": 1103, "pdb_end": 1103, "uniprot_start": 1103, "uniprot_end": 1103, "usernam": 1106, "output_format": 1106, "feel": 1106, "wilhelm": 1106, "v509": 1106, "n7502": 1106, "nature13319": 1106, "descritpion": 1106, "visit": 1106, "admin": 1106, "get_express": 1106, "tissue_averag": 1106, "unnorm": 1106, "disk": 1106, "averag": 1106, "sampl": 1106, "get_piec": 1106, "20480": 1106, "mb": 1106, "curli": 1106, "brace": 1106, "tissue_id": 1106, "calculation_method": 1106, "no_isoform": 1106, "get_tissu": 1106, "pandas_matrix": 1106, "shold": 1106, "tissues_x_protein": 1106, "800": 1109, "file_from_arch": 1109, "easili": [1109, 1218, 1222], "lxml": [1109, 1220], "etre": 1109, "iterpars": 1109, "minim": 1109, "me": [1109, 1220], "thod": 1109, "arbit": 1109, "rari": 1109, "parser": 1109, "id42": 1109, "akt1": 1109, "ffjh2": 1109, "tr9gy": 1109, "sometim": [1109, 1221, 1222], "bp": 1109, "everi": [1109, 1217, 1218, 1220, 1221], "nucleic": 1109, "But": 1109, "mo": 1109, "dific": 1109, "ternal": 1109, "dure": 1109, "risk": 1109, "homo_sapien": 1109, "owl": 1109, "biopax_s": 1109, "uncompress": [1109, 1218], "cleanup_hook": 1109, "close_biopax": 1109, "temporari": 1109, "init_etre": 1109, "open_biopax": 1109, "workflow": [1109, 1217, 1220, 1221], "set_progress": 1109, "entityset": [1110, 1111, 1113, 1116, 1117, 1121], "itermemb": 1111, "reactionsid": 1111, "er": 1112, "ed": 1112, "With": [1113, 1116, 1121, 1219], "protein_id": 1116, "default_id_typ": 1118, "max_complex_combin": 1118, "100": [1118, 1219], "max_reaction_combin": 1118, "gen_cvari": 1118, "in_same_compon": 1118, "merge_complex": 1118, "this_round": 1118, "biopaxread": [1118, 1217, 1221], "subcomplex": 1118, "rcomplex": 1118, "merge_cvari": 1118, "fact": 1118, "variat": 1118, "right": 1119, "left_attr": 1119, "right_attr": 1119, "proteinfamili": 1120, "ref_id": 1121, "is_not": 1123, "iterdb": [1133, 1134], "iterprotein": [1133, 1134], "region": 1135, "canon": [1135, 1157, 1189, 1199, 1214], "findal": 1135, "fragment": 1135, "fasta": 1137, "taxon_id": [1140, 1141, 1142, 1143], "languag": [1143, 1219], "codenam": 1143, "long_nam": 1146, "shorten": [1146, 1147], "dot": 1147, "genu": 1147, "mark": 1147, "taxon_nam": [1148, 1149, 1150, 1151, 1152], "connectivity_search": 1155, "id_list": 1155, "cheminformat": 1155, "metric": 1155, "widesearchinfo": 1155, "inchikey2anyth": 1155, "smiles2chembl": 1155, "uniprot_id": [1157, 1158, 1159, 1160, 1161, 1162, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215], "info_sect": 1157, "availebl": [1157, 1182], "keywords_with_xref": 1157, "capit": [1157, 1199], "dalton": [1157, 1214], "fileobj": [1163, 1181, 1193], "print_featur": 1163, "table_format": 1163, "uniprotprotein": [1166, 1196], "40": 1171, "underli": [1171, 1193], "tabul": [1171, 1193], "versatil": [1171, 1193, 1219, 1221], "well": [1171, 1193, 1219], "astanin": [1171, 1193], "improv": [1217, 1221], "past": [1217, 1221], "pypath": [1217, 1218, 1220, 1221, 1222], "lot": [1217, 1221], "remot": [1217, 1221], "partial": [1217, 1221], "pyreact": [1217, 1221], "rule": [1217, 1221, 1222], "plot": [1217, 1221], "fulli": 1217, "approach": [1217, 1218], "reader": [1217, 1221], "pathogen": [1217, 1221], "eventu": 1217, "fordrugbank": 1217, "warn": 1218, "outdat": 1218, "begin": 1218, "fundament": 1218, "design": 1218, "principl": [1218, 1220], "todai": 1218, "final": 1218, "script": [1218, 1220], "visual": 1218, "rug": 1218, "independ": 1218, "fly": 1218, "domaindomain": 1218, "__eq__": 1218, "__contains__": 1218, "quick": 1218, "atla": [1218, 1222], "proteomicsdb": 1218, "giant": 1218, "alon": [1218, 1219], "enrich": 1218, "highlight": 1218, "biolog": [1218, 1219], "abstract": 1218, "easi": 1218, "action": 1218, "deal": 1218, "smart": 1218, "authent": 1218, "transact": 1218, "stuff": [1218, 1220], "grow": 1218, "place": 1218, "nonsens": 1218, "cache_print_on": 1218, "cache_delete_on": 1218, "cache_off": 1218, "y5jzx": 1218, "pypath_log": 1218, "twist": 1218, "style": [1218, 1221, 1222], "decemb": 1219, "modular": 1219, "januari": 1219, "reorgan": 1219, "clear": 1219, "mileston": 1219, "hope": 1219, "everyon": 1219, "18": 1219, "februari": 1219, "master": 1219, "branch": 1219, "apologi": 1219, "inconveni": 1219, "hesit": 1219, "py2": 1219, "although": 1219, "environ": 1219, "peopl": [1219, 1220], "highli": 1219, "omnipathdb": [1219, 1222], "gmail": 1219, "saez": 1219, "olga": 1219, "ivanova": 1219, "nicol\u00e0": 1219, "palacio": 1219, "d\u00e9ne": 1219, "t\u00fcrei": 1219, "cytoscap": 1219, "maintain": 1219, "francesco": 1219, "ceccarelli": 1219, "attila": [1219, 1222], "g\u00e1bor": 1219, "alberto": 1219, "valdeoliva": 1219, "instal": 1219, "linux": 1219, "cairo": 1219, "pycairo": 1219, "git": 1219, "pip": 1219, "mac": 1219, "o": 1219, "troubleshoot": 1219, "microsoft": 1219, "window": 1219, "anaconda": 1219, "explor": 1219, "74": 1219, "93": 1219, "110": 1219, "upcom": 1219, "biologi": 1219, "omnipathr": [1219, 1222], "bioconductor": 1219, "bel": [1219, 1221], "overal": 1219, "downlad": 1219, "distributor": 1220, "graphviz": 1220, "dist": 1220, "clone": 1220, "repo": 1220, "run": [1220, 1222], "sdist": 1220, "complic": 1220, "didn": 1220, "wheel": 1220, "straightforward": 1220, "brew": 1220, "sh": 1220, "homebrew": 1220, "conda": 1220, "smoothli": 1220, "There": 1220, "third": 1220, "presum": 1220, "xcode": 1220, "consum": 1220, "expertis": 1220, "shell": 1220, "pythonpath": 1220, "echo": 1220, "python2": 1220, "forget": 1220, "statement": 1220, "bash_profil": 1220, "launch": 1220, "pkgconfig": 1220, "pkg_config_path": 1220, "correctli": 1220, "realli": 1220, "waf": 1220, "pygraphviz": 1220, "cgraph": 1220, "global": 1220, "bioservic": 1220, "jurko": 1220, "sud": 1220, "ok": 1220, "setuptool": 1220, "appar": 1220, "exactli": [1220, 1222], "u": [1220, 1222], "appreci": 1220, "problem": 1220, "certainli": 1220, "vgauther": 1220, "osx": 1220, "64": 1220, "richlewi": 1220, "win": 1220, "kristanamstrong": 1220, "command": 1220, "successfulli": 1220, "everywher": 1220, "easiest": 1220, "precompil": 1220, "fisher": 1220, "mkl": 1220, "scipi": 1220, "statsmodel": 1220, "fine": 1220, "resolv": 1220, "fabric": 1220, "pysftp": 1220, "flood": 1220, "sorri": 1220, "fix": [1220, 1221], "traceback": 1220, "el": 1220, "capitan": 1220, "libcurl": 1220, "ssl": 1220, "backend": 1220, "openssl": 1220, "reinstal": 1220, "flag": 1220, "thank": [1220, 1222], "jorg": 1220, "ferreira": 1220, "mysql_connect": 1221, "made": 1221, "python3": 1221, "websrvtab": 1221, "dataio": 1221, "docstr": 1221, "focus": 1221, "rewritten": 1221, "offer": 1221, "workaround": 1221, "despit": 1221, "terribl": 1221, "reflist": 1221, "becam": 1221, "especi": 1221, "june": 1222, "protocol": 1222, "wget": 1222, "whatev": 1222, "recogn": 1222, "webserv": 1222, "pathwayextra": 1222, "optimum": 1222, "kinaseextra": 1222, "ligrecextra": 1222, "mirnatarget": 1222, "interacion": 1222, "rodent": 1222, "omic": 1222, "tfregulons_level": 1222, "smad2": 1222, "phosphonetwork": 1222, "map1lc3b": 1222, "arget": 1222, "source_target": 1222, "atg3": 1222, "atg7": 1222, "atg4b": 1222, "sqstm1": 1222, "map1lc3a": 1222, "map1lc3c": 1222, "q9h0r8": 1222, "gabarap": 1222, "gabarapl2": 1222, "notch1": 1222, "appear": 1222, "fyn": 1222, "ubiquitin": 1222, "ens_sub": 1222, "acetyl": 1222, "phosphosite_noref": 1222, "000": 1222, "mtor": 1222, "p42345": 1222, "varieti": 1222, "hearth": 1222, "muscl": 1222, "dozen": 1222, "record_id": 1222, "tidyr": 1222, "dplyr": 1222, "bmp7": 1222, "hpa_tissu": 1222, "class_typ": 1222, "sub": 1222, "besid": 1222, "ligand_ramilowski": 1222, "ligand_cellphonedb": 1222, "ulk1": 1222, "atg4a": 1222, "bmp8b": 1222, "intuit": 1222, "though": 1222, "repli": 1222, "colleagu": 1222, "gabor": 1222}, "objects": {"": [[0, 0, 0, "-", "pypath"]], "pypath": [[1, 0, 0, "-", "core"], [150, 0, 0, "-", "data"], [151, 3, 1, "", "disclaimer"], [152, 3, 1, "", "info"], [153, 0, 0, "-", "inputs"], [796, 0, 0, "-", "internals"], [841, 0, 0, "-", "legacy"], [845, 3, 1, "", "log"], [846, 0, 0, "-", "obsolete"], [881, 0, 0, "-", "omnipath"], [907, 0, 0, "-", "resources"], [933, 0, 0, "-", "share"], [1063, 0, 0, "-", "utils"], [1216, 0, 0, "-", "visual"]], "pypath.core": [[2, 0, 0, "-", "annot"], [95, 0, 0, "-", "attrs"], [97, 0, 0, "-", "common"], [99, 0, 0, "-", "complex"], [121, 0, 0, "-", "entity"], [125, 0, 0, "-", "enz_sub"], [131, 0, 0, "-", "evidence"], [134, 0, 0, "-", "interaction"], [138, 0, 0, "-", "intercell"], [142, 0, 0, "-", "intercell_annot"], [144, 0, 0, "-", "network"]], "pypath.core.annot": [[3, 1, 1, "", "Adhesome"], [4, 1, 1, "", "Almen2009"], [5, 1, 1, "", "AnnotationBase"], [6, 1, 1, "", "AnnotationTable"], [7, 1, 1, "", "Baccin2019"], [8, 1, 1, "", "Biogps"], [9, 1, 1, "", "CancerGeneCensus"], [10, 1, 1, "", "Cancerdrugsdb"], [11, 1, 1, "", "Cancersea"], [12, 1, 1, "", "CellPhoneDB"], [13, 1, 1, "", "CellPhoneDBComplex"], [14, 1, 1, "", "CellSurfaceProteinAtlas"], [15, 1, 1, "", "CellSurfaceProteinAtlasCellType"], [16, 1, 1, "", "Cellcall"], [17, 1, 1, "", "Cellcellinteractions"], [18, 1, 1, "", "Cellchatdb"], [19, 1, 1, "", "CellchatdbComplex"], [20, 1, 1, "", "Cellinker"], [21, 1, 1, "", "CellinkerComplex"], [22, 1, 1, "", "Celltalkdb"], [23, 1, 1, "", "Celltypist"], [24, 1, 1, "", "Comppi"], [25, 1, 1, "", "Connectomedb"], [26, 1, 1, "", "Corum"], [27, 1, 1, "", "CorumFuncat"], [28, 1, 1, "", "CorumGO"], [29, 1, 1, "", "Cpad"], [30, 1, 1, "", "CustomAnnotation"], [31, 1, 1, "", "Cytosig"], [32, 1, 1, "", "Dgidb"], [33, 1, 1, "", "Disgenet"], [34, 1, 1, "", "Embrace"], [35, 1, 1, "", "Exocarta"], [36, 1, 1, "", "GOCustomIntercell"], [37, 1, 1, "", "GOIntercell"], [38, 1, 1, "", "Gpcrdb"], [39, 1, 1, "", "GuideToPharmacology"], [40, 1, 1, "", "HPO"], [41, 1, 1, "", "Hgnc"], [42, 1, 1, "", "HpmrComplex"], [43, 1, 1, "", "HumanPlasmaMembraneReceptome"], [44, 1, 1, "", "HumanProteinAtlas"], [45, 1, 1, "", "HumanProteinAtlasSecretome"], [46, 1, 1, "", "HumanProteinAtlasSubcellular"], [47, 1, 1, "", "Humancellmap"], [48, 1, 1, "", "Icellnet"], [49, 1, 1, "", "IcellnetComplex"], [50, 1, 1, "", "Integrins"], [51, 1, 1, "", "InterPro"], [52, 1, 1, "", "Intogen"], [53, 1, 1, "", "Italk"], [54, 1, 1, "", "KeggPathways"], [55, 1, 1, "", "KeggPathwaysPC"], [56, 1, 1, "", "Kinasedotcom"], [57, 1, 1, "", "Kirouac2010"], [58, 1, 1, "", "Lambert2018"], [59, 1, 1, "", "LigandReceptor"], [60, 1, 1, "", "Locate"], [61, 1, 1, "", "Lrdb"], [62, 1, 1, "", "Matrisome"], [63, 1, 1, "", "Matrixdb"], [64, 1, 1, "", "Mcam"], [65, 1, 1, "", "Membranome"], [66, 1, 1, "", "Msigdb"], [67, 1, 1, "", "NetpathPathways"], [68, 1, 1, "", "Opm"], [69, 1, 1, "", "Panglaodb"], [70, 1, 1, "", "Phobius"], [71, 1, 1, "", "Phosphatome"], [72, 1, 1, "", "Progeny"], [73, 1, 1, "", "Ramilowski2015"], [74, 1, 1, "", "Ramilowski2015Location"], [75, 1, 1, "", "Scconnect"], [76, 1, 1, "", "ScconnectComplex"], [77, 1, 1, "", "SignalinkFunctions"], [78, 1, 1, "", "SignalinkPathways"], [79, 1, 1, "", "SignorPathways"], [80, 1, 1, "", "Surfaceome"], [81, 1, 1, "", "Talklr"], [82, 1, 1, "", "Tcdb"], [83, 1, 1, "", "Tfcensus"], [84, 1, 1, "", "Topdb"], [85, 1, 1, "", "UniprotFamilies"], [86, 1, 1, "", "UniprotKeywords"], [87, 1, 1, "", "UniprotLocations"], [88, 1, 1, "", "UniprotTissues"], [89, 1, 1, "", "UniprotTopologies"], [90, 1, 1, "", "Vesiclepedia"], [91, 1, 1, "", "Wang"], [92, 1, 1, "", "Zhong2015"], [93, 3, 1, "", "get_db"], [94, 3, 1, "", "init_db"]], "pypath.core.annot.Adhesome": [[3, 2, 1, "", "__init__"], [3, 2, 1, "", "add_complexes_by_inference"], [3, 2, 1, "", "all_complexes"], [3, 2, 1, "", "all_entities"], [3, 2, 1, "", "all_mirnas"], [3, 2, 1, "", "all_proteins"], [3, 2, 1, "", "all_refs"], [3, 2, 1, "", "annotate_complex"], [3, 2, 1, "", "browse"], [3, 2, 1, "", "complex_inference"], [3, 2, 1, "", "coverage"], [3, 2, 1, "", "curation_effort"], [3, 2, 1, "", "get_names"], [3, 2, 1, "", "get_reference_set"], [3, 2, 1, "", "get_subset"], [3, 2, 1, "", "get_subset_bool_array"], [3, 2, 1, "", "get_values"], [3, 2, 1, "", "labels"], [3, 2, 1, "", "load"], [3, 2, 1, "", "load_data"], [3, 2, 1, "", "load_proteins"], [3, 2, 1, "", "make_df"], [3, 2, 1, "", "numof_entities"], [3, 2, 1, "", "numof_records"], [3, 2, 1, "", "numof_references"], [3, 2, 1, "", "process"], [3, 2, 1, "", "reload"], [3, 2, 1, "", "select"], [3, 2, 1, "", "set_method"], [3, 2, 1, "", "set_reference_set"], [3, 2, 1, "", "show"], [3, 2, 1, "", "subset_intersection"], [3, 2, 1, "", "to_array"], [3, 2, 1, "", "to_bool_array"], [3, 2, 1, "", "to_set"]], "pypath.core.annot.Almen2009": [[4, 2, 1, "", "__init__"], [4, 2, 1, "", "add_complexes_by_inference"], [4, 2, 1, "", "all_complexes"], [4, 2, 1, "", "all_entities"], [4, 2, 1, "", "all_mirnas"], [4, 2, 1, "", "all_proteins"], [4, 2, 1, "", "all_refs"], [4, 2, 1, "", "annotate_complex"], [4, 2, 1, "", "browse"], [4, 2, 1, "", "complex_inference"], [4, 2, 1, "", "coverage"], [4, 2, 1, "", "curation_effort"], [4, 2, 1, "", "get_names"], [4, 2, 1, "", "get_reference_set"], [4, 2, 1, "", "get_subset"], [4, 2, 1, "", "get_subset_bool_array"], [4, 2, 1, "", "get_values"], [4, 2, 1, "", "labels"], [4, 2, 1, "", "load"], [4, 2, 1, "", "load_data"], [4, 2, 1, "", "load_proteins"], [4, 2, 1, "", "make_df"], [4, 2, 1, "", "numof_entities"], [4, 2, 1, "", "numof_records"], [4, 2, 1, "", "numof_references"], [4, 2, 1, "", "process"], [4, 2, 1, "", "reload"], [4, 2, 1, "", "select"], [4, 2, 1, "", "set_method"], [4, 2, 1, "", "set_reference_set"], [4, 2, 1, "", "show"], [4, 2, 1, "", "subset_intersection"], [4, 2, 1, "", "to_array"], [4, 2, 1, "", "to_bool_array"], [4, 2, 1, "", "to_set"]], "pypath.core.annot.AnnotationBase": [[5, 2, 1, "", "__init__"], [5, 2, 1, "", "add_complexes_by_inference"], [5, 2, 1, "", "all_complexes"], [5, 2, 1, "", "all_entities"], [5, 2, 1, "", "all_mirnas"], [5, 2, 1, "", "all_proteins"], [5, 2, 1, "", "all_refs"], [5, 2, 1, "", "annotate_complex"], [5, 2, 1, "", "browse"], [5, 2, 1, "", "complex_inference"], [5, 2, 1, "", "coverage"], [5, 2, 1, "", "curation_effort"], [5, 2, 1, "", "get_names"], [5, 2, 1, "", "get_reference_set"], [5, 2, 1, "", "get_subset"], [5, 2, 1, "", "get_subset_bool_array"], [5, 2, 1, "", "get_values"], [5, 2, 1, "", "labels"], [5, 2, 1, "", "load"], [5, 2, 1, "", "load_data"], [5, 2, 1, "", "load_proteins"], [5, 2, 1, "", "make_df"], [5, 2, 1, "", "numof_entities"], [5, 2, 1, "", "numof_records"], [5, 2, 1, "", "numof_references"], [5, 2, 1, "", "process"], [5, 2, 1, "", "reload"], [5, 2, 1, "", "select"], [5, 2, 1, "", "set_method"], [5, 2, 1, "", "set_reference_set"], [5, 2, 1, "", "show"], [5, 2, 1, "", "subset_intersection"], [5, 2, 1, "", "to_array"], [5, 2, 1, "", "to_bool_array"], [5, 2, 1, "", "to_set"]], "pypath.core.annot.AnnotationTable": [[6, 2, 1, "", "__init__"], [6, 2, 1, "", "all_annotations"], [6, 2, 1, "", "all_annotations_str"], [6, 2, 1, "", "reload"], [6, 2, 1, "", "search"]], "pypath.core.annot.Baccin2019": [[7, 2, 1, "", "__init__"], [7, 2, 1, "", "add_complexes_by_inference"], [7, 2, 1, "", "all_complexes"], [7, 2, 1, "", "all_entities"], [7, 2, 1, "", "all_mirnas"], [7, 2, 1, "", "all_proteins"], [7, 2, 1, "", "all_refs"], [7, 2, 1, "", "annotate_complex"], [7, 2, 1, "", "browse"], [7, 2, 1, "", "complex_inference"], [7, 2, 1, "", "coverage"], [7, 2, 1, "", "curation_effort"], [7, 2, 1, "", "get_names"], [7, 2, 1, "", "get_reference_set"], [7, 2, 1, "", "get_subset"], [7, 2, 1, "", "get_subset_bool_array"], [7, 2, 1, "", "get_values"], [7, 2, 1, "", "labels"], [7, 2, 1, "", "load"], [7, 2, 1, "", "load_data"], [7, 2, 1, "", "load_proteins"], [7, 2, 1, "", "make_df"], [7, 2, 1, "", "numof_entities"], [7, 2, 1, "", "numof_records"], [7, 2, 1, "", "numof_references"], [7, 2, 1, "", "process"], [7, 2, 1, "", "reload"], [7, 2, 1, "", "select"], [7, 2, 1, "", "set_method"], [7, 2, 1, "", "set_reference_set"], [7, 2, 1, "", "show"], [7, 2, 1, "", "subset_intersection"], [7, 2, 1, "", "to_array"], [7, 2, 1, "", "to_bool_array"], [7, 2, 1, "", "to_set"]], "pypath.core.annot.Biogps": [[8, 2, 1, "", "__init__"], [8, 2, 1, "", "add_complexes_by_inference"], [8, 2, 1, "", "all_complexes"], [8, 2, 1, "", "all_entities"], [8, 2, 1, "", "all_mirnas"], [8, 2, 1, "", "all_proteins"], [8, 2, 1, "", "all_refs"], [8, 2, 1, "", "annotate_complex"], [8, 2, 1, "", "browse"], [8, 2, 1, "", "complex_inference"], [8, 2, 1, "", "coverage"], [8, 2, 1, "", "curation_effort"], [8, 2, 1, "", "get_names"], [8, 2, 1, "", "get_reference_set"], [8, 2, 1, "", "get_subset"], [8, 2, 1, "", "get_subset_bool_array"], [8, 2, 1, "", "get_values"], [8, 2, 1, "", "labels"], [8, 2, 1, "", "load"], [8, 2, 1, "", "load_data"], [8, 2, 1, "", "load_proteins"], [8, 2, 1, "", "make_df"], [8, 2, 1, "", "numof_entities"], [8, 2, 1, "", "numof_records"], [8, 2, 1, "", "numof_references"], [8, 2, 1, "", "process"], [8, 2, 1, "", "reload"], [8, 2, 1, "", "select"], [8, 2, 1, "", "set_method"], [8, 2, 1, "", "set_reference_set"], [8, 2, 1, "", "show"], [8, 2, 1, "", "subset_intersection"], [8, 2, 1, "", "to_array"], [8, 2, 1, "", "to_bool_array"], [8, 2, 1, "", "to_set"]], "pypath.core.annot.CancerGeneCensus": [[9, 2, 1, "", "__init__"], [9, 2, 1, "", "add_complexes_by_inference"], [9, 2, 1, "", "all_complexes"], [9, 2, 1, "", "all_entities"], [9, 2, 1, "", "all_mirnas"], [9, 2, 1, "", "all_proteins"], [9, 2, 1, "", "all_refs"], [9, 2, 1, "", "annotate_complex"], [9, 2, 1, "", "browse"], [9, 2, 1, "", "complex_inference"], [9, 2, 1, "", "coverage"], [9, 2, 1, "", "curation_effort"], [9, 2, 1, "", "get_names"], [9, 2, 1, "", "get_reference_set"], [9, 2, 1, "", "get_subset"], [9, 2, 1, "", "get_subset_bool_array"], [9, 2, 1, "", "get_values"], [9, 2, 1, "", "labels"], [9, 2, 1, "", "load"], [9, 2, 1, "", "load_data"], [9, 2, 1, "", "load_proteins"], [9, 2, 1, "", "make_df"], [9, 2, 1, "", "numof_entities"], [9, 2, 1, "", "numof_records"], [9, 2, 1, "", "numof_references"], [9, 2, 1, "", "process"], [9, 2, 1, "", "reload"], [9, 2, 1, "", "select"], [9, 2, 1, "", "set_method"], [9, 2, 1, "", "set_reference_set"], [9, 2, 1, "", "show"], [9, 2, 1, "", "subset_intersection"], [9, 2, 1, "", "to_array"], [9, 2, 1, "", "to_bool_array"], [9, 2, 1, "", "to_set"]], "pypath.core.annot.Cancerdrugsdb": [[10, 2, 1, "", "__init__"], [10, 2, 1, "", "add_complexes_by_inference"], [10, 2, 1, "", "all_complexes"], [10, 2, 1, "", "all_entities"], [10, 2, 1, "", "all_mirnas"], [10, 2, 1, "", "all_proteins"], [10, 2, 1, "", "all_refs"], [10, 2, 1, "", "annotate_complex"], [10, 2, 1, "", "browse"], [10, 2, 1, "", "complex_inference"], [10, 2, 1, "", "coverage"], [10, 2, 1, "", "curation_effort"], [10, 2, 1, "", "get_names"], [10, 2, 1, "", "get_reference_set"], [10, 2, 1, "", "get_subset"], [10, 2, 1, "", "get_subset_bool_array"], [10, 2, 1, "", "get_values"], [10, 2, 1, "", "labels"], [10, 2, 1, "", "load"], [10, 2, 1, "", "load_data"], [10, 2, 1, "", "load_proteins"], [10, 2, 1, "", "make_df"], [10, 2, 1, "", "numof_entities"], [10, 2, 1, "", "numof_records"], [10, 2, 1, "", "numof_references"], [10, 2, 1, "", "process"], [10, 2, 1, "", "reload"], [10, 2, 1, "", "select"], [10, 2, 1, "", "set_method"], [10, 2, 1, "", "set_reference_set"], [10, 2, 1, "", "show"], [10, 2, 1, "", "subset_intersection"], [10, 2, 1, "", "to_array"], [10, 2, 1, "", "to_bool_array"], [10, 2, 1, "", "to_set"]], "pypath.core.annot.Cancersea": [[11, 2, 1, "", "__init__"], [11, 2, 1, "", "add_complexes_by_inference"], [11, 2, 1, "", "all_complexes"], [11, 2, 1, "", "all_entities"], [11, 2, 1, "", "all_mirnas"], [11, 2, 1, "", "all_proteins"], [11, 2, 1, "", "all_refs"], [11, 2, 1, "", "annotate_complex"], [11, 2, 1, "", "browse"], [11, 2, 1, "", "complex_inference"], [11, 2, 1, "", "coverage"], [11, 2, 1, "", "curation_effort"], [11, 2, 1, "", "get_names"], [11, 2, 1, "", "get_reference_set"], [11, 2, 1, "", "get_subset"], [11, 2, 1, "", "get_subset_bool_array"], [11, 2, 1, "", "get_values"], [11, 2, 1, "", "labels"], [11, 2, 1, "", "load"], [11, 2, 1, "", "load_data"], [11, 2, 1, "", "load_proteins"], [11, 2, 1, "", "make_df"], [11, 2, 1, "", "numof_entities"], [11, 2, 1, "", "numof_records"], [11, 2, 1, "", "numof_references"], [11, 2, 1, "", "process"], [11, 2, 1, "", "reload"], [11, 2, 1, "", "select"], [11, 2, 1, "", "set_method"], [11, 2, 1, "", "set_reference_set"], [11, 2, 1, "", "show"], [11, 2, 1, "", "subset_intersection"], [11, 2, 1, "", "to_array"], [11, 2, 1, "", "to_bool_array"], [11, 2, 1, "", "to_set"]], "pypath.core.annot.CellPhoneDB": [[12, 2, 1, "", "__init__"], [12, 2, 1, "", "add_complexes_by_inference"], [12, 2, 1, "", "all_complexes"], [12, 2, 1, "", "all_entities"], [12, 2, 1, "", "all_mirnas"], [12, 2, 1, "", "all_proteins"], [12, 2, 1, "", "all_refs"], [12, 2, 1, "", "annotate_complex"], [12, 2, 1, "", "browse"], [12, 2, 1, "", "complex_inference"], [12, 2, 1, "", "coverage"], [12, 2, 1, "", "curation_effort"], [12, 2, 1, "", "get_names"], [12, 2, 1, "", "get_reference_set"], [12, 2, 1, "", "get_subset"], [12, 2, 1, "", "get_subset_bool_array"], [12, 2, 1, "", "get_values"], [12, 2, 1, "", "labels"], [12, 2, 1, "", "load"], [12, 2, 1, "", "load_data"], [12, 2, 1, "", "load_proteins"], [12, 2, 1, "", "make_df"], [12, 2, 1, "", "numof_entities"], [12, 2, 1, "", "numof_records"], [12, 2, 1, "", "numof_references"], [12, 2, 1, "", "process"], [12, 2, 1, "", "reload"], [12, 2, 1, "", "select"], [12, 2, 1, "", "set_method"], [12, 2, 1, "", "set_reference_set"], [12, 2, 1, "", "show"], [12, 2, 1, "", "subset_intersection"], [12, 2, 1, "", "to_array"], [12, 2, 1, "", "to_bool_array"], [12, 2, 1, "", "to_set"]], "pypath.core.annot.CellPhoneDBComplex": [[13, 2, 1, "", "__init__"], [13, 2, 1, "", "add_complexes_by_inference"], [13, 2, 1, "", "all_complexes"], [13, 2, 1, "", "all_entities"], [13, 2, 1, "", "all_mirnas"], [13, 2, 1, "", "all_proteins"], [13, 2, 1, "", "all_refs"], [13, 2, 1, "", "annotate_complex"], [13, 2, 1, "", "browse"], [13, 2, 1, "", "complex_inference"], [13, 2, 1, "", "coverage"], [13, 2, 1, "", "curation_effort"], [13, 2, 1, "", "get_names"], [13, 2, 1, "", "get_reference_set"], [13, 2, 1, "", "get_subset"], [13, 2, 1, "", "get_subset_bool_array"], [13, 2, 1, "", "get_values"], [13, 2, 1, "", "labels"], [13, 2, 1, "", "load"], [13, 2, 1, "", "load_data"], [13, 2, 1, "", "load_proteins"], [13, 2, 1, "", "make_df"], [13, 2, 1, "", "numof_entities"], [13, 2, 1, "", "numof_records"], [13, 2, 1, "", "numof_references"], [13, 2, 1, "", "process"], [13, 2, 1, "", "reload"], [13, 2, 1, "", "select"], [13, 2, 1, "", "set_method"], [13, 2, 1, "", "set_reference_set"], [13, 2, 1, "", "show"], [13, 2, 1, "", "subset_intersection"], [13, 2, 1, "", "to_array"], [13, 2, 1, "", "to_bool_array"], [13, 2, 1, "", "to_set"]], "pypath.core.annot.CellSurfaceProteinAtlas": [[14, 2, 1, "", "__init__"], [14, 2, 1, "", "add_complexes_by_inference"], [14, 2, 1, "", "all_complexes"], [14, 2, 1, "", "all_entities"], [14, 2, 1, "", "all_mirnas"], [14, 2, 1, "", "all_proteins"], [14, 2, 1, "", "all_refs"], [14, 2, 1, "", "annotate_complex"], [14, 2, 1, "", "browse"], [14, 2, 1, "", "complex_inference"], [14, 2, 1, "", "coverage"], [14, 2, 1, "", "curation_effort"], [14, 2, 1, "", "get_names"], [14, 2, 1, "", "get_reference_set"], [14, 2, 1, "", "get_subset"], [14, 2, 1, "", "get_subset_bool_array"], [14, 2, 1, "", "get_values"], [14, 2, 1, "", "labels"], [14, 2, 1, "", "load"], [14, 2, 1, "", "load_data"], [14, 2, 1, "", "load_proteins"], [14, 2, 1, "", "make_df"], [14, 2, 1, "", "numof_entities"], [14, 2, 1, "", "numof_records"], [14, 2, 1, "", "numof_references"], [14, 2, 1, "", "process"], [14, 2, 1, "", "reload"], [14, 2, 1, "", "select"], [14, 2, 1, "", "set_method"], [14, 2, 1, "", "set_reference_set"], [14, 2, 1, "", "show"], [14, 2, 1, "", "subset_intersection"], [14, 2, 1, "", "to_array"], [14, 2, 1, "", "to_bool_array"], [14, 2, 1, "", "to_set"]], "pypath.core.annot.CellSurfaceProteinAtlasCellType": [[15, 2, 1, "", "__init__"], [15, 2, 1, "", "add_complexes_by_inference"], [15, 2, 1, "", "all_complexes"], [15, 2, 1, "", "all_entities"], [15, 2, 1, "", "all_mirnas"], [15, 2, 1, "", "all_proteins"], [15, 2, 1, "", "all_refs"], [15, 2, 1, "", "annotate_complex"], [15, 2, 1, "", "browse"], [15, 2, 1, "", "complex_inference"], [15, 2, 1, "", "coverage"], [15, 2, 1, "", "curation_effort"], [15, 2, 1, "", "get_names"], [15, 2, 1, "", "get_reference_set"], [15, 2, 1, "", "get_subset"], [15, 2, 1, "", "get_subset_bool_array"], [15, 2, 1, "", "get_values"], [15, 2, 1, "", "labels"], [15, 2, 1, "", "load"], [15, 2, 1, "", "load_data"], [15, 2, 1, "", "load_proteins"], [15, 2, 1, "", "make_df"], [15, 2, 1, "", "numof_entities"], [15, 2, 1, "", "numof_records"], [15, 2, 1, "", "numof_references"], [15, 2, 1, "", "process"], [15, 2, 1, "", "reload"], [15, 2, 1, "", "select"], [15, 2, 1, "", "set_method"], [15, 2, 1, "", "set_reference_set"], [15, 2, 1, "", "show"], [15, 2, 1, "", "subset_intersection"], [15, 2, 1, "", "to_array"], [15, 2, 1, "", "to_bool_array"], [15, 2, 1, "", "to_set"]], "pypath.core.annot.Cellcall": [[16, 2, 1, "", "__init__"], [16, 2, 1, "", "add_complexes_by_inference"], [16, 2, 1, "", "all_complexes"], [16, 2, 1, "", "all_entities"], [16, 2, 1, "", "all_mirnas"], [16, 2, 1, "", "all_proteins"], [16, 2, 1, "", "all_refs"], [16, 2, 1, "", "annotate_complex"], [16, 2, 1, "", "browse"], [16, 2, 1, "", "complex_inference"], [16, 2, 1, "", "coverage"], [16, 2, 1, "", "curation_effort"], [16, 2, 1, "", "get_names"], [16, 2, 1, "", "get_reference_set"], [16, 2, 1, "", "get_subset"], [16, 2, 1, "", "get_subset_bool_array"], [16, 2, 1, "", "get_values"], [16, 2, 1, "", "labels"], [16, 2, 1, "", "load"], [16, 2, 1, "", "load_data"], [16, 2, 1, "", "load_proteins"], [16, 2, 1, "", "make_df"], [16, 2, 1, "", "numof_entities"], [16, 2, 1, "", "numof_records"], [16, 2, 1, "", "numof_references"], [16, 2, 1, "", "process"], [16, 2, 1, "", "reload"], [16, 2, 1, "", "select"], [16, 2, 1, "", "set_method"], [16, 2, 1, "", "set_reference_set"], [16, 2, 1, "", "show"], [16, 2, 1, "", "subset_intersection"], [16, 2, 1, "", "to_array"], [16, 2, 1, "", "to_bool_array"], [16, 2, 1, "", "to_set"]], "pypath.core.annot.Cellcellinteractions": [[17, 2, 1, "", "__init__"], [17, 2, 1, "", "add_complexes_by_inference"], [17, 2, 1, "", "all_complexes"], [17, 2, 1, "", "all_entities"], [17, 2, 1, "", "all_mirnas"], [17, 2, 1, "", "all_proteins"], [17, 2, 1, "", "all_refs"], [17, 2, 1, "", "annotate_complex"], [17, 2, 1, "", "browse"], [17, 2, 1, "", "complex_inference"], [17, 2, 1, "", "coverage"], [17, 2, 1, "", "curation_effort"], [17, 2, 1, "", "get_names"], [17, 2, 1, "", "get_reference_set"], [17, 2, 1, "", "get_subset"], [17, 2, 1, "", "get_subset_bool_array"], [17, 2, 1, "", "get_values"], [17, 2, 1, "", "labels"], [17, 2, 1, "", "load"], [17, 2, 1, "", "load_data"], [17, 2, 1, "", "load_proteins"], [17, 2, 1, "", "make_df"], [17, 2, 1, "", "numof_entities"], [17, 2, 1, "", "numof_records"], [17, 2, 1, "", "numof_references"], [17, 2, 1, "", "process"], [17, 2, 1, "", "reload"], [17, 2, 1, "", "select"], [17, 2, 1, "", "set_method"], [17, 2, 1, "", "set_reference_set"], [17, 2, 1, "", "show"], [17, 2, 1, "", "subset_intersection"], [17, 2, 1, "", "to_array"], [17, 2, 1, "", "to_bool_array"], [17, 2, 1, "", "to_set"]], "pypath.core.annot.Cellchatdb": [[18, 2, 1, "", "__init__"], [18, 2, 1, "", "add_complexes_by_inference"], [18, 2, 1, "", "all_complexes"], [18, 2, 1, "", "all_entities"], [18, 2, 1, "", "all_mirnas"], [18, 2, 1, "", "all_proteins"], [18, 2, 1, "", "all_refs"], [18, 2, 1, "", "annotate_complex"], [18, 2, 1, "", "browse"], [18, 2, 1, "", "complex_inference"], [18, 2, 1, "", "coverage"], [18, 2, 1, "", "curation_effort"], [18, 2, 1, "", "get_names"], [18, 2, 1, "", "get_reference_set"], [18, 2, 1, "", "get_subset"], [18, 2, 1, "", "get_subset_bool_array"], [18, 2, 1, "", "get_values"], [18, 2, 1, "", "labels"], [18, 2, 1, "", "load"], [18, 2, 1, "", "load_data"], [18, 2, 1, "", "load_proteins"], [18, 2, 1, "", "make_df"], [18, 2, 1, "", "numof_entities"], [18, 2, 1, "", "numof_records"], [18, 2, 1, "", "numof_references"], [18, 2, 1, "", "process"], [18, 2, 1, "", "reload"], [18, 2, 1, "", "select"], [18, 2, 1, "", "set_method"], [18, 2, 1, "", "set_reference_set"], [18, 2, 1, "", "show"], [18, 2, 1, "", "subset_intersection"], [18, 2, 1, "", "to_array"], [18, 2, 1, "", "to_bool_array"], [18, 2, 1, "", "to_set"]], "pypath.core.annot.CellchatdbComplex": [[19, 2, 1, "", "__init__"], [19, 2, 1, "", "add_complexes_by_inference"], [19, 2, 1, "", "all_complexes"], [19, 2, 1, "", "all_entities"], [19, 2, 1, "", "all_mirnas"], [19, 2, 1, "", "all_proteins"], [19, 2, 1, "", "all_refs"], [19, 2, 1, "", "annotate_complex"], [19, 2, 1, "", "browse"], [19, 2, 1, "", "complex_inference"], [19, 2, 1, "", "coverage"], [19, 2, 1, "", "curation_effort"], [19, 2, 1, "", "get_names"], [19, 2, 1, "", "get_reference_set"], [19, 2, 1, "", "get_subset"], [19, 2, 1, "", "get_subset_bool_array"], [19, 2, 1, "", "get_values"], [19, 2, 1, "", "labels"], [19, 2, 1, "", "load"], [19, 2, 1, "", "load_data"], [19, 2, 1, "", "load_proteins"], [19, 2, 1, "", "make_df"], [19, 2, 1, "", "numof_entities"], [19, 2, 1, "", "numof_records"], [19, 2, 1, "", "numof_references"], [19, 2, 1, "", "process"], [19, 2, 1, "", "reload"], [19, 2, 1, "", "select"], [19, 2, 1, "", "set_method"], [19, 2, 1, "", "set_reference_set"], [19, 2, 1, "", "show"], [19, 2, 1, "", "subset_intersection"], [19, 2, 1, "", "to_array"], [19, 2, 1, "", "to_bool_array"], [19, 2, 1, "", "to_set"]], "pypath.core.annot.Cellinker": [[20, 2, 1, "", "__init__"], [20, 2, 1, "", "add_complexes_by_inference"], [20, 2, 1, "", "all_complexes"], [20, 2, 1, "", "all_entities"], [20, 2, 1, "", "all_mirnas"], [20, 2, 1, "", "all_proteins"], [20, 2, 1, "", "all_refs"], [20, 2, 1, "", "annotate_complex"], [20, 2, 1, "", "browse"], [20, 2, 1, "", "complex_inference"], [20, 2, 1, "", "coverage"], [20, 2, 1, "", "curation_effort"], [20, 2, 1, "", "get_names"], [20, 2, 1, "", "get_reference_set"], [20, 2, 1, "", "get_subset"], [20, 2, 1, "", "get_subset_bool_array"], [20, 2, 1, "", "get_values"], [20, 2, 1, "", "labels"], [20, 2, 1, "", "load"], [20, 2, 1, "", "load_data"], [20, 2, 1, "", "load_proteins"], [20, 2, 1, "", "make_df"], [20, 2, 1, "", "numof_entities"], [20, 2, 1, "", "numof_records"], [20, 2, 1, "", "numof_references"], [20, 2, 1, "", "process"], [20, 2, 1, "", "reload"], [20, 2, 1, "", "select"], [20, 2, 1, "", "set_method"], [20, 2, 1, "", "set_reference_set"], [20, 2, 1, "", "show"], [20, 2, 1, "", "subset_intersection"], [20, 2, 1, "", "to_array"], [20, 2, 1, "", "to_bool_array"], [20, 2, 1, "", "to_set"]], "pypath.core.annot.CellinkerComplex": [[21, 2, 1, "", "__init__"], [21, 2, 1, "", "add_complexes_by_inference"], [21, 2, 1, "", "all_complexes"], [21, 2, 1, "", "all_entities"], [21, 2, 1, "", "all_mirnas"], [21, 2, 1, "", "all_proteins"], [21, 2, 1, "", "all_refs"], [21, 2, 1, "", "annotate_complex"], [21, 2, 1, "", "browse"], [21, 2, 1, "", "complex_inference"], [21, 2, 1, "", "coverage"], [21, 2, 1, "", "curation_effort"], [21, 2, 1, "", "get_names"], [21, 2, 1, "", "get_reference_set"], [21, 2, 1, "", "get_subset"], [21, 2, 1, "", "get_subset_bool_array"], [21, 2, 1, "", "get_values"], [21, 2, 1, "", "labels"], [21, 2, 1, "", "load"], [21, 2, 1, "", "load_data"], [21, 2, 1, "", "load_proteins"], [21, 2, 1, "", "make_df"], [21, 2, 1, "", "numof_entities"], [21, 2, 1, "", "numof_records"], [21, 2, 1, "", "numof_references"], [21, 2, 1, "", "process"], [21, 2, 1, "", "reload"], [21, 2, 1, "", "select"], [21, 2, 1, "", "set_method"], [21, 2, 1, "", "set_reference_set"], [21, 2, 1, "", "show"], [21, 2, 1, "", "subset_intersection"], [21, 2, 1, "", "to_array"], [21, 2, 1, "", "to_bool_array"], [21, 2, 1, "", "to_set"]], "pypath.core.annot.Celltalkdb": [[22, 2, 1, "", "__init__"], [22, 2, 1, "", "add_complexes_by_inference"], [22, 2, 1, "", "all_complexes"], [22, 2, 1, "", "all_entities"], [22, 2, 1, "", "all_mirnas"], [22, 2, 1, "", "all_proteins"], [22, 2, 1, "", "all_refs"], [22, 2, 1, "", "annotate_complex"], [22, 2, 1, "", "browse"], [22, 2, 1, "", "complex_inference"], [22, 2, 1, "", "coverage"], [22, 2, 1, "", "curation_effort"], [22, 2, 1, "", "get_names"], [22, 2, 1, "", "get_reference_set"], [22, 2, 1, "", "get_subset"], [22, 2, 1, "", "get_subset_bool_array"], [22, 2, 1, "", "get_values"], [22, 2, 1, "", "labels"], [22, 2, 1, "", "load"], [22, 2, 1, "", "load_data"], [22, 2, 1, "", "load_proteins"], [22, 2, 1, "", "make_df"], [22, 2, 1, "", "numof_entities"], [22, 2, 1, "", "numof_records"], [22, 2, 1, "", "numof_references"], [22, 2, 1, "", "process"], [22, 2, 1, "", "reload"], [22, 2, 1, "", "select"], [22, 2, 1, "", "set_method"], [22, 2, 1, "", "set_reference_set"], [22, 2, 1, "", "show"], [22, 2, 1, "", "subset_intersection"], [22, 2, 1, "", "to_array"], [22, 2, 1, "", "to_bool_array"], [22, 2, 1, "", "to_set"]], "pypath.core.annot.Celltypist": [[23, 2, 1, "", "__init__"], [23, 2, 1, "", "add_complexes_by_inference"], [23, 2, 1, "", "all_complexes"], [23, 2, 1, "", "all_entities"], [23, 2, 1, "", "all_mirnas"], [23, 2, 1, "", "all_proteins"], [23, 2, 1, "", "all_refs"], [23, 2, 1, "", "annotate_complex"], [23, 2, 1, "", "browse"], [23, 2, 1, "", "complex_inference"], [23, 2, 1, "", "coverage"], [23, 2, 1, "", "curation_effort"], [23, 2, 1, "", "get_names"], [23, 2, 1, "", "get_reference_set"], [23, 2, 1, "", "get_subset"], [23, 2, 1, "", "get_subset_bool_array"], [23, 2, 1, "", "get_values"], [23, 2, 1, "", "labels"], [23, 2, 1, "", "load"], [23, 2, 1, "", "load_data"], [23, 2, 1, "", "load_proteins"], [23, 2, 1, "", "make_df"], [23, 2, 1, "", "numof_entities"], [23, 2, 1, "", "numof_records"], [23, 2, 1, "", "numof_references"], [23, 2, 1, "", "process"], [23, 2, 1, "", "reload"], [23, 2, 1, "", "select"], [23, 2, 1, "", "set_method"], [23, 2, 1, "", "set_reference_set"], [23, 2, 1, "", "show"], [23, 2, 1, "", "subset_intersection"], [23, 2, 1, "", "to_array"], [23, 2, 1, "", "to_bool_array"], [23, 2, 1, "", "to_set"]], "pypath.core.annot.Comppi": [[24, 2, 1, "", "__init__"], [24, 2, 1, "", "add_complexes_by_inference"], [24, 2, 1, "", "all_complexes"], [24, 2, 1, "", "all_entities"], [24, 2, 1, "", "all_mirnas"], [24, 2, 1, "", "all_proteins"], [24, 2, 1, "", "all_refs"], [24, 2, 1, "", "annotate_complex"], [24, 2, 1, "", "browse"], [24, 2, 1, "", "complex_inference"], [24, 2, 1, "", "coverage"], [24, 2, 1, "", "curation_effort"], [24, 2, 1, "", "get_names"], [24, 2, 1, "", "get_reference_set"], [24, 2, 1, "", "get_subset"], [24, 2, 1, "", "get_subset_bool_array"], [24, 2, 1, "", "get_values"], [24, 2, 1, "", "labels"], [24, 2, 1, "", "load"], [24, 2, 1, "", "load_data"], [24, 2, 1, "", "load_proteins"], [24, 2, 1, "", "make_df"], [24, 2, 1, "", "numof_entities"], [24, 2, 1, "", "numof_records"], [24, 2, 1, "", "numof_references"], [24, 2, 1, "", "process"], [24, 2, 1, "", "reload"], [24, 2, 1, "", "select"], [24, 2, 1, "", "set_method"], [24, 2, 1, "", "set_reference_set"], [24, 2, 1, "", "show"], [24, 2, 1, "", "subset_intersection"], [24, 2, 1, "", "to_array"], [24, 2, 1, "", "to_bool_array"], [24, 2, 1, "", "to_set"]], "pypath.core.annot.Connectomedb": [[25, 2, 1, "", "__init__"], [25, 2, 1, "", "add_complexes_by_inference"], [25, 2, 1, "", "all_complexes"], [25, 2, 1, "", "all_entities"], [25, 2, 1, "", "all_mirnas"], [25, 2, 1, "", "all_proteins"], [25, 2, 1, "", "all_refs"], [25, 2, 1, "", "annotate_complex"], [25, 2, 1, "", "browse"], [25, 2, 1, "", "complex_inference"], [25, 2, 1, "", "coverage"], [25, 2, 1, "", "curation_effort"], [25, 2, 1, "", "get_names"], [25, 2, 1, "", "get_reference_set"], [25, 2, 1, "", "get_subset"], [25, 2, 1, "", "get_subset_bool_array"], [25, 2, 1, "", "get_values"], [25, 2, 1, "", "labels"], [25, 2, 1, "", "load"], [25, 2, 1, "", "load_data"], [25, 2, 1, "", "load_proteins"], [25, 2, 1, "", "make_df"], [25, 2, 1, "", "numof_entities"], [25, 2, 1, "", "numof_records"], [25, 2, 1, "", "numof_references"], [25, 2, 1, "", "process"], [25, 2, 1, "", "reload"], [25, 2, 1, "", "select"], [25, 2, 1, "", "set_method"], [25, 2, 1, "", "set_reference_set"], [25, 2, 1, "", "show"], [25, 2, 1, "", "subset_intersection"], [25, 2, 1, "", "to_array"], [25, 2, 1, "", "to_bool_array"], [25, 2, 1, "", "to_set"]], "pypath.core.annot.Corum": [[26, 2, 1, "", "__init__"], [26, 2, 1, "", "add_complexes_by_inference"], [26, 2, 1, "", "all_complexes"], [26, 2, 1, "", "all_entities"], [26, 2, 1, "", "all_mirnas"], [26, 2, 1, "", "all_proteins"], [26, 2, 1, "", "all_refs"], [26, 2, 1, "", "annotate_complex"], [26, 2, 1, "", "browse"], [26, 2, 1, "", "complex_inference"], [26, 2, 1, "", "coverage"], [26, 2, 1, "", "curation_effort"], [26, 2, 1, "", "get_names"], [26, 2, 1, "", "get_reference_set"], [26, 2, 1, "", "get_subset"], [26, 2, 1, "", "get_subset_bool_array"], [26, 2, 1, "", "get_values"], [26, 2, 1, "", "labels"], [26, 2, 1, "", "load"], [26, 2, 1, "", "load_data"], [26, 2, 1, "", "load_proteins"], [26, 2, 1, "", "make_df"], [26, 2, 1, "", "numof_entities"], [26, 2, 1, "", "numof_records"], [26, 2, 1, "", "numof_references"], [26, 2, 1, "", "process"], [26, 2, 1, "", "reload"], [26, 2, 1, "", "select"], [26, 2, 1, "", "set_method"], [26, 2, 1, "", "set_reference_set"], [26, 2, 1, "", "show"], [26, 2, 1, "", "subset_intersection"], [26, 2, 1, "", "to_array"], [26, 2, 1, "", "to_bool_array"], [26, 2, 1, "", "to_set"]], "pypath.core.annot.CorumFuncat": [[27, 2, 1, "", "__init__"], [27, 2, 1, "", "add_complexes_by_inference"], [27, 2, 1, "", "all_complexes"], [27, 2, 1, "", "all_entities"], [27, 2, 1, "", "all_mirnas"], [27, 2, 1, "", "all_proteins"], [27, 2, 1, "", "all_refs"], [27, 2, 1, "", "annotate_complex"], [27, 2, 1, "", "browse"], [27, 2, 1, "", "complex_inference"], [27, 2, 1, "", "coverage"], [27, 2, 1, "", "curation_effort"], [27, 2, 1, "", "get_names"], [27, 2, 1, "", "get_reference_set"], [27, 2, 1, "", "get_subset"], [27, 2, 1, "", "get_subset_bool_array"], [27, 2, 1, "", "get_values"], [27, 2, 1, "", "labels"], [27, 2, 1, "", "load"], [27, 2, 1, "", "load_data"], [27, 2, 1, "", "load_proteins"], [27, 2, 1, "", "make_df"], [27, 2, 1, "", "numof_entities"], [27, 2, 1, "", "numof_records"], [27, 2, 1, "", "numof_references"], [27, 2, 1, "", "process"], [27, 2, 1, "", "reload"], [27, 2, 1, "", "select"], [27, 2, 1, "", "set_method"], [27, 2, 1, "", "set_reference_set"], [27, 2, 1, "", "show"], [27, 2, 1, "", "subset_intersection"], [27, 2, 1, "", "to_array"], [27, 2, 1, "", "to_bool_array"], [27, 2, 1, "", "to_set"]], "pypath.core.annot.CorumGO": [[28, 2, 1, "", "__init__"], [28, 2, 1, "", "add_complexes_by_inference"], [28, 2, 1, "", "all_complexes"], [28, 2, 1, "", "all_entities"], [28, 2, 1, "", "all_mirnas"], [28, 2, 1, "", "all_proteins"], [28, 2, 1, "", "all_refs"], [28, 2, 1, "", "annotate_complex"], [28, 2, 1, "", "browse"], [28, 2, 1, "", "complex_inference"], [28, 2, 1, "", "coverage"], [28, 2, 1, "", "curation_effort"], [28, 2, 1, "", "get_names"], [28, 2, 1, "", "get_reference_set"], [28, 2, 1, "", "get_subset"], [28, 2, 1, "", "get_subset_bool_array"], [28, 2, 1, "", "get_values"], [28, 2, 1, "", "labels"], [28, 2, 1, "", "load"], [28, 2, 1, "", "load_data"], [28, 2, 1, "", "load_proteins"], [28, 2, 1, "", "make_df"], [28, 2, 1, "", "numof_entities"], [28, 2, 1, "", "numof_records"], [28, 2, 1, "", "numof_references"], [28, 2, 1, "", "process"], [28, 2, 1, "", "reload"], [28, 2, 1, "", "select"], [28, 2, 1, "", "set_method"], [28, 2, 1, "", "set_reference_set"], [28, 2, 1, "", "show"], [28, 2, 1, "", "subset_intersection"], [28, 2, 1, "", "to_array"], [28, 2, 1, "", "to_bool_array"], [28, 2, 1, "", "to_set"]], "pypath.core.annot.Cpad": [[29, 2, 1, "", "__init__"], [29, 2, 1, "", "add_complexes_by_inference"], [29, 2, 1, "", "all_complexes"], [29, 2, 1, "", "all_entities"], [29, 2, 1, "", "all_mirnas"], [29, 2, 1, "", "all_proteins"], [29, 2, 1, "", "all_refs"], [29, 2, 1, "", "annotate_complex"], [29, 2, 1, "", "browse"], [29, 2, 1, "", "complex_inference"], [29, 2, 1, "", "coverage"], [29, 2, 1, "", "curation_effort"], [29, 2, 1, "", "get_names"], [29, 2, 1, "", "get_reference_set"], [29, 2, 1, "", "get_subset"], [29, 2, 1, "", "get_subset_bool_array"], [29, 2, 1, "", "get_values"], [29, 2, 1, "", "labels"], [29, 2, 1, "", "load"], [29, 2, 1, "", "load_data"], [29, 2, 1, "", "load_proteins"], [29, 2, 1, "", "make_df"], [29, 2, 1, "", "numof_entities"], [29, 2, 1, "", "numof_records"], [29, 2, 1, "", "numof_references"], [29, 2, 1, "", "process"], [29, 2, 1, "", "reload"], [29, 2, 1, "", "select"], [29, 2, 1, "", "set_method"], [29, 2, 1, "", "set_reference_set"], [29, 2, 1, "", "show"], [29, 2, 1, "", "subset_intersection"], [29, 2, 1, "", "to_array"], [29, 2, 1, "", "to_bool_array"], [29, 2, 1, "", "to_set"]], "pypath.core.annot.CustomAnnotation": [[30, 2, 1, "", "__init__"], [30, 2, 1, "", "browse"], [30, 2, 1, "", "class_to_class_connections"], [30, 2, 1, "", "classes_by_entity"], [30, 2, 1, "", "counts"], [30, 2, 1, "", "counts_by_class"], [30, 2, 1, "", "create_class"], [30, 2, 1, "", "degree_inter_class_network"], [30, 2, 1, "", "filter"], [30, 2, 1, "", "filter_classes"], [30, 2, 1, "", "filter_interclass_network"], [30, 2, 1, "", "get_class"], [30, 2, 1, "", "get_df"], [30, 2, 1, "", "get_interclass_network_df"], [30, 2, 1, "", "get_parents"], [30, 2, 1, "", "get_resource"], [30, 2, 1, "", "get_resources"], [30, 2, 1, "", "labels"], [30, 2, 1, "", "make_df"], [30, 2, 1, "", "network_df"], [30, 2, 1, "", "populate_classes"], [30, 2, 1, "", "populate_scores"], [30, 2, 1, "", "process_annot"], [30, 2, 1, "", "quality_check_table"], [30, 2, 1, "", "register_network"], [30, 2, 1, "", "reload"], [30, 2, 1, "", "resources_in_category"], [30, 2, 1, "", "select"], [30, 2, 1, "", "set_interclass_network_df"], [30, 2, 1, "", "show"], [30, 2, 1, "", "update_parents"]], "pypath.core.annot.Cytosig": [[31, 2, 1, "", "__init__"], [31, 2, 1, "", "add_complexes_by_inference"], [31, 2, 1, "", "all_complexes"], [31, 2, 1, "", "all_entities"], [31, 2, 1, "", "all_mirnas"], [31, 2, 1, "", "all_proteins"], [31, 2, 1, "", "all_refs"], [31, 2, 1, "", "annotate_complex"], [31, 2, 1, "", "browse"], [31, 2, 1, "", "complex_inference"], [31, 2, 1, "", "coverage"], [31, 2, 1, "", "curation_effort"], [31, 2, 1, "", "get_names"], [31, 2, 1, "", "get_reference_set"], [31, 2, 1, "", "get_subset"], [31, 2, 1, "", "get_subset_bool_array"], [31, 2, 1, "", "get_values"], [31, 2, 1, "", "labels"], [31, 2, 1, "", "load"], [31, 2, 1, "", "load_data"], [31, 2, 1, "", "load_proteins"], [31, 2, 1, "", "make_df"], [31, 2, 1, "", "numof_entities"], [31, 2, 1, "", "numof_records"], [31, 2, 1, "", "numof_references"], [31, 2, 1, "", "process"], [31, 2, 1, "", "reload"], [31, 2, 1, "", "select"], [31, 2, 1, "", "set_method"], [31, 2, 1, "", "set_reference_set"], [31, 2, 1, "", "show"], [31, 2, 1, "", "subset_intersection"], [31, 2, 1, "", "to_array"], [31, 2, 1, "", "to_bool_array"], [31, 2, 1, "", "to_set"]], "pypath.core.annot.Dgidb": [[32, 2, 1, "", "__init__"], [32, 2, 1, "", "add_complexes_by_inference"], [32, 2, 1, "", "all_complexes"], [32, 2, 1, "", "all_entities"], [32, 2, 1, "", "all_mirnas"], [32, 2, 1, "", "all_proteins"], [32, 2, 1, "", "all_refs"], [32, 2, 1, "", "annotate_complex"], [32, 2, 1, "", "browse"], [32, 2, 1, "", "complex_inference"], [32, 2, 1, "", "coverage"], [32, 2, 1, "", "curation_effort"], [32, 2, 1, "", "get_names"], [32, 2, 1, "", "get_reference_set"], [32, 2, 1, "", "get_subset"], [32, 2, 1, "", "get_subset_bool_array"], [32, 2, 1, "", "get_values"], [32, 2, 1, "", "labels"], [32, 2, 1, "", "load"], [32, 2, 1, "", "load_data"], [32, 2, 1, "", "load_proteins"], [32, 2, 1, "", "make_df"], [32, 2, 1, "", "numof_entities"], [32, 2, 1, "", "numof_records"], [32, 2, 1, "", "numof_references"], [32, 2, 1, "", "process"], [32, 2, 1, "", "reload"], [32, 2, 1, "", "select"], [32, 2, 1, "", "set_method"], [32, 2, 1, "", "set_reference_set"], [32, 2, 1, "", "show"], [32, 2, 1, "", "subset_intersection"], [32, 2, 1, "", "to_array"], [32, 2, 1, "", "to_bool_array"], [32, 2, 1, "", "to_set"]], "pypath.core.annot.Disgenet": [[33, 2, 1, "", "__init__"], [33, 2, 1, "", "add_complexes_by_inference"], [33, 2, 1, "", "all_complexes"], [33, 2, 1, "", "all_entities"], [33, 2, 1, "", "all_mirnas"], [33, 2, 1, "", "all_proteins"], [33, 2, 1, "", "all_refs"], [33, 2, 1, "", "annotate_complex"], [33, 2, 1, "", "browse"], [33, 2, 1, "", "complex_inference"], [33, 2, 1, "", "coverage"], [33, 2, 1, "", "curation_effort"], [33, 2, 1, "", "get_names"], [33, 2, 1, "", "get_reference_set"], [33, 2, 1, "", "get_subset"], [33, 2, 1, "", "get_subset_bool_array"], [33, 2, 1, "", "get_values"], [33, 2, 1, "", "labels"], [33, 2, 1, "", "load"], [33, 2, 1, "", "load_data"], [33, 2, 1, "", "load_proteins"], [33, 2, 1, "", "make_df"], [33, 2, 1, "", "numof_entities"], [33, 2, 1, "", "numof_records"], [33, 2, 1, "", "numof_references"], [33, 2, 1, "", "process"], [33, 2, 1, "", "reload"], [33, 2, 1, "", "select"], [33, 2, 1, "", "set_method"], [33, 2, 1, "", "set_reference_set"], [33, 2, 1, "", "show"], [33, 2, 1, "", "subset_intersection"], [33, 2, 1, "", "to_array"], [33, 2, 1, "", "to_bool_array"], [33, 2, 1, "", "to_set"]], "pypath.core.annot.Embrace": [[34, 2, 1, "", "__init__"], [34, 2, 1, "", "add_complexes_by_inference"], [34, 2, 1, "", "all_complexes"], [34, 2, 1, "", "all_entities"], [34, 2, 1, "", "all_mirnas"], [34, 2, 1, "", "all_proteins"], [34, 2, 1, "", "all_refs"], [34, 2, 1, "", "annotate_complex"], [34, 2, 1, "", "browse"], [34, 2, 1, "", "complex_inference"], [34, 2, 1, "", "coverage"], [34, 2, 1, "", "curation_effort"], [34, 2, 1, "", "get_names"], [34, 2, 1, "", "get_reference_set"], [34, 2, 1, "", "get_subset"], [34, 2, 1, "", "get_subset_bool_array"], [34, 2, 1, "", "get_values"], [34, 2, 1, "", "labels"], [34, 2, 1, "", "load"], [34, 2, 1, "", "load_data"], [34, 2, 1, "", "load_proteins"], [34, 2, 1, "", "make_df"], [34, 2, 1, "", "numof_entities"], [34, 2, 1, "", "numof_records"], [34, 2, 1, "", "numof_references"], [34, 2, 1, "", "process"], [34, 2, 1, "", "reload"], [34, 2, 1, "", "select"], [34, 2, 1, "", "set_method"], [34, 2, 1, "", "set_reference_set"], [34, 2, 1, "", "show"], [34, 2, 1, "", "subset_intersection"], [34, 2, 1, "", "to_array"], [34, 2, 1, "", "to_bool_array"], [34, 2, 1, "", "to_set"]], "pypath.core.annot.Exocarta": [[35, 2, 1, "", "__init__"], [35, 2, 1, "", "add_complexes_by_inference"], [35, 2, 1, "", "all_complexes"], [35, 2, 1, "", "all_entities"], [35, 2, 1, "", "all_mirnas"], [35, 2, 1, "", "all_proteins"], [35, 2, 1, "", "all_refs"], [35, 2, 1, "", "annotate_complex"], [35, 2, 1, "", "browse"], [35, 2, 1, "", "complex_inference"], [35, 2, 1, "", "coverage"], [35, 2, 1, "", "curation_effort"], [35, 2, 1, "", "get_names"], [35, 2, 1, "", "get_reference_set"], [35, 2, 1, "", "get_subset"], [35, 2, 1, "", "get_subset_bool_array"], [35, 2, 1, "", "get_values"], [35, 2, 1, "", "labels"], [35, 2, 1, "", "load"], [35, 2, 1, "", "load_data"], [35, 2, 1, "", "load_proteins"], [35, 2, 1, "", "make_df"], [35, 2, 1, "", "numof_entities"], [35, 2, 1, "", "numof_records"], [35, 2, 1, "", "numof_references"], [35, 2, 1, "", "process"], [35, 2, 1, "", "reload"], [35, 2, 1, "", "select"], [35, 2, 1, "", "set_method"], [35, 2, 1, "", "set_reference_set"], [35, 2, 1, "", "show"], [35, 2, 1, "", "subset_intersection"], [35, 2, 1, "", "to_array"], [35, 2, 1, "", "to_bool_array"], [35, 2, 1, "", "to_set"]], "pypath.core.annot.GOCustomIntercell": [[36, 2, 1, "", "__init__"], [36, 2, 1, "", "get_annotation"], [36, 2, 1, "", "get_annotations"], [36, 2, 1, "", "process_categories"], [36, 2, 1, "", "reload"]], "pypath.core.annot.GOIntercell": [[37, 2, 1, "", "__init__"], [37, 2, 1, "", "add_complexes_by_inference"], [37, 2, 1, "", "all_complexes"], [37, 2, 1, "", "all_entities"], [37, 2, 1, "", "all_mirnas"], [37, 2, 1, "", "all_proteins"], [37, 2, 1, "", "all_refs"], [37, 2, 1, "", "annotate_complex"], [37, 2, 1, "", "browse"], [37, 2, 1, "", "complex_inference"], [37, 2, 1, "", "coverage"], [37, 2, 1, "", "curation_effort"], [37, 2, 1, "", "get_names"], [37, 2, 1, "", "get_reference_set"], [37, 2, 1, "", "get_subset"], [37, 2, 1, "", "get_subset_bool_array"], [37, 2, 1, "", "get_values"], [37, 2, 1, "", "labels"], [37, 2, 1, "", "load"], [37, 2, 1, "", "load_data"], [37, 2, 1, "", "load_proteins"], [37, 2, 1, "", "make_df"], [37, 2, 1, "", "numof_entities"], [37, 2, 1, "", "numof_records"], [37, 2, 1, "", "numof_references"], [37, 2, 1, "", "process"], [37, 2, 1, "", "reload"], [37, 2, 1, "", "select"], [37, 2, 1, "", "set_method"], [37, 2, 1, "", "set_reference_set"], [37, 2, 1, "", "show"], [37, 2, 1, "", "subset_intersection"], [37, 2, 1, "", "to_array"], [37, 2, 1, "", "to_bool_array"], [37, 2, 1, "", "to_set"]], "pypath.core.annot.Gpcrdb": [[38, 2, 1, "", "__init__"], [38, 2, 1, "", "add_complexes_by_inference"], [38, 2, 1, "", "all_complexes"], [38, 2, 1, "", "all_entities"], [38, 2, 1, "", "all_mirnas"], [38, 2, 1, "", "all_proteins"], [38, 2, 1, "", "all_refs"], [38, 2, 1, "", "annotate_complex"], [38, 2, 1, "", "browse"], [38, 2, 1, "", "complex_inference"], [38, 2, 1, "", "coverage"], [38, 2, 1, "", "curation_effort"], [38, 2, 1, "", "get_names"], [38, 2, 1, "", "get_reference_set"], [38, 2, 1, "", "get_subset"], [38, 2, 1, "", "get_subset_bool_array"], [38, 2, 1, "", "get_values"], [38, 2, 1, "", "labels"], [38, 2, 1, "", "load"], [38, 2, 1, "", "load_data"], [38, 2, 1, "", "load_proteins"], [38, 2, 1, "", "make_df"], [38, 2, 1, "", "numof_entities"], [38, 2, 1, "", "numof_records"], [38, 2, 1, "", "numof_references"], [38, 2, 1, "", "process"], [38, 2, 1, "", "reload"], [38, 2, 1, "", "select"], [38, 2, 1, "", "set_method"], [38, 2, 1, "", "set_reference_set"], [38, 2, 1, "", "show"], [38, 2, 1, "", "subset_intersection"], [38, 2, 1, "", "to_array"], [38, 2, 1, "", "to_bool_array"], [38, 2, 1, "", "to_set"]], "pypath.core.annot.GuideToPharmacology": [[39, 2, 1, "", "__init__"], [39, 2, 1, "", "add_complexes_by_inference"], [39, 2, 1, "", "all_complexes"], [39, 2, 1, "", "all_entities"], [39, 2, 1, "", "all_mirnas"], [39, 2, 1, "", "all_proteins"], [39, 2, 1, "", "all_refs"], [39, 2, 1, "", "annotate_complex"], [39, 2, 1, "", "browse"], [39, 2, 1, "", "complex_inference"], [39, 2, 1, "", "coverage"], [39, 2, 1, "", "curation_effort"], [39, 2, 1, "", "get_names"], [39, 2, 1, "", "get_reference_set"], [39, 2, 1, "", "get_subset"], [39, 2, 1, "", "get_subset_bool_array"], [39, 2, 1, "", "get_values"], [39, 2, 1, "", "labels"], [39, 2, 1, "", "load"], [39, 2, 1, "", "load_data"], [39, 2, 1, "", "load_proteins"], [39, 2, 1, "", "make_df"], [39, 2, 1, "", "numof_entities"], [39, 2, 1, "", "numof_records"], [39, 2, 1, "", "numof_references"], [39, 2, 1, "", "process"], [39, 2, 1, "", "reload"], [39, 2, 1, "", "select"], [39, 2, 1, "", "set_method"], [39, 2, 1, "", "set_reference_set"], [39, 2, 1, "", "show"], [39, 2, 1, "", "subset_intersection"], [39, 2, 1, "", "to_array"], [39, 2, 1, "", "to_bool_array"], [39, 2, 1, "", "to_set"]], "pypath.core.annot.HPO": [[40, 2, 1, "", "__init__"], [40, 2, 1, "", "add_complexes_by_inference"], [40, 2, 1, "", "all_complexes"], [40, 2, 1, "", "all_entities"], [40, 2, 1, "", "all_mirnas"], [40, 2, 1, "", "all_proteins"], [40, 2, 1, "", "all_refs"], [40, 2, 1, "", "annotate_complex"], [40, 2, 1, "", "browse"], [40, 2, 1, "", "complex_inference"], [40, 2, 1, "", "coverage"], [40, 2, 1, "", "curation_effort"], [40, 2, 1, "", "get_names"], [40, 2, 1, "", "get_reference_set"], [40, 2, 1, "", "get_subset"], [40, 2, 1, "", "get_subset_bool_array"], [40, 2, 1, "", "get_values"], [40, 2, 1, "", "labels"], [40, 2, 1, "", "load"], [40, 2, 1, "", "load_data"], [40, 2, 1, "", "load_proteins"], [40, 2, 1, "", "make_df"], [40, 2, 1, "", "numof_entities"], [40, 2, 1, "", "numof_records"], [40, 2, 1, "", "numof_references"], [40, 2, 1, "", "process"], [40, 2, 1, "", "reload"], [40, 2, 1, "", "select"], [40, 2, 1, "", "set_method"], [40, 2, 1, "", "set_reference_set"], [40, 2, 1, "", "show"], [40, 2, 1, "", "subset_intersection"], [40, 2, 1, "", "to_array"], [40, 2, 1, "", "to_bool_array"], [40, 2, 1, "", "to_set"]], "pypath.core.annot.Hgnc": [[41, 2, 1, "", "__init__"], [41, 2, 1, "", "add_complexes_by_inference"], [41, 2, 1, "", "all_complexes"], [41, 2, 1, "", "all_entities"], [41, 2, 1, "", "all_mirnas"], [41, 2, 1, "", "all_proteins"], [41, 2, 1, "", "all_refs"], [41, 2, 1, "", "annotate_complex"], [41, 2, 1, "", "browse"], [41, 2, 1, "", "complex_inference"], [41, 2, 1, "", "coverage"], [41, 2, 1, "", "curation_effort"], [41, 2, 1, "", "get_names"], [41, 2, 1, "", "get_reference_set"], [41, 2, 1, "", "get_subset"], [41, 2, 1, "", "get_subset_bool_array"], [41, 2, 1, "", "get_values"], [41, 2, 1, "", "labels"], [41, 2, 1, "", "load"], [41, 2, 1, "", "load_data"], [41, 2, 1, "", "load_proteins"], [41, 2, 1, "", "make_df"], [41, 2, 1, "", "numof_entities"], [41, 2, 1, "", "numof_records"], [41, 2, 1, "", "numof_references"], [41, 2, 1, "", "process"], [41, 2, 1, "", "reload"], [41, 2, 1, "", "select"], [41, 2, 1, "", "set_method"], [41, 2, 1, "", "set_reference_set"], [41, 2, 1, "", "show"], [41, 2, 1, "", "subset_intersection"], [41, 2, 1, "", "to_array"], [41, 2, 1, "", "to_bool_array"], [41, 2, 1, "", "to_set"]], "pypath.core.annot.HpmrComplex": [[42, 2, 1, "", "__init__"], [42, 2, 1, "", "add_complexes_by_inference"], [42, 2, 1, "", "all_complexes"], [42, 2, 1, "", "all_entities"], [42, 2, 1, "", "all_mirnas"], [42, 2, 1, "", "all_proteins"], [42, 2, 1, "", "all_refs"], [42, 2, 1, "", "annotate_complex"], [42, 2, 1, "", "browse"], [42, 2, 1, "", "complex_inference"], [42, 2, 1, "", "coverage"], [42, 2, 1, "", "curation_effort"], [42, 2, 1, "", "get_names"], [42, 2, 1, "", "get_reference_set"], [42, 2, 1, "", "get_subset"], [42, 2, 1, "", "get_subset_bool_array"], [42, 2, 1, "", "get_values"], [42, 2, 1, "", "labels"], [42, 2, 1, "", "load"], [42, 2, 1, "", "load_data"], [42, 2, 1, "", "load_proteins"], [42, 2, 1, "", "make_df"], [42, 2, 1, "", "numof_entities"], [42, 2, 1, "", "numof_records"], [42, 2, 1, "", "numof_references"], [42, 2, 1, "", "process"], [42, 2, 1, "", "reload"], [42, 2, 1, "", "select"], [42, 2, 1, "", "set_method"], [42, 2, 1, "", "set_reference_set"], [42, 2, 1, "", "show"], [42, 2, 1, "", "subset_intersection"], [42, 2, 1, "", "to_array"], [42, 2, 1, "", "to_bool_array"], [42, 2, 1, "", "to_set"]], "pypath.core.annot.HumanPlasmaMembraneReceptome": [[43, 2, 1, "", "__init__"], [43, 2, 1, "", "add_complexes_by_inference"], [43, 2, 1, "", "all_complexes"], [43, 2, 1, "", "all_entities"], [43, 2, 1, "", "all_mirnas"], [43, 2, 1, "", "all_proteins"], [43, 2, 1, "", "all_refs"], [43, 2, 1, "", "annotate_complex"], [43, 2, 1, "", "browse"], [43, 2, 1, "", "complex_inference"], [43, 2, 1, "", "coverage"], [43, 2, 1, "", "curation_effort"], [43, 2, 1, "", "get_names"], [43, 2, 1, "", "get_reference_set"], [43, 2, 1, "", "get_subset"], [43, 2, 1, "", "get_subset_bool_array"], [43, 2, 1, "", "get_values"], [43, 2, 1, "", "labels"], [43, 2, 1, "", "load"], [43, 2, 1, "", "load_data"], [43, 2, 1, "", "load_proteins"], [43, 2, 1, "", "make_df"], [43, 2, 1, "", "numof_entities"], [43, 2, 1, "", "numof_records"], [43, 2, 1, "", "numof_references"], [43, 2, 1, "", "process"], [43, 2, 1, "", "reload"], [43, 2, 1, "", "select"], [43, 2, 1, "", "set_method"], [43, 2, 1, "", "set_reference_set"], [43, 2, 1, "", "show"], [43, 2, 1, "", "subset_intersection"], [43, 2, 1, "", "to_array"], [43, 2, 1, "", "to_bool_array"], [43, 2, 1, "", "to_set"]], "pypath.core.annot.HumanProteinAtlas": [[44, 2, 1, "", "__init__"], [44, 2, 1, "", "add_complexes_by_inference"], [44, 2, 1, "", "all_complexes"], [44, 2, 1, "", "all_entities"], [44, 2, 1, "", "all_mirnas"], [44, 2, 1, "", "all_proteins"], [44, 2, 1, "", "all_refs"], [44, 2, 1, "", "annotate_complex"], [44, 2, 1, "", "browse"], [44, 2, 1, "", "complex_inference"], [44, 2, 1, "", "coverage"], [44, 2, 1, "", "curation_effort"], [44, 2, 1, "", "get_names"], [44, 2, 1, "", "get_reference_set"], [44, 2, 1, "", "get_subset"], [44, 2, 1, "", "get_subset_bool_array"], [44, 2, 1, "", "get_values"], [44, 2, 1, "", "labels"], [44, 2, 1, "", "load"], [44, 2, 1, "", "load_data"], [44, 2, 1, "", "load_proteins"], [44, 2, 1, "", "make_df"], [44, 2, 1, "", "numof_entities"], [44, 2, 1, "", "numof_records"], [44, 2, 1, "", "numof_references"], [44, 2, 1, "", "process"], [44, 2, 1, "", "reload"], [44, 2, 1, "", "select"], [44, 2, 1, "", "set_method"], [44, 2, 1, "", "set_reference_set"], [44, 2, 1, "", "show"], [44, 2, 1, "", "subset_intersection"], [44, 2, 1, "", "to_array"], [44, 2, 1, "", "to_bool_array"], [44, 2, 1, "", "to_set"]], "pypath.core.annot.HumanProteinAtlasSecretome": [[45, 2, 1, "", "__init__"], [45, 2, 1, "", "add_complexes_by_inference"], [45, 2, 1, "", "all_complexes"], [45, 2, 1, "", "all_entities"], [45, 2, 1, "", "all_mirnas"], [45, 2, 1, "", "all_proteins"], [45, 2, 1, "", "all_refs"], [45, 2, 1, "", "annotate_complex"], [45, 2, 1, "", "browse"], [45, 2, 1, "", "complex_inference"], [45, 2, 1, "", "coverage"], [45, 2, 1, "", "curation_effort"], [45, 2, 1, "", "get_names"], [45, 2, 1, "", "get_reference_set"], [45, 2, 1, "", "get_subset"], [45, 2, 1, "", "get_subset_bool_array"], [45, 2, 1, "", "get_values"], [45, 2, 1, "", "labels"], [45, 2, 1, "", "load"], [45, 2, 1, "", "load_data"], [45, 2, 1, "", "load_proteins"], [45, 2, 1, "", "make_df"], [45, 2, 1, "", "numof_entities"], [45, 2, 1, "", "numof_records"], [45, 2, 1, "", "numof_references"], [45, 2, 1, "", "process"], [45, 2, 1, "", "reload"], [45, 2, 1, "", "select"], [45, 2, 1, "", "set_method"], [45, 2, 1, "", "set_reference_set"], [45, 2, 1, "", "show"], [45, 2, 1, "", "subset_intersection"], [45, 2, 1, "", "to_array"], [45, 2, 1, "", "to_bool_array"], [45, 2, 1, "", "to_set"]], "pypath.core.annot.HumanProteinAtlasSubcellular": [[46, 2, 1, "", "__init__"], [46, 2, 1, "", "add_complexes_by_inference"], [46, 2, 1, "", "all_complexes"], [46, 2, 1, "", "all_entities"], [46, 2, 1, "", "all_mirnas"], [46, 2, 1, "", "all_proteins"], [46, 2, 1, "", "all_refs"], [46, 2, 1, "", "annotate_complex"], [46, 2, 1, "", "browse"], [46, 2, 1, "", "complex_inference"], [46, 2, 1, "", "coverage"], [46, 2, 1, "", "curation_effort"], [46, 2, 1, "", "get_names"], [46, 2, 1, "", "get_reference_set"], [46, 2, 1, "", "get_subset"], [46, 2, 1, "", "get_subset_bool_array"], [46, 2, 1, "", "get_values"], [46, 2, 1, "", "labels"], [46, 2, 1, "", "load"], [46, 2, 1, "", "load_data"], [46, 2, 1, "", "load_proteins"], [46, 2, 1, "", "make_df"], [46, 2, 1, "", "numof_entities"], [46, 2, 1, "", "numof_records"], [46, 2, 1, "", "numof_references"], [46, 2, 1, "", "process"], [46, 2, 1, "", "reload"], [46, 2, 1, "", "select"], [46, 2, 1, "", "set_method"], [46, 2, 1, "", "set_reference_set"], [46, 2, 1, "", "show"], [46, 2, 1, "", "subset_intersection"], [46, 2, 1, "", "to_array"], [46, 2, 1, "", "to_bool_array"], [46, 2, 1, "", "to_set"]], "pypath.core.annot.Humancellmap": [[47, 2, 1, "", "__init__"], [47, 2, 1, "", "add_complexes_by_inference"], [47, 2, 1, "", "all_complexes"], [47, 2, 1, "", "all_entities"], [47, 2, 1, "", "all_mirnas"], [47, 2, 1, "", "all_proteins"], [47, 2, 1, "", "all_refs"], [47, 2, 1, "", "annotate_complex"], [47, 2, 1, "", "browse"], [47, 2, 1, "", "complex_inference"], [47, 2, 1, "", "coverage"], [47, 2, 1, "", "curation_effort"], [47, 2, 1, "", "get_names"], [47, 2, 1, "", "get_reference_set"], [47, 2, 1, "", "get_subset"], [47, 2, 1, "", "get_subset_bool_array"], [47, 2, 1, "", "get_values"], [47, 2, 1, "", "labels"], [47, 2, 1, "", "load"], [47, 2, 1, "", "load_data"], [47, 2, 1, "", "load_proteins"], [47, 2, 1, "", "make_df"], [47, 2, 1, "", "numof_entities"], [47, 2, 1, "", "numof_records"], [47, 2, 1, "", "numof_references"], [47, 2, 1, "", "process"], [47, 2, 1, "", "reload"], [47, 2, 1, "", "select"], [47, 2, 1, "", "set_method"], [47, 2, 1, "", "set_reference_set"], [47, 2, 1, "", "show"], [47, 2, 1, "", "subset_intersection"], [47, 2, 1, "", "to_array"], [47, 2, 1, "", "to_bool_array"], [47, 2, 1, "", "to_set"]], "pypath.core.annot.Icellnet": [[48, 2, 1, "", "__init__"], [48, 2, 1, "", "add_complexes_by_inference"], [48, 2, 1, "", "all_complexes"], [48, 2, 1, "", "all_entities"], [48, 2, 1, "", "all_mirnas"], [48, 2, 1, "", "all_proteins"], [48, 2, 1, "", "all_refs"], [48, 2, 1, "", "annotate_complex"], [48, 2, 1, "", "browse"], [48, 2, 1, "", "complex_inference"], [48, 2, 1, "", "coverage"], [48, 2, 1, "", "curation_effort"], [48, 2, 1, "", "get_names"], [48, 2, 1, "", "get_reference_set"], [48, 2, 1, "", "get_subset"], [48, 2, 1, "", "get_subset_bool_array"], [48, 2, 1, "", "get_values"], [48, 2, 1, "", "labels"], [48, 2, 1, "", "load"], [48, 2, 1, "", "load_data"], [48, 2, 1, "", "load_proteins"], [48, 2, 1, "", "make_df"], [48, 2, 1, "", "numof_entities"], [48, 2, 1, "", "numof_records"], [48, 2, 1, "", "numof_references"], [48, 2, 1, "", "process"], [48, 2, 1, "", "reload"], [48, 2, 1, "", "select"], [48, 2, 1, "", "set_method"], [48, 2, 1, "", "set_reference_set"], [48, 2, 1, "", "show"], [48, 2, 1, "", "subset_intersection"], [48, 2, 1, "", "to_array"], [48, 2, 1, "", "to_bool_array"], [48, 2, 1, "", "to_set"]], "pypath.core.annot.IcellnetComplex": [[49, 2, 1, "", "__init__"], [49, 2, 1, "", "add_complexes_by_inference"], [49, 2, 1, "", "all_complexes"], [49, 2, 1, "", "all_entities"], [49, 2, 1, "", "all_mirnas"], [49, 2, 1, "", "all_proteins"], [49, 2, 1, "", "all_refs"], [49, 2, 1, "", "annotate_complex"], [49, 2, 1, "", "browse"], [49, 2, 1, "", "complex_inference"], [49, 2, 1, "", "coverage"], [49, 2, 1, "", "curation_effort"], [49, 2, 1, "", "get_names"], [49, 2, 1, "", "get_reference_set"], [49, 2, 1, "", "get_subset"], [49, 2, 1, "", "get_subset_bool_array"], [49, 2, 1, "", "get_values"], [49, 2, 1, "", "labels"], [49, 2, 1, "", "load"], [49, 2, 1, "", "load_data"], [49, 2, 1, "", "load_proteins"], [49, 2, 1, "", "make_df"], [49, 2, 1, "", "numof_entities"], [49, 2, 1, "", "numof_records"], [49, 2, 1, "", "numof_references"], [49, 2, 1, "", "process"], [49, 2, 1, "", "reload"], [49, 2, 1, "", "select"], [49, 2, 1, "", "set_method"], [49, 2, 1, "", "set_reference_set"], [49, 2, 1, "", "show"], [49, 2, 1, "", "subset_intersection"], [49, 2, 1, "", "to_array"], [49, 2, 1, "", "to_bool_array"], [49, 2, 1, "", "to_set"]], "pypath.core.annot.Integrins": [[50, 2, 1, "", "__init__"], [50, 2, 1, "", "add_complexes_by_inference"], [50, 2, 1, "", "all_complexes"], [50, 2, 1, "", "all_entities"], [50, 2, 1, "", "all_mirnas"], [50, 2, 1, "", "all_proteins"], [50, 2, 1, "", "all_refs"], [50, 2, 1, "", "annotate_complex"], [50, 2, 1, "", "browse"], [50, 2, 1, "", "complex_inference"], [50, 2, 1, "", "coverage"], [50, 2, 1, "", "curation_effort"], [50, 2, 1, "", "get_names"], [50, 2, 1, "", "get_reference_set"], [50, 2, 1, "", "get_subset"], [50, 2, 1, "", "get_subset_bool_array"], [50, 2, 1, "", "get_values"], [50, 2, 1, "", "labels"], [50, 2, 1, "", "load"], [50, 2, 1, "", "load_data"], [50, 2, 1, "", "load_proteins"], [50, 2, 1, "", "make_df"], [50, 2, 1, "", "numof_entities"], [50, 2, 1, "", "numof_records"], [50, 2, 1, "", "numof_references"], [50, 2, 1, "", "process"], [50, 2, 1, "", "reload"], [50, 2, 1, "", "select"], [50, 2, 1, "", "set_method"], [50, 2, 1, "", "set_reference_set"], [50, 2, 1, "", "show"], [50, 2, 1, "", "subset_intersection"], [50, 2, 1, "", "to_array"], [50, 2, 1, "", "to_bool_array"], [50, 2, 1, "", "to_set"]], "pypath.core.annot.InterPro": [[51, 2, 1, "", "__init__"], [51, 2, 1, "", "add_complexes_by_inference"], [51, 2, 1, "", "all_complexes"], [51, 2, 1, "", "all_entities"], [51, 2, 1, "", "all_mirnas"], [51, 2, 1, "", "all_proteins"], [51, 2, 1, "", "all_refs"], [51, 2, 1, "", "annotate_complex"], [51, 2, 1, "", "browse"], [51, 2, 1, "", "complex_inference"], [51, 2, 1, "", "coverage"], [51, 2, 1, "", "curation_effort"], [51, 2, 1, "", "get_names"], [51, 2, 1, "", "get_reference_set"], [51, 2, 1, "", "get_subset"], [51, 2, 1, "", "get_subset_bool_array"], [51, 2, 1, "", "get_values"], [51, 2, 1, "", "labels"], [51, 2, 1, "", "load"], [51, 2, 1, "", "load_data"], [51, 2, 1, "", "load_proteins"], [51, 2, 1, "", "make_df"], [51, 2, 1, "", "numof_entities"], [51, 2, 1, "", "numof_records"], [51, 2, 1, "", "numof_references"], [51, 2, 1, "", "process"], [51, 2, 1, "", "reload"], [51, 2, 1, "", "select"], [51, 2, 1, "", "set_method"], [51, 2, 1, "", "set_reference_set"], [51, 2, 1, "", "show"], [51, 2, 1, "", "subset_intersection"], [51, 2, 1, "", "to_array"], [51, 2, 1, "", "to_bool_array"], [51, 2, 1, "", "to_set"]], "pypath.core.annot.Intogen": [[52, 2, 1, "", "__init__"], [52, 2, 1, "", "add_complexes_by_inference"], [52, 2, 1, "", "all_complexes"], [52, 2, 1, "", "all_entities"], [52, 2, 1, "", "all_mirnas"], [52, 2, 1, "", "all_proteins"], [52, 2, 1, "", "all_refs"], [52, 2, 1, "", "annotate_complex"], [52, 2, 1, "", "browse"], [52, 2, 1, "", "complex_inference"], [52, 2, 1, "", "coverage"], [52, 2, 1, "", "curation_effort"], [52, 2, 1, "", "get_names"], [52, 2, 1, "", "get_reference_set"], [52, 2, 1, "", "get_subset"], [52, 2, 1, "", "get_subset_bool_array"], [52, 2, 1, "", "get_values"], [52, 2, 1, "", "labels"], [52, 2, 1, "", "load"], [52, 2, 1, "", "load_data"], [52, 2, 1, "", "load_proteins"], [52, 2, 1, "", "make_df"], [52, 2, 1, "", "numof_entities"], [52, 2, 1, "", "numof_records"], [52, 2, 1, "", "numof_references"], [52, 2, 1, "", "process"], [52, 2, 1, "", "reload"], [52, 2, 1, "", "select"], [52, 2, 1, "", "set_method"], [52, 2, 1, "", "set_reference_set"], [52, 2, 1, "", "show"], [52, 2, 1, "", "subset_intersection"], [52, 2, 1, "", "to_array"], [52, 2, 1, "", "to_bool_array"], [52, 2, 1, "", "to_set"]], "pypath.core.annot.Italk": [[53, 2, 1, "", "__init__"], [53, 2, 1, "", "add_complexes_by_inference"], [53, 2, 1, "", "all_complexes"], [53, 2, 1, "", "all_entities"], [53, 2, 1, "", "all_mirnas"], [53, 2, 1, "", "all_proteins"], [53, 2, 1, "", "all_refs"], [53, 2, 1, "", "annotate_complex"], [53, 2, 1, "", "browse"], [53, 2, 1, "", "complex_inference"], [53, 2, 1, "", "coverage"], [53, 2, 1, "", "curation_effort"], [53, 2, 1, "", "get_names"], [53, 2, 1, "", "get_reference_set"], [53, 2, 1, "", "get_subset"], [53, 2, 1, "", "get_subset_bool_array"], [53, 2, 1, "", "get_values"], [53, 2, 1, "", "labels"], [53, 2, 1, "", "load"], [53, 2, 1, "", "load_data"], [53, 2, 1, "", "load_proteins"], [53, 2, 1, "", "make_df"], [53, 2, 1, "", "numof_entities"], [53, 2, 1, "", "numof_records"], [53, 2, 1, "", "numof_references"], [53, 2, 1, "", "process"], [53, 2, 1, "", "reload"], [53, 2, 1, "", "select"], [53, 2, 1, "", "set_method"], [53, 2, 1, "", "set_reference_set"], [53, 2, 1, "", "show"], [53, 2, 1, "", "subset_intersection"], [53, 2, 1, "", "to_array"], [53, 2, 1, "", "to_bool_array"], [53, 2, 1, "", "to_set"]], "pypath.core.annot.KeggPathways": [[54, 2, 1, "", "__init__"], [54, 2, 1, "", "add_complexes_by_inference"], [54, 2, 1, "", "all_complexes"], [54, 2, 1, "", "all_entities"], [54, 2, 1, "", "all_mirnas"], [54, 2, 1, "", "all_proteins"], [54, 2, 1, "", "all_refs"], [54, 2, 1, "", "annotate_complex"], [54, 2, 1, "", "browse"], [54, 2, 1, "", "complex_inference"], [54, 2, 1, "", "coverage"], [54, 2, 1, "", "curation_effort"], [54, 2, 1, "", "get_names"], [54, 2, 1, "", "get_reference_set"], [54, 2, 1, "", "get_subset"], [54, 2, 1, "", "get_subset_bool_array"], [54, 2, 1, "", "get_values"], [54, 2, 1, "", "labels"], [54, 2, 1, "", "load"], [54, 2, 1, "", "load_data"], [54, 2, 1, "", "load_proteins"], [54, 2, 1, "", "make_df"], [54, 2, 1, "", "numof_entities"], [54, 2, 1, "", "numof_records"], [54, 2, 1, "", "numof_references"], [54, 2, 1, "", "process"], [54, 2, 1, "", "reload"], [54, 2, 1, "", "select"], [54, 2, 1, "", "set_method"], [54, 2, 1, "", "set_reference_set"], [54, 2, 1, "", "show"], [54, 2, 1, "", "subset_intersection"], [54, 2, 1, "", "to_array"], [54, 2, 1, "", "to_bool_array"], [54, 2, 1, "", "to_set"]], "pypath.core.annot.KeggPathwaysPC": [[55, 2, 1, "", "__init__"], [55, 2, 1, "", "add_complexes_by_inference"], [55, 2, 1, "", "all_complexes"], [55, 2, 1, "", "all_entities"], [55, 2, 1, "", "all_mirnas"], [55, 2, 1, "", "all_proteins"], [55, 2, 1, "", "all_refs"], [55, 2, 1, "", "annotate_complex"], [55, 2, 1, "", "browse"], [55, 2, 1, "", "complex_inference"], [55, 2, 1, "", "coverage"], [55, 2, 1, "", "curation_effort"], [55, 2, 1, "", "get_names"], [55, 2, 1, "", "get_reference_set"], [55, 2, 1, "", "get_subset"], [55, 2, 1, "", "get_subset_bool_array"], [55, 2, 1, "", "get_values"], [55, 2, 1, "", "labels"], [55, 2, 1, "", "load"], [55, 2, 1, "", "load_data"], [55, 2, 1, "", "load_proteins"], [55, 2, 1, "", "make_df"], [55, 2, 1, "", "numof_entities"], [55, 2, 1, "", "numof_records"], [55, 2, 1, "", "numof_references"], [55, 2, 1, "", "process"], [55, 2, 1, "", "reload"], [55, 2, 1, "", "select"], [55, 2, 1, "", "set_method"], [55, 2, 1, "", "set_reference_set"], [55, 2, 1, "", "show"], [55, 2, 1, "", "subset_intersection"], [55, 2, 1, "", "to_array"], [55, 2, 1, "", "to_bool_array"], [55, 2, 1, "", "to_set"]], "pypath.core.annot.Kinasedotcom": [[56, 2, 1, "", "__init__"], [56, 2, 1, "", "add_complexes_by_inference"], [56, 2, 1, "", "all_complexes"], [56, 2, 1, "", "all_entities"], [56, 2, 1, "", "all_mirnas"], [56, 2, 1, "", "all_proteins"], [56, 2, 1, "", "all_refs"], [56, 2, 1, "", "annotate_complex"], [56, 2, 1, "", "browse"], [56, 2, 1, "", "complex_inference"], [56, 2, 1, "", "coverage"], [56, 2, 1, "", "curation_effort"], [56, 2, 1, "", "get_names"], [56, 2, 1, "", "get_reference_set"], [56, 2, 1, "", "get_subset"], [56, 2, 1, "", "get_subset_bool_array"], [56, 2, 1, "", "get_values"], [56, 2, 1, "", "labels"], [56, 2, 1, "", "load"], [56, 2, 1, "", "load_data"], [56, 2, 1, "", "load_proteins"], [56, 2, 1, "", "make_df"], [56, 2, 1, "", "numof_entities"], [56, 2, 1, "", "numof_records"], [56, 2, 1, "", "numof_references"], [56, 2, 1, "", "process"], [56, 2, 1, "", "reload"], [56, 2, 1, "", "select"], [56, 2, 1, "", "set_method"], [56, 2, 1, "", "set_reference_set"], [56, 2, 1, "", "show"], [56, 2, 1, "", "subset_intersection"], [56, 2, 1, "", "to_array"], [56, 2, 1, "", "to_bool_array"], [56, 2, 1, "", "to_set"]], "pypath.core.annot.Kirouac2010": [[57, 2, 1, "", "__init__"], [57, 2, 1, "", "add_complexes_by_inference"], [57, 2, 1, "", "all_complexes"], [57, 2, 1, "", "all_entities"], [57, 2, 1, "", "all_mirnas"], [57, 2, 1, "", "all_proteins"], [57, 2, 1, "", "all_refs"], [57, 2, 1, "", "annotate_complex"], [57, 2, 1, "", "browse"], [57, 2, 1, "", "complex_inference"], [57, 2, 1, "", "coverage"], [57, 2, 1, "", "curation_effort"], [57, 2, 1, "", "get_names"], [57, 2, 1, "", "get_reference_set"], [57, 2, 1, "", "get_subset"], [57, 2, 1, "", "get_subset_bool_array"], [57, 2, 1, "", "get_values"], [57, 2, 1, "", "labels"], [57, 2, 1, "", "load"], [57, 2, 1, "", "load_data"], [57, 2, 1, "", "load_proteins"], [57, 2, 1, "", "make_df"], [57, 2, 1, "", "numof_entities"], [57, 2, 1, "", "numof_records"], [57, 2, 1, "", "numof_references"], [57, 2, 1, "", "process"], [57, 2, 1, "", "reload"], [57, 2, 1, "", "select"], [57, 2, 1, "", "set_method"], [57, 2, 1, "", "set_reference_set"], [57, 2, 1, "", "show"], [57, 2, 1, "", "subset_intersection"], [57, 2, 1, "", "to_array"], [57, 2, 1, "", "to_bool_array"], [57, 2, 1, "", "to_set"]], "pypath.core.annot.Lambert2018": [[58, 2, 1, "", "__init__"], [58, 2, 1, "", "add_complexes_by_inference"], [58, 2, 1, "", "all_complexes"], [58, 2, 1, "", "all_entities"], [58, 2, 1, "", "all_mirnas"], [58, 2, 1, "", "all_proteins"], [58, 2, 1, "", "all_refs"], [58, 2, 1, "", "annotate_complex"], [58, 2, 1, "", "browse"], [58, 2, 1, "", "complex_inference"], [58, 2, 1, "", "coverage"], [58, 2, 1, "", "curation_effort"], [58, 2, 1, "", "get_names"], [58, 2, 1, "", "get_reference_set"], [58, 2, 1, "", "get_subset"], [58, 2, 1, "", "get_subset_bool_array"], [58, 2, 1, "", "get_values"], [58, 2, 1, "", "labels"], [58, 2, 1, "", "load"], [58, 2, 1, "", "load_data"], [58, 2, 1, "", "load_proteins"], [58, 2, 1, "", "make_df"], [58, 2, 1, "", "numof_entities"], [58, 2, 1, "", "numof_records"], [58, 2, 1, "", "numof_references"], [58, 2, 1, "", "process"], [58, 2, 1, "", "reload"], [58, 2, 1, "", "select"], [58, 2, 1, "", "set_method"], [58, 2, 1, "", "set_reference_set"], [58, 2, 1, "", "show"], [58, 2, 1, "", "subset_intersection"], [58, 2, 1, "", "to_array"], [58, 2, 1, "", "to_bool_array"], [58, 2, 1, "", "to_set"]], "pypath.core.annot.LigandReceptor": [[59, 2, 1, "", "__init__"], [59, 2, 1, "", "add_complexes_by_inference"], [59, 2, 1, "", "all_complexes"], [59, 2, 1, "", "all_entities"], [59, 2, 1, "", "all_mirnas"], [59, 2, 1, "", "all_proteins"], [59, 2, 1, "", "all_refs"], [59, 2, 1, "", "annotate_complex"], [59, 2, 1, "", "browse"], [59, 2, 1, "", "complex_inference"], [59, 2, 1, "", "coverage"], [59, 2, 1, "", "curation_effort"], [59, 2, 1, "", "get_names"], [59, 2, 1, "", "get_reference_set"], [59, 2, 1, "", "get_subset"], [59, 2, 1, "", "get_subset_bool_array"], [59, 2, 1, "", "get_values"], [59, 2, 1, "", "labels"], [59, 2, 1, "", "load"], [59, 2, 1, "", "load_data"], [59, 2, 1, "", "load_proteins"], [59, 2, 1, "", "make_df"], [59, 2, 1, "", "numof_entities"], [59, 2, 1, "", "numof_records"], [59, 2, 1, "", "numof_references"], [59, 2, 1, "", "process"], [59, 2, 1, "", "reload"], [59, 2, 1, "", "select"], [59, 2, 1, "", "set_method"], [59, 2, 1, "", "set_reference_set"], [59, 2, 1, "", "show"], [59, 2, 1, "", "subset_intersection"], [59, 2, 1, "", "to_array"], [59, 2, 1, "", "to_bool_array"], [59, 2, 1, "", "to_set"]], "pypath.core.annot.Locate": [[60, 2, 1, "", "__init__"], [60, 2, 1, "", "add_complexes_by_inference"], [60, 2, 1, "", "all_complexes"], [60, 2, 1, "", "all_entities"], [60, 2, 1, "", "all_mirnas"], [60, 2, 1, "", "all_proteins"], [60, 2, 1, "", "all_refs"], [60, 2, 1, "", "annotate_complex"], [60, 2, 1, "", "browse"], [60, 2, 1, "", "complex_inference"], [60, 2, 1, "", "coverage"], [60, 2, 1, "", "curation_effort"], [60, 2, 1, "", "get_names"], [60, 2, 1, "", "get_reference_set"], [60, 2, 1, "", "get_subset"], [60, 2, 1, "", "get_subset_bool_array"], [60, 2, 1, "", "get_values"], [60, 2, 1, "", "labels"], [60, 2, 1, "", "load"], [60, 2, 1, "", "load_data"], [60, 2, 1, "", "load_proteins"], [60, 2, 1, "", "make_df"], [60, 2, 1, "", "numof_entities"], [60, 2, 1, "", "numof_records"], [60, 2, 1, "", "numof_references"], [60, 2, 1, "", "process"], [60, 2, 1, "", "reload"], [60, 2, 1, "", "select"], [60, 2, 1, "", "set_method"], [60, 2, 1, "", "set_reference_set"], [60, 2, 1, "", "show"], [60, 2, 1, "", "subset_intersection"], [60, 2, 1, "", "to_array"], [60, 2, 1, "", "to_bool_array"], [60, 2, 1, "", "to_set"]], "pypath.core.annot.Lrdb": [[61, 2, 1, "", "__init__"], [61, 2, 1, "", "add_complexes_by_inference"], [61, 2, 1, "", "all_complexes"], [61, 2, 1, "", "all_entities"], [61, 2, 1, "", "all_mirnas"], [61, 2, 1, "", "all_proteins"], [61, 2, 1, "", "all_refs"], [61, 2, 1, "", "annotate_complex"], [61, 2, 1, "", "browse"], [61, 2, 1, "", "complex_inference"], [61, 2, 1, "", "coverage"], [61, 2, 1, "", "curation_effort"], [61, 2, 1, "", "get_names"], [61, 2, 1, "", "get_reference_set"], [61, 2, 1, "", "get_subset"], [61, 2, 1, "", "get_subset_bool_array"], [61, 2, 1, "", "get_values"], [61, 2, 1, "", "labels"], [61, 2, 1, "", "load"], [61, 2, 1, "", "load_data"], [61, 2, 1, "", "load_proteins"], [61, 2, 1, "", "make_df"], [61, 2, 1, "", "numof_entities"], [61, 2, 1, "", "numof_records"], [61, 2, 1, "", "numof_references"], [61, 2, 1, "", "process"], [61, 2, 1, "", "reload"], [61, 2, 1, "", "select"], [61, 2, 1, "", "set_method"], [61, 2, 1, "", "set_reference_set"], [61, 2, 1, "", "show"], [61, 2, 1, "", "subset_intersection"], [61, 2, 1, "", "to_array"], [61, 2, 1, "", "to_bool_array"], [61, 2, 1, "", "to_set"]], "pypath.core.annot.Matrisome": [[62, 2, 1, "", "__init__"], [62, 2, 1, "", "add_complexes_by_inference"], [62, 2, 1, "", "all_complexes"], [62, 2, 1, "", "all_entities"], [62, 2, 1, "", "all_mirnas"], [62, 2, 1, "", "all_proteins"], [62, 2, 1, "", "all_refs"], [62, 2, 1, "", "annotate_complex"], [62, 2, 1, "", "browse"], [62, 2, 1, "", "complex_inference"], [62, 2, 1, "", "coverage"], [62, 2, 1, "", "curation_effort"], [62, 2, 1, "", "get_names"], [62, 2, 1, "", "get_reference_set"], [62, 2, 1, "", "get_subset"], [62, 2, 1, "", "get_subset_bool_array"], [62, 2, 1, "", "get_values"], [62, 2, 1, "", "labels"], [62, 2, 1, "", "load"], [62, 2, 1, "", "load_data"], [62, 2, 1, "", "load_proteins"], [62, 2, 1, "", "make_df"], [62, 2, 1, "", "numof_entities"], [62, 2, 1, "", "numof_records"], [62, 2, 1, "", "numof_references"], [62, 2, 1, "", "process"], [62, 2, 1, "", "reload"], [62, 2, 1, "", "select"], [62, 2, 1, "", "set_method"], [62, 2, 1, "", "set_reference_set"], [62, 2, 1, "", "show"], [62, 2, 1, "", "subset_intersection"], [62, 2, 1, "", "to_array"], [62, 2, 1, "", "to_bool_array"], [62, 2, 1, "", "to_set"]], "pypath.core.annot.Matrixdb": [[63, 2, 1, "", "__init__"], [63, 2, 1, "", "add_complexes_by_inference"], [63, 2, 1, "", "all_complexes"], [63, 2, 1, "", "all_entities"], [63, 2, 1, "", "all_mirnas"], [63, 2, 1, "", "all_proteins"], [63, 2, 1, "", "all_refs"], [63, 2, 1, "", "annotate_complex"], [63, 2, 1, "", "browse"], [63, 2, 1, "", "complex_inference"], [63, 2, 1, "", "coverage"], [63, 2, 1, "", "curation_effort"], [63, 2, 1, "", "get_names"], [63, 2, 1, "", "get_reference_set"], [63, 2, 1, "", "get_subset"], [63, 2, 1, "", "get_subset_bool_array"], [63, 2, 1, "", "get_values"], [63, 2, 1, "", "labels"], [63, 2, 1, "", "load"], [63, 2, 1, "", "load_data"], [63, 2, 1, "", "load_proteins"], [63, 2, 1, "", "make_df"], [63, 2, 1, "", "numof_entities"], [63, 2, 1, "", "numof_records"], [63, 2, 1, "", "numof_references"], [63, 2, 1, "", "process"], [63, 2, 1, "", "reload"], [63, 2, 1, "", "select"], [63, 2, 1, "", "set_method"], [63, 2, 1, "", "set_reference_set"], [63, 2, 1, "", "show"], [63, 2, 1, "", "subset_intersection"], [63, 2, 1, "", "to_array"], [63, 2, 1, "", "to_bool_array"], [63, 2, 1, "", "to_set"]], "pypath.core.annot.Mcam": [[64, 2, 1, "", "__init__"], [64, 2, 1, "", "add_complexes_by_inference"], [64, 2, 1, "", "all_complexes"], [64, 2, 1, "", "all_entities"], [64, 2, 1, "", "all_mirnas"], [64, 2, 1, "", "all_proteins"], [64, 2, 1, "", "all_refs"], [64, 2, 1, "", "annotate_complex"], [64, 2, 1, "", "browse"], [64, 2, 1, "", "complex_inference"], [64, 2, 1, "", "coverage"], [64, 2, 1, "", "curation_effort"], [64, 2, 1, "", "get_names"], [64, 2, 1, "", "get_reference_set"], [64, 2, 1, "", "get_subset"], [64, 2, 1, "", "get_subset_bool_array"], [64, 2, 1, "", "get_values"], [64, 2, 1, "", "labels"], [64, 2, 1, "", "load"], [64, 2, 1, "", "load_data"], [64, 2, 1, "", "load_proteins"], [64, 2, 1, "", "make_df"], [64, 2, 1, "", "numof_entities"], [64, 2, 1, "", "numof_records"], [64, 2, 1, "", "numof_references"], [64, 2, 1, "", "process"], [64, 2, 1, "", "reload"], [64, 2, 1, "", "select"], [64, 2, 1, "", "set_method"], [64, 2, 1, "", "set_reference_set"], [64, 2, 1, "", "show"], [64, 2, 1, "", "subset_intersection"], [64, 2, 1, "", "to_array"], [64, 2, 1, "", "to_bool_array"], [64, 2, 1, "", "to_set"]], "pypath.core.annot.Membranome": [[65, 2, 1, "", "__init__"], [65, 2, 1, "", "add_complexes_by_inference"], [65, 2, 1, "", "all_complexes"], [65, 2, 1, "", "all_entities"], [65, 2, 1, "", "all_mirnas"], [65, 2, 1, "", "all_proteins"], [65, 2, 1, "", "all_refs"], [65, 2, 1, "", "annotate_complex"], [65, 2, 1, "", "browse"], [65, 2, 1, "", "complex_inference"], [65, 2, 1, "", "coverage"], [65, 2, 1, "", "curation_effort"], [65, 2, 1, "", "get_names"], [65, 2, 1, "", "get_reference_set"], [65, 2, 1, "", "get_subset"], [65, 2, 1, "", "get_subset_bool_array"], [65, 2, 1, "", "get_values"], [65, 2, 1, "", "labels"], [65, 2, 1, "", "load"], [65, 2, 1, "", "load_data"], [65, 2, 1, "", "load_proteins"], [65, 2, 1, "", "make_df"], [65, 2, 1, "", "numof_entities"], [65, 2, 1, "", "numof_records"], [65, 2, 1, "", "numof_references"], [65, 2, 1, "", "process"], [65, 2, 1, "", "reload"], [65, 2, 1, "", "select"], [65, 2, 1, "", "set_method"], [65, 2, 1, "", "set_reference_set"], [65, 2, 1, "", "show"], [65, 2, 1, "", "subset_intersection"], [65, 2, 1, "", "to_array"], [65, 2, 1, "", "to_bool_array"], [65, 2, 1, "", "to_set"]], "pypath.core.annot.Msigdb": [[66, 2, 1, "", "__init__"], [66, 2, 1, "", "add_complexes_by_inference"], [66, 2, 1, "", "all_complexes"], [66, 2, 1, "", "all_entities"], [66, 2, 1, "", "all_mirnas"], [66, 2, 1, "", "all_proteins"], [66, 2, 1, "", "all_refs"], [66, 2, 1, "", "annotate_complex"], [66, 2, 1, "", "browse"], [66, 2, 1, "", "complex_inference"], [66, 2, 1, "", "coverage"], [66, 2, 1, "", "curation_effort"], [66, 2, 1, "", "get_names"], [66, 2, 1, "", "get_reference_set"], [66, 2, 1, "", "get_subset"], [66, 2, 1, "", "get_subset_bool_array"], [66, 2, 1, "", "get_values"], [66, 2, 1, "", "labels"], [66, 2, 1, "", "load"], [66, 2, 1, "", "load_data"], [66, 2, 1, "", "load_proteins"], [66, 2, 1, "", "make_df"], [66, 2, 1, "", "numof_entities"], [66, 2, 1, "", "numof_records"], [66, 2, 1, "", "numof_references"], [66, 2, 1, "", "process"], [66, 2, 1, "", "reload"], [66, 2, 1, "", "select"], [66, 2, 1, "", "set_method"], [66, 2, 1, "", "set_reference_set"], [66, 2, 1, "", "show"], [66, 2, 1, "", "subset_intersection"], [66, 2, 1, "", "to_array"], [66, 2, 1, "", "to_bool_array"], [66, 2, 1, "", "to_set"]], "pypath.core.annot.NetpathPathways": [[67, 2, 1, "", "__init__"], [67, 2, 1, "", "add_complexes_by_inference"], [67, 2, 1, "", "all_complexes"], [67, 2, 1, "", "all_entities"], [67, 2, 1, "", "all_mirnas"], [67, 2, 1, "", "all_proteins"], [67, 2, 1, "", "all_refs"], [67, 2, 1, "", "annotate_complex"], [67, 2, 1, "", "browse"], [67, 2, 1, "", "complex_inference"], [67, 2, 1, "", "coverage"], [67, 2, 1, "", "curation_effort"], [67, 2, 1, "", "get_names"], [67, 2, 1, "", "get_reference_set"], [67, 2, 1, "", "get_subset"], [67, 2, 1, "", "get_subset_bool_array"], [67, 2, 1, "", "get_values"], [67, 2, 1, "", "labels"], [67, 2, 1, "", "load"], [67, 2, 1, "", "load_data"], [67, 2, 1, "", "load_proteins"], [67, 2, 1, "", "make_df"], [67, 2, 1, "", "numof_entities"], [67, 2, 1, "", "numof_records"], [67, 2, 1, "", "numof_references"], [67, 2, 1, "", "process"], [67, 2, 1, "", "reload"], [67, 2, 1, "", "select"], [67, 2, 1, "", "set_method"], [67, 2, 1, "", "set_reference_set"], [67, 2, 1, "", "show"], [67, 2, 1, "", "subset_intersection"], [67, 2, 1, "", "to_array"], [67, 2, 1, "", "to_bool_array"], [67, 2, 1, "", "to_set"]], "pypath.core.annot.Opm": [[68, 2, 1, "", "__init__"], [68, 2, 1, "", "add_complexes_by_inference"], [68, 2, 1, "", "all_complexes"], [68, 2, 1, "", "all_entities"], [68, 2, 1, "", "all_mirnas"], [68, 2, 1, "", "all_proteins"], [68, 2, 1, "", "all_refs"], [68, 2, 1, "", "annotate_complex"], [68, 2, 1, "", "browse"], [68, 2, 1, "", "complex_inference"], [68, 2, 1, "", "coverage"], [68, 2, 1, "", "curation_effort"], [68, 2, 1, "", "get_names"], [68, 2, 1, "", "get_reference_set"], [68, 2, 1, "", "get_subset"], [68, 2, 1, "", "get_subset_bool_array"], [68, 2, 1, "", "get_values"], [68, 2, 1, "", "labels"], [68, 2, 1, "", "load"], [68, 2, 1, "", "load_data"], [68, 2, 1, "", "load_proteins"], [68, 2, 1, "", "make_df"], [68, 2, 1, "", "numof_entities"], [68, 2, 1, "", "numof_records"], [68, 2, 1, "", "numof_references"], [68, 2, 1, "", "process"], [68, 2, 1, "", "reload"], [68, 2, 1, "", "select"], [68, 2, 1, "", "set_method"], [68, 2, 1, "", "set_reference_set"], [68, 2, 1, "", "show"], [68, 2, 1, "", "subset_intersection"], [68, 2, 1, "", "to_array"], [68, 2, 1, "", "to_bool_array"], [68, 2, 1, "", "to_set"]], "pypath.core.annot.Panglaodb": [[69, 2, 1, "", "__init__"], [69, 2, 1, "", "add_complexes_by_inference"], [69, 2, 1, "", "all_complexes"], [69, 2, 1, "", "all_entities"], [69, 2, 1, "", "all_mirnas"], [69, 2, 1, "", "all_proteins"], [69, 2, 1, "", "all_refs"], [69, 2, 1, "", "annotate_complex"], [69, 2, 1, "", "browse"], [69, 2, 1, "", "complex_inference"], [69, 2, 1, "", "coverage"], [69, 2, 1, "", "curation_effort"], [69, 2, 1, "", "get_names"], [69, 2, 1, "", "get_reference_set"], [69, 2, 1, "", "get_subset"], [69, 2, 1, "", "get_subset_bool_array"], [69, 2, 1, "", "get_values"], [69, 2, 1, "", "labels"], [69, 2, 1, "", "load"], [69, 2, 1, "", "load_data"], [69, 2, 1, "", "load_proteins"], [69, 2, 1, "", "make_df"], [69, 2, 1, "", "numof_entities"], [69, 2, 1, "", "numof_records"], [69, 2, 1, "", "numof_references"], [69, 2, 1, "", "process"], [69, 2, 1, "", "reload"], [69, 2, 1, "", "select"], [69, 2, 1, "", "set_method"], [69, 2, 1, "", "set_reference_set"], [69, 2, 1, "", "show"], [69, 2, 1, "", "subset_intersection"], [69, 2, 1, "", "to_array"], [69, 2, 1, "", "to_bool_array"], [69, 2, 1, "", "to_set"]], "pypath.core.annot.Phobius": [[70, 2, 1, "", "__init__"], [70, 2, 1, "", "add_complexes_by_inference"], [70, 2, 1, "", "all_complexes"], [70, 2, 1, "", "all_entities"], [70, 2, 1, "", "all_mirnas"], [70, 2, 1, "", "all_proteins"], [70, 2, 1, "", "all_refs"], [70, 2, 1, "", "annotate_complex"], [70, 2, 1, "", "browse"], [70, 2, 1, "", "complex_inference"], [70, 2, 1, "", "coverage"], [70, 2, 1, "", "curation_effort"], [70, 2, 1, "", "get_names"], [70, 2, 1, "", "get_reference_set"], [70, 2, 1, "", "get_subset"], [70, 2, 1, "", "get_subset_bool_array"], [70, 2, 1, "", "get_values"], [70, 2, 1, "", "labels"], [70, 2, 1, "", "load"], [70, 2, 1, "", "load_data"], [70, 2, 1, "", "load_proteins"], [70, 2, 1, "", "make_df"], [70, 2, 1, "", "numof_entities"], [70, 2, 1, "", "numof_records"], [70, 2, 1, "", "numof_references"], [70, 2, 1, "", "process"], [70, 2, 1, "", "reload"], [70, 2, 1, "", "select"], [70, 2, 1, "", "set_method"], [70, 2, 1, "", "set_reference_set"], [70, 2, 1, "", "show"], [70, 2, 1, "", "subset_intersection"], [70, 2, 1, "", "to_array"], [70, 2, 1, "", "to_bool_array"], [70, 2, 1, "", "to_set"]], "pypath.core.annot.Phosphatome": [[71, 2, 1, "", "__init__"], [71, 2, 1, "", "add_complexes_by_inference"], [71, 2, 1, "", "all_complexes"], [71, 2, 1, "", "all_entities"], [71, 2, 1, "", "all_mirnas"], [71, 2, 1, "", "all_proteins"], [71, 2, 1, "", "all_refs"], [71, 2, 1, "", "annotate_complex"], [71, 2, 1, "", "browse"], [71, 2, 1, "", "complex_inference"], [71, 2, 1, "", "coverage"], [71, 2, 1, "", "curation_effort"], [71, 2, 1, "", "get_names"], [71, 2, 1, "", "get_reference_set"], [71, 2, 1, "", "get_subset"], [71, 2, 1, "", "get_subset_bool_array"], [71, 2, 1, "", "get_values"], [71, 2, 1, "", "labels"], [71, 2, 1, "", "load"], [71, 2, 1, "", "load_data"], [71, 2, 1, "", "load_proteins"], [71, 2, 1, "", "make_df"], [71, 2, 1, "", "numof_entities"], [71, 2, 1, "", "numof_records"], [71, 2, 1, "", "numof_references"], [71, 2, 1, "", "process"], [71, 2, 1, "", "reload"], [71, 2, 1, "", "select"], [71, 2, 1, "", "set_method"], [71, 2, 1, "", "set_reference_set"], [71, 2, 1, "", "show"], [71, 2, 1, "", "subset_intersection"], [71, 2, 1, "", "to_array"], [71, 2, 1, "", "to_bool_array"], [71, 2, 1, "", "to_set"]], "pypath.core.annot.Progeny": [[72, 2, 1, "", "__init__"], [72, 2, 1, "", "add_complexes_by_inference"], [72, 2, 1, "", "all_complexes"], [72, 2, 1, "", "all_entities"], [72, 2, 1, "", "all_mirnas"], [72, 2, 1, "", "all_proteins"], [72, 2, 1, "", "all_refs"], [72, 2, 1, "", "annotate_complex"], [72, 2, 1, "", "browse"], [72, 2, 1, "", "complex_inference"], [72, 2, 1, "", "coverage"], [72, 2, 1, "", "curation_effort"], [72, 2, 1, "", "get_names"], [72, 2, 1, "", "get_reference_set"], [72, 2, 1, "", "get_subset"], [72, 2, 1, "", "get_subset_bool_array"], [72, 2, 1, "", "get_values"], [72, 2, 1, "", "labels"], [72, 2, 1, "", "load"], [72, 2, 1, "", "load_data"], [72, 2, 1, "", "load_proteins"], [72, 2, 1, "", "make_df"], [72, 2, 1, "", "numof_entities"], [72, 2, 1, "", "numof_records"], [72, 2, 1, "", "numof_references"], [72, 2, 1, "", "process"], [72, 2, 1, "", "reload"], [72, 2, 1, "", "select"], [72, 2, 1, "", "set_method"], [72, 2, 1, "", "set_reference_set"], [72, 2, 1, "", "show"], [72, 2, 1, "", "subset_intersection"], [72, 2, 1, "", "to_array"], [72, 2, 1, "", "to_bool_array"], [72, 2, 1, "", "to_set"]], "pypath.core.annot.Ramilowski2015": [[73, 2, 1, "", "__init__"], [73, 2, 1, "", "add_complexes_by_inference"], [73, 2, 1, "", "all_complexes"], [73, 2, 1, "", "all_entities"], [73, 2, 1, "", "all_mirnas"], [73, 2, 1, "", "all_proteins"], [73, 2, 1, "", "all_refs"], [73, 2, 1, "", "annotate_complex"], [73, 2, 1, "", "browse"], [73, 2, 1, "", "complex_inference"], [73, 2, 1, "", "coverage"], [73, 2, 1, "", "curation_effort"], [73, 2, 1, "", "get_names"], [73, 2, 1, "", "get_reference_set"], [73, 2, 1, "", "get_subset"], [73, 2, 1, "", "get_subset_bool_array"], [73, 2, 1, "", "get_values"], [73, 2, 1, "", "labels"], [73, 2, 1, "", "load"], [73, 2, 1, "", "load_data"], [73, 2, 1, "", "load_proteins"], [73, 2, 1, "", "make_df"], [73, 2, 1, "", "numof_entities"], [73, 2, 1, "", "numof_records"], [73, 2, 1, "", "numof_references"], [73, 2, 1, "", "process"], [73, 2, 1, "", "reload"], [73, 2, 1, "", "select"], [73, 2, 1, "", "set_method"], [73, 2, 1, "", "set_reference_set"], [73, 2, 1, "", "show"], [73, 2, 1, "", "subset_intersection"], [73, 2, 1, "", "to_array"], [73, 2, 1, "", "to_bool_array"], [73, 2, 1, "", "to_set"]], "pypath.core.annot.Ramilowski2015Location": [[74, 2, 1, "", "__init__"], [74, 2, 1, "", "add_complexes_by_inference"], [74, 2, 1, "", "all_complexes"], [74, 2, 1, "", "all_entities"], [74, 2, 1, "", "all_mirnas"], [74, 2, 1, "", "all_proteins"], [74, 2, 1, "", "all_refs"], [74, 2, 1, "", "annotate_complex"], [74, 2, 1, "", "browse"], [74, 2, 1, "", "complex_inference"], [74, 2, 1, "", "coverage"], [74, 2, 1, "", "curation_effort"], [74, 2, 1, "", "get_names"], [74, 2, 1, "", "get_reference_set"], [74, 2, 1, "", "get_subset"], [74, 2, 1, "", "get_subset_bool_array"], [74, 2, 1, "", "get_values"], [74, 2, 1, "", "labels"], [74, 2, 1, "", "load"], [74, 2, 1, "", "load_data"], [74, 2, 1, "", "load_proteins"], [74, 2, 1, "", "make_df"], [74, 2, 1, "", "numof_entities"], [74, 2, 1, "", "numof_records"], [74, 2, 1, "", "numof_references"], [74, 2, 1, "", "process"], [74, 2, 1, "", "reload"], [74, 2, 1, "", "select"], [74, 2, 1, "", "set_method"], [74, 2, 1, "", "set_reference_set"], [74, 2, 1, "", "show"], [74, 2, 1, "", "subset_intersection"], [74, 2, 1, "", "to_array"], [74, 2, 1, "", "to_bool_array"], [74, 2, 1, "", "to_set"]], "pypath.core.annot.Scconnect": [[75, 2, 1, "", "__init__"], [75, 2, 1, "", "add_complexes_by_inference"], [75, 2, 1, "", "all_complexes"], [75, 2, 1, "", "all_entities"], [75, 2, 1, "", "all_mirnas"], [75, 2, 1, "", "all_proteins"], [75, 2, 1, "", "all_refs"], [75, 2, 1, "", "annotate_complex"], [75, 2, 1, "", "browse"], [75, 2, 1, "", "complex_inference"], [75, 2, 1, "", "coverage"], [75, 2, 1, "", "curation_effort"], [75, 2, 1, "", "get_names"], [75, 2, 1, "", "get_reference_set"], [75, 2, 1, "", "get_subset"], [75, 2, 1, "", "get_subset_bool_array"], [75, 2, 1, "", "get_values"], [75, 2, 1, "", "labels"], [75, 2, 1, "", "load"], [75, 2, 1, "", "load_data"], [75, 2, 1, "", "load_proteins"], [75, 2, 1, "", "make_df"], [75, 2, 1, "", "numof_entities"], [75, 2, 1, "", "numof_records"], [75, 2, 1, "", "numof_references"], [75, 2, 1, "", "process"], [75, 2, 1, "", "reload"], [75, 2, 1, "", "select"], [75, 2, 1, "", "set_method"], [75, 2, 1, "", "set_reference_set"], [75, 2, 1, "", "show"], [75, 2, 1, "", "subset_intersection"], [75, 2, 1, "", "to_array"], [75, 2, 1, "", "to_bool_array"], [75, 2, 1, "", "to_set"]], "pypath.core.annot.ScconnectComplex": [[76, 2, 1, "", "__init__"], [76, 2, 1, "", "add_complexes_by_inference"], [76, 2, 1, "", "all_complexes"], [76, 2, 1, "", "all_entities"], [76, 2, 1, "", "all_mirnas"], [76, 2, 1, "", "all_proteins"], [76, 2, 1, "", "all_refs"], [76, 2, 1, "", "annotate_complex"], [76, 2, 1, "", "browse"], [76, 2, 1, "", "complex_inference"], [76, 2, 1, "", "coverage"], [76, 2, 1, "", "curation_effort"], [76, 2, 1, "", "get_names"], [76, 2, 1, "", "get_reference_set"], [76, 2, 1, "", "get_subset"], [76, 2, 1, "", "get_subset_bool_array"], [76, 2, 1, "", "get_values"], [76, 2, 1, "", "labels"], [76, 2, 1, "", "load"], [76, 2, 1, "", "load_data"], [76, 2, 1, "", "load_proteins"], [76, 2, 1, "", "make_df"], [76, 2, 1, "", "numof_entities"], [76, 2, 1, "", "numof_records"], [76, 2, 1, "", "numof_references"], [76, 2, 1, "", "process"], [76, 2, 1, "", "reload"], [76, 2, 1, "", "select"], [76, 2, 1, "", "set_method"], [76, 2, 1, "", "set_reference_set"], [76, 2, 1, "", "show"], [76, 2, 1, "", "subset_intersection"], [76, 2, 1, "", "to_array"], [76, 2, 1, "", "to_bool_array"], [76, 2, 1, "", "to_set"]], "pypath.core.annot.SignalinkFunctions": [[77, 2, 1, "", "__init__"], [77, 2, 1, "", "add_complexes_by_inference"], [77, 2, 1, "", "all_complexes"], [77, 2, 1, "", "all_entities"], [77, 2, 1, "", "all_mirnas"], [77, 2, 1, "", "all_proteins"], [77, 2, 1, "", "all_refs"], [77, 2, 1, "", "annotate_complex"], [77, 2, 1, "", "browse"], [77, 2, 1, "", "complex_inference"], [77, 2, 1, "", "coverage"], [77, 2, 1, "", "curation_effort"], [77, 2, 1, "", "get_names"], [77, 2, 1, "", "get_reference_set"], [77, 2, 1, "", "get_subset"], [77, 2, 1, "", "get_subset_bool_array"], [77, 2, 1, "", "get_values"], [77, 2, 1, "", "labels"], [77, 2, 1, "", "load"], [77, 2, 1, "", "load_data"], [77, 2, 1, "", "load_proteins"], [77, 2, 1, "", "make_df"], [77, 2, 1, "", "numof_entities"], [77, 2, 1, "", "numof_records"], [77, 2, 1, "", "numof_references"], [77, 2, 1, "", "process"], [77, 2, 1, "", "reload"], [77, 2, 1, "", "select"], [77, 2, 1, "", "set_method"], [77, 2, 1, "", "set_reference_set"], [77, 2, 1, "", "show"], [77, 2, 1, "", "subset_intersection"], [77, 2, 1, "", "to_array"], [77, 2, 1, "", "to_bool_array"], [77, 2, 1, "", "to_set"]], "pypath.core.annot.SignalinkPathways": [[78, 2, 1, "", "__init__"], [78, 2, 1, "", "add_complexes_by_inference"], [78, 2, 1, "", "all_complexes"], [78, 2, 1, "", "all_entities"], [78, 2, 1, "", "all_mirnas"], [78, 2, 1, "", "all_proteins"], [78, 2, 1, "", "all_refs"], [78, 2, 1, "", "annotate_complex"], [78, 2, 1, "", "browse"], [78, 2, 1, "", "complex_inference"], [78, 2, 1, "", "coverage"], [78, 2, 1, "", "curation_effort"], [78, 2, 1, "", "get_names"], [78, 2, 1, "", "get_reference_set"], [78, 2, 1, "", "get_subset"], [78, 2, 1, "", "get_subset_bool_array"], [78, 2, 1, "", "get_values"], [78, 2, 1, "", "labels"], [78, 2, 1, "", "load"], [78, 2, 1, "", "load_data"], [78, 2, 1, "", "load_proteins"], [78, 2, 1, "", "make_df"], [78, 2, 1, "", "numof_entities"], [78, 2, 1, "", "numof_records"], [78, 2, 1, "", "numof_references"], [78, 2, 1, "", "process"], [78, 2, 1, "", "reload"], [78, 2, 1, "", "select"], [78, 2, 1, "", "set_method"], [78, 2, 1, "", "set_reference_set"], [78, 2, 1, "", "show"], [78, 2, 1, "", "subset_intersection"], [78, 2, 1, "", "to_array"], [78, 2, 1, "", "to_bool_array"], [78, 2, 1, "", "to_set"]], "pypath.core.annot.SignorPathways": [[79, 2, 1, "", "__init__"], [79, 2, 1, "", "add_complexes_by_inference"], [79, 2, 1, "", "all_complexes"], [79, 2, 1, "", "all_entities"], [79, 2, 1, "", "all_mirnas"], [79, 2, 1, "", "all_proteins"], [79, 2, 1, "", "all_refs"], [79, 2, 1, "", "annotate_complex"], [79, 2, 1, "", "browse"], [79, 2, 1, "", "complex_inference"], [79, 2, 1, "", "coverage"], [79, 2, 1, "", "curation_effort"], [79, 2, 1, "", "get_names"], [79, 2, 1, "", "get_reference_set"], [79, 2, 1, "", "get_subset"], [79, 2, 1, "", "get_subset_bool_array"], [79, 2, 1, "", "get_values"], [79, 2, 1, "", "labels"], [79, 2, 1, "", "load"], [79, 2, 1, "", "load_data"], [79, 2, 1, "", "load_proteins"], [79, 2, 1, "", "make_df"], [79, 2, 1, "", "numof_entities"], [79, 2, 1, "", "numof_records"], [79, 2, 1, "", "numof_references"], [79, 2, 1, "", "process"], [79, 2, 1, "", "reload"], [79, 2, 1, "", "select"], [79, 2, 1, "", "set_method"], [79, 2, 1, "", "set_reference_set"], [79, 2, 1, "", "show"], [79, 2, 1, "", "subset_intersection"], [79, 2, 1, "", "to_array"], [79, 2, 1, "", "to_bool_array"], [79, 2, 1, "", "to_set"]], "pypath.core.annot.Surfaceome": [[80, 2, 1, "", "__init__"], [80, 2, 1, "", "add_complexes_by_inference"], [80, 2, 1, "", "all_complexes"], [80, 2, 1, "", "all_entities"], [80, 2, 1, "", "all_mirnas"], [80, 2, 1, "", "all_proteins"], [80, 2, 1, "", "all_refs"], [80, 2, 1, "", "annotate_complex"], [80, 2, 1, "", "browse"], [80, 2, 1, "", "complex_inference"], [80, 2, 1, "", "coverage"], [80, 2, 1, "", "curation_effort"], [80, 2, 1, "", "get_names"], [80, 2, 1, "", "get_reference_set"], [80, 2, 1, "", "get_subset"], [80, 2, 1, "", "get_subset_bool_array"], [80, 2, 1, "", "get_values"], [80, 2, 1, "", "labels"], [80, 2, 1, "", "load"], [80, 2, 1, "", "load_data"], [80, 2, 1, "", "load_proteins"], [80, 2, 1, "", "make_df"], [80, 2, 1, "", "numof_entities"], [80, 2, 1, "", "numof_records"], [80, 2, 1, "", "numof_references"], [80, 2, 1, "", "process"], [80, 2, 1, "", "reload"], [80, 2, 1, "", "select"], [80, 2, 1, "", "set_method"], [80, 2, 1, "", "set_reference_set"], [80, 2, 1, "", "show"], [80, 2, 1, "", "subset_intersection"], [80, 2, 1, "", "to_array"], [80, 2, 1, "", "to_bool_array"], [80, 2, 1, "", "to_set"]], "pypath.core.annot.Talklr": [[81, 2, 1, "", "__init__"], [81, 2, 1, "", "add_complexes_by_inference"], [81, 2, 1, "", "all_complexes"], [81, 2, 1, "", "all_entities"], [81, 2, 1, "", "all_mirnas"], [81, 2, 1, "", "all_proteins"], [81, 2, 1, "", "all_refs"], [81, 2, 1, "", "annotate_complex"], [81, 2, 1, "", "browse"], [81, 2, 1, "", "complex_inference"], [81, 2, 1, "", "coverage"], [81, 2, 1, "", "curation_effort"], [81, 2, 1, "", "get_names"], [81, 2, 1, "", "get_reference_set"], [81, 2, 1, "", "get_subset"], [81, 2, 1, "", "get_subset_bool_array"], [81, 2, 1, "", "get_values"], [81, 2, 1, "", "labels"], [81, 2, 1, "", "load"], [81, 2, 1, "", "load_data"], [81, 2, 1, "", "load_proteins"], [81, 2, 1, "", "make_df"], [81, 2, 1, "", "numof_entities"], [81, 2, 1, "", "numof_records"], [81, 2, 1, "", "numof_references"], [81, 2, 1, "", "process"], [81, 2, 1, "", "reload"], [81, 2, 1, "", "select"], [81, 2, 1, "", "set_method"], [81, 2, 1, "", "set_reference_set"], [81, 2, 1, "", "show"], [81, 2, 1, "", "subset_intersection"], [81, 2, 1, "", "to_array"], [81, 2, 1, "", "to_bool_array"], [81, 2, 1, "", "to_set"]], "pypath.core.annot.Tcdb": [[82, 2, 1, "", "__init__"], [82, 2, 1, "", "add_complexes_by_inference"], [82, 2, 1, "", "all_complexes"], [82, 2, 1, "", "all_entities"], [82, 2, 1, "", "all_mirnas"], [82, 2, 1, "", "all_proteins"], [82, 2, 1, "", "all_refs"], [82, 2, 1, "", "annotate_complex"], [82, 2, 1, "", "browse"], [82, 2, 1, "", "complex_inference"], [82, 2, 1, "", "coverage"], [82, 2, 1, "", "curation_effort"], [82, 2, 1, "", "get_names"], [82, 2, 1, "", "get_reference_set"], [82, 2, 1, "", "get_subset"], [82, 2, 1, "", "get_subset_bool_array"], [82, 2, 1, "", "get_values"], [82, 2, 1, "", "labels"], [82, 2, 1, "", "load"], [82, 2, 1, "", "load_data"], [82, 2, 1, "", "load_proteins"], [82, 2, 1, "", "make_df"], [82, 2, 1, "", "numof_entities"], [82, 2, 1, "", "numof_records"], [82, 2, 1, "", "numof_references"], [82, 2, 1, "", "process"], [82, 2, 1, "", "reload"], [82, 2, 1, "", "select"], [82, 2, 1, "", "set_method"], [82, 2, 1, "", "set_reference_set"], [82, 2, 1, "", "show"], [82, 2, 1, "", "subset_intersection"], [82, 2, 1, "", "to_array"], [82, 2, 1, "", "to_bool_array"], [82, 2, 1, "", "to_set"]], "pypath.core.annot.Tfcensus": [[83, 2, 1, "", "__init__"], [83, 2, 1, "", "add_complexes_by_inference"], [83, 2, 1, "", "all_complexes"], [83, 2, 1, "", "all_entities"], [83, 2, 1, "", "all_mirnas"], [83, 2, 1, "", "all_proteins"], [83, 2, 1, "", "all_refs"], [83, 2, 1, "", "annotate_complex"], [83, 2, 1, "", "browse"], [83, 2, 1, "", "complex_inference"], [83, 2, 1, "", "coverage"], [83, 2, 1, "", "curation_effort"], [83, 2, 1, "", "get_names"], [83, 2, 1, "", "get_reference_set"], [83, 2, 1, "", "get_subset"], [83, 2, 1, "", "get_subset_bool_array"], [83, 2, 1, "", "get_values"], [83, 2, 1, "", "labels"], [83, 2, 1, "", "load"], [83, 2, 1, "", "load_data"], [83, 2, 1, "", "load_proteins"], [83, 2, 1, "", "make_df"], [83, 2, 1, "", "numof_entities"], [83, 2, 1, "", "numof_records"], [83, 2, 1, "", "numof_references"], [83, 2, 1, "", "process"], [83, 2, 1, "", "reload"], [83, 2, 1, "", "select"], [83, 2, 1, "", "set_method"], [83, 2, 1, "", "set_reference_set"], [83, 2, 1, "", "show"], [83, 2, 1, "", "subset_intersection"], [83, 2, 1, "", "to_array"], [83, 2, 1, "", "to_bool_array"], [83, 2, 1, "", "to_set"]], "pypath.core.annot.Topdb": [[84, 2, 1, "", "__init__"], [84, 2, 1, "", "add_complexes_by_inference"], [84, 2, 1, "", "all_complexes"], [84, 2, 1, "", "all_entities"], [84, 2, 1, "", "all_mirnas"], [84, 2, 1, "", "all_proteins"], [84, 2, 1, "", "all_refs"], [84, 2, 1, "", "annotate_complex"], [84, 2, 1, "", "browse"], [84, 2, 1, "", "complex_inference"], [84, 2, 1, "", "coverage"], [84, 2, 1, "", "curation_effort"], [84, 2, 1, "", "get_names"], [84, 2, 1, "", "get_reference_set"], [84, 2, 1, "", "get_subset"], [84, 2, 1, "", "get_subset_bool_array"], [84, 2, 1, "", "get_values"], [84, 2, 1, "", "labels"], [84, 2, 1, "", "load"], [84, 2, 1, "", "load_data"], [84, 2, 1, "", "load_proteins"], [84, 2, 1, "", "make_df"], [84, 2, 1, "", "numof_entities"], [84, 2, 1, "", "numof_records"], [84, 2, 1, "", "numof_references"], [84, 2, 1, "", "process"], [84, 2, 1, "", "reload"], [84, 2, 1, "", "select"], [84, 2, 1, "", "set_method"], [84, 2, 1, "", "set_reference_set"], [84, 2, 1, "", "show"], [84, 2, 1, "", "subset_intersection"], [84, 2, 1, "", "to_array"], [84, 2, 1, "", "to_bool_array"], [84, 2, 1, "", "to_set"]], "pypath.core.annot.UniprotFamilies": [[85, 2, 1, "", "__init__"], [85, 2, 1, "", "add_complexes_by_inference"], [85, 2, 1, "", "all_complexes"], [85, 2, 1, "", "all_entities"], [85, 2, 1, "", "all_mirnas"], [85, 2, 1, "", "all_proteins"], [85, 2, 1, "", "all_refs"], [85, 2, 1, "", "annotate_complex"], [85, 2, 1, "", "browse"], [85, 2, 1, "", "complex_inference"], [85, 2, 1, "", "coverage"], [85, 2, 1, "", "curation_effort"], [85, 2, 1, "", "get_names"], [85, 2, 1, "", "get_reference_set"], [85, 2, 1, "", "get_subset"], [85, 2, 1, "", "get_subset_bool_array"], [85, 2, 1, "", "get_values"], [85, 2, 1, "", "labels"], [85, 2, 1, "", "load"], [85, 2, 1, "", "load_data"], [85, 2, 1, "", "load_proteins"], [85, 2, 1, "", "make_df"], [85, 2, 1, "", "numof_entities"], [85, 2, 1, "", "numof_records"], [85, 2, 1, "", "numof_references"], [85, 2, 1, "", "process"], [85, 2, 1, "", "reload"], [85, 2, 1, "", "select"], [85, 2, 1, "", "set_method"], [85, 2, 1, "", "set_reference_set"], [85, 2, 1, "", "show"], [85, 2, 1, "", "subset_intersection"], [85, 2, 1, "", "to_array"], [85, 2, 1, "", "to_bool_array"], [85, 2, 1, "", "to_set"]], "pypath.core.annot.UniprotKeywords": [[86, 2, 1, "", "__init__"], [86, 2, 1, "", "add_complexes_by_inference"], [86, 2, 1, "", "all_complexes"], [86, 2, 1, "", "all_entities"], [86, 2, 1, "", "all_mirnas"], [86, 2, 1, "", "all_proteins"], [86, 2, 1, "", "all_refs"], [86, 2, 1, "", "annotate_complex"], [86, 2, 1, "", "browse"], [86, 2, 1, "", "complex_inference"], [86, 2, 1, "", "coverage"], [86, 2, 1, "", "curation_effort"], [86, 2, 1, "", "get_names"], [86, 2, 1, "", "get_reference_set"], [86, 2, 1, "", "get_subset"], [86, 2, 1, "", "get_subset_bool_array"], [86, 2, 1, "", "get_values"], [86, 2, 1, "", "labels"], [86, 2, 1, "", "load"], [86, 2, 1, "", "load_data"], [86, 2, 1, "", "load_proteins"], [86, 2, 1, "", "make_df"], [86, 2, 1, "", "numof_entities"], [86, 2, 1, "", "numof_records"], [86, 2, 1, "", "numof_references"], [86, 2, 1, "", "process"], [86, 2, 1, "", "reload"], [86, 2, 1, "", "select"], [86, 2, 1, "", "set_method"], [86, 2, 1, "", "set_reference_set"], [86, 2, 1, "", "show"], [86, 2, 1, "", "subset_intersection"], [86, 2, 1, "", "to_array"], [86, 2, 1, "", "to_bool_array"], [86, 2, 1, "", "to_set"]], "pypath.core.annot.UniprotLocations": [[87, 2, 1, "", "__init__"], [87, 2, 1, "", "add_complexes_by_inference"], [87, 2, 1, "", "all_complexes"], [87, 2, 1, "", "all_entities"], [87, 2, 1, "", "all_mirnas"], [87, 2, 1, "", "all_proteins"], [87, 2, 1, "", "all_refs"], [87, 2, 1, "", "annotate_complex"], [87, 2, 1, "", "browse"], [87, 2, 1, "", "complex_inference"], [87, 2, 1, "", "coverage"], [87, 2, 1, "", "curation_effort"], [87, 2, 1, "", "get_names"], [87, 2, 1, "", "get_reference_set"], [87, 2, 1, "", "get_subset"], [87, 2, 1, "", "get_subset_bool_array"], [87, 2, 1, "", "get_values"], [87, 2, 1, "", "labels"], [87, 2, 1, "", "load"], [87, 2, 1, "", "load_data"], [87, 2, 1, "", "load_proteins"], [87, 2, 1, "", "make_df"], [87, 2, 1, "", "numof_entities"], [87, 2, 1, "", "numof_records"], [87, 2, 1, "", "numof_references"], [87, 2, 1, "", "process"], [87, 2, 1, "", "reload"], [87, 2, 1, "", "select"], [87, 2, 1, "", "set_method"], [87, 2, 1, "", "set_reference_set"], [87, 2, 1, "", "show"], [87, 2, 1, "", "subset_intersection"], [87, 2, 1, "", "to_array"], [87, 2, 1, "", "to_bool_array"], [87, 2, 1, "", "to_set"]], "pypath.core.annot.UniprotTissues": [[88, 2, 1, "", "__init__"], [88, 2, 1, "", "add_complexes_by_inference"], [88, 2, 1, "", "all_complexes"], [88, 2, 1, "", "all_entities"], [88, 2, 1, "", "all_mirnas"], [88, 2, 1, "", "all_proteins"], [88, 2, 1, "", "all_refs"], [88, 2, 1, "", "annotate_complex"], [88, 2, 1, "", "browse"], [88, 2, 1, "", "complex_inference"], [88, 2, 1, "", "coverage"], [88, 2, 1, "", "curation_effort"], [88, 2, 1, "", "get_names"], [88, 2, 1, "", "get_reference_set"], [88, 2, 1, "", "get_subset"], [88, 2, 1, "", "get_subset_bool_array"], [88, 2, 1, "", "get_values"], [88, 2, 1, "", "labels"], [88, 2, 1, "", "load"], [88, 2, 1, "", "load_data"], [88, 2, 1, "", "load_proteins"], [88, 2, 1, "", "make_df"], [88, 2, 1, "", "numof_entities"], [88, 2, 1, "", "numof_records"], [88, 2, 1, "", "numof_references"], [88, 2, 1, "", "process"], [88, 2, 1, "", "reload"], [88, 2, 1, "", "select"], [88, 2, 1, "", "set_method"], [88, 2, 1, "", "set_reference_set"], [88, 2, 1, "", "show"], [88, 2, 1, "", "subset_intersection"], [88, 2, 1, "", "to_array"], [88, 2, 1, "", "to_bool_array"], [88, 2, 1, "", "to_set"]], "pypath.core.annot.UniprotTopologies": [[89, 2, 1, "", "__init__"], [89, 2, 1, "", "add_complexes_by_inference"], [89, 2, 1, "", "all_complexes"], [89, 2, 1, "", "all_entities"], [89, 2, 1, "", "all_mirnas"], [89, 2, 1, "", "all_proteins"], [89, 2, 1, "", "all_refs"], [89, 2, 1, "", "annotate_complex"], [89, 2, 1, "", "browse"], [89, 2, 1, "", "complex_inference"], [89, 2, 1, "", "coverage"], [89, 2, 1, "", "curation_effort"], [89, 2, 1, "", "get_names"], [89, 2, 1, "", "get_reference_set"], [89, 2, 1, "", "get_subset"], [89, 2, 1, "", "get_subset_bool_array"], [89, 2, 1, "", "get_values"], [89, 2, 1, "", "labels"], [89, 2, 1, "", "load"], [89, 2, 1, "", "load_data"], [89, 2, 1, "", "load_proteins"], [89, 2, 1, "", "make_df"], [89, 2, 1, "", "numof_entities"], [89, 2, 1, "", "numof_records"], [89, 2, 1, "", "numof_references"], [89, 2, 1, "", "process"], [89, 2, 1, "", "reload"], [89, 2, 1, "", "select"], [89, 2, 1, "", "set_method"], [89, 2, 1, "", "set_reference_set"], [89, 2, 1, "", "show"], [89, 2, 1, "", "subset_intersection"], [89, 2, 1, "", "to_array"], [89, 2, 1, "", "to_bool_array"], [89, 2, 1, "", "to_set"]], "pypath.core.annot.Vesiclepedia": [[90, 2, 1, "", "__init__"], [90, 2, 1, "", "add_complexes_by_inference"], [90, 2, 1, "", "all_complexes"], [90, 2, 1, "", "all_entities"], [90, 2, 1, "", "all_mirnas"], [90, 2, 1, "", "all_proteins"], [90, 2, 1, "", "all_refs"], [90, 2, 1, "", "annotate_complex"], [90, 2, 1, "", "browse"], [90, 2, 1, "", "complex_inference"], [90, 2, 1, "", "coverage"], [90, 2, 1, "", "curation_effort"], [90, 2, 1, "", "get_names"], [90, 2, 1, "", "get_reference_set"], [90, 2, 1, "", "get_subset"], [90, 2, 1, "", "get_subset_bool_array"], [90, 2, 1, "", "get_values"], [90, 2, 1, "", "labels"], [90, 2, 1, "", "load"], [90, 2, 1, "", "load_data"], [90, 2, 1, "", "load_proteins"], [90, 2, 1, "", "make_df"], [90, 2, 1, "", "numof_entities"], [90, 2, 1, "", "numof_records"], [90, 2, 1, "", "numof_references"], [90, 2, 1, "", "process"], [90, 2, 1, "", "reload"], [90, 2, 1, "", "select"], [90, 2, 1, "", "set_method"], [90, 2, 1, "", "set_reference_set"], [90, 2, 1, "", "show"], [90, 2, 1, "", "subset_intersection"], [90, 2, 1, "", "to_array"], [90, 2, 1, "", "to_bool_array"], [90, 2, 1, "", "to_set"]], "pypath.core.annot.Wang": [[91, 2, 1, "", "__init__"], [91, 2, 1, "", "add_complexes_by_inference"], [91, 2, 1, "", "all_complexes"], [91, 2, 1, "", "all_entities"], [91, 2, 1, "", "all_mirnas"], [91, 2, 1, "", "all_proteins"], [91, 2, 1, "", "all_refs"], [91, 2, 1, "", "annotate_complex"], [91, 2, 1, "", "browse"], [91, 2, 1, "", "complex_inference"], [91, 2, 1, "", "coverage"], [91, 2, 1, "", "curation_effort"], [91, 2, 1, "", "get_names"], [91, 2, 1, "", "get_reference_set"], [91, 2, 1, "", "get_subset"], [91, 2, 1, "", "get_subset_bool_array"], [91, 2, 1, "", "get_values"], [91, 2, 1, "", "labels"], [91, 2, 1, "", "load"], [91, 2, 1, "", "load_data"], [91, 2, 1, "", "load_proteins"], [91, 2, 1, "", "make_df"], [91, 2, 1, "", "numof_entities"], [91, 2, 1, "", "numof_records"], [91, 2, 1, "", "numof_references"], [91, 2, 1, "", "process"], [91, 2, 1, "", "reload"], [91, 2, 1, "", "select"], [91, 2, 1, "", "set_method"], [91, 2, 1, "", "set_reference_set"], [91, 2, 1, "", "show"], [91, 2, 1, "", "subset_intersection"], [91, 2, 1, "", "to_array"], [91, 2, 1, "", "to_bool_array"], [91, 2, 1, "", "to_set"]], "pypath.core.annot.Zhong2015": [[92, 2, 1, "", "__init__"], [92, 2, 1, "", "add_complexes_by_inference"], [92, 2, 1, "", "all_complexes"], [92, 2, 1, "", "all_entities"], [92, 2, 1, "", "all_mirnas"], [92, 2, 1, "", "all_proteins"], [92, 2, 1, "", "all_refs"], [92, 2, 1, "", "annotate_complex"], [92, 2, 1, "", "browse"], [92, 2, 1, "", "complex_inference"], [92, 2, 1, "", "coverage"], [92, 2, 1, "", "curation_effort"], [92, 2, 1, "", "get_names"], [92, 2, 1, "", "get_reference_set"], [92, 2, 1, "", "get_subset"], [92, 2, 1, "", "get_subset_bool_array"], [92, 2, 1, "", "get_values"], [92, 2, 1, "", "labels"], [92, 2, 1, "", "load"], [92, 2, 1, "", "load_data"], [92, 2, 1, "", "load_proteins"], [92, 2, 1, "", "make_df"], [92, 2, 1, "", "numof_entities"], [92, 2, 1, "", "numof_records"], [92, 2, 1, "", "numof_references"], [92, 2, 1, "", "process"], [92, 2, 1, "", "reload"], [92, 2, 1, "", "select"], [92, 2, 1, "", "set_method"], [92, 2, 1, "", "set_reference_set"], [92, 2, 1, "", "show"], [92, 2, 1, "", "subset_intersection"], [92, 2, 1, "", "to_array"], [92, 2, 1, "", "to_bool_array"], [92, 2, 1, "", "to_set"]], "pypath.core.attrs": [[96, 1, 1, "", "AttributeHandler"]], "pypath.core.attrs.AttributeHandler": [[96, 2, 1, "", "__init__"], [96, 2, 1, "", "serialize"], [96, 2, 1, "", "update_attrs"]], "pypath.core.common": [[98, 3, 1, "", "filter_network_df"]], "pypath.core.complex": [[100, 1, 1, "", "AbstractComplexResource"], [101, 1, 1, "", "CellPhoneDB"], [102, 1, 1, "", "Cellchatdb"], [103, 1, 1, "", "Cellinker"], [104, 1, 1, "", "Compleat"], [105, 1, 1, "", "ComplexAggregator"], [106, 1, 1, "", "ComplexPortal"], [107, 1, 1, "", "Corum"], [108, 1, 1, "", "GuideToPharmacology"], [109, 1, 1, "", "Havugimana"], [110, 1, 1, "", "Hpmr"], [111, 1, 1, "", "Humap"], [112, 1, 1, "", "Humap2"], [113, 1, 1, "", "Icellnet"], [114, 1, 1, "", "Kegg"], [115, 1, 1, "", "Pdb"], [116, 1, 1, "", "Signor"], [117, 1, 1, "", "Spike"], [118, 3, 1, "", "all_complexes"], [119, 3, 1, "", "get_db"], [120, 3, 1, "", "init_db"]], "pypath.core.complex.AbstractComplexResource": [[100, 2, 1, "", "__init__"], [100, 2, 1, "", "load_data"], [100, 2, 1, "", "process"], [100, 2, 1, "", "set_method"]], "pypath.core.complex.CellPhoneDB": [[101, 2, 1, "", "__init__"], [101, 2, 1, "", "load_data"], [101, 2, 1, "", "process"], [101, 2, 1, "", "set_method"]], "pypath.core.complex.Cellchatdb": [[102, 2, 1, "", "__init__"], [102, 2, 1, "", "load_data"], [102, 2, 1, "", "process"], [102, 2, 1, "", "set_method"]], "pypath.core.complex.Cellinker": [[103, 2, 1, "", "__init__"], [103, 2, 1, "", "load_data"], [103, 2, 1, "", "process"], [103, 2, 1, "", "set_method"]], "pypath.core.complex.Compleat": [[104, 2, 1, "", "__init__"], [104, 2, 1, "", "load_data"], [104, 2, 1, "", "process"], [104, 2, 1, "", "set_method"]], "pypath.core.complex.ComplexAggregator": [[105, 2, 1, "", "__init__"], [105, 2, 1, "", "load_data"], [105, 2, 1, "", "process"], [105, 2, 1, "", "reload"], [105, 2, 1, "", "set_method"]], "pypath.core.complex.ComplexPortal": [[106, 2, 1, "", "__init__"], [106, 2, 1, "", "load_data"], [106, 2, 1, "", "process"], [106, 2, 1, "", "set_method"]], "pypath.core.complex.Corum": [[107, 2, 1, "", "__init__"], [107, 2, 1, "", "load_data"], [107, 2, 1, "", "process"], [107, 2, 1, "", "set_method"]], "pypath.core.complex.GuideToPharmacology": [[108, 2, 1, "", "__init__"], [108, 2, 1, "", "load_data"], [108, 2, 1, "", "process"], [108, 2, 1, "", "set_method"]], "pypath.core.complex.Havugimana": [[109, 2, 1, "", "__init__"], [109, 2, 1, "", "load_data"], [109, 2, 1, "", "process"], [109, 2, 1, "", "set_method"]], "pypath.core.complex.Hpmr": [[110, 2, 1, "", "__init__"], [110, 2, 1, "", "load_data"], [110, 2, 1, "", "process"], [110, 2, 1, "", "set_method"]], "pypath.core.complex.Humap": [[111, 2, 1, "", "__init__"], [111, 2, 1, "", "load_data"], [111, 2, 1, "", "process"], [111, 2, 1, "", "set_method"]], "pypath.core.complex.Humap2": [[112, 2, 1, "", "__init__"], [112, 2, 1, "", "load_data"], [112, 2, 1, "", "process"], [112, 2, 1, "", "set_method"]], "pypath.core.complex.Icellnet": [[113, 2, 1, "", "__init__"], [113, 2, 1, "", "load_data"], [113, 2, 1, "", "process"], [113, 2, 1, "", "set_method"]], "pypath.core.complex.Kegg": [[114, 2, 1, "", "__init__"], [114, 2, 1, "", "load_data"], [114, 2, 1, "", "process"], [114, 2, 1, "", "set_method"]], "pypath.core.complex.Pdb": [[115, 2, 1, "", "__init__"], [115, 2, 1, "", "load_data"], [115, 2, 1, "", "process"], [115, 2, 1, "", "set_method"]], "pypath.core.complex.Signor": [[116, 2, 1, "", "__init__"], [116, 2, 1, "", "load_data"], [116, 2, 1, "", "process"], [116, 2, 1, "", "set_method"]], "pypath.core.complex.Spike": [[117, 2, 1, "", "__init__"], [117, 2, 1, "", "load_data"], [117, 2, 1, "", "process"], [117, 2, 1, "", "set_method"]], "pypath.core.entity": [[122, 1, 1, "", "Entity"], [123, 1, 1, "", "EntityKey"], [124, 1, 1, "", "EntityList"]], "pypath.core.entity.Entity": [[122, 2, 1, "", "__init__"], [122, 2, 1, "", "count_entity_type"], [122, 2, 1, "", "filter_entity_type"], [122, 2, 1, "", "serialize"], [122, 2, 1, "", "update_attrs"]], "pypath.core.entity.EntityKey": [[123, 2, 1, "", "__init__"], [123, 2, 1, "", "count"], [123, 4, 1, "", "entity_type"], [123, 4, 1, "", "id_type"], [123, 4, 1, "", "identifier"], [123, 2, 1, "", "index"], [123, 4, 1, "", "taxon"]], "pypath.core.entity.EntityList": [[124, 2, 1, "", "__init__"]], "pypath.core.enz_sub": [[126, 1, 1, "", "EnzymeSubstrateAggregator"], [127, 1, 1, "", "EnzymeSubstrateHomologyProcessor"], [128, 1, 1, "", "EnzymeSubstrateProcessor"], [129, 3, 1, "", "get_db"], [130, 3, 1, "", "init_db"]], "pypath.core.enz_sub.EnzymeSubstrateAggregator": [[126, 2, 1, "", "__init__"], [126, 2, 1, "", "assign_to_network"], [126, 2, 1, "", "build_list"], [126, 2, 1, "", "unique"]], "pypath.core.enz_sub.EnzymeSubstrateHomologyProcessor": [[127, 2, 1, "", "__init__"], [127, 2, 1, "", "asdict"], [127, 2, 1, "", "df"], [127, 2, 1, "", "load_data"], [127, 2, 1, "", "load_homologene"], [127, 2, 1, "", "ptm_orthology"], [127, 2, 1, "", "set_inputargs"], [127, 2, 1, "", "set_method"], [127, 2, 1, "", "translate"], [127, 2, 1, "", "translate_df"], [127, 2, 1, "", "translate_site"]], "pypath.core.enz_sub.EnzymeSubstrateProcessor": [[128, 2, 1, "", "__init__"], [128, 2, 1, "", "load_data"], [128, 2, 1, "", "set_inputargs"], [128, 2, 1, "", "set_method"]], "pypath.core.evidence": [[132, 1, 1, "", "Evidence"], [133, 1, 1, "", "Evidences"]], "pypath.core.evidence.Evidence": [[132, 2, 1, "", "__init__"], [132, 2, 1, "", "has_interaction_type"], [132, 2, 1, "", "merge"], [132, 2, 1, "", "reload"], [132, 2, 1, "", "serialize"], [132, 2, 1, "", "update_attrs"]], "pypath.core.evidence.Evidences": [[133, 2, 1, "", "__init__"], [133, 2, 1, "", "has_interaction_type"], [133, 2, 1, "", "items"], [133, 2, 1, "", "keys"], [133, 2, 1, "", "reload"], [133, 2, 1, "", "serialize_attrs"], [133, 5, 1, "", "simple_dict"]], "pypath.core.interaction": [[135, 1, 1, "", "Interaction"], [136, 1, 1, "", "InteractionDataFrameRecord"], [137, 1, 1, "", "InteractionKey"]], "pypath.core.interaction.Interaction": [[135, 2, 1, "", "__init__"], [135, 2, 1, "", "add_evidence"], [135, 2, 1, "", "add_sign"], [135, 2, 1, "", "complex_identifiers_by_data_model"], [135, 2, 1, "", "complex_identifiers_by_interaction_type"], [135, 2, 1, "", "complex_identifiers_by_interaction_type_and_data_model"], [135, 2, 1, "", "complex_identifiers_by_interaction_type_and_data_model_and_resource"], [135, 2, 1, "", "complex_identifiers_by_reference"], [135, 2, 1, "", "complex_identifiers_by_resource"], [135, 2, 1, "", "complex_labels_by_data_model"], [135, 2, 1, "", "complex_labels_by_interaction_type"], [135, 2, 1, "", "complex_labels_by_interaction_type_and_data_model"], [135, 2, 1, "", "complex_labels_by_interaction_type_and_data_model_and_resource"], [135, 2, 1, "", "complex_labels_by_reference"], [135, 2, 1, "", "complex_labels_by_resource"], [135, 2, 1, "", "complexes_by_data_model"], [135, 2, 1, "", "complexes_by_interaction_type"], [135, 2, 1, "", "complexes_by_interaction_type_and_data_model"], [135, 2, 1, "", "complexes_by_interaction_type_and_data_model_and_resource"], [135, 2, 1, "", "complexes_by_reference"], [135, 2, 1, "", "complexes_by_resource"], [135, 2, 1, "", "consensus"], [135, 2, 1, "", "consensus_edges"], [135, 2, 1, "", "count_complex_identifiers"], [135, 2, 1, "", "count_complex_labels"], [135, 2, 1, "", "count_complexes"], [135, 4, 1, "", "count_data_models"], [135, 4, 1, "", "count_degrees_directed"], [135, 4, 1, "", "count_degrees_directed_in"], [135, 4, 1, "", "count_degrees_directed_out"], [135, 4, 1, "", "count_degrees_negative"], [135, 4, 1, "", "count_degrees_negative_in"], [135, 4, 1, "", "count_degrees_negative_out"], [135, 4, 1, "", "count_degrees_non_directed"], [135, 4, 1, "", "count_degrees_positive"], [135, 4, 1, "", "count_degrees_positive_in"], [135, 4, 1, "", "count_degrees_positive_out"], [135, 4, 1, "", "count_degrees_signed"], [135, 4, 1, "", "count_degrees_signed_in"], [135, 4, 1, "", "count_degrees_signed_out"], [135, 4, 1, "", "count_degrees_undirected"], [135, 2, 1, "", "count_entities"], [135, 2, 1, "", "count_identifiers"], [135, 4, 1, "", "count_interaction_types"], [135, 2, 1, "", "count_interactions"], [135, 2, 1, "", "count_interactions_0"], [135, 2, 1, "", "count_interactions_directed"], [135, 2, 1, "", "count_interactions_mutual"], [135, 2, 1, "", "count_interactions_negative"], [135, 2, 1, "", "count_interactions_non_directed"], [135, 2, 1, "", "count_interactions_positive"], [135, 2, 1, "", "count_interactions_signed"], [135, 2, 1, "", "count_interactions_undirected"], [135, 2, 1, "", "count_labels"], [135, 2, 1, "", "count_lncrna_identifiers"], [135, 2, 1, "", "count_lncrna_labels"], [135, 2, 1, "", "count_lncrnas"], [135, 2, 1, "", "count_mirna_identifiers"], [135, 2, 1, "", "count_mirna_labels"], [135, 2, 1, "", "count_mirnas"], [135, 2, 1, "", "count_protein_identifiers"], [135, 2, 1, "", "count_protein_labels"], [135, 2, 1, "", "count_proteins"], [135, 4, 1, "", "count_references"], [135, 4, 1, "", "count_resource_names"], [135, 4, 1, "", "count_resource_names_via"], [135, 4, 1, "", "count_resources"], [135, 4, 1, "", "count_resources_via"], [135, 2, 1, "", "count_small_molecule_identifiers"], [135, 2, 1, "", "count_small_molecule_labels"], [135, 2, 1, "", "count_small_molecules"], [135, 4, 1, "", "data_models_by_data_model"], [135, 4, 1, "", "data_models_by_interaction_type"], [135, 4, 1, "", "data_models_by_interaction_type_and_data_model"], [135, 4, 1, "", "data_models_by_interaction_type_and_data_model_and_resource"], [135, 4, 1, "", "data_models_by_reference"], [135, 4, 1, "", "data_models_by_resource"], [135, 4, 1, "", "degrees_directed_by_data_model"], [135, 4, 1, "", "degrees_directed_by_interaction_type"], [135, 4, 1, "", "degrees_directed_by_interaction_type_and_data_model"], [135, 4, 1, "", "degrees_directed_by_interaction_type_and_data_model_and_resource"], [135, 4, 1, "", "degrees_directed_by_reference"], [135, 4, 1, "", "degrees_directed_by_resource"], [135, 4, 1, "", "degrees_directed_in_by_data_model"], [135, 4, 1, "", "degrees_directed_in_by_interaction_type"], [135, 4, 1, "", "degrees_directed_in_by_interaction_type_and_data_model"], [135, 4, 1, "", "degrees_directed_in_by_interaction_type_and_data_model_and_resource"], [135, 4, 1, "", "degrees_directed_in_by_reference"], [135, 4, 1, "", "degrees_directed_in_by_resource"], [135, 4, 1, "", "degrees_directed_out_by_data_model"], [135, 4, 1, "", "degrees_directed_out_by_interaction_type"], [135, 4, 1, "", "degrees_directed_out_by_interaction_type_and_data_model"], [135, 4, 1, "", "degrees_directed_out_by_interaction_type_and_data_model_and_resource"], [135, 4, 1, "", "degrees_directed_out_by_reference"], [135, 4, 1, "", "degrees_directed_out_by_resource"], [135, 4, 1, "", "degrees_negative_by_data_model"], [135, 4, 1, "", "degrees_negative_by_interaction_type"], [135, 4, 1, "", "degrees_negative_by_interaction_type_and_data_model"], [135, 4, 1, "", "degrees_negative_by_interaction_type_and_data_model_and_resource"], [135, 4, 1, "", "degrees_negative_by_reference"], [135, 4, 1, "", "degrees_negative_by_resource"], [135, 4, 1, "", "degrees_negative_in_by_data_model"], [135, 4, 1, "", "degrees_negative_in_by_interaction_type"], [135, 4, 1, "", "degrees_negative_in_by_interaction_type_and_data_model"], [135, 4, 1, "", "degrees_negative_in_by_interaction_type_and_data_model_and_resource"], [135, 4, 1, "", "degrees_negative_in_by_reference"], [135, 4, 1, "", "degrees_negative_in_by_resource"], [135, 4, 1, "", "degrees_negative_out_by_data_model"], [135, 4, 1, "", "degrees_negative_out_by_interaction_type"], [135, 4, 1, "", "degrees_negative_out_by_interaction_type_and_data_model"], [135, 4, 1, "", "degrees_negative_out_by_interaction_type_and_data_model_and_resource"], [135, 4, 1, "", "degrees_negative_out_by_reference"], [135, 4, 1, "", "degrees_negative_out_by_resource"], [135, 4, 1, "", "degrees_non_directed_by_data_model"], [135, 4, 1, "", "degrees_non_directed_by_interaction_type"], [135, 4, 1, "", "degrees_non_directed_by_interaction_type_and_data_model"], [135, 4, 1, "", "degrees_non_directed_by_interaction_type_and_data_model_and_resource"], [135, 4, 1, "", "degrees_non_directed_by_reference"], [135, 4, 1, "", "degrees_non_directed_by_resource"], [135, 4, 1, "", "degrees_positive_by_data_model"], [135, 4, 1, "", "degrees_positive_by_interaction_type"], [135, 4, 1, "", "degrees_positive_by_interaction_type_and_data_model"], [135, 4, 1, "", "degrees_positive_by_interaction_type_and_data_model_and_resource"], [135, 4, 1, "", "degrees_positive_by_reference"], [135, 4, 1, "", "degrees_positive_by_resource"], [135, 4, 1, "", "degrees_positive_in_by_data_model"], [135, 4, 1, "", "degrees_positive_in_by_interaction_type"], [135, 4, 1, "", "degrees_positive_in_by_interaction_type_and_data_model"], [135, 4, 1, "", "degrees_positive_in_by_interaction_type_and_data_model_and_resource"], [135, 4, 1, "", "degrees_positive_in_by_reference"], [135, 4, 1, "", "degrees_positive_in_by_resource"], [135, 4, 1, "", "degrees_positive_out_by_data_model"], [135, 4, 1, "", "degrees_positive_out_by_interaction_type"], [135, 4, 1, "", "degrees_positive_out_by_interaction_type_and_data_model"], [135, 4, 1, "", "degrees_positive_out_by_interaction_type_and_data_model_and_resource"], [135, 4, 1, "", "degrees_positive_out_by_reference"], [135, 4, 1, "", "degrees_positive_out_by_resource"], [135, 4, 1, "", "degrees_signed_by_data_model"], [135, 4, 1, "", "degrees_signed_by_interaction_type"], [135, 4, 1, "", "degrees_signed_by_interaction_type_and_data_model"], [135, 4, 1, "", "degrees_signed_by_interaction_type_and_data_model_and_resource"], [135, 4, 1, "", "degrees_signed_by_reference"], [135, 4, 1, "", "degrees_signed_by_resource"], [135, 4, 1, "", "degrees_signed_in_by_data_model"], [135, 4, 1, "", "degrees_signed_in_by_interaction_type"], [135, 4, 1, "", "degrees_signed_in_by_interaction_type_and_data_model"], [135, 4, 1, "", "degrees_signed_in_by_interaction_type_and_data_model_and_resource"], [135, 4, 1, "", "degrees_signed_in_by_reference"], [135, 4, 1, "", "degrees_signed_in_by_resource"], [135, 4, 1, "", "degrees_signed_out_by_data_model"], [135, 4, 1, "", "degrees_signed_out_by_interaction_type"], [135, 4, 1, "", "degrees_signed_out_by_interaction_type_and_data_model"], [135, 4, 1, "", "degrees_signed_out_by_interaction_type_and_data_model_and_resource"], [135, 4, 1, "", "degrees_signed_out_by_reference"], [135, 4, 1, "", "degrees_signed_out_by_resource"], [135, 4, 1, "", "degrees_undirected_by_data_model"], [135, 4, 1, "", "degrees_undirected_by_interaction_type"], [135, 4, 1, "", "degrees_undirected_by_interaction_type_and_data_model"], [135, 4, 1, "", "degrees_undirected_by_interaction_type_and_data_model_and_resource"], [135, 4, 1, "", "degrees_undirected_by_reference"], [135, 4, 1, "", "degrees_undirected_by_resource"], [135, 2, 1, "", "direction_key"], [135, 2, 1, "", "dorothea_level"], [135, 2, 1, "", "dorothea_levels"], [135, 2, 1, "", "entities_by_data_model"], [135, 2, 1, "", "entities_by_interaction_type"], [135, 2, 1, "", "entities_by_interaction_type_and_data_model"], [135, 2, 1, "", "entities_by_interaction_type_and_data_model_and_resource"], [135, 2, 1, "", "entities_by_reference"], [135, 2, 1, "", "entities_by_resource"], [135, 2, 1, "", "evaluate_evidences"], [135, 2, 1, "", "generate_df_records"], [135, 2, 1, "", "get_attr"], [135, 2, 1, "", "get_complex_identifiers"], [135, 2, 1, "", "get_complex_labels"], [135, 2, 1, "", "get_complexes"], [135, 4, 1, "", "get_data_models"], [135, 2, 1, "", "get_degrees"], [135, 4, 1, "", "get_degrees_directed"], [135, 4, 1, "", "get_degrees_directed_in"], [135, 4, 1, "", "get_degrees_directed_out"], [135, 4, 1, "", "get_degrees_negative"], [135, 4, 1, "", "get_degrees_negative_in"], [135, 4, 1, "", "get_degrees_negative_out"], [135, 4, 1, "", "get_degrees_non_directed"], [135, 4, 1, "", "get_degrees_positive"], [135, 4, 1, "", "get_degrees_positive_in"], [135, 4, 1, "", "get_degrees_positive_out"], [135, 4, 1, "", "get_degrees_signed"], [135, 4, 1, "", "get_degrees_signed_in"], [135, 4, 1, "", "get_degrees_signed_out"], [135, 4, 1, "", "get_degrees_undirected"], [135, 2, 1, "", "get_direction"], [135, 2, 1, "", "get_directions"], [135, 2, 1, "", "get_entities"], [135, 2, 1, "", "get_identifiers"], [135, 4, 1, "", "get_interaction_types"], [135, 2, 1, "", "get_interactions"], [135, 2, 1, "", "get_interactions_0"], [135, 2, 1, "", "get_interactions_directed"], [135, 2, 1, "", "get_interactions_mutual"], [135, 2, 1, "", "get_interactions_negative"], [135, 2, 1, "", "get_interactions_non_directed"], [135, 2, 1, "", "get_interactions_non_directed_0"], [135, 2, 1, "", "get_interactions_positive"], [135, 2, 1, "", "get_interactions_signed"], [135, 2, 1, "", "get_interactions_undirected"], [135, 2, 1, "", "get_interactions_undirected_0"], [135, 2, 1, "", "get_labels"], [135, 2, 1, "", "get_lncrna_identifiers"], [135, 2, 1, "", "get_lncrna_labels"], [135, 2, 1, "", "get_lncrnas"], [135, 2, 1, "", "get_mirna_identifiers"], [135, 2, 1, "", "get_mirna_labels"], [135, 2, 1, "", "get_mirnas"], [135, 2, 1, "", "get_protein_identifiers"], [135, 2, 1, "", "get_protein_labels"], [135, 2, 1, "", "get_proteins"], [135, 4, 1, "", "get_references"], [135, 4, 1, "", "get_resource_names"], [135, 4, 1, "", "get_resource_names_via"], [135, 4, 1, "", "get_resources"], [135, 4, 1, "", "get_resources_via"], [135, 2, 1, "", "get_sign"], [135, 2, 1, "", "get_small_molecule_identifiers"], [135, 2, 1, "", "get_small_molecule_labels"], [135, 2, 1, "", "get_small_molecules"], [135, 2, 1, "", "has_sign"], [135, 2, 1, "", "identifiers_by_data_model"], [135, 2, 1, "", "identifiers_by_interaction_type"], [135, 2, 1, "", "identifiers_by_interaction_type_and_data_model"], [135, 2, 1, "", "identifiers_by_interaction_type_and_data_model_and_resource"], [135, 2, 1, "", "identifiers_by_reference"], [135, 2, 1, "", "identifiers_by_resource"], [135, 4, 1, "", "interaction_types_by_data_model"], [135, 4, 1, "", "interaction_types_by_interaction_type"], [135, 4, 1, "", "interaction_types_by_interaction_type_and_data_model"], [135, 4, 1, "", "interaction_types_by_interaction_type_and_data_model_and_resource"], [135, 4, 1, "", "interaction_types_by_reference"], [135, 4, 1, "", "interaction_types_by_resource"], [135, 2, 1, "", "interactions_0_by_data_model"], [135, 2, 1, "", "interactions_0_by_interaction_type"], [135, 2, 1, "", "interactions_0_by_interaction_type_and_data_model"], [135, 2, 1, "", "interactions_0_by_interaction_type_and_data_model_and_resource"], [135, 2, 1, "", "interactions_0_by_reference"], [135, 2, 1, "", "interactions_0_by_resource"], [135, 2, 1, "", "interactions_by_data_model"], [135, 2, 1, "", "interactions_by_interaction_type"], [135, 2, 1, "", "interactions_by_interaction_type_and_data_model"], [135, 2, 1, "", "interactions_by_interaction_type_and_data_model_and_resource"], [135, 2, 1, "", "interactions_by_reference"], [135, 2, 1, "", "interactions_by_resource"], [135, 2, 1, "", "interactions_directed_by_data_model"], [135, 2, 1, "", "interactions_directed_by_interaction_type"], [135, 2, 1, "", "interactions_directed_by_interaction_type_and_data_model"], [135, 2, 1, "", "interactions_directed_by_interaction_type_and_data_model_and_resource"], [135, 2, 1, "", "interactions_directed_by_reference"], [135, 2, 1, "", "interactions_directed_by_resource"], [135, 2, 1, "", "interactions_mutual_by_data_model"], [135, 2, 1, "", "interactions_mutual_by_interaction_type"], [135, 2, 1, "", "interactions_mutual_by_interaction_type_and_data_model"], [135, 2, 1, "", "interactions_mutual_by_interaction_type_and_data_model_and_resource"], [135, 2, 1, "", "interactions_mutual_by_reference"], [135, 2, 1, "", "interactions_mutual_by_resource"], [135, 2, 1, "", "interactions_negative_by_data_model"], [135, 2, 1, "", "interactions_negative_by_interaction_type"], [135, 2, 1, "", "interactions_negative_by_interaction_type_and_data_model"], [135, 2, 1, "", "interactions_negative_by_interaction_type_and_data_model_and_resource"], [135, 2, 1, "", "interactions_negative_by_reference"], [135, 2, 1, "", "interactions_negative_by_resource"], [135, 2, 1, "", "interactions_non_directed_0_by_data_model"], [135, 2, 1, "", "interactions_non_directed_0_by_interaction_type"], [135, 2, 1, "", "interactions_non_directed_0_by_interaction_type_and_data_model"], [135, 2, 1, "", "interactions_non_directed_0_by_interaction_type_and_data_model_and_resource"], [135, 2, 1, "", "interactions_non_directed_0_by_reference"], [135, 2, 1, "", "interactions_non_directed_0_by_resource"], [135, 2, 1, "", "interactions_non_directed_by_data_model"], [135, 2, 1, "", "interactions_non_directed_by_interaction_type"], [135, 2, 1, "", "interactions_non_directed_by_interaction_type_and_data_model"], [135, 2, 1, "", "interactions_non_directed_by_interaction_type_and_data_model_and_resource"], [135, 2, 1, "", "interactions_non_directed_by_reference"], [135, 2, 1, "", "interactions_non_directed_by_resource"], [135, 2, 1, "", "interactions_positive_by_data_model"], [135, 2, 1, "", "interactions_positive_by_interaction_type"], [135, 2, 1, "", "interactions_positive_by_interaction_type_and_data_model"], [135, 2, 1, "", "interactions_positive_by_interaction_type_and_data_model_and_resource"], [135, 2, 1, "", "interactions_positive_by_reference"], [135, 2, 1, "", "interactions_positive_by_resource"], [135, 2, 1, "", "interactions_signed_by_data_model"], [135, 2, 1, "", "interactions_signed_by_interaction_type"], [135, 2, 1, "", "interactions_signed_by_interaction_type_and_data_model"], [135, 2, 1, "", "interactions_signed_by_interaction_type_and_data_model_and_resource"], [135, 2, 1, "", "interactions_signed_by_reference"], [135, 2, 1, "", "interactions_signed_by_resource"], [135, 2, 1, "", "interactions_undirected_0_by_data_model"], [135, 2, 1, "", "interactions_undirected_0_by_interaction_type"], [135, 2, 1, "", "interactions_undirected_0_by_interaction_type_and_data_model"], [135, 2, 1, "", "interactions_undirected_0_by_interaction_type_and_data_model_and_resource"], [135, 2, 1, "", "interactions_undirected_0_by_reference"], [135, 2, 1, "", "interactions_undirected_0_by_resource"], [135, 2, 1, "", "interactions_undirected_by_data_model"], [135, 2, 1, "", "interactions_undirected_by_interaction_type"], [135, 2, 1, "", "interactions_undirected_by_interaction_type_and_data_model"], [135, 2, 1, "", "interactions_undirected_by_interaction_type_and_data_model_and_resource"], [135, 2, 1, "", "interactions_undirected_by_reference"], [135, 2, 1, "", "interactions_undirected_by_resource"], [135, 2, 1, "", "is_directed"], [135, 2, 1, "", "is_directed_by_resources"], [135, 2, 1, "", "is_inhibition"], [135, 2, 1, "", "is_loop"], [135, 2, 1, "", "is_mutual"], [135, 2, 1, "", "is_mutual_by_resources"], [135, 2, 1, "", "is_stimulation"], [135, 2, 1, "", "iter_evidences"], [135, 2, 1, "", "iter_match_evidences"], [135, 2, 1, "", "labels_by_data_model"], [135, 2, 1, "", "labels_by_interaction_type"], [135, 2, 1, "", "labels_by_interaction_type_and_data_model"], [135, 2, 1, "", "labels_by_interaction_type_and_data_model_and_resource"], [135, 2, 1, "", "labels_by_reference"], [135, 2, 1, "", "labels_by_resource"], [135, 2, 1, "", "lncrna_identifiers_by_data_model"], [135, 2, 1, "", "lncrna_identifiers_by_interaction_type"], [135, 2, 1, "", "lncrna_identifiers_by_interaction_type_and_data_model"], [135, 2, 1, "", "lncrna_identifiers_by_interaction_type_and_data_model_and_resource"], [135, 2, 1, "", "lncrna_identifiers_by_reference"], [135, 2, 1, "", "lncrna_identifiers_by_resource"], [135, 2, 1, "", "lncrna_labels_by_data_model"], [135, 2, 1, "", "lncrna_labels_by_interaction_type"], [135, 2, 1, "", "lncrna_labels_by_interaction_type_and_data_model"], [135, 2, 1, "", "lncrna_labels_by_interaction_type_and_data_model_and_resource"], [135, 2, 1, "", "lncrna_labels_by_reference"], [135, 2, 1, "", "lncrna_labels_by_resource"], [135, 2, 1, "", "lncrnas_by_data_model"], [135, 2, 1, "", "lncrnas_by_interaction_type"], [135, 2, 1, "", "lncrnas_by_interaction_type_and_data_model"], [135, 2, 1, "", "lncrnas_by_interaction_type_and_data_model_and_resource"], [135, 2, 1, "", "lncrnas_by_reference"], [135, 2, 1, "", "lncrnas_by_resource"], [135, 2, 1, "", "majority_dir"], [135, 2, 1, "", "majority_sign"], [135, 2, 1, "", "merge"], [135, 2, 1, "", "mirna_identifiers_by_data_model"], [135, 2, 1, "", "mirna_identifiers_by_interaction_type"], [135, 2, 1, "", "mirna_identifiers_by_interaction_type_and_data_model"], [135, 2, 1, "", "mirna_identifiers_by_interaction_type_and_data_model_and_resource"], [135, 2, 1, "", "mirna_identifiers_by_reference"], [135, 2, 1, "", "mirna_identifiers_by_resource"], [135, 2, 1, "", "mirna_labels_by_data_model"], [135, 2, 1, "", "mirna_labels_by_interaction_type"], [135, 2, 1, "", "mirna_labels_by_interaction_type_and_data_model"], [135, 2, 1, "", "mirna_labels_by_interaction_type_and_data_model_and_resource"], [135, 2, 1, "", "mirna_labels_by_reference"], [135, 2, 1, "", "mirna_labels_by_resource"], [135, 2, 1, "", "mirnas_by_data_model"], [135, 2, 1, "", "mirnas_by_interaction_type"], [135, 2, 1, "", "mirnas_by_interaction_type_and_data_model"], [135, 2, 1, "", "mirnas_by_interaction_type_and_data_model_and_resource"], [135, 2, 1, "", "mirnas_by_reference"], [135, 2, 1, "", "mirnas_by_resource"], [135, 2, 1, "", "negative_a_b"], [135, 2, 1, "", "negative_b_a"], [135, 2, 1, "", "negative_resources_a_b"], [135, 2, 1, "", "negative_resources_b_a"], [135, 2, 1, "", "negative_reverse"], [135, 2, 1, "", "negative_straight"], [135, 2, 1, "", "positive_a_b"], [135, 2, 1, "", "positive_b_a"], [135, 2, 1, "", "positive_resources_a_b"], [135, 2, 1, "", "positive_resources_b_a"], [135, 2, 1, "", "positive_reverse"], [135, 2, 1, "", "positive_straight"], [135, 2, 1, "", "protein_identifiers_by_data_model"], [135, 2, 1, "", "protein_identifiers_by_interaction_type"], [135, 2, 1, "", "protein_identifiers_by_interaction_type_and_data_model"], [135, 2, 1, "", "protein_identifiers_by_interaction_type_and_data_model_and_resource"], [135, 2, 1, "", "protein_identifiers_by_reference"], [135, 2, 1, "", "protein_identifiers_by_resource"], [135, 2, 1, "", "protein_labels_by_data_model"], [135, 2, 1, "", "protein_labels_by_interaction_type"], [135, 2, 1, "", "protein_labels_by_interaction_type_and_data_model"], [135, 2, 1, "", "protein_labels_by_interaction_type_and_data_model_and_resource"], [135, 2, 1, "", "protein_labels_by_reference"], [135, 2, 1, "", "protein_labels_by_resource"], [135, 2, 1, "", "proteins_by_data_model"], [135, 2, 1, "", "proteins_by_interaction_type"], [135, 2, 1, "", "proteins_by_interaction_type_and_data_model"], [135, 2, 1, "", "proteins_by_interaction_type_and_data_model_and_resource"], [135, 2, 1, "", "proteins_by_reference"], [135, 2, 1, "", "proteins_by_resource"], [135, 4, 1, "", "references_by_data_model"], [135, 4, 1, "", "references_by_interaction_type"], [135, 4, 1, "", "references_by_interaction_type_and_data_model"], [135, 4, 1, "", "references_by_interaction_type_and_data_model_and_resource"], [135, 4, 1, "", "references_by_reference"], [135, 4, 1, "", "references_by_resource"], [135, 2, 1, "", "reload"], [135, 4, 1, "", "resource_names_by_data_model"], [135, 4, 1, "", "resource_names_by_interaction_type"], [135, 4, 1, "", "resource_names_by_interaction_type_and_data_model"], [135, 4, 1, "", "resource_names_by_interaction_type_and_data_model_and_resource"], [135, 4, 1, "", "resource_names_by_reference"], [135, 4, 1, "", "resource_names_by_resource"], [135, 4, 1, "", "resource_names_via_by_data_model"], [135, 4, 1, "", "resource_names_via_by_interaction_type"], [135, 4, 1, "", "resource_names_via_by_interaction_type_and_data_model"], [135, 4, 1, "", "resource_names_via_by_interaction_type_and_data_model_and_resource"], [135, 4, 1, "", "resource_names_via_by_reference"], [135, 4, 1, "", "resource_names_via_by_resource"], [135, 2, 1, "", "resources_a_b"], [135, 2, 1, "", "resources_b_a"], [135, 4, 1, "", "resources_by_data_model"], [135, 4, 1, "", "resources_by_interaction_type"], [135, 4, 1, "", "resources_by_interaction_type_and_data_model"], [135, 4, 1, "", "resources_by_interaction_type_and_data_model_and_resource"], [135, 4, 1, "", "resources_by_reference"], [135, 4, 1, "", "resources_by_resource"], [135, 2, 1, "", "resources_undirected"], [135, 4, 1, "", "resources_via_by_data_model"], [135, 4, 1, "", "resources_via_by_interaction_type"], [135, 4, 1, "", "resources_via_by_interaction_type_and_data_model"], [135, 4, 1, "", "resources_via_by_interaction_type_and_data_model_and_resource"], [135, 4, 1, "", "resources_via_by_reference"], [135, 4, 1, "", "resources_via_by_resource"], [135, 2, 1, "", "serialize"], [135, 2, 1, "", "small_molecule_identifiers_by_data_model"], [135, 2, 1, "", "small_molecule_identifiers_by_interaction_type"], [135, 2, 1, "", "small_molecule_identifiers_by_interaction_type_and_data_model"], [135, 2, 1, "", "small_molecule_identifiers_by_interaction_type_and_data_model_and_resource"], [135, 2, 1, "", "small_molecule_identifiers_by_reference"], [135, 2, 1, "", "small_molecule_identifiers_by_resource"], [135, 2, 1, "", "small_molecule_labels_by_data_model"], [135, 2, 1, "", "small_molecule_labels_by_interaction_type"], [135, 2, 1, "", "small_molecule_labels_by_interaction_type_and_data_model"], [135, 2, 1, "", "small_molecule_labels_by_interaction_type_and_data_model_and_resource"], [135, 2, 1, "", "small_molecule_labels_by_reference"], [135, 2, 1, "", "small_molecule_labels_by_resource"], [135, 2, 1, "", "small_molecules_by_data_model"], [135, 2, 1, "", "small_molecules_by_interaction_type"], [135, 2, 1, "", "small_molecules_by_interaction_type_and_data_model"], [135, 2, 1, "", "small_molecules_by_interaction_type_and_data_model_and_resource"], [135, 2, 1, "", "small_molecules_by_reference"], [135, 2, 1, "", "small_molecules_by_resource"], [135, 2, 1, "", "source"], [135, 2, 1, "", "sources_reverse"], [135, 2, 1, "", "sources_straight"], [135, 2, 1, "", "sources_undirected"], [135, 2, 1, "", "src"], [135, 2, 1, "", "src_by_resource"], [135, 2, 1, "", "target"], [135, 2, 1, "", "tgt"], [135, 2, 1, "", "tgt_by_resource"], [135, 2, 1, "", "translate"], [135, 2, 1, "", "unset_dir"], [135, 2, 1, "", "unset_direction"], [135, 2, 1, "", "unset_interaction_type"], [135, 2, 1, "", "unset_sign"], [135, 2, 1, "", "update_attrs"], [135, 2, 1, "", "which_directions"], [135, 2, 1, "", "which_dirs"], [135, 2, 1, "", "which_signs"]], "pypath.core.interaction.InteractionDataFrameRecord": [[136, 2, 1, "", "__init__"], [136, 2, 1, "", "count"], [136, 4, 1, "", "directed"], [136, 4, 1, "", "dmodel"], [136, 4, 1, "", "effect"], [136, 4, 1, "", "id_a"], [136, 4, 1, "", "id_b"], [136, 2, 1, "", "index"], [136, 4, 1, "", "references"], [136, 4, 1, "", "sources"], [136, 4, 1, "", "type"], [136, 4, 1, "", "type_a"], [136, 4, 1, "", "type_b"]], "pypath.core.interaction.InteractionKey": [[137, 2, 1, "", "__init__"], [137, 2, 1, "", "count"], [137, 4, 1, "", "entity_a"], [137, 4, 1, "", "entity_b"], [137, 2, 1, "", "index"]], "pypath.core.intercell": [[139, 1, 1, "", "IntercellAnnotation"], [140, 3, 1, "", "get_db"], [141, 3, 1, "", "init_db"]], "pypath.core.intercell.IntercellAnnotation": [[139, 2, 1, "", "__init__"], [139, 2, 1, "", "browse"], [139, 2, 1, "", "class_to_class_connections"], [139, 2, 1, "", "classes_by_entity"], [139, 2, 1, "", "counts"], [139, 2, 1, "", "counts_by_class"], [139, 2, 1, "", "create_class"], [139, 2, 1, "", "degree_inter_class_network"], [139, 2, 1, "", "filter"], [139, 2, 1, "", "filter_classes"], [139, 2, 1, "", "filter_interclass_network"], [139, 2, 1, "", "get_class"], [139, 2, 1, "", "get_df"], [139, 2, 1, "", "get_interclass_network_df"], [139, 2, 1, "", "get_parents"], [139, 2, 1, "", "get_resource"], [139, 2, 1, "", "get_resources"], [139, 2, 1, "", "labels"], [139, 2, 1, "", "make_df"], [139, 2, 1, "", "network_df"], [139, 2, 1, "", "populate_classes"], [139, 2, 1, "", "populate_scores"], [139, 2, 1, "", "process_annot"], [139, 2, 1, "", "quality_check_table"], [139, 2, 1, "", "register_network"], [139, 2, 1, "", "reload"], [139, 2, 1, "", "resources_in_category"], [139, 2, 1, "", "select"], [139, 2, 1, "", "set_interclass_network_df"], [139, 2, 1, "", "show"], [139, 2, 1, "", "update_parents"]], "pypath.core.intercell_annot": [[143, 6, 1, "", "excludes"]], "pypath.core.network": [[145, 1, 1, "", "Network"], [146, 1, 1, "", "NetworkEntityCollection"], [147, 1, 1, "", "NetworkStatsRecord"], [148, 3, 1, "", "get_db"], [149, 3, 1, "", "init_db"]], "pypath.core.network.Network": [[145, 2, 1, "", "__init__"], [145, 4, 1, "", "activated_by"], [145, 4, 1, "", "activates"], [145, 2, 1, "", "add_interaction"], [145, 2, 1, "", "add_node"], [145, 4, 1, "", "collect_complex_identifiers"], [145, 4, 1, "", "collect_complex_labels"], [145, 4, 1, "", "collect_complexes"], [145, 4, 1, "", "collect_curation_effort"], [145, 4, 1, "", "collect_data_models"], [145, 4, 1, "", "collect_degrees_directed"], [145, 4, 1, "", "collect_degrees_directed_in"], [145, 4, 1, "", "collect_degrees_directed_out"], [145, 4, 1, "", "collect_degrees_negative"], [145, 4, 1, "", "collect_degrees_negative_in"], [145, 4, 1, "", "collect_degrees_negative_out"], [145, 4, 1, "", "collect_degrees_non_directed"], [145, 4, 1, "", "collect_degrees_positive"], [145, 4, 1, "", "collect_degrees_positive_in"], [145, 4, 1, "", "collect_degrees_positive_out"], [145, 4, 1, "", "collect_degrees_signed"], [145, 4, 1, "", "collect_degrees_signed_in"], [145, 4, 1, "", "collect_degrees_signed_out"], [145, 4, 1, "", "collect_degrees_undirected"], [145, 4, 1, "", "collect_entities"], [145, 4, 1, "", "collect_evidences"], [145, 4, 1, "", "collect_identifiers"], [145, 4, 1, "", "collect_interaction_types"], [145, 4, 1, "", "collect_interactions"], [145, 4, 1, "", "collect_interactions_0"], [145, 4, 1, "", "collect_interactions_directed"], [145, 4, 1, "", "collect_interactions_mutual"], [145, 4, 1, "", "collect_interactions_negative"], [145, 4, 1, "", "collect_interactions_non_directed"], [145, 4, 1, "", "collect_interactions_non_directed_0"], [145, 4, 1, "", "collect_interactions_positive"], [145, 4, 1, "", "collect_interactions_signed"], [145, 4, 1, "", "collect_interactions_undirected"], [145, 4, 1, "", "collect_interactions_undirected_0"], [145, 4, 1, "", "collect_labels"], [145, 4, 1, "", "collect_lncrna_identifiers"], [145, 4, 1, "", "collect_lncrna_labels"], [145, 4, 1, "", "collect_lncrnas"], [145, 4, 1, "", "collect_mirna_identifiers"], [145, 4, 1, "", "collect_mirna_labels"], [145, 4, 1, "", "collect_mirnas"], [145, 4, 1, "", "collect_protein_identifiers"], [145, 4, 1, "", "collect_protein_labels"], [145, 4, 1, "", "collect_proteins"], [145, 4, 1, "", "collect_references"], [145, 4, 1, "", "collect_resource_names"], [145, 4, 1, "", "collect_resource_names_via"], [145, 4, 1, "", "collect_resources"], [145, 4, 1, "", "collect_resources_via"], [145, 4, 1, "", "collect_small_molecule_identifiers"], [145, 4, 1, "", "collect_small_molecule_labels"], [145, 4, 1, "", "collect_small_molecules"], [145, 4, 1, "", "complex_identifiers_by_data_model"], [145, 4, 1, "", "complex_identifiers_by_interaction_type"], [145, 4, 1, "", "complex_identifiers_by_interaction_type_and_data_model"], [145, 4, 1, "", "complex_identifiers_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "complex_identifiers_by_reference"], [145, 4, 1, "", "complex_identifiers_by_resource"], [145, 4, 1, "", "complex_labels_by_data_model"], [145, 4, 1, "", "complex_labels_by_interaction_type"], [145, 4, 1, "", "complex_labels_by_interaction_type_and_data_model"], [145, 4, 1, "", "complex_labels_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "complex_labels_by_reference"], [145, 4, 1, "", "complex_labels_by_resource"], [145, 4, 1, "", "complexes_by_data_model"], [145, 4, 1, "", "complexes_by_interaction_type"], [145, 4, 1, "", "complexes_by_interaction_type_and_data_model"], [145, 4, 1, "", "complexes_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "complexes_by_reference"], [145, 4, 1, "", "complexes_by_resource"], [145, 4, 1, "", "count_activated_by"], [145, 4, 1, "", "count_activates"], [145, 4, 1, "", "count_complex_identifiers"], [145, 4, 1, "", "count_complex_identifiers_by_data_model"], [145, 4, 1, "", "count_complex_identifiers_by_interaction_type"], [145, 4, 1, "", "count_complex_identifiers_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_complex_identifiers_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_complex_identifiers_by_reference"], [145, 4, 1, "", "count_complex_identifiers_by_resource"], [145, 4, 1, "", "count_complex_labels"], [145, 4, 1, "", "count_complex_labels_by_data_model"], [145, 4, 1, "", "count_complex_labels_by_interaction_type"], [145, 4, 1, "", "count_complex_labels_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_complex_labels_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_complex_labels_by_reference"], [145, 4, 1, "", "count_complex_labels_by_resource"], [145, 4, 1, "", "count_complexes"], [145, 4, 1, "", "count_complexes_by_data_model"], [145, 4, 1, "", "count_complexes_by_interaction_type"], [145, 4, 1, "", "count_complexes_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_complexes_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_complexes_by_reference"], [145, 4, 1, "", "count_complexes_by_resource"], [145, 4, 1, "", "count_curation_effort"], [145, 4, 1, "", "count_curation_effort_by_data_model"], [145, 4, 1, "", "count_curation_effort_by_interaction_type"], [145, 4, 1, "", "count_curation_effort_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_curation_effort_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_curation_effort_by_reference"], [145, 4, 1, "", "count_curation_effort_by_resource"], [145, 4, 1, "", "count_data_models"], [145, 4, 1, "", "count_data_models_by_data_model"], [145, 4, 1, "", "count_data_models_by_interaction_type"], [145, 4, 1, "", "count_data_models_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_data_models_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_data_models_by_reference"], [145, 4, 1, "", "count_data_models_by_resource"], [145, 4, 1, "", "count_degrees_directed"], [145, 4, 1, "", "count_degrees_directed_by_data_model"], [145, 4, 1, "", "count_degrees_directed_by_interaction_type"], [145, 4, 1, "", "count_degrees_directed_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_degrees_directed_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_degrees_directed_by_reference"], [145, 4, 1, "", "count_degrees_directed_by_resource"], [145, 4, 1, "", "count_degrees_directed_in"], [145, 4, 1, "", "count_degrees_directed_in_by_data_model"], [145, 4, 1, "", "count_degrees_directed_in_by_interaction_type"], [145, 4, 1, "", "count_degrees_directed_in_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_degrees_directed_in_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_degrees_directed_in_by_reference"], [145, 4, 1, "", "count_degrees_directed_in_by_resource"], [145, 4, 1, "", "count_degrees_directed_out"], [145, 4, 1, "", "count_degrees_directed_out_by_data_model"], [145, 4, 1, "", "count_degrees_directed_out_by_interaction_type"], [145, 4, 1, "", "count_degrees_directed_out_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_degrees_directed_out_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_degrees_directed_out_by_reference"], [145, 4, 1, "", "count_degrees_directed_out_by_resource"], [145, 4, 1, "", "count_degrees_negative"], [145, 4, 1, "", "count_degrees_negative_by_data_model"], [145, 4, 1, "", "count_degrees_negative_by_interaction_type"], [145, 4, 1, "", "count_degrees_negative_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_degrees_negative_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_degrees_negative_by_reference"], [145, 4, 1, "", "count_degrees_negative_by_resource"], [145, 4, 1, "", "count_degrees_negative_in"], [145, 4, 1, "", "count_degrees_negative_in_by_data_model"], [145, 4, 1, "", "count_degrees_negative_in_by_interaction_type"], [145, 4, 1, "", "count_degrees_negative_in_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_degrees_negative_in_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_degrees_negative_in_by_reference"], [145, 4, 1, "", "count_degrees_negative_in_by_resource"], [145, 4, 1, "", "count_degrees_negative_out"], [145, 4, 1, "", "count_degrees_negative_out_by_data_model"], [145, 4, 1, "", "count_degrees_negative_out_by_interaction_type"], [145, 4, 1, "", "count_degrees_negative_out_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_degrees_negative_out_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_degrees_negative_out_by_reference"], [145, 4, 1, "", "count_degrees_negative_out_by_resource"], [145, 4, 1, "", "count_degrees_non_directed"], [145, 4, 1, "", "count_degrees_non_directed_by_data_model"], [145, 4, 1, "", "count_degrees_non_directed_by_interaction_type"], [145, 4, 1, "", "count_degrees_non_directed_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_degrees_non_directed_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_degrees_non_directed_by_reference"], [145, 4, 1, "", "count_degrees_non_directed_by_resource"], [145, 4, 1, "", "count_degrees_positive"], [145, 4, 1, "", "count_degrees_positive_by_data_model"], [145, 4, 1, "", "count_degrees_positive_by_interaction_type"], [145, 4, 1, "", "count_degrees_positive_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_degrees_positive_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_degrees_positive_by_reference"], [145, 4, 1, "", "count_degrees_positive_by_resource"], [145, 4, 1, "", "count_degrees_positive_in"], [145, 4, 1, "", "count_degrees_positive_in_by_data_model"], [145, 4, 1, "", "count_degrees_positive_in_by_interaction_type"], [145, 4, 1, "", "count_degrees_positive_in_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_degrees_positive_in_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_degrees_positive_in_by_reference"], [145, 4, 1, "", "count_degrees_positive_in_by_resource"], [145, 4, 1, "", "count_degrees_positive_out"], [145, 4, 1, "", "count_degrees_positive_out_by_data_model"], [145, 4, 1, "", "count_degrees_positive_out_by_interaction_type"], [145, 4, 1, "", "count_degrees_positive_out_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_degrees_positive_out_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_degrees_positive_out_by_reference"], [145, 4, 1, "", "count_degrees_positive_out_by_resource"], [145, 4, 1, "", "count_degrees_signed"], [145, 4, 1, "", "count_degrees_signed_by_data_model"], [145, 4, 1, "", "count_degrees_signed_by_interaction_type"], [145, 4, 1, "", "count_degrees_signed_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_degrees_signed_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_degrees_signed_by_reference"], [145, 4, 1, "", "count_degrees_signed_by_resource"], [145, 4, 1, "", "count_degrees_signed_in"], [145, 4, 1, "", "count_degrees_signed_in_by_data_model"], [145, 4, 1, "", "count_degrees_signed_in_by_interaction_type"], [145, 4, 1, "", "count_degrees_signed_in_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_degrees_signed_in_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_degrees_signed_in_by_reference"], [145, 4, 1, "", "count_degrees_signed_in_by_resource"], [145, 4, 1, "", "count_degrees_signed_out"], [145, 4, 1, "", "count_degrees_signed_out_by_data_model"], [145, 4, 1, "", "count_degrees_signed_out_by_interaction_type"], [145, 4, 1, "", "count_degrees_signed_out_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_degrees_signed_out_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_degrees_signed_out_by_reference"], [145, 4, 1, "", "count_degrees_signed_out_by_resource"], [145, 4, 1, "", "count_degrees_undirected"], [145, 4, 1, "", "count_degrees_undirected_by_data_model"], [145, 4, 1, "", "count_degrees_undirected_by_interaction_type"], [145, 4, 1, "", "count_degrees_undirected_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_degrees_undirected_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_degrees_undirected_by_reference"], [145, 4, 1, "", "count_degrees_undirected_by_resource"], [145, 4, 1, "", "count_entities"], [145, 4, 1, "", "count_entities_by_data_model"], [145, 4, 1, "", "count_entities_by_interaction_type"], [145, 4, 1, "", "count_entities_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_entities_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_entities_by_reference"], [145, 4, 1, "", "count_entities_by_resource"], [145, 4, 1, "", "count_evidences"], [145, 4, 1, "", "count_evidences_by_data_model"], [145, 4, 1, "", "count_evidences_by_interaction_type"], [145, 4, 1, "", "count_evidences_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_evidences_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_evidences_by_reference"], [145, 4, 1, "", "count_evidences_by_resource"], [145, 4, 1, "", "count_identifiers"], [145, 4, 1, "", "count_identifiers_by_data_model"], [145, 4, 1, "", "count_identifiers_by_interaction_type"], [145, 4, 1, "", "count_identifiers_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_identifiers_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_identifiers_by_reference"], [145, 4, 1, "", "count_identifiers_by_resource"], [145, 4, 1, "", "count_interaction_types"], [145, 4, 1, "", "count_interaction_types_by_data_model"], [145, 4, 1, "", "count_interaction_types_by_interaction_type"], [145, 4, 1, "", "count_interaction_types_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_interaction_types_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_interaction_types_by_reference"], [145, 4, 1, "", "count_interaction_types_by_resource"], [145, 4, 1, "", "count_interactions"], [145, 4, 1, "", "count_interactions_0"], [145, 4, 1, "", "count_interactions_0_by_data_model"], [145, 4, 1, "", "count_interactions_0_by_interaction_type"], [145, 4, 1, "", "count_interactions_0_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_interactions_0_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_interactions_0_by_reference"], [145, 4, 1, "", "count_interactions_0_by_resource"], [145, 4, 1, "", "count_interactions_by_data_model"], [145, 4, 1, "", "count_interactions_by_interaction_type"], [145, 4, 1, "", "count_interactions_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_interactions_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_interactions_by_reference"], [145, 4, 1, "", "count_interactions_by_resource"], [145, 4, 1, "", "count_interactions_directed"], [145, 4, 1, "", "count_interactions_directed_by_data_model"], [145, 4, 1, "", "count_interactions_directed_by_interaction_type"], [145, 4, 1, "", "count_interactions_directed_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_interactions_directed_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_interactions_directed_by_reference"], [145, 4, 1, "", "count_interactions_directed_by_resource"], [145, 4, 1, "", "count_interactions_mutual"], [145, 4, 1, "", "count_interactions_mutual_by_data_model"], [145, 4, 1, "", "count_interactions_mutual_by_interaction_type"], [145, 4, 1, "", "count_interactions_mutual_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_interactions_mutual_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_interactions_mutual_by_reference"], [145, 4, 1, "", "count_interactions_mutual_by_resource"], [145, 4, 1, "", "count_interactions_negative"], [145, 4, 1, "", "count_interactions_negative_by_data_model"], [145, 4, 1, "", "count_interactions_negative_by_interaction_type"], [145, 4, 1, "", "count_interactions_negative_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_interactions_negative_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_interactions_negative_by_reference"], [145, 4, 1, "", "count_interactions_negative_by_resource"], [145, 4, 1, "", "count_interactions_non_directed"], [145, 4, 1, "", "count_interactions_non_directed_0"], [145, 4, 1, "", "count_interactions_non_directed_0_by_data_model"], [145, 4, 1, "", "count_interactions_non_directed_0_by_interaction_type"], [145, 4, 1, "", "count_interactions_non_directed_0_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_interactions_non_directed_0_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_interactions_non_directed_0_by_reference"], [145, 4, 1, "", "count_interactions_non_directed_0_by_resource"], [145, 4, 1, "", "count_interactions_non_directed_by_data_model"], [145, 4, 1, "", "count_interactions_non_directed_by_interaction_type"], [145, 4, 1, "", "count_interactions_non_directed_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_interactions_non_directed_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_interactions_non_directed_by_reference"], [145, 4, 1, "", "count_interactions_non_directed_by_resource"], [145, 4, 1, "", "count_interactions_positive"], [145, 4, 1, "", "count_interactions_positive_by_data_model"], [145, 4, 1, "", "count_interactions_positive_by_interaction_type"], [145, 4, 1, "", "count_interactions_positive_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_interactions_positive_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_interactions_positive_by_reference"], [145, 4, 1, "", "count_interactions_positive_by_resource"], [145, 4, 1, "", "count_interactions_signed"], [145, 4, 1, "", "count_interactions_signed_by_data_model"], [145, 4, 1, "", "count_interactions_signed_by_interaction_type"], [145, 4, 1, "", "count_interactions_signed_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_interactions_signed_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_interactions_signed_by_reference"], [145, 4, 1, "", "count_interactions_signed_by_resource"], [145, 4, 1, "", "count_interactions_undirected"], [145, 4, 1, "", "count_interactions_undirected_0"], [145, 4, 1, "", "count_interactions_undirected_0_by_data_model"], [145, 4, 1, "", "count_interactions_undirected_0_by_interaction_type"], [145, 4, 1, "", "count_interactions_undirected_0_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_interactions_undirected_0_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_interactions_undirected_0_by_reference"], [145, 4, 1, "", "count_interactions_undirected_0_by_resource"], [145, 4, 1, "", "count_interactions_undirected_by_data_model"], [145, 4, 1, "", "count_interactions_undirected_by_interaction_type"], [145, 4, 1, "", "count_interactions_undirected_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_interactions_undirected_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_interactions_undirected_by_reference"], [145, 4, 1, "", "count_interactions_undirected_by_resource"], [145, 4, 1, "", "count_labels"], [145, 4, 1, "", "count_labels_by_data_model"], [145, 4, 1, "", "count_labels_by_interaction_type"], [145, 4, 1, "", "count_labels_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_labels_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_labels_by_reference"], [145, 4, 1, "", "count_labels_by_resource"], [145, 4, 1, "", "count_lncrna_identifiers"], [145, 4, 1, "", "count_lncrna_identifiers_by_data_model"], [145, 4, 1, "", "count_lncrna_identifiers_by_interaction_type"], [145, 4, 1, "", "count_lncrna_identifiers_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_lncrna_identifiers_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_lncrna_identifiers_by_reference"], [145, 4, 1, "", "count_lncrna_identifiers_by_resource"], [145, 4, 1, "", "count_lncrna_labels"], [145, 4, 1, "", "count_lncrna_labels_by_data_model"], [145, 4, 1, "", "count_lncrna_labels_by_interaction_type"], [145, 4, 1, "", "count_lncrna_labels_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_lncrna_labels_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_lncrna_labels_by_reference"], [145, 4, 1, "", "count_lncrna_labels_by_resource"], [145, 4, 1, "", "count_lncrnas"], [145, 4, 1, "", "count_lncrnas_by_data_model"], [145, 4, 1, "", "count_lncrnas_by_interaction_type"], [145, 4, 1, "", "count_lncrnas_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_lncrnas_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_lncrnas_by_reference"], [145, 4, 1, "", "count_lncrnas_by_resource"], [145, 4, 1, "", "count_mirna_identifiers"], [145, 4, 1, "", "count_mirna_identifiers_by_data_model"], [145, 4, 1, "", "count_mirna_identifiers_by_interaction_type"], [145, 4, 1, "", "count_mirna_identifiers_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_mirna_identifiers_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_mirna_identifiers_by_reference"], [145, 4, 1, "", "count_mirna_identifiers_by_resource"], [145, 4, 1, "", "count_mirna_labels"], [145, 4, 1, "", "count_mirna_labels_by_data_model"], [145, 4, 1, "", "count_mirna_labels_by_interaction_type"], [145, 4, 1, "", "count_mirna_labels_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_mirna_labels_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_mirna_labels_by_reference"], [145, 4, 1, "", "count_mirna_labels_by_resource"], [145, 4, 1, "", "count_mirnas"], [145, 4, 1, "", "count_mirnas_by_data_model"], [145, 4, 1, "", "count_mirnas_by_interaction_type"], [145, 4, 1, "", "count_mirnas_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_mirnas_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_mirnas_by_reference"], [145, 4, 1, "", "count_mirnas_by_resource"], [145, 2, 1, "", "count_partners"], [145, 4, 1, "", "count_post_transcriptionally_activated_by"], [145, 4, 1, "", "count_post_transcriptionally_activates"], [145, 4, 1, "", "count_post_transcriptionally_regulated_by"], [145, 4, 1, "", "count_post_transcriptionally_regulates"], [145, 4, 1, "", "count_post_transcriptionally_suppressed_by"], [145, 4, 1, "", "count_post_transcriptionally_suppresses"], [145, 4, 1, "", "count_post_translationally_activated_by"], [145, 4, 1, "", "count_post_translationally_activates"], [145, 4, 1, "", "count_post_translationally_regulated_by"], [145, 4, 1, "", "count_post_translationally_regulates"], [145, 4, 1, "", "count_post_translationally_suppressed_by"], [145, 4, 1, "", "count_post_translationally_suppresses"], [145, 4, 1, "", "count_protein_identifiers"], [145, 4, 1, "", "count_protein_identifiers_by_data_model"], [145, 4, 1, "", "count_protein_identifiers_by_interaction_type"], [145, 4, 1, "", "count_protein_identifiers_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_protein_identifiers_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_protein_identifiers_by_reference"], [145, 4, 1, "", "count_protein_identifiers_by_resource"], [145, 4, 1, "", "count_protein_labels"], [145, 4, 1, "", "count_protein_labels_by_data_model"], [145, 4, 1, "", "count_protein_labels_by_interaction_type"], [145, 4, 1, "", "count_protein_labels_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_protein_labels_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_protein_labels_by_reference"], [145, 4, 1, "", "count_protein_labels_by_resource"], [145, 4, 1, "", "count_proteins"], [145, 4, 1, "", "count_proteins_by_data_model"], [145, 4, 1, "", "count_proteins_by_interaction_type"], [145, 4, 1, "", "count_proteins_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_proteins_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_proteins_by_reference"], [145, 4, 1, "", "count_proteins_by_resource"], [145, 4, 1, "", "count_references"], [145, 4, 1, "", "count_references_by_data_model"], [145, 4, 1, "", "count_references_by_interaction_type"], [145, 4, 1, "", "count_references_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_references_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_references_by_reference"], [145, 4, 1, "", "count_references_by_resource"], [145, 4, 1, "", "count_regulated_by"], [145, 4, 1, "", "count_regulates"], [145, 4, 1, "", "count_resource_names"], [145, 4, 1, "", "count_resource_names_by_data_model"], [145, 4, 1, "", "count_resource_names_by_interaction_type"], [145, 4, 1, "", "count_resource_names_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_resource_names_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_resource_names_by_reference"], [145, 4, 1, "", "count_resource_names_by_resource"], [145, 4, 1, "", "count_resource_names_via"], [145, 4, 1, "", "count_resource_names_via_by_data_model"], [145, 4, 1, "", "count_resource_names_via_by_interaction_type"], [145, 4, 1, "", "count_resource_names_via_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_resource_names_via_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_resource_names_via_by_reference"], [145, 4, 1, "", "count_resource_names_via_by_resource"], [145, 4, 1, "", "count_resources"], [145, 4, 1, "", "count_resources_by_data_model"], [145, 4, 1, "", "count_resources_by_interaction_type"], [145, 4, 1, "", "count_resources_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_resources_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_resources_by_reference"], [145, 4, 1, "", "count_resources_by_resource"], [145, 4, 1, "", "count_resources_via"], [145, 4, 1, "", "count_resources_via_by_data_model"], [145, 4, 1, "", "count_resources_via_by_interaction_type"], [145, 4, 1, "", "count_resources_via_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_resources_via_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_resources_via_by_reference"], [145, 4, 1, "", "count_resources_via_by_resource"], [145, 4, 1, "", "count_small_molecule_identifiers"], [145, 4, 1, "", "count_small_molecule_identifiers_by_data_model"], [145, 4, 1, "", "count_small_molecule_identifiers_by_interaction_type"], [145, 4, 1, "", "count_small_molecule_identifiers_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_small_molecule_identifiers_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_small_molecule_identifiers_by_reference"], [145, 4, 1, "", "count_small_molecule_identifiers_by_resource"], [145, 4, 1, "", "count_small_molecule_labels"], [145, 4, 1, "", "count_small_molecule_labels_by_data_model"], [145, 4, 1, "", "count_small_molecule_labels_by_interaction_type"], [145, 4, 1, "", "count_small_molecule_labels_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_small_molecule_labels_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_small_molecule_labels_by_reference"], [145, 4, 1, "", "count_small_molecule_labels_by_resource"], [145, 4, 1, "", "count_small_molecules"], [145, 4, 1, "", "count_small_molecules_by_data_model"], [145, 4, 1, "", "count_small_molecules_by_interaction_type"], [145, 4, 1, "", "count_small_molecules_by_interaction_type_and_data_model"], [145, 4, 1, "", "count_small_molecules_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "count_small_molecules_by_reference"], [145, 4, 1, "", "count_small_molecules_by_resource"], [145, 4, 1, "", "count_suppressed_by"], [145, 4, 1, "", "count_suppresses"], [145, 4, 1, "", "count_transcriptionally_activated_by"], [145, 4, 1, "", "count_transcriptionally_activates"], [145, 4, 1, "", "count_transcriptionally_regulated_by"], [145, 4, 1, "", "count_transcriptionally_regulates"], [145, 4, 1, "", "count_transcriptionally_suppressed_by"], [145, 4, 1, "", "count_transcriptionally_suppresses"], [145, 4, 1, "", "curation_effort_by_data_model"], [145, 4, 1, "", "curation_effort_by_interaction_type"], [145, 4, 1, "", "curation_effort_by_interaction_type_and_data_model"], [145, 4, 1, "", "curation_effort_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "curation_effort_by_reference"], [145, 4, 1, "", "curation_effort_by_resource"], [145, 4, 1, "", "data_models_by_data_model"], [145, 4, 1, "", "data_models_by_interaction_type"], [145, 4, 1, "", "data_models_by_interaction_type_and_data_model"], [145, 4, 1, "", "data_models_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "data_models_by_reference"], [145, 4, 1, "", "data_models_by_resource"], [145, 4, 1, "", "degrees_directed_by_data_model"], [145, 4, 1, "", "degrees_directed_by_interaction_type"], [145, 4, 1, "", "degrees_directed_by_interaction_type_and_data_model"], [145, 4, 1, "", "degrees_directed_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "degrees_directed_by_reference"], [145, 4, 1, "", "degrees_directed_by_resource"], [145, 4, 1, "", "degrees_directed_in_by_data_model"], [145, 4, 1, "", "degrees_directed_in_by_interaction_type"], [145, 4, 1, "", "degrees_directed_in_by_interaction_type_and_data_model"], [145, 4, 1, "", "degrees_directed_in_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "degrees_directed_in_by_reference"], [145, 4, 1, "", "degrees_directed_in_by_resource"], [145, 4, 1, "", "degrees_directed_out_by_data_model"], [145, 4, 1, "", "degrees_directed_out_by_interaction_type"], [145, 4, 1, "", "degrees_directed_out_by_interaction_type_and_data_model"], [145, 4, 1, "", "degrees_directed_out_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "degrees_directed_out_by_reference"], [145, 4, 1, "", "degrees_directed_out_by_resource"], [145, 4, 1, "", "degrees_negative_by_data_model"], [145, 4, 1, "", "degrees_negative_by_interaction_type"], [145, 4, 1, "", "degrees_negative_by_interaction_type_and_data_model"], [145, 4, 1, "", "degrees_negative_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "degrees_negative_by_reference"], [145, 4, 1, "", "degrees_negative_by_resource"], [145, 4, 1, "", "degrees_negative_in_by_data_model"], [145, 4, 1, "", "degrees_negative_in_by_interaction_type"], [145, 4, 1, "", "degrees_negative_in_by_interaction_type_and_data_model"], [145, 4, 1, "", "degrees_negative_in_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "degrees_negative_in_by_reference"], [145, 4, 1, "", "degrees_negative_in_by_resource"], [145, 4, 1, "", "degrees_negative_out_by_data_model"], [145, 4, 1, "", "degrees_negative_out_by_interaction_type"], [145, 4, 1, "", "degrees_negative_out_by_interaction_type_and_data_model"], [145, 4, 1, "", "degrees_negative_out_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "degrees_negative_out_by_reference"], [145, 4, 1, "", "degrees_negative_out_by_resource"], [145, 4, 1, "", "degrees_non_directed_by_data_model"], [145, 4, 1, "", "degrees_non_directed_by_interaction_type"], [145, 4, 1, "", "degrees_non_directed_by_interaction_type_and_data_model"], [145, 4, 1, "", "degrees_non_directed_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "degrees_non_directed_by_reference"], [145, 4, 1, "", "degrees_non_directed_by_resource"], [145, 4, 1, "", "degrees_positive_by_data_model"], [145, 4, 1, "", "degrees_positive_by_interaction_type"], [145, 4, 1, "", "degrees_positive_by_interaction_type_and_data_model"], [145, 4, 1, "", "degrees_positive_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "degrees_positive_by_reference"], [145, 4, 1, "", "degrees_positive_by_resource"], [145, 4, 1, "", "degrees_positive_in_by_data_model"], [145, 4, 1, "", "degrees_positive_in_by_interaction_type"], [145, 4, 1, "", "degrees_positive_in_by_interaction_type_and_data_model"], [145, 4, 1, "", "degrees_positive_in_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "degrees_positive_in_by_reference"], [145, 4, 1, "", "degrees_positive_in_by_resource"], [145, 4, 1, "", "degrees_positive_out_by_data_model"], [145, 4, 1, "", "degrees_positive_out_by_interaction_type"], [145, 4, 1, "", "degrees_positive_out_by_interaction_type_and_data_model"], [145, 4, 1, "", "degrees_positive_out_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "degrees_positive_out_by_reference"], [145, 4, 1, "", "degrees_positive_out_by_resource"], [145, 4, 1, "", "degrees_signed_by_data_model"], [145, 4, 1, "", "degrees_signed_by_interaction_type"], [145, 4, 1, "", "degrees_signed_by_interaction_type_and_data_model"], [145, 4, 1, "", "degrees_signed_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "degrees_signed_by_reference"], [145, 4, 1, "", "degrees_signed_by_resource"], [145, 4, 1, "", "degrees_signed_in_by_data_model"], [145, 4, 1, "", "degrees_signed_in_by_interaction_type"], [145, 4, 1, "", "degrees_signed_in_by_interaction_type_and_data_model"], [145, 4, 1, "", "degrees_signed_in_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "degrees_signed_in_by_reference"], [145, 4, 1, "", "degrees_signed_in_by_resource"], [145, 4, 1, "", "degrees_signed_out_by_data_model"], [145, 4, 1, "", "degrees_signed_out_by_interaction_type"], [145, 4, 1, "", "degrees_signed_out_by_interaction_type_and_data_model"], [145, 4, 1, "", "degrees_signed_out_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "degrees_signed_out_by_reference"], [145, 4, 1, "", "degrees_signed_out_by_resource"], [145, 4, 1, "", "degrees_undirected_by_data_model"], [145, 4, 1, "", "degrees_undirected_by_interaction_type"], [145, 4, 1, "", "degrees_undirected_by_interaction_type_and_data_model"], [145, 4, 1, "", "degrees_undirected_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "degrees_undirected_by_reference"], [145, 4, 1, "", "degrees_undirected_by_resource"], [145, 2, 1, "", "direction_consistency"], [145, 2, 1, "", "dorothea"], [145, 4, 1, "", "entities_by_data_model"], [145, 4, 1, "", "entities_by_interaction_type"], [145, 4, 1, "", "entities_by_interaction_type_and_data_model"], [145, 4, 1, "", "entities_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "entities_by_reference"], [145, 4, 1, "", "entities_by_resource"], [145, 2, 1, "", "entity_by_id"], [145, 2, 1, "", "entity_by_label"], [145, 4, 1, "", "evidences_by_data_model"], [145, 4, 1, "", "evidences_by_interaction_type"], [145, 4, 1, "", "evidences_by_interaction_type_and_data_model"], [145, 4, 1, "", "evidences_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "evidences_by_reference"], [145, 4, 1, "", "evidences_by_resource"], [145, 2, 1, "", "extra_directions"], [145, 2, 1, "", "find_paths"], [145, 2, 1, "", "from_igraph"], [145, 2, 1, "", "from_pickle"], [145, 4, 1, "", "get_complex_identifiers"], [145, 4, 1, "", "get_complex_labels"], [145, 4, 1, "", "get_complexes"], [145, 4, 1, "", "get_curation_effort"], [145, 4, 1, "", "get_data_models"], [145, 4, 1, "", "get_degrees_directed"], [145, 4, 1, "", "get_degrees_directed_in"], [145, 4, 1, "", "get_degrees_directed_out"], [145, 4, 1, "", "get_degrees_negative"], [145, 4, 1, "", "get_degrees_negative_in"], [145, 4, 1, "", "get_degrees_negative_out"], [145, 4, 1, "", "get_degrees_non_directed"], [145, 4, 1, "", "get_degrees_positive"], [145, 4, 1, "", "get_degrees_positive_in"], [145, 4, 1, "", "get_degrees_positive_out"], [145, 4, 1, "", "get_degrees_signed"], [145, 4, 1, "", "get_degrees_signed_in"], [145, 4, 1, "", "get_degrees_signed_out"], [145, 4, 1, "", "get_degrees_undirected"], [145, 4, 1, "", "get_entities"], [145, 4, 1, "", "get_evidences"], [145, 4, 1, "", "get_identifiers"], [145, 4, 1, "", "get_interaction_types"], [145, 4, 1, "", "get_interactions"], [145, 4, 1, "", "get_interactions_0"], [145, 4, 1, "", "get_interactions_directed"], [145, 4, 1, "", "get_interactions_mutual"], [145, 4, 1, "", "get_interactions_negative"], [145, 4, 1, "", "get_interactions_non_directed"], [145, 4, 1, "", "get_interactions_non_directed_0"], [145, 4, 1, "", "get_interactions_positive"], [145, 4, 1, "", "get_interactions_signed"], [145, 4, 1, "", "get_interactions_undirected"], [145, 4, 1, "", "get_interactions_undirected_0"], [145, 4, 1, "", "get_labels"], [145, 4, 1, "", "get_lncrna_identifiers"], [145, 4, 1, "", "get_lncrna_labels"], [145, 4, 1, "", "get_lncrnas"], [145, 4, 1, "", "get_mirna_identifiers"], [145, 4, 1, "", "get_mirna_labels"], [145, 4, 1, "", "get_mirnas"], [145, 2, 1, "", "get_organisms"], [145, 4, 1, "", "get_protein_identifiers"], [145, 4, 1, "", "get_protein_labels"], [145, 4, 1, "", "get_proteins"], [145, 4, 1, "", "get_references"], [145, 4, 1, "", "get_resource_names"], [145, 4, 1, "", "get_resource_names_via"], [145, 4, 1, "", "get_resources"], [145, 4, 1, "", "get_resources_via"], [145, 4, 1, "", "get_small_molecule_identifiers"], [145, 4, 1, "", "get_small_molecule_labels"], [145, 4, 1, "", "get_small_molecules"], [145, 2, 1, "", "htp_interactions"], [145, 2, 1, "", "htp_references"], [145, 4, 1, "", "identifiers_by_data_model"], [145, 4, 1, "", "identifiers_by_interaction_type"], [145, 4, 1, "", "identifiers_by_interaction_type_and_data_model"], [145, 4, 1, "", "identifiers_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "identifiers_by_reference"], [145, 4, 1, "", "identifiers_by_resource"], [145, 2, 1, "", "init_network"], [145, 2, 1, "", "interaction"], [145, 2, 1, "", "interaction_by_id"], [145, 2, 1, "", "interaction_by_label"], [145, 4, 1, "", "interaction_types_by_data_model"], [145, 4, 1, "", "interaction_types_by_interaction_type"], [145, 4, 1, "", "interaction_types_by_interaction_type_and_data_model"], [145, 4, 1, "", "interaction_types_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "interaction_types_by_reference"], [145, 4, 1, "", "interaction_types_by_resource"], [145, 4, 1, "", "interactions_0_by_data_model"], [145, 4, 1, "", "interactions_0_by_interaction_type"], [145, 4, 1, "", "interactions_0_by_interaction_type_and_data_model"], [145, 4, 1, "", "interactions_0_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "interactions_0_by_reference"], [145, 4, 1, "", "interactions_0_by_resource"], [145, 4, 1, "", "interactions_by_data_model"], [145, 4, 1, "", "interactions_by_interaction_type"], [145, 4, 1, "", "interactions_by_interaction_type_and_data_model"], [145, 4, 1, "", "interactions_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "interactions_by_reference"], [145, 4, 1, "", "interactions_by_resource"], [145, 4, 1, "", "interactions_directed_by_data_model"], [145, 4, 1, "", "interactions_directed_by_interaction_type"], [145, 4, 1, "", "interactions_directed_by_interaction_type_and_data_model"], [145, 4, 1, "", "interactions_directed_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "interactions_directed_by_reference"], [145, 4, 1, "", "interactions_directed_by_resource"], [145, 4, 1, "", "interactions_mutual_by_data_model"], [145, 4, 1, "", "interactions_mutual_by_interaction_type"], [145, 4, 1, "", "interactions_mutual_by_interaction_type_and_data_model"], [145, 4, 1, "", "interactions_mutual_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "interactions_mutual_by_reference"], [145, 4, 1, "", "interactions_mutual_by_resource"], [145, 4, 1, "", "interactions_negative_by_data_model"], [145, 4, 1, "", "interactions_negative_by_interaction_type"], [145, 4, 1, "", "interactions_negative_by_interaction_type_and_data_model"], [145, 4, 1, "", "interactions_negative_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "interactions_negative_by_reference"], [145, 4, 1, "", "interactions_negative_by_resource"], [145, 4, 1, "", "interactions_non_directed_0_by_data_model"], [145, 4, 1, "", "interactions_non_directed_0_by_interaction_type"], [145, 4, 1, "", "interactions_non_directed_0_by_interaction_type_and_data_model"], [145, 4, 1, "", "interactions_non_directed_0_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "interactions_non_directed_0_by_reference"], [145, 4, 1, "", "interactions_non_directed_0_by_resource"], [145, 4, 1, "", "interactions_non_directed_by_data_model"], [145, 4, 1, "", "interactions_non_directed_by_interaction_type"], [145, 4, 1, "", "interactions_non_directed_by_interaction_type_and_data_model"], [145, 4, 1, "", "interactions_non_directed_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "interactions_non_directed_by_reference"], [145, 4, 1, "", "interactions_non_directed_by_resource"], [145, 4, 1, "", "interactions_positive_by_data_model"], [145, 4, 1, "", "interactions_positive_by_interaction_type"], [145, 4, 1, "", "interactions_positive_by_interaction_type_and_data_model"], [145, 4, 1, "", "interactions_positive_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "interactions_positive_by_reference"], [145, 4, 1, "", "interactions_positive_by_resource"], [145, 4, 1, "", "interactions_signed_by_data_model"], [145, 4, 1, "", "interactions_signed_by_interaction_type"], [145, 4, 1, "", "interactions_signed_by_interaction_type_and_data_model"], [145, 4, 1, "", "interactions_signed_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "interactions_signed_by_reference"], [145, 4, 1, "", "interactions_signed_by_resource"], [145, 4, 1, "", "interactions_undirected_0_by_data_model"], [145, 4, 1, "", "interactions_undirected_0_by_interaction_type"], [145, 4, 1, "", "interactions_undirected_0_by_interaction_type_and_data_model"], [145, 4, 1, "", "interactions_undirected_0_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "interactions_undirected_0_by_reference"], [145, 4, 1, "", "interactions_undirected_0_by_resource"], [145, 4, 1, "", "interactions_undirected_by_data_model"], [145, 4, 1, "", "interactions_undirected_by_interaction_type"], [145, 4, 1, "", "interactions_undirected_by_interaction_type_and_data_model"], [145, 4, 1, "", "interactions_undirected_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "interactions_undirected_by_reference"], [145, 4, 1, "", "interactions_undirected_by_resource"], [145, 4, 1, "", "labels_by_data_model"], [145, 4, 1, "", "labels_by_interaction_type"], [145, 4, 1, "", "labels_by_interaction_type_and_data_model"], [145, 4, 1, "", "labels_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "labels_by_reference"], [145, 4, 1, "", "labels_by_resource"], [145, 4, 1, "", "lncrna_identifiers_by_data_model"], [145, 4, 1, "", "lncrna_identifiers_by_interaction_type"], [145, 4, 1, "", "lncrna_identifiers_by_interaction_type_and_data_model"], [145, 4, 1, "", "lncrna_identifiers_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "lncrna_identifiers_by_reference"], [145, 4, 1, "", "lncrna_identifiers_by_resource"], [145, 4, 1, "", "lncrna_labels_by_data_model"], [145, 4, 1, "", "lncrna_labels_by_interaction_type"], [145, 4, 1, "", "lncrna_labels_by_interaction_type_and_data_model"], [145, 4, 1, "", "lncrna_labels_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "lncrna_labels_by_reference"], [145, 4, 1, "", "lncrna_labels_by_resource"], [145, 4, 1, "", "lncrnas_by_data_model"], [145, 4, 1, "", "lncrnas_by_interaction_type"], [145, 4, 1, "", "lncrnas_by_interaction_type_and_data_model"], [145, 4, 1, "", "lncrnas_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "lncrnas_by_reference"], [145, 4, 1, "", "lncrnas_by_resource"], [145, 2, 1, "", "load"], [145, 2, 1, "", "load_from_pickle"], [145, 2, 1, "", "load_resource"], [145, 2, 1, "", "load_resources"], [145, 2, 1, "", "make_df"], [145, 4, 1, "", "mirna_identifiers_by_data_model"], [145, 4, 1, "", "mirna_identifiers_by_interaction_type"], [145, 4, 1, "", "mirna_identifiers_by_interaction_type_and_data_model"], [145, 4, 1, "", "mirna_identifiers_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "mirna_identifiers_by_reference"], [145, 4, 1, "", "mirna_identifiers_by_resource"], [145, 4, 1, "", "mirna_labels_by_data_model"], [145, 4, 1, "", "mirna_labels_by_interaction_type"], [145, 4, 1, "", "mirna_labels_by_interaction_type_and_data_model"], [145, 4, 1, "", "mirna_labels_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "mirna_labels_by_reference"], [145, 4, 1, "", "mirna_labels_by_resource"], [145, 2, 1, "", "mirna_target"], [145, 4, 1, "", "mirnas_by_data_model"], [145, 4, 1, "", "mirnas_by_interaction_type"], [145, 4, 1, "", "mirnas_by_interaction_type_and_data_model"], [145, 4, 1, "", "mirnas_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "mirnas_by_reference"], [145, 4, 1, "", "mirnas_by_resource"], [145, 2, 1, "", "numof_interactions_per_reference"], [145, 2, 1, "", "organisms_check"], [145, 2, 1, "", "partners"], [145, 4, 1, "", "post_transcriptionally_activated_by"], [145, 4, 1, "", "post_transcriptionally_activates"], [145, 4, 1, "", "post_transcriptionally_regulated_by"], [145, 4, 1, "", "post_transcriptionally_regulates"], [145, 4, 1, "", "post_transcriptionally_suppressed_by"], [145, 4, 1, "", "post_transcriptionally_suppresses"], [145, 4, 1, "", "post_translationally_activated_by"], [145, 4, 1, "", "post_translationally_activates"], [145, 4, 1, "", "post_translationally_regulated_by"], [145, 4, 1, "", "post_translationally_regulates"], [145, 4, 1, "", "post_translationally_suppressed_by"], [145, 4, 1, "", "post_translationally_suppresses"], [145, 4, 1, "", "protein_identifiers_by_data_model"], [145, 4, 1, "", "protein_identifiers_by_interaction_type"], [145, 4, 1, "", "protein_identifiers_by_interaction_type_and_data_model"], [145, 4, 1, "", "protein_identifiers_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "protein_identifiers_by_reference"], [145, 4, 1, "", "protein_identifiers_by_resource"], [145, 4, 1, "", "protein_labels_by_data_model"], [145, 4, 1, "", "protein_labels_by_interaction_type"], [145, 4, 1, "", "protein_labels_by_interaction_type_and_data_model"], [145, 4, 1, "", "protein_labels_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "protein_labels_by_reference"], [145, 4, 1, "", "protein_labels_by_resource"], [145, 4, 1, "", "proteins_by_data_model"], [145, 4, 1, "", "proteins_by_interaction_type"], [145, 4, 1, "", "proteins_by_interaction_type_and_data_model"], [145, 4, 1, "", "proteins_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "proteins_by_reference"], [145, 4, 1, "", "proteins_by_resource"], [145, 2, 1, "", "random_interaction"], [145, 4, 1, "", "references_by_data_model"], [145, 4, 1, "", "references_by_interaction_type"], [145, 4, 1, "", "references_by_interaction_type_and_data_model"], [145, 4, 1, "", "references_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "references_by_reference"], [145, 4, 1, "", "references_by_resource"], [145, 4, 1, "", "regulated_by"], [145, 4, 1, "", "regulates"], [145, 2, 1, "", "reload"], [145, 2, 1, "", "remove_interaction"], [145, 2, 1, "", "remove_loops"], [145, 2, 1, "", "remove_node"], [145, 2, 1, "", "remove_zero_degree"], [145, 2, 1, "", "reset"], [145, 5, 1, "", "resource_names"], [145, 4, 1, "", "resource_names_by_data_model"], [145, 4, 1, "", "resource_names_by_interaction_type"], [145, 4, 1, "", "resource_names_by_interaction_type_and_data_model"], [145, 4, 1, "", "resource_names_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "resource_names_by_reference"], [145, 4, 1, "", "resource_names_by_resource"], [145, 4, 1, "", "resource_names_via_by_data_model"], [145, 4, 1, "", "resource_names_via_by_interaction_type"], [145, 4, 1, "", "resource_names_via_by_interaction_type_and_data_model"], [145, 4, 1, "", "resource_names_via_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "resource_names_via_by_reference"], [145, 4, 1, "", "resource_names_via_by_resource"], [145, 5, 1, "", "resources"], [145, 4, 1, "", "resources_by_data_model"], [145, 4, 1, "", "resources_by_interaction_type"], [145, 4, 1, "", "resources_by_interaction_type_and_data_model"], [145, 4, 1, "", "resources_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "resources_by_reference"], [145, 4, 1, "", "resources_by_resource"], [145, 4, 1, "", "resources_via_by_data_model"], [145, 4, 1, "", "resources_via_by_interaction_type"], [145, 4, 1, "", "resources_via_by_interaction_type_and_data_model"], [145, 4, 1, "", "resources_via_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "resources_via_by_reference"], [145, 4, 1, "", "resources_via_by_resource"], [145, 2, 1, "", "save_to_pickle"], [145, 4, 1, "", "small_molecule_identifiers_by_data_model"], [145, 4, 1, "", "small_molecule_identifiers_by_interaction_type"], [145, 4, 1, "", "small_molecule_identifiers_by_interaction_type_and_data_model"], [145, 4, 1, "", "small_molecule_identifiers_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "small_molecule_identifiers_by_reference"], [145, 4, 1, "", "small_molecule_identifiers_by_resource"], [145, 4, 1, "", "small_molecule_labels_by_data_model"], [145, 4, 1, "", "small_molecule_labels_by_interaction_type"], [145, 4, 1, "", "small_molecule_labels_by_interaction_type_and_data_model"], [145, 4, 1, "", "small_molecule_labels_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "small_molecule_labels_by_reference"], [145, 4, 1, "", "small_molecule_labels_by_resource"], [145, 4, 1, "", "small_molecules_by_data_model"], [145, 4, 1, "", "small_molecules_by_interaction_type"], [145, 4, 1, "", "small_molecules_by_interaction_type_and_data_model"], [145, 4, 1, "", "small_molecules_by_interaction_type_and_data_model_and_resource"], [145, 4, 1, "", "small_molecules_by_reference"], [145, 4, 1, "", "small_molecules_by_resource"], [145, 2, 1, "", "summaries_tab"], [145, 4, 1, "", "suppressed_by"], [145, 4, 1, "", "suppresses"], [145, 2, 1, "", "to_igraph"], [145, 2, 1, "", "transcription"], [145, 4, 1, "", "transcriptionally_activated_by"], [145, 4, 1, "", "transcriptionally_activates"], [145, 4, 1, "", "transcriptionally_regulated_by"], [145, 4, 1, "", "transcriptionally_regulates"], [145, 4, 1, "", "transcriptionally_suppressed_by"], [145, 4, 1, "", "transcriptionally_suppresses"]], "pypath.core.network.NetworkEntityCollection": [[146, 2, 1, "", "__init__"]], "pypath.core.network.NetworkStatsRecord": [[147, 2, 1, "", "__init__"], [147, 4, 1, "", "by_category"], [147, 4, 1, "", "by_resource"], [147, 4, 1, "", "cat_resource"], [147, 2, 1, "", "count"], [147, 2, 1, "", "index"], [147, 4, 1, "", "label"], [147, 4, 1, "", "method"], [147, 4, 1, "", "percent"], [147, 4, 1, "", "percent_cat"], [147, 4, 1, "", "percent_res_cat"], [147, 4, 1, "", "resource_cat"], [147, 4, 1, "", "shared"], [147, 4, 1, "", "shared_cat"], [147, 4, 1, "", "shared_res_cat"], [147, 4, 1, "", "total"], [147, 4, 1, "", "unique"], [147, 4, 1, "", "unique_cat"], [147, 4, 1, "", "unique_res_cat"]], "pypath.inputs": [[154, 0, 0, "-", "abs"], [156, 0, 0, "-", "acsn"], [159, 0, 0, "-", "adhesome"], [162, 0, 0, "-", "almen2009"], [164, 0, 0, "-", "baccin2019"], [167, 0, 0, "-", "biogps"], [173, 0, 0, "-", "biogrid"], [176, 0, 0, "-", "biomart"], [182, 0, 0, "-", "ca1"], [184, 0, 0, "-", "cancercellmap"], [186, 0, 0, "-", "cancerdrugsdb"], [190, 0, 0, "-", "cancersea"], [192, 0, 0, "-", "cell"], [194, 0, 0, "-", "cellcall"], [199, 0, 0, "-", "cellcellinteractions"], [201, 0, 0, "-", "cellchatdb"], [207, 0, 0, "-", "cellinker"], [219, 0, 0, "-", "cellphonedb"], [226, 0, 0, "-", "celltalkdb"], [230, 0, 0, "-", "celltypist"], [232, 0, 0, "-", "chembl"], [237, 0, 0, "-", "common"], [244, 0, 0, "-", "compleat"], [247, 0, 0, "-", "complexportal"], [249, 0, 0, "-", "comppi"], [252, 0, 0, "-", "connectomedb"], [255, 0, 0, "-", "corum"], [257, 0, 0, "-", "cosmic"], [259, 0, 0, "-", "cpad"], [263, 0, 0, "-", "cpdb"], [266, 0, 0, "-", "credentials"], [268, 0, 0, "-", "csa"], [270, 0, 0, "-", "cspa"], [274, 0, 0, "-", "cytosig"], [277, 0, 0, "-", "dbptm"], [281, 0, 0, "-", "deathdomain"], [284, 0, 0, "-", "depod"], [287, 0, 0, "-", "dgidb"], [290, 0, 0, "-", "dip"], [293, 0, 0, "-", "disgenet"], [295, 0, 0, "-", "domino"], [300, 0, 0, "-", "dorothea"], [311, 0, 0, "-", "drugbank"], [317, 0, 0, "-", "drugcentral"], [321, 0, 0, "-", "ebi"], [323, 0, 0, "-", "elm"], [328, 0, 0, "-", "embopress"], [330, 0, 0, "-", "embrace"], [335, 0, 0, "-", "encode"], [337, 0, 0, "-", "ensembl"], [339, 0, 0, "-", "exocarta"], [342, 0, 0, "-", "genecards"], [346, 3, 1, "", "get_method"], [347, 0, 0, "-", "go"], [368, 0, 0, "-", "gpcrdb"], [370, 0, 0, "-", "graphviz"], [372, 0, 0, "-", "guide2pharma"], [376, 0, 0, "-", "havugimana"], [379, 0, 0, "-", "hgnc"], [381, 0, 0, "-", "hippie"], [383, 0, 0, "-", "homologene"], [387, 0, 0, "-", "hpmr"], [393, 0, 0, "-", "hpo"], [398, 0, 0, "-", "hprd"], [403, 0, 0, "-", "htri"], [405, 0, 0, "-", "humancellmap"], [407, 0, 0, "-", "humap"], [410, 0, 0, "-", "huri"], [423, 0, 0, "-", "i3d"], [425, 0, 0, "-", "icellnet"], [430, 0, 0, "-", "ielm"], [433, 0, 0, "-", "imweb"], [436, 0, 0, "-", "innatedb"], [438, 0, 0, "-", "instruct"], [441, 0, 0, "-", "intact"], [443, 0, 0, "-", "integrins"], [445, 0, 0, "-", "interpro"], [450, 0, 0, "-", "intogen"], [452, 0, 0, "-", "ipi"], [454, 0, 0, "-", "iptmnet"], [457, 0, 0, "-", "italk"], [461, 0, 0, "-", "kea"], [464, 0, 0, "-", "kegg"], [474, 0, 0, "-", "kinasedotcom"], [476, 0, 0, "-", "kirouac2010"], [478, 0, 0, "-", "lambert2018"], [481, 0, 0, "-", "laudanna"], [484, 0, 0, "-", "li2012"], [489, 0, 0, "-", "lincs"], [491, 0, 0, "-", "lmpid"], [495, 0, 0, "-", "lncdisease"], [497, 0, 0, "-", "lncrnadb"], [499, 0, 0, "-", "locate"], [501, 0, 0, "-", "lrdb"], [505, 0, 0, "-", "macrophage"], [507, 0, 0, "-", "main"], [508, 0, 0, "-", "matrisome"], [510, 0, 0, "-", "matrixdb"], [516, 0, 0, "-", "mcam"], [518, 0, 0, "-", "membranome"], [520, 0, 0, "-", "mimp"], [524, 0, 0, "-", "mir2disease"], [526, 0, 0, "-", "mirbase"], [534, 0, 0, "-", "mirdeathdb"], [536, 0, 0, "-", "mirecords"], [538, 0, 0, "-", "mirtarbase"], [540, 0, 0, "-", "mitab"], [543, 0, 0, "-", "mppi"], [545, 0, 0, "-", "msigdb"], [549, 0, 0, "-", "ncrdeathdb"], [551, 0, 0, "-", "negatome"], [553, 0, 0, "-", "netbiol"], [556, 0, 0, "-", "netpath"], [560, 0, 0, "-", "ontology"], [563, 0, 0, "-", "opm"], [565, 0, 0, "-", "oreganno"], [568, 0, 0, "-", "panglaodb"], [571, 0, 0, "-", "pathwaycommons"], [588, 0, 0, "-", "pazar"], [590, 0, 0, "-", "pdb"], [594, 0, 0, "-", "pdzbase"], [596, 0, 0, "-", "pepcyber"], [599, 0, 0, "-", "pfam"], [604, 0, 0, "-", "phobius"], [606, 0, 0, "-", "phosphatome"], [608, 0, 0, "-", "phosphoelm"], [612, 0, 0, "-", "phosphonetworks"], [615, 0, 0, "-", "phosphopoint"], [618, 0, 0, "-", "phosphosite"], [631, 0, 0, "-", "pisa"], [635, 0, 0, "-", "pro"], [638, 0, 0, "-", "progeny"], [641, 0, 0, "-", "proteinatlas"], [646, 0, 0, "-", "proteins"], [648, 0, 0, "-", "protmapper"], [652, 0, 0, "-", "pubchem"], [654, 0, 0, "-", "pubmed"], [661, 0, 0, "-", "ramilowski2015"], [664, 0, 0, "-", "rdata"], [665, 0, 0, "-", "reaction"], [685, 0, 0, "-", "scconnect"], [689, 0, 0, "-", "science"], [691, 0, 0, "-", "signalink"], [696, 0, 0, "-", "signor"], [703, 0, 0, "-", "spike"], [706, 0, 0, "-", "stitch"], [709, 0, 0, "-", "string"], [714, 0, 0, "-", "surfaceome"], [716, 0, 0, "-", "switches_elm"], [718, 0, 0, "-", "talklr"], [722, 0, 0, "-", "tcdb"], [726, 0, 0, "-", "tfcensus"], [728, 0, 0, "-", "threedcomplex"], [734, 0, 0, "-", "threedid"], [739, 0, 0, "-", "topdb"], [741, 0, 0, "-", "transmir"], [743, 0, 0, "-", "trip"], [750, 0, 0, "-", "unichem"], [755, 0, 0, "-", "uniprot"], [786, 0, 0, "-", "wang"], [791, 0, 0, "-", "wojtowicz2020"], [794, 0, 0, "-", "zhong2015"]], "pypath.inputs.abs": [[155, 3, 1, "", "abs_interactions"]], "pypath.inputs.acsn": [[157, 3, 1, "", "acsn_interactions"], [158, 3, 1, "", "acsn_interactions_sif"]], "pypath.inputs.adhesome": [[160, 3, 1, "", "adhesome_annotations"], [161, 3, 1, "", "adhesome_interactions"]], "pypath.inputs.almen2009": [[163, 3, 1, "", "almen2009_annotations"]], "pypath.inputs.baccin2019": [[165, 3, 1, "", "baccin2019_annotations"], [166, 3, 1, "", "baccin2019_interactions"]], "pypath.inputs.biogps": [[168, 1, 1, "", "BiogpsDataset"], [169, 3, 1, "", "biogps_annotations"], [170, 3, 1, "", "biogps_datasets"], [171, 3, 1, "", "biogps_download"], [172, 3, 1, "", "biogps_download_all"]], "pypath.inputs.biogps.BiogpsDataset": [[168, 2, 1, "", "__init__"], [168, 2, 1, "", "count"], [168, 2, 1, "", "index"], [168, 4, 1, "", "label"], [168, 4, 1, "", "organism"], [168, 4, 1, "", "url"]], "pypath.inputs.biogrid": [[174, 3, 1, "", "biogrid_all_interactions"], [175, 3, 1, "", "biogrid_interactions"]], "pypath.inputs.biomart": [[177, 3, 1, "", "biomart_homology"], [178, 3, 1, "", "biomart_microarray"], [179, 3, 1, "", "biomart_microarray_types"], [180, 3, 1, "", "biomart_microarrays"], [181, 3, 1, "", "biomart_query"]], "pypath.inputs.ca1": [[183, 3, 1, "", "ca1_interactions"]], "pypath.inputs.cancercellmap": [[185, 3, 1, "", "ccmap_interactions"]], "pypath.inputs.cancerdrugsdb": [[187, 3, 1, "", "cancerdrugsdb_annotations"], [188, 3, 1, "", "cancerdrugsdb_download"], [189, 3, 1, "", "cancerdrugsdb_interactions"]], "pypath.inputs.cancersea": [[191, 3, 1, "", "cancersea_annotations"]], "pypath.inputs.cell": [[193, 3, 1, "", "cell_supplementary"]], "pypath.inputs.cellcall": [[195, 3, 1, "", "cellcall_annotations"], [196, 3, 1, "", "cellcall_download"], [197, 3, 1, "", "cellcall_download_all"], [198, 3, 1, "", "cellcall_interactions"]], "pypath.inputs.cellcellinteractions": [[200, 3, 1, "", "cellcellinteractions_annotations"]], "pypath.inputs.cellchatdb": [[202, 3, 1, "", "cellchatdb_annotations"], [203, 3, 1, "", "cellchatdb_cofactors"], [204, 3, 1, "", "cellchatdb_complexes"], [205, 3, 1, "", "cellchatdb_download"], [206, 3, 1, "", "cellchatdb_interactions"]], "pypath.inputs.cellinker": [[208, 1, 1, "", "CellinkerInteraction"], [209, 3, 1, "", "cellinker_annotations"], [210, 3, 1, "", "cellinker_complex_annotations"], [211, 3, 1, "", "cellinker_complexes"], [212, 3, 1, "", "cellinker_complexes_raw"], [213, 3, 1, "", "cellinker_lr_interactions"], [214, 3, 1, "", "cellinker_lr_interactions_raw"], [215, 3, 1, "", "cellinker_protein_annotations"], [216, 3, 1, "", "cellinker_smol_interactions"], [217, 3, 1, "", "cellinker_smol_interactions_raw"], [218, 3, 1, "", "components_to_complex"]], "pypath.inputs.cellinker.CellinkerInteraction": [[208, 2, 1, "", "__init__"], [208, 2, 1, "", "count"], [208, 2, 1, "", "index"], [208, 4, 1, "", "ligand"], [208, 4, 1, "", "ligand_location"], [208, 4, 1, "", "pmids"], [208, 4, 1, "", "receptor"], [208, 4, 1, "", "receptor_location"], [208, 4, 1, "", "resources"], [208, 4, 1, "", "type"]], "pypath.inputs.cellphonedb": [[220, 1, 1, "", "CellPhoneDBAnnotation"], [221, 3, 1, "", "cellphonedb_complex_annotations"], [222, 3, 1, "", "cellphonedb_complexes"], [223, 3, 1, "", "cellphonedb_interactions"], [224, 3, 1, "", "cellphonedb_ligands_receptors"], [225, 3, 1, "", "cellphonedb_protein_annotations"]], "pypath.inputs.cellphonedb.CellPhoneDBAnnotation": [[220, 2, 1, "", "__init__"], [220, 2, 1, "", "count"], [220, 2, 1, "", "index"], [220, 4, 1, "", "integrin"], [220, 4, 1, "", "peripheral"], [220, 4, 1, "", "receptor"], [220, 4, 1, "", "receptor_class"], [220, 4, 1, "", "secreted"], [220, 4, 1, "", "secreted_class"], [220, 4, 1, "", "transmembrane"]], "pypath.inputs.celltalkdb": [[227, 3, 1, "", "celltalkdb_annotations"], [228, 3, 1, "", "celltalkdb_download"], [229, 3, 1, "", "celltalkdb_interactions"]], "pypath.inputs.celltypist": [[231, 3, 1, "", "celltypist_annotations"]], "pypath.inputs.chembl": [[233, 3, 1, "", "chembl_activities"], [234, 3, 1, "", "chembl_assays"], [235, 3, 1, "", "chembl_molecules"], [236, 3, 1, "", "chembl_targets"]], "pypath.inputs.common": [[238, 3, 1, "", "csv_sep_change"], [239, 3, 1, "", "glom_fields"], [240, 3, 1, "", "json_extract"], [241, 3, 1, "", "json_read"], [242, 3, 1, "", "read_table"], [243, 3, 1, "", "read_xls"]], "pypath.inputs.compleat": [[245, 3, 1, "", "compleat_complexes"], [246, 3, 1, "", "compleat_raw"]], "pypath.inputs.complexportal": [[248, 3, 1, "", "complexportal_complexes"]], "pypath.inputs.comppi": [[250, 3, 1, "", "comppi_interaction_locations"], [251, 3, 1, "", "comppi_locations"]], "pypath.inputs.connectomedb": [[253, 3, 1, "", "connectomedb_annotations"], [254, 3, 1, "", "connectomedb_interactions"]], "pypath.inputs.corum": [[256, 3, 1, "", "corum_complexes"]], "pypath.inputs.cosmic": [[258, 3, 1, "", "cancer_gene_census_annotations"]], "pypath.inputs.cpad": [[260, 3, 1, "", "cpad_annotations"], [261, 3, 1, "", "cpad_pathway_cancer"], [262, 3, 1, "", "get_cpad"]], "pypath.inputs.cpdb": [[264, 3, 1, "", "cpdb_interactions"], [265, 3, 1, "", "cpdb_interactions_ltp"]], "pypath.inputs.credentials": [[267, 3, 1, "", "credentials"]], "pypath.inputs.csa": [[269, 3, 1, "", "get_csa"]], "pypath.inputs.cspa": [[271, 3, 1, "", "cspa_annotations"], [272, 3, 1, "", "cspa_cell_type_annotations"], [273, 3, 1, "", "cspa_cell_types"]], "pypath.inputs.cytosig": [[275, 3, 1, "", "cytosig_annotations"], [276, 3, 1, "", "cytosig_df"]], "pypath.inputs.dbptm": [[278, 3, 1, "", "dbptm_enzyme_substrate"], [279, 3, 1, "", "dbptm_enzyme_substrate_old"], [280, 3, 1, "", "dbptm_interactions"]], "pypath.inputs.deathdomain": [[282, 3, 1, "", "deathdomain_interactions"], [283, 3, 1, "", "deathdomain_interactions_rescued"]], "pypath.inputs.depod": [[285, 3, 1, "", "depod_enzyme_substrate"], [286, 3, 1, "", "depod_interactions"]], "pypath.inputs.dgidb": [[288, 3, 1, "", "dgidb_annotations"], [289, 3, 1, "", "get_dgidb_old"]], "pypath.inputs.dip": [[291, 3, 1, "", "dip_interactions"], [292, 3, 1, "", "dip_login"]], "pypath.inputs.disgenet": [[294, 3, 1, "", "disgenet_annotations"]], "pypath.inputs.domino": [[296, 3, 1, "", "domino_ddi"], [297, 3, 1, "", "domino_enzsub"], [298, 3, 1, "", "domino_interactions"], [299, 3, 1, "", "get_domino"]], "pypath.inputs.dorothea": [[301, 1, 1, "", "DorotheaInteraction"], [302, 3, 1, "", "dorothea_full_raw"], [303, 3, 1, "", "dorothea_interactions"], [304, 3, 1, "", "dorothea_interactions_old"], [305, 3, 1, "", "dorothea_old_csv"], [306, 3, 1, "", "dorothea_rda_raw"], [307, 3, 1, "", "get_dorothea_old"], [308, 3, 1, "", "get_tfregulons"], [309, 3, 1, "", "tfregulons_interactions"], [310, 3, 1, "", "tfregulons_interactions_old"]], "pypath.inputs.dorothea.DorotheaInteraction": [[301, 2, 1, "", "__init__"], [301, 4, 1, "", "all_sources"], [301, 4, 1, "", "chipseq"], [301, 4, 1, "", "chipseq_sources"], [301, 4, 1, "", "coexp"], [301, 4, 1, "", "coexp_sources"], [301, 2, 1, "", "count"], [301, 4, 1, "", "curated"], [301, 4, 1, "", "curated_sources"], [301, 4, 1, "", "effect"], [301, 2, 1, "", "index"], [301, 4, 1, "", "kegg_pathways"], [301, 4, 1, "", "level"], [301, 4, 1, "", "predicted"], [301, 4, 1, "", "predicted_sources"], [301, 4, 1, "", "pubmed"], [301, 4, 1, "", "target"], [301, 4, 1, "", "tf"]], "pypath.inputs.drugbank": [[312, 3, 1, "", "drugbank_annotations"], [313, 3, 1, "", "drugbank_drugs"], [314, 3, 1, "", "drugbank_interactions"], [315, 3, 1, "", "drugbank_mapping"], [316, 3, 1, "", "drugbank_raw_interactions"]], "pypath.inputs.drugcentral": [[318, 3, 1, "", "drugcentral_drugs"], [319, 3, 1, "", "drugcentral_interactions"], [320, 3, 1, "", "drugcentral_mapping"]], "pypath.inputs.ebi": [[322, 3, 1, "", "ebi_rest"]], "pypath.inputs.elm": [[324, 3, 1, "", "elm_classes"], [325, 3, 1, "", "elm_domains"], [326, 3, 1, "", "elm_instances"], [327, 3, 1, "", "elm_interactions"]], "pypath.inputs.embopress": [[329, 3, 1, "", "embopress_supplementary"]], "pypath.inputs.embrace": [[331, 3, 1, "", "embrace_annotations"], [332, 3, 1, "", "embrace_interactions"], [333, 3, 1, "", "embrace_raw"], [334, 3, 1, "", "embrace_translated"]], "pypath.inputs.encode": [[336, 3, 1, "", "encode_tf_mirna_interactions"]], "pypath.inputs.ensembl": [[338, 3, 1, "", "ensembl_organisms"]], "pypath.inputs.exocarta": [[340, 3, 1, "", "get_exocarta"], [341, 3, 1, "", "get_vesiclepedia"]], "pypath.inputs.genecards": [[343, 3, 1, "", "genecards_datasheet"], [344, 3, 1, "", "genecards_soup"], [345, 3, 1, "", "genecards_summaries"]], "pypath.inputs.go": [[348, 3, 1, "", "get_go_desc"], [349, 3, 1, "", "get_go_quick"], [350, 3, 1, "", "get_goslim"], [351, 3, 1, "", "go_ancestors"], [352, 3, 1, "", "go_ancestors_goose"], [353, 3, 1, "", "go_ancestors_quickgo"], [354, 3, 1, "", "go_annotations"], [355, 3, 1, "", "go_annotations_goa"], [356, 3, 1, "", "go_annotations_goose"], [357, 3, 1, "", "go_annotations_quickgo"], [358, 3, 1, "", "go_annotations_solr"], [359, 3, 1, "", "go_annotations_uniprot"], [360, 3, 1, "", "go_descendants"], [361, 3, 1, "", "go_descendants_goose"], [362, 3, 1, "", "go_descendants_quickgo"], [363, 3, 1, "", "go_descendants_to_ancestors"], [364, 3, 1, "", "go_terms"], [365, 3, 1, "", "go_terms_goose"], [366, 3, 1, "", "go_terms_quickgo"], [367, 3, 1, "", "go_terms_solr"]], "pypath.inputs.gpcrdb": [[369, 3, 1, "", "gpcrdb_annotations"]], "pypath.inputs.graphviz": [[371, 3, 1, "", "graphviz_attrs"]], "pypath.inputs.guide2pharma": [[373, 3, 1, "", "guide2pharma_complexes"], [374, 3, 1, "", "guide2pharma_download"], [375, 3, 1, "", "guide2pharma_interactions"]], "pypath.inputs.havugimana": [[377, 3, 1, "", "get_havugimana"], [378, 3, 1, "", "havugimana_complexes"]], "pypath.inputs.hgnc": [[380, 3, 1, "", "hgnc_genegroups"]], "pypath.inputs.hippie": [[382, 3, 1, "", "hippie_interactions"]], "pypath.inputs.homologene": [[384, 3, 1, "", "get_homologene"], [385, 3, 1, "", "homologene_dict"], [386, 3, 1, "", "homologene_uniprot_dict"]], "pypath.inputs.hpmr": [[388, 1, 1, "", "HpmrInteraction"], [389, 3, 1, "", "get_hpmr"], [390, 3, 1, "", "hpmr_annotations"], [391, 3, 1, "", "hpmr_complexes"], [392, 3, 1, "", "hpmr_interactions"]], "pypath.inputs.hpmr.HpmrInteraction": [[388, 2, 1, "", "__init__"], [388, 2, 1, "", "count"], [388, 2, 1, "", "index"], [388, 4, 1, "", "partner"], [388, 4, 1, "", "partner_role"], [388, 4, 1, "", "receptor"], [388, 4, 1, "", "references"], [388, 4, 1, "", "unambiguous"]], "pypath.inputs.hpo": [[394, 3, 1, "", "hpo_annotations"], [395, 3, 1, "", "hpo_diseases"], [396, 3, 1, "", "hpo_ontology"], [397, 3, 1, "", "hpo_terms"]], "pypath.inputs.hprd": [[399, 3, 1, "", "get_hprd"], [400, 3, 1, "", "hprd_enzyme_substrate"], [401, 3, 1, "", "hprd_interactions"], [402, 3, 1, "", "hprd_interactions_htp"]], "pypath.inputs.htri": [[404, 3, 1, "", "htri_interactions"]], "pypath.inputs.humancellmap": [[406, 3, 1, "", "humancellmap_annotations"]], "pypath.inputs.humap": [[408, 3, 1, "", "humap2_complexes"], [409, 3, 1, "", "humap_complexes"]], "pypath.inputs.huri": [[411, 3, 1, "", "hi_i_interactions"], [412, 3, 1, "", "hi_ii_interactions"], [413, 3, 1, "", "hi_iii_old"], [414, 3, 1, "", "hi_union_interactions"], [415, 3, 1, "", "huri_interactions"], [416, 3, 1, "", "lit_bm_13_interactions"], [417, 3, 1, "", "lit_bm_17_interactions"], [418, 3, 1, "", "lit_bm_interactions"], [419, 3, 1, "", "rolland_hi_ii_14"], [420, 3, 1, "", "vidal_hi_iii_old"], [421, 3, 1, "", "yang2016_interactions"], [422, 3, 1, "", "yu2011_interactions"]], "pypath.inputs.i3d": [[424, 3, 1, "", "get_i3d"]], "pypath.inputs.icellnet": [[426, 1, 1, "", "IcellnetRecord"], [427, 3, 1, "", "icellnet_annotations"], [428, 3, 1, "", "icellnet_complexes"], [429, 3, 1, "", "icellnet_interactions"]], "pypath.inputs.icellnet.IcellnetRecord": [[426, 2, 1, "", "__init__"], [426, 4, 1, "", "classification"], [426, 2, 1, "", "count"], [426, 4, 1, "", "family"], [426, 2, 1, "", "index"], [426, 4, 1, "", "ligand"], [426, 4, 1, "", "receptor"], [426, 4, 1, "", "references"], [426, 4, 1, "", "resources"], [426, 4, 1, "", "subfamily"]], "pypath.inputs.ielm": [[431, 3, 1, "", "get_ielm"], [432, 3, 1, "", "get_ielm_huge"]], "pypath.inputs.imweb": [[434, 3, 1, "", "get_imweb"], [435, 3, 1, "", "get_imweb_req"]], "pypath.inputs.innatedb": [[437, 3, 1, "", "innatedb_interactions"]], "pypath.inputs.instruct": [[439, 3, 1, "", "get_instruct"], [440, 3, 1, "", "get_instruct_offsets"]], "pypath.inputs.intact": [[442, 3, 1, "", "intact_interactions"]], "pypath.inputs.integrins": [[444, 3, 1, "", "get_integrins"]], "pypath.inputs.interpro": [[446, 3, 1, "", "interpro2go_annotations"], [447, 3, 1, "", "interpro_annotations"], [448, 3, 1, "", "interpro_entries"], [449, 3, 1, "", "interpro_xrefs"]], "pypath.inputs.intogen": [[451, 3, 1, "", "intogen_annotations"]], "pypath.inputs.ipi": [[453, 3, 1, "", "ipi_uniprot"]], "pypath.inputs.iptmnet": [[455, 1, 1, "", "IptmnetInteraction"], [456, 3, 1, "", "iptmnet_interactions"]], "pypath.inputs.iptmnet.IptmnetInteraction": [[455, 2, 1, "", "__init__"], [455, 2, 1, "", "count"], [455, 4, 1, "", "enzyme"], [455, 4, 1, "", "enzyme_isoform"], [455, 2, 1, "", "index"], [455, 4, 1, "", "ptm_type"], [455, 4, 1, "", "references"], [455, 4, 1, "", "resaa"], [455, 4, 1, "", "resnum"], [455, 4, 1, "", "score"], [455, 4, 1, "", "substrate"], [455, 4, 1, "", "substrate_isoform"]], "pypath.inputs.italk": [[458, 3, 1, "", "italk_annotations"], [459, 3, 1, "", "italk_interactions"], [460, 3, 1, "", "italk_raw"]], "pypath.inputs.kea": [[462, 3, 1, "", "kea_enzyme_substrate"], [463, 3, 1, "", "kea_interactions"]], "pypath.inputs.kegg": [[465, 1, 1, "", "KeggPathway"], [466, 3, 1, "", "kegg_dbget"], [467, 3, 1, "", "kegg_interactions"], [468, 3, 1, "", "kegg_medicus"], [469, 3, 1, "", "kegg_medicus_complexes"], [470, 3, 1, "", "kegg_medicus_interactions"], [471, 3, 1, "", "kegg_pathway_annotations"], [472, 3, 1, "", "kegg_pathway_annotations_pathwaycommons"], [473, 3, 1, "", "kegg_pathways"]], "pypath.inputs.kegg.KeggPathway": [[465, 2, 1, "", "__init__"], [465, 2, 1, "", "count"], [465, 2, 1, "", "index"], [465, 4, 1, "", "pathway"]], "pypath.inputs.kinasedotcom": [[475, 3, 1, "", "kinasedotcom_annotations"]], "pypath.inputs.kirouac2010": [[477, 3, 1, "", "kirouac2010_interactions"]], "pypath.inputs.lambert2018": [[479, 3, 1, "", "lambert2018_annotations"], [480, 3, 1, "", "lambert2018_s1_raw"]], "pypath.inputs.laudanna": [[482, 3, 1, "", "laudanna_directions"], [483, 3, 1, "", "laudanna_effects"]], "pypath.inputs.li2012": [[485, 3, 1, "", "get_li2012"], [486, 3, 1, "", "li2012_dmi"], [487, 3, 1, "", "li2012_enzyme_substrate"], [488, 3, 1, "", "li2012_interactions"]], "pypath.inputs.lincs": [[490, 3, 1, "", "lincs_compounds"]], "pypath.inputs.lmpid": [[492, 3, 1, "", "lmpid_dmi"], [493, 3, 1, "", "lmpid_interactions"], [494, 3, 1, "", "load_lmpid"]], "pypath.inputs.lncdisease": [[496, 3, 1, "", "lncdisease_interactions"]], "pypath.inputs.lncrnadb": [[498, 3, 1, "", "lncrnadb_interactions"]], "pypath.inputs.locate": [[500, 3, 1, "", "locate_localizations"]], "pypath.inputs.lrdb": [[502, 1, 1, "", "LrdbAnnotation"], [503, 3, 1, "", "lrdb_annotations"], [504, 3, 1, "", "lrdb_interactions"]], "pypath.inputs.lrdb.LrdbAnnotation": [[502, 2, 1, "", "__init__"], [502, 4, 1, "", "cell_type"], [502, 2, 1, "", "count"], [502, 2, 1, "", "index"], [502, 4, 1, "", "references"], [502, 4, 1, "", "role"], [502, 4, 1, "", "sources"]], "pypath.inputs.macrophage": [[506, 3, 1, "", "macrophage_interactions"]], "pypath.inputs.matrisome": [[509, 3, 1, "", "matrisome_annotations"]], "pypath.inputs.matrixdb": [[511, 3, 1, "", "matrixdb_annotations"], [512, 3, 1, "", "matrixdb_ecm_proteins"], [513, 3, 1, "", "matrixdb_interactions"], [514, 3, 1, "", "matrixdb_membrane_proteins"], [515, 3, 1, "", "matrixdb_secreted_proteins"]], "pypath.inputs.mcam": [[517, 3, 1, "", "mcam_cell_adhesion_molecules"]], "pypath.inputs.membranome": [[519, 3, 1, "", "membranome_annotations"]], "pypath.inputs.mimp": [[521, 3, 1, "", "get_kinase_class"], [522, 3, 1, "", "mimp_enzyme_substrate"], [523, 3, 1, "", "mimp_interactions"]], "pypath.inputs.mir2disease": [[525, 3, 1, "", "mir2disease_interactions"]], "pypath.inputs.mirbase": [[527, 3, 1, "", "get_mirbase_aliases"], [528, 3, 1, "", "mirbase_ids"], [529, 3, 1, "", "mirbase_mature"], [530, 3, 1, "", "mirbase_mature_all"], [531, 3, 1, "", "mirbase_precursor"], [532, 3, 1, "", "mirbase_precursor_all"], [533, 3, 1, "", "mirbase_precursor_to_mature"]], "pypath.inputs.mirdeathdb": [[535, 3, 1, "", "mirdeathdb_interactions"]], "pypath.inputs.mirecords": [[537, 3, 1, "", "mirecords_interactions"]], "pypath.inputs.mirtarbase": [[539, 3, 1, "", "mirtarbase_interactions"]], "pypath.inputs.mitab": [[541, 3, 1, "", "mitab_field_list"], [542, 3, 1, "", "mitab_field_uniprot"]], "pypath.inputs.mppi": [[544, 3, 1, "", "mppi_interactions"]], "pypath.inputs.msigdb": [[546, 3, 1, "", "msigdb_annotations"], [547, 3, 1, "", "msigdb_download"], [548, 3, 1, "", "msigdb_download_collections"]], "pypath.inputs.ncrdeathdb": [[550, 3, 1, "", "ncrdeathdb_interactions"]], "pypath.inputs.negatome": [[552, 3, 1, "", "negatome_interactions"]], "pypath.inputs.netbiol": [[554, 3, 1, "", "arn_interactions"], [555, 3, 1, "", "nrf2ome_interactions"]], "pypath.inputs.netpath": [[557, 3, 1, "", "netpath_interactions"], [558, 3, 1, "", "netpath_names"], [559, 3, 1, "", "netpath_pathway_annotations"]], "pypath.inputs.ontology": [[561, 3, 1, "", "listof_ontologies"], [562, 3, 1, "", "ontology"]], "pypath.inputs.opm": [[564, 3, 1, "", "opm_annotations"]], "pypath.inputs.oreganno": [[566, 3, 1, "", "oreganno_interactions"], [567, 3, 1, "", "oreganno_raw"]], "pypath.inputs.panglaodb": [[569, 3, 1, "", "panglaodb_annotations"], [570, 3, 1, "", "panglaodb_raw"]], "pypath.inputs.pathwaycommons": [[572, 1, 1, "", "PathwayCommonsInteraction"], [573, 1, 1, "", "PathwayCommonsResource"], [574, 3, 1, "", "pathwaycommons_bind_interactions"], [575, 3, 1, "", "pathwaycommons_biogrid_interactions"], [576, 3, 1, "", "pathwaycommons_corum_interactions"], [577, 3, 1, "", "pathwaycommons_dip_interactions"], [578, 3, 1, "", "pathwaycommons_hprd_interactions"], [579, 3, 1, "", "pathwaycommons_inoh_interactions"], [580, 3, 1, "", "pathwaycommons_intact_interactions"], [581, 3, 1, "", "pathwaycommons_interactions"], [582, 3, 1, "", "pathwaycommons_kegg_interactions"], [583, 3, 1, "", "pathwaycommons_netpath_interactions"], [584, 3, 1, "", "pathwaycommons_panther_interactions"], [585, 3, 1, "", "pathwaycommons_phosphosite_interactions"], [586, 3, 1, "", "pathwaycommons_reactome_interactions"], [587, 3, 1, "", "pathwaycommons_wikipathways_interactions"]], "pypath.inputs.pathwaycommons.PathwayCommonsInteraction": [[572, 2, 1, "", "__init__"], [572, 2, 1, "", "count"], [572, 4, 1, "", "id_a"], [572, 4, 1, "", "id_b"], [572, 2, 1, "", "index"], [572, 4, 1, "", "interaction_type"], [572, 4, 1, "", "resource"]], "pypath.inputs.pathwaycommons.PathwayCommonsResource": [[573, 2, 1, "", "__init__"], [573, 2, 1, "", "count"], [573, 2, 1, "", "index"], [573, 4, 1, "", "name"], [573, 4, 1, "", "pc_label"], [573, 4, 1, "", "version"]], "pypath.inputs.pazar": [[589, 3, 1, "", "pazar_interactions"]], "pypath.inputs.pdb": [[591, 3, 1, "", "pdb_chains"], [592, 3, 1, "", "pdb_complexes"], [593, 3, 1, "", "pdb_uniprot"]], "pypath.inputs.pdzbase": [[595, 3, 1, "", "pdzbase_interactions"]], "pypath.inputs.pepcyber": [[597, 3, 1, "", "pepcyber_details"], [598, 3, 1, "", "pepcyber_interactions"]], "pypath.inputs.pfam": [[600, 3, 1, "", "pfam_names"], [601, 3, 1, "", "pfam_pdb"], [602, 3, 1, "", "pfam_regions"], [603, 3, 1, "", "pfam_uniprot"]], "pypath.inputs.phobius": [[605, 3, 1, "", "phobius_annotations"]], "pypath.inputs.phosphatome": [[607, 3, 1, "", "phosphatome_annotations"]], "pypath.inputs.phosphoelm": [[609, 3, 1, "", "phosphoelm_enzyme_substrate"], [610, 3, 1, "", "phosphoelm_interactions"], [611, 3, 1, "", "phosphoelm_kinases"]], "pypath.inputs.phosphonetworks": [[613, 3, 1, "", "phosphonetworks_enzyme_substrate"], [614, 3, 1, "", "phosphonetworks_interactions"]], "pypath.inputs.phosphopoint": [[616, 3, 1, "", "phosphopoint_directions"], [617, 3, 1, "", "phosphopoint_interactions"]], "pypath.inputs.phosphosite": [[619, 3, 1, "", "phosphosite_directions"], [620, 3, 1, "", "phosphosite_enzyme_substrate"], [621, 3, 1, "", "phosphosite_interactions"], [622, 3, 1, "", "phosphosite_interactions_all"], [623, 3, 1, "", "phosphosite_interactions_curated"], [624, 3, 1, "", "phosphosite_interactions_new"], [625, 3, 1, "", "phosphosite_interactions_noref"], [626, 3, 1, "", "phosphosite_ptm_orthology"], [627, 3, 1, "", "phosphosite_ptms"], [628, 3, 1, "", "phosphosite_regsites"], [629, 3, 1, "", "phosphosite_regsites_one_organism"], [630, 3, 1, "", "regsites_tab"]], "pypath.inputs.pisa": [[632, 1, 1, "", "PisaBond"], [633, 3, 1, "", "pisa_bonds"], [634, 3, 1, "", "pisa_interfaces"]], "pypath.inputs.pisa.PisaBond": [[632, 2, 1, "", "__init__"], [632, 4, 1, "", "chain_1"], [632, 4, 1, "", "chain_2"], [632, 2, 1, "", "count"], [632, 2, 1, "", "index"], [632, 4, 1, "", "residue_1"], [632, 4, 1, "", "residue_2"], [632, 4, 1, "", "seqnum_1"], [632, 4, 1, "", "seqnum_2"], [632, 4, 1, "", "uniprot_1"], [632, 4, 1, "", "uniprot_2"]], "pypath.inputs.pro": [[636, 3, 1, "", "get_pro"], [637, 3, 1, "", "pro_mapping"]], "pypath.inputs.progeny": [[639, 3, 1, "", "progeny_annotations"], [640, 3, 1, "", "progeny_raw"]], "pypath.inputs.proteinatlas": [[642, 3, 1, "", "get_proteinatlas"], [643, 3, 1, "", "proteinatlas_annotations"], [644, 3, 1, "", "proteinatlas_secretome_annotations"], [645, 3, 1, "", "proteinatlas_subcellular_annotations"]], "pypath.inputs.proteins": [[647, 3, 1, "", "variants"]], "pypath.inputs.protmapper": [[649, 3, 1, "", "get_protmapper"], [650, 3, 1, "", "protmapper_enzyme_substrate"], [651, 3, 1, "", "protmapper_interactions"]], "pypath.inputs.pubchem": [[653, 3, 1, "", "pubchem_mapping"]], "pypath.inputs.pubmed": [[655, 3, 1, "", "get_pmid"], [656, 3, 1, "", "get_pubmeds"], [657, 3, 1, "", "only_pmids"], [658, 3, 1, "", "open_pubmed"], [659, 3, 1, "", "pmids_dict"], [660, 3, 1, "", "pmids_list"]], "pypath.inputs.ramilowski2015": [[662, 3, 1, "", "ramilowski_interactions"], [663, 3, 1, "", "ramilowski_locations"]], "pypath.inputs.reaction": [[666, 3, 1, "", "acsn_biopax"], [667, 3, 1, "", "acsn_interactions_2"], [668, 3, 1, "", "get_acsn_effects"], [669, 3, 1, "", "get_controls"], [670, 3, 1, "", "get_interactions"], [671, 3, 1, "", "get_reactions"], [672, 3, 1, "", "get_soup"], [673, 3, 1, "", "panther_biopax"], [674, 3, 1, "", "panther_interactions"], [675, 3, 1, "", "pid_biopax"], [676, 3, 1, "", "pid_interactions"], [677, 3, 1, "", "process_complex"], [678, 3, 1, "", "process_controls"], [679, 3, 1, "", "process_reactions"], [680, 3, 1, "", "reactions_biopax"], [681, 3, 1, "", "reactome_biopax"], [682, 3, 1, "", "reactome_bs"], [683, 3, 1, "", "reactome_interactions"], [684, 3, 1, "", "reactome_sbml"]], "pypath.inputs.scconnect": [[686, 3, 1, "", "scconnect_annotations"], [687, 3, 1, "", "scconnect_complexes"], [688, 3, 1, "", "scconnect_interactions"]], "pypath.inputs.science": [[690, 3, 1, "", "science_download"]], "pypath.inputs.signalink": [[692, 3, 1, "", "signalink_annotations"], [693, 3, 1, "", "signalink_function_annotations"], [694, 3, 1, "", "signalink_interactions"], [695, 3, 1, "", "signalink_pathway_annotations"]], "pypath.inputs.signor": [[697, 3, 1, "", "signor_complexes"], [698, 3, 1, "", "signor_enzyme_substrate"], [699, 3, 1, "", "signor_interactions"], [700, 3, 1, "", "signor_pathway_annotations"], [701, 3, 1, "", "signor_pathways"], [702, 3, 1, "", "signor_protein_families"]], "pypath.inputs.spike": [[704, 3, 1, "", "spike_complexes"], [705, 3, 1, "", "spike_interactions"]], "pypath.inputs.stitch": [[707, 3, 1, "", "stitch_actions_interactions"], [708, 3, 1, "", "stitch_links_interactions"]], "pypath.inputs.string": [[710, 3, 1, "", "string_effects"], [711, 3, 1, "", "string_links_interactions"], [712, 3, 1, "", "string_physical_interactions"], [713, 3, 1, "", "string_species"]], "pypath.inputs.surfaceome": [[715, 3, 1, "", "surfaceome_annotations"]], "pypath.inputs.switches_elm": [[717, 3, 1, "", "get_switches_elm"]], "pypath.inputs.talklr": [[719, 3, 1, "", "talklr_annotations"], [720, 3, 1, "", "talklr_interactions"], [721, 3, 1, "", "talklr_raw"]], "pypath.inputs.tcdb": [[723, 3, 1, "", "tcdb_annotations"], [724, 3, 1, "", "tcdb_classes"], [725, 3, 1, "", "tcdb_families"]], "pypath.inputs.tfcensus": [[727, 3, 1, "", "tfcensus_annotations"]], "pypath.inputs.threedcomplex": [[729, 3, 1, "", "threedcomplex_chains"], [730, 3, 1, "", "threedcomplex_complexes"], [731, 3, 1, "", "threedcomplex_contacts"], [732, 3, 1, "", "threedcomplex_ddi"], [733, 3, 1, "", "threedcomplex_nresidues"]], "pypath.inputs.threedid": [[735, 3, 1, "", "get_3did"], [736, 3, 1, "", "get_3did_ddi"], [737, 3, 1, "", "get_3did_dmi"], [738, 3, 1, "", "process_3did_dmi"]], "pypath.inputs.topdb": [[740, 3, 1, "", "topdb_annotations"]], "pypath.inputs.transmir": [[742, 3, 1, "", "transmir_interactions"]], "pypath.inputs.trip": [[744, 3, 1, "", "take_a_trip"], [745, 3, 1, "", "trip_find_uniprot"], [746, 3, 1, "", "trip_get_uniprot"], [747, 3, 1, "", "trip_interactions"], [748, 3, 1, "", "trip_process"], [749, 3, 1, "", "trip_process_table"]], "pypath.inputs.unichem": [[751, 3, 1, "", "info"], [752, 3, 1, "", "unichem_info"], [753, 3, 1, "", "unichem_mapping"], [754, 3, 1, "", "unichem_sources"]], "pypath.inputs.uniprot": [[756, 1, 1, "", "Taxon"], [757, 1, 1, "", "UniprotRecordHistory"], [758, 3, 1, "", "all_swissprots"], [759, 3, 1, "", "all_trembls"], [760, 3, 1, "", "all_uniprots"], [761, 3, 1, "", "deleted_uniprot_genesymbol"], [762, 3, 1, "", "get_db"], [763, 3, 1, "", "get_uniprot_sec"], [764, 3, 1, "", "init_db"], [765, 3, 1, "", "is_swissprot"], [766, 3, 1, "", "is_trembl"], [767, 3, 1, "", "is_uniprot"], [768, 3, 1, "", "protein_datasheet"], [769, 3, 1, "", "swissprot_deleted"], [770, 3, 1, "", "trembl_deleted"], [771, 3, 1, "", "uniprot_data"], [772, 3, 1, "", "uniprot_deleted"], [773, 3, 1, "", "uniprot_families"], [774, 3, 1, "", "uniprot_history"], [775, 3, 1, "", "uniprot_history_recent_datasheet"], [776, 3, 1, "", "uniprot_keywords"], [777, 3, 1, "", "uniprot_locations"], [778, 3, 1, "", "uniprot_ncbi_taxids"], [779, 3, 1, "", "uniprot_ncbi_taxids_2"], [780, 3, 1, "", "uniprot_preprocess"], [781, 3, 1, "", "uniprot_recent_version"], [782, 3, 1, "", "uniprot_taxonomy"], [783, 3, 1, "", "uniprot_tissues"], [784, 3, 1, "", "uniprot_topology"], [785, 3, 1, "", "valid_uniprot"]], "pypath.inputs.uniprot.Taxon": [[756, 2, 1, "", "__init__"], [756, 2, 1, "", "count"], [756, 4, 1, "", "english"], [756, 2, 1, "", "index"], [756, 4, 1, "", "latin"], [756, 4, 1, "", "latin_synonym"], [756, 4, 1, "", "ncbi_id"]], "pypath.inputs.uniprot.UniprotRecordHistory": [[757, 2, 1, "", "__init__"], [757, 2, 1, "", "count"], [757, 4, 1, "", "database"], [757, 4, 1, "", "date"], [757, 4, 1, "", "entry_name"], [757, 4, 1, "", "entry_version"], [757, 2, 1, "", "index"], [757, 4, 1, "", "number"], [757, 4, 1, "", "replaced_by"], [757, 4, 1, "", "replaces"], [757, 4, 1, "", "sequence_version"]], "pypath.inputs.wang": [[787, 3, 1, "", "cui_interactions"], [788, 3, 1, "", "hsn_interactions"], [789, 3, 1, "", "wang_annotations"], [790, 3, 1, "", "wang_interactions"]], "pypath.inputs.wojtowicz2020": [[792, 3, 1, "", "wojtowicz2020_interactions"], [793, 3, 1, "", "wojtowicz2020_raw"]], "pypath.inputs.zhong2015": [[795, 3, 1, "", "zhong2015_annotations"]], "pypath.internals": [[797, 0, 0, "-", "annot_formats"], [802, 0, 0, "-", "input_formats"], [814, 0, 0, "-", "intera"], [824, 0, 0, "-", "license"], [830, 0, 0, "-", "maps"], [831, 0, 0, "-", "refs"], [834, 0, 0, "-", "resource"]], "pypath.internals.annot_formats": [[798, 1, 1, "", "AnnotDef"], [799, 1, 1, "", "AnnotDefKey"], [800, 1, 1, "", "AnnotOp"], [801, 1, 1, "", "AnnotationGroup"]], "pypath.internals.annot_formats.AnnotDef": [[798, 2, 1, "", "__init__"], [798, 4, 1, "", "args"], [798, 4, 1, "", "aspect"], [798, 4, 1, "", "avoid"], [798, 2, 1, "", "count"], [798, 4, 1, "", "enabled"], [798, 4, 1, "", "exclude"], [798, 2, 1, "", "index"], [798, 4, 1, "", "limit"], [798, 4, 1, "", "name"], [798, 4, 1, "", "parent"], [798, 4, 1, "", "receiver"], [798, 4, 1, "", "resource"], [798, 4, 1, "", "resource_name"], [798, 4, 1, "", "scope"], [798, 4, 1, "", "source"], [798, 4, 1, "", "transmitter"]], "pypath.internals.annot_formats.AnnotDefKey": [[799, 2, 1, "", "__init__"], [799, 2, 1, "", "count"], [799, 2, 1, "", "index"], [799, 4, 1, "", "name"], [799, 4, 1, "", "parent"], [799, 4, 1, "", "resource"]], "pypath.internals.annot_formats.AnnotOp": [[800, 2, 1, "", "__init__"], [800, 4, 1, "", "annots"], [800, 2, 1, "", "count"], [800, 2, 1, "", "index"], [800, 4, 1, "", "op"]], "pypath.internals.annot_formats.AnnotationGroup": [[801, 2, 1, "", "__init__"], [801, 2, 1, "", "filter_entity_type"], [801, 2, 1, "", "isdisjoint"]], "pypath.internals.input_formats": [[803, 1, 1, "", "ArrayMapping"], [804, 1, 1, "", "BiomartMapping"], [805, 1, 1, "", "FileMapping"], [806, 1, 1, "", "MappingInput"], [807, 1, 1, "", "NetworkInput"], [808, 1, 1, "", "PickleMapping"], [809, 1, 1, "", "ProMapping"], [810, 1, 1, "", "ReadList"], [811, 1, 1, "", "UnichemMapping"], [812, 1, 1, "", "UniprotListMapping"], [813, 1, 1, "", "UniprotMapping"]], "pypath.internals.input_formats.ArrayMapping": [[803, 2, 1, "", "__init__"]], "pypath.internals.input_formats.BiomartMapping": [[804, 2, 1, "", "__init__"]], "pypath.internals.input_formats.FileMapping": [[805, 2, 1, "", "__init__"]], "pypath.internals.input_formats.MappingInput": [[806, 2, 1, "", "__init__"]], "pypath.internals.input_formats.NetworkInput": [[807, 2, 1, "", "__init__"]], "pypath.internals.input_formats.PickleMapping": [[808, 2, 1, "", "__init__"]], "pypath.internals.input_formats.ProMapping": [[809, 2, 1, "", "__init__"]], "pypath.internals.input_formats.ReadList": [[810, 2, 1, "", "__init__"]], "pypath.internals.input_formats.UnichemMapping": [[811, 2, 1, "", "__init__"]], "pypath.internals.input_formats.UniprotListMapping": [[812, 2, 1, "", "__init__"]], "pypath.internals.input_formats.UniprotMapping": [[813, 2, 1, "", "__init__"], [813, 2, 1, "", "resource_id_type"]], "pypath.internals.intera": [[815, 1, 1, "", "Complex"], [816, 1, 1, "", "Domain"], [817, 1, 1, "", "DomainDomain"], [818, 1, 1, "", "DomainMotif"], [819, 1, 1, "", "Interface"], [820, 1, 1, "", "Motif"], [821, 1, 1, "", "Ptm"], [822, 1, 1, "", "Regulation"], [823, 1, 1, "", "Residue"]], "pypath.internals.intera.Complex": [[815, 2, 1, "", "__init__"], [815, 2, 1, "", "add_attr"], [815, 2, 1, "", "merge"]], "pypath.internals.intera.Domain": [[816, 2, 1, "", "__init__"]], "pypath.internals.intera.DomainDomain": [[817, 2, 1, "", "__init__"]], "pypath.internals.intera.DomainMotif": [[818, 2, 1, "", "__init__"], [818, 2, 1, "", "get_line"], [818, 2, 1, "", "key"]], "pypath.internals.intera.Interface": [[819, 2, 1, "", "__init__"], [819, 2, 1, "", "add_residues"], [819, 2, 1, "", "bond_types"], [819, 2, 1, "", "get_bonds"], [819, 2, 1, "", "numof_residues"]], "pypath.internals.intera.Motif": [[820, 2, 1, "", "__init__"]], "pypath.internals.intera.Ptm": [[821, 2, 1, "", "__init__"]], "pypath.internals.intera.Regulation": [[822, 2, 1, "", "__init__"]], "pypath.internals.intera.Residue": [[823, 2, 1, "", "__init__"]], "pypath.internals.license": [[825, 1, 1, "", "License"], [826, 1, 1, "", "LicenseAttrib"], [827, 1, 1, "", "LicenseFeature"], [828, 1, 1, "", "LicensePurpose"], [829, 1, 1, "", "LicenseSharing"]], "pypath.internals.license.License": [[825, 2, 1, "", "__init__"], [825, 2, 1, "", "enables"]], "pypath.internals.license.LicenseAttrib": [[826, 2, 1, "", "__init__"], [826, 2, 1, "", "check_level"], [826, 2, 1, "", "int_to_level"], [826, 2, 1, "", "level_to_int"], [826, 2, 1, "", "to_int"]], "pypath.internals.license.LicenseFeature": [[827, 2, 1, "", "__init__"], [827, 2, 1, "", "check_level"], [827, 2, 1, "", "int_to_level"], [827, 2, 1, "", "level_to_int"], [827, 2, 1, "", "to_int"]], "pypath.internals.license.LicensePurpose": [[828, 2, 1, "", "__init__"], [828, 2, 1, "", "check_level"], [828, 2, 1, "", "int_to_level"], [828, 2, 1, "", "level_to_int"], [828, 2, 1, "", "to_int"]], "pypath.internals.license.LicenseSharing": [[829, 2, 1, "", "__init__"], [829, 2, 1, "", "check_level"], [829, 2, 1, "", "int_to_level"], [829, 2, 1, "", "level_to_int"], [829, 2, 1, "", "to_int"]], "pypath.internals.refs": [[832, 1, 1, "", "Reference"], [833, 3, 1, "", "get_pubmed_data"]], "pypath.internals.refs.Reference": [[832, 2, 1, "", "__init__"]], "pypath.internals.resource": [[835, 1, 1, "", "AbstractResource"], [836, 1, 1, "", "EnzymeSubstrateResource"], [837, 1, 1, "", "EnzymeSubstrateResourceKey"], [838, 1, 1, "", "NetworkResource"], [839, 1, 1, "", "NetworkResourceKey"], [840, 1, 1, "", "ResourceAttributes"]], "pypath.internals.resource.AbstractResource": [[835, 2, 1, "", "__init__"], [835, 2, 1, "", "load_data"], [835, 2, 1, "", "process"], [835, 2, 1, "", "set_method"]], "pypath.internals.resource.EnzymeSubstrateResource": [[836, 2, 1, "", "__init__"], [836, 2, 1, "", "get_via"]], "pypath.internals.resource.EnzymeSubstrateResourceKey": [[837, 2, 1, "", "__init__"], [837, 2, 1, "", "count"], [837, 4, 1, "", "data_type"], [837, 2, 1, "", "index"], [837, 4, 1, "", "name"], [837, 4, 1, "", "via"]], "pypath.internals.resource.NetworkResource": [[838, 2, 1, "", "__init__"]], "pypath.internals.resource.NetworkResourceKey": [[839, 2, 1, "", "__init__"], [839, 2, 1, "", "count"], [839, 4, 1, "", "data_model"], [839, 4, 1, "", "data_type"], [839, 2, 1, "", "index"], [839, 4, 1, "", "interaction_type"], [839, 5, 1, "", "label"], [839, 5, 1, "", "last"], [839, 4, 1, "", "name"], [839, 4, 1, "", "via"]], "pypath.internals.resource.ResourceAttributes": [[840, 2, 1, "", "__init__"]], "pypath.legacy": [[842, 0, 0, "-", "db_categories"]], "pypath.legacy.db_categories": [[843, 3, 1, "", "get_categories"], [844, 3, 1, "", "get_category"]], "pypath.obsolete": [[847, 0, 0, "-", "colorgen"], [865, 0, 0, "-", "enrich"], [868, 0, 0, "-", "gsea"], [871, 0, 0, "-", "linkcomm"]], "pypath.obsolete.colorgen": [[848, 3, 1, "", "bias"], [849, 3, 1, "", "colormix"], [850, 3, 1, "", "dec2hex"], [851, 3, 1, "", "embl_colors"], [852, 3, 1, "", "genhsv"], [853, 3, 1, "", "genrgb"], [854, 3, 1, "", "getfracs"], [855, 3, 1, "", "gethexrgbs"], [856, 3, 1, "", "gethsvs"], [857, 3, 1, "", "getrgbs"], [858, 3, 1, "", "hex2dec"], [859, 3, 1, "", "hex2rgb"], [860, 3, 1, "", "read_palette"], [861, 3, 1, "", "rgb1"], [862, 3, 1, "", "rgb256"], [863, 3, 1, "", "rgb2hex"], [864, 3, 1, "", "zenos_dichotomy"]], "pypath.obsolete.enrich": [[866, 1, 1, "", "Enrichment"], [867, 1, 1, "", "EnrichmentSet"]], "pypath.obsolete.enrich.Enrichment": [[866, 2, 1, "", "__init__"]], "pypath.obsolete.enrich.EnrichmentSet": [[867, 2, 1, "", "__init__"]], "pypath.obsolete.gsea": [[869, 1, 1, "", "GSEA"], [870, 1, 1, "", "GSEABinaryEnrichmentSet"]], "pypath.obsolete.gsea.GSEA": [[869, 2, 1, "", "__init__"]], "pypath.obsolete.gsea.GSEABinaryEnrichmentSet": [[870, 2, 1, "", "__init__"]], "pypath.obsolete.linkcomm": [[872, 3, 1, "", "Dc"], [873, 1, 1, "", "HLC"], [874, 3, 1, "", "read_edgelist_unweighted"], [875, 3, 1, "", "read_edgelist_weighted"], [876, 3, 1, "", "similarities_unweighted"], [877, 3, 1, "", "similarities_weighted"], [878, 3, 1, "", "swap"], [879, 3, 1, "", "write_dendro"], [880, 3, 1, "", "write_edge2cid"]], "pypath.obsolete.linkcomm.HLC": [[873, 2, 1, "", "__init__"]], "pypath.omnipath": [[882, 0, 0, "-", "app"], [884, 0, 0, "-", "databases"], [893, 0, 0, "-", "export"], [895, 3, 1, "", "init"], [896, 0, 0, "-", "param"], [899, 0, 0, "-", "server"]], "pypath.omnipath.app": [[883, 1, 1, "", "DatabaseManager"]], "pypath.omnipath.app.DatabaseManager": [[883, 2, 1, "", "__init__"], [883, 2, 1, "", "build"], [883, 2, 1, "", "build_dataset"], [883, 2, 1, "", "compile_table"], [883, 2, 1, "", "compile_tables"], [883, 2, 1, "", "dataset_dependencies"], [883, 2, 1, "", "define_dataset"], [883, 2, 1, "", "ensure_dataset"], [883, 2, 1, "", "ensure_dirs"], [883, 2, 1, "", "ensure_module"], [883, 2, 1, "", "foreach_dataset"], [883, 2, 1, "", "get_args_curated"], [883, 2, 1, "", "get_args_lncrna_mrna"], [883, 2, 1, "", "get_args_mirna_mrna"], [883, 2, 1, "", "get_args_small_molecule"], [883, 2, 1, "", "get_args_tf_mirna"], [883, 2, 1, "", "get_args_tf_target"], [883, 2, 1, "", "get_build_args"], [883, 2, 1, "", "get_db"], [883, 2, 1, "", "get_param"], [883, 2, 1, "", "load_dataset"], [883, 2, 1, "", "network_df"], [883, 2, 1, "", "network_df_by_source"], [883, 2, 1, "", "pickle_exists"], [883, 2, 1, "", "pickle_path"], [883, 2, 1, "", "reload"], [883, 2, 1, "", "reload_module"], [883, 2, 1, "", "remove_all"], [883, 2, 1, "", "remove_db"], [883, 2, 1, "", "set_network"], [883, 2, 1, "", "table_path"]], "pypath.omnipath.databases": [[885, 3, 1, "", "build"], [886, 3, 1, "", "class_and_param"], [887, 0, 0, "-", "define"], [891, 3, 1, "", "get_manager"], [892, 3, 1, "", "init_manager"]], "pypath.omnipath.databases.define": [[888, 1, 1, "", "DatabaseClass"], [889, 1, 1, "", "DatabaseDefinition"], [890, 1, 1, "", "DatabaseDefinitionManager"]], "pypath.omnipath.databases.define.DatabaseClass": [[888, 2, 1, "", "__init__"]], "pypath.omnipath.databases.define.DatabaseDefinition": [[889, 2, 1, "", "__init__"], [889, 2, 1, "", "from_dict"], [889, 2, 1, "", "from_json"]], "pypath.omnipath.databases.define.DatabaseDefinitionManager": [[890, 2, 1, "", "__init__"], [890, 2, 1, "", "build"], [890, 2, 1, "", "class_and_param"]], "pypath.omnipath.export": [[894, 1, 1, "", "Export"]], "pypath.omnipath.export.Export": [[894, 2, 1, "", "__init__"], [894, 2, 1, "", "add_extra_fields"], [894, 2, 1, "", "generic_attr_processor"], [894, 2, 1, "", "get_header"], [894, 2, 1, "", "make_df"], [894, 2, 1, "", "sources_table"], [894, 2, 1, "", "write_tab"]], "pypath.omnipath.param": [[897, 3, 1, "", "curated_ppi_resources"], [898, 3, 1, "", "tf_target_resources"]], "pypath.omnipath.server": [[900, 0, 0, "-", "build"], [902, 0, 0, "-", "generate_about_page"]], "pypath.omnipath.server.build": [[901, 1, 1, "", "WebserviceTables"]], "pypath.omnipath.server.build.WebserviceTables": [[901, 2, 1, "", "__init__"]], "pypath.omnipath.server.generate_about_page": [[903, 3, 1, "", "export_licenses"], [904, 3, 1, "", "generate_about_html"], [905, 3, 1, "", "resource_list_latex"], [906, 3, 1, "", "write_html"]], "pypath.resources": [[908, 0, 0, "-", "controller"], [910, 0, 0, "-", "data"], [911, 0, 0, "-", "data_formats"], [922, 0, 0, "-", "descriptions"], [927, 3, 1, "", "get_controller"], [928, 0, 0, "-", "licenses"], [930, 0, 0, "-", "network"], [932, 0, 0, "-", "urls"]], "pypath.resources.controller": [[909, 1, 1, "", "ResourceController"]], "pypath.resources.controller.ResourceController": [[909, 2, 1, "", "__init__"], [909, 2, 1, "", "update"]], "pypath.resources.data_formats": [[912, 6, 1, "", "ROOT"], [913, 6, 1, "", "activity_flow"], [914, 6, 1, "", "enzyme_substrate"], [915, 6, 1, "", "interaction"], [916, 6, 1, "", "interaction_htp"], [917, 6, 1, "", "obsolate"], [918, 6, 1, "", "pathway_bad"], [919, 6, 1, "", "reaction_pc"], [920, 6, 1, "", "transcription_deprecated"], [921, 6, 1, "", "transcription_onebyone"]], "pypath.resources.descriptions": [[923, 3, 1, "", "export_licenses"], [924, 3, 1, "", "gen_html"], [925, 3, 1, "", "resource_list_latex"], [926, 3, 1, "", "write_html"]], "pypath.resources.licenses": [[929, 1, 1, "", "Licenses"]], "pypath.resources.licenses.Licenses": [[929, 2, 1, "", "__init__"]], "pypath.resources.network": [[931, 3, 1, "", "dorothea_expand_levels"]], "pypath.share": [[934, 0, 0, "-", "cache"], [937, 0, 0, "-", "common"], [1029, 0, 0, "-", "constants"], [1030, 0, 0, "-", "curl"], [1047, 0, 0, "-", "log"], [1050, 0, 0, "-", "progress"], [1052, 0, 0, "-", "session"], [1058, 0, 0, "-", "settings"]], "pypath.share.cache": [[935, 3, 1, "", "cache_item"], [936, 3, 1, "", "get_cachedir"]], "pypath.share.common": [[938, 3, 1, "", "add_to_list"], [939, 3, 1, "", "add_to_set"], [940, 3, 1, "", "at_least_in"], [941, 3, 1, "", "clean_dict"], [942, 3, 1, "", "combine_attrs"], [943, 3, 1, "", "console"], [944, 3, 1, "", "decode"], [945, 3, 1, "", "del_empty"], [946, 3, 1, "", "df_memory_usage"], [947, 3, 1, "", "dict_collapse_keys"], [948, 3, 1, "", "dict_counts"], [949, 3, 1, "", "dict_diff"], [950, 3, 1, "", "dict_expand_keys"], [951, 3, 1, "", "dict_percent"], [952, 3, 1, "", "dict_set_path"], [953, 3, 1, "", "dict_set_percent"], [954, 3, 1, "", "dict_str"], [955, 3, 1, "", "dict_subtotals"], [956, 3, 1, "", "dict_sym_diff"], [957, 3, 1, "", "dict_union"], [958, 3, 1, "", "eq"], [959, 3, 1, "", "filtr"], [960, 3, 1, "", "first"], [961, 3, 1, "", "flat_list"], [962, 3, 1, "", "float_or_nan"], [963, 3, 1, "", "gen_session_id"], [964, 3, 1, "", "get"], [965, 3, 1, "", "get_args"], [966, 3, 1, "", "is_float"], [967, 3, 1, "", "is_int"], [968, 3, 1, "", "is_str"], [969, 3, 1, "", "jaccard_index"], [970, 3, 1, "", "join_dicts"], [971, 3, 1, "", "latex_table"], [972, 3, 1, "", "match"], [973, 3, 1, "", "maybe_in_dict"], [974, 3, 1, "", "md5"], [975, 3, 1, "", "merge_dicts"], [976, 3, 1, "", "n_shared_elements"], [977, 3, 1, "", "n_shared_foreach"], [978, 3, 1, "", "n_shared_total"], [979, 3, 1, "", "n_shared_unique_foreach"], [980, 3, 1, "", "n_unique_elements"], [981, 3, 1, "", "n_unique_foreach"], [982, 3, 1, "", "n_unique_total"], [983, 3, 1, "", "negate"], [984, 3, 1, "", "none_or_len"], [985, 3, 1, "", "paginate"], [986, 3, 1, "", "prefix"], [987, 3, 1, "", "print_table"], [988, 3, 1, "", "re_safe_groups"], [989, 3, 1, "", "remove_prefix"], [990, 3, 1, "", "rotate"], [991, 3, 1, "", "sets_to_sorted_lists"], [992, 3, 1, "", "sfirst"], [993, 3, 1, "", "shared_elements"], [994, 3, 1, "", "shared_foreach"], [995, 3, 1, "", "shared_total"], [996, 3, 1, "", "shared_unique"], [997, 3, 1, "", "shared_unique_foreach"], [998, 3, 1, "", "shared_unique_total"], [999, 1, 1, "", "silent"], [1000, 3, 1, "", "simpson_index"], [1001, 3, 1, "", "simpson_index_counts"], [1002, 3, 1, "", "something"], [1003, 3, 1, "", "sorensen_index"], [1004, 3, 1, "", "suffix"], [1005, 3, 1, "", "sum_dicts"], [1006, 3, 1, "", "swap_dict"], [1007, 3, 1, "", "swap_dict_simple"], [1008, 3, 1, "", "swap_suffix"], [1009, 3, 1, "", "table_add_row_numbers"], [1010, 3, 1, "", "table_format"], [1011, 3, 1, "", "table_textwrap"], [1012, 3, 1, "", "to_list"], [1013, 3, 1, "", "to_set"], [1014, 3, 1, "", "try_bool"], [1015, 3, 1, "", "try_float"], [1016, 3, 1, "", "tsv_table"], [1017, 3, 1, "", "uniq_list"], [1018, 3, 1, "", "uniq_list1"], [1019, 3, 1, "", "uniq_list2"], [1020, 3, 1, "", "uniq_ord_list"], [1021, 3, 1, "", "unique_elements"], [1022, 3, 1, "", "unique_foreach"], [1023, 3, 1, "", "unique_list"], [1024, 3, 1, "", "unique_total"], [1025, 3, 1, "", "upper0"], [1026, 3, 1, "", "values"], [1027, 3, 1, "", "wcl"], [1028, 3, 1, "", "wrap_truncate"]], "pypath.share.common.silent": [[999, 2, 1, "", "__init__"]], "pypath.share.curl": [[1031, 1, 1, "", "Curl"], [1032, 1, 1, "", "FileOpener"], [1033, 1, 1, "", "RemoteFile"], [1034, 1, 1, "", "cache_delete_off"], [1035, 1, 1, "", "cache_delete_on"], [1036, 1, 1, "", "cache_off"], [1037, 1, 1, "", "cache_on"], [1038, 1, 1, "", "cache_print_off"], [1039, 1, 1, "", "cache_print_on"], [1040, 1, 1, "", "debug_off"], [1041, 1, 1, "", "debug_on"], [1042, 1, 1, "", "dryrun_off"], [1043, 1, 1, "", "dryrun_on"], [1044, 3, 1, "", "is_url"], [1045, 1, 1, "", "preserve_off"], [1046, 1, 1, "", "preserve_on"]], "pypath.share.curl.Curl": [[1031, 2, 1, "", "__init__"], [1031, 2, 1, "", "close"], [1031, 2, 1, "", "construct_binary_data"], [1031, 2, 1, "", "extract"], [1031, 2, 1, "", "is_quoted"], [1031, 2, 1, "", "open"], [1031, 2, 1, "", "open_tgz"], [1031, 2, 1, "", "set_binary_data"], [1031, 2, 1, "", "url_fix"]], "pypath.share.curl.FileOpener": [[1032, 2, 1, "", "__init__"], [1032, 2, 1, "", "extract"], [1032, 2, 1, "", "open"], [1032, 2, 1, "", "open_tgz"]], "pypath.share.curl.RemoteFile": [[1033, 2, 1, "", "__init__"]], "pypath.share.curl.cache_delete_off": [[1034, 2, 1, "", "__init__"]], "pypath.share.curl.cache_delete_on": [[1035, 2, 1, "", "__init__"]], "pypath.share.curl.cache_off": [[1036, 2, 1, "", "__init__"]], "pypath.share.curl.cache_on": [[1037, 2, 1, "", "__init__"]], "pypath.share.curl.cache_print_off": [[1038, 2, 1, "", "__init__"]], "pypath.share.curl.cache_print_on": [[1039, 2, 1, "", "__init__"]], "pypath.share.curl.debug_off": [[1040, 2, 1, "", "__init__"]], "pypath.share.curl.debug_on": [[1041, 2, 1, "", "__init__"]], "pypath.share.curl.dryrun_off": [[1042, 2, 1, "", "__init__"]], "pypath.share.curl.dryrun_on": [[1043, 2, 1, "", "__init__"]], "pypath.share.curl.preserve_off": [[1045, 2, 1, "", "__init__"]], "pypath.share.curl.preserve_on": [[1046, 2, 1, "", "__init__"]], "pypath.share.log": [[1048, 1, 1, "", "Logger"], [1049, 3, 1, "", "new_logger"]], "pypath.share.log.Logger": [[1048, 2, 1, "", "__init__"], [1048, 2, 1, "", "browse"], [1048, 2, 1, "", "close_logfile"], [1048, 2, 1, "", "console"], [1048, 2, 1, "", "flush"], [1048, 2, 1, "", "get_logdir"], [1048, 2, 1, "", "label_message"], [1048, 2, 1, "", "msg"], [1048, 2, 1, "", "open_logfile"], [1048, 2, 1, "", "strftime"], [1048, 2, 1, "", "timestamp"], [1048, 2, 1, "", "timestamp_message"]], "pypath.share.progress": [[1051, 1, 1, "", "Progress"]], "pypath.share.progress.Progress": [[1051, 2, 1, "", "__init__"], [1051, 2, 1, "", "get_desc"], [1051, 2, 1, "", "init_tqdm"], [1051, 2, 1, "", "set_done"], [1051, 2, 1, "", "set_status"], [1051, 2, 1, "", "set_total"], [1051, 2, 1, "", "step"], [1051, 2, 1, "", "terminate"]], "pypath.share.session": [[1053, 1, 1, "", "Logger"], [1054, 1, 1, "", "Session"], [1055, 3, 1, "", "get_log"], [1056, 3, 1, "", "get_session"], [1057, 3, 1, "", "new_session"]], "pypath.share.session.Logger": [[1053, 2, 1, "", "__init__"]], "pypath.share.session.Session": [[1054, 2, 1, "", "__init__"], [1054, 2, 1, "", "gen_session_id"], [1054, 2, 1, "", "start_logger"]], "pypath.share.settings": [[1059, 1, 1, "", "Settings"], [1060, 3, 1, "", "context"], [1061, 3, 1, "", "get"], [1062, 3, 1, "", "setup"]], "pypath.share.settings.Settings": [[1059, 2, 1, "", "__init__"], [1059, 2, 1, "", "context"], [1059, 2, 1, "", "get"], [1059, 2, 1, "", "get_default"], [1059, 2, 1, "", "reset"], [1059, 2, 1, "", "reset_all"], [1059, 2, 1, "", "setup"]], "pypath.utils": [[1064, 0, 0, "-", "go"], [1072, 0, 0, "-", "homology"], [1085, 0, 0, "-", "mapping"], [1100, 0, 0, "-", "pdb"], [1105, 0, 0, "-", "proteomicsdb"], [1107, 0, 0, "-", "pyreact"], [1122, 0, 0, "-", "reflists"], [1130, 0, 0, "-", "residues"], [1132, 0, 0, "-", "seq"], [1139, 0, 0, "-", "taxonomy"], [1154, 0, 0, "-", "unichem"], [1156, 0, 0, "-", "uniprot"]], "pypath.utils.go": [[1065, 1, 1, "", "GOAnnotation"], [1066, 1, 1, "", "GOCustomAnnotation"], [1067, 1, 1, "", "GeneOntology"], [1068, 3, 1, "", "annotate"], [1069, 3, 1, "", "get_db"], [1070, 3, 1, "", "init_db"], [1071, 3, 1, "", "load_go"]], "pypath.utils.go.GOAnnotation": [[1065, 2, 1, "", "__init__"], [1065, 2, 1, "", "all_uniprots"], [1065, 2, 1, "", "expr_names_to_terms"], [1065, 2, 1, "", "get_annot"], [1065, 2, 1, "", "get_annot_ancestors"], [1065, 2, 1, "", "get_annots"], [1065, 2, 1, "", "get_annots_ancestors"], [1065, 2, 1, "", "get_name"], [1065, 2, 1, "", "get_term"], [1065, 2, 1, "", "has_any_term"], [1065, 2, 1, "", "has_term"], [1065, 2, 1, "", "i_select_by_term"], [1065, 2, 1, "", "reload"], [1065, 2, 1, "", "select"], [1065, 2, 1, "", "select_by_all"], [1065, 2, 1, "", "select_by_expr"], [1065, 2, 1, "", "select_by_expr_terms"], [1065, 2, 1, "", "select_by_name"], [1065, 2, 1, "", "select_by_term"]], "pypath.utils.go.GOCustomAnnotation": [[1066, 2, 1, "", "__init__"], [1066, 2, 1, "", "get_annotation"], [1066, 2, 1, "", "get_annotations"], [1066, 2, 1, "", "process_categories"], [1066, 2, 1, "", "reload"]], "pypath.utils.go.GeneOntology": [[1067, 2, 1, "", "__init__"], [1067, 2, 1, "", "all_from_aspect"], [1067, 2, 1, "", "aspect_from_name"], [1067, 2, 1, "", "flatten"], [1067, 2, 1, "", "get_all_ancestors"], [1067, 2, 1, "", "get_all_descendants"], [1067, 2, 1, "", "get_aspect"], [1067, 2, 1, "", "get_name"], [1067, 2, 1, "", "get_term"], [1067, 2, 1, "", "highest"], [1067, 2, 1, "", "is_leaf"], [1067, 2, 1, "", "is_name"], [1067, 2, 1, "", "is_root"], [1067, 2, 1, "", "is_term"], [1067, 2, 1, "", "lowest"], [1067, 2, 1, "", "names_to_terms"], [1067, 2, 1, "", "names_to_terms_aspects"], [1067, 2, 1, "", "reload"], [1067, 2, 1, "", "set_of"], [1067, 2, 1, "", "set_of_names"], [1067, 2, 1, "", "set_of_terms"], [1067, 2, 1, "", "subgraph_nodes"], [1067, 2, 1, "", "terms_to_names"], [1067, 2, 1, "", "terms_to_names_aspects"]], "pypath.utils.homology": [[1073, 1, 1, "", "HomologyManager"], [1074, 1, 1, "", "Ortholog"], [1075, 1, 1, "", "ProteinHomology"], [1076, 1, 1, "", "Proteomes"], [1077, 1, 1, "", "PtmHomology"], [1078, 1, 1, "", "SequenceContainer"], [1079, 3, 1, "", "get_df"], [1080, 3, 1, "", "get_dict"], [1081, 3, 1, "", "get_manager"], [1082, 3, 1, "", "init"], [1083, 3, 1, "", "translate"], [1084, 3, 1, "", "translate_df"]], "pypath.utils.homology.HomologyManager": [[1073, 2, 1, "", "__init__"], [1073, 2, 1, "", "get_df"], [1073, 2, 1, "", "get_dict"], [1073, 2, 1, "", "translate"], [1073, 2, 1, "", "translate_df"]], "pypath.utils.homology.Ortholog": [[1074, 2, 1, "", "__init__"], [1074, 2, 1, "", "count"], [1074, 4, 1, "", "ensembl_hc"], [1074, 4, 1, "", "ensembl_type"], [1074, 2, 1, "", "index"], [1074, 4, 1, "", "resource"], [1074, 4, 1, "", "uniprot"]], "pypath.utils.homology.ProteinHomology": [[1075, 2, 1, "", "__init__"], [1075, 2, 1, "", "asdict"], [1075, 2, 1, "", "df"], [1075, 2, 1, "", "load_homologene"], [1075, 2, 1, "", "translate"], [1075, 2, 1, "", "translate_df"]], "pypath.utils.homology.Proteomes": [[1076, 2, 1, "", "__init__"]], "pypath.utils.homology.PtmHomology": [[1077, 2, 1, "", "__init__"], [1077, 2, 1, "", "asdict"], [1077, 2, 1, "", "df"], [1077, 2, 1, "", "load_homologene"], [1077, 2, 1, "", "ptm_orthology"], [1077, 2, 1, "", "translate"], [1077, 2, 1, "", "translate_df"], [1077, 2, 1, "", "translate_site"]], "pypath.utils.homology.SequenceContainer": [[1078, 2, 1, "", "__init__"]], "pypath.utils.mapping": [[1086, 1, 1, "", "MapReader"], [1087, 1, 1, "", "Mapper"], [1088, 1, 1, "", "MappingTable"], [1089, 1, 1, "", "MappingTableKey"], [1090, 6, 1, "", "UNIPROT_ID_TYPES"], [1091, 3, 1, "", "get_mapper"], [1092, 3, 1, "", "guess_type"], [1093, 3, 1, "", "id_from_label"], [1094, 3, 1, "", "id_from_label0"], [1095, 3, 1, "", "init"], [1096, 3, 1, "", "label"], [1097, 3, 1, "", "map_name"], [1098, 3, 1, "", "map_name0"], [1099, 3, 1, "", "map_names"]], "pypath.utils.mapping.MapReader": [[1086, 2, 1, "", "__init__"], [1086, 2, 1, "", "id_type_side"], [1086, 2, 1, "", "load"], [1086, 5, 1, "", "mapping_table_a_to_b"], [1086, 5, 1, "", "mapping_table_b_to_a"], [1086, 2, 1, "", "read"], [1086, 2, 1, "", "read_cache"], [1086, 2, 1, "", "read_mapping_array"], [1086, 2, 1, "", "read_mapping_biomart"], [1086, 2, 1, "", "read_mapping_file"], [1086, 2, 1, "", "read_mapping_unichem"], [1086, 2, 1, "", "read_mapping_uniprot"], [1086, 2, 1, "", "read_mapping_uniprot_list"], [1086, 2, 1, "", "set_uniprot_space"], [1086, 2, 1, "", "setup_cache"], [1086, 2, 1, "", "tables_loaded"], [1086, 2, 1, "", "write_cache"]], "pypath.utils.mapping.Mapper": [[1087, 2, 1, "", "__init__"], [1087, 2, 1, "", "chain_map"], [1087, 2, 1, "", "create_reverse"], [1087, 2, 1, "", "get_table_key"], [1087, 2, 1, "", "guess_type"], [1087, 2, 1, "", "has_mapping_table"], [1087, 2, 1, "", "id_types"], [1087, 2, 1, "", "identifier"], [1087, 2, 1, "", "label"], [1087, 2, 1, "", "load_genesymbol5"], [1087, 2, 1, "", "load_mapping"], [1087, 2, 1, "", "load_uniprot_static"], [1087, 2, 1, "", "map_name"], [1087, 2, 1, "", "map_name0"], [1087, 2, 1, "", "map_names"], [1087, 2, 1, "", "mapping_tables"], [1087, 2, 1, "", "only_uniprot_ac"], [1087, 2, 1, "", "other_organism_uniprot"], [1087, 2, 1, "", "primary_uniprot"], [1087, 2, 1, "", "reload"], [1087, 2, 1, "", "remove_expired"], [1087, 2, 1, "", "remove_key"], [1087, 2, 1, "", "remove_table"], [1087, 2, 1, "", "reverse_key"], [1087, 2, 1, "", "reverse_mapping"], [1087, 2, 1, "", "swissprots"], [1087, 2, 1, "", "translate_deleted_uniprot_by_genesymbol"], [1087, 2, 1, "", "trembl_swissprot"], [1087, 2, 1, "", "uniprot_cleanup"], [1087, 2, 1, "", "valid_uniprot"], [1087, 2, 1, "", "which_table"]], "pypath.utils.mapping.MappingTable": [[1088, 2, 1, "", "__init__"], [1088, 2, 1, "", "get_key"]], "pypath.utils.mapping.MappingTableKey": [[1089, 2, 1, "", "__init__"], [1089, 2, 1, "", "count"], [1089, 4, 1, "", "id_type"], [1089, 2, 1, "", "index"], [1089, 4, 1, "", "ncbi_tax_id"], [1089, 4, 1, "", "target_id_type"]], "pypath.utils.pdb": [[1101, 1, 1, "", "Residue"], [1102, 1, 1, "", "ResidueMapper"], [1103, 1, 1, "", "Segment"], [1104, 3, 1, "", "residue_pdb"]], "pypath.utils.pdb.Residue": [[1101, 2, 1, "", "__init__"], [1101, 4, 1, "", "chain"], [1101, 2, 1, "", "count"], [1101, 2, 1, "", "index"], [1101, 4, 1, "", "offset"], [1101, 4, 1, "", "resnum"], [1101, 4, 1, "", "uniprot"]], "pypath.utils.pdb.ResidueMapper": [[1102, 2, 1, "", "__init__"], [1102, 2, 1, "", "clean"], [1102, 2, 1, "", "get_residue"], [1102, 2, 1, "", "load_mapping"]], "pypath.utils.pdb.Segment": [[1103, 2, 1, "", "__init__"], [1103, 2, 1, "", "count"], [1103, 2, 1, "", "index"], [1103, 4, 1, "", "pdb_end"], [1103, 4, 1, "", "pdb_start"], [1103, 4, 1, "", "uniprot"], [1103, 4, 1, "", "uniprot_end"], [1103, 4, 1, "", "uniprot_start"]], "pypath.utils.proteomicsdb": [[1106, 1, 1, "", "ProteomicsDB"]], "pypath.utils.proteomicsdb.ProteomicsDB": [[1106, 2, 1, "", "__init__"], [1106, 2, 1, "", "get_expression"], [1106, 2, 1, "", "get_pieces"], [1106, 2, 1, "", "get_proteins"], [1106, 2, 1, "", "get_tissues"], [1106, 2, 1, "", "pandas_matrix"], [1106, 2, 1, "", "query"], [1106, 2, 1, "", "tissues_x_proteins"]], "pypath.utils.pyreact": [[1108, 1, 1, "", "AttributeHandler"], [1109, 1, 1, "", "BioPaxReader"], [1110, 1, 1, "", "Complex"], [1111, 1, 1, "", "ComplexVariations"], [1112, 1, 1, "", "Control"], [1113, 1, 1, "", "Entity"], [1114, 1, 1, "", "EntitySet"], [1115, 1, 1, "", "Intersecting"], [1116, 1, 1, "", "Protein"], [1117, 1, 1, "", "ProteinFamily"], [1118, 1, 1, "", "PyReact"], [1119, 1, 1, "", "Reaction"], [1120, 1, 1, "", "ReactionSide"], [1121, 1, 1, "", "Reference"]], "pypath.utils.pyreact.AttributeHandler": [[1108, 2, 1, "", "__init__"]], "pypath.utils.pyreact.BioPaxReader": [[1109, 2, 1, "", "__init__"], [1109, 2, 1, "", "biopax_size"], [1109, 2, 1, "", "cleanup_hook"], [1109, 2, 1, "", "close_biopax"], [1109, 2, 1, "", "extract"], [1109, 2, 1, "", "init_etree"], [1109, 2, 1, "", "iterate"], [1109, 2, 1, "", "open_biopax"], [1109, 2, 1, "", "process"], [1109, 2, 1, "", "set_progress"]], "pypath.utils.pyreact.Complex": [[1110, 2, 1, "", "__init__"]], "pypath.utils.pyreact.ComplexVariations": [[1111, 2, 1, "", "__init__"], [1111, 2, 1, "", "itermembers"]], "pypath.utils.pyreact.Control": [[1112, 2, 1, "", "__init__"]], "pypath.utils.pyreact.Entity": [[1113, 2, 1, "", "__init__"], [1113, 2, 1, "", "expand"]], "pypath.utils.pyreact.EntitySet": [[1114, 2, 1, "", "__init__"]], "pypath.utils.pyreact.Intersecting": [[1115, 2, 1, "", "__init__"]], "pypath.utils.pyreact.Protein": [[1116, 2, 1, "", "__init__"], [1116, 2, 1, "", "expand"]], "pypath.utils.pyreact.ProteinFamily": [[1117, 2, 1, "", "__init__"]], "pypath.utils.pyreact.PyReact": [[1118, 2, 1, "", "__init__"], [1118, 2, 1, "", "gen_cvariations"], [1118, 2, 1, "", "in_same_component"], [1118, 2, 1, "", "merge_complexes"], [1118, 2, 1, "", "merge_cvariations"]], "pypath.utils.pyreact.Reaction": [[1119, 2, 1, "", "__init__"]], "pypath.utils.pyreact.ReactionSide": [[1120, 2, 1, "", "__init__"], [1120, 2, 1, "", "expand"]], "pypath.utils.pyreact.Reference": [[1121, 2, 1, "", "__init__"], [1121, 2, 1, "", "expand"]], "pypath.utils.reflists": [[1123, 1, 1, "", "ReferenceListManager"], [1124, 3, 1, "", "check"], [1125, 3, 1, "", "get_manager"], [1126, 3, 1, "", "get_reflist"], [1127, 3, 1, "", "init"], [1128, 3, 1, "", "is_not"], [1129, 3, 1, "", "select"]], "pypath.utils.reflists.ReferenceListManager": [[1123, 2, 1, "", "__init__"], [1123, 2, 1, "", "check"], [1123, 2, 1, "", "is_not"], [1123, 2, 1, "", "select"]], "pypath.utils.residues": [[1131, 1, 1, "", "ResidueMapper"]], "pypath.utils.residues.ResidueMapper": [[1131, 2, 1, "", "__init__"], [1131, 2, 1, "", "clean"]], "pypath.utils.seq": [[1133, 1, 1, "", "Pfam"], [1134, 1, 1, "", "Resource"], [1135, 1, 1, "", "Seq"], [1136, 3, 1, "", "get_isoforms"], [1137, 3, 1, "", "read_fasta"], [1138, 3, 1, "", "swissprot_seq"]], "pypath.utils.seq.Pfam": [[1133, 2, 1, "", "__init__"], [1133, 2, 1, "", "iterdb"], [1133, 2, 1, "", "iterprotein"], [1133, 2, 1, "", "load"], [1133, 2, 1, "", "processor"], [1133, 2, 1, "", "unload"]], "pypath.utils.seq.Resource": [[1134, 2, 1, "", "__init__"], [1134, 2, 1, "", "iterdb"], [1134, 2, 1, "", "iterprotein"], [1134, 2, 1, "", "load"], [1134, 2, 1, "", "processor"], [1134, 2, 1, "", "unload"]], "pypath.utils.seq.Seq": [[1135, 2, 1, "", "__init__"], [1135, 2, 1, "", "findall"]], "pypath.utils.taxonomy": [[1140, 3, 1, "", "ensure_common_name"], [1141, 3, 1, "", "ensure_ensembl_name"], [1142, 3, 1, "", "ensure_latin_name"], [1143, 3, 1, "", "ensure_ncbi_tax_id"], [1144, 3, 1, "", "get_db"], [1145, 3, 1, "", "init_db"], [1146, 3, 1, "", "short_latin_names"], [1147, 3, 1, "", "shorten_latin_name"], [1148, 3, 1, "", "taxid_from_common_name"], [1149, 3, 1, "", "taxid_from_dbptm_taxon_name"], [1150, 3, 1, "", "taxid_from_ensembl_name"], [1151, 3, 1, "", "taxid_from_latin_name"], [1152, 3, 1, "", "taxid_from_nonstandard"], [1153, 3, 1, "", "uniprot_taxid"]], "pypath.utils.unichem": [[1155, 1, 1, "", "Unichem"]], "pypath.utils.unichem.Unichem": [[1155, 2, 1, "", "__init__"], [1155, 2, 1, "", "connectivity_search"], [1155, 2, 1, "", "inchikey2anything"], [1155, 2, 1, "", "info"], [1155, 2, 1, "", "smiles2chembl"], [1155, 2, 1, "", "translate"], [1155, 2, 1, "", "usage"]], "pypath.utils.uniprot": [[1157, 1, 1, "", "UniprotProtein"], [1158, 3, 1, "", "ac"], [1159, 3, 1, "", "activity_regulation"], [1160, 3, 1, "", "activity_regulation_with_xrefs"], [1161, 3, 1, "", "alternative_products"], [1162, 3, 1, "", "alternative_products_with_xrefs"], [1163, 3, 1, "", "browse"], [1164, 3, 1, "", "catalytic_activity"], [1165, 3, 1, "", "catalytic_activity_with_xrefs"], [1166, 3, 1, "", "collect"], [1167, 3, 1, "", "databases"], [1168, 3, 1, "", "disease"], [1169, 3, 1, "", "disease_with_xrefs"], [1170, 3, 1, "", "ec"], [1171, 3, 1, "", "features_table"], [1172, 3, 1, "", "full_name"], [1173, 3, 1, "", "function"], [1174, 3, 1, "", "function_genecards"], [1175, 3, 1, "", "function_or_genecards"], [1176, 3, 1, "", "function_with_genecards"], [1177, 3, 1, "", "function_with_xrefs"], [1178, 3, 1, "", "genesymbol"], [1179, 3, 1, "", "has_tag"], [1180, 3, 1, "", "id"], [1181, 3, 1, "", "info"], [1182, 3, 1, "", "info_section"], [1183, 3, 1, "", "interaction"], [1184, 3, 1, "", "interaction_with_xrefs"], [1185, 3, 1, "", "is_reviewed"], [1186, 3, 1, "", "itertag"], [1187, 3, 1, "", "keywords"], [1188, 3, 1, "", "keywords_with_xrefs"], [1189, 3, 1, "", "length"], [1190, 3, 1, "", "lengths"], [1191, 3, 1, "", "load"], [1192, 3, 1, "", "organism"], [1193, 3, 1, "", "print_features"], [1194, 3, 1, "", "ptm"], [1195, 3, 1, "", "ptm_with_xrefs"], [1196, 3, 1, "", "query"], [1197, 3, 1, "", "reload"], [1198, 3, 1, "", "remove_xrefs"], [1199, 3, 1, "", "sequence"], [1200, 3, 1, "", "sequence_caution"], [1201, 3, 1, "", "sequence_caution_with_xrefs"], [1202, 3, 1, "", "similarity"], [1203, 3, 1, "", "similarity_with_xrefs"], [1204, 3, 1, "", "subcellular_location"], [1205, 3, 1, "", "subcellular_location_with_xrefs"], [1206, 3, 1, "", "subunit"], [1207, 3, 1, "", "subunit_with_xrefs"], [1208, 3, 1, "", "tissue_specificity"], [1209, 3, 1, "", "tissue_specificity_with_xrefs"], [1210, 3, 1, "", "update_databases"], [1211, 3, 1, "", "update_info"], [1212, 3, 1, "", "web_resource"], [1213, 3, 1, "", "web_resource_with_xrefs"], [1214, 3, 1, "", "weight"], [1215, 3, 1, "", "weights"]], "pypath.utils.uniprot.UniprotProtein": [[1157, 2, 1, "", "__init__"], [1157, 5, 1, "", "databases"], [1157, 2, 1, "", "info_section"], [1157, 5, 1, "", "keywords"], [1157, 5, 1, "", "keywords_with_xrefs"], [1157, 5, 1, "", "length"], [1157, 5, 1, "", "lengths"], [1157, 5, 1, "", "sequence"], [1157, 5, 1, "", "weight"], [1157, 5, 1, "", "weights"]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:method", "3": "py:function", "4": "py:attribute", "5": "py:property", "6": "py:data"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"], "4": ["py", "attribute", "Python attribute"], "5": ["py", "property", "Python property"], "6": ["py", "data", "Python data"]}, "titleterms": {"pypath": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1219], "core": [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149], "annot": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 1068, 1218, 1222], "adhesom": [3, 159, 160, 161], "almen2009": [4, 162, 163], "annotationbas": 5, "annotationt": 6, "baccin2019": [7, 164, 165, 166], "biogp": [8, 167, 168, 169, 170, 171, 172], "cancergenecensu": 9, "cancerdrugsdb": [10, 186, 187, 188, 189], "cancersea": [11, 190, 191], "cellphonedb": [12, 101, 219, 220, 221, 222, 223, 224, 225], "cellphonedbcomplex": 13, "cellsurfaceproteinatla": 14, "cellsurfaceproteinatlascelltyp": 15, "cellcal": [16, 194, 195, 196, 197, 198], "cellcellinteract": [17, 199, 200], "cellchatdb": [18, 102, 201, 202, 203, 204, 205, 206], "cellchatdbcomplex": 19, "cellink": [20, 103, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218], "cellinkercomplex": 21, "celltalkdb": [22, 226, 227, 228, 229], "celltypist": [23, 230, 231], "comppi": [24, 249, 250, 251], "connectomedb": [25, 252, 253, 254], "corum": [26, 107, 255, 256], "corumfuncat": 27, "corumgo": 28, "cpad": [29, 259, 260, 261, 262], "customannot": 30, "cytosig": [31, 274, 275, 276], "dgidb": [32, 287, 288, 289], "disgenet": [33, 293, 294], "embrac": [34, 330, 331, 332, 333, 334], "exocarta": [35, 339, 340, 341], "gocustomintercel": 36, "gointercel": 37, "gpcrdb": [38, 368, 369], "guidetopharmacologi": [39, 108], "hpo": [40, 393, 394, 395, 396, 397], "hgnc": [41, 379, 380], "hpmrcomplex": 42, "humanplasmamembranereceptom": 43, "humanproteinatla": 44, "humanproteinatlassecretom": 45, "humanproteinatlassubcellular": 46, "humancellmap": [47, 405, 406], "icellnet": [48, 113, 425, 426, 427, 428, 429], "icellnetcomplex": 49, "integrin": [50, 443, 444], "interpro": [51, 445, 446, 447, 448, 449], "intogen": [52, 450, 451], "italk": [53, 457, 458, 459, 460], "keggpathwai": [54, 465], "keggpathwayspc": 55, "kinasedotcom": [56, 474, 475], "kirouac2010": [57, 476, 477], "lambert2018": [58, 478, 479, 480], "ligandreceptor": 59, "locat": [60, 499, 500], "lrdb": [61, 501, 502, 503, 504], "matrisom": [62, 508, 509], "matrixdb": [63, 510, 511, 512, 513, 514, 515], "mcam": [64, 516, 517], "membranom": [65, 518, 519], "msigdb": [66, 545, 546, 547, 548], "netpathpathwai": 67, "opm": [68, 563, 564], "panglaodb": [69, 568, 569, 570], "phobiu": [70, 604, 605], "phosphatom": [71, 606, 607], "progeni": [72, 638, 639, 640], "ramilowski2015": [73, 661, 662, 663], "ramilowski2015loc": 74, "scconnect": [75, 685, 686, 687, 688], "scconnectcomplex": 76, "signalinkfunct": 77, "signalinkpathwai": 78, "signorpathwai": 79, "surfaceom": [80, 714, 715], "talklr": [81, 718, 719, 720, 721], "tcdb": [82, 722, 723, 724, 725], "tfcensu": [83, 726, 727], "topdb": [84, 739, 740], "uniprotfamili": 85, "uniprotkeyword": 86, "uniprotloc": 87, "uniprottissu": 88, "uniprottopologi": 89, "vesiclepedia": 90, "wang": [91, 786, 787, 788, 789, 790], "zhong2015": [92, 794, 795], "get_db": [93, 119, 129, 140, 148, 762, 1069, 1144], "init_db": [94, 120, 130, 141, 149, 764, 1070, 1145], "attr": [95, 96], "attributehandl": [96, 1108], "common": [97, 98, 237, 238, 239, 240, 241, 242, 243, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028], "filter_network_df": 98, "complex": [99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 815, 1110, 1222], "abstractcomplexresourc": 100, "compleat": [104, 244, 245, 246], "complexaggreg": 105, "complexport": [106, 247, 248], "havugimana": [109, 376, 377, 378], "hpmr": [110, 387, 388, 389, 390, 391, 392], "humap": [111, 407, 408, 409], "humap2": 112, "kegg": [114, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473], "pdb": [115, 590, 591, 592, 593, 1100, 1101, 1102, 1103, 1104], "signor": [116, 696, 697, 698, 699, 700, 701, 702], "spike": [117, 703, 704, 705], "all_complex": 118, "entiti": [121, 122, 123, 124, 1113], "entitykei": 123, "entitylist": 124, "enz_sub": [125, 126, 127, 128, 129, 130], "enzymesubstrateaggreg": 126, "enzymesubstratehomologyprocessor": 127, "enzymesubstrateprocessor": 128, "evid": [131, 132, 133], "interact": [134, 135, 136, 137, 915, 1183, 1222], "interactiondataframerecord": 136, "interactionkei": 137, "intercel": [138, 139, 140, 141], "intercellannot": 139, "intercell_annot": [142, 143], "exclud": 143, "network": [144, 145, 146, 147, 148, 149, 930, 931, 1222], "networkentitycollect": 146, "networkstatsrecord": 147, "data": [150, 910], "disclaim": 151, "info": [152, 751, 1181], "input": [153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795], "ab": [154, 155], "abs_interact": 155, "acsn": [156, 157, 158], "acsn_interact": 157, "acsn_interactions_sif": 158, "adhesome_annot": 160, "adhesome_interact": 161, "almen2009_annot": 163, "baccin2019_annot": 165, "baccin2019_interact": 166, "biogpsdataset": 168, "biogps_annot": 169, "biogps_dataset": 170, "biogps_download": 171, "biogps_download_al": 172, "biogrid": [173, 174, 175], "biogrid_all_interact": 174, "biogrid_interact": 175, "biomart": [176, 177, 178, 179, 180, 181], "biomart_homologi": 177, "biomart_microarrai": [178, 180], "biomart_microarray_typ": 179, "biomart_queri": 181, "ca1": [182, 183], "ca1_interact": 183, "cancercellmap": [184, 185], "ccmap_interact": 185, "cancerdrugsdb_annot": 187, "cancerdrugsdb_download": 188, "cancerdrugsdb_interact": 189, "cancersea_annot": 191, "cell": [192, 193], "cell_supplementari": 193, "cellcall_annot": 195, "cellcall_download": 196, "cellcall_download_al": 197, "cellcall_interact": 198, "cellcellinteractions_annot": 200, "cellchatdb_annot": 202, "cellchatdb_cofactor": 203, "cellchatdb_complex": 204, "cellchatdb_download": 205, "cellchatdb_interact": 206, "cellinkerinteract": 208, "cellinker_annot": 209, "cellinker_complex_annot": 210, "cellinker_complex": 211, "cellinker_complexes_raw": 212, "cellinker_lr_interact": 213, "cellinker_lr_interactions_raw": 214, "cellinker_protein_annot": 215, "cellinker_smol_interact": 216, "cellinker_smol_interactions_raw": 217, "components_to_complex": 218, "cellphonedbannot": 220, "cellphonedb_complex_annot": 221, "cellphonedb_complex": 222, "cellphonedb_interact": 223, "cellphonedb_ligands_receptor": 224, "cellphonedb_protein_annot": 225, "celltalkdb_annot": 227, "celltalkdb_download": 228, "celltalkdb_interact": 229, "celltypist_annot": 231, "chembl": [232, 233, 234, 235, 236], "chembl_act": 233, "chembl_assai": 234, "chembl_molecul": 235, "chembl_target": 236, "csv_sep_chang": 238, "glom_field": 239, "json_extract": 240, "json_read": 241, "read_tabl": 242, "read_xl": 243, "compleat_complex": 245, "compleat_raw": 246, "complexportal_complex": 248, "comppi_interaction_loc": 250, "comppi_loc": 251, "connectomedb_annot": 253, "connectomedb_interact": 254, "corum_complex": 256, "cosmic": [257, 258], "cancer_gene_census_annot": 258, "cpad_annot": 260, "cpad_pathway_canc": 261, "get_cpad": 262, "cpdb": [263, 264, 265], "cpdb_interact": 264, "cpdb_interactions_ltp": 265, "credenti": [266, 267], "csa": [268, 269], "get_csa": 269, "cspa": [270, 271, 272, 273], "cspa_annot": 271, "cspa_cell_type_annot": 272, "cspa_cell_typ": 273, "cytosig_annot": 275, "cytosig_df": 276, "dbptm": [277, 278, 279, 280], "dbptm_enzyme_substr": 278, "dbptm_enzyme_substrate_old": 279, "dbptm_interact": 280, "deathdomain": [281, 282, 283], "deathdomain_interact": 282, "deathdomain_interactions_rescu": 283, "depod": [284, 285, 286], "depod_enzyme_substr": 285, "depod_interact": 286, "dgidb_annot": 288, "get_dgidb_old": 289, "dip": [290, 291, 292], "dip_interact": 291, "dip_login": 292, "disgenet_annot": 294, "domino": [295, 296, 297, 298, 299], "domino_ddi": 296, "domino_enzsub": 297, "domino_interact": 298, "get_domino": 299, "dorothea": [300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310], "dorotheainteract": 301, "dorothea_full_raw": 302, "dorothea_interact": 303, "detail": [303, 304, 305, 307, 309, 310], "dorothea_interactions_old": 304, "dorothea_old_csv": 305, "dorothea_rda_raw": 306, "get_dorothea_old": 307, "get_tfregulon": 308, "tfregulons_interact": 309, "tfregulons_interactions_old": 310, "drugbank": [311, 312, 313, 314, 315, 316], "drugbank_annot": 312, "drugbank_drug": 313, "drugbank_interact": 314, "drugbank_map": 315, "drugbank_raw_interact": 316, "drugcentr": [317, 318, 319, 320], "drugcentral_drug": 318, "drugcentral_interact": 319, "drugcentral_map": 320, "ebi": [321, 322], "ebi_rest": 322, "elm": [323, 324, 325, 326, 327], "elm_class": 324, "elm_domain": 325, "elm_inst": 326, "elm_interact": 327, "embopress": [328, 329], "embopress_supplementari": 329, "embrace_annot": 331, "embrace_interact": 332, "embrace_raw": 333, "embrace_transl": 334, "encod": [335, 336], "encode_tf_mirna_interact": 336, "ensembl": [337, 338], "ensembl_organ": 338, "get_exocarta": 340, "get_vesiclepedia": 341, "genecard": [342, 343, 344, 345], "genecards_datasheet": 343, "genecards_soup": 344, "genecards_summari": 345, "get_method": 346, "go": [347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071], "get_go_desc": 348, "get_go_quick": 349, "get_goslim": 350, "go_ancestor": 351, "go_ancestors_goos": 352, "go_ancestors_quickgo": 353, "go_annot": 354, "go_annotations_goa": 355, "go_annotations_goos": 356, "go_annotations_quickgo": 357, "go_annotations_solr": 358, "go_annotations_uniprot": 359, "go_descend": 360, "go_descendants_goos": 361, "go_descendants_quickgo": 362, "go_descendants_to_ancestor": 363, "go_term": 364, "go_terms_goos": 365, "go_terms_quickgo": 366, "go_terms_solr": 367, "gpcrdb_annot": 369, "graphviz": [370, 371], "graphviz_attr": 371, "guide2pharma": [372, 373, 374, 375], "guide2pharma_complex": 373, "guide2pharma_download": 374, "guide2pharma_interact": 375, "get_havugimana": 377, "havugimana_complex": 378, "hgnc_genegroup": 380, "hippi": [381, 382], "hippie_interact": 382, "homologen": [383, 384, 385, 386], "get_homologen": 384, "homologene_dict": 385, "homologene_uniprot_dict": 386, "hpmrinteract": 388, "get_hpmr": 389, "hpmr_annot": 390, "hpmr_complex": 391, "hpmr_interact": 392, "hpo_annot": 394, "hpo_diseas": 395, "hpo_ontologi": 396, "hpo_term": 397, "hprd": [398, 399, 400, 401, 402], "get_hprd": 399, "hprd_enzyme_substr": 400, "hprd_interact": 401, "hprd_interactions_htp": 402, "htri": [403, 404], "htri_interact": 404, "humancellmap_annot": 406, "humap2_complex": 408, "humap_complex": 409, "huri": [410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422], "hi_i_interact": 411, "hi_ii_interact": 412, "hi_iii_old": 413, "hi_union_interact": 414, "huri_interact": 415, "lit_bm_13_interact": 416, "lit_bm_17_interact": 417, "lit_bm_interact": 418, "rolland_hi_ii_14": 419, "vidal_hi_iii_old": 420, "yang2016_interact": 421, "yu2011_interact": 422, "i3d": [423, 424], "get_i3d": 424, "icellnetrecord": 426, "icellnet_annot": 427, "icellnet_complex": 428, "icellnet_interact": 429, "ielm": [430, 431, 432], "get_ielm": 431, "get_ielm_hug": 432, "imweb": [433, 434, 435], "get_imweb": 434, "get_imweb_req": 435, "innatedb": [436, 437], "innatedb_interact": 437, "instruct": [438, 439, 440], "get_instruct": 439, "get_instruct_offset": 440, "intact": [441, 442], "intact_interact": 442, "get_integrin": 444, "interpro2go_annot": 446, "interpro_annot": 447, "interpro_entri": 448, "interpro_xref": 449, "intogen_annot": 451, "ipi": [452, 453], "ipi_uniprot": 453, "iptmnet": [454, 455, 456], "iptmnetinteract": 455, "iptmnet_interact": 456, "italk_annot": 458, "italk_interact": 459, "italk_raw": 460, "kea": [461, 462, 463], "kea_enzyme_substr": 462, "kea_interact": 463, "kegg_dbget": 466, "kegg_interact": 467, "kegg_medicu": 468, "kegg_medicus_complex": 469, "kegg_medicus_interact": 470, "kegg_pathway_annot": 471, "kegg_pathway_annotations_pathwaycommon": 472, "kegg_pathwai": 473, "kinasedotcom_annot": 475, "kirouac2010_interact": 477, "lambert2018_annot": 479, "lambert2018_s1_raw": 480, "laudanna": [481, 482, 483], "laudanna_direct": 482, "laudanna_effect": 483, "li2012": [484, 485, 486, 487, 488], "get_li2012": 485, "li2012_dmi": 486, "li2012_enzyme_substr": 487, "li2012_interact": 488, "linc": [489, 490], "lincs_compound": 490, "lmpid": [491, 492, 493, 494], "lmpid_dmi": 492, "lmpid_interact": 493, "load_lmpid": 494, "lncdiseas": [495, 496], "lncdisease_interact": 496, "lncrnadb": [497, 498], "lncrnadb_interact": 498, "locate_loc": 500, "lrdbannot": 502, "lrdb_annot": 503, "lrdb_interact": 504, "macrophag": [505, 506], "macrophage_interact": 506, "main": 507, "matrisome_annot": 509, "matrixdb_annot": 511, "matrixdb_ecm_protein": 512, "matrixdb_interact": 513, "matrixdb_membrane_protein": 514, "matrixdb_secreted_protein": 515, "mcam_cell_adhesion_molecul": 517, "membranome_annot": 519, "mimp": [520, 521, 522, 523], "get_kinase_class": 521, "mimp_enzyme_substr": 522, "mimp_interact": 523, "mir2diseas": [524, 525], "mir2disease_interact": 525, "mirbas": [526, 527, 528, 529, 530, 531, 532, 533], "get_mirbase_alias": 527, "mirbase_id": 528, "mirbase_matur": 529, "mirbase_mature_al": 530, "mirbase_precursor": 531, "mirbase_precursor_al": 532, "mirbase_precursor_to_matur": 533, "mirdeathdb": [534, 535], "mirdeathdb_interact": 535, "mirecord": [536, 537], "mirecords_interact": 537, "mirtarbas": [538, 539], "mirtarbase_interact": 539, "mitab": [540, 541, 542], "mitab_field_list": 541, "mitab_field_uniprot": 542, "mppi": [543, 544], "mppi_interact": 544, "msigdb_annot": 546, "msigdb_download": 547, "msigdb_download_collect": 548, "ncrdeathdb": [549, 550], "ncrdeathdb_interact": 550, "negatom": [551, 552], "negatome_interact": 552, "netbiol": [553, 554, 555], "arn_interact": 554, "nrf2ome_interact": 555, "netpath": [556, 557, 558, 559], "netpath_interact": 557, "netpath_nam": 558, "netpath_pathway_annot": 559, "ontologi": [560, 561, 562], "listof_ontologi": 561, "opm_annot": 564, "oreganno": [565, 566, 567], "oreganno_interact": 566, "oreganno_raw": 567, "panglaodb_annot": 569, "panglaodb_raw": 570, "pathwaycommon": [571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587], "pathwaycommonsinteract": 572, "pathwaycommonsresourc": 573, "pathwaycommons_bind_interact": 574, "pathwaycommons_biogrid_interact": 575, "pathwaycommons_corum_interact": 576, "pathwaycommons_dip_interact": 577, "pathwaycommons_hprd_interact": 578, "pathwaycommons_inoh_interact": 579, "pathwaycommons_intact_interact": 580, "pathwaycommons_interact": 581, "pathwaycommons_kegg_interact": 582, "pathwaycommons_netpath_interact": 583, "pathwaycommons_panther_interact": 584, "pathwaycommons_phosphosite_interact": 585, "pathwaycommons_reactome_interact": 586, "pathwaycommons_wikipathways_interact": 587, "pazar": [588, 589], "pazar_interact": 589, "pdb_chain": 591, "pdb_complex": 592, "pdb_uniprot": 593, "pdzbase": [594, 595], "pdzbase_interact": 595, "pepcyb": [596, 597, 598], "pepcyber_detail": 597, "pepcyber_interact": 598, "pfam": [599, 600, 601, 602, 603, 1133], "pfam_nam": 600, "pfam_pdb": 601, "pfam_region": 602, "pfam_uniprot": 603, "phobius_annot": 605, "phosphatome_annot": 607, "phosphoelm": [608, 609, 610, 611], "phosphoelm_enzyme_substr": 609, "phosphoelm_interact": 610, "phosphoelm_kinas": 611, "phosphonetwork": [612, 613, 614], "phosphonetworks_enzyme_substr": 613, "phosphonetworks_interact": 614, "phosphopoint": [615, 616, 617], "phosphopoint_direct": 616, "phosphopoint_interact": 617, "phosphosit": [618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630], "phosphosite_direct": 619, "phosphosite_enzyme_substr": 620, "phosphosite_interact": 621, "phosphosite_interactions_al": 622, "phosphosite_interactions_cur": 623, "phosphosite_interactions_new": 624, "phosphosite_interactions_noref": 625, "phosphosite_ptm_orthologi": 626, "phosphosite_ptm": 627, "phosphosite_regsit": 628, "phosphosite_regsites_one_organ": 629, "regsites_tab": 630, "pisa": [631, 632, 633, 634], "pisabond": 632, "pisa_bond": 633, "pisa_interfac": 634, "pro": [635, 636, 637], "get_pro": 636, "pro_map": 637, "progeny_annot": 639, "progeny_raw": 640, "proteinatla": [641, 642, 643, 644, 645], "get_proteinatla": 642, "proteinatlas_annot": 643, "proteinatlas_secretome_annot": 644, "proteinatlas_subcellular_annot": 645, "protein": [646, 647, 1116], "variant": 647, "protmapp": [648, 649, 650, 651], "get_protmapp": 649, "protmapper_enzyme_substr": 650, "protmapper_interact": 651, "pubchem": [652, 653], "pubchem_map": 653, "pubm": [654, 655, 656, 657, 658, 659, 660], "get_pmid": 655, "get_pubm": 656, "only_pmid": 657, "open_pubm": 658, "pmids_dict": 659, "pmids_list": 660, "ramilowski_interact": 662, "ramilowski_loc": 663, "rdata": 664, "reaction": [665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 1119], "acsn_biopax": 666, "acsn_interactions_2": 667, "get_acsn_effect": 668, "get_control": [669, 927], "get_interact": 670, "get_react": 671, "get_soup": 672, "panther_biopax": 673, "panther_interact": 674, "pid_biopax": 675, "pid_interact": 676, "process_complex": 677, "process_control": 678, "process_react": 679, "reactions_biopax": 680, "reactome_biopax": 681, "reactome_b": 682, "reactome_interact": 683, "reactome_sbml": 684, "scconnect_annot": 686, "scconnect_complex": 687, "scconnect_interact": 688, "scienc": [689, 690], "science_download": 690, "signalink": [691, 692, 693, 694, 695], "signalink_annot": 692, "signalink_function_annot": 693, "signalink_interact": 694, "signalink_pathway_annot": 695, "signor_complex": 697, "signor_enzyme_substr": 698, "signor_interact": 699, "signor_pathway_annot": 700, "signor_pathwai": 701, "signor_protein_famili": 702, "spike_complex": 704, "spike_interact": 705, "stitch": [706, 707, 708], "stitch_actions_interact": 707, "stitch_links_interact": 708, "string": [709, 710, 711, 712, 713], "string_effect": 710, "string_links_interact": 711, "string_physical_interact": 712, "string_speci": 713, "surfaceome_annot": 715, "switches_elm": [716, 717], "get_switches_elm": 717, "talklr_annot": 719, "talklr_interact": 720, "talklr_raw": 721, "tcdb_annot": 723, "tcdb_class": 724, "tcdb_famili": 725, "tfcensus_annot": 727, "threedcomplex": [728, 729, 730, 731, 732, 733], "threedcomplex_chain": 729, "threedcomplex_complex": 730, "threedcomplex_contact": 731, "threedcomplex_ddi": 732, "threedcomplex_nresidu": 733, "threedid": [734, 735, 736, 737, 738], "get_3did": 735, "get_3did_ddi": 736, "get_3did_dmi": 737, "process_3did_dmi": 738, "topdb_annot": 740, "transmir": [741, 742], "transmir_interact": 742, "trip": [743, 744, 745, 746, 747, 748, 749], "take_a_trip": 744, "trip_find_uniprot": 745, "trip_get_uniprot": 746, "trip_interact": 747, "trip_process": 748, "trip_process_t": 749, "unichem": [750, 751, 752, 753, 754, 1154, 1155], "unichem_info": 752, "unichem_map": 753, "unichem_sourc": 754, "uniprot": [755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215], "taxon": 756, "uniprotrecordhistori": 757, "all_swissprot": 758, "all_trembl": 759, "all_uniprot": 760, "deleted_uniprot_genesymbol": 761, "get_uniprot_sec": 763, "is_swissprot": 765, "is_trembl": 766, "is_uniprot": 767, "protein_datasheet": 768, "swissprot_delet": 769, "trembl_delet": 770, "uniprot_data": 771, "uniprot_delet": 772, "uniprot_famili": 773, "uniprot_histori": 774, "uniprot_history_recent_datasheet": 775, "uniprot_keyword": 776, "uniprot_loc": 777, "uniprot_ncbi_taxid": 778, "uniprot_ncbi_taxids_2": 779, "uniprot_preprocess": 780, "uniprot_recent_vers": 781, "uniprot_taxonomi": 782, "uniprot_tissu": 783, "uniprot_topologi": 784, "valid_uniprot": 785, "cui_interact": 787, "hsn_interact": 788, "wang_annot": 789, "wang_interact": 790, "wojtowicz2020": [791, 792, 793], "wojtowicz2020_interact": 792, "wojtowicz2020_raw": 793, "zhong2015_annot": 795, "intern": [796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840], "annot_format": [797, 798, 799, 800, 801], "annotdef": 798, "annotdefkei": 799, "annotop": 800, "annotationgroup": 801, "input_format": [802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813], "arraymap": 803, "biomartmap": 804, "filemap": 805, "mappinginput": 806, "networkinput": 807, "picklemap": 808, "promap": 809, "readlist": 810, "unichemmap": 811, "uniprotlistmap": 812, "uniprotmap": 813, "intera": [814, 815, 816, 817, 818, 819, 820, 821, 822, 823], "domain": 816, "domaindomain": 817, "domainmotif": 818, "interfac": 819, "motif": 820, "ptm": [821, 1194], "regul": 822, "residu": [823, 1101, 1130, 1131], "licens": [824, 825, 826, 827, 828, 829, 928, 929], "licenseattrib": 826, "licensefeatur": 827, "licensepurpos": 828, "licenseshar": 829, "map": [830, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099], "ref": [831, 832, 833], "refer": [832, 1121, 1219], "get_pubmed_data": 833, "resourc": [834, 835, 836, 837, 838, 839, 840, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 1134], "abstractresourc": 835, "enzymesubstrateresourc": 836, "enzymesubstrateresourcekei": 837, "networkresourc": 838, "networkresourcekei": 839, "resourceattribut": 840, "legaci": [841, 842, 843, 844], "db_categori": [842, 843, 844], "get_categori": [843, 844], "log": [845, 1047, 1048, 1049], "obsolet": [846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880], "colorgen": [847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864], "bia": 848, "colormix": 849, "dec2hex": 850, "embl_color": 851, "genhsv": 852, "genrgb": 853, "getfrac": 854, "gethexrgb": 855, "gethsv": 856, "getrgb": 857, "hex2dec": 858, "hex2rgb": 859, "read_palett": 860, "rgb1": 861, "rgb256": 862, "rgb2hex": 863, "zenos_dichotomi": 864, "enrich": [865, 866, 867], "enrichmentset": 867, "gsea": [868, 869, 870], "gseabinaryenrichmentset": 870, "linkcomm": [871, 872, 873, 874, 875, 876, 877, 878, 879, 880], "dc": 872, "hlc": 873, "read_edgelist_unweight": 874, "read_edgelist_weight": 875, "similarities_unweight": 876, "similarities_weight": 877, "swap": 878, "write_dendro": 879, "write_edge2cid": 880, "omnipath": [881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 1222], "app": [882, 883], "databasemanag": 883, "databas": [884, 885, 886, 887, 888, 889, 890, 891, 892, 1167], "build": [885, 900, 901, 1220], "class_and_param": 886, "defin": [887, 888, 889, 890], "databaseclass": 888, "databasedefinit": 889, "databasedefinitionmanag": 890, "get_manag": [891, 1081, 1125], "init_manag": 892, "export": [893, 894], "init": [895, 1082, 1095, 1127], "param": [896, 897, 898], "curated_ppi_resourc": 897, "tf_target_resourc": 898, "server": [899, 900, 901, 902, 903, 904, 905, 906], "webservicet": 901, "generate_about_pag": [902, 903, 904, 905, 906], "export_licens": [903, 923], "generate_about_html": 904, "resource_list_latex": [905, 925], "write_html": [906, 926], "control": [908, 909, 1112], "resourcecontrol": 909, "data_format": [911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921], "root": 912, "activity_flow": 913, "enzyme_substr": 914, "interaction_htp": 916, "obsol": 917, "pathway_bad": 918, "reaction_pc": 919, "transcription_deprec": 920, "transcription_onebyon": 921, "descript": [922, 923, 924, 925, 926], "gen_html": 924, "dorothea_expand_level": 931, "url": 932, "share": [933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062], "cach": [934, 935, 936], "cache_item": 935, "get_cachedir": 936, "add_to_list": 938, "add_to_set": 939, "at_least_in": 940, "clean_dict": 941, "combine_attr": 942, "consol": 943, "decod": 944, "del_empti": 945, "df_memory_usag": 946, "dict_collapse_kei": 947, "dict_count": 948, "dict_diff": 949, "dict_expand_kei": 950, "dict_perc": 951, "dict_set_path": 952, "dict_set_perc": 953, "dict_str": 954, "dict_subtot": 955, "dict_sym_diff": 956, "dict_union": 957, "eq": 958, "filtr": 959, "first": 960, "flat_list": 961, "float_or_nan": 962, "gen_session_id": 963, "get": [964, 1061], "get_arg": 965, "is_float": 966, "is_int": 967, "is_str": 968, "jaccard_index": 969, "join_dict": 970, "latex_t": 971, "match": 972, "maybe_in_dict": 973, "md5": 974, "merge_dict": 975, "n_shared_el": 976, "n_shared_foreach": 977, "n_shared_tot": 978, "n_shared_unique_foreach": 979, "n_unique_el": 980, "n_unique_foreach": 981, "n_unique_tot": 982, "negat": 983, "none_or_len": 984, "pagin": 985, "prefix": 986, "print_tabl": 987, "re_safe_group": 988, "remove_prefix": 989, "rotat": 990, "sets_to_sorted_list": 991, "sfirst": 992, "shared_el": 993, "shared_foreach": 994, "shared_tot": 995, "shared_uniqu": 996, "shared_unique_foreach": 997, "shared_unique_tot": 998, "silent": 999, "simpson_index": 1000, "simpson_index_count": 1001, "someth": 1002, "sorensen_index": 1003, "suffix": 1004, "sum_dict": 1005, "swap_dict": 1006, "swap_dict_simpl": 1007, "swap_suffix": 1008, "table_add_row_numb": 1009, "table_format": 1010, "table_textwrap": 1011, "to_list": 1012, "to_set": 1013, "try_bool": 1014, "try_float": 1015, "tsv_tabl": 1016, "uniq_list": 1017, "uniq_list1": 1018, "uniq_list2": 1019, "uniq_ord_list": 1020, "unique_el": 1021, "unique_foreach": 1022, "unique_list": 1023, "unique_tot": 1024, "upper0": 1025, "valu": 1026, "wcl": 1027, "wrap_trunc": 1028, "constant": 1029, "curl": [1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046], "fileopen": 1032, "remotefil": 1033, "cache_delete_off": 1034, "cache_delete_on": 1035, "cache_off": 1036, "cache_on": 1037, "cache_print_off": 1038, "cache_print_on": 1039, "debug_off": 1040, "debug_on": 1041, "dryrun_off": 1042, "dryrun_on": 1043, "is_url": 1044, "preserve_off": 1045, "preserve_on": 1046, "logger": [1048, 1053], "new_logg": 1049, "progress": [1050, 1051], "session": [1052, 1053, 1054, 1055, 1056, 1057], "get_log": 1055, "get_sess": 1056, "new_sess": 1057, "set": [1058, 1059, 1060, 1061, 1062], "context": 1060, "setup": 1062, "util": [1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215], "goannot": 1065, "gocustomannot": 1066, "geneontologi": 1067, "load_go": 1071, "homologi": [1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084], "homologymanag": 1073, "ortholog": 1074, "proteinhomologi": 1075, "proteom": 1076, "ptmhomologi": 1077, "sequencecontain": 1078, "get_df": 1079, "get_dict": 1080, "translat": 1083, "translate_df": 1084, "mapread": 1086, "mapper": 1087, "mappingt": 1088, "mappingtablekei": 1089, "uniprot_id_typ": 1090, "get_mapp": 1091, "guess_typ": 1092, "id_from_label": 1093, "id_from_label0": 1094, "label": 1096, "map_nam": [1097, 1099], "map_name0": 1098, "residuemapp": [1102, 1131], "segment": 1103, "residue_pdb": 1104, "proteomicsdb": [1105, 1106], "pyreact": [1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121], "biopaxread": 1109, "complexvari": 1111, "entityset": 1114, "intersect": 1115, "proteinfamili": 1117, "reactionsid": 1120, "reflist": [1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129], "referencelistmanag": 1123, "check": 1124, "get_reflist": 1126, "is_not": 1128, "select": 1129, "seq": [1132, 1133, 1134, 1135, 1136, 1137, 1138], "get_isoform": 1136, "read_fasta": 1137, "swissprot_seq": 1138, "taxonomi": [1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153], "ensure_common_nam": 1140, "ensure_ensembl_nam": 1141, "ensure_latin_nam": 1142, "ensure_ncbi_tax_id": 1143, "short_latin_nam": 1146, "shorten_latin_nam": 1147, "taxid_from_common_nam": 1148, "taxid_from_dbptm_taxon_nam": 1149, "taxid_from_ensembl_nam": 1150, "taxid_from_latin_nam": 1151, "taxid_from_nonstandard": 1152, "uniprot_taxid": 1153, "uniprotprotein": 1157, "ac": 1158, "activity_regul": 1159, "activity_regulation_with_xref": 1160, "alternative_product": 1161, "alternative_products_with_xref": 1162, "brows": 1163, "catalytic_act": 1164, "catalytic_activity_with_xref": 1165, "collect": 1166, "diseas": 1168, "disease_with_xref": 1169, "ec": 1170, "features_t": 1171, "full_nam": 1172, "function": [1173, 1218], "function_genecard": 1174, "function_or_genecard": 1175, "function_with_genecard": 1176, "function_with_xref": 1177, "genesymbol": 1178, "has_tag": 1179, "id": [1180, 1218], "info_sect": 1182, "interaction_with_xref": 1184, "is_review": 1185, "itertag": 1186, "keyword": 1187, "keywords_with_xref": 1188, "length": [1189, 1190], "load": 1191, "organ": 1192, "print_featur": 1193, "ptm_with_xref": 1195, "queri": [1196, 1222], "reload": 1197, "remove_xref": 1198, "sequenc": [1199, 1218], "sequence_caut": 1200, "sequence_caution_with_xref": 1201, "similar": 1202, "similarity_with_xref": 1203, "subcellular_loc": 1204, "subcellular_location_with_xref": 1205, "subunit": 1206, "subunit_with_xref": 1207, "tissue_specif": 1208, "tissue_specificity_with_xref": 1209, "update_databas": 1210, "update_info": 1211, "web_resourc": 1212, "web_resource_with_xref": 1213, "weight": [1214, 1215], "visual": 1216, "releas": [1217, 1221], "histori": [1217, 1221], "0": [1217, 1221], "1": [1217, 1221], "2": [1217, 1221], "3": [1217, 1221], "4": [1217, 1221], "5": [1217, 1221], "7": [1217, 1221], "74": [1217, 1221], "upcom": [1217, 1221], "featur": 1218, "convers": 1218, "pathwai": 1218, "structur": 1218, "tissu": 1218, "express": 1218, "drug": 1218, "compound": 1218, "technic": 1218, "A": 1219, "python": [1219, 1220], "modul": 1219, "molecular": [1219, 1222], "signal": 1219, "prior": 1219, "knowledg": 1219, "process": 1219, "content": 1219, "instal": 1220, "linux": 1220, "igraph": 1220, "c": 1220, "librari": 1220, "cairo": 1220, "pycairo": 1220, "directli": 1220, "from": 1220, "git": 1220, "With": 1220, "pip": 1220, "sourc": 1220, "distribut": 1220, "mac": 1220, "o": 1220, "x": 1220, "troubleshoot": 1220, "microsoft": 1220, "window": 1220, "anaconda": 1220, "other": 1220, "known": 1220, "issu": 1220, "32": 1221, "6": 1221, "31": 1221, "93": 1221, "110": 1221, "8": 1221, "9": 1221, "10": 1221, "webservic": 1222, "type": 1222, "dataset": 1222, "mous": 1222, "rat": 1222, "exampl": 1222, "enzym": 1222, "substrat": 1222, "role": 1222, "inter": 1222, "cellular": 1222, "commun": 1222, "explor": 1222, "possibl": 1222, "paramet": 1222, "can": 1222, "i": 1222, "us": 1222, "r": 1222}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx_last_updated_by_git": 1, "sphinx": 57}, "alltitles": {"pypath": [[0, "module-pypath"]], "pypath.core": [[1, "module-pypath.core"]], "pypath.core.annot": [[2, "module-pypath.core.annot"]], "pypath.core.annot.Adhesome": [[3, "pypath-core-annot-adhesome"]], "pypath.core.annot.Almen2009": [[4, "pypath-core-annot-almen2009"]], "pypath.core.annot.AnnotationBase": [[5, "pypath-core-annot-annotationbase"]], "pypath.core.annot.AnnotationTable": [[6, "pypath-core-annot-annotationtable"]], "pypath.core.annot.Baccin2019": [[7, "pypath-core-annot-baccin2019"]], "pypath.core.annot.Biogps": [[8, "pypath-core-annot-biogps"]], "pypath.core.annot.CancerGeneCensus": [[9, "pypath-core-annot-cancergenecensus"]], "pypath.core.annot.Cancerdrugsdb": [[10, "pypath-core-annot-cancerdrugsdb"]], "pypath.core.annot.Cancersea": [[11, "pypath-core-annot-cancersea"]], "pypath.core.annot.CellPhoneDB": [[12, "pypath-core-annot-cellphonedb"]], "pypath.core.annot.CellPhoneDBComplex": [[13, "pypath-core-annot-cellphonedbcomplex"]], "pypath.core.annot.CellSurfaceProteinAtlas": [[14, "pypath-core-annot-cellsurfaceproteinatlas"]], "pypath.core.annot.CellSurfaceProteinAtlasCellType": [[15, "pypath-core-annot-cellsurfaceproteinatlascelltype"]], "pypath.core.annot.Cellcall": [[16, "pypath-core-annot-cellcall"]], "pypath.core.annot.Cellcellinteractions": [[17, "pypath-core-annot-cellcellinteractions"]], "pypath.core.annot.Cellchatdb": [[18, "pypath-core-annot-cellchatdb"]], "pypath.core.annot.CellchatdbComplex": [[19, "pypath-core-annot-cellchatdbcomplex"]], "pypath.core.annot.Cellinker": [[20, "pypath-core-annot-cellinker"]], "pypath.core.annot.CellinkerComplex": [[21, "pypath-core-annot-cellinkercomplex"]], "pypath.core.annot.Celltalkdb": [[22, "pypath-core-annot-celltalkdb"]], "pypath.core.annot.Celltypist": [[23, "pypath-core-annot-celltypist"]], "pypath.core.annot.Comppi": [[24, "pypath-core-annot-comppi"]], "pypath.core.annot.Connectomedb": [[25, "pypath-core-annot-connectomedb"]], "pypath.core.annot.Corum": [[26, "pypath-core-annot-corum"]], "pypath.core.annot.CorumFuncat": [[27, "pypath-core-annot-corumfuncat"]], "pypath.core.annot.CorumGO": [[28, "pypath-core-annot-corumgo"]], "pypath.core.annot.Cpad": [[29, "pypath-core-annot-cpad"]], "pypath.core.annot.CustomAnnotation": [[30, "pypath-core-annot-customannotation"]], "pypath.core.annot.Cytosig": [[31, "pypath-core-annot-cytosig"]], "pypath.core.annot.Dgidb": [[32, "pypath-core-annot-dgidb"]], "pypath.core.annot.Disgenet": [[33, "pypath-core-annot-disgenet"]], "pypath.core.annot.Embrace": [[34, "pypath-core-annot-embrace"]], "pypath.core.annot.Exocarta": [[35, "pypath-core-annot-exocarta"]], "pypath.core.annot.GOCustomIntercell": [[36, "pypath-core-annot-gocustomintercell"]], "pypath.core.annot.GOIntercell": [[37, "pypath-core-annot-gointercell"]], "pypath.core.annot.Gpcrdb": [[38, "pypath-core-annot-gpcrdb"]], "pypath.core.annot.GuideToPharmacology": [[39, "pypath-core-annot-guidetopharmacology"]], "pypath.core.annot.HPO": [[40, "pypath-core-annot-hpo"]], "pypath.core.annot.Hgnc": [[41, "pypath-core-annot-hgnc"]], "pypath.core.annot.HpmrComplex": [[42, "pypath-core-annot-hpmrcomplex"]], "pypath.core.annot.HumanPlasmaMembraneReceptome": [[43, "pypath-core-annot-humanplasmamembranereceptome"]], "pypath.core.annot.HumanProteinAtlas": [[44, "pypath-core-annot-humanproteinatlas"]], "pypath.core.annot.HumanProteinAtlasSecretome": [[45, "pypath-core-annot-humanproteinatlassecretome"]], "pypath.core.annot.HumanProteinAtlasSubcellular": [[46, "pypath-core-annot-humanproteinatlassubcellular"]], "pypath.core.annot.Humancellmap": [[47, "pypath-core-annot-humancellmap"]], "pypath.core.annot.Icellnet": [[48, "pypath-core-annot-icellnet"]], "pypath.core.annot.IcellnetComplex": [[49, "pypath-core-annot-icellnetcomplex"]], "pypath.core.annot.Integrins": [[50, "pypath-core-annot-integrins"]], "pypath.core.annot.InterPro": [[51, "pypath-core-annot-interpro"]], "pypath.core.annot.Intogen": [[52, "pypath-core-annot-intogen"]], "pypath.core.annot.Italk": [[53, "pypath-core-annot-italk"]], "pypath.core.annot.KeggPathways": [[54, "pypath-core-annot-keggpathways"]], "pypath.core.annot.KeggPathwaysPC": [[55, "pypath-core-annot-keggpathwayspc"]], "pypath.core.annot.Kinasedotcom": [[56, "pypath-core-annot-kinasedotcom"]], "pypath.core.annot.Kirouac2010": [[57, "pypath-core-annot-kirouac2010"]], "pypath.core.annot.Lambert2018": [[58, "pypath-core-annot-lambert2018"]], "pypath.core.annot.LigandReceptor": [[59, "pypath-core-annot-ligandreceptor"]], "pypath.core.annot.Locate": [[60, "pypath-core-annot-locate"]], "pypath.core.annot.Lrdb": [[61, "pypath-core-annot-lrdb"]], "pypath.core.annot.Matrisome": [[62, "pypath-core-annot-matrisome"]], "pypath.core.annot.Matrixdb": [[63, "pypath-core-annot-matrixdb"]], "pypath.core.annot.Mcam": [[64, "pypath-core-annot-mcam"]], "pypath.core.annot.Membranome": [[65, "pypath-core-annot-membranome"]], "pypath.core.annot.Msigdb": [[66, "pypath-core-annot-msigdb"]], "pypath.core.annot.NetpathPathways": [[67, "pypath-core-annot-netpathpathways"]], "pypath.core.annot.Opm": [[68, "pypath-core-annot-opm"]], "pypath.core.annot.Panglaodb": [[69, "pypath-core-annot-panglaodb"]], "pypath.core.annot.Phobius": [[70, "pypath-core-annot-phobius"]], "pypath.core.annot.Phosphatome": [[71, "pypath-core-annot-phosphatome"]], "pypath.core.annot.Progeny": [[72, "pypath-core-annot-progeny"]], "pypath.core.annot.Ramilowski2015": [[73, "pypath-core-annot-ramilowski2015"]], "pypath.core.annot.Ramilowski2015Location": [[74, "pypath-core-annot-ramilowski2015location"]], "pypath.core.annot.Scconnect": [[75, "pypath-core-annot-scconnect"]], "pypath.core.annot.ScconnectComplex": [[76, "pypath-core-annot-scconnectcomplex"]], "pypath.core.annot.SignalinkFunctions": [[77, "pypath-core-annot-signalinkfunctions"]], "pypath.core.annot.SignalinkPathways": [[78, "pypath-core-annot-signalinkpathways"]], "pypath.core.annot.SignorPathways": [[79, "pypath-core-annot-signorpathways"]], "pypath.core.annot.Surfaceome": [[80, "pypath-core-annot-surfaceome"]], "pypath.core.annot.Talklr": [[81, "pypath-core-annot-talklr"]], "pypath.core.annot.Tcdb": [[82, "pypath-core-annot-tcdb"]], "pypath.core.annot.Tfcensus": [[83, "pypath-core-annot-tfcensus"]], "pypath.core.annot.Topdb": [[84, "pypath-core-annot-topdb"]], "pypath.core.annot.UniprotFamilies": [[85, "pypath-core-annot-uniprotfamilies"]], "pypath.core.annot.UniprotKeywords": [[86, "pypath-core-annot-uniprotkeywords"]], "pypath.core.annot.UniprotLocations": [[87, "pypath-core-annot-uniprotlocations"]], "pypath.core.annot.UniprotTissues": [[88, "pypath-core-annot-uniprottissues"]], "pypath.core.annot.UniprotTopologies": [[89, "pypath-core-annot-uniprottopologies"]], "pypath.core.annot.Vesiclepedia": [[90, "pypath-core-annot-vesiclepedia"]], "pypath.core.annot.Wang": [[91, "pypath-core-annot-wang"]], "pypath.core.annot.Zhong2015": [[92, "pypath-core-annot-zhong2015"]], "pypath.core.annot.get_db": [[93, "pypath-core-annot-get-db"]], "pypath.core.annot.init_db": [[94, "pypath-core-annot-init-db"]], "pypath.core.attrs": [[95, "module-pypath.core.attrs"]], "pypath.core.attrs.AttributeHandler": [[96, "pypath-core-attrs-attributehandler"]], "pypath.core.common": [[97, "module-pypath.core.common"]], "pypath.core.common.filter_network_df": [[98, "pypath-core-common-filter-network-df"]], "pypath.core.complex": [[99, "module-pypath.core.complex"]], "pypath.core.complex.AbstractComplexResource": [[100, "pypath-core-complex-abstractcomplexresource"]], "pypath.core.complex.CellPhoneDB": [[101, "pypath-core-complex-cellphonedb"]], "pypath.core.complex.Cellchatdb": [[102, "pypath-core-complex-cellchatdb"]], "pypath.core.complex.Cellinker": [[103, "pypath-core-complex-cellinker"]], "pypath.core.complex.Compleat": [[104, "pypath-core-complex-compleat"]], "pypath.core.complex.ComplexAggregator": [[105, "pypath-core-complex-complexaggregator"]], "pypath.core.complex.ComplexPortal": [[106, "pypath-core-complex-complexportal"]], "pypath.core.complex.Corum": [[107, "pypath-core-complex-corum"]], "pypath.core.complex.GuideToPharmacology": [[108, "pypath-core-complex-guidetopharmacology"]], "pypath.core.complex.Havugimana": [[109, "pypath-core-complex-havugimana"]], "pypath.core.complex.Hpmr": [[110, "pypath-core-complex-hpmr"]], "pypath.core.complex.Humap": [[111, "pypath-core-complex-humap"]], "pypath.core.complex.Humap2": [[112, "pypath-core-complex-humap2"]], "pypath.core.complex.Icellnet": [[113, "pypath-core-complex-icellnet"]], "pypath.core.complex.Kegg": [[114, "pypath-core-complex-kegg"]], "pypath.core.complex.Pdb": [[115, "pypath-core-complex-pdb"]], "pypath.core.complex.Signor": [[116, "pypath-core-complex-signor"]], "pypath.core.complex.Spike": [[117, "pypath-core-complex-spike"]], "pypath.core.complex.all_complexes": [[118, "pypath-core-complex-all-complexes"]], "pypath.core.complex.get_db": [[119, "pypath-core-complex-get-db"]], "pypath.core.complex.init_db": [[120, "pypath-core-complex-init-db"]], "pypath.core.entity": [[121, "module-pypath.core.entity"]], "pypath.core.entity.Entity": [[122, "pypath-core-entity-entity"]], "pypath.core.entity.EntityKey": [[123, "pypath-core-entity-entitykey"]], "pypath.core.entity.EntityList": [[124, "pypath-core-entity-entitylist"]], "pypath.core.enz_sub": [[125, "module-pypath.core.enz_sub"]], "pypath.core.enz_sub.EnzymeSubstrateAggregator": [[126, "pypath-core-enz-sub-enzymesubstrateaggregator"]], "pypath.core.enz_sub.EnzymeSubstrateHomologyProcessor": [[127, "pypath-core-enz-sub-enzymesubstratehomologyprocessor"]], "pypath.core.enz_sub.EnzymeSubstrateProcessor": [[128, "pypath-core-enz-sub-enzymesubstrateprocessor"]], "pypath.core.enz_sub.get_db": [[129, "pypath-core-enz-sub-get-db"]], "pypath.core.enz_sub.init_db": [[130, "pypath-core-enz-sub-init-db"]], "pypath.core.evidence": [[131, "module-pypath.core.evidence"]], "pypath.core.evidence.Evidence": [[132, "pypath-core-evidence-evidence"]], "pypath.core.evidence.Evidences": [[133, "pypath-core-evidence-evidences"]], "pypath.core.interaction": [[134, "module-pypath.core.interaction"]], "pypath.core.interaction.Interaction": [[135, "pypath-core-interaction-interaction"]], "pypath.core.interaction.InteractionDataFrameRecord": [[136, "pypath-core-interaction-interactiondataframerecord"]], "pypath.core.interaction.InteractionKey": [[137, "pypath-core-interaction-interactionkey"]], "pypath.core.intercell": [[138, "module-pypath.core.intercell"]], "pypath.core.intercell.IntercellAnnotation": [[139, "pypath-core-intercell-intercellannotation"]], "pypath.core.intercell.get_db": [[140, "pypath-core-intercell-get-db"]], "pypath.core.intercell.init_db": [[141, "pypath-core-intercell-init-db"]], "pypath.core.intercell_annot": [[142, "module-pypath.core.intercell_annot"]], "pypath.core.intercell_annot.excludes": [[143, "pypath-core-intercell-annot-excludes"]], "pypath.core.network": [[144, "module-pypath.core.network"]], "pypath.core.network.Network": [[145, "pypath-core-network-network"]], "pypath.core.network.NetworkEntityCollection": [[146, "pypath-core-network-networkentitycollection"]], "pypath.core.network.NetworkStatsRecord": [[147, "pypath-core-network-networkstatsrecord"]], "pypath.core.network.get_db": [[148, "pypath-core-network-get-db"]], "pypath.core.network.init_db": [[149, "pypath-core-network-init-db"]], "pypath.data": [[150, "module-pypath.data"]], "pypath.disclaimer": [[151, "pypath-disclaimer"]], "pypath.info": [[152, "pypath-info"]], "pypath.inputs": [[153, "module-pypath.inputs"]], "pypath.inputs.abs": [[154, "module-pypath.inputs.abs"]], "pypath.inputs.abs.abs_interactions": [[155, "pypath-inputs-abs-abs-interactions"]], "pypath.inputs.acsn": [[156, "module-pypath.inputs.acsn"]], "pypath.inputs.acsn.acsn_interactions": [[157, "pypath-inputs-acsn-acsn-interactions"]], "pypath.inputs.acsn.acsn_interactions_sif": [[158, "pypath-inputs-acsn-acsn-interactions-sif"]], "pypath.inputs.adhesome": [[159, "module-pypath.inputs.adhesome"]], "pypath.inputs.adhesome.adhesome_annotations": [[160, "pypath-inputs-adhesome-adhesome-annotations"]], "pypath.inputs.adhesome.adhesome_interactions": [[161, "pypath-inputs-adhesome-adhesome-interactions"]], "pypath.inputs.almen2009": [[162, "module-pypath.inputs.almen2009"]], "pypath.inputs.almen2009.almen2009_annotations": [[163, "pypath-inputs-almen2009-almen2009-annotations"]], "pypath.inputs.baccin2019": [[164, "module-pypath.inputs.baccin2019"]], "pypath.inputs.baccin2019.baccin2019_annotations": [[165, "pypath-inputs-baccin2019-baccin2019-annotations"]], "pypath.inputs.baccin2019.baccin2019_interactions": [[166, "pypath-inputs-baccin2019-baccin2019-interactions"]], "pypath.inputs.biogps": [[167, "module-pypath.inputs.biogps"]], "pypath.inputs.biogps.BiogpsDataset": [[168, "pypath-inputs-biogps-biogpsdataset"]], "pypath.inputs.biogps.biogps_annotations": [[169, "pypath-inputs-biogps-biogps-annotations"]], "pypath.inputs.biogps.biogps_datasets": [[170, "pypath-inputs-biogps-biogps-datasets"]], "pypath.inputs.biogps.biogps_download": [[171, "pypath-inputs-biogps-biogps-download"]], "pypath.inputs.biogps.biogps_download_all": [[172, "pypath-inputs-biogps-biogps-download-all"]], "pypath.inputs.biogrid": [[173, "module-pypath.inputs.biogrid"]], "pypath.inputs.biogrid.biogrid_all_interactions": [[174, "pypath-inputs-biogrid-biogrid-all-interactions"]], "pypath.inputs.biogrid.biogrid_interactions": [[175, "pypath-inputs-biogrid-biogrid-interactions"]], "pypath.inputs.biomart": [[176, "module-pypath.inputs.biomart"]], "pypath.inputs.biomart.biomart_homology": [[177, "pypath-inputs-biomart-biomart-homology"]], "pypath.inputs.biomart.biomart_microarray": [[178, "pypath-inputs-biomart-biomart-microarray"]], "pypath.inputs.biomart.biomart_microarray_types": [[179, "pypath-inputs-biomart-biomart-microarray-types"]], "pypath.inputs.biomart.biomart_microarrays": [[180, "pypath-inputs-biomart-biomart-microarrays"]], "pypath.inputs.biomart.biomart_query": [[181, "pypath-inputs-biomart-biomart-query"]], "pypath.inputs.ca1": [[182, "module-pypath.inputs.ca1"]], "pypath.inputs.ca1.ca1_interactions": [[183, "pypath-inputs-ca1-ca1-interactions"]], "pypath.inputs.cancercellmap": [[184, "module-pypath.inputs.cancercellmap"]], "pypath.inputs.cancercellmap.ccmap_interactions": [[185, "pypath-inputs-cancercellmap-ccmap-interactions"]], "pypath.inputs.cancerdrugsdb": [[186, "module-pypath.inputs.cancerdrugsdb"]], "pypath.inputs.cancerdrugsdb.cancerdrugsdb_annotations": [[187, "pypath-inputs-cancerdrugsdb-cancerdrugsdb-annotations"]], "pypath.inputs.cancerdrugsdb.cancerdrugsdb_download": [[188, "pypath-inputs-cancerdrugsdb-cancerdrugsdb-download"]], "pypath.inputs.cancerdrugsdb.cancerdrugsdb_interactions": [[189, "pypath-inputs-cancerdrugsdb-cancerdrugsdb-interactions"]], "pypath.inputs.cancersea": [[190, "module-pypath.inputs.cancersea"]], "pypath.inputs.cancersea.cancersea_annotations": [[191, "pypath-inputs-cancersea-cancersea-annotations"]], "pypath.inputs.cell": [[192, "module-pypath.inputs.cell"]], "pypath.inputs.cell.cell_supplementary": [[193, "pypath-inputs-cell-cell-supplementary"]], "pypath.inputs.cellcall": [[194, "module-pypath.inputs.cellcall"]], "pypath.inputs.cellcall.cellcall_annotations": [[195, "pypath-inputs-cellcall-cellcall-annotations"]], "pypath.inputs.cellcall.cellcall_download": [[196, "pypath-inputs-cellcall-cellcall-download"]], "pypath.inputs.cellcall.cellcall_download_all": [[197, "pypath-inputs-cellcall-cellcall-download-all"]], "pypath.inputs.cellcall.cellcall_interactions": [[198, "pypath-inputs-cellcall-cellcall-interactions"]], "pypath.inputs.cellcellinteractions": [[199, "module-pypath.inputs.cellcellinteractions"]], "pypath.inputs.cellcellinteractions.cellcellinteractions_annotations": [[200, "pypath-inputs-cellcellinteractions-cellcellinteractions-annotations"]], "pypath.inputs.cellchatdb": [[201, "module-pypath.inputs.cellchatdb"]], "pypath.inputs.cellchatdb.cellchatdb_annotations": [[202, "pypath-inputs-cellchatdb-cellchatdb-annotations"]], "pypath.inputs.cellchatdb.cellchatdb_cofactors": [[203, "pypath-inputs-cellchatdb-cellchatdb-cofactors"]], "pypath.inputs.cellchatdb.cellchatdb_complexes": [[204, "pypath-inputs-cellchatdb-cellchatdb-complexes"]], "pypath.inputs.cellchatdb.cellchatdb_download": [[205, "pypath-inputs-cellchatdb-cellchatdb-download"]], "pypath.inputs.cellchatdb.cellchatdb_interactions": [[206, "pypath-inputs-cellchatdb-cellchatdb-interactions"]], "pypath.inputs.cellinker": [[207, "module-pypath.inputs.cellinker"]], "pypath.inputs.cellinker.CellinkerInteraction": [[208, "pypath-inputs-cellinker-cellinkerinteraction"]], "pypath.inputs.cellinker.cellinker_annotations": [[209, "pypath-inputs-cellinker-cellinker-annotations"]], "pypath.inputs.cellinker.cellinker_complex_annotations": [[210, "pypath-inputs-cellinker-cellinker-complex-annotations"]], "pypath.inputs.cellinker.cellinker_complexes": [[211, "pypath-inputs-cellinker-cellinker-complexes"]], "pypath.inputs.cellinker.cellinker_complexes_raw": [[212, "pypath-inputs-cellinker-cellinker-complexes-raw"]], "pypath.inputs.cellinker.cellinker_lr_interactions": [[213, "pypath-inputs-cellinker-cellinker-lr-interactions"]], "pypath.inputs.cellinker.cellinker_lr_interactions_raw": [[214, "pypath-inputs-cellinker-cellinker-lr-interactions-raw"]], "pypath.inputs.cellinker.cellinker_protein_annotations": [[215, "pypath-inputs-cellinker-cellinker-protein-annotations"]], "pypath.inputs.cellinker.cellinker_smol_interactions": [[216, "pypath-inputs-cellinker-cellinker-smol-interactions"]], "pypath.inputs.cellinker.cellinker_smol_interactions_raw": [[217, "pypath-inputs-cellinker-cellinker-smol-interactions-raw"]], "pypath.inputs.cellinker.components_to_complex": [[218, "pypath-inputs-cellinker-components-to-complex"]], "pypath.inputs.cellphonedb": [[219, "module-pypath.inputs.cellphonedb"]], "pypath.inputs.cellphonedb.CellPhoneDBAnnotation": [[220, "pypath-inputs-cellphonedb-cellphonedbannotation"]], "pypath.inputs.cellphonedb.cellphonedb_complex_annotations": [[221, "pypath-inputs-cellphonedb-cellphonedb-complex-annotations"]], "pypath.inputs.cellphonedb.cellphonedb_complexes": [[222, "pypath-inputs-cellphonedb-cellphonedb-complexes"]], "pypath.inputs.cellphonedb.cellphonedb_interactions": [[223, "pypath-inputs-cellphonedb-cellphonedb-interactions"]], "pypath.inputs.cellphonedb.cellphonedb_ligands_receptors": [[224, "pypath-inputs-cellphonedb-cellphonedb-ligands-receptors"]], "pypath.inputs.cellphonedb.cellphonedb_protein_annotations": [[225, "pypath-inputs-cellphonedb-cellphonedb-protein-annotations"]], "pypath.inputs.celltalkdb": [[226, "module-pypath.inputs.celltalkdb"]], "pypath.inputs.celltalkdb.celltalkdb_annotations": [[227, "pypath-inputs-celltalkdb-celltalkdb-annotations"]], "pypath.inputs.celltalkdb.celltalkdb_download": [[228, "pypath-inputs-celltalkdb-celltalkdb-download"]], "pypath.inputs.celltalkdb.celltalkdb_interactions": [[229, "pypath-inputs-celltalkdb-celltalkdb-interactions"]], "pypath.inputs.celltypist": [[230, "module-pypath.inputs.celltypist"]], "pypath.inputs.celltypist.celltypist_annotations": [[231, "pypath-inputs-celltypist-celltypist-annotations"]], "pypath.inputs.chembl": [[232, "module-pypath.inputs.chembl"]], "pypath.inputs.chembl.chembl_activities": [[233, "pypath-inputs-chembl-chembl-activities"]], "pypath.inputs.chembl.chembl_assays": [[234, "pypath-inputs-chembl-chembl-assays"]], "pypath.inputs.chembl.chembl_molecules": [[235, "pypath-inputs-chembl-chembl-molecules"]], "pypath.inputs.chembl.chembl_targets": [[236, "pypath-inputs-chembl-chembl-targets"]], "pypath.inputs.common": [[237, "module-pypath.inputs.common"]], "pypath.inputs.common.csv_sep_change": [[238, "pypath-inputs-common-csv-sep-change"]], "pypath.inputs.common.glom_fields": [[239, "pypath-inputs-common-glom-fields"]], "pypath.inputs.common.json_extract": [[240, "pypath-inputs-common-json-extract"]], "pypath.inputs.common.json_read": [[241, "pypath-inputs-common-json-read"]], "pypath.inputs.common.read_table": [[242, "pypath-inputs-common-read-table"]], "pypath.inputs.common.read_xls": [[243, "pypath-inputs-common-read-xls"]], "pypath.inputs.compleat": [[244, "module-pypath.inputs.compleat"]], "pypath.inputs.compleat.compleat_complexes": [[245, "pypath-inputs-compleat-compleat-complexes"]], "pypath.inputs.compleat.compleat_raw": [[246, "pypath-inputs-compleat-compleat-raw"]], "pypath.inputs.complexportal": [[247, "module-pypath.inputs.complexportal"]], "pypath.inputs.complexportal.complexportal_complexes": [[248, "pypath-inputs-complexportal-complexportal-complexes"]], "pypath.inputs.comppi": [[249, "module-pypath.inputs.comppi"]], "pypath.inputs.comppi.comppi_interaction_locations": [[250, "pypath-inputs-comppi-comppi-interaction-locations"]], "pypath.inputs.comppi.comppi_locations": [[251, "pypath-inputs-comppi-comppi-locations"]], "pypath.inputs.connectomedb": [[252, "module-pypath.inputs.connectomedb"]], "pypath.inputs.connectomedb.connectomedb_annotations": [[253, "pypath-inputs-connectomedb-connectomedb-annotations"]], "pypath.inputs.connectomedb.connectomedb_interactions": [[254, "pypath-inputs-connectomedb-connectomedb-interactions"]], "pypath.inputs.corum": [[255, "module-pypath.inputs.corum"]], "pypath.inputs.corum.corum_complexes": [[256, "pypath-inputs-corum-corum-complexes"]], "pypath.inputs.cosmic": [[257, "module-pypath.inputs.cosmic"]], "pypath.inputs.cosmic.cancer_gene_census_annotations": [[258, "pypath-inputs-cosmic-cancer-gene-census-annotations"]], "pypath.inputs.cpad": [[259, "module-pypath.inputs.cpad"]], "pypath.inputs.cpad.cpad_annotations": [[260, "pypath-inputs-cpad-cpad-annotations"]], "pypath.inputs.cpad.cpad_pathway_cancer": [[261, "pypath-inputs-cpad-cpad-pathway-cancer"]], "pypath.inputs.cpad.get_cpad": [[262, "pypath-inputs-cpad-get-cpad"]], "pypath.inputs.cpdb": [[263, "module-pypath.inputs.cpdb"]], "pypath.inputs.cpdb.cpdb_interactions": [[264, "pypath-inputs-cpdb-cpdb-interactions"]], "pypath.inputs.cpdb.cpdb_interactions_ltp": [[265, "pypath-inputs-cpdb-cpdb-interactions-ltp"]], "pypath.inputs.credentials": [[266, "module-pypath.inputs.credentials"]], "pypath.inputs.credentials.credentials": [[267, "pypath-inputs-credentials-credentials"]], "pypath.inputs.csa": [[268, "module-pypath.inputs.csa"]], "pypath.inputs.csa.get_csa": [[269, "pypath-inputs-csa-get-csa"]], "pypath.inputs.cspa": [[270, "module-pypath.inputs.cspa"]], "pypath.inputs.cspa.cspa_annotations": [[271, "pypath-inputs-cspa-cspa-annotations"]], "pypath.inputs.cspa.cspa_cell_type_annotations": [[272, "pypath-inputs-cspa-cspa-cell-type-annotations"]], "pypath.inputs.cspa.cspa_cell_types": [[273, "pypath-inputs-cspa-cspa-cell-types"]], "pypath.inputs.cytosig": [[274, "module-pypath.inputs.cytosig"]], "pypath.inputs.cytosig.cytosig_annotations": [[275, "pypath-inputs-cytosig-cytosig-annotations"]], "pypath.inputs.cytosig.cytosig_df": [[276, "pypath-inputs-cytosig-cytosig-df"]], "pypath.inputs.dbptm": [[277, "module-pypath.inputs.dbptm"]], "pypath.inputs.dbptm.dbptm_enzyme_substrate": [[278, "pypath-inputs-dbptm-dbptm-enzyme-substrate"]], "pypath.inputs.dbptm.dbptm_enzyme_substrate_old": [[279, "pypath-inputs-dbptm-dbptm-enzyme-substrate-old"]], "pypath.inputs.dbptm.dbptm_interactions": [[280, "pypath-inputs-dbptm-dbptm-interactions"]], "pypath.inputs.deathdomain": [[281, "module-pypath.inputs.deathdomain"]], "pypath.inputs.deathdomain.deathdomain_interactions": [[282, "pypath-inputs-deathdomain-deathdomain-interactions"]], "pypath.inputs.deathdomain.deathdomain_interactions_rescued": [[283, "pypath-inputs-deathdomain-deathdomain-interactions-rescued"]], "pypath.inputs.depod": [[284, "module-pypath.inputs.depod"]], "pypath.inputs.depod.depod_enzyme_substrate": [[285, "pypath-inputs-depod-depod-enzyme-substrate"]], "pypath.inputs.depod.depod_interactions": [[286, "pypath-inputs-depod-depod-interactions"]], "pypath.inputs.dgidb": [[287, "module-pypath.inputs.dgidb"]], "pypath.inputs.dgidb.dgidb_annotations": [[288, "pypath-inputs-dgidb-dgidb-annotations"]], "pypath.inputs.dgidb.get_dgidb_old": [[289, "pypath-inputs-dgidb-get-dgidb-old"]], "pypath.inputs.dip": [[290, "module-pypath.inputs.dip"]], "pypath.inputs.dip.dip_interactions": [[291, "pypath-inputs-dip-dip-interactions"]], "pypath.inputs.dip.dip_login": [[292, "pypath-inputs-dip-dip-login"]], "pypath.inputs.disgenet": [[293, "module-pypath.inputs.disgenet"]], "pypath.inputs.disgenet.disgenet_annotations": [[294, "pypath-inputs-disgenet-disgenet-annotations"]], "pypath.inputs.domino": [[295, "module-pypath.inputs.domino"]], "pypath.inputs.domino.domino_ddi": [[296, "pypath-inputs-domino-domino-ddi"]], "pypath.inputs.domino.domino_enzsub": [[297, "pypath-inputs-domino-domino-enzsub"]], "pypath.inputs.domino.domino_interactions": [[298, "pypath-inputs-domino-domino-interactions"]], "pypath.inputs.domino.get_domino": [[299, "pypath-inputs-domino-get-domino"]], "pypath.inputs.dorothea": [[300, "module-pypath.inputs.dorothea"]], "pypath.inputs.dorothea.DorotheaInteraction": [[301, "pypath-inputs-dorothea-dorotheainteraction"]], "pypath.inputs.dorothea.dorothea_full_raw": [[302, "pypath-inputs-dorothea-dorothea-full-raw"]], "pypath.inputs.dorothea.dorothea_interactions": [[303, "pypath-inputs-dorothea-dorothea-interactions"]], "Details": [[303, "details"], [304, "details"], [305, "details"], [307, "details"], [309, "details"], [310, "details"]], "pypath.inputs.dorothea.dorothea_interactions_old": [[304, "pypath-inputs-dorothea-dorothea-interactions-old"]], "pypath.inputs.dorothea.dorothea_old_csv": [[305, "pypath-inputs-dorothea-dorothea-old-csv"]], "pypath.inputs.dorothea.dorothea_rda_raw": [[306, "pypath-inputs-dorothea-dorothea-rda-raw"]], "pypath.inputs.dorothea.get_dorothea_old": [[307, "pypath-inputs-dorothea-get-dorothea-old"]], "pypath.inputs.dorothea.get_tfregulons": [[308, "pypath-inputs-dorothea-get-tfregulons"]], "pypath.inputs.dorothea.tfregulons_interactions": [[309, "pypath-inputs-dorothea-tfregulons-interactions"]], "pypath.inputs.dorothea.tfregulons_interactions_old": [[310, "pypath-inputs-dorothea-tfregulons-interactions-old"]], "pypath.inputs.drugbank": [[311, "module-pypath.inputs.drugbank"]], "pypath.inputs.drugbank.drugbank_annotations": [[312, "pypath-inputs-drugbank-drugbank-annotations"]], "pypath.inputs.drugbank.drugbank_drugs": [[313, "pypath-inputs-drugbank-drugbank-drugs"]], "pypath.inputs.drugbank.drugbank_interactions": [[314, "pypath-inputs-drugbank-drugbank-interactions"]], "pypath.inputs.drugbank.drugbank_mapping": [[315, "pypath-inputs-drugbank-drugbank-mapping"]], "pypath.inputs.drugbank.drugbank_raw_interactions": [[316, "pypath-inputs-drugbank-drugbank-raw-interactions"]], "pypath.inputs.drugcentral": [[317, "module-pypath.inputs.drugcentral"]], "pypath.inputs.drugcentral.drugcentral_drugs": [[318, "pypath-inputs-drugcentral-drugcentral-drugs"]], "pypath.inputs.drugcentral.drugcentral_interactions": [[319, "pypath-inputs-drugcentral-drugcentral-interactions"]], "pypath.inputs.drugcentral.drugcentral_mapping": [[320, "pypath-inputs-drugcentral-drugcentral-mapping"]], "pypath.inputs.ebi": [[321, "module-pypath.inputs.ebi"]], "pypath.inputs.ebi.ebi_rest": [[322, "pypath-inputs-ebi-ebi-rest"]], "pypath.inputs.elm": [[323, "module-pypath.inputs.elm"]], "pypath.inputs.elm.elm_classes": [[324, "pypath-inputs-elm-elm-classes"]], "pypath.inputs.elm.elm_domains": [[325, "pypath-inputs-elm-elm-domains"]], "pypath.inputs.elm.elm_instances": [[326, "pypath-inputs-elm-elm-instances"]], "pypath.inputs.elm.elm_interactions": [[327, "pypath-inputs-elm-elm-interactions"]], "pypath.inputs.embopress": [[328, "module-pypath.inputs.embopress"]], "pypath.inputs.embopress.embopress_supplementary": [[329, "pypath-inputs-embopress-embopress-supplementary"]], "pypath.inputs.embrace": [[330, "module-pypath.inputs.embrace"]], "pypath.inputs.embrace.embrace_annotations": [[331, "pypath-inputs-embrace-embrace-annotations"]], "pypath.inputs.embrace.embrace_interactions": [[332, "pypath-inputs-embrace-embrace-interactions"]], "pypath.inputs.embrace.embrace_raw": [[333, "pypath-inputs-embrace-embrace-raw"]], "pypath.inputs.embrace.embrace_translated": [[334, "pypath-inputs-embrace-embrace-translated"]], "pypath.inputs.encode": [[335, "module-pypath.inputs.encode"]], "pypath.inputs.encode.encode_tf_mirna_interactions": [[336, "pypath-inputs-encode-encode-tf-mirna-interactions"]], "pypath.inputs.ensembl": [[337, "module-pypath.inputs.ensembl"]], "pypath.inputs.ensembl.ensembl_organisms": [[338, "pypath-inputs-ensembl-ensembl-organisms"]], "pypath.inputs.exocarta": [[339, "module-pypath.inputs.exocarta"]], "pypath.inputs.exocarta.get_exocarta": [[340, "pypath-inputs-exocarta-get-exocarta"]], "pypath.inputs.exocarta.get_vesiclepedia": [[341, "pypath-inputs-exocarta-get-vesiclepedia"]], "pypath.inputs.genecards": [[342, "module-pypath.inputs.genecards"]], "pypath.inputs.genecards.genecards_datasheet": [[343, "pypath-inputs-genecards-genecards-datasheet"]], "pypath.inputs.genecards.genecards_soup": [[344, "pypath-inputs-genecards-genecards-soup"]], "pypath.inputs.genecards.genecards_summaries": [[345, "pypath-inputs-genecards-genecards-summaries"]], "pypath.inputs.get_method": [[346, "pypath-inputs-get-method"]], "pypath.inputs.go": [[347, "module-pypath.inputs.go"]], "pypath.inputs.go.get_go_desc": [[348, "pypath-inputs-go-get-go-desc"]], "pypath.inputs.go.get_go_quick": [[349, "pypath-inputs-go-get-go-quick"]], "pypath.inputs.go.get_goslim": [[350, "pypath-inputs-go-get-goslim"]], "pypath.inputs.go.go_ancestors": [[351, "pypath-inputs-go-go-ancestors"]], "pypath.inputs.go.go_ancestors_goose": [[352, "pypath-inputs-go-go-ancestors-goose"]], "pypath.inputs.go.go_ancestors_quickgo": [[353, "pypath-inputs-go-go-ancestors-quickgo"]], "pypath.inputs.go.go_annotations": [[354, "pypath-inputs-go-go-annotations"]], "pypath.inputs.go.go_annotations_goa": [[355, "pypath-inputs-go-go-annotations-goa"]], "pypath.inputs.go.go_annotations_goose": [[356, "pypath-inputs-go-go-annotations-goose"]], "pypath.inputs.go.go_annotations_quickgo": [[357, "pypath-inputs-go-go-annotations-quickgo"]], "pypath.inputs.go.go_annotations_solr": [[358, "pypath-inputs-go-go-annotations-solr"]], "pypath.inputs.go.go_annotations_uniprot": [[359, "pypath-inputs-go-go-annotations-uniprot"]], "pypath.inputs.go.go_descendants": [[360, "pypath-inputs-go-go-descendants"]], "pypath.inputs.go.go_descendants_goose": [[361, "pypath-inputs-go-go-descendants-goose"]], "pypath.inputs.go.go_descendants_quickgo": [[362, "pypath-inputs-go-go-descendants-quickgo"]], "pypath.inputs.go.go_descendants_to_ancestors": [[363, "pypath-inputs-go-go-descendants-to-ancestors"]], "pypath.inputs.go.go_terms": [[364, "pypath-inputs-go-go-terms"]], "pypath.inputs.go.go_terms_goose": [[365, "pypath-inputs-go-go-terms-goose"]], "pypath.inputs.go.go_terms_quickgo": [[366, "pypath-inputs-go-go-terms-quickgo"]], "pypath.inputs.go.go_terms_solr": [[367, "pypath-inputs-go-go-terms-solr"]], "pypath.inputs.gpcrdb": [[368, "module-pypath.inputs.gpcrdb"]], "pypath.inputs.gpcrdb.gpcrdb_annotations": [[369, "pypath-inputs-gpcrdb-gpcrdb-annotations"]], "pypath.inputs.graphviz": [[370, "module-pypath.inputs.graphviz"]], "pypath.inputs.graphviz.graphviz_attrs": [[371, "pypath-inputs-graphviz-graphviz-attrs"]], "pypath.inputs.guide2pharma": [[372, "module-pypath.inputs.guide2pharma"]], "pypath.inputs.guide2pharma.guide2pharma_complexes": [[373, "pypath-inputs-guide2pharma-guide2pharma-complexes"]], "pypath.inputs.guide2pharma.guide2pharma_download": [[374, "pypath-inputs-guide2pharma-guide2pharma-download"]], "pypath.inputs.guide2pharma.guide2pharma_interactions": [[375, "pypath-inputs-guide2pharma-guide2pharma-interactions"]], "pypath.inputs.havugimana": [[376, "module-pypath.inputs.havugimana"]], "pypath.inputs.havugimana.get_havugimana": [[377, "pypath-inputs-havugimana-get-havugimana"]], "pypath.inputs.havugimana.havugimana_complexes": [[378, "pypath-inputs-havugimana-havugimana-complexes"]], "pypath.inputs.hgnc": [[379, "module-pypath.inputs.hgnc"]], "pypath.inputs.hgnc.hgnc_genegroups": [[380, "pypath-inputs-hgnc-hgnc-genegroups"]], "pypath.inputs.hippie": [[381, "module-pypath.inputs.hippie"]], "pypath.inputs.hippie.hippie_interactions": [[382, "pypath-inputs-hippie-hippie-interactions"]], "pypath.inputs.homologene": [[383, "module-pypath.inputs.homologene"]], "pypath.inputs.homologene.get_homologene": [[384, "pypath-inputs-homologene-get-homologene"]], "pypath.inputs.homologene.homologene_dict": [[385, "pypath-inputs-homologene-homologene-dict"]], "pypath.inputs.homologene.homologene_uniprot_dict": [[386, "pypath-inputs-homologene-homologene-uniprot-dict"]], "pypath.inputs.hpmr": [[387, "module-pypath.inputs.hpmr"]], "pypath.inputs.hpmr.HpmrInteraction": [[388, "pypath-inputs-hpmr-hpmrinteraction"]], "pypath.inputs.hpmr.get_hpmr": [[389, "pypath-inputs-hpmr-get-hpmr"]], "pypath.inputs.hpmr.hpmr_annotations": [[390, "pypath-inputs-hpmr-hpmr-annotations"]], "pypath.inputs.hpmr.hpmr_complexes": [[391, "pypath-inputs-hpmr-hpmr-complexes"]], "pypath.inputs.hpmr.hpmr_interactions": [[392, "pypath-inputs-hpmr-hpmr-interactions"]], "pypath.inputs.hpo": [[393, "module-pypath.inputs.hpo"]], "pypath.inputs.hpo.hpo_annotations": [[394, "pypath-inputs-hpo-hpo-annotations"]], "pypath.inputs.hpo.hpo_diseases": [[395, "pypath-inputs-hpo-hpo-diseases"]], "pypath.inputs.hpo.hpo_ontology": [[396, "pypath-inputs-hpo-hpo-ontology"]], "pypath.inputs.hpo.hpo_terms": [[397, "pypath-inputs-hpo-hpo-terms"]], "pypath.inputs.hprd": [[398, "module-pypath.inputs.hprd"]], "pypath.inputs.hprd.get_hprd": [[399, "pypath-inputs-hprd-get-hprd"]], "pypath.inputs.hprd.hprd_enzyme_substrate": [[400, "pypath-inputs-hprd-hprd-enzyme-substrate"]], "pypath.inputs.hprd.hprd_interactions": [[401, "pypath-inputs-hprd-hprd-interactions"]], "pypath.inputs.hprd.hprd_interactions_htp": [[402, "pypath-inputs-hprd-hprd-interactions-htp"]], "pypath.inputs.htri": [[403, "module-pypath.inputs.htri"]], "pypath.inputs.htri.htri_interactions": [[404, "pypath-inputs-htri-htri-interactions"]], "pypath.inputs.humancellmap": [[405, "module-pypath.inputs.humancellmap"]], "pypath.inputs.humancellmap.humancellmap_annotations": [[406, "pypath-inputs-humancellmap-humancellmap-annotations"]], "pypath.inputs.humap": [[407, "module-pypath.inputs.humap"]], "pypath.inputs.humap.humap2_complexes": [[408, "pypath-inputs-humap-humap2-complexes"]], "pypath.inputs.humap.humap_complexes": [[409, "pypath-inputs-humap-humap-complexes"]], "pypath.inputs.huri": [[410, "module-pypath.inputs.huri"]], "pypath.inputs.huri.hi_i_interactions": [[411, "pypath-inputs-huri-hi-i-interactions"]], "pypath.inputs.huri.hi_ii_interactions": [[412, "pypath-inputs-huri-hi-ii-interactions"]], "pypath.inputs.huri.hi_iii_old": [[413, "pypath-inputs-huri-hi-iii-old"]], "pypath.inputs.huri.hi_union_interactions": [[414, "pypath-inputs-huri-hi-union-interactions"]], "pypath.inputs.huri.huri_interactions": [[415, "pypath-inputs-huri-huri-interactions"]], "pypath.inputs.huri.lit_bm_13_interactions": [[416, "pypath-inputs-huri-lit-bm-13-interactions"]], "pypath.inputs.huri.lit_bm_17_interactions": [[417, "pypath-inputs-huri-lit-bm-17-interactions"]], "pypath.inputs.huri.lit_bm_interactions": [[418, "pypath-inputs-huri-lit-bm-interactions"]], "pypath.inputs.huri.rolland_hi_ii_14": [[419, "pypath-inputs-huri-rolland-hi-ii-14"]], "pypath.inputs.huri.vidal_hi_iii_old": [[420, "pypath-inputs-huri-vidal-hi-iii-old"]], "pypath.inputs.huri.yang2016_interactions": [[421, "pypath-inputs-huri-yang2016-interactions"]], "pypath.inputs.huri.yu2011_interactions": [[422, "pypath-inputs-huri-yu2011-interactions"]], "pypath.inputs.i3d": [[423, "module-pypath.inputs.i3d"]], "pypath.inputs.i3d.get_i3d": [[424, "pypath-inputs-i3d-get-i3d"]], "pypath.inputs.icellnet": [[425, "module-pypath.inputs.icellnet"]], "pypath.inputs.icellnet.IcellnetRecord": [[426, "pypath-inputs-icellnet-icellnetrecord"]], "pypath.inputs.icellnet.icellnet_annotations": [[427, "pypath-inputs-icellnet-icellnet-annotations"]], "pypath.inputs.icellnet.icellnet_complexes": [[428, "pypath-inputs-icellnet-icellnet-complexes"]], "pypath.inputs.icellnet.icellnet_interactions": [[429, "pypath-inputs-icellnet-icellnet-interactions"]], "pypath.inputs.ielm": [[430, "module-pypath.inputs.ielm"]], "pypath.inputs.ielm.get_ielm": [[431, "pypath-inputs-ielm-get-ielm"]], "pypath.inputs.ielm.get_ielm_huge": [[432, "pypath-inputs-ielm-get-ielm-huge"]], "pypath.inputs.imweb": [[433, "module-pypath.inputs.imweb"]], "pypath.inputs.imweb.get_imweb": [[434, "pypath-inputs-imweb-get-imweb"]], "pypath.inputs.imweb.get_imweb_req": [[435, "pypath-inputs-imweb-get-imweb-req"]], "pypath.inputs.innatedb": [[436, "module-pypath.inputs.innatedb"]], "pypath.inputs.innatedb.innatedb_interactions": [[437, "pypath-inputs-innatedb-innatedb-interactions"]], "pypath.inputs.instruct": [[438, "module-pypath.inputs.instruct"]], "pypath.inputs.instruct.get_instruct": [[439, "pypath-inputs-instruct-get-instruct"]], "pypath.inputs.instruct.get_instruct_offsets": [[440, "pypath-inputs-instruct-get-instruct-offsets"]], "pypath.inputs.intact": [[441, "module-pypath.inputs.intact"]], "pypath.inputs.intact.intact_interactions": [[442, "pypath-inputs-intact-intact-interactions"]], "pypath.inputs.integrins": [[443, "module-pypath.inputs.integrins"]], "pypath.inputs.integrins.get_integrins": [[444, "pypath-inputs-integrins-get-integrins"]], "pypath.inputs.interpro": [[445, "module-pypath.inputs.interpro"]], "pypath.inputs.interpro.interpro2go_annotations": [[446, "pypath-inputs-interpro-interpro2go-annotations"]], "pypath.inputs.interpro.interpro_annotations": [[447, "pypath-inputs-interpro-interpro-annotations"]], "pypath.inputs.interpro.interpro_entries": [[448, "pypath-inputs-interpro-interpro-entries"]], "pypath.inputs.interpro.interpro_xrefs": [[449, "pypath-inputs-interpro-interpro-xrefs"]], "pypath.inputs.intogen": [[450, "module-pypath.inputs.intogen"]], "pypath.inputs.intogen.intogen_annotations": [[451, "pypath-inputs-intogen-intogen-annotations"]], "pypath.inputs.ipi": [[452, "module-pypath.inputs.ipi"]], "pypath.inputs.ipi.ipi_uniprot": [[453, "pypath-inputs-ipi-ipi-uniprot"]], "pypath.inputs.iptmnet": [[454, "module-pypath.inputs.iptmnet"]], "pypath.inputs.iptmnet.IptmnetInteraction": [[455, "pypath-inputs-iptmnet-iptmnetinteraction"]], "pypath.inputs.iptmnet.iptmnet_interactions": [[456, "pypath-inputs-iptmnet-iptmnet-interactions"]], "pypath.inputs.italk": [[457, "module-pypath.inputs.italk"]], "pypath.inputs.italk.italk_annotations": [[458, "pypath-inputs-italk-italk-annotations"]], "pypath.inputs.italk.italk_interactions": [[459, "pypath-inputs-italk-italk-interactions"]], "pypath.inputs.italk.italk_raw": [[460, "pypath-inputs-italk-italk-raw"]], "pypath.inputs.kea": [[461, "module-pypath.inputs.kea"]], "pypath.inputs.kea.kea_enzyme_substrate": [[462, "pypath-inputs-kea-kea-enzyme-substrate"]], "pypath.inputs.kea.kea_interactions": [[463, "pypath-inputs-kea-kea-interactions"]], "pypath.inputs.kegg": [[464, "module-pypath.inputs.kegg"]], "pypath.inputs.kegg.KeggPathway": [[465, "pypath-inputs-kegg-keggpathway"]], "pypath.inputs.kegg.kegg_dbget": [[466, "pypath-inputs-kegg-kegg-dbget"]], "pypath.inputs.kegg.kegg_interactions": [[467, "pypath-inputs-kegg-kegg-interactions"]], "pypath.inputs.kegg.kegg_medicus": [[468, "pypath-inputs-kegg-kegg-medicus"]], "pypath.inputs.kegg.kegg_medicus_complexes": [[469, "pypath-inputs-kegg-kegg-medicus-complexes"]], "pypath.inputs.kegg.kegg_medicus_interactions": [[470, "pypath-inputs-kegg-kegg-medicus-interactions"]], "pypath.inputs.kegg.kegg_pathway_annotations": [[471, "pypath-inputs-kegg-kegg-pathway-annotations"]], "pypath.inputs.kegg.kegg_pathway_annotations_pathwaycommons": [[472, "pypath-inputs-kegg-kegg-pathway-annotations-pathwaycommons"]], "pypath.inputs.kegg.kegg_pathways": [[473, "pypath-inputs-kegg-kegg-pathways"]], "pypath.inputs.kinasedotcom": [[474, "module-pypath.inputs.kinasedotcom"]], "pypath.inputs.kinasedotcom.kinasedotcom_annotations": [[475, "pypath-inputs-kinasedotcom-kinasedotcom-annotations"]], "pypath.inputs.kirouac2010": [[476, "module-pypath.inputs.kirouac2010"]], "pypath.inputs.kirouac2010.kirouac2010_interactions": [[477, "pypath-inputs-kirouac2010-kirouac2010-interactions"]], "pypath.inputs.lambert2018": [[478, "module-pypath.inputs.lambert2018"]], "pypath.inputs.lambert2018.lambert2018_annotations": [[479, "pypath-inputs-lambert2018-lambert2018-annotations"]], "pypath.inputs.lambert2018.lambert2018_s1_raw": [[480, "pypath-inputs-lambert2018-lambert2018-s1-raw"]], "pypath.inputs.laudanna": [[481, "module-pypath.inputs.laudanna"]], "pypath.inputs.laudanna.laudanna_directions": [[482, "pypath-inputs-laudanna-laudanna-directions"]], "pypath.inputs.laudanna.laudanna_effects": [[483, "pypath-inputs-laudanna-laudanna-effects"]], "pypath.inputs.li2012": [[484, "module-pypath.inputs.li2012"]], "pypath.inputs.li2012.get_li2012": [[485, "pypath-inputs-li2012-get-li2012"]], "pypath.inputs.li2012.li2012_dmi": [[486, "pypath-inputs-li2012-li2012-dmi"]], "pypath.inputs.li2012.li2012_enzyme_substrate": [[487, "pypath-inputs-li2012-li2012-enzyme-substrate"]], "pypath.inputs.li2012.li2012_interactions": [[488, "pypath-inputs-li2012-li2012-interactions"]], "pypath.inputs.lincs": [[489, "module-pypath.inputs.lincs"]], "pypath.inputs.lincs.lincs_compounds": [[490, "pypath-inputs-lincs-lincs-compounds"]], "pypath.inputs.lmpid": [[491, "module-pypath.inputs.lmpid"]], "pypath.inputs.lmpid.lmpid_dmi": [[492, "pypath-inputs-lmpid-lmpid-dmi"]], "pypath.inputs.lmpid.lmpid_interactions": [[493, "pypath-inputs-lmpid-lmpid-interactions"]], "pypath.inputs.lmpid.load_lmpid": [[494, "pypath-inputs-lmpid-load-lmpid"]], "pypath.inputs.lncdisease": [[495, "module-pypath.inputs.lncdisease"]], "pypath.inputs.lncdisease.lncdisease_interactions": [[496, "pypath-inputs-lncdisease-lncdisease-interactions"]], "pypath.inputs.lncrnadb": [[497, "module-pypath.inputs.lncrnadb"]], "pypath.inputs.lncrnadb.lncrnadb_interactions": [[498, "pypath-inputs-lncrnadb-lncrnadb-interactions"]], "pypath.inputs.locate": [[499, "module-pypath.inputs.locate"]], "pypath.inputs.locate.locate_localizations": [[500, "pypath-inputs-locate-locate-localizations"]], "pypath.inputs.lrdb": [[501, "module-pypath.inputs.lrdb"]], "pypath.inputs.lrdb.LrdbAnnotation": [[502, "pypath-inputs-lrdb-lrdbannotation"]], "pypath.inputs.lrdb.lrdb_annotations": [[503, "pypath-inputs-lrdb-lrdb-annotations"]], "pypath.inputs.lrdb.lrdb_interactions": [[504, "pypath-inputs-lrdb-lrdb-interactions"]], "pypath.inputs.macrophage": [[505, "module-pypath.inputs.macrophage"]], "pypath.inputs.macrophage.macrophage_interactions": [[506, "pypath-inputs-macrophage-macrophage-interactions"]], "pypath.inputs.main": [[507, "module-pypath.inputs.main"]], "pypath.inputs.matrisome": [[508, "module-pypath.inputs.matrisome"]], "pypath.inputs.matrisome.matrisome_annotations": [[509, "pypath-inputs-matrisome-matrisome-annotations"]], "pypath.inputs.matrixdb": [[510, "module-pypath.inputs.matrixdb"]], "pypath.inputs.matrixdb.matrixdb_annotations": [[511, "pypath-inputs-matrixdb-matrixdb-annotations"]], "pypath.inputs.matrixdb.matrixdb_ecm_proteins": [[512, "pypath-inputs-matrixdb-matrixdb-ecm-proteins"]], "pypath.inputs.matrixdb.matrixdb_interactions": [[513, "pypath-inputs-matrixdb-matrixdb-interactions"]], "pypath.inputs.matrixdb.matrixdb_membrane_proteins": [[514, "pypath-inputs-matrixdb-matrixdb-membrane-proteins"]], "pypath.inputs.matrixdb.matrixdb_secreted_proteins": [[515, "pypath-inputs-matrixdb-matrixdb-secreted-proteins"]], "pypath.inputs.mcam": [[516, "module-pypath.inputs.mcam"]], "pypath.inputs.mcam.mcam_cell_adhesion_molecules": [[517, "pypath-inputs-mcam-mcam-cell-adhesion-molecules"]], "pypath.inputs.membranome": [[518, "module-pypath.inputs.membranome"]], "pypath.inputs.membranome.membranome_annotations": [[519, "pypath-inputs-membranome-membranome-annotations"]], "pypath.inputs.mimp": [[520, "module-pypath.inputs.mimp"]], "pypath.inputs.mimp.get_kinase_class": [[521, "pypath-inputs-mimp-get-kinase-class"]], "pypath.inputs.mimp.mimp_enzyme_substrate": [[522, "pypath-inputs-mimp-mimp-enzyme-substrate"]], "pypath.inputs.mimp.mimp_interactions": [[523, "pypath-inputs-mimp-mimp-interactions"]], "pypath.inputs.mir2disease": [[524, "module-pypath.inputs.mir2disease"]], "pypath.inputs.mir2disease.mir2disease_interactions": [[525, "pypath-inputs-mir2disease-mir2disease-interactions"]], "pypath.inputs.mirbase": [[526, "module-pypath.inputs.mirbase"]], "pypath.inputs.mirbase.get_mirbase_aliases": [[527, "pypath-inputs-mirbase-get-mirbase-aliases"]], "pypath.inputs.mirbase.mirbase_ids": [[528, "pypath-inputs-mirbase-mirbase-ids"]], "pypath.inputs.mirbase.mirbase_mature": [[529, "pypath-inputs-mirbase-mirbase-mature"]], "pypath.inputs.mirbase.mirbase_mature_all": [[530, "pypath-inputs-mirbase-mirbase-mature-all"]], "pypath.inputs.mirbase.mirbase_precursor": [[531, "pypath-inputs-mirbase-mirbase-precursor"]], "pypath.inputs.mirbase.mirbase_precursor_all": [[532, "pypath-inputs-mirbase-mirbase-precursor-all"]], "pypath.inputs.mirbase.mirbase_precursor_to_mature": [[533, "pypath-inputs-mirbase-mirbase-precursor-to-mature"]], "pypath.inputs.mirdeathdb": [[534, "module-pypath.inputs.mirdeathdb"]], "pypath.inputs.mirdeathdb.mirdeathdb_interactions": [[535, "pypath-inputs-mirdeathdb-mirdeathdb-interactions"]], "pypath.inputs.mirecords": [[536, "module-pypath.inputs.mirecords"]], "pypath.inputs.mirecords.mirecords_interactions": [[537, "pypath-inputs-mirecords-mirecords-interactions"]], "pypath.inputs.mirtarbase": [[538, "module-pypath.inputs.mirtarbase"]], "pypath.inputs.mirtarbase.mirtarbase_interactions": [[539, "pypath-inputs-mirtarbase-mirtarbase-interactions"]], "pypath.inputs.mitab": [[540, "module-pypath.inputs.mitab"]], "pypath.inputs.mitab.mitab_field_list": [[541, "pypath-inputs-mitab-mitab-field-list"]], "pypath.inputs.mitab.mitab_field_uniprot": [[542, "pypath-inputs-mitab-mitab-field-uniprot"]], "pypath.inputs.mppi": [[543, "module-pypath.inputs.mppi"]], "pypath.inputs.mppi.mppi_interactions": [[544, "pypath-inputs-mppi-mppi-interactions"]], "pypath.inputs.msigdb": [[545, "module-pypath.inputs.msigdb"]], "pypath.inputs.msigdb.msigdb_annotations": [[546, "pypath-inputs-msigdb-msigdb-annotations"]], "pypath.inputs.msigdb.msigdb_download": [[547, "pypath-inputs-msigdb-msigdb-download"]], "pypath.inputs.msigdb.msigdb_download_collections": [[548, "pypath-inputs-msigdb-msigdb-download-collections"]], "pypath.inputs.ncrdeathdb": [[549, "module-pypath.inputs.ncrdeathdb"]], "pypath.inputs.ncrdeathdb.ncrdeathdb_interactions": [[550, "pypath-inputs-ncrdeathdb-ncrdeathdb-interactions"]], "pypath.inputs.negatome": [[551, "module-pypath.inputs.negatome"]], "pypath.inputs.negatome.negatome_interactions": [[552, "pypath-inputs-negatome-negatome-interactions"]], "pypath.inputs.netbiol": [[553, "module-pypath.inputs.netbiol"]], "pypath.inputs.netbiol.arn_interactions": [[554, "pypath-inputs-netbiol-arn-interactions"]], "pypath.inputs.netbiol.nrf2ome_interactions": [[555, "pypath-inputs-netbiol-nrf2ome-interactions"]], "pypath.inputs.netpath": [[556, "module-pypath.inputs.netpath"]], "pypath.inputs.netpath.netpath_interactions": [[557, "pypath-inputs-netpath-netpath-interactions"]], "pypath.inputs.netpath.netpath_names": [[558, "pypath-inputs-netpath-netpath-names"]], "pypath.inputs.netpath.netpath_pathway_annotations": [[559, "pypath-inputs-netpath-netpath-pathway-annotations"]], "pypath.inputs.ontology": [[560, "module-pypath.inputs.ontology"]], "pypath.inputs.ontology.listof_ontologies": [[561, "pypath-inputs-ontology-listof-ontologies"]], "pypath.inputs.ontology.ontology": [[562, "pypath-inputs-ontology-ontology"]], "pypath.inputs.opm": [[563, "module-pypath.inputs.opm"]], "pypath.inputs.opm.opm_annotations": [[564, "pypath-inputs-opm-opm-annotations"]], "pypath.inputs.oreganno": [[565, "module-pypath.inputs.oreganno"]], "pypath.inputs.oreganno.oreganno_interactions": [[566, "pypath-inputs-oreganno-oreganno-interactions"]], "pypath.inputs.oreganno.oreganno_raw": [[567, "pypath-inputs-oreganno-oreganno-raw"]], "pypath.inputs.panglaodb": [[568, "module-pypath.inputs.panglaodb"]], "pypath.inputs.panglaodb.panglaodb_annotations": [[569, "pypath-inputs-panglaodb-panglaodb-annotations"]], "pypath.inputs.panglaodb.panglaodb_raw": [[570, "pypath-inputs-panglaodb-panglaodb-raw"]], "pypath.inputs.pathwaycommons": [[571, "module-pypath.inputs.pathwaycommons"]], "pypath.inputs.pathwaycommons.PathwayCommonsInteraction": [[572, "pypath-inputs-pathwaycommons-pathwaycommonsinteraction"]], "pypath.inputs.pathwaycommons.PathwayCommonsResource": [[573, "pypath-inputs-pathwaycommons-pathwaycommonsresource"]], "pypath.inputs.pathwaycommons.pathwaycommons_bind_interactions": [[574, "pypath-inputs-pathwaycommons-pathwaycommons-bind-interactions"]], "pypath.inputs.pathwaycommons.pathwaycommons_biogrid_interactions": [[575, "pypath-inputs-pathwaycommons-pathwaycommons-biogrid-interactions"]], "pypath.inputs.pathwaycommons.pathwaycommons_corum_interactions": [[576, "pypath-inputs-pathwaycommons-pathwaycommons-corum-interactions"]], "pypath.inputs.pathwaycommons.pathwaycommons_dip_interactions": [[577, "pypath-inputs-pathwaycommons-pathwaycommons-dip-interactions"]], "pypath.inputs.pathwaycommons.pathwaycommons_hprd_interactions": [[578, "pypath-inputs-pathwaycommons-pathwaycommons-hprd-interactions"]], "pypath.inputs.pathwaycommons.pathwaycommons_inoh_interactions": [[579, "pypath-inputs-pathwaycommons-pathwaycommons-inoh-interactions"]], "pypath.inputs.pathwaycommons.pathwaycommons_intact_interactions": [[580, "pypath-inputs-pathwaycommons-pathwaycommons-intact-interactions"]], "pypath.inputs.pathwaycommons.pathwaycommons_interactions": [[581, "pypath-inputs-pathwaycommons-pathwaycommons-interactions"]], "pypath.inputs.pathwaycommons.pathwaycommons_kegg_interactions": [[582, "pypath-inputs-pathwaycommons-pathwaycommons-kegg-interactions"]], "pypath.inputs.pathwaycommons.pathwaycommons_netpath_interactions": [[583, "pypath-inputs-pathwaycommons-pathwaycommons-netpath-interactions"]], "pypath.inputs.pathwaycommons.pathwaycommons_panther_interactions": [[584, "pypath-inputs-pathwaycommons-pathwaycommons-panther-interactions"]], "pypath.inputs.pathwaycommons.pathwaycommons_phosphosite_interactions": [[585, "pypath-inputs-pathwaycommons-pathwaycommons-phosphosite-interactions"]], "pypath.inputs.pathwaycommons.pathwaycommons_reactome_interactions": [[586, "pypath-inputs-pathwaycommons-pathwaycommons-reactome-interactions"]], "pypath.inputs.pathwaycommons.pathwaycommons_wikipathways_interactions": [[587, "pypath-inputs-pathwaycommons-pathwaycommons-wikipathways-interactions"]], "pypath.inputs.pazar": [[588, "module-pypath.inputs.pazar"]], "pypath.inputs.pazar.pazar_interactions": [[589, "pypath-inputs-pazar-pazar-interactions"]], "pypath.inputs.pdb": [[590, "module-pypath.inputs.pdb"]], "pypath.inputs.pdb.pdb_chains": [[591, "pypath-inputs-pdb-pdb-chains"]], "pypath.inputs.pdb.pdb_complexes": [[592, "pypath-inputs-pdb-pdb-complexes"]], "pypath.inputs.pdb.pdb_uniprot": [[593, "pypath-inputs-pdb-pdb-uniprot"]], "pypath.inputs.pdzbase": [[594, "module-pypath.inputs.pdzbase"]], "pypath.inputs.pdzbase.pdzbase_interactions": [[595, "pypath-inputs-pdzbase-pdzbase-interactions"]], "pypath.inputs.pepcyber": [[596, "module-pypath.inputs.pepcyber"]], "pypath.inputs.pepcyber.pepcyber_details": [[597, "pypath-inputs-pepcyber-pepcyber-details"]], "pypath.inputs.pepcyber.pepcyber_interactions": [[598, "pypath-inputs-pepcyber-pepcyber-interactions"]], "pypath.inputs.pfam": [[599, "module-pypath.inputs.pfam"]], "pypath.inputs.pfam.pfam_names": [[600, "pypath-inputs-pfam-pfam-names"]], "pypath.inputs.pfam.pfam_pdb": [[601, "pypath-inputs-pfam-pfam-pdb"]], "pypath.inputs.pfam.pfam_regions": [[602, "pypath-inputs-pfam-pfam-regions"]], "pypath.inputs.pfam.pfam_uniprot": [[603, "pypath-inputs-pfam-pfam-uniprot"]], "pypath.inputs.phobius": [[604, "module-pypath.inputs.phobius"]], "pypath.inputs.phobius.phobius_annotations": [[605, "pypath-inputs-phobius-phobius-annotations"]], "pypath.inputs.phosphatome": [[606, "module-pypath.inputs.phosphatome"]], "pypath.inputs.phosphatome.phosphatome_annotations": [[607, "pypath-inputs-phosphatome-phosphatome-annotations"]], "pypath.inputs.phosphoelm": [[608, "module-pypath.inputs.phosphoelm"]], "pypath.inputs.phosphoelm.phosphoelm_enzyme_substrate": [[609, "pypath-inputs-phosphoelm-phosphoelm-enzyme-substrate"]], "pypath.inputs.phosphoelm.phosphoelm_interactions": [[610, "pypath-inputs-phosphoelm-phosphoelm-interactions"]], "pypath.inputs.phosphoelm.phosphoelm_kinases": [[611, "pypath-inputs-phosphoelm-phosphoelm-kinases"]], "pypath.inputs.phosphonetworks": [[612, "module-pypath.inputs.phosphonetworks"]], "pypath.inputs.phosphonetworks.phosphonetworks_enzyme_substrate": [[613, "pypath-inputs-phosphonetworks-phosphonetworks-enzyme-substrate"]], "pypath.inputs.phosphonetworks.phosphonetworks_interactions": [[614, "pypath-inputs-phosphonetworks-phosphonetworks-interactions"]], "pypath.inputs.phosphopoint": [[615, "module-pypath.inputs.phosphopoint"]], "pypath.inputs.phosphopoint.phosphopoint_directions": [[616, "pypath-inputs-phosphopoint-phosphopoint-directions"]], "pypath.inputs.phosphopoint.phosphopoint_interactions": [[617, "pypath-inputs-phosphopoint-phosphopoint-interactions"]], "pypath.inputs.phosphosite": [[618, "module-pypath.inputs.phosphosite"]], "pypath.inputs.phosphosite.phosphosite_directions": [[619, "pypath-inputs-phosphosite-phosphosite-directions"]], "pypath.inputs.phosphosite.phosphosite_enzyme_substrate": [[620, "pypath-inputs-phosphosite-phosphosite-enzyme-substrate"]], "pypath.inputs.phosphosite.phosphosite_interactions": [[621, "pypath-inputs-phosphosite-phosphosite-interactions"]], "pypath.inputs.phosphosite.phosphosite_interactions_all": [[622, "pypath-inputs-phosphosite-phosphosite-interactions-all"]], "pypath.inputs.phosphosite.phosphosite_interactions_curated": [[623, "pypath-inputs-phosphosite-phosphosite-interactions-curated"]], "pypath.inputs.phosphosite.phosphosite_interactions_new": [[624, "pypath-inputs-phosphosite-phosphosite-interactions-new"]], "pypath.inputs.phosphosite.phosphosite_interactions_noref": [[625, "pypath-inputs-phosphosite-phosphosite-interactions-noref"]], "pypath.inputs.phosphosite.phosphosite_ptm_orthology": [[626, "pypath-inputs-phosphosite-phosphosite-ptm-orthology"]], "pypath.inputs.phosphosite.phosphosite_ptms": [[627, "pypath-inputs-phosphosite-phosphosite-ptms"]], "pypath.inputs.phosphosite.phosphosite_regsites": [[628, "pypath-inputs-phosphosite-phosphosite-regsites"]], "pypath.inputs.phosphosite.phosphosite_regsites_one_organism": [[629, "pypath-inputs-phosphosite-phosphosite-regsites-one-organism"]], "pypath.inputs.phosphosite.regsites_tab": [[630, "pypath-inputs-phosphosite-regsites-tab"]], "pypath.inputs.pisa": [[631, "module-pypath.inputs.pisa"]], "pypath.inputs.pisa.PisaBond": [[632, "pypath-inputs-pisa-pisabond"]], "pypath.inputs.pisa.pisa_bonds": [[633, "pypath-inputs-pisa-pisa-bonds"]], "pypath.inputs.pisa.pisa_interfaces": [[634, "pypath-inputs-pisa-pisa-interfaces"]], "pypath.inputs.pro": [[635, "module-pypath.inputs.pro"]], "pypath.inputs.pro.get_pro": [[636, "pypath-inputs-pro-get-pro"]], "pypath.inputs.pro.pro_mapping": [[637, "pypath-inputs-pro-pro-mapping"]], "pypath.inputs.progeny": [[638, "module-pypath.inputs.progeny"]], "pypath.inputs.progeny.progeny_annotations": [[639, "pypath-inputs-progeny-progeny-annotations"]], "pypath.inputs.progeny.progeny_raw": [[640, "pypath-inputs-progeny-progeny-raw"]], "pypath.inputs.proteinatlas": [[641, "module-pypath.inputs.proteinatlas"]], "pypath.inputs.proteinatlas.get_proteinatlas": [[642, "pypath-inputs-proteinatlas-get-proteinatlas"]], "pypath.inputs.proteinatlas.proteinatlas_annotations": [[643, "pypath-inputs-proteinatlas-proteinatlas-annotations"]], "pypath.inputs.proteinatlas.proteinatlas_secretome_annotations": [[644, "pypath-inputs-proteinatlas-proteinatlas-secretome-annotations"]], "pypath.inputs.proteinatlas.proteinatlas_subcellular_annotations": [[645, "pypath-inputs-proteinatlas-proteinatlas-subcellular-annotations"]], "pypath.inputs.proteins": [[646, "module-pypath.inputs.proteins"]], "pypath.inputs.proteins.variants": [[647, "pypath-inputs-proteins-variants"]], "pypath.inputs.protmapper": [[648, "module-pypath.inputs.protmapper"]], "pypath.inputs.protmapper.get_protmapper": [[649, "pypath-inputs-protmapper-get-protmapper"]], "pypath.inputs.protmapper.protmapper_enzyme_substrate": [[650, "pypath-inputs-protmapper-protmapper-enzyme-substrate"]], "pypath.inputs.protmapper.protmapper_interactions": [[651, "pypath-inputs-protmapper-protmapper-interactions"]], "pypath.inputs.pubchem": [[652, "module-pypath.inputs.pubchem"]], "pypath.inputs.pubchem.pubchem_mapping": [[653, "pypath-inputs-pubchem-pubchem-mapping"]], "pypath.inputs.pubmed": [[654, "module-pypath.inputs.pubmed"]], "pypath.inputs.pubmed.get_pmid": [[655, "pypath-inputs-pubmed-get-pmid"]], "pypath.inputs.pubmed.get_pubmeds": [[656, "pypath-inputs-pubmed-get-pubmeds"]], "pypath.inputs.pubmed.only_pmids": [[657, "pypath-inputs-pubmed-only-pmids"]], "pypath.inputs.pubmed.open_pubmed": [[658, "pypath-inputs-pubmed-open-pubmed"]], "pypath.inputs.pubmed.pmids_dict": [[659, "pypath-inputs-pubmed-pmids-dict"]], "pypath.inputs.pubmed.pmids_list": [[660, "pypath-inputs-pubmed-pmids-list"]], "pypath.inputs.ramilowski2015": [[661, "module-pypath.inputs.ramilowski2015"]], "pypath.inputs.ramilowski2015.ramilowski_interactions": [[662, "pypath-inputs-ramilowski2015-ramilowski-interactions"]], "pypath.inputs.ramilowski2015.ramilowski_locations": [[663, "pypath-inputs-ramilowski2015-ramilowski-locations"]], "pypath.inputs.rdata": [[664, "module-pypath.inputs.rdata"]], "pypath.inputs.reaction": [[665, "module-pypath.inputs.reaction"]], "pypath.inputs.reaction.acsn_biopax": [[666, "pypath-inputs-reaction-acsn-biopax"]], "pypath.inputs.reaction.acsn_interactions_2": [[667, "pypath-inputs-reaction-acsn-interactions-2"]], "pypath.inputs.reaction.get_acsn_effects": [[668, "pypath-inputs-reaction-get-acsn-effects"]], "pypath.inputs.reaction.get_controls": [[669, "pypath-inputs-reaction-get-controls"]], "pypath.inputs.reaction.get_interactions": [[670, "pypath-inputs-reaction-get-interactions"]], "pypath.inputs.reaction.get_reactions": [[671, "pypath-inputs-reaction-get-reactions"]], "pypath.inputs.reaction.get_soup": [[672, "pypath-inputs-reaction-get-soup"]], "pypath.inputs.reaction.panther_biopax": [[673, "pypath-inputs-reaction-panther-biopax"]], "pypath.inputs.reaction.panther_interactions": [[674, "pypath-inputs-reaction-panther-interactions"]], "pypath.inputs.reaction.pid_biopax": [[675, "pypath-inputs-reaction-pid-biopax"]], "pypath.inputs.reaction.pid_interactions": [[676, "pypath-inputs-reaction-pid-interactions"]], "pypath.inputs.reaction.process_complex": [[677, "pypath-inputs-reaction-process-complex"]], "pypath.inputs.reaction.process_controls": [[678, "pypath-inputs-reaction-process-controls"]], "pypath.inputs.reaction.process_reactions": [[679, "pypath-inputs-reaction-process-reactions"]], "pypath.inputs.reaction.reactions_biopax": [[680, "pypath-inputs-reaction-reactions-biopax"]], "pypath.inputs.reaction.reactome_biopax": [[681, "pypath-inputs-reaction-reactome-biopax"]], "pypath.inputs.reaction.reactome_bs": [[682, "pypath-inputs-reaction-reactome-bs"]], "pypath.inputs.reaction.reactome_interactions": [[683, "pypath-inputs-reaction-reactome-interactions"]], "pypath.inputs.reaction.reactome_sbml": [[684, "pypath-inputs-reaction-reactome-sbml"]], "pypath.inputs.scconnect": [[685, "module-pypath.inputs.scconnect"]], "pypath.inputs.scconnect.scconnect_annotations": [[686, "pypath-inputs-scconnect-scconnect-annotations"]], "pypath.inputs.scconnect.scconnect_complexes": [[687, "pypath-inputs-scconnect-scconnect-complexes"]], "pypath.inputs.scconnect.scconnect_interactions": [[688, "pypath-inputs-scconnect-scconnect-interactions"]], "pypath.inputs.science": [[689, "module-pypath.inputs.science"]], "pypath.inputs.science.science_download": [[690, "pypath-inputs-science-science-download"]], "pypath.inputs.signalink": [[691, "module-pypath.inputs.signalink"]], "pypath.inputs.signalink.signalink_annotations": [[692, "pypath-inputs-signalink-signalink-annotations"]], "pypath.inputs.signalink.signalink_function_annotations": [[693, "pypath-inputs-signalink-signalink-function-annotations"]], "pypath.inputs.signalink.signalink_interactions": [[694, "pypath-inputs-signalink-signalink-interactions"]], "pypath.inputs.signalink.signalink_pathway_annotations": [[695, "pypath-inputs-signalink-signalink-pathway-annotations"]], "pypath.inputs.signor": [[696, "module-pypath.inputs.signor"]], "pypath.inputs.signor.signor_complexes": [[697, "pypath-inputs-signor-signor-complexes"]], "pypath.inputs.signor.signor_enzyme_substrate": [[698, "pypath-inputs-signor-signor-enzyme-substrate"]], "pypath.inputs.signor.signor_interactions": [[699, "pypath-inputs-signor-signor-interactions"]], "pypath.inputs.signor.signor_pathway_annotations": [[700, "pypath-inputs-signor-signor-pathway-annotations"]], "pypath.inputs.signor.signor_pathways": [[701, "pypath-inputs-signor-signor-pathways"]], "pypath.inputs.signor.signor_protein_families": [[702, "pypath-inputs-signor-signor-protein-families"]], "pypath.inputs.spike": [[703, "module-pypath.inputs.spike"]], "pypath.inputs.spike.spike_complexes": [[704, "pypath-inputs-spike-spike-complexes"]], "pypath.inputs.spike.spike_interactions": [[705, "pypath-inputs-spike-spike-interactions"]], "pypath.inputs.stitch": [[706, "module-pypath.inputs.stitch"]], "pypath.inputs.stitch.stitch_actions_interactions": [[707, "pypath-inputs-stitch-stitch-actions-interactions"]], "pypath.inputs.stitch.stitch_links_interactions": [[708, "pypath-inputs-stitch-stitch-links-interactions"]], "pypath.inputs.string": [[709, "module-pypath.inputs.string"]], "pypath.inputs.string.string_effects": [[710, "pypath-inputs-string-string-effects"]], "pypath.inputs.string.string_links_interactions": [[711, "pypath-inputs-string-string-links-interactions"]], "pypath.inputs.string.string_physical_interactions": [[712, "pypath-inputs-string-string-physical-interactions"]], "pypath.inputs.string.string_species": [[713, "pypath-inputs-string-string-species"]], "pypath.inputs.surfaceome": [[714, "module-pypath.inputs.surfaceome"]], "pypath.inputs.surfaceome.surfaceome_annotations": [[715, "pypath-inputs-surfaceome-surfaceome-annotations"]], "pypath.inputs.switches_elm": [[716, "module-pypath.inputs.switches_elm"]], "pypath.inputs.switches_elm.get_switches_elm": [[717, "pypath-inputs-switches-elm-get-switches-elm"]], "pypath.inputs.talklr": [[718, "module-pypath.inputs.talklr"]], "pypath.inputs.talklr.talklr_annotations": [[719, "pypath-inputs-talklr-talklr-annotations"]], "pypath.inputs.talklr.talklr_interactions": [[720, "pypath-inputs-talklr-talklr-interactions"]], "pypath.inputs.talklr.talklr_raw": [[721, "pypath-inputs-talklr-talklr-raw"]], "pypath.inputs.tcdb": [[722, "module-pypath.inputs.tcdb"]], "pypath.inputs.tcdb.tcdb_annotations": [[723, "pypath-inputs-tcdb-tcdb-annotations"]], "pypath.inputs.tcdb.tcdb_classes": [[724, "pypath-inputs-tcdb-tcdb-classes"]], "pypath.inputs.tcdb.tcdb_families": [[725, "pypath-inputs-tcdb-tcdb-families"]], "pypath.inputs.tfcensus": [[726, "module-pypath.inputs.tfcensus"]], "pypath.inputs.tfcensus.tfcensus_annotations": [[727, "pypath-inputs-tfcensus-tfcensus-annotations"]], "pypath.inputs.threedcomplex": [[728, "module-pypath.inputs.threedcomplex"]], "pypath.inputs.threedcomplex.threedcomplex_chains": [[729, "pypath-inputs-threedcomplex-threedcomplex-chains"]], "pypath.inputs.threedcomplex.threedcomplex_complexes": [[730, "pypath-inputs-threedcomplex-threedcomplex-complexes"]], "pypath.inputs.threedcomplex.threedcomplex_contacts": [[731, "pypath-inputs-threedcomplex-threedcomplex-contacts"]], "pypath.inputs.threedcomplex.threedcomplex_ddi": [[732, "pypath-inputs-threedcomplex-threedcomplex-ddi"]], "pypath.inputs.threedcomplex.threedcomplex_nresidues": [[733, "pypath-inputs-threedcomplex-threedcomplex-nresidues"]], "pypath.inputs.threedid": [[734, "module-pypath.inputs.threedid"]], "pypath.inputs.threedid.get_3did": [[735, "pypath-inputs-threedid-get-3did"]], "pypath.inputs.threedid.get_3did_ddi": [[736, "pypath-inputs-threedid-get-3did-ddi"]], "pypath.inputs.threedid.get_3did_dmi": [[737, "pypath-inputs-threedid-get-3did-dmi"]], "pypath.inputs.threedid.process_3did_dmi": [[738, "pypath-inputs-threedid-process-3did-dmi"]], "pypath.inputs.topdb": [[739, "module-pypath.inputs.topdb"]], "pypath.inputs.topdb.topdb_annotations": [[740, "pypath-inputs-topdb-topdb-annotations"]], "pypath.inputs.transmir": [[741, "module-pypath.inputs.transmir"]], "pypath.inputs.transmir.transmir_interactions": [[742, "pypath-inputs-transmir-transmir-interactions"]], "pypath.inputs.trip": [[743, "module-pypath.inputs.trip"]], "pypath.inputs.trip.take_a_trip": [[744, "pypath-inputs-trip-take-a-trip"]], "pypath.inputs.trip.trip_find_uniprot": [[745, "pypath-inputs-trip-trip-find-uniprot"]], "pypath.inputs.trip.trip_get_uniprot": [[746, "pypath-inputs-trip-trip-get-uniprot"]], "pypath.inputs.trip.trip_interactions": [[747, "pypath-inputs-trip-trip-interactions"]], "pypath.inputs.trip.trip_process": [[748, "pypath-inputs-trip-trip-process"]], "pypath.inputs.trip.trip_process_table": [[749, "pypath-inputs-trip-trip-process-table"]], "pypath.inputs.unichem": [[750, "module-pypath.inputs.unichem"]], "pypath.inputs.unichem.info": [[751, "pypath-inputs-unichem-info"]], "pypath.inputs.unichem.unichem_info": [[752, "pypath-inputs-unichem-unichem-info"]], "pypath.inputs.unichem.unichem_mapping": [[753, "pypath-inputs-unichem-unichem-mapping"]], "pypath.inputs.unichem.unichem_sources": [[754, "pypath-inputs-unichem-unichem-sources"]], "pypath.inputs.uniprot": [[755, "module-pypath.inputs.uniprot"]], "pypath.inputs.uniprot.Taxon": [[756, "pypath-inputs-uniprot-taxon"]], "pypath.inputs.uniprot.UniprotRecordHistory": [[757, "pypath-inputs-uniprot-uniprotrecordhistory"]], "pypath.inputs.uniprot.all_swissprots": [[758, "pypath-inputs-uniprot-all-swissprots"]], "pypath.inputs.uniprot.all_trembls": [[759, "pypath-inputs-uniprot-all-trembls"]], "pypath.inputs.uniprot.all_uniprots": [[760, "pypath-inputs-uniprot-all-uniprots"]], "pypath.inputs.uniprot.deleted_uniprot_genesymbol": [[761, "pypath-inputs-uniprot-deleted-uniprot-genesymbol"]], "pypath.inputs.uniprot.get_db": [[762, "pypath-inputs-uniprot-get-db"]], "pypath.inputs.uniprot.get_uniprot_sec": [[763, "pypath-inputs-uniprot-get-uniprot-sec"]], "pypath.inputs.uniprot.init_db": [[764, "pypath-inputs-uniprot-init-db"]], "pypath.inputs.uniprot.is_swissprot": [[765, "pypath-inputs-uniprot-is-swissprot"]], "pypath.inputs.uniprot.is_trembl": [[766, "pypath-inputs-uniprot-is-trembl"]], "pypath.inputs.uniprot.is_uniprot": [[767, "pypath-inputs-uniprot-is-uniprot"]], "pypath.inputs.uniprot.protein_datasheet": [[768, "pypath-inputs-uniprot-protein-datasheet"]], "pypath.inputs.uniprot.swissprot_deleted": [[769, "pypath-inputs-uniprot-swissprot-deleted"]], "pypath.inputs.uniprot.trembl_deleted": [[770, "pypath-inputs-uniprot-trembl-deleted"]], "pypath.inputs.uniprot.uniprot_data": [[771, "pypath-inputs-uniprot-uniprot-data"]], "pypath.inputs.uniprot.uniprot_deleted": [[772, "pypath-inputs-uniprot-uniprot-deleted"]], "pypath.inputs.uniprot.uniprot_families": [[773, "pypath-inputs-uniprot-uniprot-families"]], "pypath.inputs.uniprot.uniprot_history": [[774, "pypath-inputs-uniprot-uniprot-history"]], "pypath.inputs.uniprot.uniprot_history_recent_datasheet": [[775, "pypath-inputs-uniprot-uniprot-history-recent-datasheet"]], "pypath.inputs.uniprot.uniprot_keywords": [[776, "pypath-inputs-uniprot-uniprot-keywords"]], "pypath.inputs.uniprot.uniprot_locations": [[777, "pypath-inputs-uniprot-uniprot-locations"]], "pypath.inputs.uniprot.uniprot_ncbi_taxids": [[778, "pypath-inputs-uniprot-uniprot-ncbi-taxids"]], "pypath.inputs.uniprot.uniprot_ncbi_taxids_2": [[779, "pypath-inputs-uniprot-uniprot-ncbi-taxids-2"]], "pypath.inputs.uniprot.uniprot_preprocess": [[780, "pypath-inputs-uniprot-uniprot-preprocess"]], "pypath.inputs.uniprot.uniprot_recent_version": [[781, "pypath-inputs-uniprot-uniprot-recent-version"]], "pypath.inputs.uniprot.uniprot_taxonomy": [[782, "pypath-inputs-uniprot-uniprot-taxonomy"]], "pypath.inputs.uniprot.uniprot_tissues": [[783, "pypath-inputs-uniprot-uniprot-tissues"]], "pypath.inputs.uniprot.uniprot_topology": [[784, "pypath-inputs-uniprot-uniprot-topology"]], "pypath.inputs.uniprot.valid_uniprot": [[785, "pypath-inputs-uniprot-valid-uniprot"]], "pypath.inputs.wang": [[786, "module-pypath.inputs.wang"]], "pypath.inputs.wang.cui_interactions": [[787, "pypath-inputs-wang-cui-interactions"]], "pypath.inputs.wang.hsn_interactions": [[788, "pypath-inputs-wang-hsn-interactions"]], "pypath.inputs.wang.wang_annotations": [[789, "pypath-inputs-wang-wang-annotations"]], "pypath.inputs.wang.wang_interactions": [[790, "pypath-inputs-wang-wang-interactions"]], "pypath.inputs.wojtowicz2020": [[791, "module-pypath.inputs.wojtowicz2020"]], "pypath.inputs.wojtowicz2020.wojtowicz2020_interactions": [[792, "pypath-inputs-wojtowicz2020-wojtowicz2020-interactions"]], "pypath.inputs.wojtowicz2020.wojtowicz2020_raw": [[793, "pypath-inputs-wojtowicz2020-wojtowicz2020-raw"]], "pypath.inputs.zhong2015": [[794, "module-pypath.inputs.zhong2015"]], "pypath.inputs.zhong2015.zhong2015_annotations": [[795, "pypath-inputs-zhong2015-zhong2015-annotations"]], "pypath.internals": [[796, "module-pypath.internals"]], "pypath.internals.annot_formats": [[797, "module-pypath.internals.annot_formats"]], "pypath.internals.annot_formats.AnnotDef": [[798, "pypath-internals-annot-formats-annotdef"]], "pypath.internals.annot_formats.AnnotDefKey": [[799, "pypath-internals-annot-formats-annotdefkey"]], "pypath.internals.annot_formats.AnnotOp": [[800, "pypath-internals-annot-formats-annotop"]], "pypath.internals.annot_formats.AnnotationGroup": [[801, "pypath-internals-annot-formats-annotationgroup"]], "pypath.internals.input_formats": [[802, "module-pypath.internals.input_formats"]], "pypath.internals.input_formats.ArrayMapping": [[803, "pypath-internals-input-formats-arraymapping"]], "pypath.internals.input_formats.BiomartMapping": [[804, "pypath-internals-input-formats-biomartmapping"]], "pypath.internals.input_formats.FileMapping": [[805, "pypath-internals-input-formats-filemapping"]], "pypath.internals.input_formats.MappingInput": [[806, "pypath-internals-input-formats-mappinginput"]], "pypath.internals.input_formats.NetworkInput": [[807, "pypath-internals-input-formats-networkinput"]], "pypath.internals.input_formats.PickleMapping": [[808, "pypath-internals-input-formats-picklemapping"]], "pypath.internals.input_formats.ProMapping": [[809, "pypath-internals-input-formats-promapping"]], "pypath.internals.input_formats.ReadList": [[810, "pypath-internals-input-formats-readlist"]], "pypath.internals.input_formats.UnichemMapping": [[811, "pypath-internals-input-formats-unichemmapping"]], "pypath.internals.input_formats.UniprotListMapping": [[812, "pypath-internals-input-formats-uniprotlistmapping"]], "pypath.internals.input_formats.UniprotMapping": [[813, "pypath-internals-input-formats-uniprotmapping"]], "pypath.internals.intera": [[814, "module-pypath.internals.intera"]], "pypath.internals.intera.Complex": [[815, "pypath-internals-intera-complex"]], "pypath.internals.intera.Domain": [[816, "pypath-internals-intera-domain"]], "pypath.internals.intera.DomainDomain": [[817, "pypath-internals-intera-domaindomain"]], "pypath.internals.intera.DomainMotif": [[818, "pypath-internals-intera-domainmotif"]], "pypath.internals.intera.Interface": [[819, "pypath-internals-intera-interface"]], "pypath.internals.intera.Motif": [[820, "pypath-internals-intera-motif"]], "pypath.internals.intera.Ptm": [[821, "pypath-internals-intera-ptm"]], "pypath.internals.intera.Regulation": [[822, "pypath-internals-intera-regulation"]], "pypath.internals.intera.Residue": [[823, "pypath-internals-intera-residue"]], "pypath.internals.license": [[824, "module-pypath.internals.license"]], "pypath.internals.license.License": [[825, "pypath-internals-license-license"]], "pypath.internals.license.LicenseAttrib": [[826, "pypath-internals-license-licenseattrib"]], "pypath.internals.license.LicenseFeature": [[827, "pypath-internals-license-licensefeature"]], "pypath.internals.license.LicensePurpose": [[828, "pypath-internals-license-licensepurpose"]], "pypath.internals.license.LicenseSharing": [[829, "pypath-internals-license-licensesharing"]], "pypath.internals.maps": [[830, "module-pypath.internals.maps"]], "pypath.internals.refs": [[831, "module-pypath.internals.refs"]], "pypath.internals.refs.Reference": [[832, "pypath-internals-refs-reference"]], "pypath.internals.refs.get_pubmed_data": [[833, "pypath-internals-refs-get-pubmed-data"]], "pypath.internals.resource": [[834, "module-pypath.internals.resource"]], "pypath.internals.resource.AbstractResource": [[835, "pypath-internals-resource-abstractresource"]], "pypath.internals.resource.EnzymeSubstrateResource": [[836, "pypath-internals-resource-enzymesubstrateresource"]], "pypath.internals.resource.EnzymeSubstrateResourceKey": [[837, "pypath-internals-resource-enzymesubstrateresourcekey"]], "pypath.internals.resource.NetworkResource": [[838, "pypath-internals-resource-networkresource"]], "pypath.internals.resource.NetworkResourceKey": [[839, "pypath-internals-resource-networkresourcekey"]], "pypath.internals.resource.ResourceAttributes": [[840, "pypath-internals-resource-resourceattributes"]], "pypath.legacy": [[841, "module-pypath.legacy"]], "pypath.legacy.db_categories": [[842, "module-pypath.legacy.db_categories"]], "pypath.legacy.db_categories.get_categories": [[843, "pypath-legacy-db-categories-get-categories"]], "pypath.legacy.db_categories.get_category": [[844, "pypath-legacy-db-categories-get-category"]], "pypath.log": [[845, "pypath-log"]], "pypath.obsolete": [[846, "module-pypath.obsolete"]], "pypath.obsolete.colorgen": [[847, "module-pypath.obsolete.colorgen"]], "pypath.obsolete.colorgen.bias": [[848, "pypath-obsolete-colorgen-bias"]], "pypath.obsolete.colorgen.colormix": [[849, "pypath-obsolete-colorgen-colormix"]], "pypath.obsolete.colorgen.dec2hex": [[850, "pypath-obsolete-colorgen-dec2hex"]], "pypath.obsolete.colorgen.embl_colors": [[851, "pypath-obsolete-colorgen-embl-colors"]], "pypath.obsolete.colorgen.genhsv": [[852, "pypath-obsolete-colorgen-genhsv"]], "pypath.obsolete.colorgen.genrgb": [[853, "pypath-obsolete-colorgen-genrgb"]], "pypath.obsolete.colorgen.getfracs": [[854, "pypath-obsolete-colorgen-getfracs"]], "pypath.obsolete.colorgen.gethexrgbs": [[855, "pypath-obsolete-colorgen-gethexrgbs"]], "pypath.obsolete.colorgen.gethsvs": [[856, "pypath-obsolete-colorgen-gethsvs"]], "pypath.obsolete.colorgen.getrgbs": [[857, "pypath-obsolete-colorgen-getrgbs"]], "pypath.obsolete.colorgen.hex2dec": [[858, "pypath-obsolete-colorgen-hex2dec"]], "pypath.obsolete.colorgen.hex2rgb": [[859, "pypath-obsolete-colorgen-hex2rgb"]], "pypath.obsolete.colorgen.read_palette": [[860, "pypath-obsolete-colorgen-read-palette"]], "pypath.obsolete.colorgen.rgb1": [[861, "pypath-obsolete-colorgen-rgb1"]], "pypath.obsolete.colorgen.rgb256": [[862, "pypath-obsolete-colorgen-rgb256"]], "pypath.obsolete.colorgen.rgb2hex": [[863, "pypath-obsolete-colorgen-rgb2hex"]], "pypath.obsolete.colorgen.zenos_dichotomy": [[864, "pypath-obsolete-colorgen-zenos-dichotomy"]], "pypath.obsolete.enrich": [[865, "module-pypath.obsolete.enrich"]], "pypath.obsolete.enrich.Enrichment": [[866, "pypath-obsolete-enrich-enrichment"]], "pypath.obsolete.enrich.EnrichmentSet": [[867, "pypath-obsolete-enrich-enrichmentset"]], "pypath.obsolete.gsea": [[868, "module-pypath.obsolete.gsea"]], "pypath.obsolete.gsea.GSEA": [[869, "pypath-obsolete-gsea-gsea"]], "pypath.obsolete.gsea.GSEABinaryEnrichmentSet": [[870, "pypath-obsolete-gsea-gseabinaryenrichmentset"]], "pypath.obsolete.linkcomm": [[871, "module-pypath.obsolete.linkcomm"]], "pypath.obsolete.linkcomm.Dc": [[872, "pypath-obsolete-linkcomm-dc"]], "pypath.obsolete.linkcomm.HLC": [[873, "pypath-obsolete-linkcomm-hlc"]], "pypath.obsolete.linkcomm.read_edgelist_unweighted": [[874, "pypath-obsolete-linkcomm-read-edgelist-unweighted"]], "pypath.obsolete.linkcomm.read_edgelist_weighted": [[875, "pypath-obsolete-linkcomm-read-edgelist-weighted"]], "pypath.obsolete.linkcomm.similarities_unweighted": [[876, "pypath-obsolete-linkcomm-similarities-unweighted"]], "pypath.obsolete.linkcomm.similarities_weighted": [[877, "pypath-obsolete-linkcomm-similarities-weighted"]], "pypath.obsolete.linkcomm.swap": [[878, "pypath-obsolete-linkcomm-swap"]], "pypath.obsolete.linkcomm.write_dendro": [[879, "pypath-obsolete-linkcomm-write-dendro"]], "pypath.obsolete.linkcomm.write_edge2cid": [[880, "pypath-obsolete-linkcomm-write-edge2cid"]], "pypath.omnipath": [[881, "module-pypath.omnipath"]], "pypath.omnipath.app": [[882, "module-pypath.omnipath.app"]], "pypath.omnipath.app.DatabaseManager": [[883, "pypath-omnipath-app-databasemanager"]], "pypath.omnipath.databases": [[884, "module-pypath.omnipath.databases"]], "pypath.omnipath.databases.build": [[885, "pypath-omnipath-databases-build"]], "pypath.omnipath.databases.class_and_param": [[886, "pypath-omnipath-databases-class-and-param"]], "pypath.omnipath.databases.define": [[887, "module-pypath.omnipath.databases.define"]], "pypath.omnipath.databases.define.DatabaseClass": [[888, "pypath-omnipath-databases-define-databaseclass"]], "pypath.omnipath.databases.define.DatabaseDefinition": [[889, "pypath-omnipath-databases-define-databasedefinition"]], "pypath.omnipath.databases.define.DatabaseDefinitionManager": [[890, "pypath-omnipath-databases-define-databasedefinitionmanager"]], "pypath.omnipath.databases.get_manager": [[891, "pypath-omnipath-databases-get-manager"]], "pypath.omnipath.databases.init_manager": [[892, "pypath-omnipath-databases-init-manager"]], "pypath.omnipath.export": [[893, "module-pypath.omnipath.export"]], "pypath.omnipath.export.Export": [[894, "pypath-omnipath-export-export"]], "pypath.omnipath.init": [[895, "pypath-omnipath-init"]], "pypath.omnipath.param": [[896, "module-pypath.omnipath.param"]], "pypath.omnipath.param.curated_ppi_resources": [[897, "pypath-omnipath-param-curated-ppi-resources"]], "pypath.omnipath.param.tf_target_resources": [[898, "pypath-omnipath-param-tf-target-resources"]], "pypath.omnipath.server": [[899, "module-pypath.omnipath.server"]], "pypath.omnipath.server.build": [[900, "module-pypath.omnipath.server.build"]], "pypath.omnipath.server.build.WebserviceTables": [[901, "pypath-omnipath-server-build-webservicetables"]], "pypath.omnipath.server.generate_about_page": [[902, "module-pypath.omnipath.server.generate_about_page"]], "pypath.omnipath.server.generate_about_page.export_licenses": [[903, "pypath-omnipath-server-generate-about-page-export-licenses"]], "pypath.omnipath.server.generate_about_page.generate_about_html": [[904, "pypath-omnipath-server-generate-about-page-generate-about-html"]], "pypath.omnipath.server.generate_about_page.resource_list_latex": [[905, "pypath-omnipath-server-generate-about-page-resource-list-latex"]], "pypath.omnipath.server.generate_about_page.write_html": [[906, "pypath-omnipath-server-generate-about-page-write-html"]], "pypath.resources": [[907, "module-pypath.resources"]], "pypath.resources.controller": [[908, "module-pypath.resources.controller"]], "pypath.resources.controller.ResourceController": [[909, "pypath-resources-controller-resourcecontroller"]], "pypath.resources.data": [[910, "module-pypath.resources.data"]], "pypath.resources.data_formats": [[911, "module-pypath.resources.data_formats"]], "pypath.resources.data_formats.ROOT": [[912, "pypath-resources-data-formats-root"]], "pypath.resources.data_formats.activity_flow": [[913, "pypath-resources-data-formats-activity-flow"]], "pypath.resources.data_formats.enzyme_substrate": [[914, "pypath-resources-data-formats-enzyme-substrate"]], "pypath.resources.data_formats.interaction": [[915, "pypath-resources-data-formats-interaction"]], "pypath.resources.data_formats.interaction_htp": [[916, "pypath-resources-data-formats-interaction-htp"]], "pypath.resources.data_formats.obsolate": [[917, "pypath-resources-data-formats-obsolate"]], "pypath.resources.data_formats.pathway_bad": [[918, "pypath-resources-data-formats-pathway-bad"]], "pypath.resources.data_formats.reaction_pc": [[919, "pypath-resources-data-formats-reaction-pc"]], "pypath.resources.data_formats.transcription_deprecated": [[920, "pypath-resources-data-formats-transcription-deprecated"]], "pypath.resources.data_formats.transcription_onebyone": [[921, "pypath-resources-data-formats-transcription-onebyone"]], "pypath.resources.descriptions": [[922, "module-pypath.resources.descriptions"]], "pypath.resources.descriptions.export_licenses": [[923, "pypath-resources-descriptions-export-licenses"]], "pypath.resources.descriptions.gen_html": [[924, "pypath-resources-descriptions-gen-html"]], "pypath.resources.descriptions.resource_list_latex": [[925, "pypath-resources-descriptions-resource-list-latex"]], "pypath.resources.descriptions.write_html": [[926, "pypath-resources-descriptions-write-html"]], "pypath.resources.get_controller": [[927, "pypath-resources-get-controller"]], "pypath.resources.licenses": [[928, "module-pypath.resources.licenses"]], "pypath.resources.licenses.Licenses": [[929, "pypath-resources-licenses-licenses"]], "pypath.resources.network": [[930, "module-pypath.resources.network"]], "pypath.resources.network.dorothea_expand_levels": [[931, "pypath-resources-network-dorothea-expand-levels"]], "pypath.resources.urls": [[932, "module-pypath.resources.urls"]], "pypath.share": [[933, "module-pypath.share"]], "pypath.share.cache": [[934, "module-pypath.share.cache"]], "pypath.share.cache.cache_item": [[935, "pypath-share-cache-cache-item"]], "pypath.share.cache.get_cachedir": [[936, "pypath-share-cache-get-cachedir"]], "pypath.share.common": [[937, "module-pypath.share.common"]], "pypath.share.common.add_to_list": [[938, "pypath-share-common-add-to-list"]], "pypath.share.common.add_to_set": [[939, "pypath-share-common-add-to-set"]], "pypath.share.common.at_least_in": [[940, "pypath-share-common-at-least-in"]], "pypath.share.common.clean_dict": [[941, "pypath-share-common-clean-dict"]], "pypath.share.common.combine_attrs": [[942, "pypath-share-common-combine-attrs"]], "pypath.share.common.console": [[943, "pypath-share-common-console"]], "pypath.share.common.decode": [[944, "pypath-share-common-decode"]], "pypath.share.common.del_empty": [[945, "pypath-share-common-del-empty"]], "pypath.share.common.df_memory_usage": [[946, "pypath-share-common-df-memory-usage"]], "pypath.share.common.dict_collapse_keys": [[947, "pypath-share-common-dict-collapse-keys"]], "pypath.share.common.dict_counts": [[948, "pypath-share-common-dict-counts"]], "pypath.share.common.dict_diff": [[949, "pypath-share-common-dict-diff"]], "pypath.share.common.dict_expand_keys": [[950, "pypath-share-common-dict-expand-keys"]], "pypath.share.common.dict_percent": [[951, "pypath-share-common-dict-percent"]], "pypath.share.common.dict_set_path": [[952, "pypath-share-common-dict-set-path"]], "pypath.share.common.dict_set_percent": [[953, "pypath-share-common-dict-set-percent"]], "pypath.share.common.dict_str": [[954, "pypath-share-common-dict-str"]], "pypath.share.common.dict_subtotals": [[955, "pypath-share-common-dict-subtotals"]], "pypath.share.common.dict_sym_diff": [[956, "pypath-share-common-dict-sym-diff"]], "pypath.share.common.dict_union": [[957, "pypath-share-common-dict-union"]], "pypath.share.common.eq": [[958, "pypath-share-common-eq"]], "pypath.share.common.filtr": [[959, "pypath-share-common-filtr"]], "pypath.share.common.first": [[960, "pypath-share-common-first"]], "pypath.share.common.flat_list": [[961, "pypath-share-common-flat-list"]], "pypath.share.common.float_or_nan": [[962, "pypath-share-common-float-or-nan"]], "pypath.share.common.gen_session_id": [[963, "pypath-share-common-gen-session-id"]], "pypath.share.common.get": [[964, "pypath-share-common-get"]], "pypath.share.common.get_args": [[965, "pypath-share-common-get-args"]], "pypath.share.common.is_float": [[966, "pypath-share-common-is-float"]], "pypath.share.common.is_int": [[967, "pypath-share-common-is-int"]], "pypath.share.common.is_str": [[968, "pypath-share-common-is-str"]], "pypath.share.common.jaccard_index": [[969, "pypath-share-common-jaccard-index"]], "pypath.share.common.join_dicts": [[970, "pypath-share-common-join-dicts"]], "pypath.share.common.latex_table": [[971, "pypath-share-common-latex-table"]], "pypath.share.common.match": [[972, "pypath-share-common-match"]], "pypath.share.common.maybe_in_dict": [[973, "pypath-share-common-maybe-in-dict"]], "pypath.share.common.md5": [[974, "pypath-share-common-md5"]], "pypath.share.common.merge_dicts": [[975, "pypath-share-common-merge-dicts"]], "pypath.share.common.n_shared_elements": [[976, "pypath-share-common-n-shared-elements"]], "pypath.share.common.n_shared_foreach": [[977, "pypath-share-common-n-shared-foreach"]], "pypath.share.common.n_shared_total": [[978, "pypath-share-common-n-shared-total"]], "pypath.share.common.n_shared_unique_foreach": [[979, "pypath-share-common-n-shared-unique-foreach"]], "pypath.share.common.n_unique_elements": [[980, "pypath-share-common-n-unique-elements"]], "pypath.share.common.n_unique_foreach": [[981, "pypath-share-common-n-unique-foreach"]], "pypath.share.common.n_unique_total": [[982, "pypath-share-common-n-unique-total"]], "pypath.share.common.negate": [[983, "pypath-share-common-negate"]], "pypath.share.common.none_or_len": [[984, "pypath-share-common-none-or-len"]], "pypath.share.common.paginate": [[985, "pypath-share-common-paginate"]], "pypath.share.common.prefix": [[986, "pypath-share-common-prefix"]], "pypath.share.common.print_table": [[987, "pypath-share-common-print-table"]], "pypath.share.common.re_safe_groups": [[988, "pypath-share-common-re-safe-groups"]], "pypath.share.common.remove_prefix": [[989, "pypath-share-common-remove-prefix"]], "pypath.share.common.rotate": [[990, "pypath-share-common-rotate"]], "pypath.share.common.sets_to_sorted_lists": [[991, "pypath-share-common-sets-to-sorted-lists"]], "pypath.share.common.sfirst": [[992, "pypath-share-common-sfirst"]], "pypath.share.common.shared_elements": [[993, "pypath-share-common-shared-elements"]], "pypath.share.common.shared_foreach": [[994, "pypath-share-common-shared-foreach"]], "pypath.share.common.shared_total": [[995, "pypath-share-common-shared-total"]], "pypath.share.common.shared_unique": [[996, "pypath-share-common-shared-unique"]], "pypath.share.common.shared_unique_foreach": [[997, "pypath-share-common-shared-unique-foreach"]], "pypath.share.common.shared_unique_total": [[998, "pypath-share-common-shared-unique-total"]], "pypath.share.common.silent": [[999, "pypath-share-common-silent"]], "pypath.share.common.simpson_index": [[1000, "pypath-share-common-simpson-index"]], "pypath.share.common.simpson_index_counts": [[1001, "pypath-share-common-simpson-index-counts"]], "pypath.share.common.something": [[1002, "pypath-share-common-something"]], "pypath.share.common.sorensen_index": [[1003, "pypath-share-common-sorensen-index"]], "pypath.share.common.suffix": [[1004, "pypath-share-common-suffix"]], "pypath.share.common.sum_dicts": [[1005, "pypath-share-common-sum-dicts"]], "pypath.share.common.swap_dict": [[1006, "pypath-share-common-swap-dict"]], "pypath.share.common.swap_dict_simple": [[1007, "pypath-share-common-swap-dict-simple"]], "pypath.share.common.swap_suffix": [[1008, "pypath-share-common-swap-suffix"]], "pypath.share.common.table_add_row_numbers": [[1009, "pypath-share-common-table-add-row-numbers"]], "pypath.share.common.table_format": [[1010, "pypath-share-common-table-format"]], "pypath.share.common.table_textwrap": [[1011, "pypath-share-common-table-textwrap"]], "pypath.share.common.to_list": [[1012, "pypath-share-common-to-list"]], "pypath.share.common.to_set": [[1013, "pypath-share-common-to-set"]], "pypath.share.common.try_bool": [[1014, "pypath-share-common-try-bool"]], "pypath.share.common.try_float": [[1015, "pypath-share-common-try-float"]], "pypath.share.common.tsv_table": [[1016, "pypath-share-common-tsv-table"]], "pypath.share.common.uniq_list": [[1017, "pypath-share-common-uniq-list"]], "pypath.share.common.uniq_list1": [[1018, "pypath-share-common-uniq-list1"]], "pypath.share.common.uniq_list2": [[1019, "pypath-share-common-uniq-list2"]], "pypath.share.common.uniq_ord_list": [[1020, "pypath-share-common-uniq-ord-list"]], "pypath.share.common.unique_elements": [[1021, "pypath-share-common-unique-elements"]], "pypath.share.common.unique_foreach": [[1022, "pypath-share-common-unique-foreach"]], "pypath.share.common.unique_list": [[1023, "pypath-share-common-unique-list"]], "pypath.share.common.unique_total": [[1024, "pypath-share-common-unique-total"]], "pypath.share.common.upper0": [[1025, "pypath-share-common-upper0"]], "pypath.share.common.values": [[1026, "pypath-share-common-values"]], "pypath.share.common.wcl": [[1027, "pypath-share-common-wcl"]], "pypath.share.common.wrap_truncate": [[1028, "pypath-share-common-wrap-truncate"]], "pypath.share.constants": [[1029, "module-pypath.share.constants"]], "pypath.share.curl": [[1030, "module-pypath.share.curl"]], "pypath.share.curl.Curl": [[1031, "pypath-share-curl-curl"]], "pypath.share.curl.FileOpener": [[1032, "pypath-share-curl-fileopener"]], "pypath.share.curl.RemoteFile": [[1033, "pypath-share-curl-remotefile"]], "pypath.share.curl.cache_delete_off": [[1034, "pypath-share-curl-cache-delete-off"]], "pypath.share.curl.cache_delete_on": [[1035, "pypath-share-curl-cache-delete-on"]], "pypath.share.curl.cache_off": [[1036, "pypath-share-curl-cache-off"]], "pypath.share.curl.cache_on": [[1037, "pypath-share-curl-cache-on"]], "pypath.share.curl.cache_print_off": [[1038, "pypath-share-curl-cache-print-off"]], "pypath.share.curl.cache_print_on": [[1039, "pypath-share-curl-cache-print-on"]], "pypath.share.curl.debug_off": [[1040, "pypath-share-curl-debug-off"]], "pypath.share.curl.debug_on": [[1041, "pypath-share-curl-debug-on"]], "pypath.share.curl.dryrun_off": [[1042, "pypath-share-curl-dryrun-off"]], "pypath.share.curl.dryrun_on": [[1043, "pypath-share-curl-dryrun-on"]], "pypath.share.curl.is_url": [[1044, "pypath-share-curl-is-url"]], "pypath.share.curl.preserve_off": [[1045, "pypath-share-curl-preserve-off"]], "pypath.share.curl.preserve_on": [[1046, "pypath-share-curl-preserve-on"]], "pypath.share.log": [[1047, "module-pypath.share.log"]], "pypath.share.log.Logger": [[1048, "pypath-share-log-logger"]], "pypath.share.log.new_logger": [[1049, "pypath-share-log-new-logger"]], "pypath.share.progress": [[1050, "module-pypath.share.progress"]], "pypath.share.progress.Progress": [[1051, "pypath-share-progress-progress"]], "pypath.share.session": [[1052, "module-pypath.share.session"]], "pypath.share.session.Logger": [[1053, "pypath-share-session-logger"]], "pypath.share.session.Session": [[1054, "pypath-share-session-session"]], "pypath.share.session.get_log": [[1055, "pypath-share-session-get-log"]], "pypath.share.session.get_session": [[1056, "pypath-share-session-get-session"]], "pypath.share.session.new_session": [[1057, "pypath-share-session-new-session"]], "pypath.share.settings": [[1058, "module-pypath.share.settings"]], "pypath.share.settings.Settings": [[1059, "pypath-share-settings-settings"]], "pypath.share.settings.context": [[1060, "pypath-share-settings-context"]], "pypath.share.settings.get": [[1061, "pypath-share-settings-get"]], "pypath.share.settings.setup": [[1062, "pypath-share-settings-setup"]], "pypath.utils": [[1063, "module-pypath.utils"]], "pypath.utils.go": [[1064, "module-pypath.utils.go"]], "pypath.utils.go.GOAnnotation": [[1065, "pypath-utils-go-goannotation"]], "pypath.utils.go.GOCustomAnnotation": [[1066, "pypath-utils-go-gocustomannotation"]], "pypath.utils.go.GeneOntology": [[1067, "pypath-utils-go-geneontology"]], "pypath.utils.go.annotate": [[1068, "pypath-utils-go-annotate"]], "pypath.utils.go.get_db": [[1069, "pypath-utils-go-get-db"]], "pypath.utils.go.init_db": [[1070, "pypath-utils-go-init-db"]], "pypath.utils.go.load_go": [[1071, "pypath-utils-go-load-go"]], "pypath.utils.homology": [[1072, "module-pypath.utils.homology"]], "pypath.utils.homology.HomologyManager": [[1073, "pypath-utils-homology-homologymanager"]], "pypath.utils.homology.Ortholog": [[1074, "pypath-utils-homology-ortholog"]], "pypath.utils.homology.ProteinHomology": [[1075, "pypath-utils-homology-proteinhomology"]], "pypath.utils.homology.Proteomes": [[1076, "pypath-utils-homology-proteomes"]], "pypath.utils.homology.PtmHomology": [[1077, "pypath-utils-homology-ptmhomology"]], "pypath.utils.homology.SequenceContainer": [[1078, "pypath-utils-homology-sequencecontainer"]], "pypath.utils.homology.get_df": [[1079, "pypath-utils-homology-get-df"]], "pypath.utils.homology.get_dict": [[1080, "pypath-utils-homology-get-dict"]], "pypath.utils.homology.get_manager": [[1081, "pypath-utils-homology-get-manager"]], "pypath.utils.homology.init": [[1082, "pypath-utils-homology-init"]], "pypath.utils.homology.translate": [[1083, "pypath-utils-homology-translate"]], "pypath.utils.homology.translate_df": [[1084, "pypath-utils-homology-translate-df"]], "pypath.utils.mapping": [[1085, "module-pypath.utils.mapping"]], "pypath.utils.mapping.MapReader": [[1086, "pypath-utils-mapping-mapreader"]], "pypath.utils.mapping.Mapper": [[1087, "pypath-utils-mapping-mapper"]], "pypath.utils.mapping.MappingTable": [[1088, "pypath-utils-mapping-mappingtable"]], "pypath.utils.mapping.MappingTableKey": [[1089, "pypath-utils-mapping-mappingtablekey"]], "pypath.utils.mapping.UNIPROT_ID_TYPES": [[1090, "pypath-utils-mapping-uniprot-id-types"]], "pypath.utils.mapping.get_mapper": [[1091, "pypath-utils-mapping-get-mapper"]], "pypath.utils.mapping.guess_type": [[1092, "pypath-utils-mapping-guess-type"]], "pypath.utils.mapping.id_from_label": [[1093, "pypath-utils-mapping-id-from-label"]], "pypath.utils.mapping.id_from_label0": [[1094, "pypath-utils-mapping-id-from-label0"]], "pypath.utils.mapping.init": [[1095, "pypath-utils-mapping-init"]], "pypath.utils.mapping.label": [[1096, "pypath-utils-mapping-label"]], "pypath.utils.mapping.map_name": [[1097, "pypath-utils-mapping-map-name"]], "pypath.utils.mapping.map_name0": [[1098, "pypath-utils-mapping-map-name0"]], "pypath.utils.mapping.map_names": [[1099, "pypath-utils-mapping-map-names"]], "pypath.utils.pdb": [[1100, "module-pypath.utils.pdb"]], "pypath.utils.pdb.Residue": [[1101, "pypath-utils-pdb-residue"]], "pypath.utils.pdb.ResidueMapper": [[1102, "pypath-utils-pdb-residuemapper"]], "pypath.utils.pdb.Segment": [[1103, "pypath-utils-pdb-segment"]], "pypath.utils.pdb.residue_pdb": [[1104, "pypath-utils-pdb-residue-pdb"]], "pypath.utils.proteomicsdb": [[1105, "module-pypath.utils.proteomicsdb"]], "pypath.utils.proteomicsdb.ProteomicsDB": [[1106, "pypath-utils-proteomicsdb-proteomicsdb"]], "pypath.utils.pyreact": [[1107, "module-pypath.utils.pyreact"]], "pypath.utils.pyreact.AttributeHandler": [[1108, "pypath-utils-pyreact-attributehandler"]], "pypath.utils.pyreact.BioPaxReader": [[1109, "pypath-utils-pyreact-biopaxreader"]], "pypath.utils.pyreact.Complex": [[1110, "pypath-utils-pyreact-complex"]], "pypath.utils.pyreact.ComplexVariations": [[1111, "pypath-utils-pyreact-complexvariations"]], "pypath.utils.pyreact.Control": [[1112, "pypath-utils-pyreact-control"]], "pypath.utils.pyreact.Entity": [[1113, "pypath-utils-pyreact-entity"]], "pypath.utils.pyreact.EntitySet": [[1114, "pypath-utils-pyreact-entityset"]], "pypath.utils.pyreact.Intersecting": [[1115, "pypath-utils-pyreact-intersecting"]], "pypath.utils.pyreact.Protein": [[1116, "pypath-utils-pyreact-protein"]], "pypath.utils.pyreact.ProteinFamily": [[1117, "pypath-utils-pyreact-proteinfamily"]], "pypath.utils.pyreact.PyReact": [[1118, "pypath-utils-pyreact-pyreact"]], "pypath.utils.pyreact.Reaction": [[1119, "pypath-utils-pyreact-reaction"]], "pypath.utils.pyreact.ReactionSide": [[1120, "pypath-utils-pyreact-reactionside"]], "pypath.utils.pyreact.Reference": [[1121, "pypath-utils-pyreact-reference"]], "pypath.utils.reflists": [[1122, "module-pypath.utils.reflists"]], "pypath.utils.reflists.ReferenceListManager": [[1123, "pypath-utils-reflists-referencelistmanager"]], "pypath.utils.reflists.check": [[1124, "pypath-utils-reflists-check"]], "pypath.utils.reflists.get_manager": [[1125, "pypath-utils-reflists-get-manager"]], "pypath.utils.reflists.get_reflist": [[1126, "pypath-utils-reflists-get-reflist"]], "pypath.utils.reflists.init": [[1127, "pypath-utils-reflists-init"]], "pypath.utils.reflists.is_not": [[1128, "pypath-utils-reflists-is-not"]], "pypath.utils.reflists.select": [[1129, "pypath-utils-reflists-select"]], "pypath.utils.residues": [[1130, "module-pypath.utils.residues"]], "pypath.utils.residues.ResidueMapper": [[1131, "pypath-utils-residues-residuemapper"]], "pypath.utils.seq": [[1132, "module-pypath.utils.seq"]], "pypath.utils.seq.Pfam": [[1133, "pypath-utils-seq-pfam"]], "pypath.utils.seq.Resource": [[1134, "pypath-utils-seq-resource"]], "pypath.utils.seq.Seq": [[1135, "pypath-utils-seq-seq"]], "pypath.utils.seq.get_isoforms": [[1136, "pypath-utils-seq-get-isoforms"]], "pypath.utils.seq.read_fasta": [[1137, "pypath-utils-seq-read-fasta"]], "pypath.utils.seq.swissprot_seq": [[1138, "pypath-utils-seq-swissprot-seq"]], "pypath.utils.taxonomy": [[1139, "module-pypath.utils.taxonomy"]], "pypath.utils.taxonomy.ensure_common_name": [[1140, "pypath-utils-taxonomy-ensure-common-name"]], "pypath.utils.taxonomy.ensure_ensembl_name": [[1141, "pypath-utils-taxonomy-ensure-ensembl-name"]], "pypath.utils.taxonomy.ensure_latin_name": [[1142, "pypath-utils-taxonomy-ensure-latin-name"]], "pypath.utils.taxonomy.ensure_ncbi_tax_id": [[1143, "pypath-utils-taxonomy-ensure-ncbi-tax-id"]], "pypath.utils.taxonomy.get_db": [[1144, "pypath-utils-taxonomy-get-db"]], "pypath.utils.taxonomy.init_db": [[1145, "pypath-utils-taxonomy-init-db"]], "pypath.utils.taxonomy.short_latin_names": [[1146, "pypath-utils-taxonomy-short-latin-names"]], "pypath.utils.taxonomy.shorten_latin_name": [[1147, "pypath-utils-taxonomy-shorten-latin-name"]], "pypath.utils.taxonomy.taxid_from_common_name": [[1148, "pypath-utils-taxonomy-taxid-from-common-name"]], "pypath.utils.taxonomy.taxid_from_dbptm_taxon_name": [[1149, "pypath-utils-taxonomy-taxid-from-dbptm-taxon-name"]], "pypath.utils.taxonomy.taxid_from_ensembl_name": [[1150, "pypath-utils-taxonomy-taxid-from-ensembl-name"]], "pypath.utils.taxonomy.taxid_from_latin_name": [[1151, "pypath-utils-taxonomy-taxid-from-latin-name"]], "pypath.utils.taxonomy.taxid_from_nonstandard": [[1152, "pypath-utils-taxonomy-taxid-from-nonstandard"]], "pypath.utils.taxonomy.uniprot_taxid": [[1153, "pypath-utils-taxonomy-uniprot-taxid"]], "pypath.utils.unichem": [[1154, "module-pypath.utils.unichem"]], "pypath.utils.unichem.Unichem": [[1155, "pypath-utils-unichem-unichem"]], "pypath.utils.uniprot": [[1156, "module-pypath.utils.uniprot"]], "pypath.utils.uniprot.UniprotProtein": [[1157, "pypath-utils-uniprot-uniprotprotein"]], "pypath.utils.uniprot.ac": [[1158, "pypath-utils-uniprot-ac"]], "pypath.utils.uniprot.activity_regulation": [[1159, "pypath-utils-uniprot-activity-regulation"]], "pypath.utils.uniprot.activity_regulation_with_xrefs": [[1160, "pypath-utils-uniprot-activity-regulation-with-xrefs"]], "pypath.utils.uniprot.alternative_products": [[1161, "pypath-utils-uniprot-alternative-products"]], "pypath.utils.uniprot.alternative_products_with_xrefs": [[1162, "pypath-utils-uniprot-alternative-products-with-xrefs"]], "pypath.utils.uniprot.browse": [[1163, "pypath-utils-uniprot-browse"]], "pypath.utils.uniprot.catalytic_activity": [[1164, "pypath-utils-uniprot-catalytic-activity"]], "pypath.utils.uniprot.catalytic_activity_with_xrefs": [[1165, "pypath-utils-uniprot-catalytic-activity-with-xrefs"]], "pypath.utils.uniprot.collect": [[1166, "pypath-utils-uniprot-collect"]], "pypath.utils.uniprot.databases": [[1167, "pypath-utils-uniprot-databases"]], "pypath.utils.uniprot.disease": [[1168, "pypath-utils-uniprot-disease"]], "pypath.utils.uniprot.disease_with_xrefs": [[1169, "pypath-utils-uniprot-disease-with-xrefs"]], "pypath.utils.uniprot.ec": [[1170, "pypath-utils-uniprot-ec"]], "pypath.utils.uniprot.features_table": [[1171, "pypath-utils-uniprot-features-table"]], "pypath.utils.uniprot.full_name": [[1172, "pypath-utils-uniprot-full-name"]], "pypath.utils.uniprot.function": [[1173, "pypath-utils-uniprot-function"]], "pypath.utils.uniprot.function_genecards": [[1174, "pypath-utils-uniprot-function-genecards"]], "pypath.utils.uniprot.function_or_genecards": [[1175, "pypath-utils-uniprot-function-or-genecards"]], "pypath.utils.uniprot.function_with_genecards": [[1176, "pypath-utils-uniprot-function-with-genecards"]], "pypath.utils.uniprot.function_with_xrefs": [[1177, "pypath-utils-uniprot-function-with-xrefs"]], "pypath.utils.uniprot.genesymbol": [[1178, "pypath-utils-uniprot-genesymbol"]], "pypath.utils.uniprot.has_tag": [[1179, "pypath-utils-uniprot-has-tag"]], "pypath.utils.uniprot.id": [[1180, "pypath-utils-uniprot-id"]], "pypath.utils.uniprot.info": [[1181, "pypath-utils-uniprot-info"]], "pypath.utils.uniprot.info_section": [[1182, "pypath-utils-uniprot-info-section"]], "pypath.utils.uniprot.interaction": [[1183, "pypath-utils-uniprot-interaction"]], "pypath.utils.uniprot.interaction_with_xrefs": [[1184, "pypath-utils-uniprot-interaction-with-xrefs"]], "pypath.utils.uniprot.is_reviewed": [[1185, "pypath-utils-uniprot-is-reviewed"]], "pypath.utils.uniprot.itertag": [[1186, "pypath-utils-uniprot-itertag"]], "pypath.utils.uniprot.keywords": [[1187, "pypath-utils-uniprot-keywords"]], "pypath.utils.uniprot.keywords_with_xrefs": [[1188, "pypath-utils-uniprot-keywords-with-xrefs"]], "pypath.utils.uniprot.length": [[1189, "pypath-utils-uniprot-length"]], "pypath.utils.uniprot.lengths": [[1190, "pypath-utils-uniprot-lengths"]], "pypath.utils.uniprot.load": [[1191, "pypath-utils-uniprot-load"]], "pypath.utils.uniprot.organism": [[1192, "pypath-utils-uniprot-organism"]], "pypath.utils.uniprot.print_features": [[1193, "pypath-utils-uniprot-print-features"]], "pypath.utils.uniprot.ptm": [[1194, "pypath-utils-uniprot-ptm"]], "pypath.utils.uniprot.ptm_with_xrefs": [[1195, "pypath-utils-uniprot-ptm-with-xrefs"]], "pypath.utils.uniprot.query": [[1196, "pypath-utils-uniprot-query"]], "pypath.utils.uniprot.reload": [[1197, "pypath-utils-uniprot-reload"]], "pypath.utils.uniprot.remove_xrefs": [[1198, "pypath-utils-uniprot-remove-xrefs"]], "pypath.utils.uniprot.sequence": [[1199, "pypath-utils-uniprot-sequence"]], "pypath.utils.uniprot.sequence_caution": [[1200, "pypath-utils-uniprot-sequence-caution"]], "pypath.utils.uniprot.sequence_caution_with_xrefs": [[1201, "pypath-utils-uniprot-sequence-caution-with-xrefs"]], "pypath.utils.uniprot.similarity": [[1202, "pypath-utils-uniprot-similarity"]], "pypath.utils.uniprot.similarity_with_xrefs": [[1203, "pypath-utils-uniprot-similarity-with-xrefs"]], "pypath.utils.uniprot.subcellular_location": [[1204, "pypath-utils-uniprot-subcellular-location"]], "pypath.utils.uniprot.subcellular_location_with_xrefs": [[1205, "pypath-utils-uniprot-subcellular-location-with-xrefs"]], "pypath.utils.uniprot.subunit": [[1206, "pypath-utils-uniprot-subunit"]], "pypath.utils.uniprot.subunit_with_xrefs": [[1207, "pypath-utils-uniprot-subunit-with-xrefs"]], "pypath.utils.uniprot.tissue_specificity": [[1208, "pypath-utils-uniprot-tissue-specificity"]], "pypath.utils.uniprot.tissue_specificity_with_xrefs": [[1209, "pypath-utils-uniprot-tissue-specificity-with-xrefs"]], "pypath.utils.uniprot.update_databases": [[1210, "pypath-utils-uniprot-update-databases"]], "pypath.utils.uniprot.update_info": [[1211, "pypath-utils-uniprot-update-info"]], "pypath.utils.uniprot.web_resource": [[1212, "pypath-utils-uniprot-web-resource"]], "pypath.utils.uniprot.web_resource_with_xrefs": [[1213, "pypath-utils-uniprot-web-resource-with-xrefs"]], "pypath.utils.uniprot.weight": [[1214, "pypath-utils-uniprot-weight"]], "pypath.utils.uniprot.weights": [[1215, "pypath-utils-uniprot-weights"]], "pypath.visual": [[1216, "module-pypath.visual"]], "Release history": [[1217, "release-history"]], "0.1.0": [[1217, "id1"], [1221, "id1"]], "0.2.0": [[1217, "id2"], [1221, "id2"]], "0.3.0": [[1217, "id3"], [1221, "id3"]], "0.4.0": [[1217, "id4"], [1221, "id4"]], "0.5.0": [[1217, "id5"], [1221, "id5"]], "0.7.74": [[1217, "id6"], [1221, "id9"]], "Upcoming": [[1217, "upcoming"], [1221, "upcoming"]], "Features": [[1218, "features"]], "ID conversion": [[1218, "id-conversion"]], "Pathways": [[1218, "pathways"]], "Structural features": [[1218, "structural-features"]], "Sequences": [[1218, "sequences"]], "Tissue expression": [[1218, "tissue-expression"]], "Functional annotations": [[1218, "functional-annotations"]], "Drug compounds": [[1218, "drug-compounds"]], "Technical": [[1218, "technical"]], "pypath: A Python module for molecular signaling prior knowledge processing": [[1219, "pypath-a-python-module-for-molecular-signaling-prior-knowledge-processing"]], "Contents:": [[1219, null]], "Reference": [[1219, "reference"]], "Installation": [[1220, "installation"]], "Linux": [[1220, "linux"]], "igraph C library, cairo and pycairo": [[1220, "igraph-c-library-cairo-and-pycairo"]], "Directly from git": [[1220, "directly-from-git"]], "With pip": [[1220, "with-pip"]], "Build source distribution": [[1220, "build-source-distribution"]], "Mac OS X": [[1220, "mac-os-x"]], "Troubleshooting": [[1220, "troubleshooting"]], "Microsoft Windows": [[1220, "microsoft-windows"]], "With Anaconda": [[1220, "with-anaconda"]], "With other Python distributions": [[1220, "with-other-python-distributions"]], "Known issues": [[1220, "known-issues"]], "Release History": [[1221, "release-history"]], "0.5.32": [[1221, "id6"]], "0.6.31": [[1221, "id7"]], "0.7.0": [[1221, "id8"]], "0.7.93": [[1221, "id10"]], "0.7.110": [[1221, "id11"]], "0.8": [[1221, "id12"]], "0.9": [[1221, "id13"]], "0.10.0": [[1221, "id14"]], "Webservice": [[1222, "webservice"]], "Query types": [[1222, "query-types"]], "Interaction datasets": [[1222, "interaction-datasets"]], "Mouse and rat": [[1222, "mouse-and-rat"]], "Examples": [[1222, "examples"]], "Molecular interaction network": [[1222, "molecular-interaction-network"]], "Enzyme-substrate interactions": [[1222, "enzyme-substrate-interactions"]], "Molecular complexes": [[1222, "molecular-complexes"]], "Annotations": [[1222, "annotations"]], "Roles in inter-cellular communication": [[1222, "roles-in-inter-cellular-communication"]], "Exploring possible parameters": [[1222, "exploring-possible-parameters"]], "Can I use OmniPath in R?": [[1222, "can-i-use-omnipath-in-r"]]}, "indexentries": {"module": [[0, "module-pypath"], [1, "module-pypath.core"], [2, "module-pypath.core.annot"], [95, "module-pypath.core.attrs"], [97, "module-pypath.core.common"], [99, "module-pypath.core.complex"], [121, "module-pypath.core.entity"], [125, "module-pypath.core.enz_sub"], [131, "module-pypath.core.evidence"], [134, "module-pypath.core.interaction"], [138, "module-pypath.core.intercell"], [142, "module-pypath.core.intercell_annot"], [144, "module-pypath.core.network"], [150, "module-pypath.data"], [153, "module-pypath.inputs"], [154, "module-pypath.inputs.abs"], [156, "module-pypath.inputs.acsn"], [159, "module-pypath.inputs.adhesome"], [162, "module-pypath.inputs.almen2009"], [164, "module-pypath.inputs.baccin2019"], [167, "module-pypath.inputs.biogps"], [173, "module-pypath.inputs.biogrid"], [176, "module-pypath.inputs.biomart"], [182, "module-pypath.inputs.ca1"], [184, "module-pypath.inputs.cancercellmap"], [186, "module-pypath.inputs.cancerdrugsdb"], [190, "module-pypath.inputs.cancersea"], [192, "module-pypath.inputs.cell"], [194, "module-pypath.inputs.cellcall"], [199, "module-pypath.inputs.cellcellinteractions"], [201, "module-pypath.inputs.cellchatdb"], [207, "module-pypath.inputs.cellinker"], [219, "module-pypath.inputs.cellphonedb"], [226, "module-pypath.inputs.celltalkdb"], [230, "module-pypath.inputs.celltypist"], [232, "module-pypath.inputs.chembl"], [237, "module-pypath.inputs.common"], [244, "module-pypath.inputs.compleat"], [247, "module-pypath.inputs.complexportal"], [249, "module-pypath.inputs.comppi"], [252, "module-pypath.inputs.connectomedb"], [255, "module-pypath.inputs.corum"], [257, "module-pypath.inputs.cosmic"], [259, "module-pypath.inputs.cpad"], [263, "module-pypath.inputs.cpdb"], [266, "module-pypath.inputs.credentials"], [268, "module-pypath.inputs.csa"], [270, "module-pypath.inputs.cspa"], [274, "module-pypath.inputs.cytosig"], [277, "module-pypath.inputs.dbptm"], [281, "module-pypath.inputs.deathdomain"], [284, "module-pypath.inputs.depod"], [287, "module-pypath.inputs.dgidb"], [290, "module-pypath.inputs.dip"], [293, "module-pypath.inputs.disgenet"], [295, "module-pypath.inputs.domino"], [300, "module-pypath.inputs.dorothea"], [311, "module-pypath.inputs.drugbank"], [317, "module-pypath.inputs.drugcentral"], [321, "module-pypath.inputs.ebi"], [323, "module-pypath.inputs.elm"], [328, "module-pypath.inputs.embopress"], [330, "module-pypath.inputs.embrace"], [335, "module-pypath.inputs.encode"], [337, "module-pypath.inputs.ensembl"], [339, "module-pypath.inputs.exocarta"], [342, "module-pypath.inputs.genecards"], [347, "module-pypath.inputs.go"], [368, "module-pypath.inputs.gpcrdb"], [370, "module-pypath.inputs.graphviz"], [372, "module-pypath.inputs.guide2pharma"], [376, "module-pypath.inputs.havugimana"], [379, "module-pypath.inputs.hgnc"], [381, "module-pypath.inputs.hippie"], [383, "module-pypath.inputs.homologene"], [387, "module-pypath.inputs.hpmr"], [393, "module-pypath.inputs.hpo"], [398, "module-pypath.inputs.hprd"], [403, "module-pypath.inputs.htri"], [405, "module-pypath.inputs.humancellmap"], [407, "module-pypath.inputs.humap"], [410, "module-pypath.inputs.huri"], [423, "module-pypath.inputs.i3d"], [425, "module-pypath.inputs.icellnet"], [430, "module-pypath.inputs.ielm"], [433, "module-pypath.inputs.imweb"], [436, "module-pypath.inputs.innatedb"], [438, "module-pypath.inputs.instruct"], [441, "module-pypath.inputs.intact"], [443, "module-pypath.inputs.integrins"], [445, "module-pypath.inputs.interpro"], [450, "module-pypath.inputs.intogen"], [452, "module-pypath.inputs.ipi"], [454, "module-pypath.inputs.iptmnet"], [457, "module-pypath.inputs.italk"], [461, "module-pypath.inputs.kea"], [464, "module-pypath.inputs.kegg"], [474, "module-pypath.inputs.kinasedotcom"], [476, "module-pypath.inputs.kirouac2010"], [478, "module-pypath.inputs.lambert2018"], [481, "module-pypath.inputs.laudanna"], [484, "module-pypath.inputs.li2012"], [489, "module-pypath.inputs.lincs"], [491, "module-pypath.inputs.lmpid"], [495, "module-pypath.inputs.lncdisease"], [497, "module-pypath.inputs.lncrnadb"], [499, "module-pypath.inputs.locate"], [501, "module-pypath.inputs.lrdb"], [505, "module-pypath.inputs.macrophage"], [507, "module-pypath.inputs.main"], [508, "module-pypath.inputs.matrisome"], [510, "module-pypath.inputs.matrixdb"], [516, "module-pypath.inputs.mcam"], [518, "module-pypath.inputs.membranome"], [520, "module-pypath.inputs.mimp"], [524, "module-pypath.inputs.mir2disease"], [526, "module-pypath.inputs.mirbase"], [534, "module-pypath.inputs.mirdeathdb"], [536, "module-pypath.inputs.mirecords"], [538, "module-pypath.inputs.mirtarbase"], [540, "module-pypath.inputs.mitab"], [543, "module-pypath.inputs.mppi"], [545, "module-pypath.inputs.msigdb"], [549, "module-pypath.inputs.ncrdeathdb"], [551, "module-pypath.inputs.negatome"], [553, "module-pypath.inputs.netbiol"], [556, "module-pypath.inputs.netpath"], [560, "module-pypath.inputs.ontology"], [563, "module-pypath.inputs.opm"], [565, "module-pypath.inputs.oreganno"], [568, "module-pypath.inputs.panglaodb"], [571, "module-pypath.inputs.pathwaycommons"], [588, "module-pypath.inputs.pazar"], [590, "module-pypath.inputs.pdb"], [594, "module-pypath.inputs.pdzbase"], [596, "module-pypath.inputs.pepcyber"], [599, "module-pypath.inputs.pfam"], [604, "module-pypath.inputs.phobius"], [606, "module-pypath.inputs.phosphatome"], [608, "module-pypath.inputs.phosphoelm"], [612, "module-pypath.inputs.phosphonetworks"], [615, "module-pypath.inputs.phosphopoint"], [618, "module-pypath.inputs.phosphosite"], [631, "module-pypath.inputs.pisa"], [635, "module-pypath.inputs.pro"], [638, "module-pypath.inputs.progeny"], [641, "module-pypath.inputs.proteinatlas"], [646, "module-pypath.inputs.proteins"], [648, "module-pypath.inputs.protmapper"], [652, "module-pypath.inputs.pubchem"], [654, "module-pypath.inputs.pubmed"], [661, "module-pypath.inputs.ramilowski2015"], [664, "module-pypath.inputs.rdata"], [665, "module-pypath.inputs.reaction"], [685, "module-pypath.inputs.scconnect"], [689, "module-pypath.inputs.science"], [691, "module-pypath.inputs.signalink"], [696, "module-pypath.inputs.signor"], [703, "module-pypath.inputs.spike"], [706, "module-pypath.inputs.stitch"], [709, "module-pypath.inputs.string"], [714, "module-pypath.inputs.surfaceome"], [716, "module-pypath.inputs.switches_elm"], [718, "module-pypath.inputs.talklr"], [722, "module-pypath.inputs.tcdb"], [726, "module-pypath.inputs.tfcensus"], [728, "module-pypath.inputs.threedcomplex"], [734, "module-pypath.inputs.threedid"], [739, "module-pypath.inputs.topdb"], [741, "module-pypath.inputs.transmir"], [743, "module-pypath.inputs.trip"], [750, "module-pypath.inputs.unichem"], [755, "module-pypath.inputs.uniprot"], [786, "module-pypath.inputs.wang"], [791, "module-pypath.inputs.wojtowicz2020"], [794, "module-pypath.inputs.zhong2015"], [796, "module-pypath.internals"], [797, "module-pypath.internals.annot_formats"], [802, "module-pypath.internals.input_formats"], [814, "module-pypath.internals.intera"], [824, "module-pypath.internals.license"], [830, "module-pypath.internals.maps"], [831, "module-pypath.internals.refs"], [834, "module-pypath.internals.resource"], [841, "module-pypath.legacy"], [842, "module-pypath.legacy.db_categories"], [846, "module-pypath.obsolete"], [847, "module-pypath.obsolete.colorgen"], [865, "module-pypath.obsolete.enrich"], [868, "module-pypath.obsolete.gsea"], [871, "module-pypath.obsolete.linkcomm"], [881, "module-pypath.omnipath"], [882, "module-pypath.omnipath.app"], [884, "module-pypath.omnipath.databases"], [887, "module-pypath.omnipath.databases.define"], [893, "module-pypath.omnipath.export"], [896, "module-pypath.omnipath.param"], [899, "module-pypath.omnipath.server"], [900, "module-pypath.omnipath.server.build"], [902, "module-pypath.omnipath.server.generate_about_page"], [907, "module-pypath.resources"], [908, "module-pypath.resources.controller"], [910, "module-pypath.resources.data"], [911, "module-pypath.resources.data_formats"], [922, "module-pypath.resources.descriptions"], [928, "module-pypath.resources.licenses"], [930, "module-pypath.resources.network"], [932, "module-pypath.resources.urls"], [933, "module-pypath.share"], [934, "module-pypath.share.cache"], [937, "module-pypath.share.common"], [1029, "module-pypath.share.constants"], [1030, "module-pypath.share.curl"], [1047, "module-pypath.share.log"], [1050, "module-pypath.share.progress"], [1052, "module-pypath.share.session"], [1058, "module-pypath.share.settings"], [1063, "module-pypath.utils"], [1064, "module-pypath.utils.go"], [1072, "module-pypath.utils.homology"], [1085, "module-pypath.utils.mapping"], [1100, "module-pypath.utils.pdb"], [1105, "module-pypath.utils.proteomicsdb"], [1107, "module-pypath.utils.pyreact"], [1122, "module-pypath.utils.reflists"], [1130, "module-pypath.utils.residues"], [1132, "module-pypath.utils.seq"], [1139, "module-pypath.utils.taxonomy"], [1154, "module-pypath.utils.unichem"], [1156, "module-pypath.utils.uniprot"], [1216, "module-pypath.visual"]], "pypath": [[0, "module-pypath"]], "pypath.core": [[1, "module-pypath.core"]], "pypath.core.annot": [[2, "module-pypath.core.annot"]], "adhesome (class in pypath.core.annot)": [[3, "pypath.core.annot.Adhesome"]], "__init__() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.__init__"]], "add_complexes_by_inference() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.all_complexes"]], "all_entities() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.all_entities"]], "all_mirnas() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.all_mirnas"]], "all_proteins() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.all_proteins"]], "all_refs() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.all_refs"]], "annotate_complex() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.annotate_complex"]], "browse() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.browse"]], "complex_inference() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.complex_inference"]], "coverage() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.coverage"]], "curation_effort() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.curation_effort"]], "get_names() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.get_names"]], "get_reference_set() (pypath.core.annot.adhesome static method)": [[3, "pypath.core.annot.Adhesome.get_reference_set"]], "get_subset() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.get_subset"]], "get_subset_bool_array() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.get_subset_bool_array"]], "get_values() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.get_values"]], "labels() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.labels"]], "load() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.load"]], "load_data() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.load_data"]], "load_proteins() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.load_proteins"]], "make_df() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.make_df"]], "numof_entities() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.numof_entities"]], "numof_records() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.numof_records"]], "numof_references() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.numof_references"]], "process() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.process"]], "reload() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.reload"]], "select() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.select"]], "set_method() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.set_method"]], "set_reference_set() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.set_reference_set"]], "show() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.show"]], "subset_intersection() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.subset_intersection"]], "to_array() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.to_array"]], "to_bool_array() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.to_bool_array"]], "to_set() (pypath.core.annot.adhesome method)": [[3, "pypath.core.annot.Adhesome.to_set"]], "almen2009 (class in pypath.core.annot)": [[4, "pypath.core.annot.Almen2009"]], "__init__() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.__init__"]], "add_complexes_by_inference() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.all_complexes"]], "all_entities() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.all_entities"]], "all_mirnas() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.all_mirnas"]], "all_proteins() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.all_proteins"]], "all_refs() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.all_refs"]], "annotate_complex() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.annotate_complex"]], "browse() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.browse"]], "complex_inference() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.complex_inference"]], "coverage() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.coverage"]], "curation_effort() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.curation_effort"]], "get_names() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.get_names"]], "get_reference_set() (pypath.core.annot.almen2009 static method)": [[4, "pypath.core.annot.Almen2009.get_reference_set"]], "get_subset() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.get_subset"]], "get_subset_bool_array() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.get_subset_bool_array"]], "get_values() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.get_values"]], "labels() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.labels"]], "load() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.load"]], "load_data() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.load_data"]], "load_proteins() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.load_proteins"]], "make_df() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.make_df"]], "numof_entities() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.numof_entities"]], "numof_records() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.numof_records"]], "numof_references() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.numof_references"]], "process() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.process"]], "reload() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.reload"]], "select() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.select"]], "set_method() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.set_method"]], "set_reference_set() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.set_reference_set"]], "show() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.show"]], "subset_intersection() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.subset_intersection"]], "to_array() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.to_array"]], "to_bool_array() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.to_bool_array"]], "to_set() (pypath.core.annot.almen2009 method)": [[4, "pypath.core.annot.Almen2009.to_set"]], "annotationbase (class in pypath.core.annot)": [[5, "pypath.core.annot.AnnotationBase"]], "__init__() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.__init__"]], "add_complexes_by_inference() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.all_complexes"]], "all_entities() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.all_entities"]], "all_mirnas() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.all_mirnas"]], "all_proteins() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.all_proteins"]], "all_refs() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.all_refs"]], "annotate_complex() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.annotate_complex"]], "browse() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.browse"]], "complex_inference() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.complex_inference"]], "coverage() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.coverage"]], "curation_effort() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.curation_effort"]], "get_names() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.get_names"]], "get_reference_set() (pypath.core.annot.annotationbase static method)": [[5, "pypath.core.annot.AnnotationBase.get_reference_set"]], "get_subset() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.get_subset"]], "get_subset_bool_array() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.get_subset_bool_array"]], "get_values() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.get_values"]], "labels() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.labels"]], "load() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.load"]], "load_data() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.load_data"]], "load_proteins() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.load_proteins"]], "make_df() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.make_df"]], "numof_entities() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.numof_entities"]], "numof_records() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.numof_records"]], "numof_references() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.numof_references"]], "process() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.process"]], "reload() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.reload"]], "select() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.select"]], "set_method() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.set_method"]], "set_reference_set() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.set_reference_set"]], "show() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.show"]], "subset_intersection() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.subset_intersection"]], "to_array() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.to_array"]], "to_bool_array() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.to_bool_array"]], "to_set() (pypath.core.annot.annotationbase method)": [[5, "pypath.core.annot.AnnotationBase.to_set"]], "annotationtable (class in pypath.core.annot)": [[6, "pypath.core.annot.AnnotationTable"]], "__init__() (pypath.core.annot.annotationtable method)": [[6, "pypath.core.annot.AnnotationTable.__init__"]], "all_annotations() (pypath.core.annot.annotationtable method)": [[6, "pypath.core.annot.AnnotationTable.all_annotations"]], "all_annotations_str() (pypath.core.annot.annotationtable method)": [[6, "pypath.core.annot.AnnotationTable.all_annotations_str"]], "reload() (pypath.core.annot.annotationtable method)": [[6, "pypath.core.annot.AnnotationTable.reload"]], "search() (pypath.core.annot.annotationtable method)": [[6, "pypath.core.annot.AnnotationTable.search"]], "baccin2019 (class in pypath.core.annot)": [[7, "pypath.core.annot.Baccin2019"]], "__init__() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.__init__"]], "add_complexes_by_inference() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.all_complexes"]], "all_entities() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.all_entities"]], "all_mirnas() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.all_mirnas"]], "all_proteins() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.all_proteins"]], "all_refs() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.all_refs"]], "annotate_complex() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.annotate_complex"]], "browse() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.browse"]], "complex_inference() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.complex_inference"]], "coverage() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.coverage"]], "curation_effort() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.curation_effort"]], "get_names() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.get_names"]], "get_reference_set() (pypath.core.annot.baccin2019 static method)": [[7, "pypath.core.annot.Baccin2019.get_reference_set"]], "get_subset() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.get_subset"]], "get_subset_bool_array() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.get_subset_bool_array"]], "get_values() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.get_values"]], "labels() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.labels"]], "load() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.load"]], "load_data() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.load_data"]], "load_proteins() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.load_proteins"]], "make_df() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.make_df"]], "numof_entities() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.numof_entities"]], "numof_records() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.numof_records"]], "numof_references() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.numof_references"]], "process() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.process"]], "reload() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.reload"]], "select() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.select"]], "set_method() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.set_method"]], "set_reference_set() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.set_reference_set"]], "show() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.show"]], "subset_intersection() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.subset_intersection"]], "to_array() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.to_array"]], "to_bool_array() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.to_bool_array"]], "to_set() (pypath.core.annot.baccin2019 method)": [[7, "pypath.core.annot.Baccin2019.to_set"]], "biogps (class in pypath.core.annot)": [[8, "pypath.core.annot.Biogps"]], "__init__() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.__init__"]], "add_complexes_by_inference() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.all_complexes"]], "all_entities() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.all_entities"]], "all_mirnas() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.all_mirnas"]], "all_proteins() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.all_proteins"]], "all_refs() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.all_refs"]], "annotate_complex() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.annotate_complex"]], "browse() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.browse"]], "complex_inference() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.complex_inference"]], "coverage() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.coverage"]], "curation_effort() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.curation_effort"]], "get_names() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.get_names"]], "get_reference_set() (pypath.core.annot.biogps static method)": [[8, "pypath.core.annot.Biogps.get_reference_set"]], "get_subset() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.get_subset"]], "get_subset_bool_array() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.get_subset_bool_array"]], "get_values() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.get_values"]], "labels() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.labels"]], "load() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.load"]], "load_data() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.load_data"]], "load_proteins() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.load_proteins"]], "make_df() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.make_df"]], "numof_entities() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.numof_entities"]], "numof_records() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.numof_records"]], "numof_references() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.numof_references"]], "process() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.process"]], "reload() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.reload"]], "select() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.select"]], "set_method() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.set_method"]], "set_reference_set() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.set_reference_set"]], "show() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.show"]], "subset_intersection() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.subset_intersection"]], "to_array() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.to_array"]], "to_bool_array() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.to_bool_array"]], "to_set() (pypath.core.annot.biogps method)": [[8, "pypath.core.annot.Biogps.to_set"]], "cancergenecensus (class in pypath.core.annot)": [[9, "pypath.core.annot.CancerGeneCensus"]], "__init__() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.__init__"]], "add_complexes_by_inference() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.all_complexes"]], "all_entities() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.all_entities"]], "all_mirnas() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.all_mirnas"]], "all_proteins() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.all_proteins"]], "all_refs() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.all_refs"]], "annotate_complex() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.annotate_complex"]], "browse() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.browse"]], "complex_inference() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.complex_inference"]], "coverage() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.coverage"]], "curation_effort() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.curation_effort"]], "get_names() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.get_names"]], "get_reference_set() (pypath.core.annot.cancergenecensus static method)": [[9, "pypath.core.annot.CancerGeneCensus.get_reference_set"]], "get_subset() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.get_subset"]], "get_subset_bool_array() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.get_subset_bool_array"]], "get_values() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.get_values"]], "labels() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.labels"]], "load() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.load"]], "load_data() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.load_data"]], "load_proteins() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.load_proteins"]], "make_df() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.make_df"]], "numof_entities() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.numof_entities"]], "numof_records() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.numof_records"]], "numof_references() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.numof_references"]], "process() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.process"]], "reload() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.reload"]], "select() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.select"]], "set_method() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.set_method"]], "set_reference_set() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.set_reference_set"]], "show() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.show"]], "subset_intersection() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.subset_intersection"]], "to_array() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.to_array"]], "to_bool_array() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.to_bool_array"]], "to_set() (pypath.core.annot.cancergenecensus method)": [[9, "pypath.core.annot.CancerGeneCensus.to_set"]], "cancerdrugsdb (class in pypath.core.annot)": [[10, "pypath.core.annot.Cancerdrugsdb"]], "__init__() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.__init__"]], "add_complexes_by_inference() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.all_complexes"]], "all_entities() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.all_entities"]], "all_mirnas() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.all_mirnas"]], "all_proteins() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.all_proteins"]], "all_refs() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.all_refs"]], "annotate_complex() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.annotate_complex"]], "browse() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.browse"]], "complex_inference() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.complex_inference"]], "coverage() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.coverage"]], "curation_effort() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.curation_effort"]], "get_names() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.get_names"]], "get_reference_set() (pypath.core.annot.cancerdrugsdb static method)": [[10, "pypath.core.annot.Cancerdrugsdb.get_reference_set"]], "get_subset() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.get_subset"]], "get_subset_bool_array() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.get_subset_bool_array"]], "get_values() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.get_values"]], "labels() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.labels"]], "load() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.load"]], "load_data() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.load_data"]], "load_proteins() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.load_proteins"]], "make_df() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.make_df"]], "numof_entities() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.numof_entities"]], "numof_records() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.numof_records"]], "numof_references() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.numof_references"]], "process() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.process"]], "reload() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.reload"]], "select() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.select"]], "set_method() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.set_method"]], "set_reference_set() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.set_reference_set"]], "show() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.show"]], "subset_intersection() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.subset_intersection"]], "to_array() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.to_array"]], "to_bool_array() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.to_bool_array"]], "to_set() (pypath.core.annot.cancerdrugsdb method)": [[10, "pypath.core.annot.Cancerdrugsdb.to_set"]], "cancersea (class in pypath.core.annot)": [[11, "pypath.core.annot.Cancersea"]], "__init__() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.__init__"]], "add_complexes_by_inference() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.all_complexes"]], "all_entities() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.all_entities"]], "all_mirnas() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.all_mirnas"]], "all_proteins() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.all_proteins"]], "all_refs() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.all_refs"]], "annotate_complex() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.annotate_complex"]], "browse() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.browse"]], "complex_inference() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.complex_inference"]], "coverage() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.coverage"]], "curation_effort() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.curation_effort"]], "get_names() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.get_names"]], "get_reference_set() (pypath.core.annot.cancersea static method)": [[11, "pypath.core.annot.Cancersea.get_reference_set"]], "get_subset() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.get_subset"]], "get_subset_bool_array() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.get_subset_bool_array"]], "get_values() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.get_values"]], "labels() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.labels"]], "load() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.load"]], "load_data() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.load_data"]], "load_proteins() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.load_proteins"]], "make_df() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.make_df"]], "numof_entities() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.numof_entities"]], "numof_records() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.numof_records"]], "numof_references() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.numof_references"]], "process() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.process"]], "reload() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.reload"]], "select() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.select"]], "set_method() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.set_method"]], "set_reference_set() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.set_reference_set"]], "show() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.show"]], "subset_intersection() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.subset_intersection"]], "to_array() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.to_array"]], "to_bool_array() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.to_bool_array"]], "to_set() (pypath.core.annot.cancersea method)": [[11, "pypath.core.annot.Cancersea.to_set"]], "cellphonedb (class in pypath.core.annot)": [[12, "pypath.core.annot.CellPhoneDB"]], "__init__() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.__init__"]], "add_complexes_by_inference() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.all_complexes"]], "all_entities() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.all_entities"]], "all_mirnas() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.all_mirnas"]], "all_proteins() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.all_proteins"]], "all_refs() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.all_refs"]], "annotate_complex() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.annotate_complex"]], "browse() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.browse"]], "complex_inference() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.complex_inference"]], "coverage() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.coverage"]], "curation_effort() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.curation_effort"]], "get_names() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.get_names"]], "get_reference_set() (pypath.core.annot.cellphonedb static method)": [[12, "pypath.core.annot.CellPhoneDB.get_reference_set"]], "get_subset() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.get_subset"]], "get_subset_bool_array() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.get_subset_bool_array"]], "get_values() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.get_values"]], "labels() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.labels"]], "load() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.load"]], "load_data() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.load_data"]], "load_proteins() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.load_proteins"]], "make_df() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.make_df"]], "numof_entities() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.numof_entities"]], "numof_records() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.numof_records"]], "numof_references() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.numof_references"]], "process() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.process"]], "reload() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.reload"]], "select() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.select"]], "set_method() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.set_method"]], "set_reference_set() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.set_reference_set"]], "show() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.show"]], "subset_intersection() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.subset_intersection"]], "to_array() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.to_array"]], "to_bool_array() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.to_bool_array"]], "to_set() (pypath.core.annot.cellphonedb method)": [[12, "pypath.core.annot.CellPhoneDB.to_set"]], "cellphonedbcomplex (class in pypath.core.annot)": [[13, "pypath.core.annot.CellPhoneDBComplex"]], "__init__() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.__init__"]], "add_complexes_by_inference() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.all_complexes"]], "all_entities() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.all_entities"]], "all_mirnas() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.all_mirnas"]], "all_proteins() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.all_proteins"]], "all_refs() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.all_refs"]], "annotate_complex() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.annotate_complex"]], "browse() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.browse"]], "complex_inference() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.complex_inference"]], "coverage() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.coverage"]], "curation_effort() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.curation_effort"]], "get_names() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.get_names"]], "get_reference_set() (pypath.core.annot.cellphonedbcomplex static method)": [[13, "pypath.core.annot.CellPhoneDBComplex.get_reference_set"]], "get_subset() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.get_subset"]], "get_subset_bool_array() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.get_subset_bool_array"]], "get_values() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.get_values"]], "labels() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.labels"]], "load() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.load"]], "load_data() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.load_data"]], "load_proteins() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.load_proteins"]], "make_df() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.make_df"]], "numof_entities() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.numof_entities"]], "numof_records() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.numof_records"]], "numof_references() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.numof_references"]], "process() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.process"]], "reload() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.reload"]], "select() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.select"]], "set_method() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.set_method"]], "set_reference_set() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.set_reference_set"]], "show() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.show"]], "subset_intersection() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.subset_intersection"]], "to_array() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.to_array"]], "to_bool_array() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.to_bool_array"]], "to_set() (pypath.core.annot.cellphonedbcomplex method)": [[13, "pypath.core.annot.CellPhoneDBComplex.to_set"]], "cellsurfaceproteinatlas (class in pypath.core.annot)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas"]], "__init__() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.__init__"]], "add_complexes_by_inference() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.all_complexes"]], "all_entities() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.all_entities"]], "all_mirnas() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.all_mirnas"]], "all_proteins() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.all_proteins"]], "all_refs() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.all_refs"]], "annotate_complex() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.annotate_complex"]], "browse() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.browse"]], "complex_inference() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.complex_inference"]], "coverage() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.coverage"]], "curation_effort() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.curation_effort"]], "get_names() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.get_names"]], "get_reference_set() (pypath.core.annot.cellsurfaceproteinatlas static method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.get_reference_set"]], "get_subset() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.get_subset"]], "get_subset_bool_array() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.get_subset_bool_array"]], "get_values() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.get_values"]], "labels() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.labels"]], "load() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.load"]], "load_data() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.load_data"]], "load_proteins() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.load_proteins"]], "make_df() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.make_df"]], "numof_entities() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.numof_entities"]], "numof_records() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.numof_records"]], "numof_references() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.numof_references"]], "process() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.process"]], "reload() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.reload"]], "select() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.select"]], "set_method() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.set_method"]], "set_reference_set() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.set_reference_set"]], "show() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.show"]], "subset_intersection() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.subset_intersection"]], "to_array() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.to_array"]], "to_bool_array() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.to_bool_array"]], "to_set() (pypath.core.annot.cellsurfaceproteinatlas method)": [[14, "pypath.core.annot.CellSurfaceProteinAtlas.to_set"]], "cellsurfaceproteinatlascelltype (class in pypath.core.annot)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType"]], "__init__() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.__init__"]], "add_complexes_by_inference() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.all_complexes"]], "all_entities() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.all_entities"]], "all_mirnas() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.all_mirnas"]], "all_proteins() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.all_proteins"]], "all_refs() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.all_refs"]], "annotate_complex() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.annotate_complex"]], "browse() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.browse"]], "complex_inference() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.complex_inference"]], "coverage() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.coverage"]], "curation_effort() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.curation_effort"]], "get_names() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.get_names"]], "get_reference_set() (pypath.core.annot.cellsurfaceproteinatlascelltype static method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.get_reference_set"]], "get_subset() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.get_subset"]], "get_subset_bool_array() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.get_subset_bool_array"]], "get_values() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.get_values"]], "labels() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.labels"]], "load() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.load"]], "load_data() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.load_data"]], "load_proteins() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.load_proteins"]], "make_df() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.make_df"]], "numof_entities() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.numof_entities"]], "numof_records() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.numof_records"]], "numof_references() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.numof_references"]], "process() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.process"]], "reload() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.reload"]], "select() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.select"]], "set_method() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.set_method"]], "set_reference_set() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.set_reference_set"]], "show() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.show"]], "subset_intersection() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.subset_intersection"]], "to_array() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.to_array"]], "to_bool_array() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.to_bool_array"]], "to_set() (pypath.core.annot.cellsurfaceproteinatlascelltype method)": [[15, "pypath.core.annot.CellSurfaceProteinAtlasCellType.to_set"]], "cellcall (class in pypath.core.annot)": [[16, "pypath.core.annot.Cellcall"]], "__init__() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.__init__"]], "add_complexes_by_inference() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.all_complexes"]], "all_entities() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.all_entities"]], "all_mirnas() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.all_mirnas"]], "all_proteins() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.all_proteins"]], "all_refs() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.all_refs"]], "annotate_complex() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.annotate_complex"]], "browse() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.browse"]], "complex_inference() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.complex_inference"]], "coverage() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.coverage"]], "curation_effort() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.curation_effort"]], "get_names() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.get_names"]], "get_reference_set() (pypath.core.annot.cellcall static method)": [[16, "pypath.core.annot.Cellcall.get_reference_set"]], "get_subset() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.get_subset"]], "get_subset_bool_array() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.get_subset_bool_array"]], "get_values() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.get_values"]], "labels() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.labels"]], "load() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.load"]], "load_data() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.load_data"]], "load_proteins() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.load_proteins"]], "make_df() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.make_df"]], "numof_entities() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.numof_entities"]], "numof_records() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.numof_records"]], "numof_references() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.numof_references"]], "process() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.process"]], "reload() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.reload"]], "select() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.select"]], "set_method() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.set_method"]], "set_reference_set() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.set_reference_set"]], "show() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.show"]], "subset_intersection() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.subset_intersection"]], "to_array() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.to_array"]], "to_bool_array() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.to_bool_array"]], "to_set() (pypath.core.annot.cellcall method)": [[16, "pypath.core.annot.Cellcall.to_set"]], "cellcellinteractions (class in pypath.core.annot)": [[17, "pypath.core.annot.Cellcellinteractions"]], "__init__() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.__init__"]], "add_complexes_by_inference() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.all_complexes"]], "all_entities() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.all_entities"]], "all_mirnas() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.all_mirnas"]], "all_proteins() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.all_proteins"]], "all_refs() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.all_refs"]], "annotate_complex() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.annotate_complex"]], "browse() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.browse"]], "complex_inference() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.complex_inference"]], "coverage() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.coverage"]], "curation_effort() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.curation_effort"]], "get_names() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.get_names"]], "get_reference_set() (pypath.core.annot.cellcellinteractions static method)": [[17, "pypath.core.annot.Cellcellinteractions.get_reference_set"]], "get_subset() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.get_subset"]], "get_subset_bool_array() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.get_subset_bool_array"]], "get_values() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.get_values"]], "labels() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.labels"]], "load() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.load"]], "load_data() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.load_data"]], "load_proteins() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.load_proteins"]], "make_df() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.make_df"]], "numof_entities() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.numof_entities"]], "numof_records() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.numof_records"]], "numof_references() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.numof_references"]], "process() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.process"]], "reload() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.reload"]], "select() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.select"]], "set_method() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.set_method"]], "set_reference_set() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.set_reference_set"]], "show() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.show"]], "subset_intersection() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.subset_intersection"]], "to_array() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.to_array"]], "to_bool_array() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.to_bool_array"]], "to_set() (pypath.core.annot.cellcellinteractions method)": [[17, "pypath.core.annot.Cellcellinteractions.to_set"]], "cellchatdb (class in pypath.core.annot)": [[18, "pypath.core.annot.Cellchatdb"]], "__init__() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.__init__"]], "add_complexes_by_inference() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.all_complexes"]], "all_entities() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.all_entities"]], "all_mirnas() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.all_mirnas"]], "all_proteins() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.all_proteins"]], "all_refs() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.all_refs"]], "annotate_complex() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.annotate_complex"]], "browse() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.browse"]], "complex_inference() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.complex_inference"]], "coverage() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.coverage"]], "curation_effort() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.curation_effort"]], "get_names() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.get_names"]], "get_reference_set() (pypath.core.annot.cellchatdb static method)": [[18, "pypath.core.annot.Cellchatdb.get_reference_set"]], "get_subset() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.get_subset"]], "get_subset_bool_array() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.get_subset_bool_array"]], "get_values() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.get_values"]], "labels() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.labels"]], "load() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.load"]], "load_data() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.load_data"]], "load_proteins() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.load_proteins"]], "make_df() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.make_df"]], "numof_entities() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.numof_entities"]], "numof_records() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.numof_records"]], "numof_references() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.numof_references"]], "process() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.process"]], "reload() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.reload"]], "select() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.select"]], "set_method() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.set_method"]], "set_reference_set() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.set_reference_set"]], "show() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.show"]], "subset_intersection() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.subset_intersection"]], "to_array() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.to_array"]], "to_bool_array() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.to_bool_array"]], "to_set() (pypath.core.annot.cellchatdb method)": [[18, "pypath.core.annot.Cellchatdb.to_set"]], "cellchatdbcomplex (class in pypath.core.annot)": [[19, "pypath.core.annot.CellchatdbComplex"]], "__init__() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.__init__"]], "add_complexes_by_inference() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.all_complexes"]], "all_entities() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.all_entities"]], "all_mirnas() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.all_mirnas"]], "all_proteins() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.all_proteins"]], "all_refs() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.all_refs"]], "annotate_complex() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.annotate_complex"]], "browse() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.browse"]], "complex_inference() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.complex_inference"]], "coverage() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.coverage"]], "curation_effort() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.curation_effort"]], "get_names() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.get_names"]], "get_reference_set() (pypath.core.annot.cellchatdbcomplex static method)": [[19, "pypath.core.annot.CellchatdbComplex.get_reference_set"]], "get_subset() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.get_subset"]], "get_subset_bool_array() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.get_subset_bool_array"]], "get_values() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.get_values"]], "labels() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.labels"]], "load() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.load"]], "load_data() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.load_data"]], "load_proteins() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.load_proteins"]], "make_df() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.make_df"]], "numof_entities() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.numof_entities"]], "numof_records() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.numof_records"]], "numof_references() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.numof_references"]], "process() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.process"]], "reload() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.reload"]], "select() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.select"]], "set_method() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.set_method"]], "set_reference_set() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.set_reference_set"]], "show() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.show"]], "subset_intersection() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.subset_intersection"]], "to_array() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.to_array"]], "to_bool_array() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.to_bool_array"]], "to_set() (pypath.core.annot.cellchatdbcomplex method)": [[19, "pypath.core.annot.CellchatdbComplex.to_set"]], "cellinker (class in pypath.core.annot)": [[20, "pypath.core.annot.Cellinker"]], "__init__() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.__init__"]], "add_complexes_by_inference() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.all_complexes"]], "all_entities() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.all_entities"]], "all_mirnas() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.all_mirnas"]], "all_proteins() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.all_proteins"]], "all_refs() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.all_refs"]], "annotate_complex() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.annotate_complex"]], "browse() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.browse"]], "complex_inference() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.complex_inference"]], "coverage() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.coverage"]], "curation_effort() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.curation_effort"]], "get_names() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.get_names"]], "get_reference_set() (pypath.core.annot.cellinker static method)": [[20, "pypath.core.annot.Cellinker.get_reference_set"]], "get_subset() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.get_subset"]], "get_subset_bool_array() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.get_subset_bool_array"]], "get_values() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.get_values"]], "labels() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.labels"]], "load() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.load"]], "load_data() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.load_data"]], "load_proteins() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.load_proteins"]], "make_df() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.make_df"]], "numof_entities() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.numof_entities"]], "numof_records() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.numof_records"]], "numof_references() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.numof_references"]], "process() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.process"]], "reload() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.reload"]], "select() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.select"]], "set_method() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.set_method"]], "set_reference_set() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.set_reference_set"]], "show() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.show"]], "subset_intersection() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.subset_intersection"]], "to_array() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.to_array"]], "to_bool_array() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.to_bool_array"]], "to_set() (pypath.core.annot.cellinker method)": [[20, "pypath.core.annot.Cellinker.to_set"]], "cellinkercomplex (class in pypath.core.annot)": [[21, "pypath.core.annot.CellinkerComplex"]], "__init__() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.__init__"]], "add_complexes_by_inference() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.all_complexes"]], "all_entities() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.all_entities"]], "all_mirnas() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.all_mirnas"]], "all_proteins() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.all_proteins"]], "all_refs() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.all_refs"]], "annotate_complex() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.annotate_complex"]], "browse() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.browse"]], "complex_inference() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.complex_inference"]], "coverage() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.coverage"]], "curation_effort() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.curation_effort"]], "get_names() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.get_names"]], "get_reference_set() (pypath.core.annot.cellinkercomplex static method)": [[21, "pypath.core.annot.CellinkerComplex.get_reference_set"]], "get_subset() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.get_subset"]], "get_subset_bool_array() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.get_subset_bool_array"]], "get_values() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.get_values"]], "labels() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.labels"]], "load() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.load"]], "load_data() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.load_data"]], "load_proteins() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.load_proteins"]], "make_df() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.make_df"]], "numof_entities() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.numof_entities"]], "numof_records() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.numof_records"]], "numof_references() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.numof_references"]], "process() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.process"]], "reload() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.reload"]], "select() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.select"]], "set_method() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.set_method"]], "set_reference_set() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.set_reference_set"]], "show() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.show"]], "subset_intersection() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.subset_intersection"]], "to_array() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.to_array"]], "to_bool_array() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.to_bool_array"]], "to_set() (pypath.core.annot.cellinkercomplex method)": [[21, "pypath.core.annot.CellinkerComplex.to_set"]], "celltalkdb (class in pypath.core.annot)": [[22, "pypath.core.annot.Celltalkdb"]], "__init__() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.__init__"]], "add_complexes_by_inference() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.all_complexes"]], "all_entities() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.all_entities"]], "all_mirnas() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.all_mirnas"]], "all_proteins() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.all_proteins"]], "all_refs() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.all_refs"]], "annotate_complex() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.annotate_complex"]], "browse() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.browse"]], "complex_inference() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.complex_inference"]], "coverage() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.coverage"]], "curation_effort() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.curation_effort"]], "get_names() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.get_names"]], "get_reference_set() (pypath.core.annot.celltalkdb static method)": [[22, "pypath.core.annot.Celltalkdb.get_reference_set"]], "get_subset() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.get_subset"]], "get_subset_bool_array() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.get_subset_bool_array"]], "get_values() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.get_values"]], "labels() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.labels"]], "load() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.load"]], "load_data() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.load_data"]], "load_proteins() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.load_proteins"]], "make_df() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.make_df"]], "numof_entities() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.numof_entities"]], "numof_records() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.numof_records"]], "numof_references() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.numof_references"]], "process() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.process"]], "reload() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.reload"]], "select() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.select"]], "set_method() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.set_method"]], "set_reference_set() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.set_reference_set"]], "show() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.show"]], "subset_intersection() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.subset_intersection"]], "to_array() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.to_array"]], "to_bool_array() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.to_bool_array"]], "to_set() (pypath.core.annot.celltalkdb method)": [[22, "pypath.core.annot.Celltalkdb.to_set"]], "celltypist (class in pypath.core.annot)": [[23, "pypath.core.annot.Celltypist"]], "__init__() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.__init__"]], "add_complexes_by_inference() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.all_complexes"]], "all_entities() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.all_entities"]], "all_mirnas() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.all_mirnas"]], "all_proteins() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.all_proteins"]], "all_refs() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.all_refs"]], "annotate_complex() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.annotate_complex"]], "browse() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.browse"]], "complex_inference() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.complex_inference"]], "coverage() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.coverage"]], "curation_effort() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.curation_effort"]], "get_names() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.get_names"]], "get_reference_set() (pypath.core.annot.celltypist static method)": [[23, "pypath.core.annot.Celltypist.get_reference_set"]], "get_subset() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.get_subset"]], "get_subset_bool_array() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.get_subset_bool_array"]], "get_values() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.get_values"]], "labels() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.labels"]], "load() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.load"]], "load_data() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.load_data"]], "load_proteins() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.load_proteins"]], "make_df() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.make_df"]], "numof_entities() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.numof_entities"]], "numof_records() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.numof_records"]], "numof_references() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.numof_references"]], "process() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.process"]], "reload() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.reload"]], "select() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.select"]], "set_method() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.set_method"]], "set_reference_set() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.set_reference_set"]], "show() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.show"]], "subset_intersection() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.subset_intersection"]], "to_array() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.to_array"]], "to_bool_array() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.to_bool_array"]], "to_set() (pypath.core.annot.celltypist method)": [[23, "pypath.core.annot.Celltypist.to_set"]], "comppi (class in pypath.core.annot)": [[24, "pypath.core.annot.Comppi"]], "__init__() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.__init__"]], "add_complexes_by_inference() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.all_complexes"]], "all_entities() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.all_entities"]], "all_mirnas() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.all_mirnas"]], "all_proteins() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.all_proteins"]], "all_refs() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.all_refs"]], "annotate_complex() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.annotate_complex"]], "browse() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.browse"]], "complex_inference() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.complex_inference"]], "coverage() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.coverage"]], "curation_effort() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.curation_effort"]], "get_names() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.get_names"]], "get_reference_set() (pypath.core.annot.comppi static method)": [[24, "pypath.core.annot.Comppi.get_reference_set"]], "get_subset() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.get_subset"]], "get_subset_bool_array() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.get_subset_bool_array"]], "get_values() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.get_values"]], "labels() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.labels"]], "load() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.load"]], "load_data() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.load_data"]], "load_proteins() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.load_proteins"]], "make_df() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.make_df"]], "numof_entities() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.numof_entities"]], "numof_records() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.numof_records"]], "numof_references() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.numof_references"]], "process() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.process"]], "reload() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.reload"]], "select() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.select"]], "set_method() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.set_method"]], "set_reference_set() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.set_reference_set"]], "show() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.show"]], "subset_intersection() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.subset_intersection"]], "to_array() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.to_array"]], "to_bool_array() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.to_bool_array"]], "to_set() (pypath.core.annot.comppi method)": [[24, "pypath.core.annot.Comppi.to_set"]], "connectomedb (class in pypath.core.annot)": [[25, "pypath.core.annot.Connectomedb"]], "__init__() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.__init__"]], "add_complexes_by_inference() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.all_complexes"]], "all_entities() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.all_entities"]], "all_mirnas() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.all_mirnas"]], "all_proteins() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.all_proteins"]], "all_refs() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.all_refs"]], "annotate_complex() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.annotate_complex"]], "browse() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.browse"]], "complex_inference() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.complex_inference"]], "coverage() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.coverage"]], "curation_effort() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.curation_effort"]], "get_names() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.get_names"]], "get_reference_set() (pypath.core.annot.connectomedb static method)": [[25, "pypath.core.annot.Connectomedb.get_reference_set"]], "get_subset() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.get_subset"]], "get_subset_bool_array() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.get_subset_bool_array"]], "get_values() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.get_values"]], "labels() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.labels"]], "load() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.load"]], "load_data() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.load_data"]], "load_proteins() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.load_proteins"]], "make_df() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.make_df"]], "numof_entities() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.numof_entities"]], "numof_records() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.numof_records"]], "numof_references() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.numof_references"]], "process() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.process"]], "reload() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.reload"]], "select() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.select"]], "set_method() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.set_method"]], "set_reference_set() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.set_reference_set"]], "show() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.show"]], "subset_intersection() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.subset_intersection"]], "to_array() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.to_array"]], "to_bool_array() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.to_bool_array"]], "to_set() (pypath.core.annot.connectomedb method)": [[25, "pypath.core.annot.Connectomedb.to_set"]], "corum (class in pypath.core.annot)": [[26, "pypath.core.annot.Corum"]], "__init__() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.__init__"]], "add_complexes_by_inference() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.all_complexes"]], "all_entities() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.all_entities"]], "all_mirnas() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.all_mirnas"]], "all_proteins() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.all_proteins"]], "all_refs() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.all_refs"]], "annotate_complex() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.annotate_complex"]], "browse() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.browse"]], "complex_inference() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.complex_inference"]], "coverage() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.coverage"]], "curation_effort() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.curation_effort"]], "get_names() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.get_names"]], "get_reference_set() (pypath.core.annot.corum static method)": [[26, "pypath.core.annot.Corum.get_reference_set"]], "get_subset() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.get_subset"]], "get_subset_bool_array() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.get_subset_bool_array"]], "get_values() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.get_values"]], "labels() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.labels"]], "load() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.load"]], "load_data() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.load_data"]], "load_proteins() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.load_proteins"]], "make_df() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.make_df"]], "numof_entities() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.numof_entities"]], "numof_records() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.numof_records"]], "numof_references() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.numof_references"]], "process() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.process"]], "reload() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.reload"]], "select() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.select"]], "set_method() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.set_method"]], "set_reference_set() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.set_reference_set"]], "show() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.show"]], "subset_intersection() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.subset_intersection"]], "to_array() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.to_array"]], "to_bool_array() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.to_bool_array"]], "to_set() (pypath.core.annot.corum method)": [[26, "pypath.core.annot.Corum.to_set"]], "corumfuncat (class in pypath.core.annot)": [[27, "pypath.core.annot.CorumFuncat"]], "__init__() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.__init__"]], "add_complexes_by_inference() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.all_complexes"]], "all_entities() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.all_entities"]], "all_mirnas() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.all_mirnas"]], "all_proteins() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.all_proteins"]], "all_refs() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.all_refs"]], "annotate_complex() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.annotate_complex"]], "browse() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.browse"]], "complex_inference() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.complex_inference"]], "coverage() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.coverage"]], "curation_effort() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.curation_effort"]], "get_names() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.get_names"]], "get_reference_set() (pypath.core.annot.corumfuncat static method)": [[27, "pypath.core.annot.CorumFuncat.get_reference_set"]], "get_subset() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.get_subset"]], "get_subset_bool_array() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.get_subset_bool_array"]], "get_values() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.get_values"]], "labels() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.labels"]], "load() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.load"]], "load_data() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.load_data"]], "load_proteins() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.load_proteins"]], "make_df() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.make_df"]], "numof_entities() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.numof_entities"]], "numof_records() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.numof_records"]], "numof_references() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.numof_references"]], "process() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.process"]], "reload() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.reload"]], "select() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.select"]], "set_method() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.set_method"]], "set_reference_set() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.set_reference_set"]], "show() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.show"]], "subset_intersection() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.subset_intersection"]], "to_array() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.to_array"]], "to_bool_array() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.to_bool_array"]], "to_set() (pypath.core.annot.corumfuncat method)": [[27, "pypath.core.annot.CorumFuncat.to_set"]], "corumgo (class in pypath.core.annot)": [[28, "pypath.core.annot.CorumGO"]], "__init__() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.__init__"]], "add_complexes_by_inference() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.all_complexes"]], "all_entities() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.all_entities"]], "all_mirnas() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.all_mirnas"]], "all_proteins() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.all_proteins"]], "all_refs() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.all_refs"]], "annotate_complex() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.annotate_complex"]], "browse() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.browse"]], "complex_inference() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.complex_inference"]], "coverage() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.coverage"]], "curation_effort() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.curation_effort"]], "get_names() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.get_names"]], "get_reference_set() (pypath.core.annot.corumgo static method)": [[28, "pypath.core.annot.CorumGO.get_reference_set"]], "get_subset() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.get_subset"]], "get_subset_bool_array() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.get_subset_bool_array"]], "get_values() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.get_values"]], "labels() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.labels"]], "load() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.load"]], "load_data() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.load_data"]], "load_proteins() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.load_proteins"]], "make_df() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.make_df"]], "numof_entities() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.numof_entities"]], "numof_records() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.numof_records"]], "numof_references() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.numof_references"]], "process() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.process"]], "reload() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.reload"]], "select() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.select"]], "set_method() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.set_method"]], "set_reference_set() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.set_reference_set"]], "show() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.show"]], "subset_intersection() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.subset_intersection"]], "to_array() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.to_array"]], "to_bool_array() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.to_bool_array"]], "to_set() (pypath.core.annot.corumgo method)": [[28, "pypath.core.annot.CorumGO.to_set"]], "cpad (class in pypath.core.annot)": [[29, "pypath.core.annot.Cpad"]], "__init__() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.__init__"]], "add_complexes_by_inference() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.all_complexes"]], "all_entities() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.all_entities"]], "all_mirnas() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.all_mirnas"]], "all_proteins() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.all_proteins"]], "all_refs() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.all_refs"]], "annotate_complex() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.annotate_complex"]], "browse() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.browse"]], "complex_inference() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.complex_inference"]], "coverage() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.coverage"]], "curation_effort() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.curation_effort"]], "get_names() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.get_names"]], "get_reference_set() (pypath.core.annot.cpad static method)": [[29, "pypath.core.annot.Cpad.get_reference_set"]], "get_subset() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.get_subset"]], "get_subset_bool_array() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.get_subset_bool_array"]], "get_values() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.get_values"]], "labels() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.labels"]], "load() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.load"]], "load_data() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.load_data"]], "load_proteins() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.load_proteins"]], "make_df() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.make_df"]], "numof_entities() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.numof_entities"]], "numof_records() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.numof_records"]], "numof_references() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.numof_references"]], "process() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.process"]], "reload() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.reload"]], "select() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.select"]], "set_method() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.set_method"]], "set_reference_set() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.set_reference_set"]], "show() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.show"]], "subset_intersection() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.subset_intersection"]], "to_array() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.to_array"]], "to_bool_array() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.to_bool_array"]], "to_set() (pypath.core.annot.cpad method)": [[29, "pypath.core.annot.Cpad.to_set"]], "customannotation (class in pypath.core.annot)": [[30, "pypath.core.annot.CustomAnnotation"]], "__init__() (pypath.core.annot.customannotation method)": [[30, "pypath.core.annot.CustomAnnotation.__init__"]], "browse() (pypath.core.annot.customannotation method)": [[30, "pypath.core.annot.CustomAnnotation.browse"]], "class_to_class_connections() (pypath.core.annot.customannotation method)": [[30, "pypath.core.annot.CustomAnnotation.class_to_class_connections"]], "classes_by_entity() (pypath.core.annot.customannotation method)": [[30, "pypath.core.annot.CustomAnnotation.classes_by_entity"]], "counts() (pypath.core.annot.customannotation method)": [[30, "pypath.core.annot.CustomAnnotation.counts"]], "counts_by_class() (pypath.core.annot.customannotation method)": [[30, "pypath.core.annot.CustomAnnotation.counts_by_class"]], "create_class() (pypath.core.annot.customannotation method)": [[30, "pypath.core.annot.CustomAnnotation.create_class"]], "degree_inter_class_network() (pypath.core.annot.customannotation method)": [[30, "pypath.core.annot.CustomAnnotation.degree_inter_class_network"]], "filter() (pypath.core.annot.customannotation method)": [[30, "pypath.core.annot.CustomAnnotation.filter"]], "filter_classes() (pypath.core.annot.customannotation static method)": [[30, "pypath.core.annot.CustomAnnotation.filter_classes"]], "filter_interclass_network() (pypath.core.annot.customannotation method)": [[30, "pypath.core.annot.CustomAnnotation.filter_interclass_network"]], "get_class() (pypath.core.annot.customannotation method)": [[30, "pypath.core.annot.CustomAnnotation.get_class"]], "get_df() (pypath.core.annot.customannotation method)": [[30, "pypath.core.annot.CustomAnnotation.get_df"]], "get_interclass_network_df() (pypath.core.annot.customannotation method)": [[30, "pypath.core.annot.CustomAnnotation.get_interclass_network_df"]], "get_parents() (pypath.core.annot.customannotation method)": [[30, "pypath.core.annot.CustomAnnotation.get_parents"]], "get_resource() (pypath.core.annot.customannotation method)": [[30, "pypath.core.annot.CustomAnnotation.get_resource"]], "get_resources() (pypath.core.annot.customannotation method)": [[30, "pypath.core.annot.CustomAnnotation.get_resources"]], "labels() (pypath.core.annot.customannotation method)": [[30, "pypath.core.annot.CustomAnnotation.labels"]], "make_df() (pypath.core.annot.customannotation method)": [[30, "pypath.core.annot.CustomAnnotation.make_df"]], "network_df() (pypath.core.annot.customannotation method)": [[30, "pypath.core.annot.CustomAnnotation.network_df"]], "populate_classes() (pypath.core.annot.customannotation method)": [[30, "pypath.core.annot.CustomAnnotation.populate_classes"]], "populate_scores() (pypath.core.annot.customannotation method)": [[30, "pypath.core.annot.CustomAnnotation.populate_scores"]], "process_annot() (pypath.core.annot.customannotation method)": [[30, "pypath.core.annot.CustomAnnotation.process_annot"]], "quality_check_table() (pypath.core.annot.customannotation method)": [[30, "pypath.core.annot.CustomAnnotation.quality_check_table"]], "register_network() (pypath.core.annot.customannotation method)": [[30, "pypath.core.annot.CustomAnnotation.register_network"]], "reload() (pypath.core.annot.customannotation method)": [[30, "pypath.core.annot.CustomAnnotation.reload"]], "resources_in_category() (pypath.core.annot.customannotation method)": [[30, "pypath.core.annot.CustomAnnotation.resources_in_category"]], "select() (pypath.core.annot.customannotation method)": [[30, "pypath.core.annot.CustomAnnotation.select"]], "set_interclass_network_df() (pypath.core.annot.customannotation method)": [[30, "pypath.core.annot.CustomAnnotation.set_interclass_network_df"]], "show() (pypath.core.annot.customannotation method)": [[30, "pypath.core.annot.CustomAnnotation.show"]], "update_parents() (pypath.core.annot.customannotation method)": [[30, "pypath.core.annot.CustomAnnotation.update_parents"]], "cytosig (class in pypath.core.annot)": [[31, "pypath.core.annot.Cytosig"]], "__init__() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.__init__"]], "add_complexes_by_inference() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.all_complexes"]], "all_entities() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.all_entities"]], "all_mirnas() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.all_mirnas"]], "all_proteins() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.all_proteins"]], "all_refs() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.all_refs"]], "annotate_complex() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.annotate_complex"]], "browse() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.browse"]], "complex_inference() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.complex_inference"]], "coverage() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.coverage"]], "curation_effort() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.curation_effort"]], "get_names() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.get_names"]], "get_reference_set() (pypath.core.annot.cytosig static method)": [[31, "pypath.core.annot.Cytosig.get_reference_set"]], "get_subset() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.get_subset"]], "get_subset_bool_array() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.get_subset_bool_array"]], "get_values() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.get_values"]], "labels() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.labels"]], "load() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.load"]], "load_data() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.load_data"]], "load_proteins() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.load_proteins"]], "make_df() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.make_df"]], "numof_entities() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.numof_entities"]], "numof_records() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.numof_records"]], "numof_references() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.numof_references"]], "process() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.process"]], "reload() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.reload"]], "select() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.select"]], "set_method() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.set_method"]], "set_reference_set() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.set_reference_set"]], "show() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.show"]], "subset_intersection() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.subset_intersection"]], "to_array() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.to_array"]], "to_bool_array() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.to_bool_array"]], "to_set() (pypath.core.annot.cytosig method)": [[31, "pypath.core.annot.Cytosig.to_set"]], "dgidb (class in pypath.core.annot)": [[32, "pypath.core.annot.Dgidb"]], "__init__() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.__init__"]], "add_complexes_by_inference() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.all_complexes"]], "all_entities() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.all_entities"]], "all_mirnas() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.all_mirnas"]], "all_proteins() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.all_proteins"]], "all_refs() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.all_refs"]], "annotate_complex() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.annotate_complex"]], "browse() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.browse"]], "complex_inference() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.complex_inference"]], "coverage() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.coverage"]], "curation_effort() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.curation_effort"]], "get_names() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.get_names"]], "get_reference_set() (pypath.core.annot.dgidb static method)": [[32, "pypath.core.annot.Dgidb.get_reference_set"]], "get_subset() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.get_subset"]], "get_subset_bool_array() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.get_subset_bool_array"]], "get_values() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.get_values"]], "labels() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.labels"]], "load() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.load"]], "load_data() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.load_data"]], "load_proteins() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.load_proteins"]], "make_df() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.make_df"]], "numof_entities() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.numof_entities"]], "numof_records() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.numof_records"]], "numof_references() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.numof_references"]], "process() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.process"]], "reload() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.reload"]], "select() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.select"]], "set_method() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.set_method"]], "set_reference_set() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.set_reference_set"]], "show() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.show"]], "subset_intersection() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.subset_intersection"]], "to_array() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.to_array"]], "to_bool_array() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.to_bool_array"]], "to_set() (pypath.core.annot.dgidb method)": [[32, "pypath.core.annot.Dgidb.to_set"]], "disgenet (class in pypath.core.annot)": [[33, "pypath.core.annot.Disgenet"]], "__init__() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.__init__"]], "add_complexes_by_inference() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.all_complexes"]], "all_entities() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.all_entities"]], "all_mirnas() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.all_mirnas"]], "all_proteins() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.all_proteins"]], "all_refs() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.all_refs"]], "annotate_complex() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.annotate_complex"]], "browse() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.browse"]], "complex_inference() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.complex_inference"]], "coverage() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.coverage"]], "curation_effort() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.curation_effort"]], "get_names() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.get_names"]], "get_reference_set() (pypath.core.annot.disgenet static method)": [[33, "pypath.core.annot.Disgenet.get_reference_set"]], "get_subset() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.get_subset"]], "get_subset_bool_array() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.get_subset_bool_array"]], "get_values() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.get_values"]], "labels() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.labels"]], "load() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.load"]], "load_data() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.load_data"]], "load_proteins() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.load_proteins"]], "make_df() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.make_df"]], "numof_entities() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.numof_entities"]], "numof_records() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.numof_records"]], "numof_references() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.numof_references"]], "process() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.process"]], "reload() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.reload"]], "select() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.select"]], "set_method() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.set_method"]], "set_reference_set() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.set_reference_set"]], "show() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.show"]], "subset_intersection() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.subset_intersection"]], "to_array() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.to_array"]], "to_bool_array() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.to_bool_array"]], "to_set() (pypath.core.annot.disgenet method)": [[33, "pypath.core.annot.Disgenet.to_set"]], "embrace (class in pypath.core.annot)": [[34, "pypath.core.annot.Embrace"]], "__init__() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.__init__"]], "add_complexes_by_inference() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.all_complexes"]], "all_entities() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.all_entities"]], "all_mirnas() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.all_mirnas"]], "all_proteins() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.all_proteins"]], "all_refs() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.all_refs"]], "annotate_complex() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.annotate_complex"]], "browse() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.browse"]], "complex_inference() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.complex_inference"]], "coverage() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.coverage"]], "curation_effort() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.curation_effort"]], "get_names() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.get_names"]], "get_reference_set() (pypath.core.annot.embrace static method)": [[34, "pypath.core.annot.Embrace.get_reference_set"]], "get_subset() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.get_subset"]], "get_subset_bool_array() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.get_subset_bool_array"]], "get_values() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.get_values"]], "labels() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.labels"]], "load() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.load"]], "load_data() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.load_data"]], "load_proteins() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.load_proteins"]], "make_df() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.make_df"]], "numof_entities() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.numof_entities"]], "numof_records() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.numof_records"]], "numof_references() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.numof_references"]], "process() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.process"]], "reload() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.reload"]], "select() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.select"]], "set_method() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.set_method"]], "set_reference_set() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.set_reference_set"]], "show() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.show"]], "subset_intersection() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.subset_intersection"]], "to_array() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.to_array"]], "to_bool_array() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.to_bool_array"]], "to_set() (pypath.core.annot.embrace method)": [[34, "pypath.core.annot.Embrace.to_set"]], "exocarta (class in pypath.core.annot)": [[35, "pypath.core.annot.Exocarta"]], "__init__() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.__init__"]], "add_complexes_by_inference() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.all_complexes"]], "all_entities() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.all_entities"]], "all_mirnas() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.all_mirnas"]], "all_proteins() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.all_proteins"]], "all_refs() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.all_refs"]], "annotate_complex() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.annotate_complex"]], "browse() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.browse"]], "complex_inference() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.complex_inference"]], "coverage() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.coverage"]], "curation_effort() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.curation_effort"]], "get_names() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.get_names"]], "get_reference_set() (pypath.core.annot.exocarta static method)": [[35, "pypath.core.annot.Exocarta.get_reference_set"]], "get_subset() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.get_subset"]], "get_subset_bool_array() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.get_subset_bool_array"]], "get_values() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.get_values"]], "labels() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.labels"]], "load() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.load"]], "load_data() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.load_data"]], "load_proteins() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.load_proteins"]], "make_df() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.make_df"]], "numof_entities() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.numof_entities"]], "numof_records() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.numof_records"]], "numof_references() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.numof_references"]], "process() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.process"]], "reload() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.reload"]], "select() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.select"]], "set_method() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.set_method"]], "set_reference_set() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.set_reference_set"]], "show() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.show"]], "subset_intersection() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.subset_intersection"]], "to_array() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.to_array"]], "to_bool_array() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.to_bool_array"]], "to_set() (pypath.core.annot.exocarta method)": [[35, "pypath.core.annot.Exocarta.to_set"]], "gocustomintercell (class in pypath.core.annot)": [[36, "pypath.core.annot.GOCustomIntercell"]], "__init__() (pypath.core.annot.gocustomintercell method)": [[36, "pypath.core.annot.GOCustomIntercell.__init__"]], "get_annotation() (pypath.core.annot.gocustomintercell method)": [[36, "pypath.core.annot.GOCustomIntercell.get_annotation"]], "get_annotations() (pypath.core.annot.gocustomintercell method)": [[36, "pypath.core.annot.GOCustomIntercell.get_annotations"]], "process_categories() (pypath.core.annot.gocustomintercell method)": [[36, "pypath.core.annot.GOCustomIntercell.process_categories"]], "reload() (pypath.core.annot.gocustomintercell method)": [[36, "pypath.core.annot.GOCustomIntercell.reload"]], "gointercell (class in pypath.core.annot)": [[37, "pypath.core.annot.GOIntercell"]], "__init__() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.__init__"]], "add_complexes_by_inference() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.all_complexes"]], "all_entities() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.all_entities"]], "all_mirnas() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.all_mirnas"]], "all_proteins() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.all_proteins"]], "all_refs() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.all_refs"]], "annotate_complex() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.annotate_complex"]], "browse() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.browse"]], "complex_inference() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.complex_inference"]], "coverage() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.coverage"]], "curation_effort() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.curation_effort"]], "get_names() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.get_names"]], "get_reference_set() (pypath.core.annot.gointercell static method)": [[37, "pypath.core.annot.GOIntercell.get_reference_set"]], "get_subset() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.get_subset"]], "get_subset_bool_array() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.get_subset_bool_array"]], "get_values() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.get_values"]], "labels() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.labels"]], "load() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.load"]], "load_data() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.load_data"]], "load_proteins() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.load_proteins"]], "make_df() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.make_df"]], "numof_entities() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.numof_entities"]], "numof_records() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.numof_records"]], "numof_references() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.numof_references"]], "process() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.process"]], "reload() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.reload"]], "select() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.select"]], "set_method() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.set_method"]], "set_reference_set() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.set_reference_set"]], "show() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.show"]], "subset_intersection() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.subset_intersection"]], "to_array() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.to_array"]], "to_bool_array() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.to_bool_array"]], "to_set() (pypath.core.annot.gointercell method)": [[37, "pypath.core.annot.GOIntercell.to_set"]], "gpcrdb (class in pypath.core.annot)": [[38, "pypath.core.annot.Gpcrdb"]], "__init__() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.__init__"]], "add_complexes_by_inference() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.all_complexes"]], "all_entities() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.all_entities"]], "all_mirnas() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.all_mirnas"]], "all_proteins() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.all_proteins"]], "all_refs() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.all_refs"]], "annotate_complex() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.annotate_complex"]], "browse() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.browse"]], "complex_inference() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.complex_inference"]], "coverage() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.coverage"]], "curation_effort() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.curation_effort"]], "get_names() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.get_names"]], "get_reference_set() (pypath.core.annot.gpcrdb static method)": [[38, "pypath.core.annot.Gpcrdb.get_reference_set"]], "get_subset() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.get_subset"]], "get_subset_bool_array() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.get_subset_bool_array"]], "get_values() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.get_values"]], "labels() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.labels"]], "load() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.load"]], "load_data() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.load_data"]], "load_proteins() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.load_proteins"]], "make_df() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.make_df"]], "numof_entities() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.numof_entities"]], "numof_records() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.numof_records"]], "numof_references() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.numof_references"]], "process() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.process"]], "reload() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.reload"]], "select() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.select"]], "set_method() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.set_method"]], "set_reference_set() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.set_reference_set"]], "show() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.show"]], "subset_intersection() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.subset_intersection"]], "to_array() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.to_array"]], "to_bool_array() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.to_bool_array"]], "to_set() (pypath.core.annot.gpcrdb method)": [[38, "pypath.core.annot.Gpcrdb.to_set"]], "guidetopharmacology (class in pypath.core.annot)": [[39, "pypath.core.annot.GuideToPharmacology"]], "__init__() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.__init__"]], "add_complexes_by_inference() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.all_complexes"]], "all_entities() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.all_entities"]], "all_mirnas() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.all_mirnas"]], "all_proteins() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.all_proteins"]], "all_refs() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.all_refs"]], "annotate_complex() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.annotate_complex"]], "browse() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.browse"]], "complex_inference() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.complex_inference"]], "coverage() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.coverage"]], "curation_effort() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.curation_effort"]], "get_names() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.get_names"]], "get_reference_set() (pypath.core.annot.guidetopharmacology static method)": [[39, "pypath.core.annot.GuideToPharmacology.get_reference_set"]], "get_subset() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.get_subset"]], "get_subset_bool_array() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.get_subset_bool_array"]], "get_values() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.get_values"]], "labels() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.labels"]], "load() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.load"]], "load_data() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.load_data"]], "load_proteins() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.load_proteins"]], "make_df() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.make_df"]], "numof_entities() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.numof_entities"]], "numof_records() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.numof_records"]], "numof_references() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.numof_references"]], "process() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.process"]], "reload() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.reload"]], "select() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.select"]], "set_method() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.set_method"]], "set_reference_set() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.set_reference_set"]], "show() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.show"]], "subset_intersection() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.subset_intersection"]], "to_array() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.to_array"]], "to_bool_array() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.to_bool_array"]], "to_set() (pypath.core.annot.guidetopharmacology method)": [[39, "pypath.core.annot.GuideToPharmacology.to_set"]], "hpo (class in pypath.core.annot)": [[40, "pypath.core.annot.HPO"]], "__init__() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.__init__"]], "add_complexes_by_inference() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.all_complexes"]], "all_entities() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.all_entities"]], "all_mirnas() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.all_mirnas"]], "all_proteins() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.all_proteins"]], "all_refs() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.all_refs"]], "annotate_complex() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.annotate_complex"]], "browse() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.browse"]], "complex_inference() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.complex_inference"]], "coverage() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.coverage"]], "curation_effort() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.curation_effort"]], "get_names() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.get_names"]], "get_reference_set() (pypath.core.annot.hpo static method)": [[40, "pypath.core.annot.HPO.get_reference_set"]], "get_subset() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.get_subset"]], "get_subset_bool_array() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.get_subset_bool_array"]], "get_values() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.get_values"]], "labels() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.labels"]], "load() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.load"]], "load_data() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.load_data"]], "load_proteins() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.load_proteins"]], "make_df() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.make_df"]], "numof_entities() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.numof_entities"]], "numof_records() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.numof_records"]], "numof_references() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.numof_references"]], "process() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.process"]], "reload() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.reload"]], "select() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.select"]], "set_method() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.set_method"]], "set_reference_set() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.set_reference_set"]], "show() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.show"]], "subset_intersection() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.subset_intersection"]], "to_array() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.to_array"]], "to_bool_array() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.to_bool_array"]], "to_set() (pypath.core.annot.hpo method)": [[40, "pypath.core.annot.HPO.to_set"]], "hgnc (class in pypath.core.annot)": [[41, "pypath.core.annot.Hgnc"]], "__init__() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.__init__"]], "add_complexes_by_inference() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.all_complexes"]], "all_entities() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.all_entities"]], "all_mirnas() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.all_mirnas"]], "all_proteins() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.all_proteins"]], "all_refs() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.all_refs"]], "annotate_complex() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.annotate_complex"]], "browse() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.browse"]], "complex_inference() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.complex_inference"]], "coverage() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.coverage"]], "curation_effort() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.curation_effort"]], "get_names() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.get_names"]], "get_reference_set() (pypath.core.annot.hgnc static method)": [[41, "pypath.core.annot.Hgnc.get_reference_set"]], "get_subset() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.get_subset"]], "get_subset_bool_array() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.get_subset_bool_array"]], "get_values() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.get_values"]], "labels() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.labels"]], "load() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.load"]], "load_data() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.load_data"]], "load_proteins() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.load_proteins"]], "make_df() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.make_df"]], "numof_entities() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.numof_entities"]], "numof_records() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.numof_records"]], "numof_references() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.numof_references"]], "process() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.process"]], "reload() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.reload"]], "select() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.select"]], "set_method() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.set_method"]], "set_reference_set() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.set_reference_set"]], "show() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.show"]], "subset_intersection() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.subset_intersection"]], "to_array() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.to_array"]], "to_bool_array() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.to_bool_array"]], "to_set() (pypath.core.annot.hgnc method)": [[41, "pypath.core.annot.Hgnc.to_set"]], "hpmrcomplex (class in pypath.core.annot)": [[42, "pypath.core.annot.HpmrComplex"]], "__init__() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.__init__"]], "add_complexes_by_inference() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.all_complexes"]], "all_entities() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.all_entities"]], "all_mirnas() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.all_mirnas"]], "all_proteins() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.all_proteins"]], "all_refs() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.all_refs"]], "annotate_complex() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.annotate_complex"]], "browse() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.browse"]], "complex_inference() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.complex_inference"]], "coverage() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.coverage"]], "curation_effort() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.curation_effort"]], "get_names() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.get_names"]], "get_reference_set() (pypath.core.annot.hpmrcomplex static method)": [[42, "pypath.core.annot.HpmrComplex.get_reference_set"]], "get_subset() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.get_subset"]], "get_subset_bool_array() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.get_subset_bool_array"]], "get_values() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.get_values"]], "labels() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.labels"]], "load() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.load"]], "load_data() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.load_data"]], "load_proteins() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.load_proteins"]], "make_df() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.make_df"]], "numof_entities() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.numof_entities"]], "numof_records() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.numof_records"]], "numof_references() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.numof_references"]], "process() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.process"]], "reload() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.reload"]], "select() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.select"]], "set_method() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.set_method"]], "set_reference_set() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.set_reference_set"]], "show() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.show"]], "subset_intersection() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.subset_intersection"]], "to_array() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.to_array"]], "to_bool_array() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.to_bool_array"]], "to_set() (pypath.core.annot.hpmrcomplex method)": [[42, "pypath.core.annot.HpmrComplex.to_set"]], "humanplasmamembranereceptome (class in pypath.core.annot)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome"]], "__init__() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.__init__"]], "add_complexes_by_inference() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.all_complexes"]], "all_entities() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.all_entities"]], "all_mirnas() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.all_mirnas"]], "all_proteins() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.all_proteins"]], "all_refs() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.all_refs"]], "annotate_complex() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.annotate_complex"]], "browse() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.browse"]], "complex_inference() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.complex_inference"]], "coverage() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.coverage"]], "curation_effort() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.curation_effort"]], "get_names() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.get_names"]], "get_reference_set() (pypath.core.annot.humanplasmamembranereceptome static method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.get_reference_set"]], "get_subset() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.get_subset"]], "get_subset_bool_array() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.get_subset_bool_array"]], "get_values() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.get_values"]], "labels() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.labels"]], "load() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.load"]], "load_data() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.load_data"]], "load_proteins() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.load_proteins"]], "make_df() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.make_df"]], "numof_entities() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.numof_entities"]], "numof_records() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.numof_records"]], "numof_references() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.numof_references"]], "process() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.process"]], "reload() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.reload"]], "select() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.select"]], "set_method() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.set_method"]], "set_reference_set() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.set_reference_set"]], "show() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.show"]], "subset_intersection() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.subset_intersection"]], "to_array() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.to_array"]], "to_bool_array() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.to_bool_array"]], "to_set() (pypath.core.annot.humanplasmamembranereceptome method)": [[43, "pypath.core.annot.HumanPlasmaMembraneReceptome.to_set"]], "humanproteinatlas (class in pypath.core.annot)": [[44, "pypath.core.annot.HumanProteinAtlas"]], "__init__() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.__init__"]], "add_complexes_by_inference() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.all_complexes"]], "all_entities() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.all_entities"]], "all_mirnas() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.all_mirnas"]], "all_proteins() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.all_proteins"]], "all_refs() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.all_refs"]], "annotate_complex() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.annotate_complex"]], "browse() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.browse"]], "complex_inference() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.complex_inference"]], "coverage() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.coverage"]], "curation_effort() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.curation_effort"]], "get_names() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.get_names"]], "get_reference_set() (pypath.core.annot.humanproteinatlas static method)": [[44, "pypath.core.annot.HumanProteinAtlas.get_reference_set"]], "get_subset() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.get_subset"]], "get_subset_bool_array() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.get_subset_bool_array"]], "get_values() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.get_values"]], "labels() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.labels"]], "load() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.load"]], "load_data() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.load_data"]], "load_proteins() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.load_proteins"]], "make_df() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.make_df"]], "numof_entities() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.numof_entities"]], "numof_records() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.numof_records"]], "numof_references() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.numof_references"]], "process() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.process"]], "reload() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.reload"]], "select() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.select"]], "set_method() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.set_method"]], "set_reference_set() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.set_reference_set"]], "show() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.show"]], "subset_intersection() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.subset_intersection"]], "to_array() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.to_array"]], "to_bool_array() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.to_bool_array"]], "to_set() (pypath.core.annot.humanproteinatlas method)": [[44, "pypath.core.annot.HumanProteinAtlas.to_set"]], "humanproteinatlassecretome (class in pypath.core.annot)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome"]], "__init__() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.__init__"]], "add_complexes_by_inference() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.all_complexes"]], "all_entities() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.all_entities"]], "all_mirnas() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.all_mirnas"]], "all_proteins() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.all_proteins"]], "all_refs() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.all_refs"]], "annotate_complex() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.annotate_complex"]], "browse() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.browse"]], "complex_inference() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.complex_inference"]], "coverage() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.coverage"]], "curation_effort() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.curation_effort"]], "get_names() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.get_names"]], "get_reference_set() (pypath.core.annot.humanproteinatlassecretome static method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.get_reference_set"]], "get_subset() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.get_subset"]], "get_subset_bool_array() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.get_subset_bool_array"]], "get_values() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.get_values"]], "labels() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.labels"]], "load() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.load"]], "load_data() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.load_data"]], "load_proteins() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.load_proteins"]], "make_df() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.make_df"]], "numof_entities() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.numof_entities"]], "numof_records() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.numof_records"]], "numof_references() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.numof_references"]], "process() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.process"]], "reload() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.reload"]], "select() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.select"]], "set_method() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.set_method"]], "set_reference_set() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.set_reference_set"]], "show() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.show"]], "subset_intersection() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.subset_intersection"]], "to_array() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.to_array"]], "to_bool_array() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.to_bool_array"]], "to_set() (pypath.core.annot.humanproteinatlassecretome method)": [[45, "pypath.core.annot.HumanProteinAtlasSecretome.to_set"]], "humanproteinatlassubcellular (class in pypath.core.annot)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular"]], "__init__() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.__init__"]], "add_complexes_by_inference() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.all_complexes"]], "all_entities() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.all_entities"]], "all_mirnas() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.all_mirnas"]], "all_proteins() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.all_proteins"]], "all_refs() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.all_refs"]], "annotate_complex() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.annotate_complex"]], "browse() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.browse"]], "complex_inference() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.complex_inference"]], "coverage() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.coverage"]], "curation_effort() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.curation_effort"]], "get_names() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.get_names"]], "get_reference_set() (pypath.core.annot.humanproteinatlassubcellular static method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.get_reference_set"]], "get_subset() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.get_subset"]], "get_subset_bool_array() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.get_subset_bool_array"]], "get_values() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.get_values"]], "labels() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.labels"]], "load() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.load"]], "load_data() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.load_data"]], "load_proteins() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.load_proteins"]], "make_df() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.make_df"]], "numof_entities() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.numof_entities"]], "numof_records() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.numof_records"]], "numof_references() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.numof_references"]], "process() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.process"]], "reload() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.reload"]], "select() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.select"]], "set_method() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.set_method"]], "set_reference_set() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.set_reference_set"]], "show() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.show"]], "subset_intersection() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.subset_intersection"]], "to_array() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.to_array"]], "to_bool_array() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.to_bool_array"]], "to_set() (pypath.core.annot.humanproteinatlassubcellular method)": [[46, "pypath.core.annot.HumanProteinAtlasSubcellular.to_set"]], "humancellmap (class in pypath.core.annot)": [[47, "pypath.core.annot.Humancellmap"]], "__init__() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.__init__"]], "add_complexes_by_inference() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.all_complexes"]], "all_entities() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.all_entities"]], "all_mirnas() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.all_mirnas"]], "all_proteins() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.all_proteins"]], "all_refs() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.all_refs"]], "annotate_complex() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.annotate_complex"]], "browse() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.browse"]], "complex_inference() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.complex_inference"]], "coverage() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.coverage"]], "curation_effort() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.curation_effort"]], "get_names() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.get_names"]], "get_reference_set() (pypath.core.annot.humancellmap static method)": [[47, "pypath.core.annot.Humancellmap.get_reference_set"]], "get_subset() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.get_subset"]], "get_subset_bool_array() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.get_subset_bool_array"]], "get_values() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.get_values"]], "labels() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.labels"]], "load() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.load"]], "load_data() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.load_data"]], "load_proteins() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.load_proteins"]], "make_df() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.make_df"]], "numof_entities() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.numof_entities"]], "numof_records() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.numof_records"]], "numof_references() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.numof_references"]], "process() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.process"]], "reload() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.reload"]], "select() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.select"]], "set_method() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.set_method"]], "set_reference_set() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.set_reference_set"]], "show() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.show"]], "subset_intersection() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.subset_intersection"]], "to_array() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.to_array"]], "to_bool_array() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.to_bool_array"]], "to_set() (pypath.core.annot.humancellmap method)": [[47, "pypath.core.annot.Humancellmap.to_set"]], "icellnet (class in pypath.core.annot)": [[48, "pypath.core.annot.Icellnet"]], "__init__() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.__init__"]], "add_complexes_by_inference() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.all_complexes"]], "all_entities() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.all_entities"]], "all_mirnas() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.all_mirnas"]], "all_proteins() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.all_proteins"]], "all_refs() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.all_refs"]], "annotate_complex() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.annotate_complex"]], "browse() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.browse"]], "complex_inference() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.complex_inference"]], "coverage() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.coverage"]], "curation_effort() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.curation_effort"]], "get_names() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.get_names"]], "get_reference_set() (pypath.core.annot.icellnet static method)": [[48, "pypath.core.annot.Icellnet.get_reference_set"]], "get_subset() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.get_subset"]], "get_subset_bool_array() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.get_subset_bool_array"]], "get_values() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.get_values"]], "labels() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.labels"]], "load() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.load"]], "load_data() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.load_data"]], "load_proteins() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.load_proteins"]], "make_df() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.make_df"]], "numof_entities() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.numof_entities"]], "numof_records() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.numof_records"]], "numof_references() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.numof_references"]], "process() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.process"]], "reload() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.reload"]], "select() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.select"]], "set_method() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.set_method"]], "set_reference_set() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.set_reference_set"]], "show() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.show"]], "subset_intersection() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.subset_intersection"]], "to_array() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.to_array"]], "to_bool_array() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.to_bool_array"]], "to_set() (pypath.core.annot.icellnet method)": [[48, "pypath.core.annot.Icellnet.to_set"]], "icellnetcomplex (class in pypath.core.annot)": [[49, "pypath.core.annot.IcellnetComplex"]], "__init__() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.__init__"]], "add_complexes_by_inference() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.all_complexes"]], "all_entities() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.all_entities"]], "all_mirnas() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.all_mirnas"]], "all_proteins() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.all_proteins"]], "all_refs() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.all_refs"]], "annotate_complex() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.annotate_complex"]], "browse() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.browse"]], "complex_inference() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.complex_inference"]], "coverage() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.coverage"]], "curation_effort() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.curation_effort"]], "get_names() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.get_names"]], "get_reference_set() (pypath.core.annot.icellnetcomplex static method)": [[49, "pypath.core.annot.IcellnetComplex.get_reference_set"]], "get_subset() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.get_subset"]], "get_subset_bool_array() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.get_subset_bool_array"]], "get_values() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.get_values"]], "labels() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.labels"]], "load() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.load"]], "load_data() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.load_data"]], "load_proteins() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.load_proteins"]], "make_df() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.make_df"]], "numof_entities() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.numof_entities"]], "numof_records() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.numof_records"]], "numof_references() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.numof_references"]], "process() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.process"]], "reload() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.reload"]], "select() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.select"]], "set_method() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.set_method"]], "set_reference_set() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.set_reference_set"]], "show() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.show"]], "subset_intersection() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.subset_intersection"]], "to_array() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.to_array"]], "to_bool_array() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.to_bool_array"]], "to_set() (pypath.core.annot.icellnetcomplex method)": [[49, "pypath.core.annot.IcellnetComplex.to_set"]], "integrins (class in pypath.core.annot)": [[50, "pypath.core.annot.Integrins"]], "__init__() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.__init__"]], "add_complexes_by_inference() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.all_complexes"]], "all_entities() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.all_entities"]], "all_mirnas() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.all_mirnas"]], "all_proteins() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.all_proteins"]], "all_refs() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.all_refs"]], "annotate_complex() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.annotate_complex"]], "browse() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.browse"]], "complex_inference() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.complex_inference"]], "coverage() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.coverage"]], "curation_effort() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.curation_effort"]], "get_names() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.get_names"]], "get_reference_set() (pypath.core.annot.integrins static method)": [[50, "pypath.core.annot.Integrins.get_reference_set"]], "get_subset() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.get_subset"]], "get_subset_bool_array() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.get_subset_bool_array"]], "get_values() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.get_values"]], "labels() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.labels"]], "load() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.load"]], "load_data() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.load_data"]], "load_proteins() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.load_proteins"]], "make_df() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.make_df"]], "numof_entities() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.numof_entities"]], "numof_records() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.numof_records"]], "numof_references() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.numof_references"]], "process() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.process"]], "reload() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.reload"]], "select() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.select"]], "set_method() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.set_method"]], "set_reference_set() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.set_reference_set"]], "show() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.show"]], "subset_intersection() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.subset_intersection"]], "to_array() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.to_array"]], "to_bool_array() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.to_bool_array"]], "to_set() (pypath.core.annot.integrins method)": [[50, "pypath.core.annot.Integrins.to_set"]], "interpro (class in pypath.core.annot)": [[51, "pypath.core.annot.InterPro"]], "__init__() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.__init__"]], "add_complexes_by_inference() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.all_complexes"]], "all_entities() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.all_entities"]], "all_mirnas() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.all_mirnas"]], "all_proteins() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.all_proteins"]], "all_refs() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.all_refs"]], "annotate_complex() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.annotate_complex"]], "browse() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.browse"]], "complex_inference() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.complex_inference"]], "coverage() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.coverage"]], "curation_effort() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.curation_effort"]], "get_names() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.get_names"]], "get_reference_set() (pypath.core.annot.interpro static method)": [[51, "pypath.core.annot.InterPro.get_reference_set"]], "get_subset() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.get_subset"]], "get_subset_bool_array() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.get_subset_bool_array"]], "get_values() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.get_values"]], "labels() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.labels"]], "load() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.load"]], "load_data() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.load_data"]], "load_proteins() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.load_proteins"]], "make_df() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.make_df"]], "numof_entities() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.numof_entities"]], "numof_records() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.numof_records"]], "numof_references() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.numof_references"]], "process() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.process"]], "reload() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.reload"]], "select() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.select"]], "set_method() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.set_method"]], "set_reference_set() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.set_reference_set"]], "show() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.show"]], "subset_intersection() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.subset_intersection"]], "to_array() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.to_array"]], "to_bool_array() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.to_bool_array"]], "to_set() (pypath.core.annot.interpro method)": [[51, "pypath.core.annot.InterPro.to_set"]], "intogen (class in pypath.core.annot)": [[52, "pypath.core.annot.Intogen"]], "__init__() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.__init__"]], "add_complexes_by_inference() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.all_complexes"]], "all_entities() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.all_entities"]], "all_mirnas() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.all_mirnas"]], "all_proteins() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.all_proteins"]], "all_refs() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.all_refs"]], "annotate_complex() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.annotate_complex"]], "browse() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.browse"]], "complex_inference() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.complex_inference"]], "coverage() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.coverage"]], "curation_effort() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.curation_effort"]], "get_names() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.get_names"]], "get_reference_set() (pypath.core.annot.intogen static method)": [[52, "pypath.core.annot.Intogen.get_reference_set"]], "get_subset() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.get_subset"]], "get_subset_bool_array() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.get_subset_bool_array"]], "get_values() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.get_values"]], "labels() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.labels"]], "load() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.load"]], "load_data() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.load_data"]], "load_proteins() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.load_proteins"]], "make_df() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.make_df"]], "numof_entities() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.numof_entities"]], "numof_records() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.numof_records"]], "numof_references() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.numof_references"]], "process() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.process"]], "reload() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.reload"]], "select() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.select"]], "set_method() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.set_method"]], "set_reference_set() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.set_reference_set"]], "show() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.show"]], "subset_intersection() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.subset_intersection"]], "to_array() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.to_array"]], "to_bool_array() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.to_bool_array"]], "to_set() (pypath.core.annot.intogen method)": [[52, "pypath.core.annot.Intogen.to_set"]], "italk (class in pypath.core.annot)": [[53, "pypath.core.annot.Italk"]], "__init__() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.__init__"]], "add_complexes_by_inference() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.all_complexes"]], "all_entities() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.all_entities"]], "all_mirnas() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.all_mirnas"]], "all_proteins() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.all_proteins"]], "all_refs() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.all_refs"]], "annotate_complex() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.annotate_complex"]], "browse() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.browse"]], "complex_inference() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.complex_inference"]], "coverage() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.coverage"]], "curation_effort() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.curation_effort"]], "get_names() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.get_names"]], "get_reference_set() (pypath.core.annot.italk static method)": [[53, "pypath.core.annot.Italk.get_reference_set"]], "get_subset() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.get_subset"]], "get_subset_bool_array() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.get_subset_bool_array"]], "get_values() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.get_values"]], "labels() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.labels"]], "load() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.load"]], "load_data() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.load_data"]], "load_proteins() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.load_proteins"]], "make_df() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.make_df"]], "numof_entities() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.numof_entities"]], "numof_records() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.numof_records"]], "numof_references() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.numof_references"]], "process() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.process"]], "reload() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.reload"]], "select() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.select"]], "set_method() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.set_method"]], "set_reference_set() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.set_reference_set"]], "show() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.show"]], "subset_intersection() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.subset_intersection"]], "to_array() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.to_array"]], "to_bool_array() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.to_bool_array"]], "to_set() (pypath.core.annot.italk method)": [[53, "pypath.core.annot.Italk.to_set"]], "keggpathways (class in pypath.core.annot)": [[54, "pypath.core.annot.KeggPathways"]], "__init__() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.__init__"]], "add_complexes_by_inference() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.all_complexes"]], "all_entities() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.all_entities"]], "all_mirnas() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.all_mirnas"]], "all_proteins() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.all_proteins"]], "all_refs() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.all_refs"]], "annotate_complex() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.annotate_complex"]], "browse() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.browse"]], "complex_inference() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.complex_inference"]], "coverage() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.coverage"]], "curation_effort() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.curation_effort"]], "get_names() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.get_names"]], "get_reference_set() (pypath.core.annot.keggpathways static method)": [[54, "pypath.core.annot.KeggPathways.get_reference_set"]], "get_subset() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.get_subset"]], "get_subset_bool_array() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.get_subset_bool_array"]], "get_values() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.get_values"]], "labels() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.labels"]], "load() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.load"]], "load_data() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.load_data"]], "load_proteins() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.load_proteins"]], "make_df() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.make_df"]], "numof_entities() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.numof_entities"]], "numof_records() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.numof_records"]], "numof_references() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.numof_references"]], "process() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.process"]], "reload() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.reload"]], "select() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.select"]], "set_method() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.set_method"]], "set_reference_set() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.set_reference_set"]], "show() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.show"]], "subset_intersection() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.subset_intersection"]], "to_array() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.to_array"]], "to_bool_array() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.to_bool_array"]], "to_set() (pypath.core.annot.keggpathways method)": [[54, "pypath.core.annot.KeggPathways.to_set"]], "keggpathwayspc (class in pypath.core.annot)": [[55, "pypath.core.annot.KeggPathwaysPC"]], "__init__() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.__init__"]], "add_complexes_by_inference() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.all_complexes"]], "all_entities() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.all_entities"]], "all_mirnas() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.all_mirnas"]], "all_proteins() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.all_proteins"]], "all_refs() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.all_refs"]], "annotate_complex() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.annotate_complex"]], "browse() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.browse"]], "complex_inference() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.complex_inference"]], "coverage() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.coverage"]], "curation_effort() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.curation_effort"]], "get_names() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.get_names"]], "get_reference_set() (pypath.core.annot.keggpathwayspc static method)": [[55, "pypath.core.annot.KeggPathwaysPC.get_reference_set"]], "get_subset() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.get_subset"]], "get_subset_bool_array() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.get_subset_bool_array"]], "get_values() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.get_values"]], "labels() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.labels"]], "load() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.load"]], "load_data() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.load_data"]], "load_proteins() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.load_proteins"]], "make_df() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.make_df"]], "numof_entities() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.numof_entities"]], "numof_records() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.numof_records"]], "numof_references() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.numof_references"]], "process() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.process"]], "reload() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.reload"]], "select() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.select"]], "set_method() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.set_method"]], "set_reference_set() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.set_reference_set"]], "show() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.show"]], "subset_intersection() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.subset_intersection"]], "to_array() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.to_array"]], "to_bool_array() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.to_bool_array"]], "to_set() (pypath.core.annot.keggpathwayspc method)": [[55, "pypath.core.annot.KeggPathwaysPC.to_set"]], "kinasedotcom (class in pypath.core.annot)": [[56, "pypath.core.annot.Kinasedotcom"]], "__init__() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.__init__"]], "add_complexes_by_inference() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.all_complexes"]], "all_entities() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.all_entities"]], "all_mirnas() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.all_mirnas"]], "all_proteins() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.all_proteins"]], "all_refs() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.all_refs"]], "annotate_complex() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.annotate_complex"]], "browse() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.browse"]], "complex_inference() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.complex_inference"]], "coverage() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.coverage"]], "curation_effort() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.curation_effort"]], "get_names() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.get_names"]], "get_reference_set() (pypath.core.annot.kinasedotcom static method)": [[56, "pypath.core.annot.Kinasedotcom.get_reference_set"]], "get_subset() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.get_subset"]], "get_subset_bool_array() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.get_subset_bool_array"]], "get_values() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.get_values"]], "labels() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.labels"]], "load() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.load"]], "load_data() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.load_data"]], "load_proteins() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.load_proteins"]], "make_df() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.make_df"]], "numof_entities() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.numof_entities"]], "numof_records() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.numof_records"]], "numof_references() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.numof_references"]], "process() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.process"]], "reload() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.reload"]], "select() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.select"]], "set_method() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.set_method"]], "set_reference_set() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.set_reference_set"]], "show() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.show"]], "subset_intersection() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.subset_intersection"]], "to_array() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.to_array"]], "to_bool_array() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.to_bool_array"]], "to_set() (pypath.core.annot.kinasedotcom method)": [[56, "pypath.core.annot.Kinasedotcom.to_set"]], "kirouac2010 (class in pypath.core.annot)": [[57, "pypath.core.annot.Kirouac2010"]], "__init__() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.__init__"]], "add_complexes_by_inference() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.all_complexes"]], "all_entities() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.all_entities"]], "all_mirnas() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.all_mirnas"]], "all_proteins() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.all_proteins"]], "all_refs() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.all_refs"]], "annotate_complex() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.annotate_complex"]], "browse() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.browse"]], "complex_inference() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.complex_inference"]], "coverage() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.coverage"]], "curation_effort() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.curation_effort"]], "get_names() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.get_names"]], "get_reference_set() (pypath.core.annot.kirouac2010 static method)": [[57, "pypath.core.annot.Kirouac2010.get_reference_set"]], "get_subset() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.get_subset"]], "get_subset_bool_array() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.get_subset_bool_array"]], "get_values() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.get_values"]], "labels() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.labels"]], "load() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.load"]], "load_data() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.load_data"]], "load_proteins() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.load_proteins"]], "make_df() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.make_df"]], "numof_entities() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.numof_entities"]], "numof_records() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.numof_records"]], "numof_references() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.numof_references"]], "process() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.process"]], "reload() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.reload"]], "select() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.select"]], "set_method() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.set_method"]], "set_reference_set() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.set_reference_set"]], "show() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.show"]], "subset_intersection() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.subset_intersection"]], "to_array() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.to_array"]], "to_bool_array() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.to_bool_array"]], "to_set() (pypath.core.annot.kirouac2010 method)": [[57, "pypath.core.annot.Kirouac2010.to_set"]], "lambert2018 (class in pypath.core.annot)": [[58, "pypath.core.annot.Lambert2018"]], "__init__() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.__init__"]], "add_complexes_by_inference() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.all_complexes"]], "all_entities() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.all_entities"]], "all_mirnas() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.all_mirnas"]], "all_proteins() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.all_proteins"]], "all_refs() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.all_refs"]], "annotate_complex() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.annotate_complex"]], "browse() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.browse"]], "complex_inference() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.complex_inference"]], "coverage() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.coverage"]], "curation_effort() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.curation_effort"]], "get_names() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.get_names"]], "get_reference_set() (pypath.core.annot.lambert2018 static method)": [[58, "pypath.core.annot.Lambert2018.get_reference_set"]], "get_subset() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.get_subset"]], "get_subset_bool_array() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.get_subset_bool_array"]], "get_values() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.get_values"]], "labels() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.labels"]], "load() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.load"]], "load_data() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.load_data"]], "load_proteins() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.load_proteins"]], "make_df() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.make_df"]], "numof_entities() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.numof_entities"]], "numof_records() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.numof_records"]], "numof_references() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.numof_references"]], "process() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.process"]], "reload() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.reload"]], "select() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.select"]], "set_method() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.set_method"]], "set_reference_set() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.set_reference_set"]], "show() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.show"]], "subset_intersection() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.subset_intersection"]], "to_array() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.to_array"]], "to_bool_array() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.to_bool_array"]], "to_set() (pypath.core.annot.lambert2018 method)": [[58, "pypath.core.annot.Lambert2018.to_set"]], "ligandreceptor (class in pypath.core.annot)": [[59, "pypath.core.annot.LigandReceptor"]], "__init__() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.__init__"]], "add_complexes_by_inference() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.all_complexes"]], "all_entities() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.all_entities"]], "all_mirnas() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.all_mirnas"]], "all_proteins() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.all_proteins"]], "all_refs() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.all_refs"]], "annotate_complex() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.annotate_complex"]], "browse() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.browse"]], "complex_inference() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.complex_inference"]], "coverage() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.coverage"]], "curation_effort() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.curation_effort"]], "get_names() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.get_names"]], "get_reference_set() (pypath.core.annot.ligandreceptor static method)": [[59, "pypath.core.annot.LigandReceptor.get_reference_set"]], "get_subset() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.get_subset"]], "get_subset_bool_array() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.get_subset_bool_array"]], "get_values() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.get_values"]], "labels() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.labels"]], "load() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.load"]], "load_data() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.load_data"]], "load_proteins() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.load_proteins"]], "make_df() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.make_df"]], "numof_entities() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.numof_entities"]], "numof_records() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.numof_records"]], "numof_references() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.numof_references"]], "process() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.process"]], "reload() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.reload"]], "select() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.select"]], "set_method() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.set_method"]], "set_reference_set() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.set_reference_set"]], "show() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.show"]], "subset_intersection() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.subset_intersection"]], "to_array() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.to_array"]], "to_bool_array() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.to_bool_array"]], "to_set() (pypath.core.annot.ligandreceptor method)": [[59, "pypath.core.annot.LigandReceptor.to_set"]], "locate (class in pypath.core.annot)": [[60, "pypath.core.annot.Locate"]], "__init__() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.__init__"]], "add_complexes_by_inference() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.all_complexes"]], "all_entities() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.all_entities"]], "all_mirnas() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.all_mirnas"]], "all_proteins() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.all_proteins"]], "all_refs() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.all_refs"]], "annotate_complex() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.annotate_complex"]], "browse() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.browse"]], "complex_inference() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.complex_inference"]], "coverage() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.coverage"]], "curation_effort() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.curation_effort"]], "get_names() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.get_names"]], "get_reference_set() (pypath.core.annot.locate static method)": [[60, "pypath.core.annot.Locate.get_reference_set"]], "get_subset() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.get_subset"]], "get_subset_bool_array() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.get_subset_bool_array"]], "get_values() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.get_values"]], "labels() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.labels"]], "load() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.load"]], "load_data() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.load_data"]], "load_proteins() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.load_proteins"]], "make_df() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.make_df"]], "numof_entities() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.numof_entities"]], "numof_records() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.numof_records"]], "numof_references() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.numof_references"]], "process() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.process"]], "reload() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.reload"]], "select() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.select"]], "set_method() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.set_method"]], "set_reference_set() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.set_reference_set"]], "show() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.show"]], "subset_intersection() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.subset_intersection"]], "to_array() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.to_array"]], "to_bool_array() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.to_bool_array"]], "to_set() (pypath.core.annot.locate method)": [[60, "pypath.core.annot.Locate.to_set"]], "lrdb (class in pypath.core.annot)": [[61, "pypath.core.annot.Lrdb"]], "__init__() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.__init__"]], "add_complexes_by_inference() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.all_complexes"]], "all_entities() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.all_entities"]], "all_mirnas() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.all_mirnas"]], "all_proteins() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.all_proteins"]], "all_refs() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.all_refs"]], "annotate_complex() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.annotate_complex"]], "browse() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.browse"]], "complex_inference() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.complex_inference"]], "coverage() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.coverage"]], "curation_effort() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.curation_effort"]], "get_names() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.get_names"]], "get_reference_set() (pypath.core.annot.lrdb static method)": [[61, "pypath.core.annot.Lrdb.get_reference_set"]], "get_subset() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.get_subset"]], "get_subset_bool_array() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.get_subset_bool_array"]], "get_values() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.get_values"]], "labels() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.labels"]], "load() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.load"]], "load_data() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.load_data"]], "load_proteins() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.load_proteins"]], "make_df() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.make_df"]], "numof_entities() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.numof_entities"]], "numof_records() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.numof_records"]], "numof_references() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.numof_references"]], "process() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.process"]], "reload() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.reload"]], "select() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.select"]], "set_method() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.set_method"]], "set_reference_set() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.set_reference_set"]], "show() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.show"]], "subset_intersection() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.subset_intersection"]], "to_array() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.to_array"]], "to_bool_array() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.to_bool_array"]], "to_set() (pypath.core.annot.lrdb method)": [[61, "pypath.core.annot.Lrdb.to_set"]], "matrisome (class in pypath.core.annot)": [[62, "pypath.core.annot.Matrisome"]], "__init__() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.__init__"]], "add_complexes_by_inference() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.all_complexes"]], "all_entities() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.all_entities"]], "all_mirnas() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.all_mirnas"]], "all_proteins() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.all_proteins"]], "all_refs() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.all_refs"]], "annotate_complex() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.annotate_complex"]], "browse() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.browse"]], "complex_inference() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.complex_inference"]], "coverage() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.coverage"]], "curation_effort() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.curation_effort"]], "get_names() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.get_names"]], "get_reference_set() (pypath.core.annot.matrisome static method)": [[62, "pypath.core.annot.Matrisome.get_reference_set"]], "get_subset() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.get_subset"]], "get_subset_bool_array() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.get_subset_bool_array"]], "get_values() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.get_values"]], "labels() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.labels"]], "load() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.load"]], "load_data() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.load_data"]], "load_proteins() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.load_proteins"]], "make_df() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.make_df"]], "numof_entities() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.numof_entities"]], "numof_records() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.numof_records"]], "numof_references() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.numof_references"]], "process() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.process"]], "reload() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.reload"]], "select() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.select"]], "set_method() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.set_method"]], "set_reference_set() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.set_reference_set"]], "show() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.show"]], "subset_intersection() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.subset_intersection"]], "to_array() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.to_array"]], "to_bool_array() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.to_bool_array"]], "to_set() (pypath.core.annot.matrisome method)": [[62, "pypath.core.annot.Matrisome.to_set"]], "matrixdb (class in pypath.core.annot)": [[63, "pypath.core.annot.Matrixdb"]], "__init__() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.__init__"]], "add_complexes_by_inference() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.all_complexes"]], "all_entities() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.all_entities"]], "all_mirnas() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.all_mirnas"]], "all_proteins() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.all_proteins"]], "all_refs() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.all_refs"]], "annotate_complex() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.annotate_complex"]], "browse() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.browse"]], "complex_inference() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.complex_inference"]], "coverage() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.coverage"]], "curation_effort() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.curation_effort"]], "get_names() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.get_names"]], "get_reference_set() (pypath.core.annot.matrixdb static method)": [[63, "pypath.core.annot.Matrixdb.get_reference_set"]], "get_subset() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.get_subset"]], "get_subset_bool_array() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.get_subset_bool_array"]], "get_values() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.get_values"]], "labels() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.labels"]], "load() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.load"]], "load_data() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.load_data"]], "load_proteins() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.load_proteins"]], "make_df() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.make_df"]], "numof_entities() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.numof_entities"]], "numof_records() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.numof_records"]], "numof_references() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.numof_references"]], "process() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.process"]], "reload() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.reload"]], "select() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.select"]], "set_method() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.set_method"]], "set_reference_set() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.set_reference_set"]], "show() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.show"]], "subset_intersection() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.subset_intersection"]], "to_array() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.to_array"]], "to_bool_array() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.to_bool_array"]], "to_set() (pypath.core.annot.matrixdb method)": [[63, "pypath.core.annot.Matrixdb.to_set"]], "mcam (class in pypath.core.annot)": [[64, "pypath.core.annot.Mcam"]], "__init__() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.__init__"]], "add_complexes_by_inference() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.all_complexes"]], "all_entities() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.all_entities"]], "all_mirnas() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.all_mirnas"]], "all_proteins() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.all_proteins"]], "all_refs() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.all_refs"]], "annotate_complex() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.annotate_complex"]], "browse() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.browse"]], "complex_inference() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.complex_inference"]], "coverage() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.coverage"]], "curation_effort() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.curation_effort"]], "get_names() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.get_names"]], "get_reference_set() (pypath.core.annot.mcam static method)": [[64, "pypath.core.annot.Mcam.get_reference_set"]], "get_subset() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.get_subset"]], "get_subset_bool_array() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.get_subset_bool_array"]], "get_values() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.get_values"]], "labels() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.labels"]], "load() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.load"]], "load_data() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.load_data"]], "load_proteins() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.load_proteins"]], "make_df() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.make_df"]], "numof_entities() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.numof_entities"]], "numof_records() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.numof_records"]], "numof_references() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.numof_references"]], "process() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.process"]], "reload() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.reload"]], "select() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.select"]], "set_method() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.set_method"]], "set_reference_set() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.set_reference_set"]], "show() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.show"]], "subset_intersection() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.subset_intersection"]], "to_array() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.to_array"]], "to_bool_array() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.to_bool_array"]], "to_set() (pypath.core.annot.mcam method)": [[64, "pypath.core.annot.Mcam.to_set"]], "membranome (class in pypath.core.annot)": [[65, "pypath.core.annot.Membranome"]], "__init__() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.__init__"]], "add_complexes_by_inference() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.all_complexes"]], "all_entities() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.all_entities"]], "all_mirnas() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.all_mirnas"]], "all_proteins() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.all_proteins"]], "all_refs() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.all_refs"]], "annotate_complex() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.annotate_complex"]], "browse() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.browse"]], "complex_inference() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.complex_inference"]], "coverage() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.coverage"]], "curation_effort() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.curation_effort"]], "get_names() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.get_names"]], "get_reference_set() (pypath.core.annot.membranome static method)": [[65, "pypath.core.annot.Membranome.get_reference_set"]], "get_subset() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.get_subset"]], "get_subset_bool_array() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.get_subset_bool_array"]], "get_values() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.get_values"]], "labels() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.labels"]], "load() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.load"]], "load_data() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.load_data"]], "load_proteins() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.load_proteins"]], "make_df() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.make_df"]], "numof_entities() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.numof_entities"]], "numof_records() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.numof_records"]], "numof_references() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.numof_references"]], "process() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.process"]], "reload() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.reload"]], "select() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.select"]], "set_method() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.set_method"]], "set_reference_set() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.set_reference_set"]], "show() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.show"]], "subset_intersection() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.subset_intersection"]], "to_array() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.to_array"]], "to_bool_array() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.to_bool_array"]], "to_set() (pypath.core.annot.membranome method)": [[65, "pypath.core.annot.Membranome.to_set"]], "msigdb (class in pypath.core.annot)": [[66, "pypath.core.annot.Msigdb"]], "__init__() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.__init__"]], "add_complexes_by_inference() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.all_complexes"]], "all_entities() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.all_entities"]], "all_mirnas() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.all_mirnas"]], "all_proteins() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.all_proteins"]], "all_refs() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.all_refs"]], "annotate_complex() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.annotate_complex"]], "browse() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.browse"]], "complex_inference() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.complex_inference"]], "coverage() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.coverage"]], "curation_effort() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.curation_effort"]], "get_names() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.get_names"]], "get_reference_set() (pypath.core.annot.msigdb static method)": [[66, "pypath.core.annot.Msigdb.get_reference_set"]], "get_subset() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.get_subset"]], "get_subset_bool_array() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.get_subset_bool_array"]], "get_values() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.get_values"]], "labels() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.labels"]], "load() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.load"]], "load_data() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.load_data"]], "load_proteins() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.load_proteins"]], "make_df() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.make_df"]], "numof_entities() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.numof_entities"]], "numof_records() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.numof_records"]], "numof_references() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.numof_references"]], "process() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.process"]], "reload() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.reload"]], "select() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.select"]], "set_method() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.set_method"]], "set_reference_set() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.set_reference_set"]], "show() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.show"]], "subset_intersection() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.subset_intersection"]], "to_array() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.to_array"]], "to_bool_array() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.to_bool_array"]], "to_set() (pypath.core.annot.msigdb method)": [[66, "pypath.core.annot.Msigdb.to_set"]], "netpathpathways (class in pypath.core.annot)": [[67, "pypath.core.annot.NetpathPathways"]], "__init__() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.__init__"]], "add_complexes_by_inference() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.all_complexes"]], "all_entities() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.all_entities"]], "all_mirnas() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.all_mirnas"]], "all_proteins() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.all_proteins"]], "all_refs() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.all_refs"]], "annotate_complex() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.annotate_complex"]], "browse() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.browse"]], "complex_inference() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.complex_inference"]], "coverage() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.coverage"]], "curation_effort() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.curation_effort"]], "get_names() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.get_names"]], "get_reference_set() (pypath.core.annot.netpathpathways static method)": [[67, "pypath.core.annot.NetpathPathways.get_reference_set"]], "get_subset() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.get_subset"]], "get_subset_bool_array() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.get_subset_bool_array"]], "get_values() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.get_values"]], "labels() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.labels"]], "load() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.load"]], "load_data() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.load_data"]], "load_proteins() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.load_proteins"]], "make_df() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.make_df"]], "numof_entities() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.numof_entities"]], "numof_records() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.numof_records"]], "numof_references() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.numof_references"]], "process() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.process"]], "reload() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.reload"]], "select() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.select"]], "set_method() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.set_method"]], "set_reference_set() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.set_reference_set"]], "show() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.show"]], "subset_intersection() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.subset_intersection"]], "to_array() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.to_array"]], "to_bool_array() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.to_bool_array"]], "to_set() (pypath.core.annot.netpathpathways method)": [[67, "pypath.core.annot.NetpathPathways.to_set"]], "opm (class in pypath.core.annot)": [[68, "pypath.core.annot.Opm"]], "__init__() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.__init__"]], "add_complexes_by_inference() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.all_complexes"]], "all_entities() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.all_entities"]], "all_mirnas() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.all_mirnas"]], "all_proteins() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.all_proteins"]], "all_refs() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.all_refs"]], "annotate_complex() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.annotate_complex"]], "browse() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.browse"]], "complex_inference() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.complex_inference"]], "coverage() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.coverage"]], "curation_effort() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.curation_effort"]], "get_names() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.get_names"]], "get_reference_set() (pypath.core.annot.opm static method)": [[68, "pypath.core.annot.Opm.get_reference_set"]], "get_subset() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.get_subset"]], "get_subset_bool_array() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.get_subset_bool_array"]], "get_values() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.get_values"]], "labels() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.labels"]], "load() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.load"]], "load_data() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.load_data"]], "load_proteins() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.load_proteins"]], "make_df() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.make_df"]], "numof_entities() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.numof_entities"]], "numof_records() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.numof_records"]], "numof_references() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.numof_references"]], "process() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.process"]], "reload() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.reload"]], "select() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.select"]], "set_method() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.set_method"]], "set_reference_set() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.set_reference_set"]], "show() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.show"]], "subset_intersection() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.subset_intersection"]], "to_array() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.to_array"]], "to_bool_array() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.to_bool_array"]], "to_set() (pypath.core.annot.opm method)": [[68, "pypath.core.annot.Opm.to_set"]], "panglaodb (class in pypath.core.annot)": [[69, "pypath.core.annot.Panglaodb"]], "__init__() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.__init__"]], "add_complexes_by_inference() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.all_complexes"]], "all_entities() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.all_entities"]], "all_mirnas() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.all_mirnas"]], "all_proteins() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.all_proteins"]], "all_refs() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.all_refs"]], "annotate_complex() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.annotate_complex"]], "browse() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.browse"]], "complex_inference() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.complex_inference"]], "coverage() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.coverage"]], "curation_effort() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.curation_effort"]], "get_names() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.get_names"]], "get_reference_set() (pypath.core.annot.panglaodb static method)": [[69, "pypath.core.annot.Panglaodb.get_reference_set"]], "get_subset() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.get_subset"]], "get_subset_bool_array() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.get_subset_bool_array"]], "get_values() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.get_values"]], "labels() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.labels"]], "load() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.load"]], "load_data() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.load_data"]], "load_proteins() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.load_proteins"]], "make_df() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.make_df"]], "numof_entities() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.numof_entities"]], "numof_records() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.numof_records"]], "numof_references() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.numof_references"]], "process() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.process"]], "reload() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.reload"]], "select() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.select"]], "set_method() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.set_method"]], "set_reference_set() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.set_reference_set"]], "show() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.show"]], "subset_intersection() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.subset_intersection"]], "to_array() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.to_array"]], "to_bool_array() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.to_bool_array"]], "to_set() (pypath.core.annot.panglaodb method)": [[69, "pypath.core.annot.Panglaodb.to_set"]], "phobius (class in pypath.core.annot)": [[70, "pypath.core.annot.Phobius"]], "__init__() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.__init__"]], "add_complexes_by_inference() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.all_complexes"]], "all_entities() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.all_entities"]], "all_mirnas() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.all_mirnas"]], "all_proteins() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.all_proteins"]], "all_refs() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.all_refs"]], "annotate_complex() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.annotate_complex"]], "browse() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.browse"]], "complex_inference() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.complex_inference"]], "coverage() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.coverage"]], "curation_effort() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.curation_effort"]], "get_names() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.get_names"]], "get_reference_set() (pypath.core.annot.phobius static method)": [[70, "pypath.core.annot.Phobius.get_reference_set"]], "get_subset() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.get_subset"]], "get_subset_bool_array() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.get_subset_bool_array"]], "get_values() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.get_values"]], "labels() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.labels"]], "load() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.load"]], "load_data() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.load_data"]], "load_proteins() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.load_proteins"]], "make_df() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.make_df"]], "numof_entities() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.numof_entities"]], "numof_records() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.numof_records"]], "numof_references() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.numof_references"]], "process() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.process"]], "reload() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.reload"]], "select() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.select"]], "set_method() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.set_method"]], "set_reference_set() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.set_reference_set"]], "show() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.show"]], "subset_intersection() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.subset_intersection"]], "to_array() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.to_array"]], "to_bool_array() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.to_bool_array"]], "to_set() (pypath.core.annot.phobius method)": [[70, "pypath.core.annot.Phobius.to_set"]], "phosphatome (class in pypath.core.annot)": [[71, "pypath.core.annot.Phosphatome"]], "__init__() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.__init__"]], "add_complexes_by_inference() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.all_complexes"]], "all_entities() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.all_entities"]], "all_mirnas() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.all_mirnas"]], "all_proteins() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.all_proteins"]], "all_refs() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.all_refs"]], "annotate_complex() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.annotate_complex"]], "browse() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.browse"]], "complex_inference() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.complex_inference"]], "coverage() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.coverage"]], "curation_effort() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.curation_effort"]], "get_names() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.get_names"]], "get_reference_set() (pypath.core.annot.phosphatome static method)": [[71, "pypath.core.annot.Phosphatome.get_reference_set"]], "get_subset() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.get_subset"]], "get_subset_bool_array() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.get_subset_bool_array"]], "get_values() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.get_values"]], "labels() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.labels"]], "load() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.load"]], "load_data() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.load_data"]], "load_proteins() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.load_proteins"]], "make_df() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.make_df"]], "numof_entities() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.numof_entities"]], "numof_records() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.numof_records"]], "numof_references() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.numof_references"]], "process() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.process"]], "reload() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.reload"]], "select() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.select"]], "set_method() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.set_method"]], "set_reference_set() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.set_reference_set"]], "show() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.show"]], "subset_intersection() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.subset_intersection"]], "to_array() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.to_array"]], "to_bool_array() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.to_bool_array"]], "to_set() (pypath.core.annot.phosphatome method)": [[71, "pypath.core.annot.Phosphatome.to_set"]], "progeny (class in pypath.core.annot)": [[72, "pypath.core.annot.Progeny"]], "__init__() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.__init__"]], "add_complexes_by_inference() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.all_complexes"]], "all_entities() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.all_entities"]], "all_mirnas() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.all_mirnas"]], "all_proteins() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.all_proteins"]], "all_refs() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.all_refs"]], "annotate_complex() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.annotate_complex"]], "browse() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.browse"]], "complex_inference() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.complex_inference"]], "coverage() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.coverage"]], "curation_effort() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.curation_effort"]], "get_names() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.get_names"]], "get_reference_set() (pypath.core.annot.progeny static method)": [[72, "pypath.core.annot.Progeny.get_reference_set"]], "get_subset() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.get_subset"]], "get_subset_bool_array() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.get_subset_bool_array"]], "get_values() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.get_values"]], "labels() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.labels"]], "load() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.load"]], "load_data() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.load_data"]], "load_proteins() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.load_proteins"]], "make_df() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.make_df"]], "numof_entities() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.numof_entities"]], "numof_records() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.numof_records"]], "numof_references() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.numof_references"]], "process() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.process"]], "reload() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.reload"]], "select() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.select"]], "set_method() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.set_method"]], "set_reference_set() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.set_reference_set"]], "show() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.show"]], "subset_intersection() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.subset_intersection"]], "to_array() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.to_array"]], "to_bool_array() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.to_bool_array"]], "to_set() (pypath.core.annot.progeny method)": [[72, "pypath.core.annot.Progeny.to_set"]], "ramilowski2015 (class in pypath.core.annot)": [[73, "pypath.core.annot.Ramilowski2015"]], "__init__() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.__init__"]], "add_complexes_by_inference() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.all_complexes"]], "all_entities() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.all_entities"]], "all_mirnas() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.all_mirnas"]], "all_proteins() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.all_proteins"]], "all_refs() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.all_refs"]], "annotate_complex() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.annotate_complex"]], "browse() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.browse"]], "complex_inference() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.complex_inference"]], "coverage() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.coverage"]], "curation_effort() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.curation_effort"]], "get_names() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.get_names"]], "get_reference_set() (pypath.core.annot.ramilowski2015 static method)": [[73, "pypath.core.annot.Ramilowski2015.get_reference_set"]], "get_subset() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.get_subset"]], "get_subset_bool_array() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.get_subset_bool_array"]], "get_values() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.get_values"]], "labels() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.labels"]], "load() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.load"]], "load_data() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.load_data"]], "load_proteins() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.load_proteins"]], "make_df() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.make_df"]], "numof_entities() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.numof_entities"]], "numof_records() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.numof_records"]], "numof_references() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.numof_references"]], "process() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.process"]], "reload() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.reload"]], "select() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.select"]], "set_method() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.set_method"]], "set_reference_set() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.set_reference_set"]], "show() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.show"]], "subset_intersection() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.subset_intersection"]], "to_array() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.to_array"]], "to_bool_array() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.to_bool_array"]], "to_set() (pypath.core.annot.ramilowski2015 method)": [[73, "pypath.core.annot.Ramilowski2015.to_set"]], "ramilowski2015location (class in pypath.core.annot)": [[74, "pypath.core.annot.Ramilowski2015Location"]], "__init__() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.__init__"]], "add_complexes_by_inference() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.all_complexes"]], "all_entities() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.all_entities"]], "all_mirnas() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.all_mirnas"]], "all_proteins() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.all_proteins"]], "all_refs() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.all_refs"]], "annotate_complex() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.annotate_complex"]], "browse() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.browse"]], "complex_inference() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.complex_inference"]], "coverage() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.coverage"]], "curation_effort() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.curation_effort"]], "get_names() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.get_names"]], "get_reference_set() (pypath.core.annot.ramilowski2015location static method)": [[74, "pypath.core.annot.Ramilowski2015Location.get_reference_set"]], "get_subset() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.get_subset"]], "get_subset_bool_array() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.get_subset_bool_array"]], "get_values() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.get_values"]], "labels() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.labels"]], "load() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.load"]], "load_data() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.load_data"]], "load_proteins() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.load_proteins"]], "make_df() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.make_df"]], "numof_entities() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.numof_entities"]], "numof_records() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.numof_records"]], "numof_references() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.numof_references"]], "process() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.process"]], "reload() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.reload"]], "select() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.select"]], "set_method() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.set_method"]], "set_reference_set() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.set_reference_set"]], "show() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.show"]], "subset_intersection() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.subset_intersection"]], "to_array() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.to_array"]], "to_bool_array() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.to_bool_array"]], "to_set() (pypath.core.annot.ramilowski2015location method)": [[74, "pypath.core.annot.Ramilowski2015Location.to_set"]], "scconnect (class in pypath.core.annot)": [[75, "pypath.core.annot.Scconnect"]], "__init__() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.__init__"]], "add_complexes_by_inference() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.all_complexes"]], "all_entities() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.all_entities"]], "all_mirnas() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.all_mirnas"]], "all_proteins() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.all_proteins"]], "all_refs() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.all_refs"]], "annotate_complex() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.annotate_complex"]], "browse() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.browse"]], "complex_inference() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.complex_inference"]], "coverage() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.coverage"]], "curation_effort() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.curation_effort"]], "get_names() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.get_names"]], "get_reference_set() (pypath.core.annot.scconnect static method)": [[75, "pypath.core.annot.Scconnect.get_reference_set"]], "get_subset() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.get_subset"]], "get_subset_bool_array() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.get_subset_bool_array"]], "get_values() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.get_values"]], "labels() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.labels"]], "load() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.load"]], "load_data() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.load_data"]], "load_proteins() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.load_proteins"]], "make_df() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.make_df"]], "numof_entities() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.numof_entities"]], "numof_records() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.numof_records"]], "numof_references() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.numof_references"]], "process() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.process"]], "reload() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.reload"]], "select() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.select"]], "set_method() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.set_method"]], "set_reference_set() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.set_reference_set"]], "show() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.show"]], "subset_intersection() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.subset_intersection"]], "to_array() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.to_array"]], "to_bool_array() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.to_bool_array"]], "to_set() (pypath.core.annot.scconnect method)": [[75, "pypath.core.annot.Scconnect.to_set"]], "scconnectcomplex (class in pypath.core.annot)": [[76, "pypath.core.annot.ScconnectComplex"]], "__init__() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.__init__"]], "add_complexes_by_inference() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.all_complexes"]], "all_entities() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.all_entities"]], "all_mirnas() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.all_mirnas"]], "all_proteins() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.all_proteins"]], "all_refs() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.all_refs"]], "annotate_complex() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.annotate_complex"]], "browse() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.browse"]], "complex_inference() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.complex_inference"]], "coverage() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.coverage"]], "curation_effort() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.curation_effort"]], "get_names() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.get_names"]], "get_reference_set() (pypath.core.annot.scconnectcomplex static method)": [[76, "pypath.core.annot.ScconnectComplex.get_reference_set"]], "get_subset() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.get_subset"]], "get_subset_bool_array() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.get_subset_bool_array"]], "get_values() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.get_values"]], "labels() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.labels"]], "load() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.load"]], "load_data() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.load_data"]], "load_proteins() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.load_proteins"]], "make_df() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.make_df"]], "numof_entities() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.numof_entities"]], "numof_records() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.numof_records"]], "numof_references() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.numof_references"]], "process() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.process"]], "reload() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.reload"]], "select() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.select"]], "set_method() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.set_method"]], "set_reference_set() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.set_reference_set"]], "show() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.show"]], "subset_intersection() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.subset_intersection"]], "to_array() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.to_array"]], "to_bool_array() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.to_bool_array"]], "to_set() (pypath.core.annot.scconnectcomplex method)": [[76, "pypath.core.annot.ScconnectComplex.to_set"]], "signalinkfunctions (class in pypath.core.annot)": [[77, "pypath.core.annot.SignalinkFunctions"]], "__init__() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.__init__"]], "add_complexes_by_inference() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.all_complexes"]], "all_entities() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.all_entities"]], "all_mirnas() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.all_mirnas"]], "all_proteins() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.all_proteins"]], "all_refs() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.all_refs"]], "annotate_complex() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.annotate_complex"]], "browse() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.browse"]], "complex_inference() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.complex_inference"]], "coverage() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.coverage"]], "curation_effort() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.curation_effort"]], "get_names() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.get_names"]], "get_reference_set() (pypath.core.annot.signalinkfunctions static method)": [[77, "pypath.core.annot.SignalinkFunctions.get_reference_set"]], "get_subset() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.get_subset"]], "get_subset_bool_array() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.get_subset_bool_array"]], "get_values() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.get_values"]], "labels() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.labels"]], "load() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.load"]], "load_data() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.load_data"]], "load_proteins() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.load_proteins"]], "make_df() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.make_df"]], "numof_entities() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.numof_entities"]], "numof_records() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.numof_records"]], "numof_references() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.numof_references"]], "process() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.process"]], "reload() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.reload"]], "select() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.select"]], "set_method() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.set_method"]], "set_reference_set() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.set_reference_set"]], "show() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.show"]], "subset_intersection() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.subset_intersection"]], "to_array() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.to_array"]], "to_bool_array() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.to_bool_array"]], "to_set() (pypath.core.annot.signalinkfunctions method)": [[77, "pypath.core.annot.SignalinkFunctions.to_set"]], "signalinkpathways (class in pypath.core.annot)": [[78, "pypath.core.annot.SignalinkPathways"]], "__init__() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.__init__"]], "add_complexes_by_inference() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.all_complexes"]], "all_entities() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.all_entities"]], "all_mirnas() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.all_mirnas"]], "all_proteins() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.all_proteins"]], "all_refs() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.all_refs"]], "annotate_complex() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.annotate_complex"]], "browse() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.browse"]], "complex_inference() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.complex_inference"]], "coverage() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.coverage"]], "curation_effort() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.curation_effort"]], "get_names() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.get_names"]], "get_reference_set() (pypath.core.annot.signalinkpathways static method)": [[78, "pypath.core.annot.SignalinkPathways.get_reference_set"]], "get_subset() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.get_subset"]], "get_subset_bool_array() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.get_subset_bool_array"]], "get_values() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.get_values"]], "labels() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.labels"]], "load() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.load"]], "load_data() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.load_data"]], "load_proteins() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.load_proteins"]], "make_df() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.make_df"]], "numof_entities() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.numof_entities"]], "numof_records() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.numof_records"]], "numof_references() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.numof_references"]], "process() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.process"]], "reload() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.reload"]], "select() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.select"]], "set_method() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.set_method"]], "set_reference_set() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.set_reference_set"]], "show() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.show"]], "subset_intersection() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.subset_intersection"]], "to_array() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.to_array"]], "to_bool_array() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.to_bool_array"]], "to_set() (pypath.core.annot.signalinkpathways method)": [[78, "pypath.core.annot.SignalinkPathways.to_set"]], "signorpathways (class in pypath.core.annot)": [[79, "pypath.core.annot.SignorPathways"]], "__init__() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.__init__"]], "add_complexes_by_inference() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.all_complexes"]], "all_entities() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.all_entities"]], "all_mirnas() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.all_mirnas"]], "all_proteins() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.all_proteins"]], "all_refs() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.all_refs"]], "annotate_complex() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.annotate_complex"]], "browse() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.browse"]], "complex_inference() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.complex_inference"]], "coverage() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.coverage"]], "curation_effort() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.curation_effort"]], "get_names() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.get_names"]], "get_reference_set() (pypath.core.annot.signorpathways static method)": [[79, "pypath.core.annot.SignorPathways.get_reference_set"]], "get_subset() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.get_subset"]], "get_subset_bool_array() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.get_subset_bool_array"]], "get_values() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.get_values"]], "labels() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.labels"]], "load() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.load"]], "load_data() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.load_data"]], "load_proteins() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.load_proteins"]], "make_df() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.make_df"]], "numof_entities() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.numof_entities"]], "numof_records() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.numof_records"]], "numof_references() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.numof_references"]], "process() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.process"]], "reload() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.reload"]], "select() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.select"]], "set_method() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.set_method"]], "set_reference_set() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.set_reference_set"]], "show() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.show"]], "subset_intersection() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.subset_intersection"]], "to_array() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.to_array"]], "to_bool_array() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.to_bool_array"]], "to_set() (pypath.core.annot.signorpathways method)": [[79, "pypath.core.annot.SignorPathways.to_set"]], "surfaceome (class in pypath.core.annot)": [[80, "pypath.core.annot.Surfaceome"]], "__init__() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.__init__"]], "add_complexes_by_inference() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.all_complexes"]], "all_entities() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.all_entities"]], "all_mirnas() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.all_mirnas"]], "all_proteins() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.all_proteins"]], "all_refs() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.all_refs"]], "annotate_complex() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.annotate_complex"]], "browse() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.browse"]], "complex_inference() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.complex_inference"]], "coverage() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.coverage"]], "curation_effort() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.curation_effort"]], "get_names() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.get_names"]], "get_reference_set() (pypath.core.annot.surfaceome static method)": [[80, "pypath.core.annot.Surfaceome.get_reference_set"]], "get_subset() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.get_subset"]], "get_subset_bool_array() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.get_subset_bool_array"]], "get_values() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.get_values"]], "labels() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.labels"]], "load() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.load"]], "load_data() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.load_data"]], "load_proteins() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.load_proteins"]], "make_df() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.make_df"]], "numof_entities() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.numof_entities"]], "numof_records() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.numof_records"]], "numof_references() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.numof_references"]], "process() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.process"]], "reload() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.reload"]], "select() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.select"]], "set_method() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.set_method"]], "set_reference_set() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.set_reference_set"]], "show() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.show"]], "subset_intersection() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.subset_intersection"]], "to_array() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.to_array"]], "to_bool_array() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.to_bool_array"]], "to_set() (pypath.core.annot.surfaceome method)": [[80, "pypath.core.annot.Surfaceome.to_set"]], "talklr (class in pypath.core.annot)": [[81, "pypath.core.annot.Talklr"]], "__init__() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.__init__"]], "add_complexes_by_inference() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.all_complexes"]], "all_entities() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.all_entities"]], "all_mirnas() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.all_mirnas"]], "all_proteins() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.all_proteins"]], "all_refs() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.all_refs"]], "annotate_complex() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.annotate_complex"]], "browse() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.browse"]], "complex_inference() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.complex_inference"]], "coverage() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.coverage"]], "curation_effort() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.curation_effort"]], "get_names() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.get_names"]], "get_reference_set() (pypath.core.annot.talklr static method)": [[81, "pypath.core.annot.Talklr.get_reference_set"]], "get_subset() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.get_subset"]], "get_subset_bool_array() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.get_subset_bool_array"]], "get_values() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.get_values"]], "labels() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.labels"]], "load() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.load"]], "load_data() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.load_data"]], "load_proteins() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.load_proteins"]], "make_df() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.make_df"]], "numof_entities() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.numof_entities"]], "numof_records() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.numof_records"]], "numof_references() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.numof_references"]], "process() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.process"]], "reload() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.reload"]], "select() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.select"]], "set_method() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.set_method"]], "set_reference_set() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.set_reference_set"]], "show() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.show"]], "subset_intersection() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.subset_intersection"]], "to_array() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.to_array"]], "to_bool_array() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.to_bool_array"]], "to_set() (pypath.core.annot.talklr method)": [[81, "pypath.core.annot.Talklr.to_set"]], "tcdb (class in pypath.core.annot)": [[82, "pypath.core.annot.Tcdb"]], "__init__() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.__init__"]], "add_complexes_by_inference() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.all_complexes"]], "all_entities() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.all_entities"]], "all_mirnas() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.all_mirnas"]], "all_proteins() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.all_proteins"]], "all_refs() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.all_refs"]], "annotate_complex() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.annotate_complex"]], "browse() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.browse"]], "complex_inference() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.complex_inference"]], "coverage() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.coverage"]], "curation_effort() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.curation_effort"]], "get_names() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.get_names"]], "get_reference_set() (pypath.core.annot.tcdb static method)": [[82, "pypath.core.annot.Tcdb.get_reference_set"]], "get_subset() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.get_subset"]], "get_subset_bool_array() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.get_subset_bool_array"]], "get_values() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.get_values"]], "labels() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.labels"]], "load() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.load"]], "load_data() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.load_data"]], "load_proteins() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.load_proteins"]], "make_df() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.make_df"]], "numof_entities() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.numof_entities"]], "numof_records() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.numof_records"]], "numof_references() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.numof_references"]], "process() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.process"]], "reload() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.reload"]], "select() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.select"]], "set_method() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.set_method"]], "set_reference_set() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.set_reference_set"]], "show() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.show"]], "subset_intersection() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.subset_intersection"]], "to_array() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.to_array"]], "to_bool_array() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.to_bool_array"]], "to_set() (pypath.core.annot.tcdb method)": [[82, "pypath.core.annot.Tcdb.to_set"]], "tfcensus (class in pypath.core.annot)": [[83, "pypath.core.annot.Tfcensus"]], "__init__() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.__init__"]], "add_complexes_by_inference() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.all_complexes"]], "all_entities() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.all_entities"]], "all_mirnas() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.all_mirnas"]], "all_proteins() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.all_proteins"]], "all_refs() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.all_refs"]], "annotate_complex() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.annotate_complex"]], "browse() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.browse"]], "complex_inference() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.complex_inference"]], "coverage() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.coverage"]], "curation_effort() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.curation_effort"]], "get_names() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.get_names"]], "get_reference_set() (pypath.core.annot.tfcensus static method)": [[83, "pypath.core.annot.Tfcensus.get_reference_set"]], "get_subset() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.get_subset"]], "get_subset_bool_array() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.get_subset_bool_array"]], "get_values() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.get_values"]], "labels() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.labels"]], "load() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.load"]], "load_data() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.load_data"]], "load_proteins() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.load_proteins"]], "make_df() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.make_df"]], "numof_entities() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.numof_entities"]], "numof_records() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.numof_records"]], "numof_references() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.numof_references"]], "process() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.process"]], "reload() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.reload"]], "select() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.select"]], "set_method() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.set_method"]], "set_reference_set() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.set_reference_set"]], "show() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.show"]], "subset_intersection() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.subset_intersection"]], "to_array() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.to_array"]], "to_bool_array() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.to_bool_array"]], "to_set() (pypath.core.annot.tfcensus method)": [[83, "pypath.core.annot.Tfcensus.to_set"]], "topdb (class in pypath.core.annot)": [[84, "pypath.core.annot.Topdb"]], "__init__() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.__init__"]], "add_complexes_by_inference() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.all_complexes"]], "all_entities() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.all_entities"]], "all_mirnas() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.all_mirnas"]], "all_proteins() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.all_proteins"]], "all_refs() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.all_refs"]], "annotate_complex() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.annotate_complex"]], "browse() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.browse"]], "complex_inference() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.complex_inference"]], "coverage() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.coverage"]], "curation_effort() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.curation_effort"]], "get_names() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.get_names"]], "get_reference_set() (pypath.core.annot.topdb static method)": [[84, "pypath.core.annot.Topdb.get_reference_set"]], "get_subset() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.get_subset"]], "get_subset_bool_array() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.get_subset_bool_array"]], "get_values() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.get_values"]], "labels() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.labels"]], "load() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.load"]], "load_data() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.load_data"]], "load_proteins() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.load_proteins"]], "make_df() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.make_df"]], "numof_entities() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.numof_entities"]], "numof_records() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.numof_records"]], "numof_references() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.numof_references"]], "process() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.process"]], "reload() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.reload"]], "select() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.select"]], "set_method() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.set_method"]], "set_reference_set() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.set_reference_set"]], "show() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.show"]], "subset_intersection() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.subset_intersection"]], "to_array() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.to_array"]], "to_bool_array() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.to_bool_array"]], "to_set() (pypath.core.annot.topdb method)": [[84, "pypath.core.annot.Topdb.to_set"]], "uniprotfamilies (class in pypath.core.annot)": [[85, "pypath.core.annot.UniprotFamilies"]], "__init__() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.__init__"]], "add_complexes_by_inference() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.all_complexes"]], "all_entities() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.all_entities"]], "all_mirnas() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.all_mirnas"]], "all_proteins() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.all_proteins"]], "all_refs() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.all_refs"]], "annotate_complex() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.annotate_complex"]], "browse() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.browse"]], "complex_inference() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.complex_inference"]], "coverage() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.coverage"]], "curation_effort() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.curation_effort"]], "get_names() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.get_names"]], "get_reference_set() (pypath.core.annot.uniprotfamilies static method)": [[85, "pypath.core.annot.UniprotFamilies.get_reference_set"]], "get_subset() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.get_subset"]], "get_subset_bool_array() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.get_subset_bool_array"]], "get_values() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.get_values"]], "labels() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.labels"]], "load() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.load"]], "load_data() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.load_data"]], "load_proteins() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.load_proteins"]], "make_df() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.make_df"]], "numof_entities() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.numof_entities"]], "numof_records() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.numof_records"]], "numof_references() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.numof_references"]], "process() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.process"]], "reload() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.reload"]], "select() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.select"]], "set_method() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.set_method"]], "set_reference_set() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.set_reference_set"]], "show() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.show"]], "subset_intersection() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.subset_intersection"]], "to_array() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.to_array"]], "to_bool_array() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.to_bool_array"]], "to_set() (pypath.core.annot.uniprotfamilies method)": [[85, "pypath.core.annot.UniprotFamilies.to_set"]], "uniprotkeywords (class in pypath.core.annot)": [[86, "pypath.core.annot.UniprotKeywords"]], "__init__() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.__init__"]], "add_complexes_by_inference() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.all_complexes"]], "all_entities() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.all_entities"]], "all_mirnas() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.all_mirnas"]], "all_proteins() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.all_proteins"]], "all_refs() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.all_refs"]], "annotate_complex() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.annotate_complex"]], "browse() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.browse"]], "complex_inference() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.complex_inference"]], "coverage() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.coverage"]], "curation_effort() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.curation_effort"]], "get_names() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.get_names"]], "get_reference_set() (pypath.core.annot.uniprotkeywords static method)": [[86, "pypath.core.annot.UniprotKeywords.get_reference_set"]], "get_subset() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.get_subset"]], "get_subset_bool_array() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.get_subset_bool_array"]], "get_values() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.get_values"]], "labels() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.labels"]], "load() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.load"]], "load_data() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.load_data"]], "load_proteins() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.load_proteins"]], "make_df() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.make_df"]], "numof_entities() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.numof_entities"]], "numof_records() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.numof_records"]], "numof_references() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.numof_references"]], "process() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.process"]], "reload() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.reload"]], "select() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.select"]], "set_method() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.set_method"]], "set_reference_set() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.set_reference_set"]], "show() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.show"]], "subset_intersection() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.subset_intersection"]], "to_array() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.to_array"]], "to_bool_array() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.to_bool_array"]], "to_set() (pypath.core.annot.uniprotkeywords method)": [[86, "pypath.core.annot.UniprotKeywords.to_set"]], "uniprotlocations (class in pypath.core.annot)": [[87, "pypath.core.annot.UniprotLocations"]], "__init__() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.__init__"]], "add_complexes_by_inference() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.all_complexes"]], "all_entities() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.all_entities"]], "all_mirnas() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.all_mirnas"]], "all_proteins() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.all_proteins"]], "all_refs() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.all_refs"]], "annotate_complex() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.annotate_complex"]], "browse() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.browse"]], "complex_inference() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.complex_inference"]], "coverage() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.coverage"]], "curation_effort() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.curation_effort"]], "get_names() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.get_names"]], "get_reference_set() (pypath.core.annot.uniprotlocations static method)": [[87, "pypath.core.annot.UniprotLocations.get_reference_set"]], "get_subset() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.get_subset"]], "get_subset_bool_array() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.get_subset_bool_array"]], "get_values() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.get_values"]], "labels() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.labels"]], "load() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.load"]], "load_data() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.load_data"]], "load_proteins() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.load_proteins"]], "make_df() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.make_df"]], "numof_entities() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.numof_entities"]], "numof_records() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.numof_records"]], "numof_references() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.numof_references"]], "process() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.process"]], "reload() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.reload"]], "select() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.select"]], "set_method() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.set_method"]], "set_reference_set() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.set_reference_set"]], "show() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.show"]], "subset_intersection() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.subset_intersection"]], "to_array() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.to_array"]], "to_bool_array() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.to_bool_array"]], "to_set() (pypath.core.annot.uniprotlocations method)": [[87, "pypath.core.annot.UniprotLocations.to_set"]], "uniprottissues (class in pypath.core.annot)": [[88, "pypath.core.annot.UniprotTissues"]], "__init__() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.__init__"]], "add_complexes_by_inference() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.all_complexes"]], "all_entities() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.all_entities"]], "all_mirnas() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.all_mirnas"]], "all_proteins() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.all_proteins"]], "all_refs() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.all_refs"]], "annotate_complex() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.annotate_complex"]], "browse() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.browse"]], "complex_inference() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.complex_inference"]], "coverage() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.coverage"]], "curation_effort() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.curation_effort"]], "get_names() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.get_names"]], "get_reference_set() (pypath.core.annot.uniprottissues static method)": [[88, "pypath.core.annot.UniprotTissues.get_reference_set"]], "get_subset() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.get_subset"]], "get_subset_bool_array() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.get_subset_bool_array"]], "get_values() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.get_values"]], "labels() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.labels"]], "load() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.load"]], "load_data() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.load_data"]], "load_proteins() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.load_proteins"]], "make_df() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.make_df"]], "numof_entities() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.numof_entities"]], "numof_records() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.numof_records"]], "numof_references() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.numof_references"]], "process() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.process"]], "reload() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.reload"]], "select() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.select"]], "set_method() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.set_method"]], "set_reference_set() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.set_reference_set"]], "show() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.show"]], "subset_intersection() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.subset_intersection"]], "to_array() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.to_array"]], "to_bool_array() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.to_bool_array"]], "to_set() (pypath.core.annot.uniprottissues method)": [[88, "pypath.core.annot.UniprotTissues.to_set"]], "uniprottopologies (class in pypath.core.annot)": [[89, "pypath.core.annot.UniprotTopologies"]], "__init__() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.__init__"]], "add_complexes_by_inference() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.all_complexes"]], "all_entities() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.all_entities"]], "all_mirnas() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.all_mirnas"]], "all_proteins() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.all_proteins"]], "all_refs() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.all_refs"]], "annotate_complex() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.annotate_complex"]], "browse() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.browse"]], "complex_inference() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.complex_inference"]], "coverage() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.coverage"]], "curation_effort() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.curation_effort"]], "get_names() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.get_names"]], "get_reference_set() (pypath.core.annot.uniprottopologies static method)": [[89, "pypath.core.annot.UniprotTopologies.get_reference_set"]], "get_subset() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.get_subset"]], "get_subset_bool_array() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.get_subset_bool_array"]], "get_values() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.get_values"]], "labels() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.labels"]], "load() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.load"]], "load_data() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.load_data"]], "load_proteins() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.load_proteins"]], "make_df() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.make_df"]], "numof_entities() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.numof_entities"]], "numof_records() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.numof_records"]], "numof_references() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.numof_references"]], "process() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.process"]], "reload() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.reload"]], "select() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.select"]], "set_method() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.set_method"]], "set_reference_set() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.set_reference_set"]], "show() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.show"]], "subset_intersection() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.subset_intersection"]], "to_array() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.to_array"]], "to_bool_array() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.to_bool_array"]], "to_set() (pypath.core.annot.uniprottopologies method)": [[89, "pypath.core.annot.UniprotTopologies.to_set"]], "vesiclepedia (class in pypath.core.annot)": [[90, "pypath.core.annot.Vesiclepedia"]], "__init__() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.__init__"]], "add_complexes_by_inference() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.all_complexes"]], "all_entities() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.all_entities"]], "all_mirnas() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.all_mirnas"]], "all_proteins() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.all_proteins"]], "all_refs() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.all_refs"]], "annotate_complex() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.annotate_complex"]], "browse() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.browse"]], "complex_inference() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.complex_inference"]], "coverage() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.coverage"]], "curation_effort() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.curation_effort"]], "get_names() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.get_names"]], "get_reference_set() (pypath.core.annot.vesiclepedia static method)": [[90, "pypath.core.annot.Vesiclepedia.get_reference_set"]], "get_subset() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.get_subset"]], "get_subset_bool_array() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.get_subset_bool_array"]], "get_values() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.get_values"]], "labels() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.labels"]], "load() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.load"]], "load_data() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.load_data"]], "load_proteins() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.load_proteins"]], "make_df() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.make_df"]], "numof_entities() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.numof_entities"]], "numof_records() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.numof_records"]], "numof_references() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.numof_references"]], "process() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.process"]], "reload() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.reload"]], "select() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.select"]], "set_method() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.set_method"]], "set_reference_set() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.set_reference_set"]], "show() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.show"]], "subset_intersection() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.subset_intersection"]], "to_array() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.to_array"]], "to_bool_array() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.to_bool_array"]], "to_set() (pypath.core.annot.vesiclepedia method)": [[90, "pypath.core.annot.Vesiclepedia.to_set"]], "wang (class in pypath.core.annot)": [[91, "pypath.core.annot.Wang"]], "__init__() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.__init__"]], "add_complexes_by_inference() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.all_complexes"]], "all_entities() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.all_entities"]], "all_mirnas() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.all_mirnas"]], "all_proteins() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.all_proteins"]], "all_refs() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.all_refs"]], "annotate_complex() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.annotate_complex"]], "browse() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.browse"]], "complex_inference() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.complex_inference"]], "coverage() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.coverage"]], "curation_effort() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.curation_effort"]], "get_names() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.get_names"]], "get_reference_set() (pypath.core.annot.wang static method)": [[91, "pypath.core.annot.Wang.get_reference_set"]], "get_subset() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.get_subset"]], "get_subset_bool_array() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.get_subset_bool_array"]], "get_values() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.get_values"]], "labels() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.labels"]], "load() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.load"]], "load_data() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.load_data"]], "load_proteins() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.load_proteins"]], "make_df() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.make_df"]], "numof_entities() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.numof_entities"]], "numof_records() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.numof_records"]], "numof_references() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.numof_references"]], "process() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.process"]], "reload() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.reload"]], "select() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.select"]], "set_method() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.set_method"]], "set_reference_set() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.set_reference_set"]], "show() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.show"]], "subset_intersection() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.subset_intersection"]], "to_array() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.to_array"]], "to_bool_array() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.to_bool_array"]], "to_set() (pypath.core.annot.wang method)": [[91, "pypath.core.annot.Wang.to_set"]], "zhong2015 (class in pypath.core.annot)": [[92, "pypath.core.annot.Zhong2015"]], "__init__() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.__init__"]], "add_complexes_by_inference() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.add_complexes_by_inference"]], "all_complexes() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.all_complexes"]], "all_entities() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.all_entities"]], "all_mirnas() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.all_mirnas"]], "all_proteins() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.all_proteins"]], "all_refs() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.all_refs"]], "annotate_complex() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.annotate_complex"]], "browse() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.browse"]], "complex_inference() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.complex_inference"]], "coverage() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.coverage"]], "curation_effort() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.curation_effort"]], "get_names() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.get_names"]], "get_reference_set() (pypath.core.annot.zhong2015 static method)": [[92, "pypath.core.annot.Zhong2015.get_reference_set"]], "get_subset() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.get_subset"]], "get_subset_bool_array() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.get_subset_bool_array"]], "get_values() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.get_values"]], "labels() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.labels"]], "load() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.load"]], "load_data() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.load_data"]], "load_proteins() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.load_proteins"]], "make_df() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.make_df"]], "numof_entities() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.numof_entities"]], "numof_records() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.numof_records"]], "numof_references() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.numof_references"]], "process() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.process"]], "reload() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.reload"]], "select() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.select"]], "set_method() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.set_method"]], "set_reference_set() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.set_reference_set"]], "show() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.show"]], "subset_intersection() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.subset_intersection"]], "to_array() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.to_array"]], "to_bool_array() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.to_bool_array"]], "to_set() (pypath.core.annot.zhong2015 method)": [[92, "pypath.core.annot.Zhong2015.to_set"]], "get_db() (in module pypath.core.annot)": [[93, "pypath.core.annot.get_db"]], "init_db() (in module pypath.core.annot)": [[94, "pypath.core.annot.init_db"]], "pypath.core.attrs": [[95, "module-pypath.core.attrs"]], "attributehandler (class in pypath.core.attrs)": [[96, "pypath.core.attrs.AttributeHandler"]], "__init__() (pypath.core.attrs.attributehandler method)": [[96, "pypath.core.attrs.AttributeHandler.__init__"]], "serialize() (pypath.core.attrs.attributehandler method)": [[96, "pypath.core.attrs.AttributeHandler.serialize"]], "update_attrs() (pypath.core.attrs.attributehandler method)": [[96, "pypath.core.attrs.AttributeHandler.update_attrs"]], "pypath.core.common": [[97, "module-pypath.core.common"]], "filter_network_df() (in module pypath.core.common)": [[98, "pypath.core.common.filter_network_df"]], "pypath.core.complex": [[99, "module-pypath.core.complex"]], "abstractcomplexresource (class in pypath.core.complex)": [[100, "pypath.core.complex.AbstractComplexResource"]], "__init__() (pypath.core.complex.abstractcomplexresource method)": [[100, "pypath.core.complex.AbstractComplexResource.__init__"]], "load_data() (pypath.core.complex.abstractcomplexresource method)": [[100, "pypath.core.complex.AbstractComplexResource.load_data"]], "process() (pypath.core.complex.abstractcomplexresource method)": [[100, "pypath.core.complex.AbstractComplexResource.process"]], "set_method() (pypath.core.complex.abstractcomplexresource method)": [[100, "pypath.core.complex.AbstractComplexResource.set_method"]], "cellphonedb (class in pypath.core.complex)": [[101, "pypath.core.complex.CellPhoneDB"]], "__init__() (pypath.core.complex.cellphonedb method)": [[101, "pypath.core.complex.CellPhoneDB.__init__"]], "load_data() (pypath.core.complex.cellphonedb method)": [[101, "pypath.core.complex.CellPhoneDB.load_data"]], "process() (pypath.core.complex.cellphonedb method)": [[101, "pypath.core.complex.CellPhoneDB.process"]], "set_method() (pypath.core.complex.cellphonedb method)": [[101, "pypath.core.complex.CellPhoneDB.set_method"]], "cellchatdb (class in pypath.core.complex)": [[102, "pypath.core.complex.Cellchatdb"]], "__init__() (pypath.core.complex.cellchatdb method)": [[102, "pypath.core.complex.Cellchatdb.__init__"]], "load_data() (pypath.core.complex.cellchatdb method)": [[102, "pypath.core.complex.Cellchatdb.load_data"]], "process() (pypath.core.complex.cellchatdb method)": [[102, "pypath.core.complex.Cellchatdb.process"]], "set_method() (pypath.core.complex.cellchatdb method)": [[102, "pypath.core.complex.Cellchatdb.set_method"]], "cellinker (class in pypath.core.complex)": [[103, "pypath.core.complex.Cellinker"]], "__init__() (pypath.core.complex.cellinker method)": [[103, "pypath.core.complex.Cellinker.__init__"]], "load_data() (pypath.core.complex.cellinker method)": [[103, "pypath.core.complex.Cellinker.load_data"]], "process() (pypath.core.complex.cellinker method)": [[103, "pypath.core.complex.Cellinker.process"]], "set_method() (pypath.core.complex.cellinker method)": [[103, "pypath.core.complex.Cellinker.set_method"]], "compleat (class in pypath.core.complex)": [[104, "pypath.core.complex.Compleat"]], "__init__() (pypath.core.complex.compleat method)": [[104, "pypath.core.complex.Compleat.__init__"]], "load_data() (pypath.core.complex.compleat method)": [[104, "pypath.core.complex.Compleat.load_data"]], "process() (pypath.core.complex.compleat method)": [[104, "pypath.core.complex.Compleat.process"]], "set_method() (pypath.core.complex.compleat method)": [[104, "pypath.core.complex.Compleat.set_method"]], "complexaggregator (class in pypath.core.complex)": [[105, "pypath.core.complex.ComplexAggregator"]], "__init__() (pypath.core.complex.complexaggregator method)": [[105, "pypath.core.complex.ComplexAggregator.__init__"]], "load_data() (pypath.core.complex.complexaggregator method)": [[105, "pypath.core.complex.ComplexAggregator.load_data"]], "process() (pypath.core.complex.complexaggregator method)": [[105, "pypath.core.complex.ComplexAggregator.process"]], "reload() (pypath.core.complex.complexaggregator method)": [[105, "pypath.core.complex.ComplexAggregator.reload"]], "set_method() (pypath.core.complex.complexaggregator method)": [[105, "pypath.core.complex.ComplexAggregator.set_method"]], "complexportal (class in pypath.core.complex)": [[106, "pypath.core.complex.ComplexPortal"]], "__init__() (pypath.core.complex.complexportal method)": [[106, "pypath.core.complex.ComplexPortal.__init__"]], "load_data() (pypath.core.complex.complexportal method)": [[106, "pypath.core.complex.ComplexPortal.load_data"]], "process() (pypath.core.complex.complexportal method)": [[106, "pypath.core.complex.ComplexPortal.process"]], "set_method() (pypath.core.complex.complexportal method)": [[106, "pypath.core.complex.ComplexPortal.set_method"]], "corum (class in pypath.core.complex)": [[107, "pypath.core.complex.Corum"]], "__init__() (pypath.core.complex.corum method)": [[107, "pypath.core.complex.Corum.__init__"]], "load_data() (pypath.core.complex.corum method)": [[107, "pypath.core.complex.Corum.load_data"]], "process() (pypath.core.complex.corum method)": [[107, "pypath.core.complex.Corum.process"]], "set_method() (pypath.core.complex.corum method)": [[107, "pypath.core.complex.Corum.set_method"]], "guidetopharmacology (class in pypath.core.complex)": [[108, "pypath.core.complex.GuideToPharmacology"]], "__init__() (pypath.core.complex.guidetopharmacology method)": [[108, "pypath.core.complex.GuideToPharmacology.__init__"]], "load_data() (pypath.core.complex.guidetopharmacology method)": [[108, "pypath.core.complex.GuideToPharmacology.load_data"]], "process() (pypath.core.complex.guidetopharmacology method)": [[108, "pypath.core.complex.GuideToPharmacology.process"]], "set_method() (pypath.core.complex.guidetopharmacology method)": [[108, "pypath.core.complex.GuideToPharmacology.set_method"]], "havugimana (class in pypath.core.complex)": [[109, "pypath.core.complex.Havugimana"]], "__init__() (pypath.core.complex.havugimana method)": [[109, "pypath.core.complex.Havugimana.__init__"]], "load_data() (pypath.core.complex.havugimana method)": [[109, "pypath.core.complex.Havugimana.load_data"]], "process() (pypath.core.complex.havugimana method)": [[109, "pypath.core.complex.Havugimana.process"]], "set_method() (pypath.core.complex.havugimana method)": [[109, "pypath.core.complex.Havugimana.set_method"]], "hpmr (class in pypath.core.complex)": [[110, "pypath.core.complex.Hpmr"]], "__init__() (pypath.core.complex.hpmr method)": [[110, "pypath.core.complex.Hpmr.__init__"]], "load_data() (pypath.core.complex.hpmr method)": [[110, "pypath.core.complex.Hpmr.load_data"]], "process() (pypath.core.complex.hpmr method)": [[110, "pypath.core.complex.Hpmr.process"]], "set_method() (pypath.core.complex.hpmr method)": [[110, "pypath.core.complex.Hpmr.set_method"]], "humap (class in pypath.core.complex)": [[111, "pypath.core.complex.Humap"]], "__init__() (pypath.core.complex.humap method)": [[111, "pypath.core.complex.Humap.__init__"]], "load_data() (pypath.core.complex.humap method)": [[111, "pypath.core.complex.Humap.load_data"]], "process() (pypath.core.complex.humap method)": [[111, "pypath.core.complex.Humap.process"]], "set_method() (pypath.core.complex.humap method)": [[111, "pypath.core.complex.Humap.set_method"]], "humap2 (class in pypath.core.complex)": [[112, "pypath.core.complex.Humap2"]], "__init__() (pypath.core.complex.humap2 method)": [[112, "pypath.core.complex.Humap2.__init__"]], "load_data() (pypath.core.complex.humap2 method)": [[112, "pypath.core.complex.Humap2.load_data"]], "process() (pypath.core.complex.humap2 method)": [[112, "pypath.core.complex.Humap2.process"]], "set_method() (pypath.core.complex.humap2 method)": [[112, "pypath.core.complex.Humap2.set_method"]], "icellnet (class in pypath.core.complex)": [[113, "pypath.core.complex.Icellnet"]], "__init__() (pypath.core.complex.icellnet method)": [[113, "pypath.core.complex.Icellnet.__init__"]], "load_data() (pypath.core.complex.icellnet method)": [[113, "pypath.core.complex.Icellnet.load_data"]], "process() (pypath.core.complex.icellnet method)": [[113, "pypath.core.complex.Icellnet.process"]], "set_method() (pypath.core.complex.icellnet method)": [[113, "pypath.core.complex.Icellnet.set_method"]], "kegg (class in pypath.core.complex)": [[114, "pypath.core.complex.Kegg"]], "__init__() (pypath.core.complex.kegg method)": [[114, "pypath.core.complex.Kegg.__init__"]], "load_data() (pypath.core.complex.kegg method)": [[114, "pypath.core.complex.Kegg.load_data"]], "process() (pypath.core.complex.kegg method)": [[114, "pypath.core.complex.Kegg.process"]], "set_method() (pypath.core.complex.kegg method)": [[114, "pypath.core.complex.Kegg.set_method"]], "pdb (class in pypath.core.complex)": [[115, "pypath.core.complex.Pdb"]], "__init__() (pypath.core.complex.pdb method)": [[115, "pypath.core.complex.Pdb.__init__"]], "load_data() (pypath.core.complex.pdb method)": [[115, "pypath.core.complex.Pdb.load_data"]], "process() (pypath.core.complex.pdb method)": [[115, "pypath.core.complex.Pdb.process"]], "set_method() (pypath.core.complex.pdb method)": [[115, "pypath.core.complex.Pdb.set_method"]], "signor (class in pypath.core.complex)": [[116, "pypath.core.complex.Signor"]], "__init__() (pypath.core.complex.signor method)": [[116, "pypath.core.complex.Signor.__init__"]], "load_data() (pypath.core.complex.signor method)": [[116, "pypath.core.complex.Signor.load_data"]], "process() (pypath.core.complex.signor method)": [[116, "pypath.core.complex.Signor.process"]], "set_method() (pypath.core.complex.signor method)": [[116, "pypath.core.complex.Signor.set_method"]], "spike (class in pypath.core.complex)": [[117, "pypath.core.complex.Spike"]], "__init__() (pypath.core.complex.spike method)": [[117, "pypath.core.complex.Spike.__init__"]], "load_data() (pypath.core.complex.spike method)": [[117, "pypath.core.complex.Spike.load_data"]], "process() (pypath.core.complex.spike method)": [[117, "pypath.core.complex.Spike.process"]], "set_method() (pypath.core.complex.spike method)": [[117, "pypath.core.complex.Spike.set_method"]], "all_complexes() (in module pypath.core.complex)": [[118, "pypath.core.complex.all_complexes"]], "get_db() (in module pypath.core.complex)": [[119, "pypath.core.complex.get_db"]], "init_db() (in module pypath.core.complex)": [[120, "pypath.core.complex.init_db"]], "pypath.core.entity": [[121, "module-pypath.core.entity"]], "entity (class in pypath.core.entity)": [[122, "pypath.core.entity.Entity"]], "__init__() (pypath.core.entity.entity method)": [[122, "pypath.core.entity.Entity.__init__"]], "count_entity_type() (pypath.core.entity.entity class method)": [[122, "pypath.core.entity.Entity.count_entity_type"]], "filter_entity_type() (pypath.core.entity.entity class method)": [[122, "pypath.core.entity.Entity.filter_entity_type"]], "serialize() (pypath.core.entity.entity method)": [[122, "pypath.core.entity.Entity.serialize"]], "update_attrs() (pypath.core.entity.entity method)": [[122, "pypath.core.entity.Entity.update_attrs"]], "entitykey (class in pypath.core.entity)": [[123, "pypath.core.entity.EntityKey"]], "__init__() (pypath.core.entity.entitykey method)": [[123, "pypath.core.entity.EntityKey.__init__"]], "count() (pypath.core.entity.entitykey method)": [[123, "pypath.core.entity.EntityKey.count"]], "entity_type (pypath.core.entity.entitykey attribute)": [[123, "pypath.core.entity.EntityKey.entity_type"]], "id_type (pypath.core.entity.entitykey attribute)": [[123, "pypath.core.entity.EntityKey.id_type"]], "identifier (pypath.core.entity.entitykey attribute)": [[123, "pypath.core.entity.EntityKey.identifier"]], "index() (pypath.core.entity.entitykey method)": [[123, "pypath.core.entity.EntityKey.index"]], "taxon (pypath.core.entity.entitykey attribute)": [[123, "pypath.core.entity.EntityKey.taxon"]], "entitylist (class in pypath.core.entity)": [[124, "pypath.core.entity.EntityList"]], "__init__() (pypath.core.entity.entitylist method)": [[124, "pypath.core.entity.EntityList.__init__"]], "pypath.core.enz_sub": [[125, "module-pypath.core.enz_sub"]], "enzymesubstrateaggregator (class in pypath.core.enz_sub)": [[126, "pypath.core.enz_sub.EnzymeSubstrateAggregator"]], "__init__() (pypath.core.enz_sub.enzymesubstrateaggregator method)": [[126, "pypath.core.enz_sub.EnzymeSubstrateAggregator.__init__"]], "assign_to_network() (pypath.core.enz_sub.enzymesubstrateaggregator method)": [[126, "pypath.core.enz_sub.EnzymeSubstrateAggregator.assign_to_network"]], "build_list() (pypath.core.enz_sub.enzymesubstrateaggregator method)": [[126, "pypath.core.enz_sub.EnzymeSubstrateAggregator.build_list"]], "unique() (pypath.core.enz_sub.enzymesubstrateaggregator method)": [[126, "pypath.core.enz_sub.EnzymeSubstrateAggregator.unique"]], "enzymesubstratehomologyprocessor (class in pypath.core.enz_sub)": [[127, "pypath.core.enz_sub.EnzymeSubstrateHomologyProcessor"]], "__init__() (pypath.core.enz_sub.enzymesubstratehomologyprocessor method)": [[127, "pypath.core.enz_sub.EnzymeSubstrateHomologyProcessor.__init__"]], "asdict() (pypath.core.enz_sub.enzymesubstratehomologyprocessor method)": [[127, "pypath.core.enz_sub.EnzymeSubstrateHomologyProcessor.asdict"]], "df() (pypath.core.enz_sub.enzymesubstratehomologyprocessor method)": [[127, "pypath.core.enz_sub.EnzymeSubstrateHomologyProcessor.df"]], "load_data() (pypath.core.enz_sub.enzymesubstratehomologyprocessor method)": [[127, "pypath.core.enz_sub.EnzymeSubstrateHomologyProcessor.load_data"]], "load_homologene() (pypath.core.enz_sub.enzymesubstratehomologyprocessor method)": [[127, "pypath.core.enz_sub.EnzymeSubstrateHomologyProcessor.load_homologene"]], "ptm_orthology() (pypath.core.enz_sub.enzymesubstratehomologyprocessor method)": [[127, "pypath.core.enz_sub.EnzymeSubstrateHomologyProcessor.ptm_orthology"]], "set_inputargs() (pypath.core.enz_sub.enzymesubstratehomologyprocessor method)": [[127, "pypath.core.enz_sub.EnzymeSubstrateHomologyProcessor.set_inputargs"]], "set_method() (pypath.core.enz_sub.enzymesubstratehomologyprocessor method)": [[127, "pypath.core.enz_sub.EnzymeSubstrateHomologyProcessor.set_method"]], "translate() (pypath.core.enz_sub.enzymesubstratehomologyprocessor method)": [[127, "pypath.core.enz_sub.EnzymeSubstrateHomologyProcessor.translate"]], "translate_df() (pypath.core.enz_sub.enzymesubstratehomologyprocessor method)": [[127, "pypath.core.enz_sub.EnzymeSubstrateHomologyProcessor.translate_df"]], "translate_site() (pypath.core.enz_sub.enzymesubstratehomologyprocessor method)": [[127, "pypath.core.enz_sub.EnzymeSubstrateHomologyProcessor.translate_site"]], "enzymesubstrateprocessor (class in pypath.core.enz_sub)": [[128, "pypath.core.enz_sub.EnzymeSubstrateProcessor"]], "__init__() (pypath.core.enz_sub.enzymesubstrateprocessor method)": [[128, "pypath.core.enz_sub.EnzymeSubstrateProcessor.__init__"]], "load_data() (pypath.core.enz_sub.enzymesubstrateprocessor method)": [[128, "pypath.core.enz_sub.EnzymeSubstrateProcessor.load_data"]], "set_inputargs() (pypath.core.enz_sub.enzymesubstrateprocessor method)": [[128, "pypath.core.enz_sub.EnzymeSubstrateProcessor.set_inputargs"]], "set_method() (pypath.core.enz_sub.enzymesubstrateprocessor method)": [[128, "pypath.core.enz_sub.EnzymeSubstrateProcessor.set_method"]], "get_db() (in module pypath.core.enz_sub)": [[129, "pypath.core.enz_sub.get_db"]], "init_db() (in module pypath.core.enz_sub)": [[130, "pypath.core.enz_sub.init_db"]], "pypath.core.evidence": [[131, "module-pypath.core.evidence"]], "evidence (class in pypath.core.evidence)": [[132, "pypath.core.evidence.Evidence"]], "__init__() (pypath.core.evidence.evidence method)": [[132, "pypath.core.evidence.Evidence.__init__"]], "has_interaction_type() (pypath.core.evidence.evidence method)": [[132, "pypath.core.evidence.Evidence.has_interaction_type"]], "merge() (pypath.core.evidence.evidence method)": [[132, "pypath.core.evidence.Evidence.merge"]], "reload() (pypath.core.evidence.evidence method)": [[132, "pypath.core.evidence.Evidence.reload"]], "serialize() (pypath.core.evidence.evidence method)": [[132, "pypath.core.evidence.Evidence.serialize"]], "update_attrs() (pypath.core.evidence.evidence method)": [[132, "pypath.core.evidence.Evidence.update_attrs"]], "evidences (class in pypath.core.evidence)": [[133, "pypath.core.evidence.Evidences"]], "__init__() (pypath.core.evidence.evidences method)": [[133, "pypath.core.evidence.Evidences.__init__"]], "has_interaction_type() (pypath.core.evidence.evidences method)": [[133, "pypath.core.evidence.Evidences.has_interaction_type"]], "items() (pypath.core.evidence.evidences method)": [[133, "pypath.core.evidence.Evidences.items"]], "keys() (pypath.core.evidence.evidences method)": [[133, "pypath.core.evidence.Evidences.keys"]], "reload() (pypath.core.evidence.evidences method)": [[133, "pypath.core.evidence.Evidences.reload"]], "serialize_attrs() (pypath.core.evidence.evidences method)": [[133, "pypath.core.evidence.Evidences.serialize_attrs"]], "simple_dict (pypath.core.evidence.evidences property)": [[133, "pypath.core.evidence.Evidences.simple_dict"]], "pypath.core.interaction": [[134, "module-pypath.core.interaction"]], "interaction (class in pypath.core.interaction)": [[135, "pypath.core.interaction.Interaction"]], "__init__() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.__init__"]], "add_evidence() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.add_evidence"]], "add_sign() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.add_sign"]], "complex_identifiers_by_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.complex_identifiers_by_data_model"]], "complex_identifiers_by_interaction_type() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.complex_identifiers_by_interaction_type"]], "complex_identifiers_by_interaction_type_and_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.complex_identifiers_by_interaction_type_and_data_model"]], "complex_identifiers_by_interaction_type_and_data_model_and_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.complex_identifiers_by_interaction_type_and_data_model_and_resource"]], "complex_identifiers_by_reference() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.complex_identifiers_by_reference"]], "complex_identifiers_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.complex_identifiers_by_resource"]], "complex_labels_by_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.complex_labels_by_data_model"]], "complex_labels_by_interaction_type() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.complex_labels_by_interaction_type"]], "complex_labels_by_interaction_type_and_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.complex_labels_by_interaction_type_and_data_model"]], "complex_labels_by_interaction_type_and_data_model_and_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.complex_labels_by_interaction_type_and_data_model_and_resource"]], "complex_labels_by_reference() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.complex_labels_by_reference"]], "complex_labels_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.complex_labels_by_resource"]], "complexes_by_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.complexes_by_data_model"]], "complexes_by_interaction_type() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.complexes_by_interaction_type"]], "complexes_by_interaction_type_and_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.complexes_by_interaction_type_and_data_model"]], "complexes_by_interaction_type_and_data_model_and_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.complexes_by_interaction_type_and_data_model_and_resource"]], "complexes_by_reference() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.complexes_by_reference"]], "complexes_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.complexes_by_resource"]], "consensus() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.consensus"]], "consensus_edges() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.consensus_edges"]], "count_complex_identifiers() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.count_complex_identifiers"]], "count_complex_labels() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.count_complex_labels"]], "count_complexes() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.count_complexes"]], "count_data_models (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.count_data_models"]], "count_degrees_directed (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.count_degrees_directed"]], "count_degrees_directed_in (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.count_degrees_directed_in"]], "count_degrees_directed_out (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.count_degrees_directed_out"]], "count_degrees_negative (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.count_degrees_negative"]], "count_degrees_negative_in (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.count_degrees_negative_in"]], "count_degrees_negative_out (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.count_degrees_negative_out"]], "count_degrees_non_directed (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.count_degrees_non_directed"]], "count_degrees_positive (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.count_degrees_positive"]], "count_degrees_positive_in (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.count_degrees_positive_in"]], "count_degrees_positive_out (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.count_degrees_positive_out"]], "count_degrees_signed (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.count_degrees_signed"]], "count_degrees_signed_in (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.count_degrees_signed_in"]], "count_degrees_signed_out (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.count_degrees_signed_out"]], "count_degrees_undirected (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.count_degrees_undirected"]], "count_entities() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.count_entities"]], "count_identifiers() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.count_identifiers"]], "count_interaction_types (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.count_interaction_types"]], "count_interactions() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.count_interactions"]], "count_interactions_0() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.count_interactions_0"]], "count_interactions_directed() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.count_interactions_directed"]], "count_interactions_mutual() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.count_interactions_mutual"]], "count_interactions_negative() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.count_interactions_negative"]], "count_interactions_non_directed() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.count_interactions_non_directed"]], "count_interactions_positive() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.count_interactions_positive"]], "count_interactions_signed() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.count_interactions_signed"]], "count_interactions_undirected() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.count_interactions_undirected"]], "count_labels() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.count_labels"]], "count_lncrna_identifiers() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.count_lncrna_identifiers"]], "count_lncrna_labels() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.count_lncrna_labels"]], "count_lncrnas() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.count_lncrnas"]], "count_mirna_identifiers() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.count_mirna_identifiers"]], "count_mirna_labels() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.count_mirna_labels"]], "count_mirnas() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.count_mirnas"]], "count_protein_identifiers() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.count_protein_identifiers"]], "count_protein_labels() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.count_protein_labels"]], "count_proteins() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.count_proteins"]], "count_references (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.count_references"]], "count_resource_names (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.count_resource_names"]], "count_resource_names_via (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.count_resource_names_via"]], "count_resources (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.count_resources"]], "count_resources_via (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.count_resources_via"]], "count_small_molecule_identifiers() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.count_small_molecule_identifiers"]], "count_small_molecule_labels() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.count_small_molecule_labels"]], "count_small_molecules() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.count_small_molecules"]], "data_models_by_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.data_models_by_data_model"]], "data_models_by_interaction_type (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.data_models_by_interaction_type"]], "data_models_by_interaction_type_and_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.data_models_by_interaction_type_and_data_model"]], "data_models_by_interaction_type_and_data_model_and_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.data_models_by_interaction_type_and_data_model_and_resource"]], "data_models_by_reference (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.data_models_by_reference"]], "data_models_by_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.data_models_by_resource"]], "degrees_directed_by_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_directed_by_data_model"]], "degrees_directed_by_interaction_type (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_directed_by_interaction_type"]], "degrees_directed_by_interaction_type_and_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_directed_by_interaction_type_and_data_model"]], "degrees_directed_by_interaction_type_and_data_model_and_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_directed_by_interaction_type_and_data_model_and_resource"]], "degrees_directed_by_reference (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_directed_by_reference"]], "degrees_directed_by_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_directed_by_resource"]], "degrees_directed_in_by_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_directed_in_by_data_model"]], "degrees_directed_in_by_interaction_type (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_directed_in_by_interaction_type"]], "degrees_directed_in_by_interaction_type_and_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_directed_in_by_interaction_type_and_data_model"]], "degrees_directed_in_by_interaction_type_and_data_model_and_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_directed_in_by_interaction_type_and_data_model_and_resource"]], "degrees_directed_in_by_reference (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_directed_in_by_reference"]], "degrees_directed_in_by_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_directed_in_by_resource"]], "degrees_directed_out_by_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_directed_out_by_data_model"]], "degrees_directed_out_by_interaction_type (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_directed_out_by_interaction_type"]], "degrees_directed_out_by_interaction_type_and_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_directed_out_by_interaction_type_and_data_model"]], "degrees_directed_out_by_interaction_type_and_data_model_and_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_directed_out_by_interaction_type_and_data_model_and_resource"]], "degrees_directed_out_by_reference (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_directed_out_by_reference"]], "degrees_directed_out_by_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_directed_out_by_resource"]], "degrees_negative_by_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_negative_by_data_model"]], "degrees_negative_by_interaction_type (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_negative_by_interaction_type"]], "degrees_negative_by_interaction_type_and_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_negative_by_interaction_type_and_data_model"]], "degrees_negative_by_interaction_type_and_data_model_and_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_negative_by_interaction_type_and_data_model_and_resource"]], "degrees_negative_by_reference (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_negative_by_reference"]], "degrees_negative_by_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_negative_by_resource"]], "degrees_negative_in_by_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_negative_in_by_data_model"]], "degrees_negative_in_by_interaction_type (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_negative_in_by_interaction_type"]], "degrees_negative_in_by_interaction_type_and_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_negative_in_by_interaction_type_and_data_model"]], "degrees_negative_in_by_interaction_type_and_data_model_and_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_negative_in_by_interaction_type_and_data_model_and_resource"]], "degrees_negative_in_by_reference (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_negative_in_by_reference"]], "degrees_negative_in_by_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_negative_in_by_resource"]], "degrees_negative_out_by_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_negative_out_by_data_model"]], "degrees_negative_out_by_interaction_type (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_negative_out_by_interaction_type"]], "degrees_negative_out_by_interaction_type_and_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_negative_out_by_interaction_type_and_data_model"]], "degrees_negative_out_by_interaction_type_and_data_model_and_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_negative_out_by_interaction_type_and_data_model_and_resource"]], "degrees_negative_out_by_reference (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_negative_out_by_reference"]], "degrees_negative_out_by_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_negative_out_by_resource"]], "degrees_non_directed_by_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_non_directed_by_data_model"]], "degrees_non_directed_by_interaction_type (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_non_directed_by_interaction_type"]], "degrees_non_directed_by_interaction_type_and_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_non_directed_by_interaction_type_and_data_model"]], "degrees_non_directed_by_interaction_type_and_data_model_and_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_non_directed_by_interaction_type_and_data_model_and_resource"]], "degrees_non_directed_by_reference (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_non_directed_by_reference"]], "degrees_non_directed_by_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_non_directed_by_resource"]], "degrees_positive_by_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_positive_by_data_model"]], "degrees_positive_by_interaction_type (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_positive_by_interaction_type"]], "degrees_positive_by_interaction_type_and_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_positive_by_interaction_type_and_data_model"]], "degrees_positive_by_interaction_type_and_data_model_and_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_positive_by_interaction_type_and_data_model_and_resource"]], "degrees_positive_by_reference (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_positive_by_reference"]], "degrees_positive_by_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_positive_by_resource"]], "degrees_positive_in_by_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_positive_in_by_data_model"]], "degrees_positive_in_by_interaction_type (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_positive_in_by_interaction_type"]], "degrees_positive_in_by_interaction_type_and_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_positive_in_by_interaction_type_and_data_model"]], "degrees_positive_in_by_interaction_type_and_data_model_and_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_positive_in_by_interaction_type_and_data_model_and_resource"]], "degrees_positive_in_by_reference (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_positive_in_by_reference"]], "degrees_positive_in_by_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_positive_in_by_resource"]], "degrees_positive_out_by_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_positive_out_by_data_model"]], "degrees_positive_out_by_interaction_type (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_positive_out_by_interaction_type"]], "degrees_positive_out_by_interaction_type_and_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_positive_out_by_interaction_type_and_data_model"]], "degrees_positive_out_by_interaction_type_and_data_model_and_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_positive_out_by_interaction_type_and_data_model_and_resource"]], "degrees_positive_out_by_reference (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_positive_out_by_reference"]], "degrees_positive_out_by_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_positive_out_by_resource"]], "degrees_signed_by_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_signed_by_data_model"]], "degrees_signed_by_interaction_type (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_signed_by_interaction_type"]], "degrees_signed_by_interaction_type_and_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_signed_by_interaction_type_and_data_model"]], "degrees_signed_by_interaction_type_and_data_model_and_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_signed_by_interaction_type_and_data_model_and_resource"]], "degrees_signed_by_reference (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_signed_by_reference"]], "degrees_signed_by_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_signed_by_resource"]], "degrees_signed_in_by_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_signed_in_by_data_model"]], "degrees_signed_in_by_interaction_type (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_signed_in_by_interaction_type"]], "degrees_signed_in_by_interaction_type_and_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_signed_in_by_interaction_type_and_data_model"]], "degrees_signed_in_by_interaction_type_and_data_model_and_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_signed_in_by_interaction_type_and_data_model_and_resource"]], "degrees_signed_in_by_reference (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_signed_in_by_reference"]], "degrees_signed_in_by_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_signed_in_by_resource"]], "degrees_signed_out_by_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_signed_out_by_data_model"]], "degrees_signed_out_by_interaction_type (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_signed_out_by_interaction_type"]], "degrees_signed_out_by_interaction_type_and_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_signed_out_by_interaction_type_and_data_model"]], "degrees_signed_out_by_interaction_type_and_data_model_and_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_signed_out_by_interaction_type_and_data_model_and_resource"]], "degrees_signed_out_by_reference (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_signed_out_by_reference"]], "degrees_signed_out_by_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_signed_out_by_resource"]], "degrees_undirected_by_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_undirected_by_data_model"]], "degrees_undirected_by_interaction_type (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_undirected_by_interaction_type"]], "degrees_undirected_by_interaction_type_and_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_undirected_by_interaction_type_and_data_model"]], "degrees_undirected_by_interaction_type_and_data_model_and_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_undirected_by_interaction_type_and_data_model_and_resource"]], "degrees_undirected_by_reference (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_undirected_by_reference"]], "degrees_undirected_by_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.degrees_undirected_by_resource"]], "direction_key() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.direction_key"]], "dorothea_level() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.dorothea_level"]], "dorothea_levels() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.dorothea_levels"]], "entities_by_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.entities_by_data_model"]], "entities_by_interaction_type() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.entities_by_interaction_type"]], "entities_by_interaction_type_and_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.entities_by_interaction_type_and_data_model"]], "entities_by_interaction_type_and_data_model_and_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.entities_by_interaction_type_and_data_model_and_resource"]], "entities_by_reference() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.entities_by_reference"]], "entities_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.entities_by_resource"]], "evaluate_evidences() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.evaluate_evidences"]], "generate_df_records() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.generate_df_records"]], "get_attr() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_attr"]], "get_complex_identifiers() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_complex_identifiers"]], "get_complex_labels() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_complex_labels"]], "get_complexes() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_complexes"]], "get_data_models (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.get_data_models"]], "get_degrees() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_degrees"]], "get_degrees_directed (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.get_degrees_directed"]], "get_degrees_directed_in (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.get_degrees_directed_in"]], "get_degrees_directed_out (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.get_degrees_directed_out"]], "get_degrees_negative (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.get_degrees_negative"]], "get_degrees_negative_in (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.get_degrees_negative_in"]], "get_degrees_negative_out (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.get_degrees_negative_out"]], "get_degrees_non_directed (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.get_degrees_non_directed"]], "get_degrees_positive (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.get_degrees_positive"]], "get_degrees_positive_in (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.get_degrees_positive_in"]], "get_degrees_positive_out (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.get_degrees_positive_out"]], "get_degrees_signed (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.get_degrees_signed"]], "get_degrees_signed_in (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.get_degrees_signed_in"]], "get_degrees_signed_out (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.get_degrees_signed_out"]], "get_degrees_undirected (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.get_degrees_undirected"]], "get_direction() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_direction"]], "get_directions() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_directions"]], "get_entities() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_entities"]], "get_identifiers() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_identifiers"]], "get_interaction_types (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.get_interaction_types"]], "get_interactions() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_interactions"]], "get_interactions_0() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_interactions_0"]], "get_interactions_directed() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_interactions_directed"]], "get_interactions_mutual() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_interactions_mutual"]], "get_interactions_negative() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_interactions_negative"]], "get_interactions_non_directed() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_interactions_non_directed"]], "get_interactions_non_directed_0() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_interactions_non_directed_0"]], "get_interactions_positive() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_interactions_positive"]], "get_interactions_signed() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_interactions_signed"]], "get_interactions_undirected() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_interactions_undirected"]], "get_interactions_undirected_0() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_interactions_undirected_0"]], "get_labels() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_labels"]], "get_lncrna_identifiers() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_lncrna_identifiers"]], "get_lncrna_labels() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_lncrna_labels"]], "get_lncrnas() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_lncrnas"]], "get_mirna_identifiers() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_mirna_identifiers"]], "get_mirna_labels() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_mirna_labels"]], "get_mirnas() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_mirnas"]], "get_protein_identifiers() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_protein_identifiers"]], "get_protein_labels() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_protein_labels"]], "get_proteins() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_proteins"]], "get_references (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.get_references"]], "get_resource_names (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.get_resource_names"]], "get_resource_names_via (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.get_resource_names_via"]], "get_resources (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.get_resources"]], "get_resources_via (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.get_resources_via"]], "get_sign() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_sign"]], "get_small_molecule_identifiers() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_small_molecule_identifiers"]], "get_small_molecule_labels() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_small_molecule_labels"]], "get_small_molecules() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.get_small_molecules"]], "has_sign() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.has_sign"]], "identifiers_by_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.identifiers_by_data_model"]], "identifiers_by_interaction_type() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.identifiers_by_interaction_type"]], "identifiers_by_interaction_type_and_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.identifiers_by_interaction_type_and_data_model"]], "identifiers_by_interaction_type_and_data_model_and_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.identifiers_by_interaction_type_and_data_model_and_resource"]], "identifiers_by_reference() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.identifiers_by_reference"]], "identifiers_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.identifiers_by_resource"]], "interaction_types_by_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.interaction_types_by_data_model"]], "interaction_types_by_interaction_type (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.interaction_types_by_interaction_type"]], "interaction_types_by_interaction_type_and_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.interaction_types_by_interaction_type_and_data_model"]], "interaction_types_by_interaction_type_and_data_model_and_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.interaction_types_by_interaction_type_and_data_model_and_resource"]], "interaction_types_by_reference (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.interaction_types_by_reference"]], "interaction_types_by_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.interaction_types_by_resource"]], "interactions_0_by_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_0_by_data_model"]], "interactions_0_by_interaction_type() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_0_by_interaction_type"]], "interactions_0_by_interaction_type_and_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_0_by_interaction_type_and_data_model"]], "interactions_0_by_interaction_type_and_data_model_and_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_0_by_interaction_type_and_data_model_and_resource"]], "interactions_0_by_reference() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_0_by_reference"]], "interactions_0_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_0_by_resource"]], "interactions_by_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_by_data_model"]], "interactions_by_interaction_type() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_by_interaction_type"]], "interactions_by_interaction_type_and_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_by_interaction_type_and_data_model"]], "interactions_by_interaction_type_and_data_model_and_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_by_interaction_type_and_data_model_and_resource"]], "interactions_by_reference() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_by_reference"]], "interactions_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_by_resource"]], "interactions_directed_by_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_directed_by_data_model"]], "interactions_directed_by_interaction_type() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_directed_by_interaction_type"]], "interactions_directed_by_interaction_type_and_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_directed_by_interaction_type_and_data_model"]], "interactions_directed_by_interaction_type_and_data_model_and_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_directed_by_interaction_type_and_data_model_and_resource"]], "interactions_directed_by_reference() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_directed_by_reference"]], "interactions_directed_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_directed_by_resource"]], "interactions_mutual_by_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_mutual_by_data_model"]], "interactions_mutual_by_interaction_type() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_mutual_by_interaction_type"]], "interactions_mutual_by_interaction_type_and_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_mutual_by_interaction_type_and_data_model"]], "interactions_mutual_by_interaction_type_and_data_model_and_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_mutual_by_interaction_type_and_data_model_and_resource"]], "interactions_mutual_by_reference() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_mutual_by_reference"]], "interactions_mutual_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_mutual_by_resource"]], "interactions_negative_by_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_negative_by_data_model"]], "interactions_negative_by_interaction_type() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_negative_by_interaction_type"]], "interactions_negative_by_interaction_type_and_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_negative_by_interaction_type_and_data_model"]], "interactions_negative_by_interaction_type_and_data_model_and_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_negative_by_interaction_type_and_data_model_and_resource"]], "interactions_negative_by_reference() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_negative_by_reference"]], "interactions_negative_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_negative_by_resource"]], "interactions_non_directed_0_by_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_non_directed_0_by_data_model"]], "interactions_non_directed_0_by_interaction_type() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_non_directed_0_by_interaction_type"]], "interactions_non_directed_0_by_interaction_type_and_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_non_directed_0_by_interaction_type_and_data_model"]], "interactions_non_directed_0_by_interaction_type_and_data_model_and_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_non_directed_0_by_interaction_type_and_data_model_and_resource"]], "interactions_non_directed_0_by_reference() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_non_directed_0_by_reference"]], "interactions_non_directed_0_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_non_directed_0_by_resource"]], "interactions_non_directed_by_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_non_directed_by_data_model"]], "interactions_non_directed_by_interaction_type() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_non_directed_by_interaction_type"]], "interactions_non_directed_by_interaction_type_and_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_non_directed_by_interaction_type_and_data_model"]], "interactions_non_directed_by_interaction_type_and_data_model_and_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_non_directed_by_interaction_type_and_data_model_and_resource"]], "interactions_non_directed_by_reference() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_non_directed_by_reference"]], "interactions_non_directed_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_non_directed_by_resource"]], "interactions_positive_by_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_positive_by_data_model"]], "interactions_positive_by_interaction_type() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_positive_by_interaction_type"]], "interactions_positive_by_interaction_type_and_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_positive_by_interaction_type_and_data_model"]], "interactions_positive_by_interaction_type_and_data_model_and_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_positive_by_interaction_type_and_data_model_and_resource"]], "interactions_positive_by_reference() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_positive_by_reference"]], "interactions_positive_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_positive_by_resource"]], "interactions_signed_by_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_signed_by_data_model"]], "interactions_signed_by_interaction_type() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_signed_by_interaction_type"]], "interactions_signed_by_interaction_type_and_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_signed_by_interaction_type_and_data_model"]], "interactions_signed_by_interaction_type_and_data_model_and_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_signed_by_interaction_type_and_data_model_and_resource"]], "interactions_signed_by_reference() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_signed_by_reference"]], "interactions_signed_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_signed_by_resource"]], "interactions_undirected_0_by_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_undirected_0_by_data_model"]], "interactions_undirected_0_by_interaction_type() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_undirected_0_by_interaction_type"]], "interactions_undirected_0_by_interaction_type_and_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_undirected_0_by_interaction_type_and_data_model"]], "interactions_undirected_0_by_interaction_type_and_data_model_and_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_undirected_0_by_interaction_type_and_data_model_and_resource"]], "interactions_undirected_0_by_reference() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_undirected_0_by_reference"]], "interactions_undirected_0_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_undirected_0_by_resource"]], "interactions_undirected_by_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_undirected_by_data_model"]], "interactions_undirected_by_interaction_type() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_undirected_by_interaction_type"]], "interactions_undirected_by_interaction_type_and_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_undirected_by_interaction_type_and_data_model"]], "interactions_undirected_by_interaction_type_and_data_model_and_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_undirected_by_interaction_type_and_data_model_and_resource"]], "interactions_undirected_by_reference() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_undirected_by_reference"]], "interactions_undirected_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.interactions_undirected_by_resource"]], "is_directed() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.is_directed"]], "is_directed_by_resources() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.is_directed_by_resources"]], "is_inhibition() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.is_inhibition"]], "is_loop() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.is_loop"]], "is_mutual() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.is_mutual"]], "is_mutual_by_resources() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.is_mutual_by_resources"]], "is_stimulation() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.is_stimulation"]], "iter_evidences() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.iter_evidences"]], "iter_match_evidences() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.iter_match_evidences"]], "labels_by_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.labels_by_data_model"]], "labels_by_interaction_type() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.labels_by_interaction_type"]], "labels_by_interaction_type_and_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.labels_by_interaction_type_and_data_model"]], "labels_by_interaction_type_and_data_model_and_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.labels_by_interaction_type_and_data_model_and_resource"]], "labels_by_reference() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.labels_by_reference"]], "labels_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.labels_by_resource"]], "lncrna_identifiers_by_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.lncrna_identifiers_by_data_model"]], "lncrna_identifiers_by_interaction_type() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.lncrna_identifiers_by_interaction_type"]], "lncrna_identifiers_by_interaction_type_and_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.lncrna_identifiers_by_interaction_type_and_data_model"]], "lncrna_identifiers_by_interaction_type_and_data_model_and_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.lncrna_identifiers_by_interaction_type_and_data_model_and_resource"]], "lncrna_identifiers_by_reference() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.lncrna_identifiers_by_reference"]], "lncrna_identifiers_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.lncrna_identifiers_by_resource"]], "lncrna_labels_by_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.lncrna_labels_by_data_model"]], "lncrna_labels_by_interaction_type() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.lncrna_labels_by_interaction_type"]], "lncrna_labels_by_interaction_type_and_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.lncrna_labels_by_interaction_type_and_data_model"]], "lncrna_labels_by_interaction_type_and_data_model_and_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.lncrna_labels_by_interaction_type_and_data_model_and_resource"]], "lncrna_labels_by_reference() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.lncrna_labels_by_reference"]], "lncrna_labels_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.lncrna_labels_by_resource"]], "lncrnas_by_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.lncrnas_by_data_model"]], "lncrnas_by_interaction_type() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.lncrnas_by_interaction_type"]], "lncrnas_by_interaction_type_and_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.lncrnas_by_interaction_type_and_data_model"]], "lncrnas_by_interaction_type_and_data_model_and_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.lncrnas_by_interaction_type_and_data_model_and_resource"]], "lncrnas_by_reference() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.lncrnas_by_reference"]], "lncrnas_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.lncrnas_by_resource"]], "majority_dir() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.majority_dir"]], "majority_sign() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.majority_sign"]], "merge() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.merge"]], "mirna_identifiers_by_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.mirna_identifiers_by_data_model"]], "mirna_identifiers_by_interaction_type() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.mirna_identifiers_by_interaction_type"]], "mirna_identifiers_by_interaction_type_and_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.mirna_identifiers_by_interaction_type_and_data_model"]], "mirna_identifiers_by_interaction_type_and_data_model_and_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.mirna_identifiers_by_interaction_type_and_data_model_and_resource"]], "mirna_identifiers_by_reference() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.mirna_identifiers_by_reference"]], "mirna_identifiers_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.mirna_identifiers_by_resource"]], "mirna_labels_by_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.mirna_labels_by_data_model"]], "mirna_labels_by_interaction_type() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.mirna_labels_by_interaction_type"]], "mirna_labels_by_interaction_type_and_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.mirna_labels_by_interaction_type_and_data_model"]], "mirna_labels_by_interaction_type_and_data_model_and_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.mirna_labels_by_interaction_type_and_data_model_and_resource"]], "mirna_labels_by_reference() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.mirna_labels_by_reference"]], "mirna_labels_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.mirna_labels_by_resource"]], "mirnas_by_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.mirnas_by_data_model"]], "mirnas_by_interaction_type() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.mirnas_by_interaction_type"]], "mirnas_by_interaction_type_and_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.mirnas_by_interaction_type_and_data_model"]], "mirnas_by_interaction_type_and_data_model_and_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.mirnas_by_interaction_type_and_data_model_and_resource"]], "mirnas_by_reference() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.mirnas_by_reference"]], "mirnas_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.mirnas_by_resource"]], "negative_a_b() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.negative_a_b"]], "negative_b_a() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.negative_b_a"]], "negative_resources_a_b() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.negative_resources_a_b"]], "negative_resources_b_a() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.negative_resources_b_a"]], "negative_reverse() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.negative_reverse"]], "negative_straight() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.negative_straight"]], "positive_a_b() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.positive_a_b"]], "positive_b_a() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.positive_b_a"]], "positive_resources_a_b() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.positive_resources_a_b"]], "positive_resources_b_a() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.positive_resources_b_a"]], "positive_reverse() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.positive_reverse"]], "positive_straight() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.positive_straight"]], "protein_identifiers_by_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.protein_identifiers_by_data_model"]], "protein_identifiers_by_interaction_type() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.protein_identifiers_by_interaction_type"]], "protein_identifiers_by_interaction_type_and_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.protein_identifiers_by_interaction_type_and_data_model"]], "protein_identifiers_by_interaction_type_and_data_model_and_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.protein_identifiers_by_interaction_type_and_data_model_and_resource"]], "protein_identifiers_by_reference() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.protein_identifiers_by_reference"]], "protein_identifiers_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.protein_identifiers_by_resource"]], "protein_labels_by_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.protein_labels_by_data_model"]], "protein_labels_by_interaction_type() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.protein_labels_by_interaction_type"]], "protein_labels_by_interaction_type_and_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.protein_labels_by_interaction_type_and_data_model"]], "protein_labels_by_interaction_type_and_data_model_and_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.protein_labels_by_interaction_type_and_data_model_and_resource"]], "protein_labels_by_reference() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.protein_labels_by_reference"]], "protein_labels_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.protein_labels_by_resource"]], "proteins_by_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.proteins_by_data_model"]], "proteins_by_interaction_type() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.proteins_by_interaction_type"]], "proteins_by_interaction_type_and_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.proteins_by_interaction_type_and_data_model"]], "proteins_by_interaction_type_and_data_model_and_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.proteins_by_interaction_type_and_data_model_and_resource"]], "proteins_by_reference() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.proteins_by_reference"]], "proteins_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.proteins_by_resource"]], "references_by_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.references_by_data_model"]], "references_by_interaction_type (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.references_by_interaction_type"]], "references_by_interaction_type_and_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.references_by_interaction_type_and_data_model"]], "references_by_interaction_type_and_data_model_and_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.references_by_interaction_type_and_data_model_and_resource"]], "references_by_reference (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.references_by_reference"]], "references_by_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.references_by_resource"]], "reload() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.reload"]], "resource_names_by_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.resource_names_by_data_model"]], "resource_names_by_interaction_type (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.resource_names_by_interaction_type"]], "resource_names_by_interaction_type_and_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.resource_names_by_interaction_type_and_data_model"]], "resource_names_by_interaction_type_and_data_model_and_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.resource_names_by_interaction_type_and_data_model_and_resource"]], "resource_names_by_reference (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.resource_names_by_reference"]], "resource_names_by_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.resource_names_by_resource"]], "resource_names_via_by_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.resource_names_via_by_data_model"]], "resource_names_via_by_interaction_type (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.resource_names_via_by_interaction_type"]], "resource_names_via_by_interaction_type_and_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.resource_names_via_by_interaction_type_and_data_model"]], "resource_names_via_by_interaction_type_and_data_model_and_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.resource_names_via_by_interaction_type_and_data_model_and_resource"]], "resource_names_via_by_reference (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.resource_names_via_by_reference"]], "resource_names_via_by_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.resource_names_via_by_resource"]], "resources_a_b() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.resources_a_b"]], "resources_b_a() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.resources_b_a"]], "resources_by_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.resources_by_data_model"]], "resources_by_interaction_type (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.resources_by_interaction_type"]], "resources_by_interaction_type_and_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.resources_by_interaction_type_and_data_model"]], "resources_by_interaction_type_and_data_model_and_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.resources_by_interaction_type_and_data_model_and_resource"]], "resources_by_reference (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.resources_by_reference"]], "resources_by_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.resources_by_resource"]], "resources_undirected() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.resources_undirected"]], "resources_via_by_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.resources_via_by_data_model"]], "resources_via_by_interaction_type (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.resources_via_by_interaction_type"]], "resources_via_by_interaction_type_and_data_model (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.resources_via_by_interaction_type_and_data_model"]], "resources_via_by_interaction_type_and_data_model_and_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.resources_via_by_interaction_type_and_data_model_and_resource"]], "resources_via_by_reference (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.resources_via_by_reference"]], "resources_via_by_resource (pypath.core.interaction.interaction attribute)": [[135, "pypath.core.interaction.Interaction.resources_via_by_resource"]], "serialize() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.serialize"]], "small_molecule_identifiers_by_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.small_molecule_identifiers_by_data_model"]], "small_molecule_identifiers_by_interaction_type() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.small_molecule_identifiers_by_interaction_type"]], "small_molecule_identifiers_by_interaction_type_and_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.small_molecule_identifiers_by_interaction_type_and_data_model"]], "small_molecule_identifiers_by_interaction_type_and_data_model_and_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.small_molecule_identifiers_by_interaction_type_and_data_model_and_resource"]], "small_molecule_identifiers_by_reference() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.small_molecule_identifiers_by_reference"]], "small_molecule_identifiers_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.small_molecule_identifiers_by_resource"]], "small_molecule_labels_by_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.small_molecule_labels_by_data_model"]], "small_molecule_labels_by_interaction_type() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.small_molecule_labels_by_interaction_type"]], "small_molecule_labels_by_interaction_type_and_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.small_molecule_labels_by_interaction_type_and_data_model"]], "small_molecule_labels_by_interaction_type_and_data_model_and_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.small_molecule_labels_by_interaction_type_and_data_model_and_resource"]], "small_molecule_labels_by_reference() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.small_molecule_labels_by_reference"]], "small_molecule_labels_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.small_molecule_labels_by_resource"]], "small_molecules_by_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.small_molecules_by_data_model"]], "small_molecules_by_interaction_type() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.small_molecules_by_interaction_type"]], "small_molecules_by_interaction_type_and_data_model() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.small_molecules_by_interaction_type_and_data_model"]], "small_molecules_by_interaction_type_and_data_model_and_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.small_molecules_by_interaction_type_and_data_model_and_resource"]], "small_molecules_by_reference() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.small_molecules_by_reference"]], "small_molecules_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.small_molecules_by_resource"]], "source() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.source"]], "sources_reverse() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.sources_reverse"]], "sources_straight() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.sources_straight"]], "sources_undirected() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.sources_undirected"]], "src() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.src"]], "src_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.src_by_resource"]], "target() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.target"]], "tgt() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.tgt"]], "tgt_by_resource() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.tgt_by_resource"]], "translate() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.translate"]], "unset_dir() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.unset_dir"]], "unset_direction() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.unset_direction"]], "unset_interaction_type() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.unset_interaction_type"]], "unset_sign() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.unset_sign"]], "update_attrs() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.update_attrs"]], "which_directions() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.which_directions"]], "which_dirs() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.which_dirs"]], "which_signs() (pypath.core.interaction.interaction method)": [[135, "pypath.core.interaction.Interaction.which_signs"]], "interactiondataframerecord (class in pypath.core.interaction)": [[136, "pypath.core.interaction.InteractionDataFrameRecord"]], "__init__() (pypath.core.interaction.interactiondataframerecord method)": [[136, "pypath.core.interaction.InteractionDataFrameRecord.__init__"]], "count() (pypath.core.interaction.interactiondataframerecord method)": [[136, "pypath.core.interaction.InteractionDataFrameRecord.count"]], "directed (pypath.core.interaction.interactiondataframerecord attribute)": [[136, "pypath.core.interaction.InteractionDataFrameRecord.directed"]], "dmodel (pypath.core.interaction.interactiondataframerecord attribute)": [[136, "pypath.core.interaction.InteractionDataFrameRecord.dmodel"]], "effect (pypath.core.interaction.interactiondataframerecord attribute)": [[136, "pypath.core.interaction.InteractionDataFrameRecord.effect"]], "id_a (pypath.core.interaction.interactiondataframerecord attribute)": [[136, "pypath.core.interaction.InteractionDataFrameRecord.id_a"]], "id_b (pypath.core.interaction.interactiondataframerecord attribute)": [[136, "pypath.core.interaction.InteractionDataFrameRecord.id_b"]], "index() (pypath.core.interaction.interactiondataframerecord method)": [[136, "pypath.core.interaction.InteractionDataFrameRecord.index"]], "references (pypath.core.interaction.interactiondataframerecord attribute)": [[136, "pypath.core.interaction.InteractionDataFrameRecord.references"]], "sources (pypath.core.interaction.interactiondataframerecord attribute)": [[136, "pypath.core.interaction.InteractionDataFrameRecord.sources"]], "type (pypath.core.interaction.interactiondataframerecord attribute)": [[136, "pypath.core.interaction.InteractionDataFrameRecord.type"]], "type_a (pypath.core.interaction.interactiondataframerecord attribute)": [[136, "pypath.core.interaction.InteractionDataFrameRecord.type_a"]], "type_b (pypath.core.interaction.interactiondataframerecord attribute)": [[136, "pypath.core.interaction.InteractionDataFrameRecord.type_b"]], "interactionkey (class in pypath.core.interaction)": [[137, "pypath.core.interaction.InteractionKey"]], "__init__() (pypath.core.interaction.interactionkey method)": [[137, "pypath.core.interaction.InteractionKey.__init__"]], "count() (pypath.core.interaction.interactionkey method)": [[137, "pypath.core.interaction.InteractionKey.count"]], "entity_a (pypath.core.interaction.interactionkey attribute)": [[137, "pypath.core.interaction.InteractionKey.entity_a"]], "entity_b (pypath.core.interaction.interactionkey attribute)": [[137, "pypath.core.interaction.InteractionKey.entity_b"]], "index() (pypath.core.interaction.interactionkey method)": [[137, "pypath.core.interaction.InteractionKey.index"]], "pypath.core.intercell": [[138, "module-pypath.core.intercell"]], "intercellannotation (class in pypath.core.intercell)": [[139, "pypath.core.intercell.IntercellAnnotation"]], "__init__() (pypath.core.intercell.intercellannotation method)": [[139, "pypath.core.intercell.IntercellAnnotation.__init__"]], "browse() (pypath.core.intercell.intercellannotation method)": [[139, "pypath.core.intercell.IntercellAnnotation.browse"]], "class_to_class_connections() (pypath.core.intercell.intercellannotation method)": [[139, "pypath.core.intercell.IntercellAnnotation.class_to_class_connections"]], "classes_by_entity() (pypath.core.intercell.intercellannotation method)": [[139, "pypath.core.intercell.IntercellAnnotation.classes_by_entity"]], "counts() (pypath.core.intercell.intercellannotation method)": [[139, "pypath.core.intercell.IntercellAnnotation.counts"]], "counts_by_class() (pypath.core.intercell.intercellannotation method)": [[139, "pypath.core.intercell.IntercellAnnotation.counts_by_class"]], "create_class() (pypath.core.intercell.intercellannotation method)": [[139, "pypath.core.intercell.IntercellAnnotation.create_class"]], "degree_inter_class_network() (pypath.core.intercell.intercellannotation method)": [[139, "pypath.core.intercell.IntercellAnnotation.degree_inter_class_network"]], "filter() (pypath.core.intercell.intercellannotation method)": [[139, "pypath.core.intercell.IntercellAnnotation.filter"]], "filter_classes() (pypath.core.intercell.intercellannotation static method)": [[139, "pypath.core.intercell.IntercellAnnotation.filter_classes"]], "filter_interclass_network() (pypath.core.intercell.intercellannotation method)": [[139, "pypath.core.intercell.IntercellAnnotation.filter_interclass_network"]], "get_class() (pypath.core.intercell.intercellannotation method)": [[139, "pypath.core.intercell.IntercellAnnotation.get_class"]], "get_df() (pypath.core.intercell.intercellannotation method)": [[139, "pypath.core.intercell.IntercellAnnotation.get_df"]], "get_interclass_network_df() (pypath.core.intercell.intercellannotation method)": [[139, "pypath.core.intercell.IntercellAnnotation.get_interclass_network_df"]], "get_parents() (pypath.core.intercell.intercellannotation method)": [[139, "pypath.core.intercell.IntercellAnnotation.get_parents"]], "get_resource() (pypath.core.intercell.intercellannotation method)": [[139, "pypath.core.intercell.IntercellAnnotation.get_resource"]], "get_resources() (pypath.core.intercell.intercellannotation method)": [[139, "pypath.core.intercell.IntercellAnnotation.get_resources"]], "labels() (pypath.core.intercell.intercellannotation method)": [[139, "pypath.core.intercell.IntercellAnnotation.labels"]], "make_df() (pypath.core.intercell.intercellannotation method)": [[139, "pypath.core.intercell.IntercellAnnotation.make_df"]], "network_df() (pypath.core.intercell.intercellannotation method)": [[139, "pypath.core.intercell.IntercellAnnotation.network_df"]], "populate_classes() (pypath.core.intercell.intercellannotation method)": [[139, "pypath.core.intercell.IntercellAnnotation.populate_classes"]], "populate_scores() (pypath.core.intercell.intercellannotation method)": [[139, "pypath.core.intercell.IntercellAnnotation.populate_scores"]], "process_annot() (pypath.core.intercell.intercellannotation method)": [[139, "pypath.core.intercell.IntercellAnnotation.process_annot"]], "quality_check_table() (pypath.core.intercell.intercellannotation method)": [[139, "pypath.core.intercell.IntercellAnnotation.quality_check_table"]], "register_network() (pypath.core.intercell.intercellannotation method)": [[139, "pypath.core.intercell.IntercellAnnotation.register_network"]], "reload() (pypath.core.intercell.intercellannotation method)": [[139, "pypath.core.intercell.IntercellAnnotation.reload"]], "resources_in_category() (pypath.core.intercell.intercellannotation method)": [[139, "pypath.core.intercell.IntercellAnnotation.resources_in_category"]], "select() (pypath.core.intercell.intercellannotation method)": [[139, "pypath.core.intercell.IntercellAnnotation.select"]], "set_interclass_network_df() (pypath.core.intercell.intercellannotation method)": [[139, "pypath.core.intercell.IntercellAnnotation.set_interclass_network_df"]], "show() (pypath.core.intercell.intercellannotation method)": [[139, "pypath.core.intercell.IntercellAnnotation.show"]], "update_parents() (pypath.core.intercell.intercellannotation method)": [[139, "pypath.core.intercell.IntercellAnnotation.update_parents"]], "get_db() (in module pypath.core.intercell)": [[140, "pypath.core.intercell.get_db"]], "init_db() (in module pypath.core.intercell)": [[141, "pypath.core.intercell.init_db"]], "pypath.core.intercell_annot": [[142, "module-pypath.core.intercell_annot"]], "excludes (in module pypath.core.intercell_annot)": [[143, "pypath.core.intercell_annot.excludes"]], "pypath.core.network": [[144, "module-pypath.core.network"]], "network (class in pypath.core.network)": [[145, "pypath.core.network.Network"]], "__init__() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.__init__"]], "activated_by (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.activated_by"]], "activates (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.activates"]], "add_interaction() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.add_interaction"]], "add_node() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.add_node"]], "collect_complex_identifiers (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_complex_identifiers"]], "collect_complex_labels (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_complex_labels"]], "collect_complexes (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_complexes"]], "collect_curation_effort (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_curation_effort"]], "collect_data_models (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_data_models"]], "collect_degrees_directed (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_degrees_directed"]], "collect_degrees_directed_in (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_degrees_directed_in"]], "collect_degrees_directed_out (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_degrees_directed_out"]], "collect_degrees_negative (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_degrees_negative"]], "collect_degrees_negative_in (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_degrees_negative_in"]], "collect_degrees_negative_out (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_degrees_negative_out"]], "collect_degrees_non_directed (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_degrees_non_directed"]], "collect_degrees_positive (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_degrees_positive"]], "collect_degrees_positive_in (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_degrees_positive_in"]], "collect_degrees_positive_out (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_degrees_positive_out"]], "collect_degrees_signed (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_degrees_signed"]], "collect_degrees_signed_in (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_degrees_signed_in"]], "collect_degrees_signed_out (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_degrees_signed_out"]], "collect_degrees_undirected (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_degrees_undirected"]], "collect_entities (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_entities"]], "collect_evidences (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_evidences"]], "collect_identifiers (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_identifiers"]], "collect_interaction_types (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_interaction_types"]], "collect_interactions (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_interactions"]], "collect_interactions_0 (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_interactions_0"]], "collect_interactions_directed (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_interactions_directed"]], "collect_interactions_mutual (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_interactions_mutual"]], "collect_interactions_negative (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_interactions_negative"]], "collect_interactions_non_directed (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_interactions_non_directed"]], "collect_interactions_non_directed_0 (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_interactions_non_directed_0"]], "collect_interactions_positive (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_interactions_positive"]], "collect_interactions_signed (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_interactions_signed"]], "collect_interactions_undirected (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_interactions_undirected"]], "collect_interactions_undirected_0 (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_interactions_undirected_0"]], "collect_labels (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_labels"]], "collect_lncrna_identifiers (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_lncrna_identifiers"]], "collect_lncrna_labels (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_lncrna_labels"]], "collect_lncrnas (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_lncrnas"]], "collect_mirna_identifiers (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_mirna_identifiers"]], "collect_mirna_labels (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_mirna_labels"]], "collect_mirnas (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_mirnas"]], "collect_protein_identifiers (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_protein_identifiers"]], "collect_protein_labels (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_protein_labels"]], "collect_proteins (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_proteins"]], "collect_references (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_references"]], "collect_resource_names (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_resource_names"]], "collect_resource_names_via (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_resource_names_via"]], "collect_resources (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_resources"]], "collect_resources_via (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_resources_via"]], "collect_small_molecule_identifiers (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_small_molecule_identifiers"]], "collect_small_molecule_labels (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_small_molecule_labels"]], "collect_small_molecules (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.collect_small_molecules"]], "complex_identifiers_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.complex_identifiers_by_data_model"]], "complex_identifiers_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.complex_identifiers_by_interaction_type"]], "complex_identifiers_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.complex_identifiers_by_interaction_type_and_data_model"]], "complex_identifiers_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.complex_identifiers_by_interaction_type_and_data_model_and_resource"]], "complex_identifiers_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.complex_identifiers_by_reference"]], "complex_identifiers_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.complex_identifiers_by_resource"]], "complex_labels_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.complex_labels_by_data_model"]], "complex_labels_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.complex_labels_by_interaction_type"]], "complex_labels_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.complex_labels_by_interaction_type_and_data_model"]], "complex_labels_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.complex_labels_by_interaction_type_and_data_model_and_resource"]], "complex_labels_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.complex_labels_by_reference"]], "complex_labels_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.complex_labels_by_resource"]], "complexes_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.complexes_by_data_model"]], "complexes_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.complexes_by_interaction_type"]], "complexes_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.complexes_by_interaction_type_and_data_model"]], "complexes_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.complexes_by_interaction_type_and_data_model_and_resource"]], "complexes_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.complexes_by_reference"]], "complexes_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.complexes_by_resource"]], "count_activated_by (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_activated_by"]], "count_activates (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_activates"]], "count_complex_identifiers (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_complex_identifiers"]], "count_complex_identifiers_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_complex_identifiers_by_data_model"]], "count_complex_identifiers_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_complex_identifiers_by_interaction_type"]], "count_complex_identifiers_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_complex_identifiers_by_interaction_type_and_data_model"]], "count_complex_identifiers_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_complex_identifiers_by_interaction_type_and_data_model_and_resource"]], "count_complex_identifiers_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_complex_identifiers_by_reference"]], "count_complex_identifiers_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_complex_identifiers_by_resource"]], "count_complex_labels (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_complex_labels"]], "count_complex_labels_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_complex_labels_by_data_model"]], "count_complex_labels_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_complex_labels_by_interaction_type"]], "count_complex_labels_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_complex_labels_by_interaction_type_and_data_model"]], "count_complex_labels_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_complex_labels_by_interaction_type_and_data_model_and_resource"]], "count_complex_labels_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_complex_labels_by_reference"]], "count_complex_labels_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_complex_labels_by_resource"]], "count_complexes (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_complexes"]], "count_complexes_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_complexes_by_data_model"]], "count_complexes_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_complexes_by_interaction_type"]], "count_complexes_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_complexes_by_interaction_type_and_data_model"]], "count_complexes_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_complexes_by_interaction_type_and_data_model_and_resource"]], "count_complexes_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_complexes_by_reference"]], "count_complexes_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_complexes_by_resource"]], "count_curation_effort (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_curation_effort"]], "count_curation_effort_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_curation_effort_by_data_model"]], "count_curation_effort_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_curation_effort_by_interaction_type"]], "count_curation_effort_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_curation_effort_by_interaction_type_and_data_model"]], "count_curation_effort_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_curation_effort_by_interaction_type_and_data_model_and_resource"]], "count_curation_effort_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_curation_effort_by_reference"]], "count_curation_effort_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_curation_effort_by_resource"]], "count_data_models (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_data_models"]], "count_data_models_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_data_models_by_data_model"]], "count_data_models_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_data_models_by_interaction_type"]], "count_data_models_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_data_models_by_interaction_type_and_data_model"]], "count_data_models_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_data_models_by_interaction_type_and_data_model_and_resource"]], "count_data_models_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_data_models_by_reference"]], "count_data_models_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_data_models_by_resource"]], "count_degrees_directed (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_directed"]], "count_degrees_directed_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_directed_by_data_model"]], "count_degrees_directed_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_directed_by_interaction_type"]], "count_degrees_directed_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_directed_by_interaction_type_and_data_model"]], "count_degrees_directed_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_directed_by_interaction_type_and_data_model_and_resource"]], "count_degrees_directed_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_directed_by_reference"]], "count_degrees_directed_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_directed_by_resource"]], "count_degrees_directed_in (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_directed_in"]], "count_degrees_directed_in_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_directed_in_by_data_model"]], "count_degrees_directed_in_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_directed_in_by_interaction_type"]], "count_degrees_directed_in_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_directed_in_by_interaction_type_and_data_model"]], "count_degrees_directed_in_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_directed_in_by_interaction_type_and_data_model_and_resource"]], "count_degrees_directed_in_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_directed_in_by_reference"]], "count_degrees_directed_in_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_directed_in_by_resource"]], "count_degrees_directed_out (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_directed_out"]], "count_degrees_directed_out_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_directed_out_by_data_model"]], "count_degrees_directed_out_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_directed_out_by_interaction_type"]], "count_degrees_directed_out_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_directed_out_by_interaction_type_and_data_model"]], "count_degrees_directed_out_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_directed_out_by_interaction_type_and_data_model_and_resource"]], "count_degrees_directed_out_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_directed_out_by_reference"]], "count_degrees_directed_out_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_directed_out_by_resource"]], "count_degrees_negative (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_negative"]], "count_degrees_negative_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_negative_by_data_model"]], "count_degrees_negative_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_negative_by_interaction_type"]], "count_degrees_negative_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_negative_by_interaction_type_and_data_model"]], "count_degrees_negative_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_negative_by_interaction_type_and_data_model_and_resource"]], "count_degrees_negative_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_negative_by_reference"]], "count_degrees_negative_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_negative_by_resource"]], "count_degrees_negative_in (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_negative_in"]], "count_degrees_negative_in_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_negative_in_by_data_model"]], "count_degrees_negative_in_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_negative_in_by_interaction_type"]], "count_degrees_negative_in_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_negative_in_by_interaction_type_and_data_model"]], "count_degrees_negative_in_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_negative_in_by_interaction_type_and_data_model_and_resource"]], "count_degrees_negative_in_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_negative_in_by_reference"]], "count_degrees_negative_in_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_negative_in_by_resource"]], "count_degrees_negative_out (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_negative_out"]], "count_degrees_negative_out_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_negative_out_by_data_model"]], "count_degrees_negative_out_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_negative_out_by_interaction_type"]], "count_degrees_negative_out_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_negative_out_by_interaction_type_and_data_model"]], "count_degrees_negative_out_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_negative_out_by_interaction_type_and_data_model_and_resource"]], "count_degrees_negative_out_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_negative_out_by_reference"]], "count_degrees_negative_out_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_negative_out_by_resource"]], "count_degrees_non_directed (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_non_directed"]], "count_degrees_non_directed_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_non_directed_by_data_model"]], "count_degrees_non_directed_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_non_directed_by_interaction_type"]], "count_degrees_non_directed_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_non_directed_by_interaction_type_and_data_model"]], "count_degrees_non_directed_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_non_directed_by_interaction_type_and_data_model_and_resource"]], "count_degrees_non_directed_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_non_directed_by_reference"]], "count_degrees_non_directed_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_non_directed_by_resource"]], "count_degrees_positive (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_positive"]], "count_degrees_positive_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_positive_by_data_model"]], "count_degrees_positive_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_positive_by_interaction_type"]], "count_degrees_positive_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_positive_by_interaction_type_and_data_model"]], "count_degrees_positive_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_positive_by_interaction_type_and_data_model_and_resource"]], "count_degrees_positive_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_positive_by_reference"]], "count_degrees_positive_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_positive_by_resource"]], "count_degrees_positive_in (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_positive_in"]], "count_degrees_positive_in_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_positive_in_by_data_model"]], "count_degrees_positive_in_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_positive_in_by_interaction_type"]], "count_degrees_positive_in_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_positive_in_by_interaction_type_and_data_model"]], "count_degrees_positive_in_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_positive_in_by_interaction_type_and_data_model_and_resource"]], "count_degrees_positive_in_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_positive_in_by_reference"]], "count_degrees_positive_in_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_positive_in_by_resource"]], "count_degrees_positive_out (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_positive_out"]], "count_degrees_positive_out_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_positive_out_by_data_model"]], "count_degrees_positive_out_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_positive_out_by_interaction_type"]], "count_degrees_positive_out_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_positive_out_by_interaction_type_and_data_model"]], "count_degrees_positive_out_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_positive_out_by_interaction_type_and_data_model_and_resource"]], "count_degrees_positive_out_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_positive_out_by_reference"]], "count_degrees_positive_out_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_positive_out_by_resource"]], "count_degrees_signed (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_signed"]], "count_degrees_signed_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_signed_by_data_model"]], "count_degrees_signed_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_signed_by_interaction_type"]], "count_degrees_signed_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_signed_by_interaction_type_and_data_model"]], "count_degrees_signed_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_signed_by_interaction_type_and_data_model_and_resource"]], "count_degrees_signed_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_signed_by_reference"]], "count_degrees_signed_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_signed_by_resource"]], "count_degrees_signed_in (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_signed_in"]], "count_degrees_signed_in_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_signed_in_by_data_model"]], "count_degrees_signed_in_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_signed_in_by_interaction_type"]], "count_degrees_signed_in_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_signed_in_by_interaction_type_and_data_model"]], "count_degrees_signed_in_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_signed_in_by_interaction_type_and_data_model_and_resource"]], "count_degrees_signed_in_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_signed_in_by_reference"]], "count_degrees_signed_in_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_signed_in_by_resource"]], "count_degrees_signed_out (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_signed_out"]], "count_degrees_signed_out_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_signed_out_by_data_model"]], "count_degrees_signed_out_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_signed_out_by_interaction_type"]], "count_degrees_signed_out_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_signed_out_by_interaction_type_and_data_model"]], "count_degrees_signed_out_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_signed_out_by_interaction_type_and_data_model_and_resource"]], "count_degrees_signed_out_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_signed_out_by_reference"]], "count_degrees_signed_out_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_signed_out_by_resource"]], "count_degrees_undirected (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_undirected"]], "count_degrees_undirected_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_undirected_by_data_model"]], "count_degrees_undirected_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_undirected_by_interaction_type"]], "count_degrees_undirected_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_undirected_by_interaction_type_and_data_model"]], "count_degrees_undirected_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_undirected_by_interaction_type_and_data_model_and_resource"]], "count_degrees_undirected_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_undirected_by_reference"]], "count_degrees_undirected_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_degrees_undirected_by_resource"]], "count_entities (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_entities"]], "count_entities_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_entities_by_data_model"]], "count_entities_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_entities_by_interaction_type"]], "count_entities_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_entities_by_interaction_type_and_data_model"]], "count_entities_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_entities_by_interaction_type_and_data_model_and_resource"]], "count_entities_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_entities_by_reference"]], "count_entities_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_entities_by_resource"]], "count_evidences (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_evidences"]], "count_evidences_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_evidences_by_data_model"]], "count_evidences_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_evidences_by_interaction_type"]], "count_evidences_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_evidences_by_interaction_type_and_data_model"]], "count_evidences_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_evidences_by_interaction_type_and_data_model_and_resource"]], "count_evidences_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_evidences_by_reference"]], "count_evidences_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_evidences_by_resource"]], "count_identifiers (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_identifiers"]], "count_identifiers_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_identifiers_by_data_model"]], "count_identifiers_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_identifiers_by_interaction_type"]], "count_identifiers_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_identifiers_by_interaction_type_and_data_model"]], "count_identifiers_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_identifiers_by_interaction_type_and_data_model_and_resource"]], "count_identifiers_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_identifiers_by_reference"]], "count_identifiers_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_identifiers_by_resource"]], "count_interaction_types (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interaction_types"]], "count_interaction_types_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interaction_types_by_data_model"]], "count_interaction_types_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interaction_types_by_interaction_type"]], "count_interaction_types_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interaction_types_by_interaction_type_and_data_model"]], "count_interaction_types_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interaction_types_by_interaction_type_and_data_model_and_resource"]], "count_interaction_types_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interaction_types_by_reference"]], "count_interaction_types_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interaction_types_by_resource"]], "count_interactions (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions"]], "count_interactions_0 (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_0"]], "count_interactions_0_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_0_by_data_model"]], "count_interactions_0_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_0_by_interaction_type"]], "count_interactions_0_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_0_by_interaction_type_and_data_model"]], "count_interactions_0_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_0_by_interaction_type_and_data_model_and_resource"]], "count_interactions_0_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_0_by_reference"]], "count_interactions_0_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_0_by_resource"]], "count_interactions_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_by_data_model"]], "count_interactions_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_by_interaction_type"]], "count_interactions_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_by_interaction_type_and_data_model"]], "count_interactions_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_by_interaction_type_and_data_model_and_resource"]], "count_interactions_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_by_reference"]], "count_interactions_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_by_resource"]], "count_interactions_directed (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_directed"]], "count_interactions_directed_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_directed_by_data_model"]], "count_interactions_directed_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_directed_by_interaction_type"]], "count_interactions_directed_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_directed_by_interaction_type_and_data_model"]], "count_interactions_directed_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_directed_by_interaction_type_and_data_model_and_resource"]], "count_interactions_directed_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_directed_by_reference"]], "count_interactions_directed_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_directed_by_resource"]], "count_interactions_mutual (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_mutual"]], "count_interactions_mutual_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_mutual_by_data_model"]], "count_interactions_mutual_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_mutual_by_interaction_type"]], "count_interactions_mutual_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_mutual_by_interaction_type_and_data_model"]], "count_interactions_mutual_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_mutual_by_interaction_type_and_data_model_and_resource"]], "count_interactions_mutual_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_mutual_by_reference"]], "count_interactions_mutual_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_mutual_by_resource"]], "count_interactions_negative (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_negative"]], "count_interactions_negative_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_negative_by_data_model"]], "count_interactions_negative_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_negative_by_interaction_type"]], "count_interactions_negative_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_negative_by_interaction_type_and_data_model"]], "count_interactions_negative_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_negative_by_interaction_type_and_data_model_and_resource"]], "count_interactions_negative_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_negative_by_reference"]], "count_interactions_negative_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_negative_by_resource"]], "count_interactions_non_directed (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_non_directed"]], "count_interactions_non_directed_0 (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_non_directed_0"]], "count_interactions_non_directed_0_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_non_directed_0_by_data_model"]], "count_interactions_non_directed_0_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_non_directed_0_by_interaction_type"]], "count_interactions_non_directed_0_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_non_directed_0_by_interaction_type_and_data_model"]], "count_interactions_non_directed_0_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_non_directed_0_by_interaction_type_and_data_model_and_resource"]], "count_interactions_non_directed_0_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_non_directed_0_by_reference"]], "count_interactions_non_directed_0_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_non_directed_0_by_resource"]], "count_interactions_non_directed_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_non_directed_by_data_model"]], "count_interactions_non_directed_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_non_directed_by_interaction_type"]], "count_interactions_non_directed_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_non_directed_by_interaction_type_and_data_model"]], "count_interactions_non_directed_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_non_directed_by_interaction_type_and_data_model_and_resource"]], "count_interactions_non_directed_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_non_directed_by_reference"]], "count_interactions_non_directed_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_non_directed_by_resource"]], "count_interactions_positive (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_positive"]], "count_interactions_positive_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_positive_by_data_model"]], "count_interactions_positive_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_positive_by_interaction_type"]], "count_interactions_positive_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_positive_by_interaction_type_and_data_model"]], "count_interactions_positive_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_positive_by_interaction_type_and_data_model_and_resource"]], "count_interactions_positive_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_positive_by_reference"]], "count_interactions_positive_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_positive_by_resource"]], "count_interactions_signed (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_signed"]], "count_interactions_signed_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_signed_by_data_model"]], "count_interactions_signed_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_signed_by_interaction_type"]], "count_interactions_signed_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_signed_by_interaction_type_and_data_model"]], "count_interactions_signed_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_signed_by_interaction_type_and_data_model_and_resource"]], "count_interactions_signed_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_signed_by_reference"]], "count_interactions_signed_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_signed_by_resource"]], "count_interactions_undirected (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_undirected"]], "count_interactions_undirected_0 (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_undirected_0"]], "count_interactions_undirected_0_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_undirected_0_by_data_model"]], "count_interactions_undirected_0_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_undirected_0_by_interaction_type"]], "count_interactions_undirected_0_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_undirected_0_by_interaction_type_and_data_model"]], "count_interactions_undirected_0_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_undirected_0_by_interaction_type_and_data_model_and_resource"]], "count_interactions_undirected_0_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_undirected_0_by_reference"]], "count_interactions_undirected_0_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_undirected_0_by_resource"]], "count_interactions_undirected_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_undirected_by_data_model"]], "count_interactions_undirected_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_undirected_by_interaction_type"]], "count_interactions_undirected_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_undirected_by_interaction_type_and_data_model"]], "count_interactions_undirected_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_undirected_by_interaction_type_and_data_model_and_resource"]], "count_interactions_undirected_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_undirected_by_reference"]], "count_interactions_undirected_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_interactions_undirected_by_resource"]], "count_labels (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_labels"]], "count_labels_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_labels_by_data_model"]], "count_labels_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_labels_by_interaction_type"]], "count_labels_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_labels_by_interaction_type_and_data_model"]], "count_labels_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_labels_by_interaction_type_and_data_model_and_resource"]], "count_labels_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_labels_by_reference"]], "count_labels_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_labels_by_resource"]], "count_lncrna_identifiers (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_lncrna_identifiers"]], "count_lncrna_identifiers_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_lncrna_identifiers_by_data_model"]], "count_lncrna_identifiers_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_lncrna_identifiers_by_interaction_type"]], "count_lncrna_identifiers_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_lncrna_identifiers_by_interaction_type_and_data_model"]], "count_lncrna_identifiers_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_lncrna_identifiers_by_interaction_type_and_data_model_and_resource"]], "count_lncrna_identifiers_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_lncrna_identifiers_by_reference"]], "count_lncrna_identifiers_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_lncrna_identifiers_by_resource"]], "count_lncrna_labels (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_lncrna_labels"]], "count_lncrna_labels_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_lncrna_labels_by_data_model"]], "count_lncrna_labels_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_lncrna_labels_by_interaction_type"]], "count_lncrna_labels_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_lncrna_labels_by_interaction_type_and_data_model"]], "count_lncrna_labels_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_lncrna_labels_by_interaction_type_and_data_model_and_resource"]], "count_lncrna_labels_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_lncrna_labels_by_reference"]], "count_lncrna_labels_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_lncrna_labels_by_resource"]], "count_lncrnas (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_lncrnas"]], "count_lncrnas_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_lncrnas_by_data_model"]], "count_lncrnas_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_lncrnas_by_interaction_type"]], "count_lncrnas_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_lncrnas_by_interaction_type_and_data_model"]], "count_lncrnas_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_lncrnas_by_interaction_type_and_data_model_and_resource"]], "count_lncrnas_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_lncrnas_by_reference"]], "count_lncrnas_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_lncrnas_by_resource"]], "count_mirna_identifiers (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_mirna_identifiers"]], "count_mirna_identifiers_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_mirna_identifiers_by_data_model"]], "count_mirna_identifiers_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_mirna_identifiers_by_interaction_type"]], "count_mirna_identifiers_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_mirna_identifiers_by_interaction_type_and_data_model"]], "count_mirna_identifiers_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_mirna_identifiers_by_interaction_type_and_data_model_and_resource"]], "count_mirna_identifiers_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_mirna_identifiers_by_reference"]], "count_mirna_identifiers_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_mirna_identifiers_by_resource"]], "count_mirna_labels (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_mirna_labels"]], "count_mirna_labels_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_mirna_labels_by_data_model"]], "count_mirna_labels_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_mirna_labels_by_interaction_type"]], "count_mirna_labels_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_mirna_labels_by_interaction_type_and_data_model"]], "count_mirna_labels_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_mirna_labels_by_interaction_type_and_data_model_and_resource"]], "count_mirna_labels_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_mirna_labels_by_reference"]], "count_mirna_labels_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_mirna_labels_by_resource"]], "count_mirnas (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_mirnas"]], "count_mirnas_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_mirnas_by_data_model"]], "count_mirnas_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_mirnas_by_interaction_type"]], "count_mirnas_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_mirnas_by_interaction_type_and_data_model"]], "count_mirnas_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_mirnas_by_interaction_type_and_data_model_and_resource"]], "count_mirnas_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_mirnas_by_reference"]], "count_mirnas_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_mirnas_by_resource"]], "count_partners() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.count_partners"]], "count_post_transcriptionally_activated_by (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_post_transcriptionally_activated_by"]], "count_post_transcriptionally_activates (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_post_transcriptionally_activates"]], "count_post_transcriptionally_regulated_by (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_post_transcriptionally_regulated_by"]], "count_post_transcriptionally_regulates (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_post_transcriptionally_regulates"]], "count_post_transcriptionally_suppressed_by (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_post_transcriptionally_suppressed_by"]], "count_post_transcriptionally_suppresses (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_post_transcriptionally_suppresses"]], "count_post_translationally_activated_by (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_post_translationally_activated_by"]], "count_post_translationally_activates (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_post_translationally_activates"]], "count_post_translationally_regulated_by (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_post_translationally_regulated_by"]], "count_post_translationally_regulates (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_post_translationally_regulates"]], "count_post_translationally_suppressed_by (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_post_translationally_suppressed_by"]], "count_post_translationally_suppresses (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_post_translationally_suppresses"]], "count_protein_identifiers (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_protein_identifiers"]], "count_protein_identifiers_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_protein_identifiers_by_data_model"]], "count_protein_identifiers_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_protein_identifiers_by_interaction_type"]], "count_protein_identifiers_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_protein_identifiers_by_interaction_type_and_data_model"]], "count_protein_identifiers_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_protein_identifiers_by_interaction_type_and_data_model_and_resource"]], "count_protein_identifiers_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_protein_identifiers_by_reference"]], "count_protein_identifiers_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_protein_identifiers_by_resource"]], "count_protein_labels (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_protein_labels"]], "count_protein_labels_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_protein_labels_by_data_model"]], "count_protein_labels_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_protein_labels_by_interaction_type"]], "count_protein_labels_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_protein_labels_by_interaction_type_and_data_model"]], "count_protein_labels_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_protein_labels_by_interaction_type_and_data_model_and_resource"]], "count_protein_labels_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_protein_labels_by_reference"]], "count_protein_labels_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_protein_labels_by_resource"]], "count_proteins (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_proteins"]], "count_proteins_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_proteins_by_data_model"]], "count_proteins_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_proteins_by_interaction_type"]], "count_proteins_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_proteins_by_interaction_type_and_data_model"]], "count_proteins_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_proteins_by_interaction_type_and_data_model_and_resource"]], "count_proteins_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_proteins_by_reference"]], "count_proteins_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_proteins_by_resource"]], "count_references (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_references"]], "count_references_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_references_by_data_model"]], "count_references_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_references_by_interaction_type"]], "count_references_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_references_by_interaction_type_and_data_model"]], "count_references_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_references_by_interaction_type_and_data_model_and_resource"]], "count_references_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_references_by_reference"]], "count_references_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_references_by_resource"]], "count_regulated_by (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_regulated_by"]], "count_regulates (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_regulates"]], "count_resource_names (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_resource_names"]], "count_resource_names_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_resource_names_by_data_model"]], "count_resource_names_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_resource_names_by_interaction_type"]], "count_resource_names_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_resource_names_by_interaction_type_and_data_model"]], "count_resource_names_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_resource_names_by_interaction_type_and_data_model_and_resource"]], "count_resource_names_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_resource_names_by_reference"]], "count_resource_names_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_resource_names_by_resource"]], "count_resource_names_via (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_resource_names_via"]], "count_resource_names_via_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_resource_names_via_by_data_model"]], "count_resource_names_via_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_resource_names_via_by_interaction_type"]], "count_resource_names_via_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_resource_names_via_by_interaction_type_and_data_model"]], "count_resource_names_via_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_resource_names_via_by_interaction_type_and_data_model_and_resource"]], "count_resource_names_via_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_resource_names_via_by_reference"]], "count_resource_names_via_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_resource_names_via_by_resource"]], "count_resources (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_resources"]], "count_resources_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_resources_by_data_model"]], "count_resources_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_resources_by_interaction_type"]], "count_resources_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_resources_by_interaction_type_and_data_model"]], "count_resources_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_resources_by_interaction_type_and_data_model_and_resource"]], "count_resources_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_resources_by_reference"]], "count_resources_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_resources_by_resource"]], "count_resources_via (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_resources_via"]], "count_resources_via_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_resources_via_by_data_model"]], "count_resources_via_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_resources_via_by_interaction_type"]], "count_resources_via_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_resources_via_by_interaction_type_and_data_model"]], "count_resources_via_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_resources_via_by_interaction_type_and_data_model_and_resource"]], "count_resources_via_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_resources_via_by_reference"]], "count_resources_via_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_resources_via_by_resource"]], "count_small_molecule_identifiers (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_small_molecule_identifiers"]], "count_small_molecule_identifiers_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_small_molecule_identifiers_by_data_model"]], "count_small_molecule_identifiers_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_small_molecule_identifiers_by_interaction_type"]], "count_small_molecule_identifiers_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_small_molecule_identifiers_by_interaction_type_and_data_model"]], "count_small_molecule_identifiers_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_small_molecule_identifiers_by_interaction_type_and_data_model_and_resource"]], "count_small_molecule_identifiers_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_small_molecule_identifiers_by_reference"]], "count_small_molecule_identifiers_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_small_molecule_identifiers_by_resource"]], "count_small_molecule_labels (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_small_molecule_labels"]], "count_small_molecule_labels_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_small_molecule_labels_by_data_model"]], "count_small_molecule_labels_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_small_molecule_labels_by_interaction_type"]], "count_small_molecule_labels_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_small_molecule_labels_by_interaction_type_and_data_model"]], "count_small_molecule_labels_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_small_molecule_labels_by_interaction_type_and_data_model_and_resource"]], "count_small_molecule_labels_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_small_molecule_labels_by_reference"]], "count_small_molecule_labels_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_small_molecule_labels_by_resource"]], "count_small_molecules (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_small_molecules"]], "count_small_molecules_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_small_molecules_by_data_model"]], "count_small_molecules_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_small_molecules_by_interaction_type"]], "count_small_molecules_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_small_molecules_by_interaction_type_and_data_model"]], "count_small_molecules_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_small_molecules_by_interaction_type_and_data_model_and_resource"]], "count_small_molecules_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_small_molecules_by_reference"]], "count_small_molecules_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_small_molecules_by_resource"]], "count_suppressed_by (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_suppressed_by"]], "count_suppresses (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_suppresses"]], "count_transcriptionally_activated_by (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_transcriptionally_activated_by"]], "count_transcriptionally_activates (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_transcriptionally_activates"]], "count_transcriptionally_regulated_by (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_transcriptionally_regulated_by"]], "count_transcriptionally_regulates (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_transcriptionally_regulates"]], "count_transcriptionally_suppressed_by (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_transcriptionally_suppressed_by"]], "count_transcriptionally_suppresses (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.count_transcriptionally_suppresses"]], "curation_effort_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.curation_effort_by_data_model"]], "curation_effort_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.curation_effort_by_interaction_type"]], "curation_effort_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.curation_effort_by_interaction_type_and_data_model"]], "curation_effort_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.curation_effort_by_interaction_type_and_data_model_and_resource"]], "curation_effort_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.curation_effort_by_reference"]], "curation_effort_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.curation_effort_by_resource"]], "data_models_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.data_models_by_data_model"]], "data_models_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.data_models_by_interaction_type"]], "data_models_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.data_models_by_interaction_type_and_data_model"]], "data_models_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.data_models_by_interaction_type_and_data_model_and_resource"]], "data_models_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.data_models_by_reference"]], "data_models_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.data_models_by_resource"]], "degrees_directed_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_directed_by_data_model"]], "degrees_directed_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_directed_by_interaction_type"]], "degrees_directed_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_directed_by_interaction_type_and_data_model"]], "degrees_directed_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_directed_by_interaction_type_and_data_model_and_resource"]], "degrees_directed_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_directed_by_reference"]], "degrees_directed_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_directed_by_resource"]], "degrees_directed_in_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_directed_in_by_data_model"]], "degrees_directed_in_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_directed_in_by_interaction_type"]], "degrees_directed_in_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_directed_in_by_interaction_type_and_data_model"]], "degrees_directed_in_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_directed_in_by_interaction_type_and_data_model_and_resource"]], "degrees_directed_in_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_directed_in_by_reference"]], "degrees_directed_in_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_directed_in_by_resource"]], "degrees_directed_out_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_directed_out_by_data_model"]], "degrees_directed_out_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_directed_out_by_interaction_type"]], "degrees_directed_out_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_directed_out_by_interaction_type_and_data_model"]], "degrees_directed_out_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_directed_out_by_interaction_type_and_data_model_and_resource"]], "degrees_directed_out_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_directed_out_by_reference"]], "degrees_directed_out_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_directed_out_by_resource"]], "degrees_negative_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_negative_by_data_model"]], "degrees_negative_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_negative_by_interaction_type"]], "degrees_negative_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_negative_by_interaction_type_and_data_model"]], "degrees_negative_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_negative_by_interaction_type_and_data_model_and_resource"]], "degrees_negative_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_negative_by_reference"]], "degrees_negative_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_negative_by_resource"]], "degrees_negative_in_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_negative_in_by_data_model"]], "degrees_negative_in_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_negative_in_by_interaction_type"]], "degrees_negative_in_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_negative_in_by_interaction_type_and_data_model"]], "degrees_negative_in_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_negative_in_by_interaction_type_and_data_model_and_resource"]], "degrees_negative_in_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_negative_in_by_reference"]], "degrees_negative_in_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_negative_in_by_resource"]], "degrees_negative_out_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_negative_out_by_data_model"]], "degrees_negative_out_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_negative_out_by_interaction_type"]], "degrees_negative_out_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_negative_out_by_interaction_type_and_data_model"]], "degrees_negative_out_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_negative_out_by_interaction_type_and_data_model_and_resource"]], "degrees_negative_out_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_negative_out_by_reference"]], "degrees_negative_out_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_negative_out_by_resource"]], "degrees_non_directed_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_non_directed_by_data_model"]], "degrees_non_directed_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_non_directed_by_interaction_type"]], "degrees_non_directed_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_non_directed_by_interaction_type_and_data_model"]], "degrees_non_directed_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_non_directed_by_interaction_type_and_data_model_and_resource"]], "degrees_non_directed_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_non_directed_by_reference"]], "degrees_non_directed_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_non_directed_by_resource"]], "degrees_positive_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_positive_by_data_model"]], "degrees_positive_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_positive_by_interaction_type"]], "degrees_positive_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_positive_by_interaction_type_and_data_model"]], "degrees_positive_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_positive_by_interaction_type_and_data_model_and_resource"]], "degrees_positive_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_positive_by_reference"]], "degrees_positive_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_positive_by_resource"]], "degrees_positive_in_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_positive_in_by_data_model"]], "degrees_positive_in_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_positive_in_by_interaction_type"]], "degrees_positive_in_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_positive_in_by_interaction_type_and_data_model"]], "degrees_positive_in_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_positive_in_by_interaction_type_and_data_model_and_resource"]], "degrees_positive_in_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_positive_in_by_reference"]], "degrees_positive_in_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_positive_in_by_resource"]], "degrees_positive_out_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_positive_out_by_data_model"]], "degrees_positive_out_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_positive_out_by_interaction_type"]], "degrees_positive_out_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_positive_out_by_interaction_type_and_data_model"]], "degrees_positive_out_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_positive_out_by_interaction_type_and_data_model_and_resource"]], "degrees_positive_out_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_positive_out_by_reference"]], "degrees_positive_out_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_positive_out_by_resource"]], "degrees_signed_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_signed_by_data_model"]], "degrees_signed_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_signed_by_interaction_type"]], "degrees_signed_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_signed_by_interaction_type_and_data_model"]], "degrees_signed_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_signed_by_interaction_type_and_data_model_and_resource"]], "degrees_signed_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_signed_by_reference"]], "degrees_signed_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_signed_by_resource"]], "degrees_signed_in_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_signed_in_by_data_model"]], "degrees_signed_in_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_signed_in_by_interaction_type"]], "degrees_signed_in_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_signed_in_by_interaction_type_and_data_model"]], "degrees_signed_in_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_signed_in_by_interaction_type_and_data_model_and_resource"]], "degrees_signed_in_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_signed_in_by_reference"]], "degrees_signed_in_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_signed_in_by_resource"]], "degrees_signed_out_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_signed_out_by_data_model"]], "degrees_signed_out_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_signed_out_by_interaction_type"]], "degrees_signed_out_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_signed_out_by_interaction_type_and_data_model"]], "degrees_signed_out_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_signed_out_by_interaction_type_and_data_model_and_resource"]], "degrees_signed_out_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_signed_out_by_reference"]], "degrees_signed_out_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_signed_out_by_resource"]], "degrees_undirected_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_undirected_by_data_model"]], "degrees_undirected_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_undirected_by_interaction_type"]], "degrees_undirected_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_undirected_by_interaction_type_and_data_model"]], "degrees_undirected_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_undirected_by_interaction_type_and_data_model_and_resource"]], "degrees_undirected_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_undirected_by_reference"]], "degrees_undirected_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.degrees_undirected_by_resource"]], "direction_consistency() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.direction_consistency"]], "dorothea() (pypath.core.network.network class method)": [[145, "pypath.core.network.Network.dorothea"]], "entities_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.entities_by_data_model"]], "entities_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.entities_by_interaction_type"]], "entities_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.entities_by_interaction_type_and_data_model"]], "entities_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.entities_by_interaction_type_and_data_model_and_resource"]], "entities_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.entities_by_reference"]], "entities_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.entities_by_resource"]], "entity_by_id() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.entity_by_id"]], "entity_by_label() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.entity_by_label"]], "evidences_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.evidences_by_data_model"]], "evidences_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.evidences_by_interaction_type"]], "evidences_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.evidences_by_interaction_type_and_data_model"]], "evidences_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.evidences_by_interaction_type_and_data_model_and_resource"]], "evidences_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.evidences_by_reference"]], "evidences_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.evidences_by_resource"]], "extra_directions() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.extra_directions"]], "find_paths() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.find_paths"]], "from_igraph() (pypath.core.network.network class method)": [[145, "pypath.core.network.Network.from_igraph"]], "from_pickle() (pypath.core.network.network class method)": [[145, "pypath.core.network.Network.from_pickle"]], "get_complex_identifiers (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_complex_identifiers"]], "get_complex_labels (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_complex_labels"]], "get_complexes (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_complexes"]], "get_curation_effort (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_curation_effort"]], "get_data_models (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_data_models"]], "get_degrees_directed (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_degrees_directed"]], "get_degrees_directed_in (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_degrees_directed_in"]], "get_degrees_directed_out (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_degrees_directed_out"]], "get_degrees_negative (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_degrees_negative"]], "get_degrees_negative_in (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_degrees_negative_in"]], "get_degrees_negative_out (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_degrees_negative_out"]], "get_degrees_non_directed (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_degrees_non_directed"]], "get_degrees_positive (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_degrees_positive"]], "get_degrees_positive_in (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_degrees_positive_in"]], "get_degrees_positive_out (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_degrees_positive_out"]], "get_degrees_signed (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_degrees_signed"]], "get_degrees_signed_in (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_degrees_signed_in"]], "get_degrees_signed_out (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_degrees_signed_out"]], "get_degrees_undirected (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_degrees_undirected"]], "get_entities (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_entities"]], "get_evidences (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_evidences"]], "get_identifiers (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_identifiers"]], "get_interaction_types (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_interaction_types"]], "get_interactions (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_interactions"]], "get_interactions_0 (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_interactions_0"]], "get_interactions_directed (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_interactions_directed"]], "get_interactions_mutual (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_interactions_mutual"]], "get_interactions_negative (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_interactions_negative"]], "get_interactions_non_directed (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_interactions_non_directed"]], "get_interactions_non_directed_0 (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_interactions_non_directed_0"]], "get_interactions_positive (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_interactions_positive"]], "get_interactions_signed (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_interactions_signed"]], "get_interactions_undirected (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_interactions_undirected"]], "get_interactions_undirected_0 (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_interactions_undirected_0"]], "get_labels (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_labels"]], "get_lncrna_identifiers (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_lncrna_identifiers"]], "get_lncrna_labels (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_lncrna_labels"]], "get_lncrnas (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_lncrnas"]], "get_mirna_identifiers (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_mirna_identifiers"]], "get_mirna_labels (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_mirna_labels"]], "get_mirnas (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_mirnas"]], "get_organisms() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.get_organisms"]], "get_protein_identifiers (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_protein_identifiers"]], "get_protein_labels (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_protein_labels"]], "get_proteins (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_proteins"]], "get_references (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_references"]], "get_resource_names (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_resource_names"]], "get_resource_names_via (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_resource_names_via"]], "get_resources (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_resources"]], "get_resources_via (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_resources_via"]], "get_small_molecule_identifiers (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_small_molecule_identifiers"]], "get_small_molecule_labels (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_small_molecule_labels"]], "get_small_molecules (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.get_small_molecules"]], "htp_interactions() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.htp_interactions"]], "htp_references() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.htp_references"]], "identifiers_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.identifiers_by_data_model"]], "identifiers_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.identifiers_by_interaction_type"]], "identifiers_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.identifiers_by_interaction_type_and_data_model"]], "identifiers_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.identifiers_by_interaction_type_and_data_model_and_resource"]], "identifiers_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.identifiers_by_reference"]], "identifiers_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.identifiers_by_resource"]], "init_network() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.init_network"]], "interaction() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.interaction"]], "interaction_by_id() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.interaction_by_id"]], "interaction_by_label() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.interaction_by_label"]], "interaction_types_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interaction_types_by_data_model"]], "interaction_types_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interaction_types_by_interaction_type"]], "interaction_types_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interaction_types_by_interaction_type_and_data_model"]], "interaction_types_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interaction_types_by_interaction_type_and_data_model_and_resource"]], "interaction_types_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interaction_types_by_reference"]], "interaction_types_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interaction_types_by_resource"]], "interactions_0_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_0_by_data_model"]], "interactions_0_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_0_by_interaction_type"]], "interactions_0_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_0_by_interaction_type_and_data_model"]], "interactions_0_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_0_by_interaction_type_and_data_model_and_resource"]], "interactions_0_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_0_by_reference"]], "interactions_0_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_0_by_resource"]], "interactions_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_by_data_model"]], "interactions_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_by_interaction_type"]], "interactions_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_by_interaction_type_and_data_model"]], "interactions_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_by_interaction_type_and_data_model_and_resource"]], "interactions_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_by_reference"]], "interactions_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_by_resource"]], "interactions_directed_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_directed_by_data_model"]], "interactions_directed_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_directed_by_interaction_type"]], "interactions_directed_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_directed_by_interaction_type_and_data_model"]], "interactions_directed_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_directed_by_interaction_type_and_data_model_and_resource"]], "interactions_directed_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_directed_by_reference"]], "interactions_directed_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_directed_by_resource"]], "interactions_mutual_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_mutual_by_data_model"]], "interactions_mutual_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_mutual_by_interaction_type"]], "interactions_mutual_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_mutual_by_interaction_type_and_data_model"]], "interactions_mutual_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_mutual_by_interaction_type_and_data_model_and_resource"]], "interactions_mutual_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_mutual_by_reference"]], "interactions_mutual_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_mutual_by_resource"]], "interactions_negative_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_negative_by_data_model"]], "interactions_negative_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_negative_by_interaction_type"]], "interactions_negative_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_negative_by_interaction_type_and_data_model"]], "interactions_negative_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_negative_by_interaction_type_and_data_model_and_resource"]], "interactions_negative_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_negative_by_reference"]], "interactions_negative_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_negative_by_resource"]], "interactions_non_directed_0_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_non_directed_0_by_data_model"]], "interactions_non_directed_0_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_non_directed_0_by_interaction_type"]], "interactions_non_directed_0_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_non_directed_0_by_interaction_type_and_data_model"]], "interactions_non_directed_0_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_non_directed_0_by_interaction_type_and_data_model_and_resource"]], "interactions_non_directed_0_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_non_directed_0_by_reference"]], "interactions_non_directed_0_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_non_directed_0_by_resource"]], "interactions_non_directed_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_non_directed_by_data_model"]], "interactions_non_directed_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_non_directed_by_interaction_type"]], "interactions_non_directed_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_non_directed_by_interaction_type_and_data_model"]], "interactions_non_directed_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_non_directed_by_interaction_type_and_data_model_and_resource"]], "interactions_non_directed_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_non_directed_by_reference"]], "interactions_non_directed_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_non_directed_by_resource"]], "interactions_positive_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_positive_by_data_model"]], "interactions_positive_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_positive_by_interaction_type"]], "interactions_positive_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_positive_by_interaction_type_and_data_model"]], "interactions_positive_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_positive_by_interaction_type_and_data_model_and_resource"]], "interactions_positive_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_positive_by_reference"]], "interactions_positive_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_positive_by_resource"]], "interactions_signed_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_signed_by_data_model"]], "interactions_signed_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_signed_by_interaction_type"]], "interactions_signed_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_signed_by_interaction_type_and_data_model"]], "interactions_signed_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_signed_by_interaction_type_and_data_model_and_resource"]], "interactions_signed_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_signed_by_reference"]], "interactions_signed_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_signed_by_resource"]], "interactions_undirected_0_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_undirected_0_by_data_model"]], "interactions_undirected_0_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_undirected_0_by_interaction_type"]], "interactions_undirected_0_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_undirected_0_by_interaction_type_and_data_model"]], "interactions_undirected_0_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_undirected_0_by_interaction_type_and_data_model_and_resource"]], "interactions_undirected_0_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_undirected_0_by_reference"]], "interactions_undirected_0_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_undirected_0_by_resource"]], "interactions_undirected_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_undirected_by_data_model"]], "interactions_undirected_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_undirected_by_interaction_type"]], "interactions_undirected_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_undirected_by_interaction_type_and_data_model"]], "interactions_undirected_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_undirected_by_interaction_type_and_data_model_and_resource"]], "interactions_undirected_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_undirected_by_reference"]], "interactions_undirected_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.interactions_undirected_by_resource"]], "labels_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.labels_by_data_model"]], "labels_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.labels_by_interaction_type"]], "labels_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.labels_by_interaction_type_and_data_model"]], "labels_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.labels_by_interaction_type_and_data_model_and_resource"]], "labels_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.labels_by_reference"]], "labels_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.labels_by_resource"]], "lncrna_identifiers_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.lncrna_identifiers_by_data_model"]], "lncrna_identifiers_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.lncrna_identifiers_by_interaction_type"]], "lncrna_identifiers_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.lncrna_identifiers_by_interaction_type_and_data_model"]], "lncrna_identifiers_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.lncrna_identifiers_by_interaction_type_and_data_model_and_resource"]], "lncrna_identifiers_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.lncrna_identifiers_by_reference"]], "lncrna_identifiers_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.lncrna_identifiers_by_resource"]], "lncrna_labels_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.lncrna_labels_by_data_model"]], "lncrna_labels_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.lncrna_labels_by_interaction_type"]], "lncrna_labels_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.lncrna_labels_by_interaction_type_and_data_model"]], "lncrna_labels_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.lncrna_labels_by_interaction_type_and_data_model_and_resource"]], "lncrna_labels_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.lncrna_labels_by_reference"]], "lncrna_labels_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.lncrna_labels_by_resource"]], "lncrnas_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.lncrnas_by_data_model"]], "lncrnas_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.lncrnas_by_interaction_type"]], "lncrnas_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.lncrnas_by_interaction_type_and_data_model"]], "lncrnas_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.lncrnas_by_interaction_type_and_data_model_and_resource"]], "lncrnas_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.lncrnas_by_reference"]], "lncrnas_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.lncrnas_by_resource"]], "load() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.load"]], "load_from_pickle() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.load_from_pickle"]], "load_resource() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.load_resource"]], "load_resources() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.load_resources"]], "make_df() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.make_df"]], "mirna_identifiers_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.mirna_identifiers_by_data_model"]], "mirna_identifiers_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.mirna_identifiers_by_interaction_type"]], "mirna_identifiers_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.mirna_identifiers_by_interaction_type_and_data_model"]], "mirna_identifiers_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.mirna_identifiers_by_interaction_type_and_data_model_and_resource"]], "mirna_identifiers_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.mirna_identifiers_by_reference"]], "mirna_identifiers_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.mirna_identifiers_by_resource"]], "mirna_labels_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.mirna_labels_by_data_model"]], "mirna_labels_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.mirna_labels_by_interaction_type"]], "mirna_labels_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.mirna_labels_by_interaction_type_and_data_model"]], "mirna_labels_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.mirna_labels_by_interaction_type_and_data_model_and_resource"]], "mirna_labels_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.mirna_labels_by_reference"]], "mirna_labels_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.mirna_labels_by_resource"]], "mirna_target() (pypath.core.network.network class method)": [[145, "pypath.core.network.Network.mirna_target"]], "mirnas_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.mirnas_by_data_model"]], "mirnas_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.mirnas_by_interaction_type"]], "mirnas_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.mirnas_by_interaction_type_and_data_model"]], "mirnas_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.mirnas_by_interaction_type_and_data_model_and_resource"]], "mirnas_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.mirnas_by_reference"]], "mirnas_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.mirnas_by_resource"]], "numof_interactions_per_reference() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.numof_interactions_per_reference"]], "organisms_check() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.organisms_check"]], "partners() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.partners"]], "post_transcriptionally_activated_by (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.post_transcriptionally_activated_by"]], "post_transcriptionally_activates (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.post_transcriptionally_activates"]], "post_transcriptionally_regulated_by (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.post_transcriptionally_regulated_by"]], "post_transcriptionally_regulates (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.post_transcriptionally_regulates"]], "post_transcriptionally_suppressed_by (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.post_transcriptionally_suppressed_by"]], "post_transcriptionally_suppresses (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.post_transcriptionally_suppresses"]], "post_translationally_activated_by (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.post_translationally_activated_by"]], "post_translationally_activates (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.post_translationally_activates"]], "post_translationally_regulated_by (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.post_translationally_regulated_by"]], "post_translationally_regulates (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.post_translationally_regulates"]], "post_translationally_suppressed_by (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.post_translationally_suppressed_by"]], "post_translationally_suppresses (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.post_translationally_suppresses"]], "protein_identifiers_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.protein_identifiers_by_data_model"]], "protein_identifiers_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.protein_identifiers_by_interaction_type"]], "protein_identifiers_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.protein_identifiers_by_interaction_type_and_data_model"]], "protein_identifiers_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.protein_identifiers_by_interaction_type_and_data_model_and_resource"]], "protein_identifiers_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.protein_identifiers_by_reference"]], "protein_identifiers_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.protein_identifiers_by_resource"]], "protein_labels_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.protein_labels_by_data_model"]], "protein_labels_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.protein_labels_by_interaction_type"]], "protein_labels_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.protein_labels_by_interaction_type_and_data_model"]], "protein_labels_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.protein_labels_by_interaction_type_and_data_model_and_resource"]], "protein_labels_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.protein_labels_by_reference"]], "protein_labels_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.protein_labels_by_resource"]], "proteins_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.proteins_by_data_model"]], "proteins_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.proteins_by_interaction_type"]], "proteins_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.proteins_by_interaction_type_and_data_model"]], "proteins_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.proteins_by_interaction_type_and_data_model_and_resource"]], "proteins_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.proteins_by_reference"]], "proteins_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.proteins_by_resource"]], "random_interaction() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.random_interaction"]], "references_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.references_by_data_model"]], "references_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.references_by_interaction_type"]], "references_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.references_by_interaction_type_and_data_model"]], "references_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.references_by_interaction_type_and_data_model_and_resource"]], "references_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.references_by_reference"]], "references_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.references_by_resource"]], "regulated_by (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.regulated_by"]], "regulates (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.regulates"]], "reload() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.reload"]], "remove_interaction() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.remove_interaction"]], "remove_loops() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.remove_loops"]], "remove_node() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.remove_node"]], "remove_zero_degree() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.remove_zero_degree"]], "reset() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.reset"]], "resource_names (pypath.core.network.network property)": [[145, "pypath.core.network.Network.resource_names"]], "resource_names_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.resource_names_by_data_model"]], "resource_names_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.resource_names_by_interaction_type"]], "resource_names_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.resource_names_by_interaction_type_and_data_model"]], "resource_names_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.resource_names_by_interaction_type_and_data_model_and_resource"]], "resource_names_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.resource_names_by_reference"]], "resource_names_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.resource_names_by_resource"]], "resource_names_via_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.resource_names_via_by_data_model"]], "resource_names_via_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.resource_names_via_by_interaction_type"]], "resource_names_via_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.resource_names_via_by_interaction_type_and_data_model"]], "resource_names_via_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.resource_names_via_by_interaction_type_and_data_model_and_resource"]], "resource_names_via_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.resource_names_via_by_reference"]], "resource_names_via_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.resource_names_via_by_resource"]], "resources (pypath.core.network.network property)": [[145, "pypath.core.network.Network.resources"]], "resources_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.resources_by_data_model"]], "resources_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.resources_by_interaction_type"]], "resources_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.resources_by_interaction_type_and_data_model"]], "resources_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.resources_by_interaction_type_and_data_model_and_resource"]], "resources_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.resources_by_reference"]], "resources_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.resources_by_resource"]], "resources_via_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.resources_via_by_data_model"]], "resources_via_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.resources_via_by_interaction_type"]], "resources_via_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.resources_via_by_interaction_type_and_data_model"]], "resources_via_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.resources_via_by_interaction_type_and_data_model_and_resource"]], "resources_via_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.resources_via_by_reference"]], "resources_via_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.resources_via_by_resource"]], "save_to_pickle() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.save_to_pickle"]], "small_molecule_identifiers_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.small_molecule_identifiers_by_data_model"]], "small_molecule_identifiers_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.small_molecule_identifiers_by_interaction_type"]], "small_molecule_identifiers_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.small_molecule_identifiers_by_interaction_type_and_data_model"]], "small_molecule_identifiers_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.small_molecule_identifiers_by_interaction_type_and_data_model_and_resource"]], "small_molecule_identifiers_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.small_molecule_identifiers_by_reference"]], "small_molecule_identifiers_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.small_molecule_identifiers_by_resource"]], "small_molecule_labels_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.small_molecule_labels_by_data_model"]], "small_molecule_labels_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.small_molecule_labels_by_interaction_type"]], "small_molecule_labels_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.small_molecule_labels_by_interaction_type_and_data_model"]], "small_molecule_labels_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.small_molecule_labels_by_interaction_type_and_data_model_and_resource"]], "small_molecule_labels_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.small_molecule_labels_by_reference"]], "small_molecule_labels_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.small_molecule_labels_by_resource"]], "small_molecules_by_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.small_molecules_by_data_model"]], "small_molecules_by_interaction_type (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.small_molecules_by_interaction_type"]], "small_molecules_by_interaction_type_and_data_model (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.small_molecules_by_interaction_type_and_data_model"]], "small_molecules_by_interaction_type_and_data_model_and_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.small_molecules_by_interaction_type_and_data_model_and_resource"]], "small_molecules_by_reference (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.small_molecules_by_reference"]], "small_molecules_by_resource (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.small_molecules_by_resource"]], "summaries_tab() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.summaries_tab"]], "suppressed_by (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.suppressed_by"]], "suppresses (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.suppresses"]], "to_igraph() (pypath.core.network.network method)": [[145, "pypath.core.network.Network.to_igraph"]], "transcription() (pypath.core.network.network class method)": [[145, "pypath.core.network.Network.transcription"]], "transcriptionally_activated_by (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.transcriptionally_activated_by"]], "transcriptionally_activates (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.transcriptionally_activates"]], "transcriptionally_regulated_by (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.transcriptionally_regulated_by"]], "transcriptionally_regulates (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.transcriptionally_regulates"]], "transcriptionally_suppressed_by (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.transcriptionally_suppressed_by"]], "transcriptionally_suppresses (pypath.core.network.network attribute)": [[145, "pypath.core.network.Network.transcriptionally_suppresses"]], "networkentitycollection (class in pypath.core.network)": [[146, "pypath.core.network.NetworkEntityCollection"]], "__init__() (pypath.core.network.networkentitycollection method)": [[146, "pypath.core.network.NetworkEntityCollection.__init__"]], "networkstatsrecord (class in pypath.core.network)": [[147, "pypath.core.network.NetworkStatsRecord"]], "__init__() (pypath.core.network.networkstatsrecord method)": [[147, "pypath.core.network.NetworkStatsRecord.__init__"]], "by_category (pypath.core.network.networkstatsrecord attribute)": [[147, "pypath.core.network.NetworkStatsRecord.by_category"]], "by_resource (pypath.core.network.networkstatsrecord attribute)": [[147, "pypath.core.network.NetworkStatsRecord.by_resource"]], "cat_resource (pypath.core.network.networkstatsrecord attribute)": [[147, "pypath.core.network.NetworkStatsRecord.cat_resource"]], "count() (pypath.core.network.networkstatsrecord method)": [[147, "pypath.core.network.NetworkStatsRecord.count"]], "index() (pypath.core.network.networkstatsrecord method)": [[147, "pypath.core.network.NetworkStatsRecord.index"]], "label (pypath.core.network.networkstatsrecord attribute)": [[147, "pypath.core.network.NetworkStatsRecord.label"]], "method (pypath.core.network.networkstatsrecord attribute)": [[147, "pypath.core.network.NetworkStatsRecord.method"]], "percent (pypath.core.network.networkstatsrecord attribute)": [[147, "pypath.core.network.NetworkStatsRecord.percent"]], "percent_cat (pypath.core.network.networkstatsrecord attribute)": [[147, "pypath.core.network.NetworkStatsRecord.percent_cat"]], "percent_res_cat (pypath.core.network.networkstatsrecord attribute)": [[147, "pypath.core.network.NetworkStatsRecord.percent_res_cat"]], "resource_cat (pypath.core.network.networkstatsrecord attribute)": [[147, "pypath.core.network.NetworkStatsRecord.resource_cat"]], "shared (pypath.core.network.networkstatsrecord attribute)": [[147, "pypath.core.network.NetworkStatsRecord.shared"]], "shared_cat (pypath.core.network.networkstatsrecord attribute)": [[147, "pypath.core.network.NetworkStatsRecord.shared_cat"]], "shared_res_cat (pypath.core.network.networkstatsrecord attribute)": [[147, "pypath.core.network.NetworkStatsRecord.shared_res_cat"]], "total (pypath.core.network.networkstatsrecord attribute)": [[147, "pypath.core.network.NetworkStatsRecord.total"]], "unique (pypath.core.network.networkstatsrecord attribute)": [[147, "pypath.core.network.NetworkStatsRecord.unique"]], "unique_cat (pypath.core.network.networkstatsrecord attribute)": [[147, "pypath.core.network.NetworkStatsRecord.unique_cat"]], "unique_res_cat (pypath.core.network.networkstatsrecord attribute)": [[147, "pypath.core.network.NetworkStatsRecord.unique_res_cat"]], "get_db() (in module pypath.core.network)": [[148, "pypath.core.network.get_db"]], "init_db() (in module pypath.core.network)": [[149, "pypath.core.network.init_db"]], "pypath.data": [[150, "module-pypath.data"]], "disclaimer() (in module pypath)": [[151, "pypath.disclaimer"]], "info() (in module pypath)": [[152, "pypath.info"]], "pypath.inputs": [[153, "module-pypath.inputs"]], "pypath.inputs.abs": [[154, "module-pypath.inputs.abs"]], "abs_interactions() (in module pypath.inputs.abs)": [[155, "pypath.inputs.abs.abs_interactions"]], "pypath.inputs.acsn": [[156, "module-pypath.inputs.acsn"]], "acsn_interactions() (in module pypath.inputs.acsn)": [[157, "pypath.inputs.acsn.acsn_interactions"]], "acsn_interactions_sif() (in module pypath.inputs.acsn)": [[158, "pypath.inputs.acsn.acsn_interactions_sif"]], "pypath.inputs.adhesome": [[159, "module-pypath.inputs.adhesome"]], "adhesome_annotations() (in module pypath.inputs.adhesome)": [[160, "pypath.inputs.adhesome.adhesome_annotations"]], "adhesome_interactions() (in module pypath.inputs.adhesome)": [[161, "pypath.inputs.adhesome.adhesome_interactions"]], "pypath.inputs.almen2009": [[162, "module-pypath.inputs.almen2009"]], "almen2009_annotations() (in module pypath.inputs.almen2009)": [[163, "pypath.inputs.almen2009.almen2009_annotations"]], "pypath.inputs.baccin2019": [[164, "module-pypath.inputs.baccin2019"]], "baccin2019_annotations() (in module pypath.inputs.baccin2019)": [[165, "pypath.inputs.baccin2019.baccin2019_annotations"]], "baccin2019_interactions() (in module pypath.inputs.baccin2019)": [[166, "pypath.inputs.baccin2019.baccin2019_interactions"]], "pypath.inputs.biogps": [[167, "module-pypath.inputs.biogps"]], "biogpsdataset (class in pypath.inputs.biogps)": [[168, "pypath.inputs.biogps.BiogpsDataset"]], "__init__() (pypath.inputs.biogps.biogpsdataset method)": [[168, "pypath.inputs.biogps.BiogpsDataset.__init__"]], "count() (pypath.inputs.biogps.biogpsdataset method)": [[168, "pypath.inputs.biogps.BiogpsDataset.count"]], "index() (pypath.inputs.biogps.biogpsdataset method)": [[168, "pypath.inputs.biogps.BiogpsDataset.index"]], "label (pypath.inputs.biogps.biogpsdataset attribute)": [[168, "pypath.inputs.biogps.BiogpsDataset.label"]], "organism (pypath.inputs.biogps.biogpsdataset attribute)": [[168, "pypath.inputs.biogps.BiogpsDataset.organism"]], "url (pypath.inputs.biogps.biogpsdataset attribute)": [[168, "pypath.inputs.biogps.BiogpsDataset.url"]], "biogps_annotations() (in module pypath.inputs.biogps)": [[169, "pypath.inputs.biogps.biogps_annotations"]], "biogps_datasets() (in module pypath.inputs.biogps)": [[170, "pypath.inputs.biogps.biogps_datasets"]], "biogps_download() (in module pypath.inputs.biogps)": [[171, "pypath.inputs.biogps.biogps_download"]], "biogps_download_all() (in module pypath.inputs.biogps)": [[172, "pypath.inputs.biogps.biogps_download_all"]], "pypath.inputs.biogrid": [[173, "module-pypath.inputs.biogrid"]], "biogrid_all_interactions() (in module pypath.inputs.biogrid)": [[174, "pypath.inputs.biogrid.biogrid_all_interactions"]], "biogrid_interactions() (in module pypath.inputs.biogrid)": [[175, "pypath.inputs.biogrid.biogrid_interactions"]], "pypath.inputs.biomart": [[176, "module-pypath.inputs.biomart"]], "biomart_homology() (in module pypath.inputs.biomart)": [[177, "pypath.inputs.biomart.biomart_homology"]], "biomart_microarray() (in module pypath.inputs.biomart)": [[178, "pypath.inputs.biomart.biomart_microarray"]], "biomart_microarray_types() (in module pypath.inputs.biomart)": [[179, "pypath.inputs.biomart.biomart_microarray_types"]], "biomart_microarrays() (in module pypath.inputs.biomart)": [[180, "pypath.inputs.biomart.biomart_microarrays"]], "biomart_query() (in module pypath.inputs.biomart)": [[181, "pypath.inputs.biomart.biomart_query"]], "pypath.inputs.ca1": [[182, "module-pypath.inputs.ca1"]], "ca1_interactions() (in module pypath.inputs.ca1)": [[183, "pypath.inputs.ca1.ca1_interactions"]], "pypath.inputs.cancercellmap": [[184, "module-pypath.inputs.cancercellmap"]], "ccmap_interactions() (in module pypath.inputs.cancercellmap)": [[185, "pypath.inputs.cancercellmap.ccmap_interactions"]], "pypath.inputs.cancerdrugsdb": [[186, "module-pypath.inputs.cancerdrugsdb"]], "cancerdrugsdb_annotations() (in module pypath.inputs.cancerdrugsdb)": [[187, "pypath.inputs.cancerdrugsdb.cancerdrugsdb_annotations"]], "cancerdrugsdb_download() (in module pypath.inputs.cancerdrugsdb)": [[188, "pypath.inputs.cancerdrugsdb.cancerdrugsdb_download"]], "cancerdrugsdb_interactions() (in module pypath.inputs.cancerdrugsdb)": [[189, "pypath.inputs.cancerdrugsdb.cancerdrugsdb_interactions"]], "pypath.inputs.cancersea": [[190, "module-pypath.inputs.cancersea"]], "cancersea_annotations() (in module pypath.inputs.cancersea)": [[191, "pypath.inputs.cancersea.cancersea_annotations"]], "pypath.inputs.cell": [[192, "module-pypath.inputs.cell"]], "cell_supplementary() (in module pypath.inputs.cell)": [[193, "pypath.inputs.cell.cell_supplementary"]], "pypath.inputs.cellcall": [[194, "module-pypath.inputs.cellcall"]], "cellcall_annotations() (in module pypath.inputs.cellcall)": [[195, "pypath.inputs.cellcall.cellcall_annotations"]], "cellcall_download() (in module pypath.inputs.cellcall)": [[196, "pypath.inputs.cellcall.cellcall_download"]], "cellcall_download_all() (in module pypath.inputs.cellcall)": [[197, "pypath.inputs.cellcall.cellcall_download_all"]], "cellcall_interactions() (in module pypath.inputs.cellcall)": [[198, "pypath.inputs.cellcall.cellcall_interactions"]], "pypath.inputs.cellcellinteractions": [[199, "module-pypath.inputs.cellcellinteractions"]], "cellcellinteractions_annotations() (in module pypath.inputs.cellcellinteractions)": [[200, "pypath.inputs.cellcellinteractions.cellcellinteractions_annotations"]], "pypath.inputs.cellchatdb": [[201, "module-pypath.inputs.cellchatdb"]], "cellchatdb_annotations() (in module pypath.inputs.cellchatdb)": [[202, "pypath.inputs.cellchatdb.cellchatdb_annotations"]], "cellchatdb_cofactors() (in module pypath.inputs.cellchatdb)": [[203, "pypath.inputs.cellchatdb.cellchatdb_cofactors"]], "cellchatdb_complexes() (in module pypath.inputs.cellchatdb)": [[204, "pypath.inputs.cellchatdb.cellchatdb_complexes"]], "cellchatdb_download() (in module pypath.inputs.cellchatdb)": [[205, "pypath.inputs.cellchatdb.cellchatdb_download"]], "cellchatdb_interactions() (in module pypath.inputs.cellchatdb)": [[206, "pypath.inputs.cellchatdb.cellchatdb_interactions"]], "pypath.inputs.cellinker": [[207, "module-pypath.inputs.cellinker"]], "cellinkerinteraction (class in pypath.inputs.cellinker)": [[208, "pypath.inputs.cellinker.CellinkerInteraction"]], "__init__() (pypath.inputs.cellinker.cellinkerinteraction method)": [[208, "pypath.inputs.cellinker.CellinkerInteraction.__init__"]], "count() (pypath.inputs.cellinker.cellinkerinteraction method)": [[208, "pypath.inputs.cellinker.CellinkerInteraction.count"]], "index() (pypath.inputs.cellinker.cellinkerinteraction method)": [[208, "pypath.inputs.cellinker.CellinkerInteraction.index"]], "ligand (pypath.inputs.cellinker.cellinkerinteraction attribute)": [[208, "pypath.inputs.cellinker.CellinkerInteraction.ligand"]], "ligand_location (pypath.inputs.cellinker.cellinkerinteraction attribute)": [[208, "pypath.inputs.cellinker.CellinkerInteraction.ligand_location"]], "pmids (pypath.inputs.cellinker.cellinkerinteraction attribute)": [[208, "pypath.inputs.cellinker.CellinkerInteraction.pmids"]], "receptor (pypath.inputs.cellinker.cellinkerinteraction attribute)": [[208, "pypath.inputs.cellinker.CellinkerInteraction.receptor"]], "receptor_location (pypath.inputs.cellinker.cellinkerinteraction attribute)": [[208, "pypath.inputs.cellinker.CellinkerInteraction.receptor_location"]], "resources (pypath.inputs.cellinker.cellinkerinteraction attribute)": [[208, "pypath.inputs.cellinker.CellinkerInteraction.resources"]], "type (pypath.inputs.cellinker.cellinkerinteraction attribute)": [[208, "pypath.inputs.cellinker.CellinkerInteraction.type"]], "cellinker_annotations() (in module pypath.inputs.cellinker)": [[209, "pypath.inputs.cellinker.cellinker_annotations"]], "cellinker_complex_annotations() (in module pypath.inputs.cellinker)": [[210, "pypath.inputs.cellinker.cellinker_complex_annotations"]], "cellinker_complexes() (in module pypath.inputs.cellinker)": [[211, "pypath.inputs.cellinker.cellinker_complexes"]], "cellinker_complexes_raw() (in module pypath.inputs.cellinker)": [[212, "pypath.inputs.cellinker.cellinker_complexes_raw"]], "cellinker_lr_interactions() (in module pypath.inputs.cellinker)": [[213, "pypath.inputs.cellinker.cellinker_lr_interactions"]], "cellinker_lr_interactions_raw() (in module pypath.inputs.cellinker)": [[214, "pypath.inputs.cellinker.cellinker_lr_interactions_raw"]], "cellinker_protein_annotations() (in module pypath.inputs.cellinker)": [[215, "pypath.inputs.cellinker.cellinker_protein_annotations"]], "cellinker_smol_interactions() (in module pypath.inputs.cellinker)": [[216, "pypath.inputs.cellinker.cellinker_smol_interactions"]], "cellinker_smol_interactions_raw() (in module pypath.inputs.cellinker)": [[217, "pypath.inputs.cellinker.cellinker_smol_interactions_raw"]], "components_to_complex() (in module pypath.inputs.cellinker)": [[218, "pypath.inputs.cellinker.components_to_complex"]], "pypath.inputs.cellphonedb": [[219, "module-pypath.inputs.cellphonedb"]], "cellphonedbannotation (class in pypath.inputs.cellphonedb)": [[220, "pypath.inputs.cellphonedb.CellPhoneDBAnnotation"]], "__init__() (pypath.inputs.cellphonedb.cellphonedbannotation method)": [[220, "pypath.inputs.cellphonedb.CellPhoneDBAnnotation.__init__"]], "count() (pypath.inputs.cellphonedb.cellphonedbannotation method)": [[220, "pypath.inputs.cellphonedb.CellPhoneDBAnnotation.count"]], "index() (pypath.inputs.cellphonedb.cellphonedbannotation method)": [[220, "pypath.inputs.cellphonedb.CellPhoneDBAnnotation.index"]], "integrin (pypath.inputs.cellphonedb.cellphonedbannotation attribute)": [[220, "pypath.inputs.cellphonedb.CellPhoneDBAnnotation.integrin"]], "peripheral (pypath.inputs.cellphonedb.cellphonedbannotation attribute)": [[220, "pypath.inputs.cellphonedb.CellPhoneDBAnnotation.peripheral"]], "receptor (pypath.inputs.cellphonedb.cellphonedbannotation attribute)": [[220, "pypath.inputs.cellphonedb.CellPhoneDBAnnotation.receptor"]], "receptor_class (pypath.inputs.cellphonedb.cellphonedbannotation attribute)": [[220, "pypath.inputs.cellphonedb.CellPhoneDBAnnotation.receptor_class"]], "secreted (pypath.inputs.cellphonedb.cellphonedbannotation attribute)": [[220, "pypath.inputs.cellphonedb.CellPhoneDBAnnotation.secreted"]], "secreted_class (pypath.inputs.cellphonedb.cellphonedbannotation attribute)": [[220, "pypath.inputs.cellphonedb.CellPhoneDBAnnotation.secreted_class"]], "transmembrane (pypath.inputs.cellphonedb.cellphonedbannotation attribute)": [[220, "pypath.inputs.cellphonedb.CellPhoneDBAnnotation.transmembrane"]], "cellphonedb_complex_annotations() (in module pypath.inputs.cellphonedb)": [[221, "pypath.inputs.cellphonedb.cellphonedb_complex_annotations"]], "cellphonedb_complexes() (in module pypath.inputs.cellphonedb)": [[222, "pypath.inputs.cellphonedb.cellphonedb_complexes"]], "cellphonedb_interactions() (in module pypath.inputs.cellphonedb)": [[223, "pypath.inputs.cellphonedb.cellphonedb_interactions"]], "cellphonedb_ligands_receptors() (in module pypath.inputs.cellphonedb)": [[224, "pypath.inputs.cellphonedb.cellphonedb_ligands_receptors"]], "cellphonedb_protein_annotations() (in module pypath.inputs.cellphonedb)": [[225, "pypath.inputs.cellphonedb.cellphonedb_protein_annotations"]], "pypath.inputs.celltalkdb": [[226, "module-pypath.inputs.celltalkdb"]], "celltalkdb_annotations() (in module pypath.inputs.celltalkdb)": [[227, "pypath.inputs.celltalkdb.celltalkdb_annotations"]], "celltalkdb_download() (in module pypath.inputs.celltalkdb)": [[228, "pypath.inputs.celltalkdb.celltalkdb_download"]], "celltalkdb_interactions() (in module pypath.inputs.celltalkdb)": [[229, "pypath.inputs.celltalkdb.celltalkdb_interactions"]], "pypath.inputs.celltypist": [[230, "module-pypath.inputs.celltypist"]], "celltypist_annotations() (in module pypath.inputs.celltypist)": [[231, "pypath.inputs.celltypist.celltypist_annotations"]], "pypath.inputs.chembl": [[232, "module-pypath.inputs.chembl"]], "chembl_activities() (in module pypath.inputs.chembl)": [[233, "pypath.inputs.chembl.chembl_activities"]], "chembl_assays() (in module pypath.inputs.chembl)": [[234, "pypath.inputs.chembl.chembl_assays"]], "chembl_molecules() (in module pypath.inputs.chembl)": [[235, "pypath.inputs.chembl.chembl_molecules"]], "chembl_targets() (in module pypath.inputs.chembl)": [[236, "pypath.inputs.chembl.chembl_targets"]], "pypath.inputs.common": [[237, "module-pypath.inputs.common"]], "csv_sep_change() (in module pypath.inputs.common)": [[238, "pypath.inputs.common.csv_sep_change"]], "glom_fields() (in module pypath.inputs.common)": [[239, "pypath.inputs.common.glom_fields"]], "json_extract() (in module pypath.inputs.common)": [[240, "pypath.inputs.common.json_extract"]], "json_read() (in module pypath.inputs.common)": [[241, "pypath.inputs.common.json_read"]], "read_table() (in module pypath.inputs.common)": [[242, "pypath.inputs.common.read_table"]], "read_xls() (in module pypath.inputs.common)": [[243, "pypath.inputs.common.read_xls"]], "pypath.inputs.compleat": [[244, "module-pypath.inputs.compleat"]], "compleat_complexes() (in module pypath.inputs.compleat)": [[245, "pypath.inputs.compleat.compleat_complexes"]], "compleat_raw() (in module pypath.inputs.compleat)": [[246, "pypath.inputs.compleat.compleat_raw"]], "pypath.inputs.complexportal": [[247, "module-pypath.inputs.complexportal"]], "complexportal_complexes() (in module pypath.inputs.complexportal)": [[248, "pypath.inputs.complexportal.complexportal_complexes"]], "pypath.inputs.comppi": [[249, "module-pypath.inputs.comppi"]], "comppi_interaction_locations() (in module pypath.inputs.comppi)": [[250, "pypath.inputs.comppi.comppi_interaction_locations"]], "comppi_locations() (in module pypath.inputs.comppi)": [[251, "pypath.inputs.comppi.comppi_locations"]], "pypath.inputs.connectomedb": [[252, "module-pypath.inputs.connectomedb"]], "connectomedb_annotations() (in module pypath.inputs.connectomedb)": [[253, "pypath.inputs.connectomedb.connectomedb_annotations"]], "connectomedb_interactions() (in module pypath.inputs.connectomedb)": [[254, "pypath.inputs.connectomedb.connectomedb_interactions"]], "pypath.inputs.corum": [[255, "module-pypath.inputs.corum"]], "corum_complexes() (in module pypath.inputs.corum)": [[256, "pypath.inputs.corum.corum_complexes"]], "pypath.inputs.cosmic": [[257, "module-pypath.inputs.cosmic"]], "cancer_gene_census_annotations() (in module pypath.inputs.cosmic)": [[258, "pypath.inputs.cosmic.cancer_gene_census_annotations"]], "pypath.inputs.cpad": [[259, "module-pypath.inputs.cpad"]], "cpad_annotations() (in module pypath.inputs.cpad)": [[260, "pypath.inputs.cpad.cpad_annotations"]], "cpad_pathway_cancer() (in module pypath.inputs.cpad)": [[261, "pypath.inputs.cpad.cpad_pathway_cancer"]], "get_cpad() (in module pypath.inputs.cpad)": [[262, "pypath.inputs.cpad.get_cpad"]], "pypath.inputs.cpdb": [[263, "module-pypath.inputs.cpdb"]], "cpdb_interactions() (in module pypath.inputs.cpdb)": [[264, "pypath.inputs.cpdb.cpdb_interactions"]], "cpdb_interactions_ltp() (in module pypath.inputs.cpdb)": [[265, "pypath.inputs.cpdb.cpdb_interactions_ltp"]], "pypath.inputs.credentials": [[266, "module-pypath.inputs.credentials"]], "credentials() (in module pypath.inputs.credentials)": [[267, "pypath.inputs.credentials.credentials"]], "pypath.inputs.csa": [[268, "module-pypath.inputs.csa"]], "get_csa() (in module pypath.inputs.csa)": [[269, "pypath.inputs.csa.get_csa"]], "pypath.inputs.cspa": [[270, "module-pypath.inputs.cspa"]], "cspa_annotations() (in module pypath.inputs.cspa)": [[271, "pypath.inputs.cspa.cspa_annotations"]], "cspa_cell_type_annotations() (in module pypath.inputs.cspa)": [[272, "pypath.inputs.cspa.cspa_cell_type_annotations"]], "cspa_cell_types() (in module pypath.inputs.cspa)": [[273, "pypath.inputs.cspa.cspa_cell_types"]], "pypath.inputs.cytosig": [[274, "module-pypath.inputs.cytosig"]], "cytosig_annotations() (in module pypath.inputs.cytosig)": [[275, "pypath.inputs.cytosig.cytosig_annotations"]], "cytosig_df() (in module pypath.inputs.cytosig)": [[276, "pypath.inputs.cytosig.cytosig_df"]], "pypath.inputs.dbptm": [[277, "module-pypath.inputs.dbptm"]], "dbptm_enzyme_substrate() (in module pypath.inputs.dbptm)": [[278, "pypath.inputs.dbptm.dbptm_enzyme_substrate"]], "dbptm_enzyme_substrate_old() (in module pypath.inputs.dbptm)": [[279, "pypath.inputs.dbptm.dbptm_enzyme_substrate_old"]], "dbptm_interactions() (in module pypath.inputs.dbptm)": [[280, "pypath.inputs.dbptm.dbptm_interactions"]], "pypath.inputs.deathdomain": [[281, "module-pypath.inputs.deathdomain"]], "deathdomain_interactions() (in module pypath.inputs.deathdomain)": [[282, "pypath.inputs.deathdomain.deathdomain_interactions"]], "deathdomain_interactions_rescued() (in module pypath.inputs.deathdomain)": [[283, "pypath.inputs.deathdomain.deathdomain_interactions_rescued"]], "pypath.inputs.depod": [[284, "module-pypath.inputs.depod"]], "depod_enzyme_substrate() (in module pypath.inputs.depod)": [[285, "pypath.inputs.depod.depod_enzyme_substrate"]], "depod_interactions() (in module pypath.inputs.depod)": [[286, "pypath.inputs.depod.depod_interactions"]], "pypath.inputs.dgidb": [[287, "module-pypath.inputs.dgidb"]], "dgidb_annotations() (in module pypath.inputs.dgidb)": [[288, "pypath.inputs.dgidb.dgidb_annotations"]], "get_dgidb_old() (in module pypath.inputs.dgidb)": [[289, "pypath.inputs.dgidb.get_dgidb_old"]], "pypath.inputs.dip": [[290, "module-pypath.inputs.dip"]], "dip_interactions() (in module pypath.inputs.dip)": [[291, "pypath.inputs.dip.dip_interactions"]], "dip_login() (in module pypath.inputs.dip)": [[292, "pypath.inputs.dip.dip_login"]], "pypath.inputs.disgenet": [[293, "module-pypath.inputs.disgenet"]], "disgenet_annotations() (in module pypath.inputs.disgenet)": [[294, "pypath.inputs.disgenet.disgenet_annotations"]], "pypath.inputs.domino": [[295, "module-pypath.inputs.domino"]], "domino_ddi() (in module pypath.inputs.domino)": [[296, "pypath.inputs.domino.domino_ddi"]], "domino_enzsub() (in module pypath.inputs.domino)": [[297, "pypath.inputs.domino.domino_enzsub"]], "domino_interactions() (in module pypath.inputs.domino)": [[298, "pypath.inputs.domino.domino_interactions"]], "get_domino() (in module pypath.inputs.domino)": [[299, "pypath.inputs.domino.get_domino"]], "pypath.inputs.dorothea": [[300, "module-pypath.inputs.dorothea"]], "dorotheainteraction (class in pypath.inputs.dorothea)": [[301, "pypath.inputs.dorothea.DorotheaInteraction"]], "__init__() (pypath.inputs.dorothea.dorotheainteraction method)": [[301, "pypath.inputs.dorothea.DorotheaInteraction.__init__"]], "all_sources (pypath.inputs.dorothea.dorotheainteraction attribute)": [[301, "pypath.inputs.dorothea.DorotheaInteraction.all_sources"]], "chipseq (pypath.inputs.dorothea.dorotheainteraction attribute)": [[301, "pypath.inputs.dorothea.DorotheaInteraction.chipseq"]], "chipseq_sources (pypath.inputs.dorothea.dorotheainteraction attribute)": [[301, "pypath.inputs.dorothea.DorotheaInteraction.chipseq_sources"]], "coexp (pypath.inputs.dorothea.dorotheainteraction attribute)": [[301, "pypath.inputs.dorothea.DorotheaInteraction.coexp"]], "coexp_sources (pypath.inputs.dorothea.dorotheainteraction attribute)": [[301, "pypath.inputs.dorothea.DorotheaInteraction.coexp_sources"]], "count() (pypath.inputs.dorothea.dorotheainteraction method)": [[301, "pypath.inputs.dorothea.DorotheaInteraction.count"]], "curated (pypath.inputs.dorothea.dorotheainteraction attribute)": [[301, "pypath.inputs.dorothea.DorotheaInteraction.curated"]], "curated_sources (pypath.inputs.dorothea.dorotheainteraction attribute)": [[301, "pypath.inputs.dorothea.DorotheaInteraction.curated_sources"]], "effect (pypath.inputs.dorothea.dorotheainteraction attribute)": [[301, "pypath.inputs.dorothea.DorotheaInteraction.effect"]], "index() (pypath.inputs.dorothea.dorotheainteraction method)": [[301, "pypath.inputs.dorothea.DorotheaInteraction.index"]], "kegg_pathways (pypath.inputs.dorothea.dorotheainteraction attribute)": [[301, "pypath.inputs.dorothea.DorotheaInteraction.kegg_pathways"]], "level (pypath.inputs.dorothea.dorotheainteraction attribute)": [[301, "pypath.inputs.dorothea.DorotheaInteraction.level"]], "predicted (pypath.inputs.dorothea.dorotheainteraction attribute)": [[301, "pypath.inputs.dorothea.DorotheaInteraction.predicted"]], "predicted_sources (pypath.inputs.dorothea.dorotheainteraction attribute)": [[301, "pypath.inputs.dorothea.DorotheaInteraction.predicted_sources"]], "pubmed (pypath.inputs.dorothea.dorotheainteraction attribute)": [[301, "pypath.inputs.dorothea.DorotheaInteraction.pubmed"]], "target (pypath.inputs.dorothea.dorotheainteraction attribute)": [[301, "pypath.inputs.dorothea.DorotheaInteraction.target"]], "tf (pypath.inputs.dorothea.dorotheainteraction attribute)": [[301, "pypath.inputs.dorothea.DorotheaInteraction.tf"]], "dorothea_full_raw() (in module pypath.inputs.dorothea)": [[302, "pypath.inputs.dorothea.dorothea_full_raw"]], "dorothea_interactions() (in module pypath.inputs.dorothea)": [[303, "pypath.inputs.dorothea.dorothea_interactions"]], "dorothea_interactions_old() (in module pypath.inputs.dorothea)": [[304, "pypath.inputs.dorothea.dorothea_interactions_old"]], "dorothea_old_csv() (in module pypath.inputs.dorothea)": [[305, "pypath.inputs.dorothea.dorothea_old_csv"]], "dorothea_rda_raw() (in module pypath.inputs.dorothea)": [[306, "pypath.inputs.dorothea.dorothea_rda_raw"]], "get_dorothea_old() (in module pypath.inputs.dorothea)": [[307, "pypath.inputs.dorothea.get_dorothea_old"]], "get_tfregulons() (in module pypath.inputs.dorothea)": [[308, "pypath.inputs.dorothea.get_tfregulons"]], "tfregulons_interactions() (in module pypath.inputs.dorothea)": [[309, "pypath.inputs.dorothea.tfregulons_interactions"]], "tfregulons_interactions_old() (in module pypath.inputs.dorothea)": [[310, "pypath.inputs.dorothea.tfregulons_interactions_old"]], "pypath.inputs.drugbank": [[311, "module-pypath.inputs.drugbank"]], "drugbank_annotations() (in module pypath.inputs.drugbank)": [[312, "pypath.inputs.drugbank.drugbank_annotations"]], "drugbank_drugs() (in module pypath.inputs.drugbank)": [[313, "pypath.inputs.drugbank.drugbank_drugs"]], "drugbank_interactions() (in module pypath.inputs.drugbank)": [[314, "pypath.inputs.drugbank.drugbank_interactions"]], "drugbank_mapping() (in module pypath.inputs.drugbank)": [[315, "pypath.inputs.drugbank.drugbank_mapping"]], "drugbank_raw_interactions() (in module pypath.inputs.drugbank)": [[316, "pypath.inputs.drugbank.drugbank_raw_interactions"]], "pypath.inputs.drugcentral": [[317, "module-pypath.inputs.drugcentral"]], "drugcentral_drugs() (in module pypath.inputs.drugcentral)": [[318, "pypath.inputs.drugcentral.drugcentral_drugs"]], "drugcentral_interactions() (in module pypath.inputs.drugcentral)": [[319, "pypath.inputs.drugcentral.drugcentral_interactions"]], "drugcentral_mapping() (in module pypath.inputs.drugcentral)": [[320, "pypath.inputs.drugcentral.drugcentral_mapping"]], "pypath.inputs.ebi": [[321, "module-pypath.inputs.ebi"]], "ebi_rest() (in module pypath.inputs.ebi)": [[322, "pypath.inputs.ebi.ebi_rest"]], "pypath.inputs.elm": [[323, "module-pypath.inputs.elm"]], "elm_classes() (in module pypath.inputs.elm)": [[324, "pypath.inputs.elm.elm_classes"]], "elm_domains() (in module pypath.inputs.elm)": [[325, "pypath.inputs.elm.elm_domains"]], "elm_instances() (in module pypath.inputs.elm)": [[326, "pypath.inputs.elm.elm_instances"]], "elm_interactions() (in module pypath.inputs.elm)": [[327, "pypath.inputs.elm.elm_interactions"]], "pypath.inputs.embopress": [[328, "module-pypath.inputs.embopress"]], "embopress_supplementary() (in module pypath.inputs.embopress)": [[329, "pypath.inputs.embopress.embopress_supplementary"]], "pypath.inputs.embrace": [[330, "module-pypath.inputs.embrace"]], "embrace_annotations() (in module pypath.inputs.embrace)": [[331, "pypath.inputs.embrace.embrace_annotations"]], "embrace_interactions() (in module pypath.inputs.embrace)": [[332, "pypath.inputs.embrace.embrace_interactions"]], "embrace_raw() (in module pypath.inputs.embrace)": [[333, "pypath.inputs.embrace.embrace_raw"]], "embrace_translated() (in module pypath.inputs.embrace)": [[334, "pypath.inputs.embrace.embrace_translated"]], "pypath.inputs.encode": [[335, "module-pypath.inputs.encode"]], "encode_tf_mirna_interactions() (in module pypath.inputs.encode)": [[336, "pypath.inputs.encode.encode_tf_mirna_interactions"]], "pypath.inputs.ensembl": [[337, "module-pypath.inputs.ensembl"]], "ensembl_organisms() (in module pypath.inputs.ensembl)": [[338, "pypath.inputs.ensembl.ensembl_organisms"]], "pypath.inputs.exocarta": [[339, "module-pypath.inputs.exocarta"]], "get_exocarta() (in module pypath.inputs.exocarta)": [[340, "pypath.inputs.exocarta.get_exocarta"]], "get_vesiclepedia() (in module pypath.inputs.exocarta)": [[341, "pypath.inputs.exocarta.get_vesiclepedia"]], "pypath.inputs.genecards": [[342, "module-pypath.inputs.genecards"]], "genecards_datasheet() (in module pypath.inputs.genecards)": [[343, "pypath.inputs.genecards.genecards_datasheet"]], "genecards_soup() (in module pypath.inputs.genecards)": [[344, "pypath.inputs.genecards.genecards_soup"]], "genecards_summaries() (in module pypath.inputs.genecards)": [[345, "pypath.inputs.genecards.genecards_summaries"]], "get_method() (in module pypath.inputs)": [[346, "pypath.inputs.get_method"]], "pypath.inputs.go": [[347, "module-pypath.inputs.go"]], "get_go_desc() (in module pypath.inputs.go)": [[348, "pypath.inputs.go.get_go_desc"]], "get_go_quick() (in module pypath.inputs.go)": [[349, "pypath.inputs.go.get_go_quick"]], "get_goslim() (in module pypath.inputs.go)": [[350, "pypath.inputs.go.get_goslim"]], "go_ancestors() (in module pypath.inputs.go)": [[351, "pypath.inputs.go.go_ancestors"]], "go_ancestors_goose() (in module pypath.inputs.go)": [[352, "pypath.inputs.go.go_ancestors_goose"]], "go_ancestors_quickgo() (in module pypath.inputs.go)": [[353, "pypath.inputs.go.go_ancestors_quickgo"]], "go_annotations() (in module pypath.inputs.go)": [[354, "pypath.inputs.go.go_annotations"]], "go_annotations_goa() (in module pypath.inputs.go)": [[355, "pypath.inputs.go.go_annotations_goa"]], "go_annotations_goose() (in module pypath.inputs.go)": [[356, "pypath.inputs.go.go_annotations_goose"]], "go_annotations_quickgo() (in module pypath.inputs.go)": [[357, "pypath.inputs.go.go_annotations_quickgo"]], "go_annotations_solr() (in module pypath.inputs.go)": [[358, "pypath.inputs.go.go_annotations_solr"]], "go_annotations_uniprot() (in module pypath.inputs.go)": [[359, "pypath.inputs.go.go_annotations_uniprot"]], "go_descendants() (in module pypath.inputs.go)": [[360, "pypath.inputs.go.go_descendants"]], "go_descendants_goose() (in module pypath.inputs.go)": [[361, "pypath.inputs.go.go_descendants_goose"]], "go_descendants_quickgo() (in module pypath.inputs.go)": [[362, "pypath.inputs.go.go_descendants_quickgo"]], "go_descendants_to_ancestors() (in module pypath.inputs.go)": [[363, "pypath.inputs.go.go_descendants_to_ancestors"]], "go_terms() (in module pypath.inputs.go)": [[364, "pypath.inputs.go.go_terms"]], "go_terms_goose() (in module pypath.inputs.go)": [[365, "pypath.inputs.go.go_terms_goose"]], "go_terms_quickgo() (in module pypath.inputs.go)": [[366, "pypath.inputs.go.go_terms_quickgo"]], "go_terms_solr() (in module pypath.inputs.go)": [[367, "pypath.inputs.go.go_terms_solr"]], "pypath.inputs.gpcrdb": [[368, "module-pypath.inputs.gpcrdb"]], "gpcrdb_annotations() (in module pypath.inputs.gpcrdb)": [[369, "pypath.inputs.gpcrdb.gpcrdb_annotations"]], "pypath.inputs.graphviz": [[370, "module-pypath.inputs.graphviz"]], "graphviz_attrs() (in module pypath.inputs.graphviz)": [[371, "pypath.inputs.graphviz.graphviz_attrs"]], "pypath.inputs.guide2pharma": [[372, "module-pypath.inputs.guide2pharma"]], "guide2pharma_complexes() (in module pypath.inputs.guide2pharma)": [[373, "pypath.inputs.guide2pharma.guide2pharma_complexes"]], "guide2pharma_download() (in module pypath.inputs.guide2pharma)": [[374, "pypath.inputs.guide2pharma.guide2pharma_download"]], "guide2pharma_interactions() (in module pypath.inputs.guide2pharma)": [[375, "pypath.inputs.guide2pharma.guide2pharma_interactions"]], "pypath.inputs.havugimana": [[376, "module-pypath.inputs.havugimana"]], "get_havugimana() (in module pypath.inputs.havugimana)": [[377, "pypath.inputs.havugimana.get_havugimana"]], "havugimana_complexes() (in module pypath.inputs.havugimana)": [[378, "pypath.inputs.havugimana.havugimana_complexes"]], "pypath.inputs.hgnc": [[379, "module-pypath.inputs.hgnc"]], "hgnc_genegroups() (in module pypath.inputs.hgnc)": [[380, "pypath.inputs.hgnc.hgnc_genegroups"]], "pypath.inputs.hippie": [[381, "module-pypath.inputs.hippie"]], "hippie_interactions() (in module pypath.inputs.hippie)": [[382, "pypath.inputs.hippie.hippie_interactions"]], "pypath.inputs.homologene": [[383, "module-pypath.inputs.homologene"]], "get_homologene() (in module pypath.inputs.homologene)": [[384, "pypath.inputs.homologene.get_homologene"]], "homologene_dict() (in module pypath.inputs.homologene)": [[385, "pypath.inputs.homologene.homologene_dict"]], "homologene_uniprot_dict() (in module pypath.inputs.homologene)": [[386, "pypath.inputs.homologene.homologene_uniprot_dict"]], "pypath.inputs.hpmr": [[387, "module-pypath.inputs.hpmr"]], "hpmrinteraction (class in pypath.inputs.hpmr)": [[388, "pypath.inputs.hpmr.HpmrInteraction"]], "__init__() (pypath.inputs.hpmr.hpmrinteraction method)": [[388, "pypath.inputs.hpmr.HpmrInteraction.__init__"]], "count() (pypath.inputs.hpmr.hpmrinteraction method)": [[388, "pypath.inputs.hpmr.HpmrInteraction.count"]], "index() (pypath.inputs.hpmr.hpmrinteraction method)": [[388, "pypath.inputs.hpmr.HpmrInteraction.index"]], "partner (pypath.inputs.hpmr.hpmrinteraction attribute)": [[388, "pypath.inputs.hpmr.HpmrInteraction.partner"]], "partner_role (pypath.inputs.hpmr.hpmrinteraction attribute)": [[388, "pypath.inputs.hpmr.HpmrInteraction.partner_role"]], "receptor (pypath.inputs.hpmr.hpmrinteraction attribute)": [[388, "pypath.inputs.hpmr.HpmrInteraction.receptor"]], "references (pypath.inputs.hpmr.hpmrinteraction attribute)": [[388, "pypath.inputs.hpmr.HpmrInteraction.references"]], "unambiguous (pypath.inputs.hpmr.hpmrinteraction attribute)": [[388, "pypath.inputs.hpmr.HpmrInteraction.unambiguous"]], "get_hpmr() (in module pypath.inputs.hpmr)": [[389, "pypath.inputs.hpmr.get_hpmr"]], "hpmr_annotations() (in module pypath.inputs.hpmr)": [[390, "pypath.inputs.hpmr.hpmr_annotations"]], "hpmr_complexes() (in module pypath.inputs.hpmr)": [[391, "pypath.inputs.hpmr.hpmr_complexes"]], "hpmr_interactions() (in module pypath.inputs.hpmr)": [[392, "pypath.inputs.hpmr.hpmr_interactions"]], "pypath.inputs.hpo": [[393, "module-pypath.inputs.hpo"]], "hpo_annotations() (in module pypath.inputs.hpo)": [[394, "pypath.inputs.hpo.hpo_annotations"]], "hpo_diseases() (in module pypath.inputs.hpo)": [[395, "pypath.inputs.hpo.hpo_diseases"]], "hpo_ontology() (in module pypath.inputs.hpo)": [[396, "pypath.inputs.hpo.hpo_ontology"]], "hpo_terms() (in module pypath.inputs.hpo)": [[397, "pypath.inputs.hpo.hpo_terms"]], "pypath.inputs.hprd": [[398, "module-pypath.inputs.hprd"]], "get_hprd() (in module pypath.inputs.hprd)": [[399, "pypath.inputs.hprd.get_hprd"]], "hprd_enzyme_substrate() (in module pypath.inputs.hprd)": [[400, "pypath.inputs.hprd.hprd_enzyme_substrate"]], "hprd_interactions() (in module pypath.inputs.hprd)": [[401, "pypath.inputs.hprd.hprd_interactions"]], "hprd_interactions_htp() (in module pypath.inputs.hprd)": [[402, "pypath.inputs.hprd.hprd_interactions_htp"]], "pypath.inputs.htri": [[403, "module-pypath.inputs.htri"]], "htri_interactions() (in module pypath.inputs.htri)": [[404, "pypath.inputs.htri.htri_interactions"]], "pypath.inputs.humancellmap": [[405, "module-pypath.inputs.humancellmap"]], "humancellmap_annotations() (in module pypath.inputs.humancellmap)": [[406, "pypath.inputs.humancellmap.humancellmap_annotations"]], "pypath.inputs.humap": [[407, "module-pypath.inputs.humap"]], "humap2_complexes() (in module pypath.inputs.humap)": [[408, "pypath.inputs.humap.humap2_complexes"]], "humap_complexes() (in module pypath.inputs.humap)": [[409, "pypath.inputs.humap.humap_complexes"]], "pypath.inputs.huri": [[410, "module-pypath.inputs.huri"]], "hi_i_interactions() (in module pypath.inputs.huri)": [[411, "pypath.inputs.huri.hi_i_interactions"]], "hi_ii_interactions() (in module pypath.inputs.huri)": [[412, "pypath.inputs.huri.hi_ii_interactions"]], "hi_iii_old() (in module pypath.inputs.huri)": [[413, "pypath.inputs.huri.hi_iii_old"]], "hi_union_interactions() (in module pypath.inputs.huri)": [[414, "pypath.inputs.huri.hi_union_interactions"]], "huri_interactions() (in module pypath.inputs.huri)": [[415, "pypath.inputs.huri.huri_interactions"]], "lit_bm_13_interactions() (in module pypath.inputs.huri)": [[416, "pypath.inputs.huri.lit_bm_13_interactions"]], "lit_bm_17_interactions() (in module pypath.inputs.huri)": [[417, "pypath.inputs.huri.lit_bm_17_interactions"]], "lit_bm_interactions() (in module pypath.inputs.huri)": [[418, "pypath.inputs.huri.lit_bm_interactions"]], "rolland_hi_ii_14() (in module pypath.inputs.huri)": [[419, "pypath.inputs.huri.rolland_hi_ii_14"]], "vidal_hi_iii_old() (in module pypath.inputs.huri)": [[420, "pypath.inputs.huri.vidal_hi_iii_old"]], "yang2016_interactions() (in module pypath.inputs.huri)": [[421, "pypath.inputs.huri.yang2016_interactions"]], "yu2011_interactions() (in module pypath.inputs.huri)": [[422, "pypath.inputs.huri.yu2011_interactions"]], "pypath.inputs.i3d": [[423, "module-pypath.inputs.i3d"]], "get_i3d() (in module pypath.inputs.i3d)": [[424, "pypath.inputs.i3d.get_i3d"]], "pypath.inputs.icellnet": [[425, "module-pypath.inputs.icellnet"]], "icellnetrecord (class in pypath.inputs.icellnet)": [[426, "pypath.inputs.icellnet.IcellnetRecord"]], "__init__() (pypath.inputs.icellnet.icellnetrecord method)": [[426, "pypath.inputs.icellnet.IcellnetRecord.__init__"]], "classification (pypath.inputs.icellnet.icellnetrecord attribute)": [[426, "pypath.inputs.icellnet.IcellnetRecord.classification"]], "count() (pypath.inputs.icellnet.icellnetrecord method)": [[426, "pypath.inputs.icellnet.IcellnetRecord.count"]], "family (pypath.inputs.icellnet.icellnetrecord attribute)": [[426, "pypath.inputs.icellnet.IcellnetRecord.family"]], "index() (pypath.inputs.icellnet.icellnetrecord method)": [[426, "pypath.inputs.icellnet.IcellnetRecord.index"]], "ligand (pypath.inputs.icellnet.icellnetrecord attribute)": [[426, "pypath.inputs.icellnet.IcellnetRecord.ligand"]], "receptor (pypath.inputs.icellnet.icellnetrecord attribute)": [[426, "pypath.inputs.icellnet.IcellnetRecord.receptor"]], "references (pypath.inputs.icellnet.icellnetrecord attribute)": [[426, "pypath.inputs.icellnet.IcellnetRecord.references"]], "resources (pypath.inputs.icellnet.icellnetrecord attribute)": [[426, "pypath.inputs.icellnet.IcellnetRecord.resources"]], "subfamily (pypath.inputs.icellnet.icellnetrecord attribute)": [[426, "pypath.inputs.icellnet.IcellnetRecord.subfamily"]], "icellnet_annotations() (in module pypath.inputs.icellnet)": [[427, "pypath.inputs.icellnet.icellnet_annotations"]], "icellnet_complexes() (in module pypath.inputs.icellnet)": [[428, "pypath.inputs.icellnet.icellnet_complexes"]], "icellnet_interactions() (in module pypath.inputs.icellnet)": [[429, "pypath.inputs.icellnet.icellnet_interactions"]], "pypath.inputs.ielm": [[430, "module-pypath.inputs.ielm"]], "get_ielm() (in module pypath.inputs.ielm)": [[431, "pypath.inputs.ielm.get_ielm"]], "get_ielm_huge() (in module pypath.inputs.ielm)": [[432, "pypath.inputs.ielm.get_ielm_huge"]], "pypath.inputs.imweb": [[433, "module-pypath.inputs.imweb"]], "get_imweb() (in module pypath.inputs.imweb)": [[434, "pypath.inputs.imweb.get_imweb"]], "get_imweb_req() (in module pypath.inputs.imweb)": [[435, "pypath.inputs.imweb.get_imweb_req"]], "pypath.inputs.innatedb": [[436, "module-pypath.inputs.innatedb"]], "innatedb_interactions() (in module pypath.inputs.innatedb)": [[437, "pypath.inputs.innatedb.innatedb_interactions"]], "pypath.inputs.instruct": [[438, "module-pypath.inputs.instruct"]], "get_instruct() (in module pypath.inputs.instruct)": [[439, "pypath.inputs.instruct.get_instruct"]], "get_instruct_offsets() (in module pypath.inputs.instruct)": [[440, "pypath.inputs.instruct.get_instruct_offsets"]], "pypath.inputs.intact": [[441, "module-pypath.inputs.intact"]], "intact_interactions() (in module pypath.inputs.intact)": [[442, "pypath.inputs.intact.intact_interactions"]], "pypath.inputs.integrins": [[443, "module-pypath.inputs.integrins"]], "get_integrins() (in module pypath.inputs.integrins)": [[444, "pypath.inputs.integrins.get_integrins"]], "pypath.inputs.interpro": [[445, "module-pypath.inputs.interpro"]], "interpro2go_annotations() (in module pypath.inputs.interpro)": [[446, "pypath.inputs.interpro.interpro2go_annotations"]], "interpro_annotations() (in module pypath.inputs.interpro)": [[447, "pypath.inputs.interpro.interpro_annotations"]], "interpro_entries() (in module pypath.inputs.interpro)": [[448, "pypath.inputs.interpro.interpro_entries"]], "interpro_xrefs() (in module pypath.inputs.interpro)": [[449, "pypath.inputs.interpro.interpro_xrefs"]], "pypath.inputs.intogen": [[450, "module-pypath.inputs.intogen"]], "intogen_annotations() (in module pypath.inputs.intogen)": [[451, "pypath.inputs.intogen.intogen_annotations"]], "pypath.inputs.ipi": [[452, "module-pypath.inputs.ipi"]], "ipi_uniprot() (in module pypath.inputs.ipi)": [[453, "pypath.inputs.ipi.ipi_uniprot"]], "pypath.inputs.iptmnet": [[454, "module-pypath.inputs.iptmnet"]], "iptmnetinteraction (class in pypath.inputs.iptmnet)": [[455, "pypath.inputs.iptmnet.IptmnetInteraction"]], "__init__() (pypath.inputs.iptmnet.iptmnetinteraction method)": [[455, "pypath.inputs.iptmnet.IptmnetInteraction.__init__"]], "count() (pypath.inputs.iptmnet.iptmnetinteraction method)": [[455, "pypath.inputs.iptmnet.IptmnetInteraction.count"]], "enzyme (pypath.inputs.iptmnet.iptmnetinteraction attribute)": [[455, "pypath.inputs.iptmnet.IptmnetInteraction.enzyme"]], "enzyme_isoform (pypath.inputs.iptmnet.iptmnetinteraction attribute)": [[455, "pypath.inputs.iptmnet.IptmnetInteraction.enzyme_isoform"]], "index() (pypath.inputs.iptmnet.iptmnetinteraction method)": [[455, "pypath.inputs.iptmnet.IptmnetInteraction.index"]], "ptm_type (pypath.inputs.iptmnet.iptmnetinteraction attribute)": [[455, "pypath.inputs.iptmnet.IptmnetInteraction.ptm_type"]], "references (pypath.inputs.iptmnet.iptmnetinteraction attribute)": [[455, "pypath.inputs.iptmnet.IptmnetInteraction.references"]], "resaa (pypath.inputs.iptmnet.iptmnetinteraction attribute)": [[455, "pypath.inputs.iptmnet.IptmnetInteraction.resaa"]], "resnum (pypath.inputs.iptmnet.iptmnetinteraction attribute)": [[455, "pypath.inputs.iptmnet.IptmnetInteraction.resnum"]], "score (pypath.inputs.iptmnet.iptmnetinteraction attribute)": [[455, "pypath.inputs.iptmnet.IptmnetInteraction.score"]], "substrate (pypath.inputs.iptmnet.iptmnetinteraction attribute)": [[455, "pypath.inputs.iptmnet.IptmnetInteraction.substrate"]], "substrate_isoform (pypath.inputs.iptmnet.iptmnetinteraction attribute)": [[455, "pypath.inputs.iptmnet.IptmnetInteraction.substrate_isoform"]], "iptmnet_interactions() (in module pypath.inputs.iptmnet)": [[456, "pypath.inputs.iptmnet.iptmnet_interactions"]], "pypath.inputs.italk": [[457, "module-pypath.inputs.italk"]], "italk_annotations() (in module pypath.inputs.italk)": [[458, "pypath.inputs.italk.italk_annotations"]], "italk_interactions() (in module pypath.inputs.italk)": [[459, "pypath.inputs.italk.italk_interactions"]], "italk_raw() (in module pypath.inputs.italk)": [[460, "pypath.inputs.italk.italk_raw"]], "pypath.inputs.kea": [[461, "module-pypath.inputs.kea"]], "kea_enzyme_substrate() (in module pypath.inputs.kea)": [[462, "pypath.inputs.kea.kea_enzyme_substrate"]], "kea_interactions() (in module pypath.inputs.kea)": [[463, "pypath.inputs.kea.kea_interactions"]], "pypath.inputs.kegg": [[464, "module-pypath.inputs.kegg"]], "keggpathway (class in pypath.inputs.kegg)": [[465, "pypath.inputs.kegg.KeggPathway"]], "__init__() (pypath.inputs.kegg.keggpathway method)": [[465, "pypath.inputs.kegg.KeggPathway.__init__"]], "count() (pypath.inputs.kegg.keggpathway method)": [[465, "pypath.inputs.kegg.KeggPathway.count"]], "index() (pypath.inputs.kegg.keggpathway method)": [[465, "pypath.inputs.kegg.KeggPathway.index"]], "pathway (pypath.inputs.kegg.keggpathway attribute)": [[465, "pypath.inputs.kegg.KeggPathway.pathway"]], "kegg_dbget() (in module pypath.inputs.kegg)": [[466, "pypath.inputs.kegg.kegg_dbget"]], "kegg_interactions() (in module pypath.inputs.kegg)": [[467, "pypath.inputs.kegg.kegg_interactions"]], "kegg_medicus() (in module pypath.inputs.kegg)": [[468, "pypath.inputs.kegg.kegg_medicus"]], "kegg_medicus_complexes() (in module pypath.inputs.kegg)": [[469, "pypath.inputs.kegg.kegg_medicus_complexes"]], "kegg_medicus_interactions() (in module pypath.inputs.kegg)": [[470, "pypath.inputs.kegg.kegg_medicus_interactions"]], "kegg_pathway_annotations() (in module pypath.inputs.kegg)": [[471, "pypath.inputs.kegg.kegg_pathway_annotations"]], "kegg_pathway_annotations_pathwaycommons() (in module pypath.inputs.kegg)": [[472, "pypath.inputs.kegg.kegg_pathway_annotations_pathwaycommons"]], "kegg_pathways() (in module pypath.inputs.kegg)": [[473, "pypath.inputs.kegg.kegg_pathways"]], "pypath.inputs.kinasedotcom": [[474, "module-pypath.inputs.kinasedotcom"]], "kinasedotcom_annotations() (in module pypath.inputs.kinasedotcom)": [[475, "pypath.inputs.kinasedotcom.kinasedotcom_annotations"]], "pypath.inputs.kirouac2010": [[476, "module-pypath.inputs.kirouac2010"]], "kirouac2010_interactions() (in module pypath.inputs.kirouac2010)": [[477, "pypath.inputs.kirouac2010.kirouac2010_interactions"]], "pypath.inputs.lambert2018": [[478, "module-pypath.inputs.lambert2018"]], "lambert2018_annotations() (in module pypath.inputs.lambert2018)": [[479, "pypath.inputs.lambert2018.lambert2018_annotations"]], "lambert2018_s1_raw() (in module pypath.inputs.lambert2018)": [[480, "pypath.inputs.lambert2018.lambert2018_s1_raw"]], "pypath.inputs.laudanna": [[481, "module-pypath.inputs.laudanna"]], "laudanna_directions() (in module pypath.inputs.laudanna)": [[482, "pypath.inputs.laudanna.laudanna_directions"]], "laudanna_effects() (in module pypath.inputs.laudanna)": [[483, "pypath.inputs.laudanna.laudanna_effects"]], "pypath.inputs.li2012": [[484, "module-pypath.inputs.li2012"]], "get_li2012() (in module pypath.inputs.li2012)": [[485, "pypath.inputs.li2012.get_li2012"]], "li2012_dmi() (in module pypath.inputs.li2012)": [[486, "pypath.inputs.li2012.li2012_dmi"]], "li2012_enzyme_substrate() (in module pypath.inputs.li2012)": [[487, "pypath.inputs.li2012.li2012_enzyme_substrate"]], "li2012_interactions() (in module pypath.inputs.li2012)": [[488, "pypath.inputs.li2012.li2012_interactions"]], "pypath.inputs.lincs": [[489, "module-pypath.inputs.lincs"]], "lincs_compounds() (in module pypath.inputs.lincs)": [[490, "pypath.inputs.lincs.lincs_compounds"]], "pypath.inputs.lmpid": [[491, "module-pypath.inputs.lmpid"]], "lmpid_dmi() (in module pypath.inputs.lmpid)": [[492, "pypath.inputs.lmpid.lmpid_dmi"]], "lmpid_interactions() (in module pypath.inputs.lmpid)": [[493, "pypath.inputs.lmpid.lmpid_interactions"]], "load_lmpid() (in module pypath.inputs.lmpid)": [[494, "pypath.inputs.lmpid.load_lmpid"]], "pypath.inputs.lncdisease": [[495, "module-pypath.inputs.lncdisease"]], "lncdisease_interactions() (in module pypath.inputs.lncdisease)": [[496, "pypath.inputs.lncdisease.lncdisease_interactions"]], "pypath.inputs.lncrnadb": [[497, "module-pypath.inputs.lncrnadb"]], "lncrnadb_interactions() (in module pypath.inputs.lncrnadb)": [[498, "pypath.inputs.lncrnadb.lncrnadb_interactions"]], "pypath.inputs.locate": [[499, "module-pypath.inputs.locate"]], "locate_localizations() (in module pypath.inputs.locate)": [[500, "pypath.inputs.locate.locate_localizations"]], "pypath.inputs.lrdb": [[501, "module-pypath.inputs.lrdb"]], "lrdbannotation (class in pypath.inputs.lrdb)": [[502, "pypath.inputs.lrdb.LrdbAnnotation"]], "__init__() (pypath.inputs.lrdb.lrdbannotation method)": [[502, "pypath.inputs.lrdb.LrdbAnnotation.__init__"]], "cell_type (pypath.inputs.lrdb.lrdbannotation attribute)": [[502, "pypath.inputs.lrdb.LrdbAnnotation.cell_type"]], "count() (pypath.inputs.lrdb.lrdbannotation method)": [[502, "pypath.inputs.lrdb.LrdbAnnotation.count"]], "index() (pypath.inputs.lrdb.lrdbannotation method)": [[502, "pypath.inputs.lrdb.LrdbAnnotation.index"]], "references (pypath.inputs.lrdb.lrdbannotation attribute)": [[502, "pypath.inputs.lrdb.LrdbAnnotation.references"]], "role (pypath.inputs.lrdb.lrdbannotation attribute)": [[502, "pypath.inputs.lrdb.LrdbAnnotation.role"]], "sources (pypath.inputs.lrdb.lrdbannotation attribute)": [[502, "pypath.inputs.lrdb.LrdbAnnotation.sources"]], "lrdb_annotations() (in module pypath.inputs.lrdb)": [[503, "pypath.inputs.lrdb.lrdb_annotations"]], "lrdb_interactions() (in module pypath.inputs.lrdb)": [[504, "pypath.inputs.lrdb.lrdb_interactions"]], "pypath.inputs.macrophage": [[505, "module-pypath.inputs.macrophage"]], "macrophage_interactions() (in module pypath.inputs.macrophage)": [[506, "pypath.inputs.macrophage.macrophage_interactions"]], "pypath.inputs.main": [[507, "module-pypath.inputs.main"]], "pypath.inputs.matrisome": [[508, "module-pypath.inputs.matrisome"]], "matrisome_annotations() (in module pypath.inputs.matrisome)": [[509, "pypath.inputs.matrisome.matrisome_annotations"]], "pypath.inputs.matrixdb": [[510, "module-pypath.inputs.matrixdb"]], "matrixdb_annotations() (in module pypath.inputs.matrixdb)": [[511, "pypath.inputs.matrixdb.matrixdb_annotations"]], "matrixdb_ecm_proteins() (in module pypath.inputs.matrixdb)": [[512, "pypath.inputs.matrixdb.matrixdb_ecm_proteins"]], "matrixdb_interactions() (in module pypath.inputs.matrixdb)": [[513, "pypath.inputs.matrixdb.matrixdb_interactions"]], "matrixdb_membrane_proteins() (in module pypath.inputs.matrixdb)": [[514, "pypath.inputs.matrixdb.matrixdb_membrane_proteins"]], "matrixdb_secreted_proteins() (in module pypath.inputs.matrixdb)": [[515, "pypath.inputs.matrixdb.matrixdb_secreted_proteins"]], "pypath.inputs.mcam": [[516, "module-pypath.inputs.mcam"]], "mcam_cell_adhesion_molecules() (in module pypath.inputs.mcam)": [[517, "pypath.inputs.mcam.mcam_cell_adhesion_molecules"]], "pypath.inputs.membranome": [[518, "module-pypath.inputs.membranome"]], "membranome_annotations() (in module pypath.inputs.membranome)": [[519, "pypath.inputs.membranome.membranome_annotations"]], "pypath.inputs.mimp": [[520, "module-pypath.inputs.mimp"]], "get_kinase_class() (in module pypath.inputs.mimp)": [[521, "pypath.inputs.mimp.get_kinase_class"]], "mimp_enzyme_substrate() (in module pypath.inputs.mimp)": [[522, "pypath.inputs.mimp.mimp_enzyme_substrate"]], "mimp_interactions() (in module pypath.inputs.mimp)": [[523, "pypath.inputs.mimp.mimp_interactions"]], "pypath.inputs.mir2disease": [[524, "module-pypath.inputs.mir2disease"]], "mir2disease_interactions() (in module pypath.inputs.mir2disease)": [[525, "pypath.inputs.mir2disease.mir2disease_interactions"]], "pypath.inputs.mirbase": [[526, "module-pypath.inputs.mirbase"]], "get_mirbase_aliases() (in module pypath.inputs.mirbase)": [[527, "pypath.inputs.mirbase.get_mirbase_aliases"]], "mirbase_ids() (in module pypath.inputs.mirbase)": [[528, "pypath.inputs.mirbase.mirbase_ids"]], "mirbase_mature() (in module pypath.inputs.mirbase)": [[529, "pypath.inputs.mirbase.mirbase_mature"]], "mirbase_mature_all() (in module pypath.inputs.mirbase)": [[530, "pypath.inputs.mirbase.mirbase_mature_all"]], "mirbase_precursor() (in module pypath.inputs.mirbase)": [[531, "pypath.inputs.mirbase.mirbase_precursor"]], "mirbase_precursor_all() (in module pypath.inputs.mirbase)": [[532, "pypath.inputs.mirbase.mirbase_precursor_all"]], "mirbase_precursor_to_mature() (in module pypath.inputs.mirbase)": [[533, "pypath.inputs.mirbase.mirbase_precursor_to_mature"]], "pypath.inputs.mirdeathdb": [[534, "module-pypath.inputs.mirdeathdb"]], "mirdeathdb_interactions() (in module pypath.inputs.mirdeathdb)": [[535, "pypath.inputs.mirdeathdb.mirdeathdb_interactions"]], "pypath.inputs.mirecords": [[536, "module-pypath.inputs.mirecords"]], "mirecords_interactions() (in module pypath.inputs.mirecords)": [[537, "pypath.inputs.mirecords.mirecords_interactions"]], "pypath.inputs.mirtarbase": [[538, "module-pypath.inputs.mirtarbase"]], "mirtarbase_interactions() (in module pypath.inputs.mirtarbase)": [[539, "pypath.inputs.mirtarbase.mirtarbase_interactions"]], "pypath.inputs.mitab": [[540, "module-pypath.inputs.mitab"]], "mitab_field_list() (in module pypath.inputs.mitab)": [[541, "pypath.inputs.mitab.mitab_field_list"]], "mitab_field_uniprot() (in module pypath.inputs.mitab)": [[542, "pypath.inputs.mitab.mitab_field_uniprot"]], "pypath.inputs.mppi": [[543, "module-pypath.inputs.mppi"]], "mppi_interactions() (in module pypath.inputs.mppi)": [[544, "pypath.inputs.mppi.mppi_interactions"]], "pypath.inputs.msigdb": [[545, "module-pypath.inputs.msigdb"]], "msigdb_annotations() (in module pypath.inputs.msigdb)": [[546, "pypath.inputs.msigdb.msigdb_annotations"]], "msigdb_download() (in module pypath.inputs.msigdb)": [[547, "pypath.inputs.msigdb.msigdb_download"]], "msigdb_download_collections() (in module pypath.inputs.msigdb)": [[548, "pypath.inputs.msigdb.msigdb_download_collections"]], "pypath.inputs.ncrdeathdb": [[549, "module-pypath.inputs.ncrdeathdb"]], "ncrdeathdb_interactions() (in module pypath.inputs.ncrdeathdb)": [[550, "pypath.inputs.ncrdeathdb.ncrdeathdb_interactions"]], "pypath.inputs.negatome": [[551, "module-pypath.inputs.negatome"]], "negatome_interactions() (in module pypath.inputs.negatome)": [[552, "pypath.inputs.negatome.negatome_interactions"]], "pypath.inputs.netbiol": [[553, "module-pypath.inputs.netbiol"]], "arn_interactions() (in module pypath.inputs.netbiol)": [[554, "pypath.inputs.netbiol.arn_interactions"]], "nrf2ome_interactions() (in module pypath.inputs.netbiol)": [[555, "pypath.inputs.netbiol.nrf2ome_interactions"]], "pypath.inputs.netpath": [[556, "module-pypath.inputs.netpath"]], "netpath_interactions() (in module pypath.inputs.netpath)": [[557, "pypath.inputs.netpath.netpath_interactions"]], "netpath_names() (in module pypath.inputs.netpath)": [[558, "pypath.inputs.netpath.netpath_names"]], "netpath_pathway_annotations() (in module pypath.inputs.netpath)": [[559, "pypath.inputs.netpath.netpath_pathway_annotations"]], "pypath.inputs.ontology": [[560, "module-pypath.inputs.ontology"]], "listof_ontologies() (in module pypath.inputs.ontology)": [[561, "pypath.inputs.ontology.listof_ontologies"]], "ontology() (in module pypath.inputs.ontology)": [[562, "pypath.inputs.ontology.ontology"]], "pypath.inputs.opm": [[563, "module-pypath.inputs.opm"]], "opm_annotations() (in module pypath.inputs.opm)": [[564, "pypath.inputs.opm.opm_annotations"]], "pypath.inputs.oreganno": [[565, "module-pypath.inputs.oreganno"]], "oreganno_interactions() (in module pypath.inputs.oreganno)": [[566, "pypath.inputs.oreganno.oreganno_interactions"]], "oreganno_raw() (in module pypath.inputs.oreganno)": [[567, "pypath.inputs.oreganno.oreganno_raw"]], "pypath.inputs.panglaodb": [[568, "module-pypath.inputs.panglaodb"]], "panglaodb_annotations() (in module pypath.inputs.panglaodb)": [[569, "pypath.inputs.panglaodb.panglaodb_annotations"]], "panglaodb_raw() (in module pypath.inputs.panglaodb)": [[570, "pypath.inputs.panglaodb.panglaodb_raw"]], "pypath.inputs.pathwaycommons": [[571, "module-pypath.inputs.pathwaycommons"]], "pathwaycommonsinteraction (class in pypath.inputs.pathwaycommons)": [[572, "pypath.inputs.pathwaycommons.PathwayCommonsInteraction"]], "__init__() (pypath.inputs.pathwaycommons.pathwaycommonsinteraction method)": [[572, "pypath.inputs.pathwaycommons.PathwayCommonsInteraction.__init__"]], "count() (pypath.inputs.pathwaycommons.pathwaycommonsinteraction method)": [[572, "pypath.inputs.pathwaycommons.PathwayCommonsInteraction.count"]], "id_a (pypath.inputs.pathwaycommons.pathwaycommonsinteraction attribute)": [[572, "pypath.inputs.pathwaycommons.PathwayCommonsInteraction.id_a"]], "id_b (pypath.inputs.pathwaycommons.pathwaycommonsinteraction attribute)": [[572, "pypath.inputs.pathwaycommons.PathwayCommonsInteraction.id_b"]], "index() (pypath.inputs.pathwaycommons.pathwaycommonsinteraction method)": [[572, "pypath.inputs.pathwaycommons.PathwayCommonsInteraction.index"]], "interaction_type (pypath.inputs.pathwaycommons.pathwaycommonsinteraction attribute)": [[572, "pypath.inputs.pathwaycommons.PathwayCommonsInteraction.interaction_type"]], "resource (pypath.inputs.pathwaycommons.pathwaycommonsinteraction attribute)": [[572, "pypath.inputs.pathwaycommons.PathwayCommonsInteraction.resource"]], "pathwaycommonsresource (class in pypath.inputs.pathwaycommons)": [[573, "pypath.inputs.pathwaycommons.PathwayCommonsResource"]], "__init__() (pypath.inputs.pathwaycommons.pathwaycommonsresource method)": [[573, "pypath.inputs.pathwaycommons.PathwayCommonsResource.__init__"]], "count() (pypath.inputs.pathwaycommons.pathwaycommonsresource method)": [[573, "pypath.inputs.pathwaycommons.PathwayCommonsResource.count"]], "index() (pypath.inputs.pathwaycommons.pathwaycommonsresource method)": [[573, "pypath.inputs.pathwaycommons.PathwayCommonsResource.index"]], "name (pypath.inputs.pathwaycommons.pathwaycommonsresource attribute)": [[573, "pypath.inputs.pathwaycommons.PathwayCommonsResource.name"]], "pc_label (pypath.inputs.pathwaycommons.pathwaycommonsresource attribute)": [[573, "pypath.inputs.pathwaycommons.PathwayCommonsResource.pc_label"]], "version (pypath.inputs.pathwaycommons.pathwaycommonsresource attribute)": [[573, "pypath.inputs.pathwaycommons.PathwayCommonsResource.version"]], "pathwaycommons_bind_interactions() (in module pypath.inputs.pathwaycommons)": [[574, "pypath.inputs.pathwaycommons.pathwaycommons_bind_interactions"]], "pathwaycommons_biogrid_interactions() (in module pypath.inputs.pathwaycommons)": [[575, "pypath.inputs.pathwaycommons.pathwaycommons_biogrid_interactions"]], "pathwaycommons_corum_interactions() (in module pypath.inputs.pathwaycommons)": [[576, "pypath.inputs.pathwaycommons.pathwaycommons_corum_interactions"]], "pathwaycommons_dip_interactions() (in module pypath.inputs.pathwaycommons)": [[577, "pypath.inputs.pathwaycommons.pathwaycommons_dip_interactions"]], "pathwaycommons_hprd_interactions() (in module pypath.inputs.pathwaycommons)": [[578, "pypath.inputs.pathwaycommons.pathwaycommons_hprd_interactions"]], "pathwaycommons_inoh_interactions() (in module pypath.inputs.pathwaycommons)": [[579, "pypath.inputs.pathwaycommons.pathwaycommons_inoh_interactions"]], "pathwaycommons_intact_interactions() (in module pypath.inputs.pathwaycommons)": [[580, "pypath.inputs.pathwaycommons.pathwaycommons_intact_interactions"]], "pathwaycommons_interactions() (in module pypath.inputs.pathwaycommons)": [[581, "pypath.inputs.pathwaycommons.pathwaycommons_interactions"]], "pathwaycommons_kegg_interactions() (in module pypath.inputs.pathwaycommons)": [[582, "pypath.inputs.pathwaycommons.pathwaycommons_kegg_interactions"]], "pathwaycommons_netpath_interactions() (in module pypath.inputs.pathwaycommons)": [[583, "pypath.inputs.pathwaycommons.pathwaycommons_netpath_interactions"]], "pathwaycommons_panther_interactions() (in module pypath.inputs.pathwaycommons)": [[584, "pypath.inputs.pathwaycommons.pathwaycommons_panther_interactions"]], "pathwaycommons_phosphosite_interactions() (in module pypath.inputs.pathwaycommons)": [[585, "pypath.inputs.pathwaycommons.pathwaycommons_phosphosite_interactions"]], "pathwaycommons_reactome_interactions() (in module pypath.inputs.pathwaycommons)": [[586, "pypath.inputs.pathwaycommons.pathwaycommons_reactome_interactions"]], "pathwaycommons_wikipathways_interactions() (in module pypath.inputs.pathwaycommons)": [[587, "pypath.inputs.pathwaycommons.pathwaycommons_wikipathways_interactions"]], "pypath.inputs.pazar": [[588, "module-pypath.inputs.pazar"]], "pazar_interactions() (in module pypath.inputs.pazar)": [[589, "pypath.inputs.pazar.pazar_interactions"]], "pypath.inputs.pdb": [[590, "module-pypath.inputs.pdb"]], "pdb_chains() (in module pypath.inputs.pdb)": [[591, "pypath.inputs.pdb.pdb_chains"]], "pdb_complexes() (in module pypath.inputs.pdb)": [[592, "pypath.inputs.pdb.pdb_complexes"]], "pdb_uniprot() (in module pypath.inputs.pdb)": [[593, "pypath.inputs.pdb.pdb_uniprot"]], "pypath.inputs.pdzbase": [[594, "module-pypath.inputs.pdzbase"]], "pdzbase_interactions() (in module pypath.inputs.pdzbase)": [[595, "pypath.inputs.pdzbase.pdzbase_interactions"]], "pypath.inputs.pepcyber": [[596, "module-pypath.inputs.pepcyber"]], "pepcyber_details() (in module pypath.inputs.pepcyber)": [[597, "pypath.inputs.pepcyber.pepcyber_details"]], "pepcyber_interactions() (in module pypath.inputs.pepcyber)": [[598, "pypath.inputs.pepcyber.pepcyber_interactions"]], "pypath.inputs.pfam": [[599, "module-pypath.inputs.pfam"]], "pfam_names() (in module pypath.inputs.pfam)": [[600, "pypath.inputs.pfam.pfam_names"]], "pfam_pdb() (in module pypath.inputs.pfam)": [[601, "pypath.inputs.pfam.pfam_pdb"]], "pfam_regions() (in module pypath.inputs.pfam)": [[602, "pypath.inputs.pfam.pfam_regions"]], "pfam_uniprot() (in module pypath.inputs.pfam)": [[603, "pypath.inputs.pfam.pfam_uniprot"]], "pypath.inputs.phobius": [[604, "module-pypath.inputs.phobius"]], "phobius_annotations() (in module pypath.inputs.phobius)": [[605, "pypath.inputs.phobius.phobius_annotations"]], "pypath.inputs.phosphatome": [[606, "module-pypath.inputs.phosphatome"]], "phosphatome_annotations() (in module pypath.inputs.phosphatome)": [[607, "pypath.inputs.phosphatome.phosphatome_annotations"]], "pypath.inputs.phosphoelm": [[608, "module-pypath.inputs.phosphoelm"]], "phosphoelm_enzyme_substrate() (in module pypath.inputs.phosphoelm)": [[609, "pypath.inputs.phosphoelm.phosphoelm_enzyme_substrate"]], "phosphoelm_interactions() (in module pypath.inputs.phosphoelm)": [[610, "pypath.inputs.phosphoelm.phosphoelm_interactions"]], "phosphoelm_kinases() (in module pypath.inputs.phosphoelm)": [[611, "pypath.inputs.phosphoelm.phosphoelm_kinases"]], "pypath.inputs.phosphonetworks": [[612, "module-pypath.inputs.phosphonetworks"]], "phosphonetworks_enzyme_substrate() (in module pypath.inputs.phosphonetworks)": [[613, "pypath.inputs.phosphonetworks.phosphonetworks_enzyme_substrate"]], "phosphonetworks_interactions() (in module pypath.inputs.phosphonetworks)": [[614, "pypath.inputs.phosphonetworks.phosphonetworks_interactions"]], "pypath.inputs.phosphopoint": [[615, "module-pypath.inputs.phosphopoint"]], "phosphopoint_directions() (in module pypath.inputs.phosphopoint)": [[616, "pypath.inputs.phosphopoint.phosphopoint_directions"]], "phosphopoint_interactions() (in module pypath.inputs.phosphopoint)": [[617, "pypath.inputs.phosphopoint.phosphopoint_interactions"]], "pypath.inputs.phosphosite": [[618, "module-pypath.inputs.phosphosite"]], "phosphosite_directions() (in module pypath.inputs.phosphosite)": [[619, "pypath.inputs.phosphosite.phosphosite_directions"]], "phosphosite_enzyme_substrate() (in module pypath.inputs.phosphosite)": [[620, "pypath.inputs.phosphosite.phosphosite_enzyme_substrate"]], "phosphosite_interactions() (in module pypath.inputs.phosphosite)": [[621, "pypath.inputs.phosphosite.phosphosite_interactions"]], "phosphosite_interactions_all() (in module pypath.inputs.phosphosite)": [[622, "pypath.inputs.phosphosite.phosphosite_interactions_all"]], "phosphosite_interactions_curated() (in module pypath.inputs.phosphosite)": [[623, "pypath.inputs.phosphosite.phosphosite_interactions_curated"]], "phosphosite_interactions_new() (in module pypath.inputs.phosphosite)": [[624, "pypath.inputs.phosphosite.phosphosite_interactions_new"]], "phosphosite_interactions_noref() (in module pypath.inputs.phosphosite)": [[625, "pypath.inputs.phosphosite.phosphosite_interactions_noref"]], "phosphosite_ptm_orthology() (in module pypath.inputs.phosphosite)": [[626, "pypath.inputs.phosphosite.phosphosite_ptm_orthology"]], "phosphosite_ptms() (in module pypath.inputs.phosphosite)": [[627, "pypath.inputs.phosphosite.phosphosite_ptms"]], "phosphosite_regsites() (in module pypath.inputs.phosphosite)": [[628, "pypath.inputs.phosphosite.phosphosite_regsites"]], "phosphosite_regsites_one_organism() (in module pypath.inputs.phosphosite)": [[629, "pypath.inputs.phosphosite.phosphosite_regsites_one_organism"]], "regsites_tab() (in module pypath.inputs.phosphosite)": [[630, "pypath.inputs.phosphosite.regsites_tab"]], "pypath.inputs.pisa": [[631, "module-pypath.inputs.pisa"]], "pisabond (class in pypath.inputs.pisa)": [[632, "pypath.inputs.pisa.PisaBond"]], "__init__() (pypath.inputs.pisa.pisabond method)": [[632, "pypath.inputs.pisa.PisaBond.__init__"]], "chain_1 (pypath.inputs.pisa.pisabond attribute)": [[632, "pypath.inputs.pisa.PisaBond.chain_1"]], "chain_2 (pypath.inputs.pisa.pisabond attribute)": [[632, "pypath.inputs.pisa.PisaBond.chain_2"]], "count() (pypath.inputs.pisa.pisabond method)": [[632, "pypath.inputs.pisa.PisaBond.count"]], "index() (pypath.inputs.pisa.pisabond method)": [[632, "pypath.inputs.pisa.PisaBond.index"]], "residue_1 (pypath.inputs.pisa.pisabond attribute)": [[632, "pypath.inputs.pisa.PisaBond.residue_1"]], "residue_2 (pypath.inputs.pisa.pisabond attribute)": [[632, "pypath.inputs.pisa.PisaBond.residue_2"]], "seqnum_1 (pypath.inputs.pisa.pisabond attribute)": [[632, "pypath.inputs.pisa.PisaBond.seqnum_1"]], "seqnum_2 (pypath.inputs.pisa.pisabond attribute)": [[632, "pypath.inputs.pisa.PisaBond.seqnum_2"]], "uniprot_1 (pypath.inputs.pisa.pisabond attribute)": [[632, "pypath.inputs.pisa.PisaBond.uniprot_1"]], "uniprot_2 (pypath.inputs.pisa.pisabond attribute)": [[632, "pypath.inputs.pisa.PisaBond.uniprot_2"]], "pisa_bonds() (in module pypath.inputs.pisa)": [[633, "pypath.inputs.pisa.pisa_bonds"]], "pisa_interfaces() (in module pypath.inputs.pisa)": [[634, "pypath.inputs.pisa.pisa_interfaces"]], "pypath.inputs.pro": [[635, "module-pypath.inputs.pro"]], "get_pro() (in module pypath.inputs.pro)": [[636, "pypath.inputs.pro.get_pro"]], "pro_mapping() (in module pypath.inputs.pro)": [[637, "pypath.inputs.pro.pro_mapping"]], "pypath.inputs.progeny": [[638, "module-pypath.inputs.progeny"]], "progeny_annotations() (in module pypath.inputs.progeny)": [[639, "pypath.inputs.progeny.progeny_annotations"]], "progeny_raw() (in module pypath.inputs.progeny)": [[640, "pypath.inputs.progeny.progeny_raw"]], "pypath.inputs.proteinatlas": [[641, "module-pypath.inputs.proteinatlas"]], "get_proteinatlas() (in module pypath.inputs.proteinatlas)": [[642, "pypath.inputs.proteinatlas.get_proteinatlas"]], "proteinatlas_annotations() (in module pypath.inputs.proteinatlas)": [[643, "pypath.inputs.proteinatlas.proteinatlas_annotations"]], "proteinatlas_secretome_annotations() (in module pypath.inputs.proteinatlas)": [[644, "pypath.inputs.proteinatlas.proteinatlas_secretome_annotations"]], "proteinatlas_subcellular_annotations() (in module pypath.inputs.proteinatlas)": [[645, "pypath.inputs.proteinatlas.proteinatlas_subcellular_annotations"]], "pypath.inputs.proteins": [[646, "module-pypath.inputs.proteins"]], "variants() (in module pypath.inputs.proteins)": [[647, "pypath.inputs.proteins.variants"]], "pypath.inputs.protmapper": [[648, "module-pypath.inputs.protmapper"]], "get_protmapper() (in module pypath.inputs.protmapper)": [[649, "pypath.inputs.protmapper.get_protmapper"]], "protmapper_enzyme_substrate() (in module pypath.inputs.protmapper)": [[650, "pypath.inputs.protmapper.protmapper_enzyme_substrate"]], "protmapper_interactions() (in module pypath.inputs.protmapper)": [[651, "pypath.inputs.protmapper.protmapper_interactions"]], "pypath.inputs.pubchem": [[652, "module-pypath.inputs.pubchem"]], "pubchem_mapping() (in module pypath.inputs.pubchem)": [[653, "pypath.inputs.pubchem.pubchem_mapping"]], "pypath.inputs.pubmed": [[654, "module-pypath.inputs.pubmed"]], "get_pmid() (in module pypath.inputs.pubmed)": [[655, "pypath.inputs.pubmed.get_pmid"]], "get_pubmeds() (in module pypath.inputs.pubmed)": [[656, "pypath.inputs.pubmed.get_pubmeds"]], "only_pmids() (in module pypath.inputs.pubmed)": [[657, "pypath.inputs.pubmed.only_pmids"]], "open_pubmed() (in module pypath.inputs.pubmed)": [[658, "pypath.inputs.pubmed.open_pubmed"]], "pmids_dict() (in module pypath.inputs.pubmed)": [[659, "pypath.inputs.pubmed.pmids_dict"]], "pmids_list() (in module pypath.inputs.pubmed)": [[660, "pypath.inputs.pubmed.pmids_list"]], "pypath.inputs.ramilowski2015": [[661, "module-pypath.inputs.ramilowski2015"]], "ramilowski_interactions() (in module pypath.inputs.ramilowski2015)": [[662, "pypath.inputs.ramilowski2015.ramilowski_interactions"]], "ramilowski_locations() (in module pypath.inputs.ramilowski2015)": [[663, "pypath.inputs.ramilowski2015.ramilowski_locations"]], "pypath.inputs.rdata": [[664, "module-pypath.inputs.rdata"]], "pypath.inputs.reaction": [[665, "module-pypath.inputs.reaction"]], "acsn_biopax() (in module pypath.inputs.reaction)": [[666, "pypath.inputs.reaction.acsn_biopax"]], "acsn_interactions_2() (in module pypath.inputs.reaction)": [[667, "pypath.inputs.reaction.acsn_interactions_2"]], "get_acsn_effects() (in module pypath.inputs.reaction)": [[668, "pypath.inputs.reaction.get_acsn_effects"]], "get_controls() (in module pypath.inputs.reaction)": [[669, "pypath.inputs.reaction.get_controls"]], "get_interactions() (in module pypath.inputs.reaction)": [[670, "pypath.inputs.reaction.get_interactions"]], "get_reactions() (in module pypath.inputs.reaction)": [[671, "pypath.inputs.reaction.get_reactions"]], "get_soup() (in module pypath.inputs.reaction)": [[672, "pypath.inputs.reaction.get_soup"]], "panther_biopax() (in module pypath.inputs.reaction)": [[673, "pypath.inputs.reaction.panther_biopax"]], "panther_interactions() (in module pypath.inputs.reaction)": [[674, "pypath.inputs.reaction.panther_interactions"]], "pid_biopax() (in module pypath.inputs.reaction)": [[675, "pypath.inputs.reaction.pid_biopax"]], "pid_interactions() (in module pypath.inputs.reaction)": [[676, "pypath.inputs.reaction.pid_interactions"]], "process_complex() (in module pypath.inputs.reaction)": [[677, "pypath.inputs.reaction.process_complex"]], "process_controls() (in module pypath.inputs.reaction)": [[678, "pypath.inputs.reaction.process_controls"]], "process_reactions() (in module pypath.inputs.reaction)": [[679, "pypath.inputs.reaction.process_reactions"]], "reactions_biopax() (in module pypath.inputs.reaction)": [[680, "pypath.inputs.reaction.reactions_biopax"]], "reactome_biopax() (in module pypath.inputs.reaction)": [[681, "pypath.inputs.reaction.reactome_biopax"]], "reactome_bs() (in module pypath.inputs.reaction)": [[682, "pypath.inputs.reaction.reactome_bs"]], "reactome_interactions() (in module pypath.inputs.reaction)": [[683, "pypath.inputs.reaction.reactome_interactions"]], "reactome_sbml() (in module pypath.inputs.reaction)": [[684, "pypath.inputs.reaction.reactome_sbml"]], "pypath.inputs.scconnect": [[685, "module-pypath.inputs.scconnect"]], "scconnect_annotations() (in module pypath.inputs.scconnect)": [[686, "pypath.inputs.scconnect.scconnect_annotations"]], "scconnect_complexes() (in module pypath.inputs.scconnect)": [[687, "pypath.inputs.scconnect.scconnect_complexes"]], "scconnect_interactions() (in module pypath.inputs.scconnect)": [[688, "pypath.inputs.scconnect.scconnect_interactions"]], "pypath.inputs.science": [[689, "module-pypath.inputs.science"]], "science_download() (in module pypath.inputs.science)": [[690, "pypath.inputs.science.science_download"]], "pypath.inputs.signalink": [[691, "module-pypath.inputs.signalink"]], "signalink_annotations() (in module pypath.inputs.signalink)": [[692, "pypath.inputs.signalink.signalink_annotations"]], "signalink_function_annotations() (in module pypath.inputs.signalink)": [[693, "pypath.inputs.signalink.signalink_function_annotations"]], "signalink_interactions() (in module pypath.inputs.signalink)": [[694, "pypath.inputs.signalink.signalink_interactions"]], "signalink_pathway_annotations() (in module pypath.inputs.signalink)": [[695, "pypath.inputs.signalink.signalink_pathway_annotations"]], "pypath.inputs.signor": [[696, "module-pypath.inputs.signor"]], "signor_complexes() (in module pypath.inputs.signor)": [[697, "pypath.inputs.signor.signor_complexes"]], "signor_enzyme_substrate() (in module pypath.inputs.signor)": [[698, "pypath.inputs.signor.signor_enzyme_substrate"]], "signor_interactions() (in module pypath.inputs.signor)": [[699, "pypath.inputs.signor.signor_interactions"]], "signor_pathway_annotations() (in module pypath.inputs.signor)": [[700, "pypath.inputs.signor.signor_pathway_annotations"]], "signor_pathways() (in module pypath.inputs.signor)": [[701, "pypath.inputs.signor.signor_pathways"]], "signor_protein_families() (in module pypath.inputs.signor)": [[702, "pypath.inputs.signor.signor_protein_families"]], "pypath.inputs.spike": [[703, "module-pypath.inputs.spike"]], "spike_complexes() (in module pypath.inputs.spike)": [[704, "pypath.inputs.spike.spike_complexes"]], "spike_interactions() (in module pypath.inputs.spike)": [[705, "pypath.inputs.spike.spike_interactions"]], "pypath.inputs.stitch": [[706, "module-pypath.inputs.stitch"]], "stitch_actions_interactions() (in module pypath.inputs.stitch)": [[707, "pypath.inputs.stitch.stitch_actions_interactions"]], "stitch_links_interactions() (in module pypath.inputs.stitch)": [[708, "pypath.inputs.stitch.stitch_links_interactions"]], "pypath.inputs.string": [[709, "module-pypath.inputs.string"]], "string_effects() (in module pypath.inputs.string)": [[710, "pypath.inputs.string.string_effects"]], "string_links_interactions() (in module pypath.inputs.string)": [[711, "pypath.inputs.string.string_links_interactions"]], "string_physical_interactions() (in module pypath.inputs.string)": [[712, "pypath.inputs.string.string_physical_interactions"]], "string_species() (in module pypath.inputs.string)": [[713, "pypath.inputs.string.string_species"]], "pypath.inputs.surfaceome": [[714, "module-pypath.inputs.surfaceome"]], "surfaceome_annotations() (in module pypath.inputs.surfaceome)": [[715, "pypath.inputs.surfaceome.surfaceome_annotations"]], "pypath.inputs.switches_elm": [[716, "module-pypath.inputs.switches_elm"]], "get_switches_elm() (in module pypath.inputs.switches_elm)": [[717, "pypath.inputs.switches_elm.get_switches_elm"]], "pypath.inputs.talklr": [[718, "module-pypath.inputs.talklr"]], "talklr_annotations() (in module pypath.inputs.talklr)": [[719, "pypath.inputs.talklr.talklr_annotations"]], "talklr_interactions() (in module pypath.inputs.talklr)": [[720, "pypath.inputs.talklr.talklr_interactions"]], "talklr_raw() (in module pypath.inputs.talklr)": [[721, "pypath.inputs.talklr.talklr_raw"]], "pypath.inputs.tcdb": [[722, "module-pypath.inputs.tcdb"]], "tcdb_annotations() (in module pypath.inputs.tcdb)": [[723, "pypath.inputs.tcdb.tcdb_annotations"]], "tcdb_classes() (in module pypath.inputs.tcdb)": [[724, "pypath.inputs.tcdb.tcdb_classes"]], "tcdb_families() (in module pypath.inputs.tcdb)": [[725, "pypath.inputs.tcdb.tcdb_families"]], "pypath.inputs.tfcensus": [[726, "module-pypath.inputs.tfcensus"]], "tfcensus_annotations() (in module pypath.inputs.tfcensus)": [[727, "pypath.inputs.tfcensus.tfcensus_annotations"]], "pypath.inputs.threedcomplex": [[728, "module-pypath.inputs.threedcomplex"]], "threedcomplex_chains() (in module pypath.inputs.threedcomplex)": [[729, "pypath.inputs.threedcomplex.threedcomplex_chains"]], "threedcomplex_complexes() (in module pypath.inputs.threedcomplex)": [[730, "pypath.inputs.threedcomplex.threedcomplex_complexes"]], "threedcomplex_contacts() (in module pypath.inputs.threedcomplex)": [[731, "pypath.inputs.threedcomplex.threedcomplex_contacts"]], "threedcomplex_ddi() (in module pypath.inputs.threedcomplex)": [[732, "pypath.inputs.threedcomplex.threedcomplex_ddi"]], "threedcomplex_nresidues() (in module pypath.inputs.threedcomplex)": [[733, "pypath.inputs.threedcomplex.threedcomplex_nresidues"]], "pypath.inputs.threedid": [[734, "module-pypath.inputs.threedid"]], "get_3did() (in module pypath.inputs.threedid)": [[735, "pypath.inputs.threedid.get_3did"]], "get_3did_ddi() (in module pypath.inputs.threedid)": [[736, "pypath.inputs.threedid.get_3did_ddi"]], "get_3did_dmi() (in module pypath.inputs.threedid)": [[737, "pypath.inputs.threedid.get_3did_dmi"]], "process_3did_dmi() (in module pypath.inputs.threedid)": [[738, "pypath.inputs.threedid.process_3did_dmi"]], "pypath.inputs.topdb": [[739, "module-pypath.inputs.topdb"]], "topdb_annotations() (in module pypath.inputs.topdb)": [[740, "pypath.inputs.topdb.topdb_annotations"]], "pypath.inputs.transmir": [[741, "module-pypath.inputs.transmir"]], "transmir_interactions() (in module pypath.inputs.transmir)": [[742, "pypath.inputs.transmir.transmir_interactions"]], "pypath.inputs.trip": [[743, "module-pypath.inputs.trip"]], "take_a_trip() (in module pypath.inputs.trip)": [[744, "pypath.inputs.trip.take_a_trip"]], "trip_find_uniprot() (in module pypath.inputs.trip)": [[745, "pypath.inputs.trip.trip_find_uniprot"]], "trip_get_uniprot() (in module pypath.inputs.trip)": [[746, "pypath.inputs.trip.trip_get_uniprot"]], "trip_interactions() (in module pypath.inputs.trip)": [[747, "pypath.inputs.trip.trip_interactions"]], "trip_process() (in module pypath.inputs.trip)": [[748, "pypath.inputs.trip.trip_process"]], "trip_process_table() (in module pypath.inputs.trip)": [[749, "pypath.inputs.trip.trip_process_table"]], "pypath.inputs.unichem": [[750, "module-pypath.inputs.unichem"]], "info() (in module pypath.inputs.unichem)": [[751, "pypath.inputs.unichem.info"]], "unichem_info() (in module pypath.inputs.unichem)": [[752, "pypath.inputs.unichem.unichem_info"]], "unichem_mapping() (in module pypath.inputs.unichem)": [[753, "pypath.inputs.unichem.unichem_mapping"]], "unichem_sources() (in module pypath.inputs.unichem)": [[754, "pypath.inputs.unichem.unichem_sources"]], "pypath.inputs.uniprot": [[755, "module-pypath.inputs.uniprot"]], "taxon (class in pypath.inputs.uniprot)": [[756, "pypath.inputs.uniprot.Taxon"]], "__init__() (pypath.inputs.uniprot.taxon method)": [[756, "pypath.inputs.uniprot.Taxon.__init__"]], "count() (pypath.inputs.uniprot.taxon method)": [[756, "pypath.inputs.uniprot.Taxon.count"]], "english (pypath.inputs.uniprot.taxon attribute)": [[756, "pypath.inputs.uniprot.Taxon.english"]], "index() (pypath.inputs.uniprot.taxon method)": [[756, "pypath.inputs.uniprot.Taxon.index"]], "latin (pypath.inputs.uniprot.taxon attribute)": [[756, "pypath.inputs.uniprot.Taxon.latin"]], "latin_synonym (pypath.inputs.uniprot.taxon attribute)": [[756, "pypath.inputs.uniprot.Taxon.latin_synonym"]], "ncbi_id (pypath.inputs.uniprot.taxon attribute)": [[756, "pypath.inputs.uniprot.Taxon.ncbi_id"]], "uniprotrecordhistory (class in pypath.inputs.uniprot)": [[757, "pypath.inputs.uniprot.UniprotRecordHistory"]], "__init__() (pypath.inputs.uniprot.uniprotrecordhistory method)": [[757, "pypath.inputs.uniprot.UniprotRecordHistory.__init__"]], "count() (pypath.inputs.uniprot.uniprotrecordhistory method)": [[757, "pypath.inputs.uniprot.UniprotRecordHistory.count"]], "database (pypath.inputs.uniprot.uniprotrecordhistory attribute)": [[757, "pypath.inputs.uniprot.UniprotRecordHistory.database"]], "date (pypath.inputs.uniprot.uniprotrecordhistory attribute)": [[757, "pypath.inputs.uniprot.UniprotRecordHistory.date"]], "entry_name (pypath.inputs.uniprot.uniprotrecordhistory attribute)": [[757, "pypath.inputs.uniprot.UniprotRecordHistory.entry_name"]], "entry_version (pypath.inputs.uniprot.uniprotrecordhistory attribute)": [[757, "pypath.inputs.uniprot.UniprotRecordHistory.entry_version"]], "index() (pypath.inputs.uniprot.uniprotrecordhistory method)": [[757, "pypath.inputs.uniprot.UniprotRecordHistory.index"]], "number (pypath.inputs.uniprot.uniprotrecordhistory attribute)": [[757, "pypath.inputs.uniprot.UniprotRecordHistory.number"]], "replaced_by (pypath.inputs.uniprot.uniprotrecordhistory attribute)": [[757, "pypath.inputs.uniprot.UniprotRecordHistory.replaced_by"]], "replaces (pypath.inputs.uniprot.uniprotrecordhistory attribute)": [[757, "pypath.inputs.uniprot.UniprotRecordHistory.replaces"]], "sequence_version (pypath.inputs.uniprot.uniprotrecordhistory attribute)": [[757, "pypath.inputs.uniprot.UniprotRecordHistory.sequence_version"]], "all_swissprots() (in module pypath.inputs.uniprot)": [[758, "pypath.inputs.uniprot.all_swissprots"]], "all_trembls() (in module pypath.inputs.uniprot)": [[759, "pypath.inputs.uniprot.all_trembls"]], "all_uniprots() (in module pypath.inputs.uniprot)": [[760, "pypath.inputs.uniprot.all_uniprots"]], "deleted_uniprot_genesymbol() (in module pypath.inputs.uniprot)": [[761, "pypath.inputs.uniprot.deleted_uniprot_genesymbol"]], "get_db() (in module pypath.inputs.uniprot)": [[762, "pypath.inputs.uniprot.get_db"]], "get_uniprot_sec() (in module pypath.inputs.uniprot)": [[763, "pypath.inputs.uniprot.get_uniprot_sec"]], "init_db() (in module pypath.inputs.uniprot)": [[764, "pypath.inputs.uniprot.init_db"]], "is_swissprot() (in module pypath.inputs.uniprot)": [[765, "pypath.inputs.uniprot.is_swissprot"]], "is_trembl() (in module pypath.inputs.uniprot)": [[766, "pypath.inputs.uniprot.is_trembl"]], "is_uniprot() (in module pypath.inputs.uniprot)": [[767, "pypath.inputs.uniprot.is_uniprot"]], "protein_datasheet() (in module pypath.inputs.uniprot)": [[768, "pypath.inputs.uniprot.protein_datasheet"]], "swissprot_deleted() (in module pypath.inputs.uniprot)": [[769, "pypath.inputs.uniprot.swissprot_deleted"]], "trembl_deleted() (in module pypath.inputs.uniprot)": [[770, "pypath.inputs.uniprot.trembl_deleted"]], "uniprot_data() (in module pypath.inputs.uniprot)": [[771, "pypath.inputs.uniprot.uniprot_data"]], "uniprot_deleted() (in module pypath.inputs.uniprot)": [[772, "pypath.inputs.uniprot.uniprot_deleted"]], "uniprot_families() (in module pypath.inputs.uniprot)": [[773, "pypath.inputs.uniprot.uniprot_families"]], "uniprot_history() (in module pypath.inputs.uniprot)": [[774, "pypath.inputs.uniprot.uniprot_history"]], "uniprot_history_recent_datasheet() (in module pypath.inputs.uniprot)": [[775, "pypath.inputs.uniprot.uniprot_history_recent_datasheet"]], "uniprot_keywords() (in module pypath.inputs.uniprot)": [[776, "pypath.inputs.uniprot.uniprot_keywords"]], "uniprot_locations() (in module pypath.inputs.uniprot)": [[777, "pypath.inputs.uniprot.uniprot_locations"]], "uniprot_ncbi_taxids() (in module pypath.inputs.uniprot)": [[778, "pypath.inputs.uniprot.uniprot_ncbi_taxids"]], "uniprot_ncbi_taxids_2() (in module pypath.inputs.uniprot)": [[779, "pypath.inputs.uniprot.uniprot_ncbi_taxids_2"]], "uniprot_preprocess() (in module pypath.inputs.uniprot)": [[780, "pypath.inputs.uniprot.uniprot_preprocess"]], "uniprot_recent_version() (in module pypath.inputs.uniprot)": [[781, "pypath.inputs.uniprot.uniprot_recent_version"]], "uniprot_taxonomy() (in module pypath.inputs.uniprot)": [[782, "pypath.inputs.uniprot.uniprot_taxonomy"]], "uniprot_tissues() (in module pypath.inputs.uniprot)": [[783, "pypath.inputs.uniprot.uniprot_tissues"]], "uniprot_topology() (in module pypath.inputs.uniprot)": [[784, "pypath.inputs.uniprot.uniprot_topology"]], "valid_uniprot() (in module pypath.inputs.uniprot)": [[785, "pypath.inputs.uniprot.valid_uniprot"]], "pypath.inputs.wang": [[786, "module-pypath.inputs.wang"]], "cui_interactions() (in module pypath.inputs.wang)": [[787, "pypath.inputs.wang.cui_interactions"]], "hsn_interactions() (in module pypath.inputs.wang)": [[788, "pypath.inputs.wang.hsn_interactions"]], "wang_annotations() (in module pypath.inputs.wang)": [[789, "pypath.inputs.wang.wang_annotations"]], "wang_interactions() (in module pypath.inputs.wang)": [[790, "pypath.inputs.wang.wang_interactions"]], "pypath.inputs.wojtowicz2020": [[791, "module-pypath.inputs.wojtowicz2020"]], "wojtowicz2020_interactions() (in module pypath.inputs.wojtowicz2020)": [[792, "pypath.inputs.wojtowicz2020.wojtowicz2020_interactions"]], "wojtowicz2020_raw() (in module pypath.inputs.wojtowicz2020)": [[793, "pypath.inputs.wojtowicz2020.wojtowicz2020_raw"]], "pypath.inputs.zhong2015": [[794, "module-pypath.inputs.zhong2015"]], "zhong2015_annotations() (in module pypath.inputs.zhong2015)": [[795, "pypath.inputs.zhong2015.zhong2015_annotations"]], "pypath.internals": [[796, "module-pypath.internals"]], "pypath.internals.annot_formats": [[797, "module-pypath.internals.annot_formats"]], "annotdef (class in pypath.internals.annot_formats)": [[798, "pypath.internals.annot_formats.AnnotDef"]], "__init__() (pypath.internals.annot_formats.annotdef method)": [[798, "pypath.internals.annot_formats.AnnotDef.__init__"]], "args (pypath.internals.annot_formats.annotdef attribute)": [[798, "pypath.internals.annot_formats.AnnotDef.args"]], "aspect (pypath.internals.annot_formats.annotdef attribute)": [[798, "pypath.internals.annot_formats.AnnotDef.aspect"]], "avoid (pypath.internals.annot_formats.annotdef attribute)": [[798, "pypath.internals.annot_formats.AnnotDef.avoid"]], "count() (pypath.internals.annot_formats.annotdef method)": [[798, "pypath.internals.annot_formats.AnnotDef.count"]], "enabled (pypath.internals.annot_formats.annotdef attribute)": [[798, "pypath.internals.annot_formats.AnnotDef.enabled"]], "exclude (pypath.internals.annot_formats.annotdef attribute)": [[798, "pypath.internals.annot_formats.AnnotDef.exclude"]], "index() (pypath.internals.annot_formats.annotdef method)": [[798, "pypath.internals.annot_formats.AnnotDef.index"]], "limit (pypath.internals.annot_formats.annotdef attribute)": [[798, "pypath.internals.annot_formats.AnnotDef.limit"]], "name (pypath.internals.annot_formats.annotdef attribute)": [[798, "pypath.internals.annot_formats.AnnotDef.name"]], "parent (pypath.internals.annot_formats.annotdef attribute)": [[798, "pypath.internals.annot_formats.AnnotDef.parent"]], "receiver (pypath.internals.annot_formats.annotdef attribute)": [[798, "pypath.internals.annot_formats.AnnotDef.receiver"]], "resource (pypath.internals.annot_formats.annotdef attribute)": [[798, "pypath.internals.annot_formats.AnnotDef.resource"]], "resource_name (pypath.internals.annot_formats.annotdef attribute)": [[798, "pypath.internals.annot_formats.AnnotDef.resource_name"]], "scope (pypath.internals.annot_formats.annotdef attribute)": [[798, "pypath.internals.annot_formats.AnnotDef.scope"]], "source (pypath.internals.annot_formats.annotdef attribute)": [[798, "pypath.internals.annot_formats.AnnotDef.source"]], "transmitter (pypath.internals.annot_formats.annotdef attribute)": [[798, "pypath.internals.annot_formats.AnnotDef.transmitter"]], "annotdefkey (class in pypath.internals.annot_formats)": [[799, "pypath.internals.annot_formats.AnnotDefKey"]], "__init__() (pypath.internals.annot_formats.annotdefkey method)": [[799, "pypath.internals.annot_formats.AnnotDefKey.__init__"]], "count() (pypath.internals.annot_formats.annotdefkey method)": [[799, "pypath.internals.annot_formats.AnnotDefKey.count"]], "index() (pypath.internals.annot_formats.annotdefkey method)": [[799, "pypath.internals.annot_formats.AnnotDefKey.index"]], "name (pypath.internals.annot_formats.annotdefkey attribute)": [[799, "pypath.internals.annot_formats.AnnotDefKey.name"]], "parent (pypath.internals.annot_formats.annotdefkey attribute)": [[799, "pypath.internals.annot_formats.AnnotDefKey.parent"]], "resource (pypath.internals.annot_formats.annotdefkey attribute)": [[799, "pypath.internals.annot_formats.AnnotDefKey.resource"]], "annotop (class in pypath.internals.annot_formats)": [[800, "pypath.internals.annot_formats.AnnotOp"]], "__init__() (pypath.internals.annot_formats.annotop method)": [[800, "pypath.internals.annot_formats.AnnotOp.__init__"]], "annots (pypath.internals.annot_formats.annotop attribute)": [[800, "pypath.internals.annot_formats.AnnotOp.annots"]], "count() (pypath.internals.annot_formats.annotop method)": [[800, "pypath.internals.annot_formats.AnnotOp.count"]], "index() (pypath.internals.annot_formats.annotop method)": [[800, "pypath.internals.annot_formats.AnnotOp.index"]], "op (pypath.internals.annot_formats.annotop attribute)": [[800, "pypath.internals.annot_formats.AnnotOp.op"]], "annotationgroup (class in pypath.internals.annot_formats)": [[801, "pypath.internals.annot_formats.AnnotationGroup"]], "__init__() (pypath.internals.annot_formats.annotationgroup method)": [[801, "pypath.internals.annot_formats.AnnotationGroup.__init__"]], "filter_entity_type() (pypath.internals.annot_formats.annotationgroup method)": [[801, "pypath.internals.annot_formats.AnnotationGroup.filter_entity_type"]], "isdisjoint() (pypath.internals.annot_formats.annotationgroup class method)": [[801, "pypath.internals.annot_formats.AnnotationGroup.isdisjoint"]], "pypath.internals.input_formats": [[802, "module-pypath.internals.input_formats"]], "arraymapping (class in pypath.internals.input_formats)": [[803, "pypath.internals.input_formats.ArrayMapping"]], "__init__() (pypath.internals.input_formats.arraymapping method)": [[803, "pypath.internals.input_formats.ArrayMapping.__init__"]], "biomartmapping (class in pypath.internals.input_formats)": [[804, "pypath.internals.input_formats.BiomartMapping"]], "__init__() (pypath.internals.input_formats.biomartmapping method)": [[804, "pypath.internals.input_formats.BiomartMapping.__init__"]], "filemapping (class in pypath.internals.input_formats)": [[805, "pypath.internals.input_formats.FileMapping"]], "__init__() (pypath.internals.input_formats.filemapping method)": [[805, "pypath.internals.input_formats.FileMapping.__init__"]], "mappinginput (class in pypath.internals.input_formats)": [[806, "pypath.internals.input_formats.MappingInput"]], "__init__() (pypath.internals.input_formats.mappinginput method)": [[806, "pypath.internals.input_formats.MappingInput.__init__"]], "networkinput (class in pypath.internals.input_formats)": [[807, "pypath.internals.input_formats.NetworkInput"]], "__init__() (pypath.internals.input_formats.networkinput method)": [[807, "pypath.internals.input_formats.NetworkInput.__init__"]], "picklemapping (class in pypath.internals.input_formats)": [[808, "pypath.internals.input_formats.PickleMapping"]], "__init__() (pypath.internals.input_formats.picklemapping method)": [[808, "pypath.internals.input_formats.PickleMapping.__init__"]], "promapping (class in pypath.internals.input_formats)": [[809, "pypath.internals.input_formats.ProMapping"]], "__init__() (pypath.internals.input_formats.promapping method)": [[809, "pypath.internals.input_formats.ProMapping.__init__"]], "readlist (class in pypath.internals.input_formats)": [[810, "pypath.internals.input_formats.ReadList"]], "__init__() (pypath.internals.input_formats.readlist method)": [[810, "pypath.internals.input_formats.ReadList.__init__"]], "unichemmapping (class in pypath.internals.input_formats)": [[811, "pypath.internals.input_formats.UnichemMapping"]], "__init__() (pypath.internals.input_formats.unichemmapping method)": [[811, "pypath.internals.input_formats.UnichemMapping.__init__"]], "uniprotlistmapping (class in pypath.internals.input_formats)": [[812, "pypath.internals.input_formats.UniprotListMapping"]], "__init__() (pypath.internals.input_formats.uniprotlistmapping method)": [[812, "pypath.internals.input_formats.UniprotListMapping.__init__"]], "uniprotmapping (class in pypath.internals.input_formats)": [[813, "pypath.internals.input_formats.UniprotMapping"]], "__init__() (pypath.internals.input_formats.uniprotmapping method)": [[813, "pypath.internals.input_formats.UniprotMapping.__init__"]], "resource_id_type() (pypath.internals.input_formats.uniprotmapping static method)": [[813, "pypath.internals.input_formats.UniprotMapping.resource_id_type"]], "pypath.internals.intera": [[814, "module-pypath.internals.intera"]], "complex (class in pypath.internals.intera)": [[815, "pypath.internals.intera.Complex"]], "__init__() (pypath.internals.intera.complex method)": [[815, "pypath.internals.intera.Complex.__init__"]], "add_attr() (pypath.internals.intera.complex method)": [[815, "pypath.internals.intera.Complex.add_attr"]], "merge() (pypath.internals.intera.complex method)": [[815, "pypath.internals.intera.Complex.merge"]], "domain (class in pypath.internals.intera)": [[816, "pypath.internals.intera.Domain"]], "__init__() (pypath.internals.intera.domain method)": [[816, "pypath.internals.intera.Domain.__init__"]], "domaindomain (class in pypath.internals.intera)": [[817, "pypath.internals.intera.DomainDomain"]], "__init__() (pypath.internals.intera.domaindomain method)": [[817, "pypath.internals.intera.DomainDomain.__init__"]], "domainmotif (class in pypath.internals.intera)": [[818, "pypath.internals.intera.DomainMotif"]], "__init__() (pypath.internals.intera.domainmotif method)": [[818, "pypath.internals.intera.DomainMotif.__init__"]], "get_line() (pypath.internals.intera.domainmotif method)": [[818, "pypath.internals.intera.DomainMotif.get_line"]], "key() (pypath.internals.intera.domainmotif method)": [[818, "pypath.internals.intera.DomainMotif.key"]], "interface (class in pypath.internals.intera)": [[819, "pypath.internals.intera.Interface"]], "__init__() (pypath.internals.intera.interface method)": [[819, "pypath.internals.intera.Interface.__init__"]], "add_residues() (pypath.internals.intera.interface method)": [[819, "pypath.internals.intera.Interface.add_residues"]], "bond_types() (pypath.internals.intera.interface method)": [[819, "pypath.internals.intera.Interface.bond_types"]], "get_bonds() (pypath.internals.intera.interface method)": [[819, "pypath.internals.intera.Interface.get_bonds"]], "numof_residues() (pypath.internals.intera.interface method)": [[819, "pypath.internals.intera.Interface.numof_residues"]], "motif (class in pypath.internals.intera)": [[820, "pypath.internals.intera.Motif"]], "__init__() (pypath.internals.intera.motif method)": [[820, "pypath.internals.intera.Motif.__init__"]], "ptm (class in pypath.internals.intera)": [[821, "pypath.internals.intera.Ptm"]], "__init__() (pypath.internals.intera.ptm method)": [[821, "pypath.internals.intera.Ptm.__init__"]], "regulation (class in pypath.internals.intera)": [[822, "pypath.internals.intera.Regulation"]], "__init__() (pypath.internals.intera.regulation method)": [[822, "pypath.internals.intera.Regulation.__init__"]], "residue (class in pypath.internals.intera)": [[823, "pypath.internals.intera.Residue"]], "__init__() (pypath.internals.intera.residue method)": [[823, "pypath.internals.intera.Residue.__init__"]], "pypath.internals.license": [[824, "module-pypath.internals.license"]], "license (class in pypath.internals.license)": [[825, "pypath.internals.license.License"]], "__init__() (pypath.internals.license.license method)": [[825, "pypath.internals.license.License.__init__"]], "enables() (pypath.internals.license.license method)": [[825, "pypath.internals.license.License.enables"]], "licenseattrib (class in pypath.internals.license)": [[826, "pypath.internals.license.LicenseAttrib"]], "__init__() (pypath.internals.license.licenseattrib method)": [[826, "pypath.internals.license.LicenseAttrib.__init__"]], "check_level() (pypath.internals.license.licenseattrib class method)": [[826, "pypath.internals.license.LicenseAttrib.check_level"]], "int_to_level() (pypath.internals.license.licenseattrib class method)": [[826, "pypath.internals.license.LicenseAttrib.int_to_level"]], "level_to_int() (pypath.internals.license.licenseattrib class method)": [[826, "pypath.internals.license.LicenseAttrib.level_to_int"]], "to_int() (pypath.internals.license.licenseattrib method)": [[826, "pypath.internals.license.LicenseAttrib.to_int"]], "licensefeature (class in pypath.internals.license)": [[827, "pypath.internals.license.LicenseFeature"]], "__init__() (pypath.internals.license.licensefeature method)": [[827, "pypath.internals.license.LicenseFeature.__init__"]], "check_level() (pypath.internals.license.licensefeature class method)": [[827, "pypath.internals.license.LicenseFeature.check_level"]], "int_to_level() (pypath.internals.license.licensefeature class method)": [[827, "pypath.internals.license.LicenseFeature.int_to_level"]], "level_to_int() (pypath.internals.license.licensefeature class method)": [[827, "pypath.internals.license.LicenseFeature.level_to_int"]], "to_int() (pypath.internals.license.licensefeature method)": [[827, "pypath.internals.license.LicenseFeature.to_int"]], "licensepurpose (class in pypath.internals.license)": [[828, "pypath.internals.license.LicensePurpose"]], "__init__() (pypath.internals.license.licensepurpose method)": [[828, "pypath.internals.license.LicensePurpose.__init__"]], "check_level() (pypath.internals.license.licensepurpose class method)": [[828, "pypath.internals.license.LicensePurpose.check_level"]], "int_to_level() (pypath.internals.license.licensepurpose class method)": [[828, "pypath.internals.license.LicensePurpose.int_to_level"]], "level_to_int() (pypath.internals.license.licensepurpose class method)": [[828, "pypath.internals.license.LicensePurpose.level_to_int"]], "to_int() (pypath.internals.license.licensepurpose method)": [[828, "pypath.internals.license.LicensePurpose.to_int"]], "licensesharing (class in pypath.internals.license)": [[829, "pypath.internals.license.LicenseSharing"]], "__init__() (pypath.internals.license.licensesharing method)": [[829, "pypath.internals.license.LicenseSharing.__init__"]], "check_level() (pypath.internals.license.licensesharing class method)": [[829, "pypath.internals.license.LicenseSharing.check_level"]], "int_to_level() (pypath.internals.license.licensesharing class method)": [[829, "pypath.internals.license.LicenseSharing.int_to_level"]], "level_to_int() (pypath.internals.license.licensesharing class method)": [[829, "pypath.internals.license.LicenseSharing.level_to_int"]], "to_int() (pypath.internals.license.licensesharing method)": [[829, "pypath.internals.license.LicenseSharing.to_int"]], "pypath.internals.maps": [[830, "module-pypath.internals.maps"]], "pypath.internals.refs": [[831, "module-pypath.internals.refs"]], "reference (class in pypath.internals.refs)": [[832, "pypath.internals.refs.Reference"]], "__init__() (pypath.internals.refs.reference method)": [[832, "pypath.internals.refs.Reference.__init__"]], "get_pubmed_data() (in module pypath.internals.refs)": [[833, "pypath.internals.refs.get_pubmed_data"]], "pypath.internals.resource": [[834, "module-pypath.internals.resource"]], "abstractresource (class in pypath.internals.resource)": [[835, "pypath.internals.resource.AbstractResource"]], "__init__() (pypath.internals.resource.abstractresource method)": [[835, "pypath.internals.resource.AbstractResource.__init__"]], "load_data() (pypath.internals.resource.abstractresource method)": [[835, "pypath.internals.resource.AbstractResource.load_data"]], "process() (pypath.internals.resource.abstractresource method)": [[835, "pypath.internals.resource.AbstractResource.process"]], "set_method() (pypath.internals.resource.abstractresource method)": [[835, "pypath.internals.resource.AbstractResource.set_method"]], "enzymesubstrateresource (class in pypath.internals.resource)": [[836, "pypath.internals.resource.EnzymeSubstrateResource"]], "__init__() (pypath.internals.resource.enzymesubstrateresource method)": [[836, "pypath.internals.resource.EnzymeSubstrateResource.__init__"]], "get_via() (pypath.internals.resource.enzymesubstrateresource method)": [[836, "pypath.internals.resource.EnzymeSubstrateResource.get_via"]], "enzymesubstrateresourcekey (class in pypath.internals.resource)": [[837, "pypath.internals.resource.EnzymeSubstrateResourceKey"]], "__init__() (pypath.internals.resource.enzymesubstrateresourcekey method)": [[837, "pypath.internals.resource.EnzymeSubstrateResourceKey.__init__"]], "count() (pypath.internals.resource.enzymesubstrateresourcekey method)": [[837, "pypath.internals.resource.EnzymeSubstrateResourceKey.count"]], "data_type (pypath.internals.resource.enzymesubstrateresourcekey attribute)": [[837, "pypath.internals.resource.EnzymeSubstrateResourceKey.data_type"]], "index() (pypath.internals.resource.enzymesubstrateresourcekey method)": [[837, "pypath.internals.resource.EnzymeSubstrateResourceKey.index"]], "name (pypath.internals.resource.enzymesubstrateresourcekey attribute)": [[837, "pypath.internals.resource.EnzymeSubstrateResourceKey.name"]], "via (pypath.internals.resource.enzymesubstrateresourcekey attribute)": [[837, "pypath.internals.resource.EnzymeSubstrateResourceKey.via"]], "networkresource (class in pypath.internals.resource)": [[838, "pypath.internals.resource.NetworkResource"]], "__init__() (pypath.internals.resource.networkresource method)": [[838, "pypath.internals.resource.NetworkResource.__init__"]], "networkresourcekey (class in pypath.internals.resource)": [[839, "pypath.internals.resource.NetworkResourceKey"]], "__init__() (pypath.internals.resource.networkresourcekey method)": [[839, "pypath.internals.resource.NetworkResourceKey.__init__"]], "count() (pypath.internals.resource.networkresourcekey method)": [[839, "pypath.internals.resource.NetworkResourceKey.count"]], "data_model (pypath.internals.resource.networkresourcekey attribute)": [[839, "pypath.internals.resource.NetworkResourceKey.data_model"]], "data_type (pypath.internals.resource.networkresourcekey attribute)": [[839, "pypath.internals.resource.NetworkResourceKey.data_type"]], "index() (pypath.internals.resource.networkresourcekey method)": [[839, "pypath.internals.resource.NetworkResourceKey.index"]], "interaction_type (pypath.internals.resource.networkresourcekey attribute)": [[839, "pypath.internals.resource.NetworkResourceKey.interaction_type"]], "label (pypath.internals.resource.networkresourcekey property)": [[839, "pypath.internals.resource.NetworkResourceKey.label"]], "last (pypath.internals.resource.networkresourcekey property)": [[839, "pypath.internals.resource.NetworkResourceKey.last"]], "name (pypath.internals.resource.networkresourcekey attribute)": [[839, "pypath.internals.resource.NetworkResourceKey.name"]], "via (pypath.internals.resource.networkresourcekey attribute)": [[839, "pypath.internals.resource.NetworkResourceKey.via"]], "resourceattributes (class in pypath.internals.resource)": [[840, "pypath.internals.resource.ResourceAttributes"]], "__init__() (pypath.internals.resource.resourceattributes method)": [[840, "pypath.internals.resource.ResourceAttributes.__init__"]], "pypath.legacy": [[841, "module-pypath.legacy"]], "pypath.legacy.db_categories": [[842, "module-pypath.legacy.db_categories"]], "get_categories() (in module pypath.legacy.db_categories)": [[843, "pypath.legacy.db_categories.get_categories"]], "get_category() (in module pypath.legacy.db_categories)": [[844, "pypath.legacy.db_categories.get_category"]], "log() (in module pypath)": [[845, "pypath.log"]], "pypath.obsolete": [[846, "module-pypath.obsolete"]], "pypath.obsolete.colorgen": [[847, "module-pypath.obsolete.colorgen"]], "bias() (in module pypath.obsolete.colorgen)": [[848, "pypath.obsolete.colorgen.bias"]], "colormix() (in module pypath.obsolete.colorgen)": [[849, "pypath.obsolete.colorgen.colormix"]], "dec2hex() (in module pypath.obsolete.colorgen)": [[850, "pypath.obsolete.colorgen.dec2hex"]], "embl_colors() (in module pypath.obsolete.colorgen)": [[851, "pypath.obsolete.colorgen.embl_colors"]], "genhsv() (in module pypath.obsolete.colorgen)": [[852, "pypath.obsolete.colorgen.genhsv"]], "genrgb() (in module pypath.obsolete.colorgen)": [[853, "pypath.obsolete.colorgen.genrgb"]], "getfracs() (in module pypath.obsolete.colorgen)": [[854, "pypath.obsolete.colorgen.getfracs"]], "gethexrgbs() (in module pypath.obsolete.colorgen)": [[855, "pypath.obsolete.colorgen.gethexrgbs"]], "gethsvs() (in module pypath.obsolete.colorgen)": [[856, "pypath.obsolete.colorgen.gethsvs"]], "getrgbs() (in module pypath.obsolete.colorgen)": [[857, "pypath.obsolete.colorgen.getrgbs"]], "hex2dec() (in module pypath.obsolete.colorgen)": [[858, "pypath.obsolete.colorgen.hex2dec"]], "hex2rgb() (in module pypath.obsolete.colorgen)": [[859, "pypath.obsolete.colorgen.hex2rgb"]], "read_palette() (in module pypath.obsolete.colorgen)": [[860, "pypath.obsolete.colorgen.read_palette"]], "rgb1() (in module pypath.obsolete.colorgen)": [[861, "pypath.obsolete.colorgen.rgb1"]], "rgb256() (in module pypath.obsolete.colorgen)": [[862, "pypath.obsolete.colorgen.rgb256"]], "rgb2hex() (in module pypath.obsolete.colorgen)": [[863, "pypath.obsolete.colorgen.rgb2hex"]], "zenos_dichotomy() (in module pypath.obsolete.colorgen)": [[864, "pypath.obsolete.colorgen.zenos_dichotomy"]], "pypath.obsolete.enrich": [[865, "module-pypath.obsolete.enrich"]], "enrichment (class in pypath.obsolete.enrich)": [[866, "pypath.obsolete.enrich.Enrichment"]], "__init__() (pypath.obsolete.enrich.enrichment method)": [[866, "pypath.obsolete.enrich.Enrichment.__init__"]], "enrichmentset (class in pypath.obsolete.enrich)": [[867, "pypath.obsolete.enrich.EnrichmentSet"]], "__init__() (pypath.obsolete.enrich.enrichmentset method)": [[867, "pypath.obsolete.enrich.EnrichmentSet.__init__"]], "pypath.obsolete.gsea": [[868, "module-pypath.obsolete.gsea"]], "gsea (class in pypath.obsolete.gsea)": [[869, "pypath.obsolete.gsea.GSEA"]], "__init__() (pypath.obsolete.gsea.gsea method)": [[869, "pypath.obsolete.gsea.GSEA.__init__"]], "gseabinaryenrichmentset (class in pypath.obsolete.gsea)": [[870, "pypath.obsolete.gsea.GSEABinaryEnrichmentSet"]], "__init__() (pypath.obsolete.gsea.gseabinaryenrichmentset method)": [[870, "pypath.obsolete.gsea.GSEABinaryEnrichmentSet.__init__"]], "pypath.obsolete.linkcomm": [[871, "module-pypath.obsolete.linkcomm"]], "dc() (in module pypath.obsolete.linkcomm)": [[872, "pypath.obsolete.linkcomm.Dc"]], "hlc (class in pypath.obsolete.linkcomm)": [[873, "pypath.obsolete.linkcomm.HLC"]], "__init__() (pypath.obsolete.linkcomm.hlc method)": [[873, "pypath.obsolete.linkcomm.HLC.__init__"]], "read_edgelist_unweighted() (in module pypath.obsolete.linkcomm)": [[874, "pypath.obsolete.linkcomm.read_edgelist_unweighted"]], "read_edgelist_weighted() (in module pypath.obsolete.linkcomm)": [[875, "pypath.obsolete.linkcomm.read_edgelist_weighted"]], "similarities_unweighted() (in module pypath.obsolete.linkcomm)": [[876, "pypath.obsolete.linkcomm.similarities_unweighted"]], "similarities_weighted() (in module pypath.obsolete.linkcomm)": [[877, "pypath.obsolete.linkcomm.similarities_weighted"]], "swap() (in module pypath.obsolete.linkcomm)": [[878, "pypath.obsolete.linkcomm.swap"]], "write_dendro() (in module pypath.obsolete.linkcomm)": [[879, "pypath.obsolete.linkcomm.write_dendro"]], "write_edge2cid() (in module pypath.obsolete.linkcomm)": [[880, "pypath.obsolete.linkcomm.write_edge2cid"]], "pypath.omnipath": [[881, "module-pypath.omnipath"]], "pypath.omnipath.app": [[882, "module-pypath.omnipath.app"]], "databasemanager (class in pypath.omnipath.app)": [[883, "pypath.omnipath.app.DatabaseManager"]], "__init__() (pypath.omnipath.app.databasemanager method)": [[883, "pypath.omnipath.app.DatabaseManager.__init__"]], "build() (pypath.omnipath.app.databasemanager method)": [[883, "pypath.omnipath.app.DatabaseManager.build"]], "build_dataset() (pypath.omnipath.app.databasemanager method)": [[883, "pypath.omnipath.app.DatabaseManager.build_dataset"]], "compile_table() (pypath.omnipath.app.databasemanager method)": [[883, "pypath.omnipath.app.DatabaseManager.compile_table"]], "compile_tables() (pypath.omnipath.app.databasemanager method)": [[883, "pypath.omnipath.app.DatabaseManager.compile_tables"]], "dataset_dependencies() (pypath.omnipath.app.databasemanager method)": [[883, "pypath.omnipath.app.DatabaseManager.dataset_dependencies"]], "define_dataset() (pypath.omnipath.app.databasemanager method)": [[883, "pypath.omnipath.app.DatabaseManager.define_dataset"]], "ensure_dataset() (pypath.omnipath.app.databasemanager method)": [[883, "pypath.omnipath.app.DatabaseManager.ensure_dataset"]], "ensure_dirs() (pypath.omnipath.app.databasemanager method)": [[883, "pypath.omnipath.app.DatabaseManager.ensure_dirs"]], "ensure_module() (pypath.omnipath.app.databasemanager method)": [[883, "pypath.omnipath.app.DatabaseManager.ensure_module"]], "foreach_dataset() (pypath.omnipath.app.databasemanager method)": [[883, "pypath.omnipath.app.DatabaseManager.foreach_dataset"]], "get_args_curated() (pypath.omnipath.app.databasemanager method)": [[883, "pypath.omnipath.app.DatabaseManager.get_args_curated"]], "get_args_lncrna_mrna() (pypath.omnipath.app.databasemanager method)": [[883, "pypath.omnipath.app.DatabaseManager.get_args_lncrna_mrna"]], "get_args_mirna_mrna() (pypath.omnipath.app.databasemanager method)": [[883, "pypath.omnipath.app.DatabaseManager.get_args_mirna_mrna"]], "get_args_small_molecule() (pypath.omnipath.app.databasemanager method)": [[883, "pypath.omnipath.app.DatabaseManager.get_args_small_molecule"]], "get_args_tf_mirna() (pypath.omnipath.app.databasemanager method)": [[883, "pypath.omnipath.app.DatabaseManager.get_args_tf_mirna"]], "get_args_tf_target() (pypath.omnipath.app.databasemanager method)": [[883, "pypath.omnipath.app.DatabaseManager.get_args_tf_target"]], "get_build_args() (pypath.omnipath.app.databasemanager method)": [[883, "pypath.omnipath.app.DatabaseManager.get_build_args"]], "get_db() (pypath.omnipath.app.databasemanager method)": [[883, "pypath.omnipath.app.DatabaseManager.get_db"]], "get_param() (pypath.omnipath.app.databasemanager method)": [[883, "pypath.omnipath.app.DatabaseManager.get_param"]], "load_dataset() (pypath.omnipath.app.databasemanager method)": [[883, "pypath.omnipath.app.DatabaseManager.load_dataset"]], "network_df() (pypath.omnipath.app.databasemanager method)": [[883, "pypath.omnipath.app.DatabaseManager.network_df"]], "network_df_by_source() (pypath.omnipath.app.databasemanager method)": [[883, "pypath.omnipath.app.DatabaseManager.network_df_by_source"]], "pickle_exists() (pypath.omnipath.app.databasemanager method)": [[883, "pypath.omnipath.app.DatabaseManager.pickle_exists"]], "pickle_path() (pypath.omnipath.app.databasemanager method)": [[883, "pypath.omnipath.app.DatabaseManager.pickle_path"]], "reload() (pypath.omnipath.app.databasemanager method)": [[883, "pypath.omnipath.app.DatabaseManager.reload"]], "reload_module() (pypath.omnipath.app.databasemanager method)": [[883, "pypath.omnipath.app.DatabaseManager.reload_module"]], "remove_all() (pypath.omnipath.app.databasemanager method)": [[883, "pypath.omnipath.app.DatabaseManager.remove_all"]], "remove_db() (pypath.omnipath.app.databasemanager method)": [[883, "pypath.omnipath.app.DatabaseManager.remove_db"]], "set_network() (pypath.omnipath.app.databasemanager method)": [[883, "pypath.omnipath.app.DatabaseManager.set_network"]], "table_path() (pypath.omnipath.app.databasemanager method)": [[883, "pypath.omnipath.app.DatabaseManager.table_path"]], "pypath.omnipath.databases": [[884, "module-pypath.omnipath.databases"]], "build() (in module pypath.omnipath.databases)": [[885, "pypath.omnipath.databases.build"]], "class_and_param() (in module pypath.omnipath.databases)": [[886, "pypath.omnipath.databases.class_and_param"]], "pypath.omnipath.databases.define": [[887, "module-pypath.omnipath.databases.define"]], "databaseclass (class in pypath.omnipath.databases.define)": [[888, "pypath.omnipath.databases.define.DatabaseClass"]], "__init__() (pypath.omnipath.databases.define.databaseclass method)": [[888, "pypath.omnipath.databases.define.DatabaseClass.__init__"]], "databasedefinition (class in pypath.omnipath.databases.define)": [[889, "pypath.omnipath.databases.define.DatabaseDefinition"]], "__init__() (pypath.omnipath.databases.define.databasedefinition method)": [[889, "pypath.omnipath.databases.define.DatabaseDefinition.__init__"]], "from_dict() (pypath.omnipath.databases.define.databasedefinition class method)": [[889, "pypath.omnipath.databases.define.DatabaseDefinition.from_dict"]], "from_json() (pypath.omnipath.databases.define.databasedefinition class method)": [[889, "pypath.omnipath.databases.define.DatabaseDefinition.from_json"]], "databasedefinitionmanager (class in pypath.omnipath.databases.define)": [[890, "pypath.omnipath.databases.define.DatabaseDefinitionManager"]], "__init__() (pypath.omnipath.databases.define.databasedefinitionmanager method)": [[890, "pypath.omnipath.databases.define.DatabaseDefinitionManager.__init__"]], "build() (pypath.omnipath.databases.define.databasedefinitionmanager method)": [[890, "pypath.omnipath.databases.define.DatabaseDefinitionManager.build"]], "class_and_param() (pypath.omnipath.databases.define.databasedefinitionmanager method)": [[890, "pypath.omnipath.databases.define.DatabaseDefinitionManager.class_and_param"]], "get_manager() (in module pypath.omnipath.databases)": [[891, "pypath.omnipath.databases.get_manager"]], "init_manager() (in module pypath.omnipath.databases)": [[892, "pypath.omnipath.databases.init_manager"]], "pypath.omnipath.export": [[893, "module-pypath.omnipath.export"]], "export (class in pypath.omnipath.export)": [[894, "pypath.omnipath.export.Export"]], "__init__() (pypath.omnipath.export.export method)": [[894, "pypath.omnipath.export.Export.__init__"]], "add_extra_fields() (pypath.omnipath.export.export method)": [[894, "pypath.omnipath.export.Export.add_extra_fields"]], "generic_attr_processor() (pypath.omnipath.export.export static method)": [[894, "pypath.omnipath.export.Export.generic_attr_processor"]], "get_header() (pypath.omnipath.export.export method)": [[894, "pypath.omnipath.export.Export.get_header"]], "make_df() (pypath.omnipath.export.export method)": [[894, "pypath.omnipath.export.Export.make_df"]], "sources_table() (pypath.omnipath.export.export class method)": [[894, "pypath.omnipath.export.Export.sources_table"]], "write_tab() (pypath.omnipath.export.export method)": [[894, "pypath.omnipath.export.Export.write_tab"]], "init() (in module pypath.omnipath)": [[895, "pypath.omnipath.init"]], "pypath.omnipath.param": [[896, "module-pypath.omnipath.param"]], "curated_ppi_resources() (in module pypath.omnipath.param)": [[897, "pypath.omnipath.param.curated_ppi_resources"]], "tf_target_resources() (in module pypath.omnipath.param)": [[898, "pypath.omnipath.param.tf_target_resources"]], "pypath.omnipath.server": [[899, "module-pypath.omnipath.server"]], "pypath.omnipath.server.build": [[900, "module-pypath.omnipath.server.build"]], "webservicetables (class in pypath.omnipath.server.build)": [[901, "pypath.omnipath.server.build.WebserviceTables"]], "__init__() (pypath.omnipath.server.build.webservicetables method)": [[901, "pypath.omnipath.server.build.WebserviceTables.__init__"]], "pypath.omnipath.server.generate_about_page": [[902, "module-pypath.omnipath.server.generate_about_page"]], "export_licenses() (in module pypath.omnipath.server.generate_about_page)": [[903, "pypath.omnipath.server.generate_about_page.export_licenses"]], "generate_about_html() (in module pypath.omnipath.server.generate_about_page)": [[904, "pypath.omnipath.server.generate_about_page.generate_about_html"]], "resource_list_latex() (in module pypath.omnipath.server.generate_about_page)": [[905, "pypath.omnipath.server.generate_about_page.resource_list_latex"]], "write_html() (in module pypath.omnipath.server.generate_about_page)": [[906, "pypath.omnipath.server.generate_about_page.write_html"]], "pypath.resources": [[907, "module-pypath.resources"]], "pypath.resources.controller": [[908, "module-pypath.resources.controller"]], "resourcecontroller (class in pypath.resources.controller)": [[909, "pypath.resources.controller.ResourceController"]], "__init__() (pypath.resources.controller.resourcecontroller method)": [[909, "pypath.resources.controller.ResourceController.__init__"]], "update() (pypath.resources.controller.resourcecontroller method)": [[909, "pypath.resources.controller.ResourceController.update"]], "pypath.resources.data": [[910, "module-pypath.resources.data"]], "pypath.resources.data_formats": [[911, "module-pypath.resources.data_formats"]], "root (in module pypath.resources.data_formats)": [[912, "pypath.resources.data_formats.ROOT"]], "activity_flow (in module pypath.resources.data_formats)": [[913, "pypath.resources.data_formats.activity_flow"]], "enzyme_substrate (in module pypath.resources.data_formats)": [[914, "pypath.resources.data_formats.enzyme_substrate"]], "interaction (in module pypath.resources.data_formats)": [[915, "pypath.resources.data_formats.interaction"]], "interaction_htp (in module pypath.resources.data_formats)": [[916, "pypath.resources.data_formats.interaction_htp"]], "obsolate (in module pypath.resources.data_formats)": [[917, "pypath.resources.data_formats.obsolate"]], "pathway_bad (in module pypath.resources.data_formats)": [[918, "pypath.resources.data_formats.pathway_bad"]], "reaction_pc (in module pypath.resources.data_formats)": [[919, "pypath.resources.data_formats.reaction_pc"]], "transcription_deprecated (in module pypath.resources.data_formats)": [[920, "pypath.resources.data_formats.transcription_deprecated"]], "transcription_onebyone (in module pypath.resources.data_formats)": [[921, "pypath.resources.data_formats.transcription_onebyone"]], "pypath.resources.descriptions": [[922, "module-pypath.resources.descriptions"]], "export_licenses() (in module pypath.resources.descriptions)": [[923, "pypath.resources.descriptions.export_licenses"]], "gen_html() (in module pypath.resources.descriptions)": [[924, "pypath.resources.descriptions.gen_html"]], "resource_list_latex() (in module pypath.resources.descriptions)": [[925, "pypath.resources.descriptions.resource_list_latex"]], "write_html() (in module pypath.resources.descriptions)": [[926, "pypath.resources.descriptions.write_html"]], "get_controller() (in module pypath.resources)": [[927, "pypath.resources.get_controller"]], "pypath.resources.licenses": [[928, "module-pypath.resources.licenses"]], "licenses (class in pypath.resources.licenses)": [[929, "pypath.resources.licenses.Licenses"]], "__init__() (pypath.resources.licenses.licenses method)": [[929, "pypath.resources.licenses.Licenses.__init__"]], "pypath.resources.network": [[930, "module-pypath.resources.network"]], "dorothea_expand_levels() (in module pypath.resources.network)": [[931, "pypath.resources.network.dorothea_expand_levels"]], "pypath.resources.urls": [[932, "module-pypath.resources.urls"]], "pypath.share": [[933, "module-pypath.share"]], "pypath.share.cache": [[934, "module-pypath.share.cache"]], "cache_item() (in module pypath.share.cache)": [[935, "pypath.share.cache.cache_item"]], "get_cachedir() (in module pypath.share.cache)": [[936, "pypath.share.cache.get_cachedir"]], "pypath.share.common": [[937, "module-pypath.share.common"]], "add_to_list() (in module pypath.share.common)": [[938, "pypath.share.common.add_to_list"]], "add_to_set() (in module pypath.share.common)": [[939, "pypath.share.common.add_to_set"]], "at_least_in() (in module pypath.share.common)": [[940, "pypath.share.common.at_least_in"]], "clean_dict() (in module pypath.share.common)": [[941, "pypath.share.common.clean_dict"]], "combine_attrs() (in module pypath.share.common)": [[942, "pypath.share.common.combine_attrs"]], "console() (in module pypath.share.common)": [[943, "pypath.share.common.console"]], "decode() (in module pypath.share.common)": [[944, "pypath.share.common.decode"]], "del_empty() (in module pypath.share.common)": [[945, "pypath.share.common.del_empty"]], "df_memory_usage() (in module pypath.share.common)": [[946, "pypath.share.common.df_memory_usage"]], "dict_collapse_keys() (in module pypath.share.common)": [[947, "pypath.share.common.dict_collapse_keys"]], "dict_counts() (in module pypath.share.common)": [[948, "pypath.share.common.dict_counts"]], "dict_diff() (in module pypath.share.common)": [[949, "pypath.share.common.dict_diff"]], "dict_expand_keys() (in module pypath.share.common)": [[950, "pypath.share.common.dict_expand_keys"]], "dict_percent() (in module pypath.share.common)": [[951, "pypath.share.common.dict_percent"]], "dict_set_path() (in module pypath.share.common)": [[952, "pypath.share.common.dict_set_path"]], "dict_set_percent() (in module pypath.share.common)": [[953, "pypath.share.common.dict_set_percent"]], "dict_str() (in module pypath.share.common)": [[954, "pypath.share.common.dict_str"]], "dict_subtotals() (in module pypath.share.common)": [[955, "pypath.share.common.dict_subtotals"]], "dict_sym_diff() (in module pypath.share.common)": [[956, "pypath.share.common.dict_sym_diff"]], "dict_union() (in module pypath.share.common)": [[957, "pypath.share.common.dict_union"]], "eq() (in module pypath.share.common)": [[958, "pypath.share.common.eq"]], "filtr() (in module pypath.share.common)": [[959, "pypath.share.common.filtr"]], "first() (in module pypath.share.common)": [[960, "pypath.share.common.first"]], "flat_list() (in module pypath.share.common)": [[961, "pypath.share.common.flat_list"]], "float_or_nan() (in module pypath.share.common)": [[962, "pypath.share.common.float_or_nan"]], "gen_session_id() (in module pypath.share.common)": [[963, "pypath.share.common.gen_session_id"]], "get() (in module pypath.share.common)": [[964, "pypath.share.common.get"]], "get_args() (in module pypath.share.common)": [[965, "pypath.share.common.get_args"]], "is_float() (in module pypath.share.common)": [[966, "pypath.share.common.is_float"]], "is_int() (in module pypath.share.common)": [[967, "pypath.share.common.is_int"]], "is_str() (in module pypath.share.common)": [[968, "pypath.share.common.is_str"]], "jaccard_index() (in module pypath.share.common)": [[969, "pypath.share.common.jaccard_index"]], "join_dicts() (in module pypath.share.common)": [[970, "pypath.share.common.join_dicts"]], "latex_table() (in module pypath.share.common)": [[971, "pypath.share.common.latex_table"]], "match() (in module pypath.share.common)": [[972, "pypath.share.common.match"]], "maybe_in_dict() (in module pypath.share.common)": [[973, "pypath.share.common.maybe_in_dict"]], "md5() (in module pypath.share.common)": [[974, "pypath.share.common.md5"]], "merge_dicts() (in module pypath.share.common)": [[975, "pypath.share.common.merge_dicts"]], "n_shared_elements() (in module pypath.share.common)": [[976, "pypath.share.common.n_shared_elements"]], "n_shared_foreach() (in module pypath.share.common)": [[977, "pypath.share.common.n_shared_foreach"]], "n_shared_total() (in module pypath.share.common)": [[978, "pypath.share.common.n_shared_total"]], "n_shared_unique_foreach() (in module pypath.share.common)": [[979, "pypath.share.common.n_shared_unique_foreach"]], "n_unique_elements() (in module pypath.share.common)": [[980, "pypath.share.common.n_unique_elements"]], "n_unique_foreach() (in module pypath.share.common)": [[981, "pypath.share.common.n_unique_foreach"]], "n_unique_total() (in module pypath.share.common)": [[982, "pypath.share.common.n_unique_total"]], "negate() (in module pypath.share.common)": [[983, "pypath.share.common.negate"]], "none_or_len() (in module pypath.share.common)": [[984, "pypath.share.common.none_or_len"]], "paginate() (in module pypath.share.common)": [[985, "pypath.share.common.paginate"]], "prefix() (in module pypath.share.common)": [[986, "pypath.share.common.prefix"]], "print_table() (in module pypath.share.common)": [[987, "pypath.share.common.print_table"]], "re_safe_groups() (in module pypath.share.common)": [[988, "pypath.share.common.re_safe_groups"]], "remove_prefix() (in module pypath.share.common)": [[989, "pypath.share.common.remove_prefix"]], "rotate() (in module pypath.share.common)": [[990, "pypath.share.common.rotate"]], "sets_to_sorted_lists() (in module pypath.share.common)": [[991, "pypath.share.common.sets_to_sorted_lists"]], "sfirst() (in module pypath.share.common)": [[992, "pypath.share.common.sfirst"]], "shared_elements() (in module pypath.share.common)": [[993, "pypath.share.common.shared_elements"]], "shared_foreach() (in module pypath.share.common)": [[994, "pypath.share.common.shared_foreach"]], "shared_total() (in module pypath.share.common)": [[995, "pypath.share.common.shared_total"]], "shared_unique() (in module pypath.share.common)": [[996, "pypath.share.common.shared_unique"]], "shared_unique_foreach() (in module pypath.share.common)": [[997, "pypath.share.common.shared_unique_foreach"]], "shared_unique_total() (in module pypath.share.common)": [[998, "pypath.share.common.shared_unique_total"]], "__init__() (pypath.share.common.silent method)": [[999, "pypath.share.common.silent.__init__"]], "silent (class in pypath.share.common)": [[999, "pypath.share.common.silent"]], "simpson_index() (in module pypath.share.common)": [[1000, "pypath.share.common.simpson_index"]], "simpson_index_counts() (in module pypath.share.common)": [[1001, "pypath.share.common.simpson_index_counts"]], "something() (in module pypath.share.common)": [[1002, "pypath.share.common.something"]], "sorensen_index() (in module pypath.share.common)": [[1003, "pypath.share.common.sorensen_index"]], "suffix() (in module pypath.share.common)": [[1004, "pypath.share.common.suffix"]], "sum_dicts() (in module pypath.share.common)": [[1005, "pypath.share.common.sum_dicts"]], "swap_dict() (in module pypath.share.common)": [[1006, "pypath.share.common.swap_dict"]], "swap_dict_simple() (in module pypath.share.common)": [[1007, "pypath.share.common.swap_dict_simple"]], "swap_suffix() (in module pypath.share.common)": [[1008, "pypath.share.common.swap_suffix"]], "table_add_row_numbers() (in module pypath.share.common)": [[1009, "pypath.share.common.table_add_row_numbers"]], "table_format() (in module pypath.share.common)": [[1010, "pypath.share.common.table_format"]], "table_textwrap() (in module pypath.share.common)": [[1011, "pypath.share.common.table_textwrap"]], "to_list() (in module pypath.share.common)": [[1012, "pypath.share.common.to_list"]], "to_set() (in module pypath.share.common)": [[1013, "pypath.share.common.to_set"]], "try_bool() (in module pypath.share.common)": [[1014, "pypath.share.common.try_bool"]], "try_float() (in module pypath.share.common)": [[1015, "pypath.share.common.try_float"]], "tsv_table() (in module pypath.share.common)": [[1016, "pypath.share.common.tsv_table"]], "uniq_list() (in module pypath.share.common)": [[1017, "pypath.share.common.uniq_list"]], "uniq_list1() (in module pypath.share.common)": [[1018, "pypath.share.common.uniq_list1"]], "uniq_list2() (in module pypath.share.common)": [[1019, "pypath.share.common.uniq_list2"]], "uniq_ord_list() (in module pypath.share.common)": [[1020, "pypath.share.common.uniq_ord_list"]], "unique_elements() (in module pypath.share.common)": [[1021, "pypath.share.common.unique_elements"]], "unique_foreach() (in module pypath.share.common)": [[1022, "pypath.share.common.unique_foreach"]], "unique_list() (in module pypath.share.common)": [[1023, "pypath.share.common.unique_list"]], "unique_total() (in module pypath.share.common)": [[1024, "pypath.share.common.unique_total"]], "upper0() (in module pypath.share.common)": [[1025, "pypath.share.common.upper0"]], "values() (in module pypath.share.common)": [[1026, "pypath.share.common.values"]], "wcl() (in module pypath.share.common)": [[1027, "pypath.share.common.wcl"]], "wrap_truncate() (in module pypath.share.common)": [[1028, "pypath.share.common.wrap_truncate"]], "pypath.share.constants": [[1029, "module-pypath.share.constants"]], "pypath.share.curl": [[1030, "module-pypath.share.curl"]], "curl (class in pypath.share.curl)": [[1031, "pypath.share.curl.Curl"]], "__init__() (pypath.share.curl.curl method)": [[1031, "pypath.share.curl.Curl.__init__"]], "close() (pypath.share.curl.curl method)": [[1031, "pypath.share.curl.Curl.close"]], "construct_binary_data() (pypath.share.curl.curl method)": [[1031, "pypath.share.curl.Curl.construct_binary_data"]], "extract() (pypath.share.curl.curl method)": [[1031, "pypath.share.curl.Curl.extract"]], "is_quoted() (pypath.share.curl.curl method)": [[1031, "pypath.share.curl.Curl.is_quoted"]], "open() (pypath.share.curl.curl method)": [[1031, "pypath.share.curl.Curl.open"]], "open_tgz() (pypath.share.curl.curl method)": [[1031, "pypath.share.curl.Curl.open_tgz"]], "set_binary_data() (pypath.share.curl.curl method)": [[1031, "pypath.share.curl.Curl.set_binary_data"]], "url_fix() (pypath.share.curl.curl method)": [[1031, "pypath.share.curl.Curl.url_fix"]], "fileopener (class in pypath.share.curl)": [[1032, "pypath.share.curl.FileOpener"]], "__init__() (pypath.share.curl.fileopener method)": [[1032, "pypath.share.curl.FileOpener.__init__"]], "extract() (pypath.share.curl.fileopener method)": [[1032, "pypath.share.curl.FileOpener.extract"]], "open() (pypath.share.curl.fileopener method)": [[1032, "pypath.share.curl.FileOpener.open"]], "open_tgz() (pypath.share.curl.fileopener method)": [[1032, "pypath.share.curl.FileOpener.open_tgz"]], "remotefile (class in pypath.share.curl)": [[1033, "pypath.share.curl.RemoteFile"]], "__init__() (pypath.share.curl.remotefile method)": [[1033, "pypath.share.curl.RemoteFile.__init__"]], "__init__() (pypath.share.curl.cache_delete_off method)": [[1034, "pypath.share.curl.cache_delete_off.__init__"]], "cache_delete_off (class in pypath.share.curl)": [[1034, "pypath.share.curl.cache_delete_off"]], "__init__() (pypath.share.curl.cache_delete_on method)": [[1035, "pypath.share.curl.cache_delete_on.__init__"]], "cache_delete_on (class in pypath.share.curl)": [[1035, "pypath.share.curl.cache_delete_on"]], "__init__() (pypath.share.curl.cache_off method)": [[1036, "pypath.share.curl.cache_off.__init__"]], "cache_off (class in pypath.share.curl)": [[1036, "pypath.share.curl.cache_off"]], "__init__() (pypath.share.curl.cache_on method)": [[1037, "pypath.share.curl.cache_on.__init__"]], "cache_on (class in pypath.share.curl)": [[1037, "pypath.share.curl.cache_on"]], "__init__() (pypath.share.curl.cache_print_off method)": [[1038, "pypath.share.curl.cache_print_off.__init__"]], "cache_print_off (class in pypath.share.curl)": [[1038, "pypath.share.curl.cache_print_off"]], "__init__() (pypath.share.curl.cache_print_on method)": [[1039, "pypath.share.curl.cache_print_on.__init__"]], "cache_print_on (class in pypath.share.curl)": [[1039, "pypath.share.curl.cache_print_on"]], "__init__() (pypath.share.curl.debug_off method)": [[1040, "pypath.share.curl.debug_off.__init__"]], "debug_off (class in pypath.share.curl)": [[1040, "pypath.share.curl.debug_off"]], "__init__() (pypath.share.curl.debug_on method)": [[1041, "pypath.share.curl.debug_on.__init__"]], "debug_on (class in pypath.share.curl)": [[1041, "pypath.share.curl.debug_on"]], "__init__() (pypath.share.curl.dryrun_off method)": [[1042, "pypath.share.curl.dryrun_off.__init__"]], "dryrun_off (class in pypath.share.curl)": [[1042, "pypath.share.curl.dryrun_off"]], "__init__() (pypath.share.curl.dryrun_on method)": [[1043, "pypath.share.curl.dryrun_on.__init__"]], "dryrun_on (class in pypath.share.curl)": [[1043, "pypath.share.curl.dryrun_on"]], "is_url() (in module pypath.share.curl)": [[1044, "pypath.share.curl.is_url"]], "__init__() (pypath.share.curl.preserve_off method)": [[1045, "pypath.share.curl.preserve_off.__init__"]], "preserve_off (class in pypath.share.curl)": [[1045, "pypath.share.curl.preserve_off"]], "__init__() (pypath.share.curl.preserve_on method)": [[1046, "pypath.share.curl.preserve_on.__init__"]], "preserve_on (class in pypath.share.curl)": [[1046, "pypath.share.curl.preserve_on"]], "pypath.share.log": [[1047, "module-pypath.share.log"]], "logger (class in pypath.share.log)": [[1048, "pypath.share.log.Logger"]], "__init__() (pypath.share.log.logger method)": [[1048, "pypath.share.log.Logger.__init__"]], "browse() (pypath.share.log.logger method)": [[1048, "pypath.share.log.Logger.browse"]], "close_logfile() (pypath.share.log.logger method)": [[1048, "pypath.share.log.Logger.close_logfile"]], "console() (pypath.share.log.logger method)": [[1048, "pypath.share.log.Logger.console"]], "flush() (pypath.share.log.logger method)": [[1048, "pypath.share.log.Logger.flush"]], "get_logdir() (pypath.share.log.logger method)": [[1048, "pypath.share.log.Logger.get_logdir"]], "label_message() (pypath.share.log.logger method)": [[1048, "pypath.share.log.Logger.label_message"]], "msg() (pypath.share.log.logger method)": [[1048, "pypath.share.log.Logger.msg"]], "open_logfile() (pypath.share.log.logger method)": [[1048, "pypath.share.log.Logger.open_logfile"]], "strftime() (pypath.share.log.logger method)": [[1048, "pypath.share.log.Logger.strftime"]], "timestamp() (pypath.share.log.logger class method)": [[1048, "pypath.share.log.Logger.timestamp"]], "timestamp_message() (pypath.share.log.logger method)": [[1048, "pypath.share.log.Logger.timestamp_message"]], "new_logger() (in module pypath.share.log)": [[1049, "pypath.share.log.new_logger"]], "pypath.share.progress": [[1050, "module-pypath.share.progress"]], "progress (class in pypath.share.progress)": [[1051, "pypath.share.progress.Progress"]], "__init__() (pypath.share.progress.progress method)": [[1051, "pypath.share.progress.Progress.__init__"]], "get_desc() (pypath.share.progress.progress method)": [[1051, "pypath.share.progress.Progress.get_desc"]], "init_tqdm() (pypath.share.progress.progress method)": [[1051, "pypath.share.progress.Progress.init_tqdm"]], "set_done() (pypath.share.progress.progress method)": [[1051, "pypath.share.progress.Progress.set_done"]], "set_status() (pypath.share.progress.progress method)": [[1051, "pypath.share.progress.Progress.set_status"]], "set_total() (pypath.share.progress.progress method)": [[1051, "pypath.share.progress.Progress.set_total"]], "step() (pypath.share.progress.progress method)": [[1051, "pypath.share.progress.Progress.step"]], "terminate() (pypath.share.progress.progress method)": [[1051, "pypath.share.progress.Progress.terminate"]], "pypath.share.session": [[1052, "module-pypath.share.session"]], "logger (class in pypath.share.session)": [[1053, "pypath.share.session.Logger"]], "__init__() (pypath.share.session.logger method)": [[1053, "pypath.share.session.Logger.__init__"]], "session (class in pypath.share.session)": [[1054, "pypath.share.session.Session"]], "__init__() (pypath.share.session.session method)": [[1054, "pypath.share.session.Session.__init__"]], "gen_session_id() (pypath.share.session.session static method)": [[1054, "pypath.share.session.Session.gen_session_id"]], "start_logger() (pypath.share.session.session method)": [[1054, "pypath.share.session.Session.start_logger"]], "get_log() (in module pypath.share.session)": [[1055, "pypath.share.session.get_log"]], "get_session() (in module pypath.share.session)": [[1056, "pypath.share.session.get_session"]], "new_session() (in module pypath.share.session)": [[1057, "pypath.share.session.new_session"]], "pypath.share.settings": [[1058, "module-pypath.share.settings"]], "settings (class in pypath.share.settings)": [[1059, "pypath.share.settings.Settings"]], "__init__() (pypath.share.settings.settings method)": [[1059, "pypath.share.settings.Settings.__init__"]], "context() (pypath.share.settings.settings method)": [[1059, "pypath.share.settings.Settings.context"]], "get() (pypath.share.settings.settings method)": [[1059, "pypath.share.settings.Settings.get"]], "get_default() (pypath.share.settings.settings method)": [[1059, "pypath.share.settings.Settings.get_default"]], "reset() (pypath.share.settings.settings method)": [[1059, "pypath.share.settings.Settings.reset"]], "reset_all() (pypath.share.settings.settings method)": [[1059, "pypath.share.settings.Settings.reset_all"]], "setup() (pypath.share.settings.settings method)": [[1059, "pypath.share.settings.Settings.setup"]], "context() (in module pypath.share.settings)": [[1060, "pypath.share.settings.context"]], "get() (in module pypath.share.settings)": [[1061, "pypath.share.settings.get"]], "setup() (in module pypath.share.settings)": [[1062, "pypath.share.settings.setup"]], "pypath.utils": [[1063, "module-pypath.utils"]], "pypath.utils.go": [[1064, "module-pypath.utils.go"]], "goannotation (class in pypath.utils.go)": [[1065, "pypath.utils.go.GOAnnotation"]], "__init__() (pypath.utils.go.goannotation method)": [[1065, "pypath.utils.go.GOAnnotation.__init__"]], "all_uniprots() (pypath.utils.go.goannotation method)": [[1065, "pypath.utils.go.GOAnnotation.all_uniprots"]], "expr_names_to_terms() (pypath.utils.go.goannotation method)": [[1065, "pypath.utils.go.GOAnnotation.expr_names_to_terms"]], "get_annot() (pypath.utils.go.goannotation method)": [[1065, "pypath.utils.go.GOAnnotation.get_annot"]], "get_annot_ancestors() (pypath.utils.go.goannotation method)": [[1065, "pypath.utils.go.GOAnnotation.get_annot_ancestors"]], "get_annots() (pypath.utils.go.goannotation method)": [[1065, "pypath.utils.go.GOAnnotation.get_annots"]], "get_annots_ancestors() (pypath.utils.go.goannotation method)": [[1065, "pypath.utils.go.GOAnnotation.get_annots_ancestors"]], "get_name() (pypath.utils.go.goannotation method)": [[1065, "pypath.utils.go.GOAnnotation.get_name"]], "get_term() (pypath.utils.go.goannotation method)": [[1065, "pypath.utils.go.GOAnnotation.get_term"]], "has_any_term() (pypath.utils.go.goannotation method)": [[1065, "pypath.utils.go.GOAnnotation.has_any_term"]], "has_term() (pypath.utils.go.goannotation method)": [[1065, "pypath.utils.go.GOAnnotation.has_term"]], "i_select_by_term() (pypath.utils.go.goannotation method)": [[1065, "pypath.utils.go.GOAnnotation.i_select_by_term"]], "reload() (pypath.utils.go.goannotation method)": [[1065, "pypath.utils.go.GOAnnotation.reload"]], "select() (pypath.utils.go.goannotation method)": [[1065, "pypath.utils.go.GOAnnotation.select"]], "select_by_all() (pypath.utils.go.goannotation method)": [[1065, "pypath.utils.go.GOAnnotation.select_by_all"]], "select_by_expr() (pypath.utils.go.goannotation method)": [[1065, "pypath.utils.go.GOAnnotation.select_by_expr"]], "select_by_expr_terms() (pypath.utils.go.goannotation method)": [[1065, "pypath.utils.go.GOAnnotation.select_by_expr_terms"]], "select_by_name() (pypath.utils.go.goannotation method)": [[1065, "pypath.utils.go.GOAnnotation.select_by_name"]], "select_by_term() (pypath.utils.go.goannotation method)": [[1065, "pypath.utils.go.GOAnnotation.select_by_term"]], "gocustomannotation (class in pypath.utils.go)": [[1066, "pypath.utils.go.GOCustomAnnotation"]], "__init__() (pypath.utils.go.gocustomannotation method)": [[1066, "pypath.utils.go.GOCustomAnnotation.__init__"]], "get_annotation() (pypath.utils.go.gocustomannotation method)": [[1066, "pypath.utils.go.GOCustomAnnotation.get_annotation"]], "get_annotations() (pypath.utils.go.gocustomannotation method)": [[1066, "pypath.utils.go.GOCustomAnnotation.get_annotations"]], "process_categories() (pypath.utils.go.gocustomannotation method)": [[1066, "pypath.utils.go.GOCustomAnnotation.process_categories"]], "reload() (pypath.utils.go.gocustomannotation method)": [[1066, "pypath.utils.go.GOCustomAnnotation.reload"]], "geneontology (class in pypath.utils.go)": [[1067, "pypath.utils.go.GeneOntology"]], "__init__() (pypath.utils.go.geneontology method)": [[1067, "pypath.utils.go.GeneOntology.__init__"]], "all_from_aspect() (pypath.utils.go.geneontology method)": [[1067, "pypath.utils.go.GeneOntology.all_from_aspect"]], "aspect_from_name() (pypath.utils.go.geneontology method)": [[1067, "pypath.utils.go.GeneOntology.aspect_from_name"]], "flatten() (pypath.utils.go.geneontology method)": [[1067, "pypath.utils.go.GeneOntology.flatten"]], "get_all_ancestors() (pypath.utils.go.geneontology method)": [[1067, "pypath.utils.go.GeneOntology.get_all_ancestors"]], "get_all_descendants() (pypath.utils.go.geneontology method)": [[1067, "pypath.utils.go.GeneOntology.get_all_descendants"]], "get_aspect() (pypath.utils.go.geneontology method)": [[1067, "pypath.utils.go.GeneOntology.get_aspect"]], "get_name() (pypath.utils.go.geneontology method)": [[1067, "pypath.utils.go.GeneOntology.get_name"]], "get_term() (pypath.utils.go.geneontology method)": [[1067, "pypath.utils.go.GeneOntology.get_term"]], "highest() (pypath.utils.go.geneontology method)": [[1067, "pypath.utils.go.GeneOntology.highest"]], "is_leaf() (pypath.utils.go.geneontology method)": [[1067, "pypath.utils.go.GeneOntology.is_leaf"]], "is_name() (pypath.utils.go.geneontology method)": [[1067, "pypath.utils.go.GeneOntology.is_name"]], "is_root() (pypath.utils.go.geneontology method)": [[1067, "pypath.utils.go.GeneOntology.is_root"]], "is_term() (pypath.utils.go.geneontology method)": [[1067, "pypath.utils.go.GeneOntology.is_term"]], "lowest() (pypath.utils.go.geneontology method)": [[1067, "pypath.utils.go.GeneOntology.lowest"]], "names_to_terms() (pypath.utils.go.geneontology method)": [[1067, "pypath.utils.go.GeneOntology.names_to_terms"]], "names_to_terms_aspects() (pypath.utils.go.geneontology method)": [[1067, "pypath.utils.go.GeneOntology.names_to_terms_aspects"]], "reload() (pypath.utils.go.geneontology method)": [[1067, "pypath.utils.go.GeneOntology.reload"]], "set_of() (pypath.utils.go.geneontology method)": [[1067, "pypath.utils.go.GeneOntology.set_of"]], "set_of_names() (pypath.utils.go.geneontology method)": [[1067, "pypath.utils.go.GeneOntology.set_of_names"]], "set_of_terms() (pypath.utils.go.geneontology method)": [[1067, "pypath.utils.go.GeneOntology.set_of_terms"]], "subgraph_nodes() (pypath.utils.go.geneontology method)": [[1067, "pypath.utils.go.GeneOntology.subgraph_nodes"]], "terms_to_names() (pypath.utils.go.geneontology method)": [[1067, "pypath.utils.go.GeneOntology.terms_to_names"]], "terms_to_names_aspects() (pypath.utils.go.geneontology method)": [[1067, "pypath.utils.go.GeneOntology.terms_to_names_aspects"]], "annotate() (in module pypath.utils.go)": [[1068, "pypath.utils.go.annotate"]], "get_db() (in module pypath.utils.go)": [[1069, "pypath.utils.go.get_db"]], "init_db() (in module pypath.utils.go)": [[1070, "pypath.utils.go.init_db"]], "load_go() (in module pypath.utils.go)": [[1071, "pypath.utils.go.load_go"]], "pypath.utils.homology": [[1072, "module-pypath.utils.homology"]], "homologymanager (class in pypath.utils.homology)": [[1073, "pypath.utils.homology.HomologyManager"]], "__init__() (pypath.utils.homology.homologymanager method)": [[1073, "pypath.utils.homology.HomologyManager.__init__"]], "get_df() (pypath.utils.homology.homologymanager method)": [[1073, "pypath.utils.homology.HomologyManager.get_df"]], "get_dict() (pypath.utils.homology.homologymanager method)": [[1073, "pypath.utils.homology.HomologyManager.get_dict"]], "translate() (pypath.utils.homology.homologymanager method)": [[1073, "pypath.utils.homology.HomologyManager.translate"]], "translate_df() (pypath.utils.homology.homologymanager method)": [[1073, "pypath.utils.homology.HomologyManager.translate_df"]], "ortholog (class in pypath.utils.homology)": [[1074, "pypath.utils.homology.Ortholog"]], "__init__() (pypath.utils.homology.ortholog method)": [[1074, "pypath.utils.homology.Ortholog.__init__"]], "count() (pypath.utils.homology.ortholog method)": [[1074, "pypath.utils.homology.Ortholog.count"]], "ensembl_hc (pypath.utils.homology.ortholog attribute)": [[1074, "pypath.utils.homology.Ortholog.ensembl_hc"]], "ensembl_type (pypath.utils.homology.ortholog attribute)": [[1074, "pypath.utils.homology.Ortholog.ensembl_type"]], "index() (pypath.utils.homology.ortholog method)": [[1074, "pypath.utils.homology.Ortholog.index"]], "resource (pypath.utils.homology.ortholog attribute)": [[1074, "pypath.utils.homology.Ortholog.resource"]], "uniprot (pypath.utils.homology.ortholog attribute)": [[1074, "pypath.utils.homology.Ortholog.uniprot"]], "proteinhomology (class in pypath.utils.homology)": [[1075, "pypath.utils.homology.ProteinHomology"]], "__init__() (pypath.utils.homology.proteinhomology method)": [[1075, "pypath.utils.homology.ProteinHomology.__init__"]], "asdict() (pypath.utils.homology.proteinhomology method)": [[1075, "pypath.utils.homology.ProteinHomology.asdict"]], "df() (pypath.utils.homology.proteinhomology method)": [[1075, "pypath.utils.homology.ProteinHomology.df"]], "load_homologene() (pypath.utils.homology.proteinhomology method)": [[1075, "pypath.utils.homology.ProteinHomology.load_homologene"]], "translate() (pypath.utils.homology.proteinhomology method)": [[1075, "pypath.utils.homology.ProteinHomology.translate"]], "translate_df() (pypath.utils.homology.proteinhomology method)": [[1075, "pypath.utils.homology.ProteinHomology.translate_df"]], "proteomes (class in pypath.utils.homology)": [[1076, "pypath.utils.homology.Proteomes"]], "__init__() (pypath.utils.homology.proteomes method)": [[1076, "pypath.utils.homology.Proteomes.__init__"]], "ptmhomology (class in pypath.utils.homology)": [[1077, "pypath.utils.homology.PtmHomology"]], "__init__() (pypath.utils.homology.ptmhomology method)": [[1077, "pypath.utils.homology.PtmHomology.__init__"]], "asdict() (pypath.utils.homology.ptmhomology method)": [[1077, "pypath.utils.homology.PtmHomology.asdict"]], "df() (pypath.utils.homology.ptmhomology method)": [[1077, "pypath.utils.homology.PtmHomology.df"]], "load_homologene() (pypath.utils.homology.ptmhomology method)": [[1077, "pypath.utils.homology.PtmHomology.load_homologene"]], "ptm_orthology() (pypath.utils.homology.ptmhomology method)": [[1077, "pypath.utils.homology.PtmHomology.ptm_orthology"]], "translate() (pypath.utils.homology.ptmhomology method)": [[1077, "pypath.utils.homology.PtmHomology.translate"]], "translate_df() (pypath.utils.homology.ptmhomology method)": [[1077, "pypath.utils.homology.PtmHomology.translate_df"]], "translate_site() (pypath.utils.homology.ptmhomology method)": [[1077, "pypath.utils.homology.PtmHomology.translate_site"]], "sequencecontainer (class in pypath.utils.homology)": [[1078, "pypath.utils.homology.SequenceContainer"]], "__init__() (pypath.utils.homology.sequencecontainer method)": [[1078, "pypath.utils.homology.SequenceContainer.__init__"]], "get_df() (in module pypath.utils.homology)": [[1079, "pypath.utils.homology.get_df"]], "get_dict() (in module pypath.utils.homology)": [[1080, "pypath.utils.homology.get_dict"]], "get_manager() (in module pypath.utils.homology)": [[1081, "pypath.utils.homology.get_manager"]], "init() (in module pypath.utils.homology)": [[1082, "pypath.utils.homology.init"]], "translate() (in module pypath.utils.homology)": [[1083, "pypath.utils.homology.translate"]], "translate_df() (in module pypath.utils.homology)": [[1084, "pypath.utils.homology.translate_df"]], "pypath.utils.mapping": [[1085, "module-pypath.utils.mapping"]], "mapreader (class in pypath.utils.mapping)": [[1086, "pypath.utils.mapping.MapReader"]], "__init__() (pypath.utils.mapping.mapreader method)": [[1086, "pypath.utils.mapping.MapReader.__init__"]], "id_type_side() (pypath.utils.mapping.mapreader method)": [[1086, "pypath.utils.mapping.MapReader.id_type_side"]], "load() (pypath.utils.mapping.mapreader method)": [[1086, "pypath.utils.mapping.MapReader.load"]], "mapping_table_a_to_b (pypath.utils.mapping.mapreader property)": [[1086, "pypath.utils.mapping.MapReader.mapping_table_a_to_b"]], "mapping_table_b_to_a (pypath.utils.mapping.mapreader property)": [[1086, "pypath.utils.mapping.MapReader.mapping_table_b_to_a"]], "read() (pypath.utils.mapping.mapreader method)": [[1086, "pypath.utils.mapping.MapReader.read"]], "read_cache() (pypath.utils.mapping.mapreader method)": [[1086, "pypath.utils.mapping.MapReader.read_cache"]], "read_mapping_array() (pypath.utils.mapping.mapreader method)": [[1086, "pypath.utils.mapping.MapReader.read_mapping_array"]], "read_mapping_biomart() (pypath.utils.mapping.mapreader method)": [[1086, "pypath.utils.mapping.MapReader.read_mapping_biomart"]], "read_mapping_file() (pypath.utils.mapping.mapreader method)": [[1086, "pypath.utils.mapping.MapReader.read_mapping_file"]], "read_mapping_unichem() (pypath.utils.mapping.mapreader method)": [[1086, "pypath.utils.mapping.MapReader.read_mapping_unichem"]], "read_mapping_uniprot() (pypath.utils.mapping.mapreader method)": [[1086, "pypath.utils.mapping.MapReader.read_mapping_uniprot"]], "read_mapping_uniprot_list() (pypath.utils.mapping.mapreader method)": [[1086, "pypath.utils.mapping.MapReader.read_mapping_uniprot_list"]], "set_uniprot_space() (pypath.utils.mapping.mapreader method)": [[1086, "pypath.utils.mapping.MapReader.set_uniprot_space"]], "setup_cache() (pypath.utils.mapping.mapreader method)": [[1086, "pypath.utils.mapping.MapReader.setup_cache"]], "tables_loaded() (pypath.utils.mapping.mapreader method)": [[1086, "pypath.utils.mapping.MapReader.tables_loaded"]], "write_cache() (pypath.utils.mapping.mapreader method)": [[1086, "pypath.utils.mapping.MapReader.write_cache"]], "mapper (class in pypath.utils.mapping)": [[1087, "pypath.utils.mapping.Mapper"]], "__init__() (pypath.utils.mapping.mapper method)": [[1087, "pypath.utils.mapping.Mapper.__init__"]], "chain_map() (pypath.utils.mapping.mapper method)": [[1087, "pypath.utils.mapping.Mapper.chain_map"]], "create_reverse() (pypath.utils.mapping.mapper method)": [[1087, "pypath.utils.mapping.Mapper.create_reverse"]], "get_table_key() (pypath.utils.mapping.mapper method)": [[1087, "pypath.utils.mapping.Mapper.get_table_key"]], "guess_type() (pypath.utils.mapping.mapper method)": [[1087, "pypath.utils.mapping.Mapper.guess_type"]], "has_mapping_table() (pypath.utils.mapping.mapper method)": [[1087, "pypath.utils.mapping.Mapper.has_mapping_table"]], "id_types() (pypath.utils.mapping.mapper class method)": [[1087, "pypath.utils.mapping.Mapper.id_types"]], "identifier() (pypath.utils.mapping.mapper method)": [[1087, "pypath.utils.mapping.Mapper.identifier"]], "label() (pypath.utils.mapping.mapper method)": [[1087, "pypath.utils.mapping.Mapper.label"]], "load_genesymbol5() (pypath.utils.mapping.mapper method)": [[1087, "pypath.utils.mapping.Mapper.load_genesymbol5"]], "load_mapping() (pypath.utils.mapping.mapper method)": [[1087, "pypath.utils.mapping.Mapper.load_mapping"]], "load_uniprot_static() (pypath.utils.mapping.mapper method)": [[1087, "pypath.utils.mapping.Mapper.load_uniprot_static"]], "map_name() (pypath.utils.mapping.mapper method)": [[1087, "pypath.utils.mapping.Mapper.map_name"]], "map_name0() (pypath.utils.mapping.mapper method)": [[1087, "pypath.utils.mapping.Mapper.map_name0"]], "map_names() (pypath.utils.mapping.mapper method)": [[1087, "pypath.utils.mapping.Mapper.map_names"]], "mapping_tables() (pypath.utils.mapping.mapper static method)": [[1087, "pypath.utils.mapping.Mapper.mapping_tables"]], "only_uniprot_ac() (pypath.utils.mapping.mapper method)": [[1087, "pypath.utils.mapping.Mapper.only_uniprot_ac"]], "other_organism_uniprot() (pypath.utils.mapping.mapper method)": [[1087, "pypath.utils.mapping.Mapper.other_organism_uniprot"]], "primary_uniprot() (pypath.utils.mapping.mapper method)": [[1087, "pypath.utils.mapping.Mapper.primary_uniprot"]], "reload() (pypath.utils.mapping.mapper method)": [[1087, "pypath.utils.mapping.Mapper.reload"]], "remove_expired() (pypath.utils.mapping.mapper method)": [[1087, "pypath.utils.mapping.Mapper.remove_expired"]], "remove_key() (pypath.utils.mapping.mapper method)": [[1087, "pypath.utils.mapping.Mapper.remove_key"]], "remove_table() (pypath.utils.mapping.mapper method)": [[1087, "pypath.utils.mapping.Mapper.remove_table"]], "reverse_key() (pypath.utils.mapping.mapper method)": [[1087, "pypath.utils.mapping.Mapper.reverse_key"]], "reverse_mapping() (pypath.utils.mapping.mapper static method)": [[1087, "pypath.utils.mapping.Mapper.reverse_mapping"]], "swissprots() (pypath.utils.mapping.mapper method)": [[1087, "pypath.utils.mapping.Mapper.swissprots"]], "translate_deleted_uniprot_by_genesymbol() (pypath.utils.mapping.mapper method)": [[1087, "pypath.utils.mapping.Mapper.translate_deleted_uniprot_by_genesymbol"]], "trembl_swissprot() (pypath.utils.mapping.mapper method)": [[1087, "pypath.utils.mapping.Mapper.trembl_swissprot"]], "uniprot_cleanup() (pypath.utils.mapping.mapper method)": [[1087, "pypath.utils.mapping.Mapper.uniprot_cleanup"]], "valid_uniprot() (pypath.utils.mapping.mapper method)": [[1087, "pypath.utils.mapping.Mapper.valid_uniprot"]], "which_table() (pypath.utils.mapping.mapper method)": [[1087, "pypath.utils.mapping.Mapper.which_table"]], "mappingtable (class in pypath.utils.mapping)": [[1088, "pypath.utils.mapping.MappingTable"]], "__init__() (pypath.utils.mapping.mappingtable method)": [[1088, "pypath.utils.mapping.MappingTable.__init__"]], "get_key() (pypath.utils.mapping.mappingtable method)": [[1088, "pypath.utils.mapping.MappingTable.get_key"]], "mappingtablekey (class in pypath.utils.mapping)": [[1089, "pypath.utils.mapping.MappingTableKey"]], "__init__() (pypath.utils.mapping.mappingtablekey method)": [[1089, "pypath.utils.mapping.MappingTableKey.__init__"]], "count() (pypath.utils.mapping.mappingtablekey method)": [[1089, "pypath.utils.mapping.MappingTableKey.count"]], "id_type (pypath.utils.mapping.mappingtablekey attribute)": [[1089, "pypath.utils.mapping.MappingTableKey.id_type"]], "index() (pypath.utils.mapping.mappingtablekey method)": [[1089, "pypath.utils.mapping.MappingTableKey.index"]], "ncbi_tax_id (pypath.utils.mapping.mappingtablekey attribute)": [[1089, "pypath.utils.mapping.MappingTableKey.ncbi_tax_id"]], "target_id_type (pypath.utils.mapping.mappingtablekey attribute)": [[1089, "pypath.utils.mapping.MappingTableKey.target_id_type"]], "uniprot_id_types (in module pypath.utils.mapping)": [[1090, "pypath.utils.mapping.UNIPROT_ID_TYPES"]], "get_mapper() (in module pypath.utils.mapping)": [[1091, "pypath.utils.mapping.get_mapper"]], "guess_type() (in module pypath.utils.mapping)": [[1092, "pypath.utils.mapping.guess_type"]], "id_from_label() (in module pypath.utils.mapping)": [[1093, "pypath.utils.mapping.id_from_label"]], "id_from_label0() (in module pypath.utils.mapping)": [[1094, "pypath.utils.mapping.id_from_label0"]], "init() (in module pypath.utils.mapping)": [[1095, "pypath.utils.mapping.init"]], "label() (in module pypath.utils.mapping)": [[1096, "pypath.utils.mapping.label"]], "map_name() (in module pypath.utils.mapping)": [[1097, "pypath.utils.mapping.map_name"]], "map_name0() (in module pypath.utils.mapping)": [[1098, "pypath.utils.mapping.map_name0"]], "map_names() (in module pypath.utils.mapping)": [[1099, "pypath.utils.mapping.map_names"]], "pypath.utils.pdb": [[1100, "module-pypath.utils.pdb"]], "residue (class in pypath.utils.pdb)": [[1101, "pypath.utils.pdb.Residue"]], "__init__() (pypath.utils.pdb.residue method)": [[1101, "pypath.utils.pdb.Residue.__init__"]], "chain (pypath.utils.pdb.residue attribute)": [[1101, "pypath.utils.pdb.Residue.chain"]], "count() (pypath.utils.pdb.residue method)": [[1101, "pypath.utils.pdb.Residue.count"]], "index() (pypath.utils.pdb.residue method)": [[1101, "pypath.utils.pdb.Residue.index"]], "offset (pypath.utils.pdb.residue attribute)": [[1101, "pypath.utils.pdb.Residue.offset"]], "resnum (pypath.utils.pdb.residue attribute)": [[1101, "pypath.utils.pdb.Residue.resnum"]], "uniprot (pypath.utils.pdb.residue attribute)": [[1101, "pypath.utils.pdb.Residue.uniprot"]], "residuemapper (class in pypath.utils.pdb)": [[1102, "pypath.utils.pdb.ResidueMapper"]], "__init__() (pypath.utils.pdb.residuemapper method)": [[1102, "pypath.utils.pdb.ResidueMapper.__init__"]], "clean() (pypath.utils.pdb.residuemapper method)": [[1102, "pypath.utils.pdb.ResidueMapper.clean"]], "get_residue() (pypath.utils.pdb.residuemapper method)": [[1102, "pypath.utils.pdb.ResidueMapper.get_residue"]], "load_mapping() (pypath.utils.pdb.residuemapper method)": [[1102, "pypath.utils.pdb.ResidueMapper.load_mapping"]], "segment (class in pypath.utils.pdb)": [[1103, "pypath.utils.pdb.Segment"]], "__init__() (pypath.utils.pdb.segment method)": [[1103, "pypath.utils.pdb.Segment.__init__"]], "count() (pypath.utils.pdb.segment method)": [[1103, "pypath.utils.pdb.Segment.count"]], "index() (pypath.utils.pdb.segment method)": [[1103, "pypath.utils.pdb.Segment.index"]], "pdb_end (pypath.utils.pdb.segment attribute)": [[1103, "pypath.utils.pdb.Segment.pdb_end"]], "pdb_start (pypath.utils.pdb.segment attribute)": [[1103, "pypath.utils.pdb.Segment.pdb_start"]], "uniprot (pypath.utils.pdb.segment attribute)": [[1103, "pypath.utils.pdb.Segment.uniprot"]], "uniprot_end (pypath.utils.pdb.segment attribute)": [[1103, "pypath.utils.pdb.Segment.uniprot_end"]], "uniprot_start (pypath.utils.pdb.segment attribute)": [[1103, "pypath.utils.pdb.Segment.uniprot_start"]], "residue_pdb() (in module pypath.utils.pdb)": [[1104, "pypath.utils.pdb.residue_pdb"]], "pypath.utils.proteomicsdb": [[1105, "module-pypath.utils.proteomicsdb"]], "proteomicsdb (class in pypath.utils.proteomicsdb)": [[1106, "pypath.utils.proteomicsdb.ProteomicsDB"]], "__init__() (pypath.utils.proteomicsdb.proteomicsdb method)": [[1106, "pypath.utils.proteomicsdb.ProteomicsDB.__init__"]], "get_expression() (pypath.utils.proteomicsdb.proteomicsdb method)": [[1106, "pypath.utils.proteomicsdb.ProteomicsDB.get_expression"]], "get_pieces() (pypath.utils.proteomicsdb.proteomicsdb method)": [[1106, "pypath.utils.proteomicsdb.ProteomicsDB.get_pieces"]], "get_proteins() (pypath.utils.proteomicsdb.proteomicsdb method)": [[1106, "pypath.utils.proteomicsdb.ProteomicsDB.get_proteins"]], "get_tissues() (pypath.utils.proteomicsdb.proteomicsdb method)": [[1106, "pypath.utils.proteomicsdb.ProteomicsDB.get_tissues"]], "pandas_matrix() (pypath.utils.proteomicsdb.proteomicsdb method)": [[1106, "pypath.utils.proteomicsdb.ProteomicsDB.pandas_matrix"]], "query() (pypath.utils.proteomicsdb.proteomicsdb method)": [[1106, "pypath.utils.proteomicsdb.ProteomicsDB.query"]], "tissues_x_proteins() (pypath.utils.proteomicsdb.proteomicsdb method)": [[1106, "pypath.utils.proteomicsdb.ProteomicsDB.tissues_x_proteins"]], "pypath.utils.pyreact": [[1107, "module-pypath.utils.pyreact"]], "attributehandler (class in pypath.utils.pyreact)": [[1108, "pypath.utils.pyreact.AttributeHandler"]], "__init__() (pypath.utils.pyreact.attributehandler method)": [[1108, "pypath.utils.pyreact.AttributeHandler.__init__"]], "biopaxreader (class in pypath.utils.pyreact)": [[1109, "pypath.utils.pyreact.BioPaxReader"]], "__init__() (pypath.utils.pyreact.biopaxreader method)": [[1109, "pypath.utils.pyreact.BioPaxReader.__init__"]], "biopax_size() (pypath.utils.pyreact.biopaxreader method)": [[1109, "pypath.utils.pyreact.BioPaxReader.biopax_size"]], "cleanup_hook() (pypath.utils.pyreact.biopaxreader method)": [[1109, "pypath.utils.pyreact.BioPaxReader.cleanup_hook"]], "close_biopax() (pypath.utils.pyreact.biopaxreader method)": [[1109, "pypath.utils.pyreact.BioPaxReader.close_biopax"]], "extract() (pypath.utils.pyreact.biopaxreader method)": [[1109, "pypath.utils.pyreact.BioPaxReader.extract"]], "init_etree() (pypath.utils.pyreact.biopaxreader method)": [[1109, "pypath.utils.pyreact.BioPaxReader.init_etree"]], "iterate() (pypath.utils.pyreact.biopaxreader method)": [[1109, "pypath.utils.pyreact.BioPaxReader.iterate"]], "open_biopax() (pypath.utils.pyreact.biopaxreader method)": [[1109, "pypath.utils.pyreact.BioPaxReader.open_biopax"]], "process() (pypath.utils.pyreact.biopaxreader method)": [[1109, "pypath.utils.pyreact.BioPaxReader.process"]], "set_progress() (pypath.utils.pyreact.biopaxreader method)": [[1109, "pypath.utils.pyreact.BioPaxReader.set_progress"]], "complex (class in pypath.utils.pyreact)": [[1110, "pypath.utils.pyreact.Complex"]], "__init__() (pypath.utils.pyreact.complex method)": [[1110, "pypath.utils.pyreact.Complex.__init__"]], "complexvariations (class in pypath.utils.pyreact)": [[1111, "pypath.utils.pyreact.ComplexVariations"]], "__init__() (pypath.utils.pyreact.complexvariations method)": [[1111, "pypath.utils.pyreact.ComplexVariations.__init__"]], "itermembers() (pypath.utils.pyreact.complexvariations method)": [[1111, "pypath.utils.pyreact.ComplexVariations.itermembers"]], "control (class in pypath.utils.pyreact)": [[1112, "pypath.utils.pyreact.Control"]], "__init__() (pypath.utils.pyreact.control method)": [[1112, "pypath.utils.pyreact.Control.__init__"]], "entity (class in pypath.utils.pyreact)": [[1113, "pypath.utils.pyreact.Entity"]], "__init__() (pypath.utils.pyreact.entity method)": [[1113, "pypath.utils.pyreact.Entity.__init__"]], "expand() (pypath.utils.pyreact.entity method)": [[1113, "pypath.utils.pyreact.Entity.expand"]], "entityset (class in pypath.utils.pyreact)": [[1114, "pypath.utils.pyreact.EntitySet"]], "__init__() (pypath.utils.pyreact.entityset method)": [[1114, "pypath.utils.pyreact.EntitySet.__init__"]], "intersecting (class in pypath.utils.pyreact)": [[1115, "pypath.utils.pyreact.Intersecting"]], "__init__() (pypath.utils.pyreact.intersecting method)": [[1115, "pypath.utils.pyreact.Intersecting.__init__"]], "protein (class in pypath.utils.pyreact)": [[1116, "pypath.utils.pyreact.Protein"]], "__init__() (pypath.utils.pyreact.protein method)": [[1116, "pypath.utils.pyreact.Protein.__init__"]], "expand() (pypath.utils.pyreact.protein method)": [[1116, "pypath.utils.pyreact.Protein.expand"]], "proteinfamily (class in pypath.utils.pyreact)": [[1117, "pypath.utils.pyreact.ProteinFamily"]], "__init__() (pypath.utils.pyreact.proteinfamily method)": [[1117, "pypath.utils.pyreact.ProteinFamily.__init__"]], "pyreact (class in pypath.utils.pyreact)": [[1118, "pypath.utils.pyreact.PyReact"]], "__init__() (pypath.utils.pyreact.pyreact method)": [[1118, "pypath.utils.pyreact.PyReact.__init__"]], "gen_cvariations() (pypath.utils.pyreact.pyreact method)": [[1118, "pypath.utils.pyreact.PyReact.gen_cvariations"]], "in_same_component() (pypath.utils.pyreact.pyreact method)": [[1118, "pypath.utils.pyreact.PyReact.in_same_component"]], "merge_complexes() (pypath.utils.pyreact.pyreact method)": [[1118, "pypath.utils.pyreact.PyReact.merge_complexes"]], "merge_cvariations() (pypath.utils.pyreact.pyreact method)": [[1118, "pypath.utils.pyreact.PyReact.merge_cvariations"]], "reaction (class in pypath.utils.pyreact)": [[1119, "pypath.utils.pyreact.Reaction"]], "__init__() (pypath.utils.pyreact.reaction method)": [[1119, "pypath.utils.pyreact.Reaction.__init__"]], "reactionside (class in pypath.utils.pyreact)": [[1120, "pypath.utils.pyreact.ReactionSide"]], "__init__() (pypath.utils.pyreact.reactionside method)": [[1120, "pypath.utils.pyreact.ReactionSide.__init__"]], "expand() (pypath.utils.pyreact.reactionside method)": [[1120, "pypath.utils.pyreact.ReactionSide.expand"]], "reference (class in pypath.utils.pyreact)": [[1121, "pypath.utils.pyreact.Reference"]], "__init__() (pypath.utils.pyreact.reference method)": [[1121, "pypath.utils.pyreact.Reference.__init__"]], "expand() (pypath.utils.pyreact.reference method)": [[1121, "pypath.utils.pyreact.Reference.expand"]], "pypath.utils.reflists": [[1122, "module-pypath.utils.reflists"]], "referencelistmanager (class in pypath.utils.reflists)": [[1123, "pypath.utils.reflists.ReferenceListManager"]], "__init__() (pypath.utils.reflists.referencelistmanager method)": [[1123, "pypath.utils.reflists.ReferenceListManager.__init__"]], "check() (pypath.utils.reflists.referencelistmanager method)": [[1123, "pypath.utils.reflists.ReferenceListManager.check"]], "is_not() (pypath.utils.reflists.referencelistmanager method)": [[1123, "pypath.utils.reflists.ReferenceListManager.is_not"]], "select() (pypath.utils.reflists.referencelistmanager method)": [[1123, "pypath.utils.reflists.ReferenceListManager.select"]], "check() (in module pypath.utils.reflists)": [[1124, "pypath.utils.reflists.check"]], "get_manager() (in module pypath.utils.reflists)": [[1125, "pypath.utils.reflists.get_manager"]], "get_reflist() (in module pypath.utils.reflists)": [[1126, "pypath.utils.reflists.get_reflist"]], "init() (in module pypath.utils.reflists)": [[1127, "pypath.utils.reflists.init"]], "is_not() (in module pypath.utils.reflists)": [[1128, "pypath.utils.reflists.is_not"]], "select() (in module pypath.utils.reflists)": [[1129, "pypath.utils.reflists.select"]], "pypath.utils.residues": [[1130, "module-pypath.utils.residues"]], "residuemapper (class in pypath.utils.residues)": [[1131, "pypath.utils.residues.ResidueMapper"]], "__init__() (pypath.utils.residues.residuemapper method)": [[1131, "pypath.utils.residues.ResidueMapper.__init__"]], "clean() (pypath.utils.residues.residuemapper method)": [[1131, "pypath.utils.residues.ResidueMapper.clean"]], "pypath.utils.seq": [[1132, "module-pypath.utils.seq"]], "pfam (class in pypath.utils.seq)": [[1133, "pypath.utils.seq.Pfam"]], "__init__() (pypath.utils.seq.pfam method)": [[1133, "pypath.utils.seq.Pfam.__init__"]], "iterdb() (pypath.utils.seq.pfam method)": [[1133, "pypath.utils.seq.Pfam.iterdb"]], "iterprotein() (pypath.utils.seq.pfam method)": [[1133, "pypath.utils.seq.Pfam.iterprotein"]], "load() (pypath.utils.seq.pfam method)": [[1133, "pypath.utils.seq.Pfam.load"]], "processor() (pypath.utils.seq.pfam method)": [[1133, "pypath.utils.seq.Pfam.processor"]], "unload() (pypath.utils.seq.pfam method)": [[1133, "pypath.utils.seq.Pfam.unload"]], "resource (class in pypath.utils.seq)": [[1134, "pypath.utils.seq.Resource"]], "__init__() (pypath.utils.seq.resource method)": [[1134, "pypath.utils.seq.Resource.__init__"]], "iterdb() (pypath.utils.seq.resource method)": [[1134, "pypath.utils.seq.Resource.iterdb"]], "iterprotein() (pypath.utils.seq.resource method)": [[1134, "pypath.utils.seq.Resource.iterprotein"]], "load() (pypath.utils.seq.resource method)": [[1134, "pypath.utils.seq.Resource.load"]], "processor() (pypath.utils.seq.resource method)": [[1134, "pypath.utils.seq.Resource.processor"]], "unload() (pypath.utils.seq.resource method)": [[1134, "pypath.utils.seq.Resource.unload"]], "seq (class in pypath.utils.seq)": [[1135, "pypath.utils.seq.Seq"]], "__init__() (pypath.utils.seq.seq method)": [[1135, "pypath.utils.seq.Seq.__init__"]], "findall() (pypath.utils.seq.seq method)": [[1135, "pypath.utils.seq.Seq.findall"]], "get_isoforms() (in module pypath.utils.seq)": [[1136, "pypath.utils.seq.get_isoforms"]], "read_fasta() (in module pypath.utils.seq)": [[1137, "pypath.utils.seq.read_fasta"]], "swissprot_seq() (in module pypath.utils.seq)": [[1138, "pypath.utils.seq.swissprot_seq"]], "pypath.utils.taxonomy": [[1139, "module-pypath.utils.taxonomy"]], "ensure_common_name() (in module pypath.utils.taxonomy)": [[1140, "pypath.utils.taxonomy.ensure_common_name"]], "ensure_ensembl_name() (in module pypath.utils.taxonomy)": [[1141, "pypath.utils.taxonomy.ensure_ensembl_name"]], "ensure_latin_name() (in module pypath.utils.taxonomy)": [[1142, "pypath.utils.taxonomy.ensure_latin_name"]], "ensure_ncbi_tax_id() (in module pypath.utils.taxonomy)": [[1143, "pypath.utils.taxonomy.ensure_ncbi_tax_id"]], "get_db() (in module pypath.utils.taxonomy)": [[1144, "pypath.utils.taxonomy.get_db"]], "init_db() (in module pypath.utils.taxonomy)": [[1145, "pypath.utils.taxonomy.init_db"]], "short_latin_names() (in module pypath.utils.taxonomy)": [[1146, "pypath.utils.taxonomy.short_latin_names"]], "shorten_latin_name() (in module pypath.utils.taxonomy)": [[1147, "pypath.utils.taxonomy.shorten_latin_name"]], "taxid_from_common_name() (in module pypath.utils.taxonomy)": [[1148, "pypath.utils.taxonomy.taxid_from_common_name"]], "taxid_from_dbptm_taxon_name() (in module pypath.utils.taxonomy)": [[1149, "pypath.utils.taxonomy.taxid_from_dbptm_taxon_name"]], "taxid_from_ensembl_name() (in module pypath.utils.taxonomy)": [[1150, "pypath.utils.taxonomy.taxid_from_ensembl_name"]], "taxid_from_latin_name() (in module pypath.utils.taxonomy)": [[1151, "pypath.utils.taxonomy.taxid_from_latin_name"]], "taxid_from_nonstandard() (in module pypath.utils.taxonomy)": [[1152, "pypath.utils.taxonomy.taxid_from_nonstandard"]], "uniprot_taxid() (in module pypath.utils.taxonomy)": [[1153, "pypath.utils.taxonomy.uniprot_taxid"]], "pypath.utils.unichem": [[1154, "module-pypath.utils.unichem"]], "unichem (class in pypath.utils.unichem)": [[1155, "pypath.utils.unichem.Unichem"]], "__init__() (pypath.utils.unichem.unichem method)": [[1155, "pypath.utils.unichem.Unichem.__init__"]], "connectivity_search() (pypath.utils.unichem.unichem method)": [[1155, "pypath.utils.unichem.Unichem.connectivity_search"]], "inchikey2anything() (pypath.utils.unichem.unichem method)": [[1155, "pypath.utils.unichem.Unichem.inchikey2anything"]], "info() (pypath.utils.unichem.unichem static method)": [[1155, "pypath.utils.unichem.Unichem.info"]], "smiles2chembl() (pypath.utils.unichem.unichem method)": [[1155, "pypath.utils.unichem.Unichem.smiles2chembl"]], "translate() (pypath.utils.unichem.unichem method)": [[1155, "pypath.utils.unichem.Unichem.translate"]], "usage() (pypath.utils.unichem.unichem method)": [[1155, "pypath.utils.unichem.Unichem.usage"]], "pypath.utils.uniprot": [[1156, "module-pypath.utils.uniprot"]], "uniprotprotein (class in pypath.utils.uniprot)": [[1157, "pypath.utils.uniprot.UniprotProtein"]], "__init__() (pypath.utils.uniprot.uniprotprotein method)": [[1157, "pypath.utils.uniprot.UniprotProtein.__init__"]], "databases (pypath.utils.uniprot.uniprotprotein property)": [[1157, "pypath.utils.uniprot.UniprotProtein.databases"]], "info_section() (pypath.utils.uniprot.uniprotprotein method)": [[1157, "pypath.utils.uniprot.UniprotProtein.info_section"]], "keywords (pypath.utils.uniprot.uniprotprotein property)": [[1157, "pypath.utils.uniprot.UniprotProtein.keywords"]], "keywords_with_xrefs (pypath.utils.uniprot.uniprotprotein property)": [[1157, "pypath.utils.uniprot.UniprotProtein.keywords_with_xrefs"]], "length (pypath.utils.uniprot.uniprotprotein property)": [[1157, "pypath.utils.uniprot.UniprotProtein.length"]], "lengths (pypath.utils.uniprot.uniprotprotein property)": [[1157, "pypath.utils.uniprot.UniprotProtein.lengths"]], "sequence (pypath.utils.uniprot.uniprotprotein property)": [[1157, "pypath.utils.uniprot.UniprotProtein.sequence"]], "weight (pypath.utils.uniprot.uniprotprotein property)": [[1157, "pypath.utils.uniprot.UniprotProtein.weight"]], "weights (pypath.utils.uniprot.uniprotprotein property)": [[1157, "pypath.utils.uniprot.UniprotProtein.weights"]], "ac() (in module pypath.utils.uniprot)": [[1158, "pypath.utils.uniprot.ac"]], "activity_regulation() (in module pypath.utils.uniprot)": [[1159, "pypath.utils.uniprot.activity_regulation"]], "activity_regulation_with_xrefs() (in module pypath.utils.uniprot)": [[1160, "pypath.utils.uniprot.activity_regulation_with_xrefs"]], "alternative_products() (in module pypath.utils.uniprot)": [[1161, "pypath.utils.uniprot.alternative_products"]], "alternative_products_with_xrefs() (in module pypath.utils.uniprot)": [[1162, "pypath.utils.uniprot.alternative_products_with_xrefs"]], "browse() (in module pypath.utils.uniprot)": [[1163, "pypath.utils.uniprot.browse"]], "catalytic_activity() (in module pypath.utils.uniprot)": [[1164, "pypath.utils.uniprot.catalytic_activity"]], "catalytic_activity_with_xrefs() (in module pypath.utils.uniprot)": [[1165, "pypath.utils.uniprot.catalytic_activity_with_xrefs"]], "collect() (in module pypath.utils.uniprot)": [[1166, "pypath.utils.uniprot.collect"]], "databases() (in module pypath.utils.uniprot)": [[1167, "pypath.utils.uniprot.databases"]], "disease() (in module pypath.utils.uniprot)": [[1168, "pypath.utils.uniprot.disease"]], "disease_with_xrefs() (in module pypath.utils.uniprot)": [[1169, "pypath.utils.uniprot.disease_with_xrefs"]], "ec() (in module pypath.utils.uniprot)": [[1170, "pypath.utils.uniprot.ec"]], "features_table() (in module pypath.utils.uniprot)": [[1171, "pypath.utils.uniprot.features_table"]], "full_name() (in module pypath.utils.uniprot)": [[1172, "pypath.utils.uniprot.full_name"]], "function() (in module pypath.utils.uniprot)": [[1173, "pypath.utils.uniprot.function"]], "function_genecards() (in module pypath.utils.uniprot)": [[1174, "pypath.utils.uniprot.function_genecards"]], "function_or_genecards() (in module pypath.utils.uniprot)": [[1175, "pypath.utils.uniprot.function_or_genecards"]], "function_with_genecards() (in module pypath.utils.uniprot)": [[1176, "pypath.utils.uniprot.function_with_genecards"]], "function_with_xrefs() (in module pypath.utils.uniprot)": [[1177, "pypath.utils.uniprot.function_with_xrefs"]], "genesymbol() (in module pypath.utils.uniprot)": [[1178, "pypath.utils.uniprot.genesymbol"]], "has_tag() (in module pypath.utils.uniprot)": [[1179, "pypath.utils.uniprot.has_tag"]], "id() (in module pypath.utils.uniprot)": [[1180, "pypath.utils.uniprot.id"]], "info() (in module pypath.utils.uniprot)": [[1181, "pypath.utils.uniprot.info"]], "info_section() (in module pypath.utils.uniprot)": [[1182, "pypath.utils.uniprot.info_section"]], "interaction() (in module pypath.utils.uniprot)": [[1183, "pypath.utils.uniprot.interaction"]], "interaction_with_xrefs() (in module pypath.utils.uniprot)": [[1184, "pypath.utils.uniprot.interaction_with_xrefs"]], "is_reviewed() (in module pypath.utils.uniprot)": [[1185, "pypath.utils.uniprot.is_reviewed"]], "itertag() (in module pypath.utils.uniprot)": [[1186, "pypath.utils.uniprot.itertag"]], "keywords() (in module pypath.utils.uniprot)": [[1187, "pypath.utils.uniprot.keywords"]], "keywords_with_xrefs() (in module pypath.utils.uniprot)": [[1188, "pypath.utils.uniprot.keywords_with_xrefs"]], "length() (in module pypath.utils.uniprot)": [[1189, "pypath.utils.uniprot.length"]], "lengths() (in module pypath.utils.uniprot)": [[1190, "pypath.utils.uniprot.lengths"]], "load() (in module pypath.utils.uniprot)": [[1191, "pypath.utils.uniprot.load"]], "organism() (in module pypath.utils.uniprot)": [[1192, "pypath.utils.uniprot.organism"]], "print_features() (in module pypath.utils.uniprot)": [[1193, "pypath.utils.uniprot.print_features"]], "ptm() (in module pypath.utils.uniprot)": [[1194, "pypath.utils.uniprot.ptm"]], "ptm_with_xrefs() (in module pypath.utils.uniprot)": [[1195, "pypath.utils.uniprot.ptm_with_xrefs"]], "query() (in module pypath.utils.uniprot)": [[1196, "pypath.utils.uniprot.query"]], "reload() (in module pypath.utils.uniprot)": [[1197, "pypath.utils.uniprot.reload"]], "remove_xrefs() (in module pypath.utils.uniprot)": [[1198, "pypath.utils.uniprot.remove_xrefs"]], "sequence() (in module pypath.utils.uniprot)": [[1199, "pypath.utils.uniprot.sequence"]], "sequence_caution() (in module pypath.utils.uniprot)": [[1200, "pypath.utils.uniprot.sequence_caution"]], "sequence_caution_with_xrefs() (in module pypath.utils.uniprot)": [[1201, "pypath.utils.uniprot.sequence_caution_with_xrefs"]], "similarity() (in module pypath.utils.uniprot)": [[1202, "pypath.utils.uniprot.similarity"]], "similarity_with_xrefs() (in module pypath.utils.uniprot)": [[1203, "pypath.utils.uniprot.similarity_with_xrefs"]], "subcellular_location() (in module pypath.utils.uniprot)": [[1204, "pypath.utils.uniprot.subcellular_location"]], "subcellular_location_with_xrefs() (in module pypath.utils.uniprot)": [[1205, "pypath.utils.uniprot.subcellular_location_with_xrefs"]], "subunit() (in module pypath.utils.uniprot)": [[1206, "pypath.utils.uniprot.subunit"]], "subunit_with_xrefs() (in module pypath.utils.uniprot)": [[1207, "pypath.utils.uniprot.subunit_with_xrefs"]], "tissue_specificity() (in module pypath.utils.uniprot)": [[1208, "pypath.utils.uniprot.tissue_specificity"]], "tissue_specificity_with_xrefs() (in module pypath.utils.uniprot)": [[1209, "pypath.utils.uniprot.tissue_specificity_with_xrefs"]], "update_databases() (in module pypath.utils.uniprot)": [[1210, "pypath.utils.uniprot.update_databases"]], "update_info() (in module pypath.utils.uniprot)": [[1211, "pypath.utils.uniprot.update_info"]], "web_resource() (in module pypath.utils.uniprot)": [[1212, "pypath.utils.uniprot.web_resource"]], "web_resource_with_xrefs() (in module pypath.utils.uniprot)": [[1213, "pypath.utils.uniprot.web_resource_with_xrefs"]], "weight() (in module pypath.utils.uniprot)": [[1214, "pypath.utils.uniprot.weight"]], "weights() (in module pypath.utils.uniprot)": [[1215, "pypath.utils.uniprot.weights"]], "pypath.visual": [[1216, "module-pypath.visual"]]}})